// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6495

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 663,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 516,
	-2, 0,
	-1, 61,
	92, 663,
	145, 663,
	310, 663,
	311, 663,
	-2, 0,
	-1, 72,
	103, 638,
	112, 638,
	153, 638,
	172, 638,
	197, 638,
	203, 638,
	307, 638,
	-2, 627,
	-1, 104,
	4, 665,
	20, 665,
	21, 665,
	23, 665,
	28, 665,
	33, 665,
	34, 665,
	35, 665,
	36, 665,
	37, 665,
	38, 665,
	39, 665,
	40, 665,
	41, 665,
	42, 665,
	44, 665,
	45, 665,
	46, 665,
	47, 665,
	48, 665,
	51, 665,
	52, 665,
	53, 665,
	55, 665,
	56, 665,
	60, 665,
	61, 665,
	62, 665,
	64, 665,
	66, 665,
	67, 665,
	68, 665,
	71, 665,
	72, 665,
	73, 665,
	81, 665,
	82, 665,
	83, 665,
	84, 665,
	85, 665,
	86, 665,
	87, 665,
	88, 665,
	90, 665,
	92, 665,
	94, 665,
	97, 665,
	98, 665,
	100, 665,
	104, 665,
	105, 665,
	106, 665,
	107, 665,
	108, 665,
	109, 665,
	113, 665,
	114, 665,
	115, 665,
	116, 665,
	117, 665,
	119, 665,
	121, 665,
	126, 665,
	127, 665,
	129, 665,
	131, 665,
	132, 665,
	133, 665,
	134, 665,
	135, 665,
	136, 665,
	137, 665,
	140, 665,
	142, 665,
	145, 665,
	146, 665,
	147, 665,
	148, 665,
	149, 665,
	150, 665,
	151, 665,
	152, 665,
	154, 665,
	157, 665,
	158, 665,
	159, 665,
	161, 665,
	162, 665,
	163, 665,
	165, 665,
	166, 665,
	168, 665,
	170, 665,
	173, 665,
	176, 665,
	178, 665,
	179, 665,
	180, 665,
	181, 665,
	182, 665,
	183, 665,
	185, 665,
	186, 665,
	187, 665,
	188, 665,
	192, 665,
	193, 665,
	194, 665,
	195, 665,
	196, 665,
	198, 665,
	200, 665,
	201, 665,
	204, 665,
	205, 665,
	207, 665,
	209, 665,
	210, 665,
	211, 665,
	212, 665,
	213, 665,
	214, 665,
	216, 665,
	217, 665,
	218, 665,
	219, 665,
	220, 665,
	222, 665,
	223, 665,
	224, 665,
	225, 665,
	226, 665,
	227, 665,
	228, 665,
	229, 665,
	231, 665,
	232, 665,
	233, 665,
	234, 665,
	235, 665,
	236, 665,
	237, 665,
	238, 665,
	239, 665,
	240, 665,
	241, 665,
	242, 665,
	244, 665,
	246, 665,
	247, 665,
	248, 665,
	249, 665,
	251, 665,
	252, 665,
	253, 665,
	254, 665,
	256, 665,
	257, 665,
	258, 665,
	259, 665,
	260, 665,
	262, 665,
	263, 665,
	264, 665,
	265, 665,
	267, 665,
	268, 665,
	269, 665,
	270, 665,
	272, 665,
	273, 665,
	274, 665,
	275, 665,
	276, 665,
	277, 665,
	278, 665,
	279, 665,
	280, 665,
	281, 665,
	283, 665,
	285, 665,
	286, 665,
	287, 665,
	288, 665,
	289, 665,
	290, 665,
	291, 665,
	293, 665,
	294, 665,
	295, 665,
	298, 665,
	299, 665,
	300, 665,
	301, 665,
	303, 665,
	304, 665,
	305, 665,
	306, 665,
	309, 665,
	310, 665,
	311, 665,
	312, 665,
	314, 665,
	316, 665,
	317, 665,
	318, 665,
	319, 665,
	320, 665,
	321, 665,
	324, 665,
	329, 665,
	330, 665,
	331, 665,
	332, 665,
	333, 665,
	-2, 0,
	-1, 117,
	103, 637,
	112, 637,
	153, 637,
	172, 637,
	197, 637,
	203, 637,
	307, 637,
	-2, 630,
	-1, 122,
	1, 565,
	157, 565,
	222, 565,
	226, 565,
	357, 565,
	358, 565,
	-2, 0,
	-1, 124,
	1, 565,
	357, 565,
	358, 565,
	-2, 0,
	-1, 125,
	1, 565,
	357, 565,
	358, 565,
	-2, 0,
	-1, 126,
	1, 569,
	357, 569,
	358, 569,
	-2, 0,
	-1, 133,
	4, 671,
	5, 671,
	6, 671,
	7, 671,
	8, 671,
	9, 671,
	20, 671,
	21, 671,
	23, 671,
	28, 671,
	29, 671,
	33, 671,
	34, 671,
	35, 671,
	36, 671,
	37, 671,
	38, 671,
	39, 671,
	40, 671,
	41, 671,
	42, 671,
	44, 671,
	45, 671,
	46, 671,
	47, 671,
	48, 671,
	49, 671,
	50, 671,
	51, 671,
	52, 671,
	53, 671,
	55, 671,
	56, 671,
	58, 671,
	60, 671,
	61, 671,
	62, 671,
	64, 671,
	66, 671,
	67, 671,
	68, 671,
	70, 671,
	71, 671,
	72, 671,
	73, 671,
	75, 671,
	76, 671,
	77, 671,
	79, 671,
	80, 671,
	81, 671,
	82, 671,
	83, 671,
	84, 671,
	85, 671,
	86, 671,
	87, 671,
	88, 671,
	90, 671,
	92, 671,
	94, 671,
	97, 671,
	98, 671,
	100, 671,
	104, 671,
	105, 671,
	106, 671,
	107, 671,
	108, 671,
	109, 671,
	110, 671,
	113, 671,
	114, 671,
	115, 671,
	116, 671,
	117, 671,
	119, 671,
	121, 671,
	124, 671,
	126, 671,
	127, 671,
	129, 671,
	131, 671,
	132, 671,
	133, 671,
	134, 671,
	135, 671,
	136, 671,
	137, 671,
	138, 671,
	140, 671,
	142, 671,
	144, 671,
	145, 671,
	146, 671,
	147, 671,
	148, 671,
	149, 671,
	150, 671,
	151, 671,
	152, 671,
	154, 671,
	156, 671,
	157, 671,
	158, 671,
	159, 671,
	160, 671,
	161, 671,
	162, 671,
	163, 671,
	165, 671,
	166, 671,
	168, 671,
	169, 671,
	170, 671,
	171, 671,
	173, 671,
	176, 671,
	178, 671,
	179, 671,
	180, 671,
	181, 671,
	182, 671,
	183, 671,
	184, 671,
	185, 671,
	186, 671,
	187, 671,
	188, 671,
	189, 671,
	191, 671,
	192, 671,
	193, 671,
	194, 671,
	195, 671,
	196, 671,
	198, 671,
	201, 671,
	204, 671,
	205, 671,
	206, 671,
	207, 671,
	208, 671,
	209, 671,
	210, 671,
	211, 671,
	212, 671,
	213, 671,
	214, 671,
	216, 671,
	217, 671,
	218, 671,
	219, 671,
	220, 671,
	222, 671,
	223, 671,
	224, 671,
	225, 671,
	226, 671,
	227, 671,
	228, 671,
	229, 671,
	231, 671,
	232, 671,
	233, 671,
	234, 671,
	235, 671,
	236, 671,
	237, 671,
	238, 671,
	239, 671,
	240, 671,
	241, 671,
	242, 671,
	244, 671,
	245, 671,
	246, 671,
	247, 671,
	248, 671,
	249, 671,
	251, 671,
	252, 671,
	253, 671,
	254, 671,
	256, 671,
	257, 671,
	258, 671,
	259, 671,
	260, 671,
	261, 671,
	262, 671,
	263, 671,
	264, 671,
	265, 671,
	266, 671,
	267, 671,
	268, 671,
	269, 671,
	270, 671,
	272, 671,
	273, 671,
	274, 671,
	275, 671,
	276, 671,
	277, 671,
	278, 671,
	279, 671,
	280, 671,
	281, 671,
	283, 671,
	285, 671,
	286, 671,
	287, 671,
	288, 671,
	289, 671,
	290, 671,
	291, 671,
	293, 671,
	294, 671,
	295, 671,
	298, 671,
	299, 671,
	300, 671,
	301, 671,
	302, 671,
	303, 671,
	304, 671,
	305, 671,
	306, 671,
	309, 671,
	310, 671,
	311, 671,
	312, 671,
	313, 671,
	314, 671,
	316, 671,
	317, 671,
	318, 671,
	319, 671,
	320, 671,
	321, 671,
	324, 671,
	329, 671,
	330, 671,
	331, 671,
	332, 671,
	333, 671,
	334, 671,
	340, 671,
	345, 671,
	346, 671,
	347, 671,
	354, 671,
	360, 671,
	-2, 0,
	-1, 136,
	1, 53,
	358, 53,
	-2, 663,
	-1, 593,
	123, 1259,
	296, 1259,
	339, 1259,
	356, 1259,
	-2, 0,
	-1, 594,
	123, 1211,
	296, 1211,
	339, 1211,
	356, 1211,
	-2, 0,
	-1, 596,
	123, 1317,
	296, 1317,
	339, 1317,
	356, 1317,
	-2, 0,
	-1, 598,
	123, 1339,
	296, 1339,
	339, 1339,
	356, 1339,
	-2, 0,
	-1, 605,
	123, 1264,
	296, 1264,
	339, 1264,
	356, 1264,
	-2, 307,
	-1, 631,
	1, 384,
	353, 384,
	355, 384,
	357, 384,
	358, 384,
	-2, 0,
	-1, 632,
	1, 432,
	120, 432,
	353, 432,
	355, 432,
	357, 432,
	358, 432,
	-2, 0,
	-1, 638,
	1, 398,
	353, 398,
	355, 398,
	357, 398,
	358, 398,
	-2, 0,
	-1, 640,
	1, 402,
	353, 402,
	355, 402,
	357, 402,
	358, 402,
	-2, 0,
	-1, 643,
	1, 410,
	353, 410,
	355, 410,
	357, 410,
	358, 410,
	-2, 0,
	-1, 644,
	1, 415,
	353, 415,
	355, 415,
	357, 415,
	358, 415,
	-2, 0,
	-1, 647,
	1, 425,
	353, 425,
	355, 425,
	357, 425,
	358, 425,
	-2, 0,
	-1, 661,
	112, 673,
	172, 673,
	197, 673,
	-2, 633,
	-1, 664,
	112, 672,
	172, 672,
	197, 672,
	-2, 631,
	-1, 721,
	354, 1189,
	-2, 1182,
	-1, 722,
	354, 1190,
	-2, 1183,
	-1, 728,
	5, 846,
	354, 846,
	-2, 1390,
	-1, 753,
	5, 805,
	-2, 1360,
	-1, 754,
	5, 840,
	354, 840,
	-2, 1362,
	-1, 755,
	5, 815,
	-2, 1363,
	-1, 756,
	5, 814,
	-2, 1364,
	-1, 757,
	5, 840,
	354, 840,
	-2, 1367,
	-1, 758,
	5, 840,
	354, 840,
	-2, 1368,
	-1, 759,
	5, 841,
	-2, 1371,
	-1, 760,
	5, 797,
	-2, 1372,
	-1, 761,
	5, 797,
	-2, 1373,
	-1, 762,
	5, 822,
	-2, 1377,
	-1, 763,
	5, 807,
	-2, 1378,
	-1, 764,
	5, 808,
	-2, 1379,
	-1, 765,
	5, 798,
	-2, 1384,
	-1, 766,
	5, 799,
	-2, 1385,
	-1, 767,
	5, 800,
	-2, 1386,
	-1, 768,
	5, 801,
	-2, 1387,
	-1, 769,
	5, 802,
	-2, 1388,
	-1, 770,
	5, 803,
	-2, 1389,
	-1, 771,
	5, 797,
	-2, 1394,
	-1, 772,
	5, 806,
	-2, 1399,
	-1, 773,
	5, 804,
	-2, 1402,
	-1, 774,
	5, 838,
	354, 838,
	-2, 1404,
	-1, 775,
	5, 842,
	-2, 1407,
	-1, 776,
	5, 844,
	-2, 1408,
	-1, 777,
	5, 837,
	354, 837,
	-2, 1413,
	-1, 859,
	213, 661,
	-2, 509,
	-1, 863,
	199, 1186,
	-2, 0,
	-1, 898,
	1, 208,
	353, 208,
	355, 208,
	357, 208,
	358, 208,
	-2, 636,
	-1, 905,
	4, 1412,
	10, 1412,
	11, 1412,
	13, 1412,
	14, 1412,
	15, 1412,
	16, 1412,
	17, 1412,
	18, 1412,
	20, 1412,
	21, 1412,
	23, 1412,
	26, 1412,
	28, 1412,
	30, 1412,
	33, 1412,
	34, 1412,
	35, 1412,
	36, 1412,
	37, 1412,
	38, 1412,
	39, 1412,
	40, 1412,
	41, 1412,
	42, 1412,
	44, 1412,
	45, 1412,
	46, 1412,
	47, 1412,
	48, 1412,
	51, 1412,
	52, 1412,
	53, 1412,
	55, 1412,
	56, 1412,
	57, 1412,
	60, 1412,
	61, 1412,
	62, 1412,
	63, 1412,
	64, 1412,
	66, 1412,
	67, 1412,
	68, 1412,
	70, 1412,
	71, 1412,
	72, 1412,
	73, 1412,
	81, 1412,
	82, 1412,
	83, 1412,
	84, 1412,
	85, 1412,
	86, 1412,
	87, 1412,
	88, 1412,
	90, 1412,
	92, 1412,
	94, 1412,
	97, 1412,
	98, 1412,
	100, 1412,
	104, 1412,
	105, 1412,
	106, 1412,
	107, 1412,
	108, 1412,
	109, 1412,
	113, 1412,
	114, 1412,
	115, 1412,
	116, 1412,
	117, 1412,
	118, 1412,
	119, 1412,
	121, 1412,
	124, 1412,
	126, 1412,
	127, 1412,
	129, 1412,
	131, 1412,
	132, 1412,
	133, 1412,
	134, 1412,
	135, 1412,
	136, 1412,
	137, 1412,
	138, 1412,
	139, 1412,
	140, 1412,
	142, 1412,
	144, 1412,
	145, 1412,
	146, 1412,
	147, 1412,
	148, 1412,
	149, 1412,
	150, 1412,
	151, 1412,
	152, 1412,
	154, 1412,
	156, 1412,
	157, 1412,
	158, 1412,
	159, 1412,
	160, 1412,
	161, 1412,
	162, 1412,
	163, 1412,
	165, 1412,
	166, 1412,
	168, 1412,
	169, 1412,
	170, 1412,
	171, 1412,
	173, 1412,
	176, 1412,
	177, 1412,
	178, 1412,
	179, 1412,
	180, 1412,
	181, 1412,
	182, 1412,
	183, 1412,
	184, 1412,
	185, 1412,
	186, 1412,
	187, 1412,
	188, 1412,
	192, 1412,
	193, 1412,
	194, 1412,
	195, 1412,
	196, 1412,
	198, 1412,
	201, 1412,
	202, 1412,
	204, 1412,
	205, 1412,
	207, 1412,
	209, 1412,
	210, 1412,
	211, 1412,
	212, 1412,
	213, 1412,
	214, 1412,
	216, 1412,
	217, 1412,
	218, 1412,
	219, 1412,
	220, 1412,
	222, 1412,
	223, 1412,
	224, 1412,
	225, 1412,
	226, 1412,
	227, 1412,
	228, 1412,
	229, 1412,
	231, 1412,
	232, 1412,
	233, 1412,
	234, 1412,
	235, 1412,
	236, 1412,
	237, 1412,
	238, 1412,
	239, 1412,
	240, 1412,
	241, 1412,
	242, 1412,
	244, 1412,
	245, 1412,
	246, 1412,
	247, 1412,
	248, 1412,
	249, 1412,
	250, 1412,
	251, 1412,
	252, 1412,
	253, 1412,
	254, 1412,
	256, 1412,
	257, 1412,
	258, 1412,
	259, 1412,
	260, 1412,
	262, 1412,
	263, 1412,
	264, 1412,
	265, 1412,
	266, 1412,
	267, 1412,
	268, 1412,
	269, 1412,
	270, 1412,
	272, 1412,
	273, 1412,
	274, 1412,
	275, 1412,
	276, 1412,
	277, 1412,
	278, 1412,
	279, 1412,
	280, 1412,
	281, 1412,
	283, 1412,
	285, 1412,
	286, 1412,
	287, 1412,
	288, 1412,
	289, 1412,
	290, 1412,
	291, 1412,
	293, 1412,
	294, 1412,
	295, 1412,
	298, 1412,
	299, 1412,
	300, 1412,
	301, 1412,
	303, 1412,
	304, 1412,
	305, 1412,
	306, 1412,
	309, 1412,
	310, 1412,
	311, 1412,
	312, 1412,
	314, 1412,
	316, 1412,
	317, 1412,
	318, 1412,
	319, 1412,
	320, 1412,
	321, 1412,
	324, 1412,
	329, 1412,
	330, 1412,
	331, 1412,
	332, 1412,
	333, 1412,
	334, 1412,
	335, 1412,
	337, 1412,
	338, 1412,
	339, 1412,
	340, 1412,
	342, 1412,
	343, 1412,
	344, 1412,
	345, 1412,
	346, 1412,
	347, 1412,
	348, 1412,
	349, 1412,
	350, 1412,
	352, 1412,
	355, 1412,
	356, 1412,
	359, 1412,
	360, 1412,
	-2, 0,
	-1, 913,
	123, 1317,
	296, 1317,
	339, 1317,
	356, 1317,
	-2, 0,
	-1, 930,
	123, 1339,
	296, 1339,
	339, 1339,
	356, 1339,
	-2, 0,
	-1, 1000,
	112, 672,
	172, 672,
	197, 672,
	-2, 634,
	-1, 1069,
	103, 638,
	112, 638,
	153, 638,
	172, 638,
	197, 638,
	203, 638,
	307, 638,
	-2, 965,
	-1, 1079,
	354, 1166,
	-2, 1154,
	-1, 1096,
	355, 1106,
	-2, 0,
	-1, 1152,
	103, 638,
	112, 638,
	153, 638,
	172, 638,
	197, 638,
	203, 638,
	307, 638,
	-2, 732,
	-1, 1385,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 881,
	-1, 1386,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 882,
	-1, 1387,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 883,
	-1, 1391,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 887,
	-1, 1392,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 888,
	-1, 1393,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 889,
	-1, 1396,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 894,
	-1, 1402,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 896,
	-1, 1404,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 900,
	-1, 1405,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 901,
	-1, 1406,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 902,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 903,
	-1, 1433,
	208, 1048,
	-2, 1051,
	-1, 1475,
	123, 1088,
	354, 1189,
	-2, 1182,
	-1, 1476,
	123, 1089,
	-2, 1356,
	-1, 1477,
	123, 1090,
	-2, 1263,
	-1, 1478,
	123, 1091,
	-2, 1226,
	-1, 1479,
	123, 1092,
	-2, 1243,
	-1, 1480,
	123, 1093,
	-2, 1262,
	-1, 1481,
	123, 1094,
	-2, 1314,
	-1, 1557,
	1, 733,
	70, 733,
	103, 733,
	112, 733,
	124, 733,
	128, 733,
	130, 733,
	144, 733,
	153, 733,
	160, 733,
	169, 733,
	172, 733,
	184, 733,
	197, 733,
	199, 733,
	203, 733,
	243, 733,
	245, 733,
	307, 733,
	315, 733,
	326, 733,
	327, 733,
	336, 733,
	353, 733,
	355, 733,
	357, 733,
	358, 733,
	359, 733,
	-2, 732,
	-1, 1697,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 895,
	-1, 1698,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 897,
	-1, 1703,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 898,
	-1, 1721,
	208, 1047,
	-2, 1050,
	-1, 1945,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 899,
	-1, 1950,
	156, 0,
	-2, 915,
	-1, 1960,
	208, 1049,
	-2, 1052,
	-1, 2002,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 942,
	-1, 2003,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 943,
	-1, 2004,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 944,
	-1, 2008,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 948,
	-1, 2009,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 949,
	-1, 2010,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 950,
	-1, 2134,
	156, 0,
	-2, 916,
	-1, 2137,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 919,
	-1, 2138,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 921,
	-1, 2254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 920,
	-1, 2255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 922,
	-1, 2262,
	156, 0,
	-2, 951,
	-1, 2339,
	156, 0,
	-2, 952,
	-1, 2416,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1359,
}

const sqlPrivate = 57344

const sqlLast = 41710

var sqlAct = [...]int{

	722, 2091, 2415, 2424, 2390, 1620, 2463, 2425, 2288, 2426,
	1628, 1189, 1979, 2414, 1927, 2344, 2235, 2062, 681, 1691,
	71, 1281, 2101, 2188, 1552, 951, 2122, 665, 2124, 698,
	1489, 1196, 1894, 1231, 2063, 1146, 853, 720, 811, 2202,
	174, 2268, 1899, 719, 174, 1835, 1896, 1617, 1599, 2116,
	1629, 1814, 174, 2168, 1129, 1192, 468, 1282, 1787, 1150,
	1603, 174, 1604, 1570, 470, 1561, 1553, 174, 174, 2033,
	439, 174, 1786, 1732, 174, 1364, 1457, 1359, 1822, 934,
	1312, 1687, 174, 1185, 1600, 1158, 1075, 1675, 1593, 604,
	1431, 175, 1160, 1441, 673, 116, 1130, 692, 1504, 1419,
	1308, 1416, 1155, 712, 933, 888, 953, 1106, 1451, 1601,
	817, 436, 899, 1110, 1622, 885, 1607, 1526, 1137, 820,
	1539, 799, 584, 1471, 691, 1003, 1064, 1004, 174, 174,
	1002, 117, 878, 118, 601, 1120, 174, 1311, 165, 460,
	670, 714, 597, 1203, 875, 170, 797, 1119, 2203, 1008,
	1720, 2047, 937, 625, 2048, 471, 116, 1621, 1211, 1211,
	1211, 669, 174, 174, 174, 174, 669, 2459, 2440, 174,
	174, 1180, 2201, 2436, 2435, 2432, 2412, 1643, 1643, 1180,
	1658, 2411, 2385, 2380, 2376, 1658, 1651, 2249, 1180, 2368,
	1910, 2341, 664, 2201, 2319, 1651, 2316, 2314, 2201, 2299,
	1180, 2201, 679, 1180, 2298, 2276, 576, 1147, 2201, 1180,
	120, 1019, 1020, 1943, 2273, 2256, 2223, 938, 1180, 1651,
	1643, 939, 1177, 2221, 2200, 2181, 133, 1643, 2201, 1180,
	1911, 116, 1643, 455, 1022, 2161, 100, 1528, 814, 1643,
	1232, 1019, 1020, 1594, 1594, 2139, 446, 25, 662, 1643,
	661, 2386, 715, 2136, 841, 135, 2115, 1651, 1021, 2110,
	1598, 2043, 1658, 1598, 1022, 2044, 2036, 1658, 780, 2249,
	835, 779, 825, 829, 674, 801, 2036, 1757, 1758, 1954,
	1775, 1776, 1777, 1643, 1527, 1921, 1883, 1938, 1021, 1884,
	1180, 134, 1838, 2133, 1559, 2015, 1643, 1019, 1020, 127,
	1039, 1040, 1041, 1049, 1050, 1051, 128, 1811, 1804, 1724,
	1802, 1180, 1805, 1042, 1643, 1725, 1454, 1643, 1957, 1027,
	1022, 1625, 1731, 1053, 1801, 119, 1723, 1800, 1643, 1721,
	1772, 1643, 1643, 1643, 1019, 1020, 1180, 1039, 1040, 1041,
	1049, 1050, 1051, 1662, 1021, 1884, 803, 1643, 804, 1027,
	1036, 1212, 1212, 1212, 1289, 1650, 1690, 1022, 1642, 1651,
	1053, 1597, 1643, 1455, 1673, 1598, 1533, 1209, 1757, 1758,
	1532, 1775, 1776, 1777, 1124, 1019, 1020, 1435, 1037, 839,
	915, 1021, 1224, 25, 2132, 1763, 1225, 1036, 1757, 1758,
	136, 1309, 2204, 912, 911, 133, 910, 909, 1022, 908,
	1507, 174, 907, 174, 174, 1027, 174, 906, 1037, 1456,
	1453, 174, 133, 805, 802, 1757, 1758, 174, 1775, 1776,
	1777, 1772, 1021, 1778, 135, 1046, 1054, 657, 656, 655,
	174, 174, 174, 174, 174, 623, 622, 621, 620, 902,
	672, 135, 1027, 1052, 1773, 619, 618, 617, 778, 616,
	615, 1038, 614, 613, 612, 611, 174, 610, 1044, 670,
	134, 609, 1046, 1054, 1037, 608, 1910, 1830, 1772, 1217,
	1210, 1343, 607, 1527, 592, 591, 1763, 134, 590, 589,
	1052, 1038, 588, 1027, 1458, 127, 427, 133, 426, 1043,
	857, 425, 128, 861, 119, 1044, 1763, 1468, 424, 423,
	408, 1037, 407, 399, 398, 397, 396, 389, 388, 159,
	158, 119, 472, 157, 1778, 156, 135, 1774, 892, 881,
	881, 155, 154, 1763, 153, 152, 151, 877, 150, 149,
	903, 148, 147, 146, 145, 1773, 144, 1038, 143, 142,
	141, 140, 139, 852, 1779, 900, 1023, 1024, 1025, 1026,
	1028, 1029, 134, 1047, 138, 137, 845, 1466, 1315, 1464,
	127, 1778, 1452, 882, 946, 2458, 2431, 128, 1151, 2413,
	2395, 174, 38, 2336, 1038, 1031, 1023, 1024, 1025, 1026,
	1028, 1029, 1773, 2317, 1656, 2242, 1624, 174, 1015, 2167,
	1047, 2166, 2162, 2154, 2153, 2152, 2148, 174, 2147, 2146,
	2145, 2121, 2030, 2025, 1769, 1770, 1771, 2024, 1774, 1768,
	1766, 1767, 1759, 1760, 1761, 1762, 1764, 1765, 48, 2023,
	1965, 1045, 1886, 1882, 1033, 1034, 1035, 1048, 902, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 1842, 1809,
	1806, 1794, 1228, 1785, 1756, 1753, 2163, 59, 1752, 1750,
	1737, 1757, 1758, 1736, 60, 1774, 61, 1557, 1045, 174,
	916, 1033, 1034, 1035, 1048, 1015, 1032, 1030, 1031, 1023,
	1024, 1025, 1026, 1028, 1029, 1427, 1149, 812, 1083, 1076,
	63, 1067, 850, 1148, 1195, 949, 944, 1014, 1981, 1001,
	38, 845, 2403, 133, 2371, 1769, 1770, 1771, 2365, 2364,
	1768, 1766, 1767, 1759, 1760, 1761, 1762, 1764, 1765, 2363,
	1023, 1024, 1025, 1026, 1028, 1029, 2355, 670, 38, 903,
	2353, 2331, 135, 1759, 1760, 1761, 1762, 1764, 1765, 1310,
	1686, 2330, 1076, 2329, 931, 1000, 48, 2285, 1685, 928,
	2241, 2264, 1769, 1770, 1771, 2250, 2229, 1768, 1766, 1767,
	1759, 1760, 1761, 1762, 1764, 1765, 2207, 2159, 134, 1763,
	2099, 2097, 2096, 2094, 48, 59, 127, 2071, 2070, 999,
	2051, 2039, 60, 128, 61, 1949, 1925, 1873, 1868, 1855,
	947, 1428, 1854, 1840, 1810, 1784, 1746, 1745, 120, 1742,
	1717, 1712, 119, 59, 1421, 1111, 1114, 174, 63, 174,
	60, 1544, 61, 1516, 133, 662, 1462, 661, 1677, 1188,
	813, 455, 1127, 1118, 100, 1828, 1104, 1011, 1012, 1103,
	1102, 1101, 174, 174, 1019, 1020, 63, 1100, 1099, 1016,
	1098, 1097, 1135, 135, 1096, 1855, 1095, 1094, 1093, 902,
	174, 1092, 670, 1128, 1091, 1090, 470, 1022, 1089, 2347,
	1467, 1088, 174, 1087, 1080, 1068, 1079, 1067, 927, 919,
	1019, 1020, 1133, 896, 174, 1108, 1109, 2248, 2141, 134,
	174, 1021, 174, 1194, 174, 1112, 2120, 127, 174, 2046,
	2042, 1545, 1653, 1022, 128, 1115, 1923, 904, 1065, 1187,
	1149, 1757, 1758, 1661, 943, 1897, 1178, 2252, 1151, 2251,
	2245, 2049, 1181, 119, 1168, 1912, 120, 1021, 1594, 997,
	1465, 116, 1463, 851, 174, 174, 727, 1808, 1807, 1123,
	1200, 902, 133, 174, 1166, 1696, 174, 1229, 1145, 455,
	903, 940, 100, 1116, 120, 1121, 1660, 471, 1117, 1296,
	1085, 1153, 1167, 1928, 1193, 1125, 2269, 470, 1621, 685,
	133, 135, 1982, 1728, 1330, 1442, 174, 455, 1107, 1906,
	100, 174, 991, 2058, 2398, 1647, 174, 174, 1027, 174,
	1161, 174, 1162, 174, 1161, 174, 1162, 2456, 2455, 135,
	877, 2215, 1571, 1935, 413, 1179, 174, 134, 1761, 1762,
	1764, 1765, 174, 174, 2375, 127, 461, 1454, 792, 1149,
	2196, 992, 128, 1316, 1663, 794, 2309, 790, 160, 2308,
	788, 785, 903, 983, 1202, 134, 2307, 1205, 174, 466,
	2306, 119, 470, 127, 2086, 462, 2084, 1082, 782, 813,
	128, 2055, 2054, 781, 1741, 2197, 1290, 414, 471, 948,
	724, 650, 1563, 1740, 1455, 1317, 1739, 1163, 2082, 119,
	1574, 1163, 463, 1226, 1738, 1227, 928, 1699, 1646, 678,
	1284, 1283, 1590, 1586, 1584, 1341, 1287, 941, 1403, 428,
	1297, 1122, 465, 1563, 838, 116, 904, 2226, 1373, 1562,
	1313, 1520, 1301, 1300, 1299, 1519, 1309, 1306, 670, 163,
	1456, 1453, 1331, 670, 1374, 1321, 1161, 1071, 1162, 1618,
	659, 1325, 401, 1326, 1324, 1327, 1340, 1328, 2089, 1329,
	942, 2090, 1418, 471, 2374, 571, 1187, 1879, 1183, 2290,
	651, 1418, 1924, 174, 2409, 174, 1335, 1337, 174, 990,
	1346, 1345, 1344, 1206, 1320, 2192, 1458, 2193, 1175, 174,
	662, 2447, 1355, 662, 662, 1356, 1357, 164, 470, 1573,
	432, 174, 1363, 1900, 1174, 174, 1018, 926, 174, 1875,
	2382, 1870, 174, 1439, 1029, 1458, 174, 2195, 1303, 1666,
	1171, 174, 1238, 1163, 1172, 670, 2198, 174, 470, 1442,
	1668, 174, 464, 405, 2383, 1866, 2073, 1426, 1269, 174,
	1429, 1268, 1173, 1305, 2471, 2455, 174, 1025, 1026, 1028,
	1029, 1669, 416, 415, 1547, 1654, 1546, 174, 431, 174,
	1975, 174, 1525, 1667, 174, 668, 174, 1482, 174, 174,
	652, 174, 174, 1211, 1564, 1290, 902, 1934, 1575, 1577,
	174, 1765, 2358, 1275, 1592, 2428, 1572, 467, 977, 471,
	996, 1536, 1425, 1452, 1936, 1522, 1523, 1423, 1169, 1339,
	1214, 1531, 1304, 1216, 2194, 956, 390, 1219, 1537, 2446,
	1365, 1372, 1541, 1542, 1105, 667, 2466, 1164, 1972, 471,
	1613, 1164, 1238, 1238, 1153, 978, 1580, 1904, 1567, 2080,
	2260, 1585, 1591, 2313, 987, 1458, 1288, 904, 1269, 1269,
	161, 1268, 1268, 707, 472, 786, 1400, 1222, 653, 796,
	1635, 1649, 795, 881, 786, 881, 1641, 787, 786, 982,
	1560, 1159, 1688, 1689, 1973, 669, 470, 903, 1062, 116,
	1627, 1900, 2429, 1638, 174, 116, 1744, 1540, 1285, 162,
	654, 2291, 900, 171, 1639, 1556, 1644, 394, 1645, 1648,
	174, 174, 174, 2128, 174, 409, 1636, 1655, 1637, 988,
	2074, 430, 1757, 1758, 434, 1775, 1776, 1777, 2445, 669,
	574, 171, 1701, 174, 582, 2427, 1342, 587, 1953, 904,
	1657, 1417, 1674, 2454, 937, 606, 2452, 1112, 2430, 1115,
	433, 2234, 660, 1615, 400, 1109, 1108, 2472, 922, 1458,
	429, 914, 1290, 1164, 1664, 472, 1319, 570, 1398, 1401,
	1709, 964, 989, 1007, 2464, 1772, 1878, 471, 406, 2157,
	2477, 2211, 391, 402, 1582, 1707, 1212, 1017, 925, 666,
	1588, 800, 800, 403, 1310, 1307, 2301, 116, 2300, 394,
	2283, 1397, 1006, 2011, 932, 2350, 2057, 1757, 1758, 938,
	1851, 937, 670, 939, 1678, 1847, 1680, 1713, 1714, 1971,
	1623, 1684, 1623, 1616, 1682, 394, 394, 833, 394, 2465,
	1763, 2214, 171, 842, 650, 1201, 1190, 1351, 2213, 1432,
	472, 2391, 1730, 1071, 1136, 1836, 957, 1436, 392, 855,
	2467, 1444, 678, 1334, 854, 1291, 1704, 2284, 167, 2102,
	1772, 1424, 1005, 1474, 1474, 1487, 1705, 1499, 1778, 1006,
	1710, 1702, 1700, 1511, 1512, 1514, 938, 1857, 2236, 2158,
	939, 2210, 2476, 958, 874, 670, 955, 1007, 1856, 1773,
	1716, 1694, 1780, 1781, 1782, 1295, 1399, 2012, 1140, 174,
	470, 1825, 1812, 2013, 1727, 174, 174, 1818, 1352, 174,
	1535, 1837, 1534, 651, 174, 1763, 937, 174, 1143, 1550,
	579, 1819, 863, 573, 1136, 174, 667, 2092, 872, 1005,
	2227, 174, 174, 174, 1138, 1877, 3, 174, 2212, 1293,
	174, 1832, 2281, 1141, 2169, 1414, 174, 174, 174, 174,
	174, 1294, 2034, 451, 33, 174, 1817, 174, 1139, 937,
	1412, 174, 1774, 450, 32, 1461, 472, 2282, 965, 174,
	1791, 1792, 1793, 1824, 1773, 1831, 2263, 1706, 1140, 174,
	1827, 174, 784, 174, 1708, 2156, 174, 1841, 1789, 1140,
	174, 471, 447, 29, 1813, 174, 472, 174, 1143, 1848,
	422, 1816, 2088, 1788, 174, 986, 975, 1820, 1821, 1143,
	1885, 1826, 1887, 652, 1138, 670, 973, 174, 902, 1142,
	417, 843, 1843, 1141, 938, 1538, 844, 840, 939, 902,
	174, 1408, 971, 1948, 1141, 1902, 1865, 873, 1139, 1409,
	1908, 1410, 1880, 1751, 904, 1415, 1711, 1774, 1659, 1769,
	1770, 1771, 453, 77, 1768, 1766, 1767, 1759, 1760, 1761,
	1762, 1764, 1765, 1596, 606, 174, 859, 606, 1589, 864,
	1583, 995, 1889, 823, 867, 1920, 578, 994, 1905, 572,
	394, 871, 452, 76, 454, 27, 1929, 1913, 920, 1823,
	33, 653, 1332, 606, 606, 394, 889, 842, 981, 1142,
	32, 1946, 1947, 969, 1919, 449, 17, 789, 791, 903,
	1142, 1931, 1932, 1933, 967, 174, 1951, 1930, 1460, 606,
	903, 1323, 961, 654, 1937, 870, 985, 974, 1086, 29,
	2423, 1967, 1968, 1969, 472, 1939, 2388, 972, 1941, 1768,
	1766, 1767, 1759, 1760, 1761, 1762, 1764, 1765, 2185, 2078,
	2076, 2056, 1411, 970, 443, 13, 1893, 445, 16, 1413,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 1852,
	2014, 1958, 1961, 444, 14, 1619, 1974, 1976, 1977, 77,
	1983, 1238, 1715, 1612, 1985, 1221, 174, 1988, 1867, 1718,
	442, 12, 174, 1990, 1872, 1962, 1237, 1269, 448, 10,
	1268, 174, 174, 1852, 418, 2018, 980, 1734, 1735, 76,
	1220, 27, 1218, 1215, 968, 1238, 2045, 1895, 1888, 1213,
	2019, 1891, 1176, 1170, 606, 966, 441, 8, 1165, 440,
	4, 1269, 17, 960, 1268, 2324, 869, 2456, 1009, 1692,
	923, 2032, 2247, 2246, 419, 174, 1314, 174, 2037, 581,
	606, 2087, 1922, 2068, 174, 1783, 2117, 902, 2050, 2067,
	2038, 2098, 456, 2035, 1238, 116, 2326, 1796, 2053, 458,
	1579, 174, 174, 1563, 420, 2111, 421, 2060, 2095, 1578,
	1269, 13, 2104, 1268, 16, 2052, 2109, 1563, 2041, 174,
	2360, 2114, 2081, 1576, 2204, 959, 1237, 1237, 2338, 174,
	2170, 1693, 2103, 1013, 470, 2093, 2108, 1587, 1271, 808,
	14, 1010, 394, 1270, 2105, 2106, 461, 1354, 1581, 2069,
	1234, 2112, 2130, 2113, 2387, 1238, 2232, 12, 1626, 809,
	1614, 2118, 580, 1611, 1524, 10, 1019, 1020, 472, 466,
	1286, 1269, 174, 2135, 1268, 462, 1019, 1020, 903, 1365,
	1986, 1230, 2475, 2462, 1757, 1758, 1019, 1020, 1365, 1991,
	2131, 1238, 1238, 8, 1914, 1915, 4, 1916, 1917, 1022,
	1238, 1238, 463, 2275, 1816, 1671, 1670, 1269, 1269, 2175,
	1268, 1268, 2119, 1021, 2031, 1978, 1269, 1269, 1671, 1268,
	1268, 2022, 465, 1021, 1926, 471, 1833, 174, 1803, 1672,
	174, 1521, 810, 1238, 1518, 1490, 1517, 2155, 1271, 1271,
	470, 174, 174, 1270, 1270, 174, 174, 174, 1450, 1269,
	1234, 1234, 1268, 1073, 2143, 1970, 1890, 1083, 1081, 993,
	984, 979, 174, 976, 962, 2179, 924, 174, 2174, 174,
	658, 174, 174, 174, 2289, 174, 459, 174, 2208, 902,
	587, 2172, 800, 2176, 1322, 963, 904, 174, 174, 1829,
	1543, 2381, 2149, 1743, 902, 2205, 2177, 904, 2068, 2343,
	2225, 2259, 2228, 1459, 2067, 394, 394, 2233, 1955, 2184,
	1084, 52, 2065, 701, 2173, 2186, 2059, 1606, 1605, 2238,
	473, 1298, 2068, 171, 723, 1473, 2180, 2068, 2067, 2171,
	1366, 471, 464, 2067, 783, 394, 2231, 725, 1235, 2237,
	726, 2253, 1236, 2239, 2244, 1113, 2209, 1199, 713, 1233,
	897, 1630, 1302, 394, 1422, 394, 1440, 394, 1726, 1077,
	693, 1207, 2258, 705, 2069, 704, 1437, 918, 1834, 1903,
	903, 2230, 2240, 1350, 1683, 2016, 174, 2262, 174, 1347,
	470, 174, 2075, 2265, 404, 903, 2026, 467, 2069, 174,
	1754, 895, 1238, 2069, 1496, 470, 1488, 606, 171, 1484,
	998, 1134, 1063, 1631, 2272, 945, 171, 1909, 1269, 606,
	1652, 1268, 2293, 1126, 1358, 2295, 807, 806, 2286, 2077,
	1292, 2079, 1665, 1056, 2274, 174, 2292, 1055, 902, 2068,
	1187, 793, 174, 2352, 936, 2067, 2279, 2315, 2277, 606,
	174, 174, 902, 902, 606, 935, 2310, 1191, 1850, 171,
	606, 2294, 606, 2322, 606, 2470, 606, 2068, 606, 2083,
	174, 2359, 2323, 2067, 2085, 174, 2072, 2333, 2332, 1333,
	2397, 471, 174, 2321, 2327, 606, 606, 2337, 132, 129,
	2354, 131, 130, 1876, 2339, 80, 471, 31, 2340, 2346,
	30, 99, 2348, 98, 97, 2069, 96, 174, 174, 2334,
	2335, 606, 95, 2349, 174, 94, 93, 92, 91, 2369,
	90, 89, 902, 2367, 88, 2357, 2325, 174, 2370, 903,
	2311, 902, 902, 2069, 87, 86, 2356, 85, 84, 83,
	82, 602, 599, 903, 903, 904, 2373, 2372, 1135, 79,
	670, 78, 2378, 2379, 174, 28, 174, 2243, 24, 174,
	103, 470, 23, 21, 22, 75, 1490, 1490, 2196, 2404,
	74, 2189, 2406, 26, 19, 1223, 2394, 2405, 18, 2187,
	15, 9, 2410, 2191, 20, 57, 58, 174, 56, 2407,
	2408, 55, 472, 54, 11, 697, 50, 2420, 49, 47,
	2422, 46, 2421, 2197, 174, 45, 44, 2439, 2433, 2068,
	174, 7, 1238, 903, 102, 2067, 587, 2399, 800, 2444,
	2441, 842, 903, 903, 174, 2190, 2442, 2443, 1269, 1144,
	2437, 1268, 394, 41, 2453, 2451, 40, 6, 2457, 393,
	2393, 1490, 1490, 1490, 1555, 38, 101, 2461, 394, 2460,
	5, 394, 471, 114, 111, 1568, 2303, 113, 110, 394,
	112, 2469, 2473, 2468, 394, 2474, 115, 107, 1238, 108,
	394, 109, 106, 105, 1595, 2069, 37, 36, 35, 2318,
	34, 2, 1602, 1, 1269, 1237, 0, 1268, 2438, 842,
	0, 48, 0, 0, 0, 0, 457, 683, 472, 0,
	394, 0, 1634, 2192, 606, 2193, 0, 606, 0, 606,
	0, 394, 394, 0, 1640, 842, 458, 1238, 0, 1237,
	59, 0, 0, 1568, 0, 0, 0, 60, 0, 61,
	0, 818, 0, 1269, 0, 2195, 1268, 904, 0, 0,
	0, 0, 0, 0, 2198, 0, 0, 0, 0, 0,
	0, 0, 904, 63, 0, 0, 0, 827, 831, 0,
	837, 1757, 1758, 461, 0, 0, 0, 0, 1237, 0,
	0, 2271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2304, 2305, 466, 0, 0, 0,
	0, 0, 462, 0, 1757, 1758, 0, 1271, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 2297, 1234,
	0, 0, 0, 0, 0, 0, 0, 1676, 0, 463,
	0, 0, 2194, 0, 0, 0, 0, 0, 0, 1237,
	0, 1271, 0, 394, 394, 394, 1270, 394, 472, 465,
	0, 0, 0, 1234, 0, 0, 0, 0, 0, 0,
	1490, 1490, 0, 472, 0, 0, 394, 0, 0, 0,
	0, 120, 0, 0, 0, 1237, 1237, 0, 0, 1763,
	0, 0, 0, 0, 1237, 1237, 0, 133, 0, 0,
	1271, 0, 0, 0, 455, 1270, 904, 100, 0, 0,
	0, 0, 1234, 0, 0, 0, 0, 0, 0, 0,
	904, 904, 1763, 0, 0, 0, 135, 1237, 0, 1490,
	1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
	1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1773, 1490,
	0, 0, 0, 0, 0, 676, 0, 650, 0, 2384,
	0, 1271, 134, 0, 0, 0, 1270, 0, 0, 464,
	127, 0, 0, 1234, 0, 678, 0, 128, 0, 0,
	0, 1773, 0, 0, 2400, 2401, 2402, 846, 848, 0,
	904, 0, 0, 0, 0, 0, 119, 1271, 1271, 904,
	904, 0, 1270, 1270, 0, 0, 1271, 1271, 677, 1234,
	1234, 1270, 1270, 0, 0, 0, 0, 0, 1234, 1234,
	0, 1774, 0, 0, 467, 0, 0, 0, 0, 472,
	0, 0, 831, 0, 0, 0, 651, 0, 0, 1271,
	0, 0, 394, 0, 1270, 0, 0, 837, 394, 394,
	0, 1234, 394, 0, 1774, 1019, 1020, 1555, 0, 0,
	1555, 1049, 1050, 1051, 0, 0, 0, 0, 1839, 0,
	0, 0, 0, 0, 394, 1845, 1846, 0, 1022, 0,
	1568, 1053, 0, 1853, 0, 0, 1237, 0, 0, 1858,
	1859, 1861, 1863, 1864, 0, 0, 0, 0, 394, 0,
	1871, 0, 1021, 0, 1874, 0, 0, 0, 1036, 0,
	0, 0, 394, 1768, 1766, 1767, 1759, 1760, 1761, 1762,
	1764, 1765, 1199, 0, 1199, 0, 606, 0, 0, 394,
	0, 0, 0, 1898, 0, 0, 652, 0, 394, 0,
	1907, 0, 0, 0, 0, 0, 0, 394, 1767, 1759,
	1760, 1761, 1762, 1764, 1765, 0, 0, 0, 0, 0,
	1676, 0, 0, 1027, 1757, 1758, 0, 0, 917, 0,
	0, 0, 0, 1676, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 1046, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1019, 1020, 1271, 0,
	0, 683, 0, 1270, 0, 0, 1019, 1020, 394, 0,
	1234, 0, 675, 0, 653, 0, 1044, 0, 0, 1022,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 437, 654, 0, 0, 1036,
	0, 0, 0, 1021, 0, 0, 0, 0, 1980, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 1763, 0, 831, 0, 0, 0, 0, 0,
	0, 0, 1057, 1058, 1059, 1060, 1061, 0, 0, 0,
	0, 0, 1070, 0, 0, 1038, 1237, 0, 0, 0,
	0, 0, 1078, 0, 1027, 0, 0, 0, 0, 0,
	0, 1047, 48, 0, 1027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 1773, 0, 0, 0, 0, 0, 0, 0, 394,
	0, 59, 0, 0, 0, 1555, 0, 0, 60, 0,
	61, 0, 1237, 0, 842, 1555, 0, 0, 0, 0,
	702, 72, 0, 1037, 0, 0, 0, 1490, 0, 2064,
	0, 0, 0, 1037, 63, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 1048, 0, 1032, 1030, 1031,
	1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 1568, 0,
	1199, 1237, 1131, 1131, 1774, 0, 0, 2100, 1271, 683,
	0, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	1234, 0, 72, 0, 394, 394, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 1038, 818, 1156, 0,
	0, 0, 2125, 0, 0, 0, 1038, 0, 0, 0,
	0, 0, 2127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 0, 0, 1186, 0, 1270,
	0, 0, 0, 0, 0, 0, 1234, 663, 0, 0,
	671, 0, 120, 0, 0, 831, 0, 1204, 0, 1204,
	0, 0, 0, 0, 0, 2150, 819, 72, 133, 1759,
	1760, 1761, 1762, 1764, 1765, 455, 0, 0, 100, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 1234, 0, 135, 1032, 1030,
	1031, 1023, 1024, 1025, 1026, 1028, 1029, 683, 683, 1030,
	1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0,
	394, 0, 0, 842, 1757, 1758, 0, 1775, 1776, 1777,
	0, 0, 0, 134, 1555, 842, 0, 0, 2182, 2183,
	1568, 127, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 2064, 842, 0, 0, 0, 0,
	2216, 0, 2217, 0, 394, 2219, 2220, 438, 394, 0,
	2224, 1348, 0, 1353, 0, 1757, 1758, 1772, 2064, 1360,
	842, 1602, 0, 2064, 0, 0, 0, 0, 0, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 0, 1402, 0, 1404, 1405, 1406, 1407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1763, 0, 0, 0, 0, 0, 1070, 1757,
	1758, 0, 1775, 1776, 1777, 0, 0, 0, 0, 0,
	0, 0, 1019, 1020, 0, 1952, 1469, 1470, 0, 0,
	1486, 0, 1498, 1500, 1505, 1508, 1509, 1510, 0, 1568,
	1778, 2278, 0, 0, 2280, 1022, 0, 0, 0, 0,
	0, 0, 394, 1763, 0, 2064, 0, 0, 0, 0,
	0, 1773, 1772, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 1757, 1758, 0, 1775, 1776, 1777,
	2312, 0, 0, 2064, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 0, 818, 842, 0, 0, 0, 0,
	0, 0, 0, 2125, 2125, 0, 0, 0, 0, 0,
	818, 0, 1773, 1558, 0, 0, 0, 1763, 0, 0,
	0, 831, 0, 2345, 0, 0, 831, 1772, 1555, 0,
	1027, 0, 837, 0, 1774, 1199, 0, 0, 0, 671,
	0, 0, 0, 1019, 1020, 0, 1039, 1040, 1041, 1049,
	1050, 1051, 0, 0, 0, 1778, 0, 0, 0, 1042,
	2361, 2362, 1632, 0, 0, 0, 1022, 394, 0, 1053,
	0, 0, 0, 837, 837, 0, 1773, 0, 0, 0,
	2377, 0, 1763, 0, 0, 1774, 0, 0, 0, 1037,
	1021, 0, 0, 0, 0, 0, 1036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2392, 0, 842,
	0, 0, 394, 0, 0, 0, 0, 0, 0, 0,
	0, 1769, 1770, 1771, 0, 2064, 1768, 1766, 1767, 1759,
	1760, 1761, 1762, 1764, 1765, 0, 0, 0, 0, 0,
	2345, 1773, 0, 0, 0, 0, 0, 0, 0, 1774,
	0, 1027, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 1038, 394, 0, 0, 0, 0, 0, 0,
	0, 1046, 1054, 0, 0, 0, 0, 2450, 1766, 1767,
	1759, 1760, 1761, 1762, 1764, 1765, 0, 0, 0, 1052,
	0, 0, 0, 0, 0, 1679, 837, 1681, 0, 831,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	1037, 0, 0, 0, 1774, 0, 0, 0, 1695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1697, 1698, 1043, 1769, 1770, 1771, 1703,
	0, 1768, 1766, 1767, 1759, 1760, 1761, 1762, 1764, 1765,
	0, 0, 0, 0, 1032, 1030, 1031, 1023, 1024, 1025,
	1026, 1028, 1029, 0, 0, 0, 0, 0, 0, 0,
	0, 1722, 0, 0, 663, 0, 0, 0, 1729, 0,
	0, 1733, 0, 1038, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 1069, 1747, 1047,
	0, 1769, 1770, 1771, 1074, 0, 1768, 1766, 1767, 1759,
	1760, 1761, 1762, 1764, 1765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 1505, 1505, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 1045, 683, 0,
	1033, 1034, 1035, 1048, 0, 1032, 1030, 1031, 1023, 1024,
	1025, 1026, 1028, 1029, 818, 0, 0, 0, 0, 0,
	818, 818, 1799, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1844, 72, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1881, 0, 0, 1901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1892, 0, 0, 0, 0, 0, 0, 0, 1918,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 683, 683, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1940, 0, 0, 0, 0, 1360, 0, 0, 0,
	0, 0, 1944, 0, 0, 1945, 1019, 1020, 0, 1039,
	1040, 1041, 1049, 1050, 1051, 0, 0, 1950, 0, 0,
	1942, 0, 1042, 0, 0, 0, 1959, 0, 0, 1022,
	0, 0, 1053, 0, 1963, 0, 0, 1918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 1021, 0, 0, 0, 1987, 0, 1036,
	0, 1989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 0, 663, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2020, 2021, 0, 0, 0, 0,
	0, 0, 0, 2027, 2028, 2029, 0, 0, 0, 0,
	0, 0, 0, 0, 1027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	2040, 0, 0, 0, 1046, 1054, 0, 0, 671, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 818, 1052, 0, 0, 0, 0, 0, 0, 0,
	2061, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 0, 1152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1632, 818, 72, 0,
	0, 0, 0, 0, 72, 0, 1038, 0, 0, 0,
	0, 0, 0, 0, 2134, 0, 0, 0, 2137, 2138,
	0, 0, 1047, 2140, 0, 0, 0, 0, 0, 0,
	2142, 0, 2144, 0, 72, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2151, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2160, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032, 1030,
	1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 1798, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2206, 0, 0, 0, 0, 0, 0, 0,
	0, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050, 1051,
	0, 0, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 72, 1022, 0, 2218, 1053, 0, 0,
	2222, 0, 0, 0, 0, 0, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 1021, 0,
	0, 0, 0, 1042, 1036, 0, 0, 0, 2254, 2255,
	1022, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 2267,
	1036, 0, 1420, 0, 0, 2270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 2302,
	0, 0, 0, 0, 2287, 1027, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 1046, 1054, 0, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2320, 0, 0, 1052, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 1037, 0, 0, 0, 0, 0,
	0, 2351, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 819, 819, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 1047, 0, 2366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 1038, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 2396, 72, 0, 0, 2419, 2419,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 2434, 1045, 0, 0, 1033, 1034,
	1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026,
	1028, 1029, 2419, 0, 0, 0, 0, 0, 0, 0,
	1797, 0, 0, 0, 0, 1632, 0, 0, 0, 0,
	0, 1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 721,
	710, 711, 708, 709, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 684, 201, 0, 202, 0, 203,
	0, 72, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 819, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 819, 247, 0, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	133, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 135,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 905, 777, 819, 0, 326,
	0, 0, 0, 127, 327, 328, 329, 330, 331, 690,
	128, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 469, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2328, 0, 176, 177,
	488, 178, 489, 490, 491, 492, 332, 493, 494, 495,
	496, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 497, 183, 339, 340, 184, 185, 498, 499, 341,
	342, 343, 500, 186, 344, 501, 474, 502, 187, 188,
	189, 0, 190, 503, 191, 192, 193, 504, 475, 194,
	195, 196, 505, 506, 508, 507, 509, 510, 511, 197,
	198, 395, 199, 345, 200, 346, 347, 512, 201, 513,
	202, 514, 203, 515, 516, 204, 205, 517, 206, 518,
	1069, 519, 348, 207, 208, 209, 349, 350, 520, 521,
	522, 210, 211, 351, 352, 353, 0, 212, 523, 213,
	524, 525, 476, 526, 214, 354, 527, 355, 528, 215,
	216, 217, 218, 219, 356, 357, 478, 529, 223, 530,
	220, 531, 477, 221, 358, 222, 359, 360, 361, 362,
	363, 532, 364, 533, 479, 224, 225, 226, 480, 227,
	228, 229, 534, 231, 230, 535, 365, 481, 232, 482,
	536, 233, 537, 538, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 539, 540, 541,
	367, 244, 368, 245, 246, 542, 247, 543, 544, 248,
	545, 546, 249, 369, 484, 250, 485, 370, 251, 252,
	253, 254, 255, 547, 256, 371, 257, 372, 258, 548,
	259, 260, 261, 262, 263, 373, 264, 265, 549, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 550, 278, 486, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 551, 290, 375, 289, 291, 292, 552,
	293, 282, 283, 294, 487, 295, 376, 377, 296, 553,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	554, 304, 555, 305, 306, 307, 308, 309, 310, 311,
	556, 380, 381, 382, 557, 558, 312, 313, 383, 384,
	559, 314, 315, 316, 317, 560, 561, 318, 319, 320,
	321, 562, 322, 563, 385, 323, 324, 325, 386, 387,
	564, 565, 326, 566, 567, 568, 569, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 469, 0, 0, 0, 0, 0,
	1548, 0, 0, 0, 0, 0, 0, 0, 0, 1549,
	176, 177, 488, 178, 489, 490, 491, 492, 332, 493,
	494, 495, 496, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 497, 183, 339, 340, 184, 185, 498,
	499, 341, 342, 343, 500, 186, 344, 501, 474, 502,
	187, 188, 189, 0, 190, 503, 191, 192, 193, 504,
	475, 194, 195, 196, 505, 506, 508, 507, 509, 510,
	511, 197, 198, 395, 199, 345, 200, 346, 347, 512,
	201, 513, 202, 514, 203, 515, 516, 204, 205, 517,
	206, 518, 0, 519, 348, 207, 208, 209, 349, 350,
	520, 521, 522, 210, 211, 351, 352, 353, 0, 212,
	523, 213, 524, 525, 476, 526, 214, 354, 527, 355,
	528, 215, 216, 217, 218, 219, 356, 357, 478, 529,
	223, 530, 220, 531, 477, 221, 358, 222, 359, 360,
	361, 362, 363, 532, 364, 533, 479, 224, 225, 226,
	480, 227, 228, 229, 534, 231, 230, 535, 365, 481,
	232, 482, 536, 233, 537, 538, 234, 0, 235, 236,
	237, 239, 366, 238, 483, 240, 241, 243, 242, 539,
	540, 541, 367, 244, 368, 245, 246, 542, 247, 543,
	544, 248, 545, 546, 249, 369, 484, 250, 485, 370,
	251, 252, 253, 254, 255, 547, 256, 371, 257, 372,
	258, 548, 259, 260, 261, 262, 263, 373, 264, 265,
	549, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 550, 278, 486, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 551, 290, 375, 289, 291,
	292, 552, 293, 282, 283, 294, 487, 295, 376, 377,
	296, 553, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 554, 304, 555, 305, 306, 307, 308, 309,
	310, 311, 556, 380, 381, 382, 557, 558, 312, 313,
	383, 384, 559, 314, 315, 316, 317, 560, 561, 318,
	319, 320, 321, 562, 322, 563, 385, 323, 324, 325,
	386, 387, 564, 565, 326, 566, 567, 568, 569, 327,
	328, 329, 330, 331, 0, 0, 0, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2178, 176, 177, 488, 178, 489, 490, 491,
	492, 332, 493, 494, 495, 496, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 497, 183, 339, 340,
	184, 185, 498, 499, 341, 342, 343, 500, 186, 344,
	501, 474, 502, 187, 188, 189, 0, 190, 503, 191,
	192, 193, 504, 475, 194, 195, 196, 505, 506, 508,
	507, 509, 510, 511, 197, 198, 395, 199, 345, 200,
	346, 347, 512, 201, 513, 202, 514, 203, 515, 516,
	204, 205, 517, 206, 518, 0, 519, 348, 207, 208,
	209, 349, 350, 520, 521, 522, 210, 211, 351, 352,
	353, 0, 212, 523, 213, 524, 525, 476, 526, 214,
	354, 527, 355, 528, 215, 216, 217, 218, 219, 356,
	357, 478, 529, 223, 530, 220, 531, 477, 221, 358,
	222, 359, 360, 361, 362, 363, 532, 364, 533, 479,
	224, 225, 226, 480, 227, 228, 229, 534, 231, 230,
	535, 365, 481, 232, 482, 536, 233, 537, 538, 234,
	0, 235, 236, 237, 239, 366, 238, 483, 240, 241,
	243, 242, 539, 540, 541, 367, 244, 368, 245, 246,
	542, 247, 543, 544, 248, 545, 546, 249, 369, 484,
	250, 485, 370, 251, 252, 253, 254, 255, 547, 256,
	371, 257, 372, 258, 548, 259, 260, 261, 262, 263,
	373, 264, 265, 549, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 550, 278, 486, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 551, 290,
	375, 289, 291, 292, 552, 293, 282, 283, 294, 487,
	295, 376, 377, 296, 553, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 554, 304, 555, 305, 306,
	307, 308, 309, 310, 311, 556, 380, 381, 382, 557,
	558, 312, 313, 383, 384, 559, 314, 315, 316, 317,
	560, 561, 318, 319, 320, 321, 562, 322, 563, 385,
	323, 324, 325, 386, 387, 564, 565, 326, 566, 567,
	568, 569, 327, 328, 329, 330, 331, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1182, 0, 0, 176, 177, 488, 178, 489, 490, 491,
	492, 332, 493, 494, 495, 496, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 497, 183, 339, 340,
	184, 185, 498, 499, 341, 342, 343, 500, 186, 344,
	501, 474, 502, 187, 188, 189, 0, 190, 503, 191,
	192, 193, 504, 475, 194, 195, 196, 505, 506, 508,
	507, 509, 510, 511, 197, 198, 395, 199, 345, 200,
	346, 347, 512, 201, 513, 202, 514, 203, 515, 516,
	204, 205, 517, 206, 518, 0, 519, 348, 207, 208,
	209, 349, 350, 520, 521, 522, 210, 211, 351, 352,
	353, 0, 212, 523, 213, 524, 525, 476, 526, 214,
	354, 527, 355, 528, 215, 216, 217, 218, 219, 356,
	357, 478, 529, 223, 530, 220, 531, 477, 221, 358,
	222, 359, 360, 361, 362, 363, 532, 364, 533, 479,
	224, 225, 226, 480, 227, 228, 229, 534, 231, 230,
	535, 365, 481, 232, 482, 536, 233, 537, 538, 234,
	0, 235, 236, 237, 239, 366, 238, 483, 240, 241,
	243, 242, 539, 540, 541, 367, 244, 368, 245, 246,
	542, 247, 543, 544, 248, 545, 546, 249, 369, 484,
	250, 485, 370, 251, 252, 253, 254, 255, 547, 256,
	371, 257, 372, 258, 548, 259, 260, 261, 262, 263,
	373, 264, 265, 549, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 550, 278, 486, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 551, 290,
	375, 289, 291, 292, 552, 293, 282, 283, 294, 487,
	295, 376, 377, 296, 553, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 554, 304, 555, 305, 306,
	307, 308, 309, 310, 311, 556, 380, 381, 382, 557,
	558, 312, 313, 383, 384, 559, 314, 315, 316, 317,
	560, 561, 318, 319, 320, 321, 562, 322, 563, 385,
	323, 324, 325, 386, 387, 564, 565, 326, 566, 567,
	568, 569, 327, 328, 329, 330, 331, 1449, 0, 721,
	710, 711, 708, 709, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 1446, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 0, 201, 0, 202, 0, 203,
	1447, 0, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 0, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 386, 777, 1445, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 690,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 1448, 0, 0, 0, 0, 0, 0, 696,
	1443, 0, 0, 0, 672, 699, 721, 710, 711, 708,
	709, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	738, 703, 0, 0, 0, 179, 180, 181, 333, 753,
	335, 754, 182, 755, 756, 0, 183, 339, 340, 184,
	185, 706, 737, 757, 758, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 759, 200, 760,
	761, 0, 201, 0, 202, 0, 203, 0, 0, 752,
	205, 0, 206, 0, 0, 0, 694, 207, 208, 209,
	739, 740, 717, 0, 0, 210, 211, 762, 763, 764,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	478, 0, 223, 0, 220, 0, 477, 221, 765, 222,
	766, 767, 768, 769, 770, 0, 728, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 689, 0, 718, 747, 244, 771, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 772,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	695, 281, 0, 285, 286, 287, 288, 133, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 487, 295,
	773, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	774, 300, 301, 743, 0, 304, 135, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 775, 776, 0, 0,
	312, 313, 744, 745, 716, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 905, 777, 0, 0, 326, 0, 0, 0,
	127, 327, 328, 329, 330, 331, 690, 128, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 686, 687, 721,
	710, 711, 708, 709, 700, 0, 1072, 0, 0, 0,
	0, 0, 699, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 0, 201, 0, 202, 0, 203,
	0, 0, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 0, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	133, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 135,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 905, 777, 0, 0, 326,
	0, 0, 0, 127, 327, 328, 329, 330, 331, 690,
	128, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 721, 710, 711, 708, 709, 700, 0, 1072,
	0, 0, 0, 0, 0, 699, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 738, 703, 0, 0,
	0, 179, 180, 181, 333, 753, 335, 754, 182, 755,
	756, 1501, 183, 339, 340, 184, 185, 706, 737, 757,
	758, 343, 0, 186, 749, 0, 729, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 475, 194,
	195, 196, 0, 730, 731, 733, 0, 732, 734, 197,
	198, 395, 199, 759, 200, 760, 761, 0, 201, 0,
	202, 0, 203, 0, 0, 752, 205, 0, 206, 0,
	0, 0, 694, 207, 208, 209, 739, 740, 717, 0,
	0, 210, 211, 762, 763, 764, 0, 212, 0, 213,
	0, 1506, 476, 0, 214, 750, 0, 355, 0, 215,
	216, 217, 218, 219, 746, 748, 478, 0, 223, 0,
	220, 0, 477, 221, 765, 222, 766, 767, 768, 769,
	770, 0, 728, 0, 479, 224, 225, 226, 480, 227,
	228, 229, 0, 231, 230, 1502, 751, 481, 232, 482,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 689, 0, 718,
	747, 244, 771, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 484, 250, 485, 741, 251, 252,
	253, 254, 255, 0, 256, 742, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 772, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 486, 279, 280, 695, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 735,
	293, 282, 283, 294, 487, 295, 773, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 774, 300, 301, 743,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 775, 776, 0, 1503, 312, 313, 744, 745,
	716, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 736, 322, 0, 385, 323, 324, 325, 386, 777,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 690, 0, 0, 0, 0, 0, 688, 0,
	0, 0, 0, 686, 687, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 680, 699, 721,
	710, 711, 708, 709, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 684, 201, 0, 202, 0, 203,
	0, 0, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 0, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 0, 247, 682, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 386, 777, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 690,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 721, 710, 711, 708, 709, 700, 0, 696,
	0, 0, 0, 0, 0, 699, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 738, 703, 0, 0,
	0, 179, 180, 181, 333, 753, 335, 754, 182, 755,
	756, 0, 183, 339, 340, 184, 185, 706, 737, 757,
	758, 343, 0, 186, 749, 0, 729, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 475, 194,
	195, 196, 0, 730, 731, 733, 0, 732, 734, 197,
	198, 395, 199, 759, 200, 760, 761, 0, 201, 0,
	202, 0, 203, 0, 0, 752, 205, 0, 206, 0,
	0, 0, 694, 207, 208, 209, 739, 740, 717, 0,
	0, 210, 211, 762, 763, 764, 0, 212, 0, 213,
	0, 0, 476, 0, 214, 750, 0, 355, 0, 215,
	216, 217, 218, 219, 746, 748, 478, 0, 223, 0,
	220, 0, 477, 221, 765, 222, 766, 767, 768, 769,
	770, 0, 728, 0, 479, 224, 225, 226, 480, 227,
	228, 229, 0, 231, 230, 0, 751, 481, 232, 482,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 689, 2107, 718,
	747, 244, 771, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 484, 250, 485, 741, 251, 252,
	253, 254, 255, 0, 256, 742, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 772, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 486, 279, 280, 695, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 735,
	293, 282, 283, 294, 487, 295, 773, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 774, 300, 301, 743,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 775, 776, 0, 0, 312, 313, 744, 745,
	716, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 736, 322, 0, 385, 323, 324, 325, 386, 777,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 690, 0, 0, 0, 0, 0, 688, 0,
	0, 0, 0, 686, 687, 1132, 721, 710, 711, 708,
	709, 700, 696, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	738, 703, 0, 0, 0, 179, 180, 181, 333, 753,
	335, 754, 182, 755, 756, 0, 183, 339, 340, 184,
	185, 706, 737, 757, 758, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 759, 200, 760,
	761, 0, 201, 0, 202, 0, 203, 0, 0, 752,
	205, 0, 206, 0, 0, 0, 694, 207, 208, 209,
	739, 740, 717, 0, 0, 210, 211, 762, 763, 764,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	478, 0, 223, 1362, 220, 0, 477, 221, 765, 222,
	766, 767, 768, 769, 770, 0, 728, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 689, 0, 718, 747, 244, 771, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 1361, 259, 260, 261, 262, 263, 772,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	695, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 487, 295,
	773, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	774, 300, 301, 743, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 775, 776, 0, 0,
	312, 313, 744, 745, 716, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 386, 777, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 690, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 686, 687, 721,
	710, 711, 708, 709, 700, 0, 696, 0, 0, 0,
	0, 0, 699, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 684, 201, 0, 202, 0, 203,
	0, 0, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 0, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 0, 247, 682, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 386, 777, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 690,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 721, 710, 711, 708, 709, 700, 0, 696,
	0, 0, 0, 0, 0, 699, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 738, 703, 0, 0,
	0, 179, 180, 181, 333, 753, 335, 754, 182, 755,
	756, 0, 183, 339, 340, 184, 185, 706, 737, 757,
	758, 343, 0, 186, 749, 0, 729, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 475, 194,
	195, 196, 0, 730, 731, 733, 0, 732, 734, 197,
	198, 395, 199, 759, 200, 760, 761, 0, 201, 0,
	202, 0, 203, 0, 0, 752, 205, 0, 206, 0,
	0, 0, 694, 207, 208, 209, 739, 740, 717, 0,
	0, 210, 211, 762, 763, 764, 0, 212, 0, 213,
	0, 0, 476, 0, 214, 750, 0, 355, 0, 215,
	216, 217, 218, 219, 746, 748, 478, 0, 223, 0,
	220, 0, 477, 221, 765, 222, 766, 767, 768, 769,
	770, 0, 728, 0, 479, 224, 225, 226, 480, 227,
	228, 229, 0, 231, 230, 0, 751, 481, 232, 482,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 689, 0, 718,
	747, 244, 771, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 484, 250, 485, 741, 251, 252,
	253, 254, 255, 0, 256, 742, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 772, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 486, 279, 280, 695, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 735,
	293, 282, 283, 294, 487, 295, 773, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 774, 300, 301, 743,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 775, 776, 0, 0, 312, 313, 744, 745,
	716, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 736, 322, 0, 385, 323, 324, 325, 386, 777,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 690, 0, 0, 0, 0, 0, 688, 0,
	0, 0, 0, 686, 687, 0, 0, 0, 0, 0,
	1076, 1438, 696, 0, 0, 0, 0, 0, 699, 721,
	710, 711, 708, 709, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 684, 201, 0, 202, 0, 203,
	0, 0, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 0, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 386, 777, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 690,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 721, 710, 711, 708, 709, 700, 0, 696,
	0, 0, 0, 0, 0, 699, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 738, 703, 0, 0,
	0, 179, 180, 181, 333, 753, 335, 754, 182, 755,
	756, 0, 183, 339, 340, 184, 185, 706, 737, 757,
	758, 343, 0, 186, 749, 0, 729, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 475, 194,
	195, 196, 0, 730, 731, 733, 0, 732, 734, 197,
	198, 395, 199, 759, 200, 760, 761, 0, 201, 0,
	202, 0, 203, 0, 0, 752, 205, 0, 206, 0,
	0, 0, 694, 207, 208, 209, 739, 740, 717, 0,
	0, 210, 211, 762, 763, 764, 0, 212, 0, 213,
	0, 0, 476, 0, 214, 750, 0, 355, 0, 215,
	216, 217, 218, 219, 746, 748, 478, 0, 223, 0,
	220, 0, 477, 221, 765, 222, 766, 767, 768, 769,
	770, 0, 728, 0, 479, 224, 225, 226, 480, 227,
	228, 229, 0, 231, 230, 0, 751, 481, 232, 482,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 689, 0, 718,
	747, 244, 771, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 484, 250, 485, 741, 251, 252,
	253, 254, 255, 0, 256, 742, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 772, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 486, 279, 280, 695, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 735,
	293, 282, 283, 294, 487, 295, 773, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 774, 300, 301, 743,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 775, 776, 0, 0, 312, 313, 744, 745,
	716, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 736, 322, 0, 385, 323, 324, 325, 386, 777,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 690, 0, 0, 0, 0, 0, 688, 0,
	0, 0, 0, 686, 687, 721, 710, 711, 708, 709,
	700, 0, 696, 2017, 0, 0, 0, 0, 699, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 738,
	703, 0, 0, 0, 179, 180, 181, 333, 753, 335,
	754, 182, 755, 756, 0, 183, 339, 340, 184, 185,
	706, 737, 757, 758, 343, 0, 186, 749, 0, 729,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 475, 194, 195, 196, 0, 730, 731, 733, 0,
	732, 734, 197, 198, 395, 199, 759, 200, 760, 761,
	0, 201, 0, 202, 0, 203, 0, 0, 752, 205,
	0, 206, 0, 0, 0, 694, 207, 208, 209, 739,
	740, 717, 0, 0, 210, 211, 762, 763, 764, 0,
	212, 0, 213, 0, 0, 476, 0, 214, 750, 0,
	355, 0, 215, 216, 217, 218, 219, 746, 748, 478,
	0, 223, 0, 220, 0, 477, 221, 765, 222, 766,
	767, 768, 769, 770, 0, 728, 0, 479, 224, 225,
	226, 480, 227, 228, 229, 0, 231, 230, 0, 751,
	481, 232, 482, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 483, 240, 241, 243, 242,
	689, 0, 718, 747, 244, 771, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 484, 250, 485,
	741, 251, 252, 253, 254, 255, 0, 256, 742, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 772, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 486, 279, 280, 695,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 735, 293, 282, 283, 294, 487, 295, 773,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 774,
	300, 301, 743, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 775, 776, 0, 0, 312,
	313, 744, 745, 716, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 736, 322, 0, 385, 323, 324,
	325, 386, 777, 1966, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 690, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 0, 686, 687, 721, 710,
	711, 708, 709, 700, 0, 696, 0, 0, 0, 0,
	0, 699, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 738, 703, 0, 0, 0, 179, 180, 181,
	333, 753, 335, 754, 182, 755, 756, 0, 183, 339,
	340, 184, 185, 706, 737, 757, 758, 343, 0, 186,
	749, 0, 729, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 475, 194, 195, 196, 0, 730,
	731, 733, 0, 732, 734, 197, 198, 395, 199, 759,
	200, 760, 761, 0, 201, 0, 202, 0, 203, 0,
	0, 752, 205, 0, 206, 0, 0, 0, 694, 207,
	208, 209, 739, 740, 717, 0, 0, 210, 211, 762,
	763, 764, 0, 212, 0, 213, 0, 0, 476, 0,
	214, 750, 0, 355, 0, 215, 216, 217, 218, 219,
	746, 748, 478, 0, 223, 0, 220, 0, 477, 221,
	765, 222, 766, 767, 768, 769, 770, 0, 728, 0,
	479, 224, 225, 226, 480, 227, 228, 229, 0, 231,
	230, 0, 751, 481, 232, 482, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 483, 240,
	241, 243, 242, 689, 0, 718, 747, 244, 771, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	484, 250, 485, 741, 251, 252, 253, 254, 255, 0,
	256, 742, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 772, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 486,
	279, 280, 695, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 735, 293, 282, 283, 294,
	487, 295, 773, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 774, 300, 301, 743, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 775, 776,
	0, 0, 312, 313, 744, 745, 716, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 736, 322, 0,
	385, 323, 324, 325, 386, 777, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 690, 0,
	0, 0, 0, 0, 688, 0, 0, 0, 0, 686,
	687, 721, 710, 711, 708, 709, 700, 0, 696, 1956,
	0, 0, 0, 0, 699, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 738, 703, 0, 0, 0,
	179, 180, 181, 333, 753, 335, 754, 182, 755, 756,
	0, 183, 339, 340, 184, 185, 706, 737, 757, 758,
	343, 0, 186, 749, 0, 729, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 475, 194, 195,
	196, 0, 730, 731, 733, 0, 732, 734, 197, 198,
	395, 199, 759, 200, 760, 761, 0, 201, 0, 202,
	0, 203, 0, 0, 752, 205, 0, 206, 0, 0,
	0, 694, 207, 208, 209, 739, 740, 717, 0, 0,
	210, 211, 762, 763, 764, 0, 212, 0, 213, 0,
	0, 476, 0, 214, 750, 0, 355, 0, 215, 216,
	217, 218, 219, 746, 748, 478, 0, 223, 0, 220,
	0, 477, 221, 765, 222, 766, 767, 768, 769, 770,
	0, 728, 0, 479, 224, 225, 226, 480, 227, 228,
	229, 0, 231, 230, 0, 751, 481, 232, 482, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 483, 240, 241, 243, 242, 689, 0, 718, 747,
	244, 771, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 484, 250, 485, 741, 251, 252, 253,
	254, 255, 0, 256, 742, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 772, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 486, 279, 280, 695, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 735, 293,
	282, 283, 294, 487, 295, 773, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 774, 300, 301, 743, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 775, 776, 0, 0, 312, 313, 744, 745, 716,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	736, 322, 0, 385, 323, 324, 325, 386, 777, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 690, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 686, 687, 1132, 721, 710, 711, 708, 709,
	700, 696, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 738,
	703, 0, 0, 0, 179, 180, 181, 333, 753, 335,
	754, 182, 755, 756, 0, 183, 339, 340, 184, 185,
	706, 737, 757, 758, 343, 0, 186, 749, 0, 729,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 475, 194, 195, 196, 0, 730, 731, 733, 0,
	732, 734, 197, 198, 395, 199, 759, 200, 760, 761,
	0, 201, 0, 202, 0, 203, 0, 0, 752, 205,
	0, 206, 0, 0, 0, 694, 207, 208, 209, 739,
	740, 717, 0, 0, 210, 211, 762, 763, 764, 0,
	212, 0, 213, 0, 1506, 476, 0, 214, 750, 0,
	355, 0, 215, 216, 217, 218, 219, 746, 748, 478,
	0, 223, 0, 220, 0, 477, 221, 765, 222, 766,
	767, 768, 769, 770, 0, 728, 0, 479, 224, 225,
	226, 480, 227, 228, 229, 0, 231, 230, 0, 751,
	481, 232, 482, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 483, 240, 241, 243, 242,
	689, 0, 718, 747, 244, 771, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 484, 250, 485,
	741, 251, 252, 253, 254, 255, 0, 256, 742, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 772, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 486, 279, 280, 695,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 735, 293, 282, 283, 294, 487, 295, 773,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 774,
	300, 301, 743, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 775, 776, 0, 0, 312,
	313, 744, 745, 716, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 736, 322, 0, 385, 323, 324,
	325, 386, 777, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 690, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 0, 686, 687, 0, 0,
	0, 0, 0, 0, 0, 696, 0, 0, 0, 0,
	1551, 699, 721, 710, 711, 708, 709, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 738, 703, 0, 0,
	0, 179, 180, 181, 333, 753, 335, 754, 182, 755,
	756, 0, 183, 339, 340, 184, 185, 706, 737, 757,
	758, 343, 0, 186, 749, 0, 729, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 475, 194,
	195, 196, 0, 730, 731, 733, 0, 732, 734, 197,
	198, 395, 199, 759, 200, 760, 761, 0, 201, 0,
	202, 0, 203, 0, 0, 752, 205, 0, 206, 0,
	0, 0, 694, 207, 208, 209, 739, 740, 717, 0,
	0, 210, 211, 762, 763, 764, 0, 212, 0, 213,
	0, 0, 476, 0, 214, 750, 0, 355, 0, 215,
	216, 217, 218, 219, 746, 748, 478, 0, 223, 0,
	220, 0, 477, 221, 765, 222, 766, 767, 768, 769,
	770, 0, 728, 0, 479, 224, 225, 226, 480, 227,
	228, 229, 0, 231, 230, 0, 751, 481, 232, 482,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 689, 0, 718,
	747, 244, 771, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 484, 250, 485, 741, 251, 252,
	253, 254, 255, 0, 256, 742, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 772, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 486, 279, 280, 695, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 735,
	293, 282, 283, 294, 487, 295, 773, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 774, 300, 301, 743,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 775, 776, 0, 0, 312, 313, 744, 745,
	716, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 736, 322, 0, 385, 323, 324, 325, 386, 777,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 690, 0, 0, 0, 0, 0, 688, 0,
	0, 0, 0, 686, 687, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 1515, 699, 721,
	710, 711, 708, 709, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 738, 703, 0, 0, 0, 179, 180,
	181, 333, 753, 335, 754, 182, 755, 756, 0, 183,
	339, 340, 184, 185, 706, 737, 757, 758, 343, 0,
	186, 749, 0, 729, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	730, 731, 733, 0, 732, 734, 197, 198, 395, 199,
	759, 200, 760, 761, 0, 201, 0, 202, 0, 203,
	0, 0, 752, 205, 0, 206, 0, 0, 0, 694,
	207, 208, 209, 739, 740, 717, 0, 0, 210, 211,
	762, 763, 764, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 750, 0, 355, 0, 215, 216, 217, 218,
	219, 746, 748, 478, 0, 223, 0, 220, 0, 477,
	221, 765, 222, 766, 767, 768, 769, 770, 0, 728,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 751, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 689, 0, 718, 747, 244, 771,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 741, 251, 252, 253, 254, 255,
	0, 256, 742, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 772, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 695, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 735, 293, 282, 283,
	294, 487, 295, 773, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 774, 300, 301, 743, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 775,
	776, 0, 0, 312, 313, 744, 745, 716, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 736, 322,
	0, 385, 323, 324, 325, 386, 777, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 690,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	686, 687, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 1513, 699, 721, 710, 711, 708,
	709, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	738, 703, 0, 0, 0, 179, 180, 181, 333, 753,
	335, 754, 182, 755, 756, 0, 183, 339, 340, 184,
	185, 706, 737, 757, 758, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 759, 200, 760,
	761, 0, 201, 0, 202, 0, 203, 0, 0, 752,
	205, 0, 206, 0, 0, 0, 694, 207, 208, 209,
	739, 740, 717, 0, 0, 210, 211, 762, 763, 764,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	478, 0, 223, 0, 220, 0, 477, 221, 765, 222,
	766, 767, 768, 769, 770, 0, 728, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 689, 0, 718, 747, 244, 771, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 772,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	695, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 487, 295,
	773, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	774, 300, 301, 743, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 775, 776, 0, 0,
	312, 313, 744, 745, 716, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 386, 777, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 690, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 686, 687, 0,
	0, 0, 0, 0, 0, 0, 696, 0, 0, 0,
	0, 1497, 699, 721, 710, 711, 708, 709, 700, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 738, 703, 0,
	0, 0, 179, 180, 181, 333, 753, 335, 754, 182,
	755, 756, 0, 183, 339, 340, 184, 185, 706, 737,
	757, 758, 343, 0, 186, 749, 0, 729, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 475,
	194, 195, 196, 0, 730, 731, 733, 0, 732, 734,
	197, 198, 395, 199, 759, 200, 760, 761, 0, 201,
	0, 202, 0, 203, 0, 0, 752, 205, 0, 206,
	0, 0, 0, 694, 207, 208, 209, 739, 740, 717,
	0, 0, 210, 211, 762, 763, 764, 0, 212, 0,
	213, 0, 0, 476, 0, 214, 750, 0, 355, 0,
	215, 216, 217, 218, 219, 746, 748, 478, 0, 223,
	0, 220, 0, 477, 221, 765, 222, 766, 767, 768,
	769, 770, 0, 728, 0, 479, 224, 225, 226, 480,
	227, 228, 229, 0, 231, 230, 0, 751, 481, 232,
	482, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 483, 240, 241, 243, 242, 689, 0,
	718, 747, 244, 771, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 484, 250, 485, 741, 251,
	252, 253, 254, 255, 0, 256, 742, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 772, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 486, 279, 280, 695, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	735, 293, 282, 283, 294, 487, 295, 773, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 774, 300, 301,
	743, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 775, 776, 0, 0, 312, 313, 744,
	745, 716, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 736, 322, 0, 385, 323, 324, 325, 386,
	777, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 690, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 686, 687, 0, 0, 0, 0,
	0, 0, 0, 696, 0, 0, 0, 0, 1485, 699,
	721, 710, 711, 708, 709, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 738, 703, 0, 0, 0, 179,
	180, 181, 333, 753, 335, 754, 182, 755, 756, 0,
	183, 339, 340, 184, 185, 706, 737, 757, 758, 343,
	0, 186, 749, 0, 729, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 475, 194, 195, 196,
	0, 730, 731, 733, 0, 732, 734, 197, 198, 395,
	199, 759, 200, 760, 761, 0, 201, 0, 202, 0,
	203, 0, 0, 752, 205, 0, 206, 0, 0, 0,
	694, 207, 208, 209, 739, 740, 717, 0, 0, 210,
	211, 762, 763, 764, 0, 212, 0, 213, 0, 0,
	476, 0, 214, 750, 0, 355, 0, 215, 216, 217,
	218, 219, 746, 748, 478, 0, 223, 0, 220, 0,
	477, 221, 765, 222, 766, 767, 768, 769, 770, 0,
	728, 0, 479, 224, 225, 226, 480, 227, 228, 229,
	0, 231, 230, 0, 751, 481, 232, 482, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	483, 240, 241, 243, 242, 689, 0, 718, 747, 244,
	771, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 484, 250, 485, 741, 251, 252, 253, 254,
	255, 0, 256, 742, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 772, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 486, 279, 280, 695, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 735, 293, 282,
	283, 294, 487, 295, 773, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 774, 300, 301, 743, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	775, 776, 0, 0, 312, 313, 744, 745, 716, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 736,
	322, 0, 385, 323, 324, 325, 386, 777, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	690, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 686, 687, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 1483, 699, 1475, 710, 711,
	708, 709, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 738, 703, 0, 0, 0, 179, 180, 181, 333,
	753, 335, 754, 182, 755, 756, 0, 183, 339, 340,
	184, 185, 706, 737, 757, 758, 343, 0, 186, 749,
	0, 729, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 475, 194, 195, 196, 0, 730, 731,
	733, 0, 732, 734, 197, 198, 395, 199, 759, 1478,
	760, 761, 0, 201, 0, 202, 0, 203, 0, 0,
	752, 205, 0, 206, 0, 0, 0, 694, 207, 208,
	209, 739, 740, 717, 0, 0, 210, 211, 762, 763,
	764, 0, 212, 0, 213, 0, 0, 476, 0, 214,
	750, 0, 355, 0, 215, 216, 1479, 218, 219, 746,
	748, 478, 0, 223, 0, 220, 0, 477, 221, 765,
	222, 766, 767, 768, 769, 770, 0, 728, 0, 479,
	224, 225, 226, 480, 227, 228, 229, 0, 231, 230,
	0, 751, 481, 232, 482, 0, 233, 0, 0, 234,
	0, 235, 1480, 1477, 239, 366, 238, 483, 240, 241,
	243, 242, 689, 0, 718, 747, 244, 771, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 484,
	250, 485, 741, 251, 252, 253, 254, 255, 0, 256,
	742, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	772, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 486, 279,
	280, 695, 281, 0, 285, 286, 287, 1481, 0, 290,
	375, 289, 291, 292, 735, 293, 282, 283, 294, 487,
	295, 773, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 774, 300, 301, 743, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 775, 776, 0,
	0, 312, 313, 744, 745, 716, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 736, 322, 0, 385,
	323, 324, 325, 386, 777, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 1476, 331, 690, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 686, 687,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 0, 1472, 699, 1475, 710, 711, 708, 709, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 738, 703,
	0, 0, 0, 179, 180, 181, 333, 753, 335, 754,
	182, 755, 756, 0, 183, 339, 340, 184, 185, 706,
	737, 757, 758, 343, 0, 186, 749, 0, 729, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	475, 194, 195, 196, 0, 730, 731, 733, 0, 732,
	734, 197, 198, 395, 199, 759, 1478, 760, 761, 0,
	201, 0, 202, 0, 203, 0, 0, 752, 205, 0,
	206, 0, 0, 0, 694, 207, 208, 209, 739, 740,
	717, 0, 0, 210, 211, 762, 763, 764, 0, 212,
	0, 213, 0, 0, 476, 0, 214, 750, 0, 355,
	0, 215, 216, 1479, 218, 219, 746, 748, 478, 0,
	223, 0, 220, 0, 477, 221, 765, 222, 766, 767,
	768, 769, 770, 0, 728, 0, 479, 224, 225, 226,
	480, 227, 228, 229, 0, 231, 230, 0, 751, 481,
	232, 482, 0, 233, 0, 0, 234, 0, 235, 1480,
	1477, 239, 366, 238, 483, 240, 241, 243, 242, 689,
	0, 718, 747, 244, 771, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 484, 250, 485, 741,
	251, 252, 253, 254, 255, 0, 256, 742, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 772, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 486, 279, 280, 695, 281,
	0, 285, 286, 287, 1481, 0, 290, 375, 289, 291,
	292, 735, 293, 282, 283, 294, 487, 295, 773, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 774, 300,
	301, 743, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 775, 776, 0, 0, 312, 313,
	744, 745, 716, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 736, 322, 0, 385, 323, 324, 325,
	386, 777, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 1476, 331, 690, 0, 0, 0, 0, 0,
	688, 0, 0, 0, 0, 686, 687, 721, 710, 711,
	708, 709, 700, 0, 696, 0, 0, 0, 0, 0,
	699, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 738, 703, 0, 0, 0, 179, 180, 181, 333,
	753, 335, 754, 182, 755, 756, 0, 183, 339, 340,
	184, 185, 706, 737, 757, 758, 343, 0, 186, 749,
	0, 729, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 475, 194, 195, 196, 0, 730, 731,
	733, 0, 732, 734, 197, 198, 395, 199, 759, 200,
	760, 761, 0, 201, 0, 202, 0, 203, 0, 0,
	752, 205, 0, 206, 0, 0, 0, 694, 207, 208,
	209, 739, 740, 717, 0, 0, 210, 211, 762, 763,
	764, 0, 212, 0, 213, 0, 0, 476, 0, 214,
	750, 0, 355, 0, 215, 216, 217, 218, 219, 746,
	748, 478, 0, 223, 0, 220, 0, 477, 221, 765,
	222, 766, 767, 768, 769, 770, 0, 728, 0, 479,
	224, 225, 226, 480, 227, 228, 229, 0, 231, 230,
	0, 751, 481, 232, 482, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 483, 240, 241,
	243, 242, 689, 0, 718, 747, 244, 771, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 484,
	250, 485, 741, 251, 252, 253, 254, 255, 0, 256,
	742, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	772, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 486, 279,
	280, 695, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 735, 293, 282, 283, 294, 487,
	295, 773, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 774, 300, 301, 743, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 775, 776, 0,
	0, 312, 313, 744, 745, 716, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 736, 322, 0, 385,
	323, 324, 325, 386, 777, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 690, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 686, 687,
	721, 710, 711, 708, 709, 700, 0, 696, 1433, 0,
	0, 0, 0, 699, 0, 0, 176, 177, 1349, 178,
	0, 0, 0, 0, 738, 703, 0, 0, 0, 179,
	180, 181, 333, 753, 335, 754, 182, 755, 756, 0,
	183, 339, 340, 184, 185, 706, 737, 757, 758, 343,
	0, 186, 749, 0, 729, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 475, 194, 195, 196,
	0, 730, 731, 733, 0, 732, 734, 197, 198, 395,
	199, 759, 200, 760, 761, 0, 201, 0, 202, 0,
	203, 0, 0, 752, 205, 0, 206, 0, 0, 0,
	694, 207, 208, 209, 739, 740, 717, 0, 0, 210,
	211, 762, 763, 764, 0, 212, 0, 213, 0, 0,
	476, 0, 214, 750, 0, 355, 0, 215, 216, 217,
	218, 219, 746, 748, 478, 0, 223, 0, 220, 0,
	477, 221, 765, 222, 766, 767, 768, 769, 770, 0,
	728, 0, 479, 224, 225, 226, 480, 227, 228, 229,
	0, 231, 230, 0, 751, 481, 232, 482, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	483, 240, 241, 243, 242, 689, 0, 718, 747, 244,
	771, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 484, 250, 485, 741, 251, 252, 253, 254,
	255, 0, 256, 742, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 772, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 486, 279, 280, 695, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 735, 293, 282,
	283, 294, 487, 295, 773, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 774, 300, 301, 743, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	775, 776, 0, 0, 312, 313, 744, 745, 716, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 736,
	322, 0, 385, 323, 324, 325, 386, 777, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	690, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 686, 687, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 849, 699, 721, 710, 711,
	708, 709, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 738, 703, 0, 0, 0, 179, 180, 181, 333,
	753, 335, 754, 182, 755, 756, 0, 183, 339, 340,
	184, 185, 706, 737, 757, 758, 343, 0, 186, 749,
	0, 729, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 475, 194, 195, 196, 0, 730, 731,
	733, 0, 732, 734, 197, 198, 395, 199, 759, 200,
	760, 761, 0, 201, 0, 202, 0, 203, 0, 0,
	752, 205, 0, 206, 0, 0, 0, 694, 207, 208,
	209, 739, 740, 717, 0, 0, 210, 211, 762, 763,
	764, 0, 212, 0, 213, 0, 0, 476, 0, 214,
	750, 0, 355, 0, 215, 216, 217, 218, 219, 746,
	748, 478, 0, 223, 0, 220, 0, 477, 221, 765,
	222, 766, 767, 768, 769, 770, 0, 728, 0, 479,
	224, 225, 226, 480, 227, 228, 229, 0, 231, 230,
	0, 751, 481, 232, 482, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 483, 240, 241,
	243, 242, 689, 0, 718, 747, 244, 771, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 484,
	250, 485, 741, 251, 252, 253, 254, 255, 0, 256,
	742, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	772, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 486, 279,
	280, 695, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 735, 293, 282, 283, 294, 487,
	295, 773, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 774, 300, 301, 743, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 775, 776, 0,
	0, 312, 313, 744, 745, 716, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 736, 322, 0, 385,
	323, 324, 325, 386, 777, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 690, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 686, 687,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 0, 847, 699, 721, 710, 711, 708, 709, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 738, 703,
	0, 0, 0, 179, 180, 181, 333, 753, 335, 754,
	182, 755, 756, 0, 183, 339, 340, 184, 185, 706,
	737, 757, 758, 343, 0, 186, 749, 0, 729, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	475, 194, 195, 196, 0, 730, 731, 733, 0, 732,
	734, 197, 198, 395, 199, 759, 200, 760, 761, 0,
	201, 0, 202, 0, 203, 0, 0, 752, 205, 0,
	206, 0, 0, 0, 694, 207, 208, 209, 739, 740,
	717, 0, 0, 210, 211, 762, 763, 764, 0, 212,
	0, 213, 0, 0, 476, 0, 214, 750, 0, 355,
	0, 215, 216, 217, 218, 219, 746, 748, 478, 0,
	223, 0, 220, 0, 477, 221, 765, 222, 766, 767,
	768, 769, 770, 0, 728, 0, 479, 224, 225, 226,
	480, 227, 228, 229, 0, 231, 230, 0, 751, 481,
	232, 482, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 483, 240, 241, 243, 242, 689,
	0, 718, 747, 244, 771, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 484, 250, 485, 741,
	251, 252, 253, 254, 255, 0, 256, 742, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 772, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 486, 279, 280, 695, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 735, 293, 282, 283, 294, 487, 295, 773, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 774, 300,
	301, 743, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 775, 776, 0, 0, 312, 313,
	744, 745, 716, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 736, 322, 0, 385, 323, 324, 325,
	386, 777, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 690, 0, 0, 0, 0, 0,
	688, 0, 0, 0, 0, 686, 687, 721, 710, 711,
	708, 709, 700, 0, 696, 0, 0, 0, 0, 0,
	699, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 738, 703, 0, 0, 0, 179, 180, 181, 333,
	753, 335, 754, 182, 755, 756, 0, 183, 339, 340,
	184, 185, 706, 737, 757, 758, 343, 0, 186, 749,
	0, 729, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 475, 194, 195, 2418, 0, 730, 731,
	733, 0, 732, 734, 197, 198, 395, 199, 759, 200,
	760, 761, 0, 201, 0, 202, 0, 203, 0, 0,
	752, 205, 0, 206, 0, 0, 0, 694, 207, 208,
	209, 739, 740, 717, 0, 0, 210, 211, 762, 763,
	764, 0, 212, 0, 213, 0, 0, 476, 0, 214,
	750, 0, 355, 0, 215, 216, 217, 218, 219, 746,
	748, 478, 0, 223, 0, 220, 0, 477, 221, 765,
	222, 766, 767, 768, 769, 770, 0, 728, 0, 479,
	224, 225, 226, 480, 227, 228, 229, 0, 231, 230,
	0, 751, 481, 232, 482, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 483, 240, 241,
	243, 242, 689, 0, 718, 747, 244, 771, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 484,
	250, 485, 741, 251, 252, 253, 254, 255, 0, 256,
	742, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	772, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 486, 279,
	280, 695, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 735, 293, 282, 283, 294, 487,
	295, 773, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 774, 300, 301, 743, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 775, 776, 0,
	0, 312, 313, 744, 745, 716, 314, 315, 2417, 317,
	0, 0, 318, 319, 320, 321, 736, 322, 0, 385,
	323, 324, 325, 386, 777, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 690, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 686, 687,
	721, 710, 711, 708, 709, 700, 0, 696, 0, 0,
	0, 0, 0, 699, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 738, 703, 0, 0, 0, 179,
	180, 181, 333, 753, 335, 754, 182, 755, 756, 0,
	183, 339, 340, 184, 185, 706, 737, 757, 758, 343,
	0, 186, 749, 0, 729, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 475, 194, 195, 196,
	0, 730, 731, 733, 0, 732, 734, 197, 198, 395,
	199, 759, 200, 760, 761, 0, 201, 0, 202, 0,
	203, 0, 0, 752, 205, 0, 206, 0, 0, 0,
	694, 207, 208, 209, 739, 740, 717, 0, 0, 210,
	211, 762, 763, 764, 0, 212, 0, 213, 0, 0,
	476, 0, 214, 750, 0, 355, 0, 215, 216, 217,
	218, 219, 746, 748, 478, 0, 223, 0, 220, 0,
	477, 221, 765, 222, 766, 767, 768, 769, 770, 0,
	728, 0, 479, 224, 225, 226, 480, 227, 228, 229,
	0, 231, 230, 0, 751, 481, 232, 482, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	483, 240, 241, 243, 242, 689, 0, 718, 747, 244,
	771, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 484, 250, 485, 741, 251, 252, 253, 254,
	255, 0, 256, 742, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 772, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 486, 279, 280, 695, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 735, 293, 282,
	283, 294, 487, 295, 773, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 774, 300, 301, 743, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	775, 776, 0, 0, 312, 313, 744, 745, 716, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 736,
	322, 0, 385, 323, 324, 325, 386, 777, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	690, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 686, 687, 721, 710, 711, 708, 709, 700, 0,
	696, 0, 0, 0, 0, 0, 699, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 738, 703, 0,
	0, 0, 179, 180, 181, 2416, 753, 335, 754, 182,
	755, 756, 0, 183, 339, 340, 184, 185, 706, 737,
	757, 758, 343, 0, 186, 749, 0, 729, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 475,
	194, 195, 2418, 0, 730, 731, 733, 0, 732, 734,
	197, 198, 395, 199, 759, 200, 760, 761, 0, 201,
	0, 202, 0, 203, 0, 0, 752, 205, 0, 206,
	0, 0, 0, 694, 207, 208, 209, 739, 740, 717,
	0, 0, 210, 211, 762, 763, 764, 0, 212, 0,
	213, 0, 0, 476, 0, 214, 750, 0, 355, 0,
	215, 216, 217, 218, 219, 746, 748, 478, 0, 223,
	0, 220, 0, 477, 221, 765, 222, 766, 767, 768,
	769, 770, 0, 728, 0, 479, 224, 225, 226, 480,
	227, 228, 229, 0, 231, 230, 0, 751, 481, 232,
	482, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 483, 240, 241, 243, 242, 689, 0,
	718, 747, 244, 771, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 484, 250, 485, 741, 251,
	252, 253, 254, 255, 0, 256, 742, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 772, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 486, 279, 280, 695, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	735, 293, 282, 283, 294, 487, 295, 773, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 774, 300, 301,
	743, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 775, 776, 0, 0, 312, 313, 744,
	745, 716, 314, 315, 2417, 317, 0, 0, 318, 319,
	320, 321, 736, 322, 0, 385, 323, 324, 325, 386,
	777, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 690, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 686, 687, 721, 710, 711, 708,
	709, 700, 0, 696, 0, 0, 0, 0, 0, 699,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	738, 703, 0, 0, 0, 179, 180, 181, 333, 753,
	335, 754, 182, 755, 756, 0, 183, 339, 340, 184,
	185, 706, 737, 757, 758, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 759, 200, 760,
	761, 0, 201, 0, 202, 0, 203, 0, 0, 752,
	205, 0, 206, 0, 0, 0, 694, 207, 208, 209,
	739, 740, 717, 0, 0, 210, 211, 762, 763, 764,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	478, 0, 223, 0, 220, 0, 477, 221, 765, 222,
	766, 767, 768, 769, 770, 0, 728, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 0, 0, 718, 747, 244, 771, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 772,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	1495, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 487, 295,
	773, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	774, 300, 301, 743, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 775, 776, 0, 0,
	312, 313, 744, 745, 716, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 386, 777, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 721, 710, 711, 708,
	709, 700, 1493, 0, 0, 0, 0, 1491, 1492, 0,
	0, 0, 176, 177, 0, 178, 1494, 0, 0, 0,
	738, 703, 699, 0, 0, 179, 180, 181, 333, 753,
	335, 754, 182, 755, 756, 0, 183, 339, 340, 184,
	185, 0, 737, 757, 758, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 759, 200, 760,
	761, 0, 201, 0, 202, 0, 203, 0, 0, 752,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	739, 740, 717, 0, 0, 210, 211, 762, 763, 764,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	478, 0, 223, 0, 220, 0, 477, 221, 765, 222,
	766, 767, 768, 769, 770, 0, 728, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 0, 0, 718, 747, 244, 771, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 772,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	1495, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 487, 295,
	773, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	774, 300, 301, 743, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 775, 776, 0, 0,
	312, 313, 744, 745, 716, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 386, 777, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 721, 710, 711, 708,
	709, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 1494, 0, 0, 0,
	738, 703, 699, 0, 0, 179, 180, 181, 0, 753,
	335, 754, 182, 755, 756, 0, 183, 339, 340, 184,
	185, 706, 737, 757, 758, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 2418, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 759, 200, 760,
	761, 0, 201, 0, 202, 0, 203, 0, 0, 752,
	205, 0, 206, 0, 0, 0, 694, 207, 208, 209,
	739, 740, 717, 0, 0, 210, 211, 762, 763, 764,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	0, 0, 223, 0, 220, 0, 477, 221, 765, 222,
	766, 767, 768, 769, 770, 0, 728, 0, 0, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 689, 0, 718, 747, 244, 771, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 772,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	695, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 0, 295,
	773, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	774, 300, 301, 743, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 775, 776, 0, 0,
	312, 313, 744, 745, 716, 314, 315, 2417, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 386, 777, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 687, 0,
	0, 0, 176, 177, 0, 178, 696, 0, 0, 0,
	738, 0, 699, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 737, 341, 342, 343, 0, 186, 749, 0,
	729, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 730, 731, 733,
	0, 732, 734, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	739, 740, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 750,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 748,
	478, 0, 223, 0, 220, 0, 477, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	751, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 0, 0, 0, 747, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 741, 251, 252, 253, 254, 255, 0, 256, 742,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 735, 293, 282, 283, 294, 487, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 743, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 744, 745, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 736, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 898, 0, 901,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 2066, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 474, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 475, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 476,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 478, 0, 223, 0, 220, 0, 477,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 479, 224, 225, 226, 480, 227, 228, 229, 0,
	231, 230, 0, 365, 481, 232, 482, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 483,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 484, 250, 485, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	486, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	133, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 487, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 135,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 905, 387, 0, 0, 326,
	672, 0, 173, 127, 327, 328, 329, 330, 331, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 119,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 822, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 133, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 135, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 905, 387,
	0, 0, 326, 0, 173, 0, 127, 327, 328, 329,
	330, 331, 0, 128, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	816, 0, 1154, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	822, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 133, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 135, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	905, 387, 0, 0, 326, 672, 0, 173, 127, 327,
	328, 329, 330, 331, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 816, 0, 1154, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 133, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 135, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 905, 387, 0, 0, 326, 1815, 0,
	173, 127, 327, 328, 329, 330, 331, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 119, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 822, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 815, 0, 173, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 816, 0,
	821, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 822,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 0, 326, 0, 173, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 816, 0, 821, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 822, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 173, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 816, 0, 821, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 0, 326, 0, 0,
	173, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 1184, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 0, 173, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	1633, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 0, 326, 0, 173, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 1981, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 721, 710, 711, 708, 709, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 1157, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 753, 335, 754,
	182, 755, 756, 0, 183, 339, 340, 184, 185, 0,
	0, 757, 758, 343, 0, 186, 344, 0, 474, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	475, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 759, 200, 760, 761, 0,
	201, 0, 202, 0, 203, 0, 0, 752, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	717, 0, 0, 210, 211, 762, 763, 764, 0, 212,
	0, 213, 0, 0, 476, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 478, 0,
	223, 0, 220, 0, 477, 221, 765, 222, 766, 767,
	768, 769, 770, 0, 728, 0, 479, 224, 225, 226,
	480, 227, 228, 229, 0, 231, 230, 0, 365, 481,
	232, 482, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 483, 240, 241, 243, 242, 0,
	0, 718, 367, 244, 771, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 484, 250, 485, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 772, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 486, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 487, 295, 773, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 774, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 775, 776, 0, 0, 312, 313,
	383, 384, 716, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 777, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 950, 0, 901, 954, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	474, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	478, 0, 223, 0, 220, 0, 477, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	365, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 487, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 577, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 169, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 168, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 166, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	172, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 169, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 168, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 901, 954, 326, 0,
	0, 952, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 172, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	474, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 475, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 476, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	478, 0, 223, 0, 220, 0, 477, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 479, 224,
	225, 226, 480, 227, 228, 229, 0, 231, 230, 0,
	365, 481, 232, 482, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 483, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 484, 250,
	485, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 486, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 487, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 169, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 168, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 901, 954, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 172, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 474, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 475, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 476, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 478, 0, 223, 0,
	220, 0, 477, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 479, 224, 225, 226, 480, 227,
	228, 229, 0, 231, 230, 0, 365, 481, 232, 482,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 483, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 484, 250, 485, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 486, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 487, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 901, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 172, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 474, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 475, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 476, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 478, 0, 223, 0, 220, 0, 477, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	479, 224, 225, 226, 480, 227, 228, 229, 0, 231,
	230, 0, 365, 481, 232, 482, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 483, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	484, 250, 485, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 486,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	487, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 1571, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 1569, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 1610, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 1574, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 1608, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 1573, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	1609, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 1571, 186, 344, 0, 0, 1566,
	187, 188, 189, 0, 190, 1569, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 1574, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 1565, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 1573, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 1572, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 876, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 822, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 828, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 830, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 822, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 824, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 826,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 822, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 412, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 411, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 410, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 1554, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 2126, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 2126, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 2123,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 822, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 1338,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	1336, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 1318, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 603,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	929, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	605, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	600, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	1198, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 1197, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 603, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 929, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 605, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 600, 381, 382, 0, 0, 312, 930, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 603, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 594, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 605, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 913,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 600, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 894, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 893, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 891, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 890, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 887, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 886,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 884, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	883, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 880, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 879, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 173, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 176, 177, 868, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 866, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	865, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 862, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 860, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 856,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 858, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	834, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 836, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 832, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 603, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 594, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 593, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 605, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 595, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 596,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 600, 381, 382, 0, 0, 312, 598,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 585, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 586, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 583, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 575, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 435, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 1862, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 1860, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 1849, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 586, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 1208, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 0, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 798, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	0, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 0, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 0, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050,
	1051, 0, 0, 0, 0, 0, 0, 0, 1042, 0,
	0, 0, 0, 0, 0, 1022, 0, 0, 1053, 0,
	1019, 1020, 0, 1039, 1040, 1041, 1049, 1050, 1051, 0,
	0, 0, 0, 0, 0, 0, 1042, 0, 0, 1021,
	0, 0, 0, 1022, 0, 1036, 1053, 0, 1019, 1020,
	0, 1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 0,
	0, 0, 0, 0, 1042, 0, 0, 1021, 0, 0,
	0, 1022, 0, 1036, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 0, 0, 0,
	1027, 1036, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1046, 1054, 0, 0, 0, 0, 0, 0, 1027, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 1054,
	0, 0, 0, 1044, 0, 0, 1027, 0, 0, 1037,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1046, 1054, 0, 0,
	0, 1044, 0, 0, 1043, 0, 0, 1037, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 1043, 0, 0, 1037, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1038, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050, 1051,
	0, 0, 0, 0, 0, 0, 1047, 1042, 0, 0,
	0, 0, 0, 0, 1022, 0, 0, 1053, 1038, 1019,
	1020, 0, 1039, 1040, 1041, 1049, 1050, 1051, 0, 0,
	0, 0, 0, 0, 1047, 1042, 0, 0, 1021, 0,
	0, 0, 1022, 0, 1036, 1053, 1045, 0, 0, 1033,
	1034, 1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025,
	1026, 1028, 1029, 0, 0, 0, 1021, 0, 0, 0,
	0, 1749, 1036, 0, 1045, 0, 0, 1033, 1034, 1035,
	1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028,
	1029, 0, 0, 0, 0, 2389, 0, 0, 0, 1027,
	0, 0, 1045, 0, 0, 1033, 1034, 1035, 1048, 0,
	1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 1046,
	1054, 0, 0, 2342, 0, 0, 0, 1027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 1054, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 1037, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050, 1051,
	1044, 0, 0, 1043, 0, 0, 1037, 1042, 0, 0,
	0, 0, 0, 0, 1022, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 0, 0, 1036, 0, 0, 0, 0, 0,
	0, 1038, 0, 0, 0, 0, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 0, 1047, 0, 0,
	0, 0, 0, 1042, 0, 0, 0, 0, 0, 1038,
	1022, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 1027,
	0, 0, 0, 0, 1021, 0, 0, 0, 1019, 1020,
	1036, 1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 1046,
	1054, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
	0, 1022, 0, 0, 1053, 1045, 0, 1052, 1033, 1034,
	1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026,
	1028, 1029, 1044, 0, 0, 1021, 2296, 0, 1037, 0,
	0, 1036, 0, 1045, 0, 1027, 1033, 1034, 1035, 1048,
	0, 1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029,
	0, 0, 0, 1043, 2266, 1046, 1054, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1027, 0, 1044, 0,
	0, 0, 0, 0, 1037, 0, 0, 0, 0, 0,
	0, 1038, 0, 0, 0, 0, 1046, 1054, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 1043,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 1037, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1038, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 1045, 0, 0, 1033, 1034,
	1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026,
	1028, 1029, 0, 0, 0, 0, 2261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1038, 0,
	0, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050, 1051,
	0, 0, 0, 0, 1047, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 1022, 0, 0, 1053, 0, 0,
	0, 1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 1021, 0,
	0, 0, 2257, 0, 1036, 1019, 1020, 0, 1039, 1040,
	1041, 1049, 1050, 1051, 0, 0, 0, 0, 0, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 1022, 0,
	0, 1053, 1045, 0, 0, 1033, 1034, 1035, 1048, 0,
	1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 0,
	0, 0, 1021, 2199, 0, 0, 0, 0, 1036, 1027,
	0, 0, 0, 0, 0, 0, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 0, 1046,
	1054, 0, 0, 1042, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 1053, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 1027, 1021, 0, 0, 0, 1037, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1046, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 1037, 0, 0, 1027, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1038, 0, 0, 0, 1046, 1054, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 1037, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1038, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 0, 1043,
	0, 1047, 0, 1042, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 1053, 0, 1045, 0, 0, 1033, 1034,
	1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026,
	1028, 1029, 0, 0, 1021, 0, 2165, 0, 0, 0,
	1036, 0, 0, 0, 0, 1019, 1020, 1038, 1039, 1040,
	1041, 1049, 1050, 1051, 0, 0, 0, 0, 0, 0,
	0, 1042, 0, 1047, 0, 0, 0, 0, 1022, 1045,
	0, 1053, 1033, 1034, 1035, 1048, 0, 1032, 1030, 1031,
	1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0, 0,
	2164, 0, 1021, 0, 0, 1027, 0, 0, 1036, 0,
	0, 0, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050,
	1051, 0, 0, 0, 0, 1046, 1054, 0, 1042, 0,
	0, 0, 0, 0, 0, 1022, 0, 0, 1053, 0,
	0, 1045, 0, 1052, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 1044, 1021,
	0, 0, 2129, 1027, 1037, 1036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1046, 1054, 0, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	1027, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1038, 0, 0,
	1046, 1054, 0, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 1037,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1038, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0,
	0, 0, 1984, 0, 0, 0, 0, 0, 0, 0,
	1019, 1020, 1038, 1039, 1040, 1041, 1049, 1050, 1051, 0,
	0, 0, 0, 0, 0, 0, 1042, 0, 1047, 0,
	0, 0, 0, 1022, 0, 0, 1053, 0, 0, 1045,
	0, 0, 1033, 1034, 1035, 1048, 0, 1032, 1030, 1031,
	1023, 1024, 1025, 1026, 1028, 1029, 0, 1021, 0, 0,
	1960, 0, 0, 1036, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 0, 0, 1033,
	1034, 1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025,
	1026, 1028, 1029, 0, 0, 0, 0, 1434, 1027, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 1054,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 39, 122, 0, 0, 0, 1037, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 1043, 0, 0, 43, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 53, 0, 0, 0, 59, 0, 0, 125,
	0, 0, 0, 60, 0, 61, 0, 0, 0, 0,
	1038, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 1047, 0, 0, 63,
	0, 0, 64, 0, 0, 0, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 0, 0,
	0, 0, 0, 1042, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 1045, 0, 0, 1033, 1034, 1035,
	1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028,
	1029, 0, 65, 1719, 0, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 120, 67, 0,
	68, 0, 69, 0, 126, 1027, 2449, 0, 0, 70,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 100, 0, 1046, 1054, 0, 0, 0,
	1019, 1020, 123, 1039, 1040, 1041, 1049, 1050, 1051, 0,
	0, 0, 135, 1052, 0, 0, 1042, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 1053, 0, 1044, 0,
	0, 104, 0, 0, 1037, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 1021, 134, 0,
	0, 0, 0, 1036, 0, 0, 127, 0, 0, 1043,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2448, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1038, 1027, 0,
	1789, 0, 0, 1788, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 1046, 1054,
	0, 1019, 1020, 0, 1039, 1040, 1041, 1049, 1050, 1051,
	0, 0, 0, 0, 0, 0, 1052, 1042, 0, 0,
	0, 0, 1692, 0, 1022, 0, 0, 1053, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 1037, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 0, 0, 1036, 0, 0, 0, 0, 0,
	0, 1045, 1043, 0, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0,
	0, 0, 0, 0, 1693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
	1038, 1530, 0, 0, 0, 0, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 1047, 0, 0, 1046,
	1054, 0, 0, 1042, 0, 0, 0, 1529, 0, 0,
	1022, 0, 0, 1053, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 1021, 0, 0, 0, 1037, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 1045, 0, 0, 1033, 1034, 1035,
	1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028,
	1029, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1027, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1038, 0, 0, 0, 1046, 1054, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 1052, 0, 0, 1019, 1020, 0, 1039,
	1040, 1041, 1049, 1050, 1051, 0, 0, 0, 1044, 0,
	0, 0, 1042, 0, 1037, 0, 0, 0, 0, 1022,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 1036,
	0, 0, 0, 0, 0, 1045, 0, 0, 1033, 1034,
	1035, 1048, 0, 1032, 1030, 1031, 1023, 1024, 1025, 1026,
	1028, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 1027, 1019, 1020, 0, 1039, 1040,
	1041, 1049, 1050, 1051, 0, 0, 0, 0, 0, 0,
	0, 1042, 0, 0, 1046, 1054, 0, 0, 1022, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1021, 0, 0, 0, 0, 1044, 1036, 0,
	0, 0, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 1043, 669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1027, 1019, 1020, 0, 1039, 1040, 1041,
	1049, 1050, 1051, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 1046, 1054, 0, 1038, 1022, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1052, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 0, 0, 0, 1044, 1036, 0, 0,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 1027, 1033, 1034, 1035, 1048, 1795, 1032, 1030,
	1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0,
	0, 0, 1046, 1054, 0, 1038, 0, 1019, 1020, 0,
	1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 0, 0,
	1052, 1047, 0, 1042, 0, 0, 0, 1790, 0, 0,
	1022, 0, 0, 1053, 0, 1044, 0, 0, 0, 0,
	0, 1037, 0, 0, 0, 0, 0, 1964, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 1033, 1034, 1035, 1048, 0, 1032, 1030, 1031,
	1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0, 0,
	0, 0, 0, 0, 1038, 1027, 1019, 1020, 0, 1039,
	1040, 1041, 1049, 1050, 1051, 0, 0, 0, 0, 0,
	1047, 0, 1042, 0, 0, 1046, 1054, 0, 0, 1022,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 1044, 1036,
	0, 0, 0, 0, 1037, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 1043,
	0, 1033, 1034, 1035, 1048, 0, 1032, 1030, 1031, 1023,
	1024, 1025, 1026, 1028, 1029, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1046, 1054, 0, 1038, 0, 1019,
	1020, 0, 1039, 1040, 1041, 1049, 1050, 1051, 0, 0,
	0, 0, 1052, 1047, 0, 1042, 0, 0, 0, 1748,
	0, 0, 1022, 0, 0, 1053, 0, 1044, 0, 0,
	0, 0, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 0,
	0, 0, 1036, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032,
	1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 1027, 1019, 1020,
	0, 1039, 1040, 1041, 1049, 1050, 1051, 0, 0, 0,
	0, 0, 1047, 0, 1042, 0, 0, 1046, 1054, 0,
	0, 1022, 0, 0, 1053, 0, 1019, 1020, 0, 1039,
	1040, 1041, 1049, 1050, 1051, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 0, 0, 1022,
	1044, 1036, 1053, 0, 0, 0, 1037, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 1036,
	1045, 1043, 0, 1033, 1034, 1035, 1048, 0, 1032, 1030,
	1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1027, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1046, 1054, 0, 1038,
	0, 0, 0, 0, 1027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 1046, 1054, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 1037, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	1043, 0, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 1033, 1034, 1035, 1048,
	0, 1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 0, 0, 1257,
	1247, 1276, 1239, 1267, 1266, 0, 0, 1241, 1240, 0,
	0, 0, 1047, 1278, 1277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1272, 0, 1264,
	1263, 0, 1045, 0, 0, 1033, 1034, 1035, 1048, 1262,
	1032, 1030, 1031, 1023, 1024, 1025, 1026, 1028, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 1261, 1259, 1260,
	1045, 0, 0, 1033, 1034, 1035, 1048, 0, 1032, 1030,
	1031, 1023, 1024, 1025, 1026, 1028, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1250, 1249,
	1251, 1252, 1253, 1254, 1255, 0, 1275, 0, 0, 0,
	0, 0, 0, 0, 1257, 1247, 1276, 1239, 1267, 1266,
	0, 0, 1241, 1240, 0, 0, 0, 0, 1278, 1277,
	0, 0, 0, 0, 1243, 0, 0, 624, 0, 650,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	0, 0, 1272, 0, 1264, 1263, 0, 0, 0, 627,
	0, 0, 0, 0, 1262, 0, 0, 0, 0, 1258,
	0, 0, 0, 1369, 1367, 1368, 1371, 1370, 0, 0,
	628, 0, 1261, 1259, 1260, 630, 0, 0, 0, 0,
	636, 637, 0, 0, 646, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 0, 651, 631,
	1256, 1245, 0, 1250, 1249, 1251, 1252, 1253, 1254, 1255,
	1280, 1275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 0, 1242, 0, 0, 1273, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1243,
	0, 632, 0, 0, 0, 0, 0, 0, 1246, 0,
	0, 1265, 0, 1279, 0, 1248, 633, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 640, 0, 0, 635, 642, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 1245, 0, 0, 0,
	0, 0, 0, 0, 0, 1280, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1242, 0,
	0, 1273, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1246, 626, 643, 653, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	644, 0, 0, 0, 648, 0, 0, 0, 654, 0,
	0, 0, 0, 641, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
}
var sqlPact = [...]int{

	39608, -1000, 32, -1000, -1000, 198, -1000, -1000, -1000, 197,
	185, 184, -1000, 183, 182, 181, -1000, 179, 177, 176,
	175, 174, 172, 171, 169, -1000, 168, -1000, -1000, -1000,
	-1000, 167, 165, 164, 158, 156, 153, 152, 1006, 22664,
	151, 150, 1254, 35462, 149, 148, 147, 146, 1100, 145,
	143, 26174, 892, 1628, 142, 141, 134, 131, 129, 1067,
	35144, 3023, 2494, 6373, 1113, 1551, 34823, 22343, 1548, 1887,
	34502, -1000, -1000, 34181, 125, 122, 121, 118, 117, -1000,
	-1000, 33860, 115, 108, 104, 100, 98, 97, 96, 95,
	93, 92, 90, 89, 88, 81, -1000, 80, 79, 78,
	41395, 72, 71, 70, 1098, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 140, -1000, 1112, 438,
	2733, 8105, 1009, 1008, 1005, 996, 1003, 37370, 35462, 57,
	-11, 56, -1000, 1947, 675, 19749, 39608, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25853, 25532, 33539, 33218, 778, -1000, 20, 23936, 35462,
	-1000, 200, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15450, 15093, 559, 200, -1000, -1000, -1000, -1000, -1000,
	32897, -1000, 32576, 32255, 1411, 31934, -1000, -1000, -1000, -1000,
	31613, -1000, -1000, 1753, 1556, 1512, 25211, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31295,
	30974, 30653, 30332, 30011, 509, -1000, -1000, -1000, 18135, -1000,
	-1000, -1000, -1000, 50, -1000, -1000, -1000, -1000, 45, 42,
	40, 39, 37, 36, -1000, 29690, 1192, -1000, -1000, 21,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35462, -1000, 16136, -1000, 505, -1000, 1595, -1000, 16136, -1000,
	1189, -1000, -1000, -1000, -1000, -1000, 35462, -1000, -1000, -1000,
	-1000, -1000, -1000, 2074, 1155, 504, 29369, -1000, 1432, -1000,
	598, 771, -1000, -1000, -1000, 9135, 208, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1037, 22022, 1253, 1880,
	1750, 2072, 1399, 1742, 1731, 1660, 1644, 1634, 2071, 1015,
	2069, 1726, 1011, 2068, 1633, 1127, 678, 2067, 1584, 1578,
	-1000, -1000, -1000, -1000, 907, -1000, -1000, -1000, 27446, -1000,
	-1000, 1112, -1000, -1000, -1000, 1320, 1856, 1856, 1856, 1899,
	332, 310, -1000, 140, -1000, 1460, -1000, 1154, -1000, -1000,
	-1000, -1000, -1000, 40968, -1000, -1000, 16136, 16136, 16136, 16136,
	16136, 1110, 536, -1000, 503, 501, 7405, -1000, -1000, 2056,
	-1000, -1000, -1000, 327, -1000, -1000, 16136, 200, -1000, -1000,
	-1000, -1000, 500, 2063, -1000, 673, -1000, -1000, -1000, 611,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1638,
	499, 497, 494, -1000, -1000, -1000, -1000, 491, 490, 487,
	484, 483, 482, 480, 477, 476, 474, 473, 467, 466,
	465, 462, 1045, -1000, 634, -1000, -1000, 634, 634, -1000,
	441, 441, 442, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 441, -1000, -1000, -1000, 603, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 459, 1217, -1000, -1000, 1217, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 775, 36734, 15, 35462, -1000,
	458, 15, -1000, -1000, 456, -1000, 11207, 11207, -1000, -1000,
	-1000, -1000, -1000, 9835, 1484, -1000, 2422, -153, 329, 563,
	-1000, 18780, 21360, -1000, -1000, 1075, 1764, 652, -1000, 1012,
	1759, 543, -1000, 934, -1000, 902, 1758, -138, 22982, 23936,
	20, -23, -1000, -1000, -1000, 6043, 40968, -1000, 40968, -1000,
	842, 20393, 200, -1000, -1000, -1000, -1000, 455, 1277, 616,
	-1000, 330, -1000, 29048, 616, 1276, -1000, -1000, -1000, 27446,
	-1000, 35462, -1000, 35462, -1000, 871, -1000, 37052, 111, 1755,
	-1000, -1000, 111, 1749, -1000, 110, 1748, -1000, -1000, 1175,
	1746, -1000, -23, 1721, -1000, -1000, 16136, 27, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 675, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 28727, 23300, 927, 573, 40968, 1961, 41337,
	22982, 40968, 23300, -1000, -1000, 35462, -1000, 16136, -1000, 1950,
	1284, -5, -1000, -1000, -1000, -1000, -1000, 1315, 1393, 739,
	1079, 9135, 9135, 1813, -1000, 202, 6373, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28406, -1000, -1000, -1000, 1132,
	35462, -1000, -1000, 1631, -1000, 23300, 35462, -1000, 35462, -1000,
	35462, -1000, 35462, -1000, 35462, -1000, -1000, -1000, -1000, -1000,
	695, -1000, 1602, -1000, -1000, 35462, -1000, 1313, -1000, -1000,
	-1000, 28088, 27767, -1000, 965, 781, -1000, -1000, 112, -1000,
	-1000, 1320, -1000, 1206, 1387, 14736, 1353, 16136, 140, -1000,
	-1000, 140, 140, 8792, -1000, -1000, -1000, 35462, -1000, 41212,
	41337, 6373, 801, 16136, 16136, 16136, 16136, 16136, 16136, 16136,
	16136, 16136, 16136, 16136, 16136, 16136, 16136, 16136, 16136, 16136,
	16136, 16136, 16136, 16136, 16136, 1260, 16136, 772, 16136, 16136,
	16136, 16136, 1480, 1089, 440, 1220, -1000, 1986, 1986, 1986,
	324, 324, 427, 536, -1000, 16136, -1000, 157, 14393, 310,
	39232, 18, 7062, -1000, -1000, -1000, 9478, 630, 40968, 200,
	6705, -1000, 2051, 911, 1635, 1467, 452, 557, 555, 495,
	16136, 16136, 14050, 13693, 13336, 16822, 12979, 16136, 7748, 16136,
	16136, 16136, 16136, 12622, 12265, -1000, 449, -1000, -1000, -1000,
	-1000, 2039, -1000, -1000, 2037, -1000, 792, 788, 2034, -1000,
	-5, -1000, 36734, -1000, 35462, 15, 1944, 35462, -1000, 114,
	-1000, 40117, -1000, 114, 11, -1000, 1382, 1380, 20071, 1495,
	1121, 1121, 1121, -1000, 447, 528, 563, 5368, 11908, -1000,
	26492, 1131, 233, 302, 18458, 1484, -1000, 35462, -65, 1014,
	-1000, 24890, 1868, 1854, 1845, 27446, 1925, 157, 1577, 768,
	27446, 767, 1914, 157, 1575, 766, 35462, 6373, 572, -1000,
	35462, -1000, -1000, -1000, 1570, 6, -1000, -1000, 24572, 1943,
	1719, -1000, 1057, -1000, 1940, 35462, 1184, 1264, -1000, -1000,
	812, 1711, 622, 232, 1938, 232, 20716, -1000, 35462, -1000,
	35462, -1000, -1000, 35462, -1000, 35462, -1000, 35462, 35462, -1000,
	35462, 35462, 3, 40968, 667, 24254, 762, -1000, 650, 24572,
	-29, 0, -1000, 853, -1000, -1000, -1000, -1000, 230, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 442, 1045, 441, 441, 441, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 603, -1000, -1000, 634, 634, 634, -1000,
	-1000, -92, -1000, 1555, 597, -12, 705, -5, -1000, 1217,
	-1000, 943, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2062, -1000, 2008, -1000, -1000,
	2032, 5, -1000, 5, -1000, 6373, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35462, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 549, -1000, -1000, -1000, -1000, -1000, -1000, 35462,
	35462, 35462, -1000, 27446, -1000, -1000, -1000, -1000, 40968, -1000,
	384, -1000, -1000, 40968, 1064, 1403, -1000, 1403, -3, -1000,
	40001, 1360, 35462, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 592, 850, 850, 814, 814, 814,
	814, 1976, 231, 201, 2976, 2825, 2825, 2825, 3452, 365,
	365, 2825, 2825, 2825, 324, 4477, 2966, 16136, 16136, 761,
	1080, 440, 2966, 16136, 2966, 2966, 2966, 2966, -1000, 1305,
	-1000, -1000, -1000, -1000, 1553, 437, 16822, 16822, -1000, -1000,
	-1000, 7405, 17152, -1000, -1000, -1000, -1000, 436, 16136, -1000,
	39470, -213, -26, -1000, -1000, 16136, -27, -44, -1000, -1000,
	854, -1000, 16136, -1000, -37, 16136, 16136, 16136, 298, -1000,
	295, -1000, 758, -1000, 750, 747, 738, -1000, 435, 1119,
	433, 432, 16136, -1000, -1000, -1000, -1000, -1000, -1000, 40859,
	38012, 294, -1000, 1550, -127, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 293, -1000, 290, -1000, 40726, -127, 289, 405,
	-1000, 16822, 16822, 16822, 7405, 431, 288, -1000, 39870, -127,
	40617, 11551, 11551, 11551, 286, 40484, 16136, -127, 4441, 4066,
	3573, -28, -31, -1000, -45, -1000, 2031, -47, 285, 585,
	584, 284, -1000, -1000, 430, -48, 622, 11207, 19426, 6373,
	-1000, 622, 9835, -1000, 20071, 20071, 1404, 1371, 20071, -1000,
	-1000, -1000, -1000, 26492, 460, 563, 26492, -1000, 2029, 1354,
	-63, -1000, -1000, -1000, 35462, 429, -1000, 563, 283, 953,
	35462, 35462, 35462, -1000, -1000, 1256, 36416, 1251, 41337, 35462,
	-1000, 428, 425, 1357, 1346, 35462, 35462, 36098, 35780, 35462,
	949, 157, -1000, 424, 35462, 925, 35462, 157, -1000, 423,
	35462, 923, -1000, 1430, 1211, -1000, 841, 1549, 35462, 268,
	-69, -14, 41337, -1000, -1000, -1000, -1000, -1000, 35462, 481,
	35462, 157, 35462, 2061, 157, 35462, 1682, 1757, 556, 35462,
	910, 16136, 1078, -1000, 19103, 639, 35462, 910, 107, -1000,
	-1000, -1000, 566, 35462, -1000, -1000, 111, 111, -1000, 110,
	1175, -23, -1000, 16136, -1000, -1000, 35462, 22982, -70, -1000,
	-1000, 41337, -1000, 534, 769, -1000, 2027, 615, 22982, 35462,
	9135, 9135, -1000, 1389, -1000, -1000, 921, -1000, 1018, -1000,
	-1000, -1000, -1000, 9135, -1000, -72, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1064, -1000, 16136, 2021, -1000, -1000, -1000,
	8792, -1000, -1000, -1000, 35462, -147, 16136, 2966, 2966, 16136,
	16822, 16822, -1000, 2966, -1000, -1000, -1000, -1000, -1000, 1540,
	421, 16136, 41337, 3439, 1342, -76, -1000, 10864, -41, -1000,
	16136, -1000, 39175, -1000, -1000, 380, 1734, -1000, 16136, 40375,
	265, 10521, -1000, 40266, -42, -42, -1000, 2060, 1269, 1135,
	1031, 882, 2018, -1000, 21038, 626, 1156, 39117, 41212, 41337,
	-1000, 16136, -1000, -1000, 1510, 16136, -1000, 41212, 41337, 16822,
	16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822,
	16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822, 1338, 16822,
	1984, 1984, 1984, -64, 10178, -1000, 1498, 1510, 16136, 16136,
	41337, 264, 252, 248, -1000, 16136, -127, 16136, 16136, 16136,
	-1000, -1000, -1000, 247, -1000, 2017, -1000, -1000, -1000, -1000,
	-29, -1000, 1454, -1000, -93, -1000, 1484, -1000, 1454, -1000,
	-1000, 1404, -1000, 417, 16136, 20071, -1000, 527, -1000, -94,
	-1000, 26492, -1000, 526, -208, -1000, 562, -1000, 563, 416,
	35462, 26492, -1000, -1000, -1000, 736, 735, 1677, -1000, 1247,
	-1000, 646, -1000, 928, 16136, 17812, 414, 413, 1088, -1000,
	1676, 1175, 1675, 1175, -1000, -65, 983, -1000, 16136, -1000,
	730, -1000, -1000, 16136, -1000, 728, 615, 1509, 825, -1000,
	835, -1000, 1417, -1000, 24572, 409, 35462, 408, -1000, 407,
	-1000, -1000, 406, 35462, 1323, 556, 23618, -1000, 616, -1000,
	8448, 40968, -1000, 910, 1862, -96, -1000, -1000, -1000, 622,
	20716, 20071, 9835, -99, -1000, -1000, -1000, -1000, 40968, -72,
	1825, 1825, -1000, 2015, -1000, 523, 246, -1000, 27128, -1000,
	-72, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35462, 1143,
	38937, -1000, 1848, 6373, 1966, 2966, 358, 267, 16136, 41337,
	40996, -102, 16136, 16136, -1000, -110, -1000, 16136, 515, 40968,
	-1000, -1000, -1000, 40968, 16136, 2059, 16136, 245, 244, 243,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, -1000,
	-1000, 37688, 16136, 240, -1000, 239, 238, 40968, 1498, 40968,
	-1000, -1000, 641, 641, 881, 881, 881, 881, 1984, 2584,
	2934, 3375, 1427, 1427, 1427, 2551, 378, 378, 1427, 1427,
	1427, 1492, 1314, 403, 3324, 16136, -120, -1000, -1000, -1000,
	40968, 40968, 237, -1000, -1000, -1000, -127, 287, 38875, 38821,
	-1000, 236, 234, 1444, 1896, -1000, 20071, 1444, -1000, 35462,
	40968, -1000, -153, -1000, 2012, -1000, -1000, 1354, -1000, 5710,
	26492, 35462, -130, -1000, 35462, 35462, 35462, 1674, -1000, 2314,
	-1000, 38578, -131, -1000, 335, 1877, 16136, -1000, -1000, 402,
	17812, 35462, -1000, 1322, 1379, 677, 35462, -1000, 35462, -1000,
	35462, 35462, 35462, -132, 35462, -139, 35462, -1000, 22982, 784,
	-1000, -1000, 1421, -1000, 17812, 392, 35462, 24572, 1936, 17812,
	1182, 1343, 556, 23618, -1000, 812, -75, -1000, -1000, 386,
	157, 910, -1000, -83, -1000, 561, 1801, -1000, 1800, 514,
	-1000, -1000, -90, 391, -1000, 560, 558, -1000, -1000, -1000,
	-1000, 1848, 16136, 16136, 40996, -140, -1000, 2966, 2966, -1000,
	38527, -1000, 40968, -1000, 40266, -1000, -1000, -1000, -1000, 1068,
	-1000, 38461, -1000, -1000, -1000, -1000, 16822, 1483, 387, 41337,
	38309, -1000, -1000, 16136, -1000, -1000, -1000, -1000, 619, 16136,
	16136, 1484, 619, -141, 563, -1000, -1000, -1000, 2006, -1000,
	-150, -1000, -1000, -1000, -1000, 35462, -1000, 35462, -1000, 6373,
	35462, 1461, 1239, -1000, -1000, 1326, 383, 16822, 35462, -1000,
	1051, 17812, 1848, 200, 6373, 1848, 38281, 6705, -151, -156,
	1237, -1000, 1235, 16136, -1000, 41337, 1175, 1175, -1000, 724,
	720, 713, -1000, 710, -1000, -97, 21690, 1073, -158, 17812,
	-159, 228, 157, -161, 35462, -1000, 556, 23618, -1000, 1757,
	1779, 35462, 1841, -1000, -1000, 379, 377, 367, -1000, 26810,
	26810, 22982, 22982, -1000, 2966, 2966, -1000, -1000, 218, 1156,
	1894, -1000, 3504, 16822, 41337, -164, -1000, 38068, -1000, 35462,
	40968, -127, -1000, -1000, 26492, 496, -1000, -1000, 946, -1000,
	-1000, 35462, 1246, -1000, -1000, 16136, 3324, 366, 1417, 362,
	-1000, -1000, -1000, -1000, -1000, -1000, 1877, -37, -1000, 1002,
	-1000, -1000, 40968, 1873, -1000, -1000, 35462, 35462, 355, 345,
	-1000, 344, 200, 35462, 1051, -166, -1000, 1417, -1000, 1051,
	340, 23618, -1000, 1323, 804, -171, 35462, -1000, -1000, 4855,
	22982, 22982, -1000, -172, -1000, -1000, -1000, 935, 16136, 3504,
	-173, -1000, -1000, -108, -1000, 1934, -1000, -1000, -1000, -1000,
	1662, 38040, 1293, 35462, -1000, 35462, 1848, 215, 35462, 649,
	6373, -1000, -1000, 16136, 16136, 16136, 338, 1417, 1051, -1000,
	1417, 17812, -1000, 1343, 862, -1000, 622, -1000, -174, -179,
	-1000, 214, 16479, 16479, -127, -1000, 35462, 334, 1649, -1000,
	1166, 1111, 211, -180, -1000, -1000, 330, -1000, 16136, -1000,
	-181, -182, -42, 35462, -1000, 1417, -1000, -187, -1000, 20716,
	-1000, 615, 615, -1000, -1000, -1000, 17482, 1140, 893, 39737,
	-1000, -1000, -1000, 35462, -1000, 1177, 1174, 885, -1000, -1000,
	-1000, -1000, -1000, 1293, 40968, -1000, -1000, 210, -188, -1000,
	1051, -169, -1000, -1000, 1967, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1785, -1000, 668, 1218, 1218, 1166, 2059, 1146,
	1417, -1000, 15793, -1000, 1972, -1000, -1000, 1321, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2483, 2481, 1566, 1869, 2480, 2478, 2477, 2476, 2473,
	2472, 2471, 2469, 2467, 2466, 2460, 2458, 2457, 2454, 2453,
	2450, 2446, 2437, 2436, 2433, 2414, 2411, 1866, 2406, 2405,
	2401, 2399, 2398, 2396, 1838, 2394, 1830, 2393, 2391, 2388,
	2386, 2385, 1813, 1787, 2384, 70, 111, 1784, 2381, 2380,
	1735, 2378, 2374, 2373, 1714, 2370, 2365, 2364, 2363, 2362,
	246, 2360, 2358, 2355, 1712, 1682, 2351, 2349, 2342, 142,
	2341, 1622, 2340, 2339, 2338, 2337, 2335, 2334, 2324, 2321,
	2320, 2318, 2317, 2316, 2315, 2312, 2306, 2304, 2303, 2301,
	153, 2300, 2297, 1593, 1583, 2295, 2293, 28, 26, 14,
	49, 20, 133, 3140, 131, 2292, 2291, 2289, 2288, 2280,
	2276, 19, 92, 85, 2271, 367, 2265, 2258, 47, 32,
	22, 16, 2257, 79, 2255, 2244, 1293, 31, 2243, 2241,
	122, 2237, 103, 39, 2395, 145, 143, 105, 115, 2233,
	2232, 2230, 48, 109, 1, 2227, 2226, 11, 73, 27,
	2224, 17, 84, 2223, 2220, 117, 2217, 51, 83, 1488,
	89, 132, 400, 2215, 54, 10, 50, 2213, 2212, 148,
	36, 2211, 38, 69, 130, 2210, 42, 149, 120, 78,
	118, 123, 2209, 2206, 2204, 98, 2201, 108, 76, 2200,
	2194, 65, 2192, 125, 127, 2189, 2184, 81, 2183, 114,
	2182, 2179, 147, 135, 104, 8, 62, 60, 5, 1484,
	1479, 126, 90, 35, 45, 2178, 2375, 30, 949, 29,
	97, 72, 58, 99, 53, 86, 141, 33, 2177, 2176,
	124, 2175, 2173, 2170, 2169, 2168, 93, 2166, 2164, 18,
	2162, 66, 24, 59, 77, 34, 102, 119, 110, 144,
	96, 2161, 88, 112, 2160, 240, 2159, 2158, 1040, 113,
	2155, 2152, 2150, 1033, 1028, 916, 252, 2148, 2147, 271,
	268, 2144, 2140, 75, 2135, 107, 100, 80, 137, 134,
	56, 2134, 106, 25, 2131, 57, 21, 0, 448, 91,
	2130, 116, 63, 2128, 2127, 2126, 2125, 23, 3, 9,
	4, 7, 6, 43, 37, 2123, 2122, 121, 94, 55,
	2121, 146, 2120, 2113, 2111, 41, 2109, 15, 2103, 12,
	2102, 2101, 13, 2, 2100, 2099, 138, 2095, 87, 2094,
	1902, 2086, 139, 2084, 2080, 1612, 46, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 113, 113,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 110, 110, 115, 115, 115,
	117, 117, 114, 114, 109, 109, 20, 20, 58, 58,
	100, 51, 51, 51, 285, 285, 286, 286, 96, 96,
	97, 97, 97, 97, 98, 98, 99, 99, 99, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 161,
	161, 160, 160, 163, 163, 42, 42, 42, 42, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 46, 46, 46, 46, 46, 46,
	46, 46, 254, 254, 253, 44, 44, 228, 228, 47,
	47, 186, 186, 48, 48, 48, 48, 48, 49, 49,
	59, 59, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 54, 54,
	54, 54, 55, 55, 55, 56, 56, 95, 95, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 65, 65,
	65, 67, 64, 64, 64, 66, 66, 66, 66, 68,
	68, 69, 69, 69, 69, 69, 70, 70, 279, 277,
	277, 278, 278, 140, 140, 140, 140, 140, 141, 141,
	141, 284, 284, 284, 284, 284, 284, 283, 283, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 83, 83, 83, 90, 90,
	90, 90, 90, 90, 90, 72, 72, 77, 77, 77,
	77, 77, 73, 73, 78, 78, 79, 79, 80, 80,
	80, 80, 80, 80, 74, 74, 74, 74, 82, 82,
	82, 82, 81, 81, 87, 87, 87, 87, 87, 87,
	84, 84, 84, 84, 85, 85, 85, 88, 88, 88,
	88, 75, 75, 76, 76, 89, 89, 86, 86, 86,
	43, 327, 327, 329, 329, 52, 52, 30, 30, 31,
	31, 142, 142, 143, 143, 207, 207, 207, 207, 144,
	144, 116, 116, 116, 206, 295, 295, 296, 296, 296,
	296, 296, 296, 297, 297, 297, 297, 297, 297, 297,
	293, 293, 294, 291, 291, 292, 292, 292, 292, 333,
	333, 205, 205, 147, 147, 300, 300, 300, 300, 298,
	298, 298, 298, 298, 301, 299, 302, 302, 302, 302,
	302, 240, 240, 240, 92, 92, 32, 32, 122, 122,
	33, 33, 29, 29, 29, 190, 190, 151, 151, 245,
	245, 245, 133, 133, 111, 111, 111, 14, 11, 11,
	11, 11, 11, 11, 19, 19, 17, 17, 191, 191,
	192, 192, 53, 53, 57, 57, 62, 62, 91, 91,
	91, 91, 91, 91, 21, 21, 21, 21, 25, 25,
	25, 25, 61, 61, 335, 335, 129, 129, 129, 129,
	130, 130, 202, 202, 203, 203, 203, 204, 204, 204,
	124, 123, 125, 125, 28, 28, 28, 118, 118, 119,
	119, 120, 120, 121, 121, 336, 336, 50, 50, 50,
	94, 94, 136, 136, 199, 199, 199, 201, 201, 200,
	200, 200, 176, 176, 176, 93, 93, 156, 156, 165,
	165, 166, 166, 251, 167, 167, 60, 60, 103, 103,
	101, 101, 101, 101, 101, 101, 102, 102, 102, 104,
	104, 104, 104, 104, 104, 104, 107, 107, 107, 108,
	108, 108, 106, 106, 308, 308, 308, 311, 311, 307,
	309, 309, 310, 310, 334, 334, 177, 177, 177, 146,
	145, 145, 149, 149, 148, 150, 150, 244, 244, 244,
	174, 174, 174, 174, 193, 193, 194, 194, 195, 195,
	196, 196, 196, 197, 197, 198, 198, 173, 173, 224,
	224, 105, 105, 105, 155, 155, 155, 157, 157, 214,
	214, 214, 215, 215, 213, 213, 213, 213, 246, 246,
	246, 246, 246, 246, 246, 246, 324, 324, 324, 325,
	325, 243, 243, 247, 247, 247, 247, 247, 247, 241,
	241, 241, 241, 242, 242, 252, 252, 180, 180, 180,
	180, 178, 178, 179, 179, 248, 248, 248, 248, 175,
	175, 249, 249, 249, 208, 208, 255, 255, 255, 273,
	273, 154, 154, 154, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 257, 257, 257, 257, 259, 259, 259, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 272, 272, 272, 272,
	272, 260, 260, 267, 267, 268, 268, 269, 270, 261,
	261, 262, 262, 263, 264, 271, 271, 271, 271, 275,
	275, 265, 265, 265, 265, 265, 266, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 188, 188, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 218, 218, 218, 218, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	303, 303, 303, 303, 303, 303, 303, 303, 305, 305,
	306, 306, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	312, 312, 313, 313, 315, 315, 316, 316, 317, 318,
	318, 318, 319, 320, 320, 314, 314, 321, 321, 321,
	322, 322, 323, 323, 323, 323, 323, 230, 230, 230,
	231, 231, 232, 238, 238, 238, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 131, 131, 131, 131, 131, 162, 162, 227,
	227, 225, 225, 225, 229, 229, 181, 181, 274, 274,
	274, 274, 274, 274, 274, 182, 182, 182, 189, 183,
	183, 184, 184, 184, 184, 184, 184, 221, 222, 185,
	185, 185, 223, 223, 233, 237, 237, 236, 235, 235,
	234, 234, 211, 211, 212, 212, 210, 209, 170, 170,
	169, 169, 168, 168, 337, 337, 239, 239, 171, 171,
	172, 164, 164, 250, 250, 250, 250, 158, 158, 138,
	138, 159, 159, 134, 134, 137, 137, 135, 135, 135,
	135, 152, 152, 153, 153, 132, 132, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 276, 276,
	276, 226, 126, 126, 126, 127, 127, 128, 128, 281,
	281, 281, 282, 282, 282, 282, 280, 280, 280, 280,
	280, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 6, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 2, 0, 2, 0, 3, 2, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 2, 4, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 2, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -58, -57, -59, -62, -60, -53, -54, -63, -71,
	-91, -92, -93, -94, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -101, -103, 238, -55, -56, -64, -65, -66, -67,
	-95, 262, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	265, -21, -25, -61, 303, -9, -10, -13, -12, -11,
	-16, -18, -15, -17, -19, -14, -308, -104, -102, 354,
	239, 312, 35, 274, 61, 101, 246, 328, 335, -107,
	-105, -106, -108, 255, 320, 284, 358, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, 284, 323, 83, 141, -326, 2, -159, 284, 83,
	-135, -126, 347, 4, -287, -289, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 67, 68, 71, 72, 73, 81, 82, 84,
	86, 90, 92, 94, 97, 98, 100, 105, 106, 107,
	113, 114, 119, 121, 126, 131, 132, 133, 134, 135,
	142, 145, 147, 140, 157, 158, 159, 161, 162, 163,
	166, 165, 170, 173, 176, 178, 179, 180, 183, 181,
	185, 186, 188, 187, 193, 195, 196, 198, 201, 204,
	207, 210, 211, 212, 213, 214, 216, 218, 220, 222,
	223, 224, 225, 226, 228, 229, 231, 232, 233, 234,
	235, 238, 236, 237, 239, 240, 241, 242, 244, 246,
	247, 249, 263, 264, 275, 251, 252, 253, 254, 258,
	256, 259, 260, 262, 265, 267, 270, 273, 274, 276,
	279, 280, 277, 272, 283, 285, 286, 287, 288, 289,
	290, 291, 298, 299, 303, 304, 305, 306, 309, 310,
	311, 312, 314, 317, 318, 319, 324, 329, 330, 331,
	332, 333, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 85, 87, 88, 104, 108,
	109, 115, 116, 117, 127, 129, 136, 137, 146, 148,
	149, 150, 151, 152, 154, 168, 182, 192, 194, 205,
	209, 217, 219, 227, 248, 257, 268, 269, 278, 281,
	293, 294, 295, 300, 301, 316, 320, 321, 357, 357,
	2, 158, 224, -134, -126, 83, 357, 357, 357, 357,
	284, 2, 313, 323, -190, 83, 308, 357, 357, -126,
	220, 22, 2, 92, 145, 311, 310, 22, 216, 256,
	286, 288, 2, 357, 357, 357, 357, 357, 2, 323,
	284, 141, 83, 313, -126, 2, -46, 2, 354, -45,
	-4, -27, -36, -47, -42, -43, -60, -71, -34, -50,
	-93, -94, -64, -65, -54, 262, -330, 2, 22, -331,
	-332, 69, 98, 125, 255, 145, 92, 310, -280, 4,
	-287, -289, -288, -290, 58, 70, 124, 144, 138, 156,
	160, 169, 171, 184, 206, 208, 245, 266, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 74, 75, 77, 76, 78,
	79, 80, 89, 91, 93, 95, 96, 99, 101, 103,
	110, 111, 112, 120, 122, 123, 125, 128, 130, 139,
	141, 143, 153, 155, 164, 167, 172, 174, 175, 189,
	190, 191, 197, 199, 200, 202, 203, 215, 221, 230,
	243, 255, 261, 271, 282, 284, 292, 296, 297, 302,
	307, 308, 313, 315, 322, 323, 325, 326, 327, 328,
	284, 2, 158, 2, -126, 2, -326, 2, 158, 2,
	-330, 2, -126, 2, -130, 2, 251, -126, 357, 357,
	357, 357, 357, 173, 55, 248, 259, -69, 299, -68,
	293, -279, -70, 2, -160, 183, -126, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 2, -90, 259, 34, 55, 22,
	60, 84, 126, 141, 142, 162, 65, 66, 223, 173,
	159, 298, 163, 260, 285, 299, 69, 314, 289, 106,
	4, 83, 183, 261, 293, 357, 357, 357, -334, 2,
	284, -102, -104, -103, -148, -149, 307, 153, 103, 203,
	-101, -103, 2, -308, -90, 259, 2, 55, 22, -277,
	2, -239, 199, -216, 89, -218, 345, 346, 340, 189,
	334, -230, -220, -233, 104, 248, 354, -134, -219, 360,
	9, -305, -103, 29, -231, -232, 49, -126, 7, 8,
	5, 6, -132, -257, -226, -266, 302, 110, 191, -303,
	-304, 4, -287, -281, -258, -268, -262, -265, 154, 58,
	75, 76, 79, 77, 80, 261, 313, 50, 28, 108,
	109, 209, 217, 281, 300, 301, 136, 192, 137, 56,
	127, 168, 97, 37, 39, 41, 42, 51, 52, 85,
	87, 88, 115, 116, 117, 146, 148, 149, 150, 151,
	152, 194, 227, 268, 278, 294, 295, 321, -288, -269,
	-270, -263, -264, -271, -335, 2, 299, 299, 2, -335,
	2, -335, 2, -129, 2, 299, 296, -311, 228, -307,
	-126, -311, 357, 357, 359, 357, -145, -146, 2, 22,
	95, -172, 2, 354, -246, 2, 352, -248, -134, -103,
	-247, 354, 200, -3, 2, -248, 136, -134, 2, -248,
	136, -134, 2, -126, 2, -137, 136, -134, 296, 359,
	-159, -152, -126, -210, -209, 356, -216, 2, -216, 2,
	123, 354, -169, -170, -209, -210, 2, -160, 136, -126,
	2, -160, 2, 141, -126, 136, 2, -126, 22, 123,
	2, 155, 2, 155, 2, -249, 2, -248, -161, 136,
	2, -160, -161, 136, 2, -138, 136, 2, -137, -126,
	136, 2, -152, 136, 2, -186, 354, -254, 2, -253,
	-282, 4, -287, -289, -288, 320, 357, 357, 357, 357,
	357, 357, 357, 259, 199, 359, -160, -216, -228, 354,
	123, -216, 199, -126, 2, 263, 2, 354, -69, 53,
	299, -203, 2, -204, -123, -124, -125, 157, 222, 226,
	333, 296, 339, 123, -277, -163, 356, -90, 2, -285,
	2, -283, 9, -282, 5, 263, 2, 223, 260, 55,
	123, 2, 2, -327, 2, 199, 123, 2, 123, 2,
	123, 2, 123, 2, 123, 2, 2, 223, 260, 2,
	120, 2, 298, 2, 2, 123, 2, 157, 222, 275,
	2, 284, 323, 2, 123, 123, 333, 2, -175, -248,
	-148, -149, -174, -193, -194, 172, 112, 197, -177, 22,
	95, -177, -177, 44, 355, 355, -90, 263, 2, 10,
	11, 57, 33, 345, 346, 347, 348, 118, 349, 350,
	343, 344, 342, 337, 338, 339, 63, 177, 250, 13,
	14, 15, 26, 202, 171, 334, 138, 266, 340, 16,
	17, 18, 156, 36, 139, -131, -139, -216, -216, -216,
	-216, -216, 208, -168, -211, 352, -103, 354, 354, -103,
	-216, -162, 354, 7, -103, -225, 352, -234, -216, -169,
	354, 5, 354, 5, -312, 329, 120, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 219, -275, 324, -275, -275,
	-259, 354, -259, -260, 354, -259, 330, 335, 354, -202,
	-203, -202, 296, -130, 359, -311, -153, 354, -172, -164,
	-250, -216, 347, -164, -171, -239, 70, -180, 160, 184,
	124, 169, 245, 144, 7, -46, -213, 360, 354, 347,
	-243, 335, -103, -247, 354, -246, -134, 354, -113, 236,
	-112, 21, 23, 98, 318, 104, 272, 290, 252, 236,
	104, 236, 272, 290, 252, 236, 104, 360, -285, -135,
	359, -280, 347, 276, 355, -158, -134, -170, 354, -147,
	189, -122, -309, 328, -147, 354, -127, 136, 2, -126,
	-309, 189, -249, -136, -134, -136, 262, -126, 30, -115,
	359, 48, 241, 104, -115, 104, -115, 359, 104, -115,
	104, 104, -162, -216, 355, 359, -326, -332, 69, 354,
	30, -227, -255, -256, -258, -267, -261, -265, -266, 40,
	46, 45, 291, 182, 257, 269, 316, 38, 198, 147,
	146, 148, 149, 150, 151, 152, 268, 37, 227, 116,
	117, 115, 97, 88, 87, 194, 42, 41, -269, -270,
	-263, -264, 85, 294, 295, 154, 39, 52, 51, 321,
	278, -286, -285, -326, -279, -162, 30, -203, 2, 359,
	-204, 170, -141, 176, 188, 132, 200, 331, -284, 5,
	4, -226, -240, 89, 173, -266, 8, 346, -276, 7,
	345, -278, -277, -278, 73, 356, -280, -160, 22, 264,
	2, -279, -329, 120, -326, -279, -279, -279, -279, -279,
	259, -46, 120, -126, 170, -279, 2, -279, 2, 284,
	141, 284, -115, 359, -174, -194, -193, -195, -216, 22,
	-198, 114, 185, -216, -218, -102, -102, -102, -150, -244,
	-216, 221, 141, -279, -273, -255, -272, 232, 233, 231,
	235, 234, -255, -280, 293, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, 171, 138, 266,
	36, 139, -216, 296, -216, -216, -216, -216, 181, 189,
	191, 302, 110, 309, 95, 195, -337, 282, 32, -223,
	-103, 354, -238, 27, 271, 22, -230, 248, 354, -211,
	-216, -212, -162, 355, 355, 359, -162, -229, 353, -225,
	-237, -236, 325, 355, -162, 322, 22, 95, 347, 2,
	7, -187, 332, 180, 86, 133, 179, -188, 254, -313,
	113, 128, 354, 355, 2, 355, 2, 355, 2, -216,
	-216, -181, 2, -274, -162, 4, 332, 180, 86, 133,
	179, 254, -181, 2, -182, 2, -216, -162, -183, -217,
	-218, 345, 346, 340, 354, 248, -184, 2, -216, -162,
	-216, 43, 167, 297, -185, -216, 123, -162, -216, -216,
	-216, -162, -162, 2, -162, 2, 354, 7, 7, 293,
	293, 7, -130, -307, 30, -152, -155, 359, 123, 30,
	4, -155, 359, 355, 160, 160, -246, -180, 160, -178,
	206, -178, -178, -324, 354, 353, -243, -280, 352, 361,
	-162, 2, -242, -241, 30, -126, 204, 355, -134, 359,
	296, -191, 65, 59, -206, 136, 59, -291, -126, 65,
	-292, 54, 308, 221, 122, -191, 65, -191, 65, 65,
	-248, 33, -60, 123, 296, -248, 296, 33, -60, 123,
	296, -137, -280, -252, 336, -126, 123, 355, 359, -142,
	-152, -143, -126, -207, -206, -293, -294, -291, 141, 308,
	111, 30, 104, 213, 30, 199, 189, -118, 287, 104,
	-208, 326, -199, -60, 354, 89, 30, -199, -165, -166,
	-251, -167, -134, 354, -126, -160, -161, -161, -137, -138,
	-126, -152, 355, 359, -46, -253, 296, 315, -143, -45,
	355, 359, -154, 29, 352, -187, 354, -252, 359, 123,
	339, 296, 355, 299, -204, -140, 226, 270, 237, 258,
	8, 7, 7, 359, -280, -328, -126, 259, -46, -134,
	-137, -134, -248, -196, -276, 354, 346, -197, 248, 249,
	359, -111, 31, 93, 161, -134, 333, -216, -216, 296,
	-337, 282, -223, -216, 181, 191, 302, 110, 309, 95,
	195, 123, 354, -217, -217, -162, -220, 354, -162, 353,
	363, 355, -216, 353, 353, 359, -235, -236, 99, -216,
	-149, 359, -148, -216, -162, -162, 355, 355, 296, 296,
	296, 296, 354, -318, 207, 354, 354, -216, 30, 359,
	355, 123, 355, 355, -189, 215, 355, 10, 11, 345,
	346, 347, 348, 118, 349, 350, 343, 344, 342, 337,
	338, 339, 63, 177, 250, 13, 14, 15, 156, 139,
	-217, -217, -217, -162, 354, 355, -221, -222, 123, 120,
	30, -185, -185, -185, 355, 123, -162, 359, 359, 359,
	355, 355, 355, 7, 355, 359, 355, 333, 333, 355,
	354, 355, -208, -250, -157, 2, -246, -280, -208, -239,
	-246, -246, -179, 315, 199, 160, -246, -241, 355, -325,
	7, -243, -242, 7, -215, -214, 121, 187, 355, -126,
	354, -243, 355, -112, -134, -126, -126, 189, -206, 136,
	-117, 189, -255, -126, 354, 354, 161, 161, -126, -126,
	136, -126, 136, -126, -126, -113, 236, -60, 354, -134,
	236, -126, -60, 354, -126, 236, -96, 135, 195, 276,
	123, -134, 355, 355, 359, -127, 141, -127, -60, -160,
	5, -60, -134, 104, -119, 100, -336, 339, -126, -176,
	243, -216, -176, -201, 199, -158, 320, -126, -176, -156,
	359, 123, 339, -158, -115, -115, -115, -115, -216, -328,
	-285, 355, -255, 352, 353, 7, 7, -99, 328, -285,
	-328, -277, -277, -123, 306, 62, 226, -277, 359, -197,
	-216, -244, -134, 360, -216, -216, -217, -217, 123, 354,
	-216, -227, 26, 26, 355, -162, 355, 359, -212, -216,
	355, -225, 101, -216, 292, 355, 322, -149, -149, -149,
	5, 180, 133, 179, -188, 179, -188, -188, 7, -319,
	-126, 354, 326, -148, 355, -273, -255, -216, -221, -216,
	-273, -255, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, 95, 189, 195, -217, 359, -162, 355, -222, -221,
	-216, -216, -255, 355, 355, 355, -162, -216, -216, -216,
	355, 7, -45, -173, 128, -252, 359, -173, -179, 354,
	-216, -246, 353, 355, 359, -242, 353, 359, 362, 339,
	-243, 354, -152, -241, 296, 296, 104, 189, 317, -295,
	-292, -216, -151, -245, -126, -306, 354, -303, -304, -132,
	354, 354, -110, 98, 262, -192, 104, -115, 104, -115,
	296, -191, 65, -162, 296, -162, 296, -99, 123, 283,
	276, -144, 140, -207, 354, -127, 354, 354, -147, 354,
	-126, -120, 166, -336, -283, -309, -164, 190, -176, 64,
	355, -208, -166, -157, -239, 355, -100, 71, -100, 7,
	353, 355, -98, 201, -97, -126, 5, -126, 200, 355,
	-111, -280, 26, 26, -216, -227, 355, -216, -216, 355,
	-216, 353, -216, 5, -216, 355, 355, 355, 355, -320,
	-126, -216, 355, 355, 355, -222, 123, 95, 195, 354,
	-216, 355, 355, 359, 355, 355, 355, 355, -224, 130,
	44, -246, -224, -152, -213, 7, -214, -280, 352, -242,
	-152, 355, -126, -126, -206, 104, -296, 65, -297, 57,
	111, 69, 189, 191, 308, 221, 54, 89, 230, 355,
	355, 359, -133, -169, 57, -133, -216, 354, -151, -152,
	189, 89, 189, 89, 82, 304, -126, -126, -134, -126,
	-126, 355, -134, 355, -126, -286, 293, 139, -151, 354,
	-152, -142, 30, -151, 199, -121, 165, -336, -283, -118,
	-200, 354, 199, -60, -176, 339, 82, 82, 353, 359,
	354, 339, 339, -111, -216, -216, 355, 355, -149, -314,
	212, 355, -217, 123, 354, -227, 355, -216, -315, 327,
	-216, -162, -315, 355, -243, 7, 355, -206, -126, -280,
	-126, 111, 136, 191, 161, 354, -217, -134, -205, -333,
	68, 280, -245, -111, -280, -111, 355, -162, 355, 355,
	191, 191, -216, -255, -115, -115, 296, 296, 296, 296,
	-219, -132, -126, 210, 355, -151, 355, 355, -60, 355,
	-134, -336, -283, -119, 96, -152, 65, -172, -103, 354,
	354, 354, -97, -98, -285, -285, 355, -149, 44, -217,
	-227, 355, 355, -316, -317, -126, -242, 353, -297, -127,
	189, -216, -128, 354, -144, 354, -133, -149, 230, -114,
	57, -126, -126, 354, 354, 354, -134, -205, 355, -144,
	-205, 354, -283, -120, 310, 190, 355, -126, -286, -286,
	355, -321, 225, 249, -162, 355, 359, 30, 104, 355,
	-300, 178, -126, -152, -111, 355, -134, -109, 315, -280,
	-162, -162, -162, 354, -144, -205, -144, -151, -121, 262,
	-208, 355, 355, 355, -322, -323, 36, 305, 73, -216,
	-322, -317, -319, 111, -298, -301, -299, 199, 124, 211,
	267, 355, 355, -147, -216, 355, 355, -149, -152, -144,
	355, -165, -99, -99, -323, 218, 119, 248, 218, 119,
	-126, -299, 199, -301, 199, 310, 92, -300, 355, 355,
	-205, -208, 26, -302, 186, 241, 48, 262, -302, -298,
	-116, 48, 241, -144, -323, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, -2, 0, 268, 270, 279, 281, 283, 285,
	286, 0, 329, 331, 333, 335, 337, 339, 341, 343,
	345, 347, 349, 351, 353, 355, 357, 358, 360, 362,
	0, 548, 550, 552, -2, 63, 64, 65, 66, 67,
	73, 74, 75, 76, 69, 71, 662, -2, 673, 0,
	0, 0, -2, 0, -2, -2, -2, 0, 0, 639,
	641, 643, 645, -2, 0, 0, -2, 6, 11, 13,
	15, 18, 20, 22, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 48, 50, 52, 55, 57, 59, 61,
	62, 0, 0, 0, 0, 0, 117, 252, 0, 1224,
	1151, 1157, 1158, 1182, 1183, 1184, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 143, 145,
	146, 0, 0, 0, 1153, 1224, 152, 154, 156, 158,
	0, 164, 0, 0, 0, 0, 515, 161, 163, 243,
	1284, 245, 247, 0, 0, 0, 0, 167, 168, 169,
	170, 171, 172, 174, 176, 178, 180, 182, 183, 0,
	0, 0, 0, 0, 242, 240, 205, 206, 0, 224,
	225, 226, 227, 228, 230, 231, 209, 210, 211, 213,
	215, 217, 219, 221, 223, 0, 0, 249, 255, 256,
	257, 259, 260, 261, 262, 263, 264, 265, 430, 1196,
	1197, 1198, 1199, 1200, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	0, 123, 0, 436, 238, 236, 0, 119, 0, 545,
	0, 251, 546, 547, 542, 543, 1311, 571, 269, 271,
	280, 282, 284, -2, -2, 1400, -2, 293, -2, 301,
	1406, 0, 304, 305, 308, -2, 201, 330, 332, 334,
	336, 338, 340, 342, 344, 346, 348, 350, 352, 354,
	356, 359, 361, 363, 364, 365, 0, 0, 0, 369,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	368, 370, 371, 372, 0, 549, 551, 553, 0, 505,
	664, -2, 637, 638, -2, 0, 668, 668, 668, 0,
	0, 638, 636, 0, 272, 0, 274, 0, 369, 277,
	278, 309, 310, 1136, 1137, 863, 0, 0, 0, 0,
	0, 0, 955, 957, 1374, 1400, 0, 959, 960, 0,
	962, 964, 965, 0, 968, 969, 1121, 1153, 1167, 1168,
	1169, 1170, 0, 0, 1173, 0, 1175, 1176, 1177, 1021,
	979, -2, -2, 1165, 791, 792, 793, 794, -2, 1414,
	983, 986, 989, 992, 993, 994, 995, 0, 1358, 1375,
	1376, 1396, 1397, 1405, 1409, 1410, 1382, 1393, 1383, 1370,
	1380, 1391, 1230, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1191, 825,
	826, 831, 832, 834, 573, 555, 564, 573, 557, 558,
	559, 560, 561, 562, 563, 566, 0, 654, 1290, 657,
	1164, 655, 640, 642, 0, 644, 0, 0, 648, 670,
	669, 701, 702, 0, 652, 653, 663, 717, 755, 732,
	723, 0, 0, 2, 68, 0, 1382, 755, 70, 0,
	1382, 755, 72, 0, 77, 0, 1382, 1156, 0, 0,
	253, 254, 1161, 1159, 1160, 0, 147, 148, 149, 150,
	0, 0, 1154, 1130, 1128, 1129, 159, 484, 1382, -2,
	507, 484, 511, -2, 661, 1382, 586, 244, 246, 0,
	166, 0, 599, 0, 601, 0, 616, 761, 109, 1382,
	186, 199, 109, 1382, 189, 109, 1382, 192, 1149, 109,
	1382, 195, 196, 1382, 198, 239, 0, 0, -2, 232,
	234, 1192, 1193, 1194, 1195, -2, 229, 212, 214, 216,
	218, 220, 222, -2, 0, 0, 0, 435, 0, 0,
	0, 544, 0, 570, 287, 0, 290, 0, 292, 1369,
	-2, 295, 296, 574, 577, 578, 579, 0, 0, 0,
	0, 0, 0, 0, 306, 202, 0, 366, 367, 375,
	376, 124, 125, 327, 328, 0, 379, 400, 412, 0,
	0, 383, 385, 434, 387, 0, 0, 389, 0, 391,
	0, 393, 0, 395, 0, 397, 399, 401, 413, 403,
	663, 405, 0, 407, 411, 0, 416, 0, 418, 419,
	420, 0, 0, 426, 0, 0, 373, 374, 109, 759,
	-2, 0, 632, 682, 683, 0, 0, 0, 0, 666,
	667, 0, 0, 0, 628, 629, 273, 0, 276, 0,
	0, 0, 0, 1056, 1057, 1058, 1059, 1060, 1061, 1064,
	1065, 1062, 1063, 1066, 1067, 1068, 0, 0, 0, 1069,
	1070, 1071, 0, 0, 1073, 0, 1075, 0, 0, 0,
	0, 0, 0, 1135, 0, 0, 1072, 868, 869, 870,
	892, 893, 0, 956, 1132, 1125, 958, 0, 0, -2,
	1077, 0, 0, 961, 966, 967, 0, 0, 1120, -2,
	0, 1172, 0, 860, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 828, 839, 836, 835,
	812, 0, 811, 809, 0, 813, 0, 0, 0, 554,
	572, 556, 0, 568, 0, 656, 0, 0, 703, 706,
	1141, 1145, 1146, 706, 0, 1138, 0, 0, 0, 0,
	752, 752, 752, 750, 726, 0, 732, 0, 0, 756,
	744, 0, -2, 723, 0, 0, 757, 0, 78, 539,
	88, 0, 539, 539, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 746, 1152,
	0, 1126, 1127, 139, 0, 0, 1147, 1131, 442, 0,
	0, 506, 0, 660, 0, 0, 0, 1382, 514, 1185,
	588, 0, 765, 0, 602, 0, 0, 762, 0, 184,
	0, 107, 108, 0, 187, 0, 190, 0, 0, 193,
	0, 0, 0, 1077, 663, 0, 0, 258, 0, 0,
	663, 0, 1079, 773, 774, 775, 776, 777, 860, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 822, 0, 797, 797, 797, 814, 815, 823, 824,
	829, 830, 841, 842, 844, 846, 840, 840, 840, 837,
	838, 746, 126, 0, 0, 0, 0, 297, 298, 0,
	576, 0, 580, 318, 319, 320, 582, 583, 302, 321,
	322, 323, 324, 325, 326, 0, 501, 0, 503, 1178,
	0, 299, 311, 300, 303, 0, 203, 377, 378, 380,
	381, 382, 386, 0, 431, 388, 390, 392, 394, 396,
	404, 408, 663, 414, 417, 421, 422, 423, 424, 0,
	0, 0, 504, 0, 635, 680, 681, 684, 688, 689,
	692, 695, 696, 686, 863, 649, 650, 651, 674, 675,
	526, 0, 0, 275, 864, 769, 770, 816, 817, 818,
	819, 820, 865, 866, 0, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, -2, -2, -2, 884, 885,
	886, -2, -2, -2, 890, 891, -2, 1074, 1076, 0,
	1135, 0, -2, 0, -2, -2, -2, -2, 904, 0,
	906, 909, 911, 913, 0, 0, 0, 0, 1134, 923,
	1112, 0, 0, 1053, 1054, 1055, 908, 0, 0, 1133,
	1124, 0, 0, -2, 963, 0, 0, 0, 1083, 1084,
	1119, 1115, 0, 970, 673, 0, 0, 0, 0, 977,
	0, 1181, 847, 848, 849, 850, 851, 852, 861, 1031,
	0, 0, 0, 984, 985, 987, 988, 990, 991, 0,
	0, 0, 999, 0, 1087, -2, -2, -2, -2, -2,
	-2, -2, 0, 1001, 0, 1003, 1077, 1097, 0, 0,
	926, 0, 0, 0, 0, 1400, 0, 1006, 1077, 1105,
	0, 0, 0, 0, 0, 1077, 0, 1111, 0, 0,
	0, 0, 0, 1017, 0, 1019, 0, 0, 0, 0,
	0, 0, 567, 658, 0, 0, 765, 0, 0, 0,
	1144, 765, 0, 1140, 0, 0, 0, 0, 0, 747,
	751, 748, 749, 0, 0, 732, 744, 714, 0, 0,
	0, 721, 722, 743, 0, 742, 731, -2, 0, 0,
	0, 0, 0, 538, 90, 1382, 0, 111, 0, 0,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 1155, 129, 0, 1162, 0, 0, 0, 0,
	0, 441, 1161, 443, 445, 446, 447, 448, 1186, 0,
	1186, 0, 0, 0, 0, 0, 0, 590, 596, 0,
	614, 0, 614, 604, 0, 0, 0, 614, 618, 619,
	621, 622, 0, 0, 763, 200, 109, 109, 1150, 109,
	109, 197, 241, 0, 207, 233, 0, 0, 0, 235,
	237, 0, 766, 768, 0, 778, 0, 138, 0, 0,
	0, 0, 291, 0, 575, 581, 0, 315, 0, 317,
	502, 1180, 1179, 0, 204, 433, 266, 406, 409, 427,
	428, 429, 760, 0, 690, 0, 0, 687, 693, 694,
	0, 677, 524, 525, 0, 0, 0, -2, -2, 0,
	0, 0, 924, -2, 905, 907, 910, 912, 914, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 0, 1122,
	1125, -2, 1078, 1081, 1082, 0, 0, 1116, 0, 0,
	0, 0, 672, 673, 673, 673, 976, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 0, 0,
	998, 0, 1000, 1002, 0, 0, 1004, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	929, 930, 931, 0, 0, 1005, 1103, 1104, 0, 0,
	0, 0, 0, 0, 1011, 0, 1110, 0, 0, 0,
	1015, 1016, 1018, 0, 795, 0, 821, 843, 845, 833,
	663, 1163, 698, 1142, 746, 705, 707, 1143, 698, 1139,
	734, 0, 736, 0, 0, 0, 738, 0, 727, 0,
	729, 744, 719, 0, 0, 712, 0, 711, 732, 740,
	0, 0, 758, 89, 528, 0, 0, 0, 92, 1382,
	100, 0, 456, 0, 0, 0, 0, 0, 541, 101,
	1382, 109, 1382, 109, 102, 79, 539, 80, 0, 534,
	0, 527, 81, 0, 536, 0, 138, 0, 0, 140,
	0, 1148, 450, 483, 0, 0, 1186, 0, 439, 484,
	508, 510, 0, 0, 592, 596, 0, 595, 661, 165,
	0, 764, 597, 614, 0, 0, 606, 603, 600, 765,
	0, 0, 0, 0, 185, 188, 191, 194, 1078, 248,
	0, 0, 1080, 0, 771, 0, 0, 118, 0, 127,
	250, 288, 289, 294, 313, 314, 316, 312, 0, 0,
	0, 676, 526, 0, 867, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1113, 0, 1048, 0, 0, 1124,
	-2, 1085, 1114, 1118, 0, 971, 0, 0, 0, 0,
	1174, 853, 854, 855, 856, 857, 858, 859, 0, 1029,
	1030, 1034, 0, 0, 982, 0, 0, 1086, 1096, 1098,
	927, 928, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, -2, -2, -2, 945, 946, 947, -2, -2,
	-2, 0, 0, 0, 1099, 0, 0, 1051, 1101, 1102,
	1107, 1108, 0, 1008, 1009, 1010, 1109, 0, 0, 0,
	827, 0, 0, 700, 0, 704, 0, 700, 735, 0,
	754, 737, 717, 728, 0, 725, 715, 0, 716, 0,
	744, 0, 0, 724, 0, 0, 0, 0, 110, 454,
	473, 0, 0, 517, 523, 523, 0, 980, 981, 0,
	0, 0, 94, 0, 0, 0, 0, 98, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	141, 437, 0, 444, 0, 0, 0, 442, 0, 0,
	0, 594, 596, 0, 587, 588, 612, 613, 598, 611,
	0, 614, 620, 617, 623, 0, 0, 120, 0, 0,
	772, 779, 136, 1274, 134, 131, 133, 267, 685, 691,
	678, 526, 0, 0, -2, 0, 917, -2, -2, 1047,
	1078, 1123, 1117, 1171, 673, 972, 974, 975, 862, 1036,
	1033, 0, 1020, 996, 997, 1095, 0, 0, 0, 0,
	1078, 1050, 1007, 0, 1013, 1014, 796, 659, 1025, 0,
	0, 708, 1025, 0, 732, 730, 713, 709, 0, 720,
	0, 741, 530, 532, 91, 0, 455, 0, 458, 0,
	0, 0, 0, 464, 465, 0, 0, 0, 0, 475,
	482, 0, 526, 1166, 0, 526, 0, 0, 0, 0,
	0, 106, 0, 0, 540, 0, 109, 109, 529, 0,
	0, 0, 535, 0, 537, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 596, 0, 589, 590,
	0, 0, 0, 605, 615, 0, 0, 0, 767, 0,
	0, 0, 0, 679, -2, -2, 918, 1049, 0, 673,
	0, 1022, -2, 0, 0, 0, 1052, 0, 646, 0,
	699, 697, 647, 753, 744, 0, 739, 93, 0, 459,
	460, 1186, 0, 463, 466, 0, 468, 1188, 450, 0,
	479, 480, 518, 519, 522, 520, 523, 673, 477, 0,
	95, 96, 105, 113, 97, 103, 0, 0, 0, 0,
	745, 0, 0, 0, 482, 0, 472, 450, 440, 482,
	0, 0, 591, 592, 0, 0, 0, 624, 625, 0,
	0, 0, 135, 0, 130, 132, 973, 1039, 0, -2,
	0, 953, 1012, 1024, 1026, 0, 718, 710, 457, 461,
	0, 0, 488, 0, 476, 0, 526, 0, 0, 115,
	0, 531, 533, 0, 0, 0, 0, 450, 482, 438,
	450, 0, 593, 594, 0, 608, 765, 610, 0, 0,
	137, 0, 0, 0, 1035, 954, 0, 0, 0, 467,
	493, 0, 0, 0, 521, 971, 484, 99, 0, 112,
	0, 0, 673, 0, 470, 450, 512, 0, 585, 0,
	609, 138, 138, 1032, 1037, 1040, -2, 1342, 1221, 0,
	1038, 1027, 1028, 0, 469, 489, 490, 0, 485, 486,
	487, 1187, 481, 488, 114, 85, 87, 0, 0, 471,
	482, 765, 121, 122, 0, 1042, 1043, 1044, 1045, 1046,
	462, 491, 0, 492, 0, 0, 0, 493, 0, 453,
	450, 607, 0, 494, 0, 497, 498, 0, 495, 478,
	449, 451, 452, 513, 1041, 496, 499, 500,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			return helpWith(sqllex, "DELETE")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "INSERT")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{ /* SKIP DOC */
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			return helpWith(sqllex, "GRANT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "RESET")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "RESET")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1878
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{ /* SKIP DOC */
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{ /* SKIP DOC */
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			return unimplemented(sqllex, "set local")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			return unimplemented(sqllex, "set from current")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = Low
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = Normal
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = High
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.str = "client_encoding"
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2373
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2377
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2381
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = DropDefault
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			return unimplemented(sqllex, "match full")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			return unimplemented(sqllex, "match partial")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			return unimplemented(sqllex, "match simple")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2742
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex, "no action")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "action set null")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			return unimplemented(sqllex, "action set default")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = true
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = false
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2899
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = Ascending
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = Descending
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2943
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2945
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = true
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = false
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.str = ""
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.str = ""
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = ReadOnly
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadWrite
		}
	case 584:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = ""
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = ""
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = ""
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = ""
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			return helpWith(sqllex, "INSERT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 615:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			return helpWith(sqllex, "SELECT")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			return helpWith(sqllex, "VALUES")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			return helpWith(sqllex, "TABLE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			return helpWith(sqllex, "SELECT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			return helpWith(sqllex, "TABLE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3638
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3651
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = true
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = false
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = true
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			return helpWith(sqllex, "VALUES")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &From{}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3904
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3986
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = nil
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.str = astFullJoin
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.str = astLeftJoin
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astRightJoin
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astInnerJoin
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4170
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4270
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4376
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4385
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = nil
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4546
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4618
		{
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = year
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = month
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = day
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = hour
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = minute
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = month
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = hour
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = minute
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = minute
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = nil
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = second
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4748
		{
			return unimplemented(sqllex, "at tz")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4982
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5155
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5208
		{
			return unimplemented(sqllex, "variadic")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5209
		{
			return unimplemented(sqllex, "variadic")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5249
		{
			return unimplemented(sqllex, "func_application")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5254
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5282
		{
			return unimplemented(sqllex, "current role")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			return unimplemented(sqllex, "current user")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			return unimplemented(sqllex, "session user")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			return unimplemented(sqllex, "user")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5308
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5318
		{
			return unimplemented(sqllex, "treat")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5360
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5364
		{
			return unimplemented(sqllex, "within group")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5365
		{
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.str = ""
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5462
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5463
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5464
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5467
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5468
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5474
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5477
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5478
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = Any
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = Some
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = All
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = Plus
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = Minus
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = Mult
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = Div
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = Mod
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = Bitand
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = Bitor
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = Pow
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = Bitxor
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = LT
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = GT
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = EQ
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = LE
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = GE
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = NE
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = Like
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = NotLike
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = ILike
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = NotILike
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5843
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6005
		{
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6041
		{
			return unimplemented(sqllex, "func const")
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6050
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = DNull
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.str = ""
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
