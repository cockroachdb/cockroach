// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}

//line sql.y:320
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT8 = 57480
const INT64 = 57481
const INTEGER = 57482
const INTERSECT = 57483
const INTERVAL = 57484
const INTO = 57485
const IS = 57486
const ISOLATION = 57487
const JOIN = 57488
const KEY = 57489
const KEYS = 57490
const LATERAL = 57491
const LC_CTYPE = 57492
const LC_COLLATE = 57493
const LEADING = 57494
const LEAST = 57495
const LEFT = 57496
const LEVEL = 57497
const LIKE = 57498
const LIMIT = 57499
const LOCAL = 57500
const LOCALTIME = 57501
const LOCALTIMESTAMP = 57502
const LOW = 57503
const LSHIFT = 57504
const MATCH = 57505
const MINUTE = 57506
const MONTH = 57507
const NAME = 57508
const NAMES = 57509
const NATURAL = 57510
const NEXT = 57511
const NO = 57512
const NO_INDEX_JOIN = 57513
const NORMAL = 57514
const NOT = 57515
const NOTHING = 57516
const NULL = 57517
const NULLIF = 57518
const NULLS = 57519
const NUMERIC = 57520
const OF = 57521
const OFF = 57522
const OFFSET = 57523
const OID = 57524
const ON = 57525
const ONLY = 57526
const OR = 57527
const ORDER = 57528
const ORDINALITY = 57529
const OUT = 57530
const OUTER = 57531
const OVER = 57532
const OVERLAPS = 57533
const OVERLAY = 57534
const PARENT = 57535
const PARTIAL = 57536
const PARTITION = 57537
const PASSWORD = 57538
const PLACING = 57539
const POSITION = 57540
const PRECEDING = 57541
const PRECISION = 57542
const PREPARE = 57543
const PRIMARY = 57544
const PRIORITY = 57545
const RANGE = 57546
const READ = 57547
const REAL = 57548
const RECURSIVE = 57549
const REF = 57550
const REFERENCES = 57551
const REGCLASS = 57552
const REGPROC = 57553
const REGPROCEDURE = 57554
const REGNAMESPACE = 57555
const REGTYPE = 57556
const RENAME = 57557
const REPEATABLE = 57558
const RELEASE = 57559
const RESTORE = 57560
const RESTRICT = 57561
const RETURNING = 57562
const REVOKE = 57563
const RIGHT = 57564
const ROLLBACK = 57565
const ROLLUP = 57566
const ROW = 57567
const ROWS = 57568
const RSHIFT = 57569
const STATUS = 57570
const SAVEPOINT = 57571
const SEARCH = 57572
const SECOND = 57573
const SELECT = 57574
const SERIAL = 57575
const SERIALIZABLE = 57576
const SESSION = 57577
const SESSION_USER = 57578
const SET = 57579
const SHOW = 57580
const SIMILAR = 57581
const SIMPLE = 57582
const SMALLINT = 57583
const SMALLSERIAL = 57584
const SNAPSHOT = 57585
const SOME = 57586
const SPLIT = 57587
const SQL = 57588
const START = 57589
const STDIN = 57590
const STRICT = 57591
const STRING = 57592
const STORING = 57593
const SUBSTRING = 57594
const SYMMETRIC = 57595
const SYSTEM = 57596
const TABLE = 57597
const TABLES = 57598
const TEMPLATE = 57599
const TEXT = 57600
const THEN = 57601
const TIME = 57602
const TIMESTAMP = 57603
const TIMESTAMPTZ = 57604
const TO = 57605
const TRAILING = 57606
const TRANSACTION = 57607
const TREAT = 57608
const TRIM = 57609
const TRUE = 57610
const TRUNCATE = 57611
const TYPE = 57612
const UNBOUNDED = 57613
const UNCOMMITTED = 57614
const UNION = 57615
const UNIQUE = 57616
const UNKNOWN = 57617
const UPDATE = 57618
const UPSERT = 57619
const USER = 57620
const USERS = 57621
const USING = 57622
const VALID = 57623
const VALIDATE = 57624
const VALUE = 57625
const VALUES = 57626
const VARCHAR = 57627
const VARIADIC = 57628
const VIEW = 57629
const VARYING = 57630
const WHEN = 57631
const WHERE = 57632
const WINDOW = 57633
const WITH = 57634
const WITHIN = 57635
const WITHOUT = 57636
const YEAR = 57637
const ZONE = 57638
const NOT_LA = 57639
const WITH_LA = 57640
const AS_LA = 57641
const POSTFIXOP = 57642
const UMINUS = 57643

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5159

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	320, 28,
	-2, 401,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	1, 374,
	183, 374,
	220, 374,
	318, 374,
	320, 374,
	-2, 384,
	-1, 62,
	1, 377,
	183, 377,
	220, 377,
	318, 377,
	320, 377,
	-2, 383,
	-1, 71,
	1, 28,
	320, 28,
	-2, 401,
	-1, 412,
	1, 182,
	320, 182,
	-2, 953,
	-1, 448,
	157, 411,
	181, 411,
	-2, 380,
	-1, 451,
	157, 410,
	181, 410,
	-2, 378,
	-1, 577,
	157, 410,
	181, 410,
	-2, 381,
	-1, 635,
	317, 887,
	-2, 880,
	-1, 636,
	317, 888,
	-2, 881,
	-1, 642,
	5, 557,
	317, 557,
	-2, 1055,
	-1, 666,
	5, 517,
	-2, 1029,
	-1, 667,
	5, 551,
	317, 551,
	-2, 1031,
	-1, 668,
	5, 525,
	-2, 1032,
	-1, 669,
	5, 524,
	-2, 1033,
	-1, 670,
	5, 551,
	317, 551,
	-2, 1036,
	-1, 671,
	5, 551,
	317, 551,
	-2, 1037,
	-1, 672,
	5, 552,
	-2, 1040,
	-1, 673,
	5, 511,
	-2, 1041,
	-1, 674,
	5, 511,
	-2, 1042,
	-1, 675,
	5, 533,
	-2, 1046,
	-1, 676,
	5, 512,
	-2, 1051,
	-1, 677,
	5, 513,
	-2, 1052,
	-1, 678,
	5, 514,
	-2, 1053,
	-1, 679,
	5, 515,
	-2, 1054,
	-1, 680,
	5, 511,
	-2, 1058,
	-1, 681,
	5, 518,
	-2, 1063,
	-1, 682,
	5, 516,
	-2, 1066,
	-1, 683,
	5, 549,
	317, 549,
	-2, 1068,
	-1, 684,
	5, 553,
	-2, 1071,
	-1, 685,
	5, 555,
	-2, 1072,
	-1, 686,
	5, 548,
	317, 548,
	-2, 1076,
	-1, 944,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 674,
	-1, 953,
	317, 865,
	-2, 853,
	-1, 1165,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 592,
	-1, 1166,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 593,
	-1, 1167,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 594,
	-1, 1171,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 598,
	-1, 1172,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 599,
	-1, 1173,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 600,
	-1, 1176,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 605,
	-1, 1182,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 607,
	-1, 1185,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 612,
	-1, 1186,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 613,
	-1, 1187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 614,
	-1, 1213,
	191, 745,
	-2, 748,
	-1, 1242,
	115, 785,
	317, 887,
	-2, 880,
	-1, 1243,
	115, 786,
	-2, 1025,
	-1, 1244,
	115, 787,
	-2, 951,
	-1, 1245,
	115, 788,
	-2, 921,
	-1, 1246,
	115, 789,
	-2, 936,
	-1, 1247,
	115, 790,
	-2, 950,
	-1, 1248,
	115, 791,
	-2, 993,
	-1, 1400,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 450,
	-1, 1404,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 606,
	-1, 1405,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 608,
	-1, 1410,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 609,
	-1, 1427,
	191, 744,
	-2, 747,
	-1, 1602,
	1, 451,
	68, 451,
	98, 451,
	116, 451,
	120, 451,
	122, 451,
	135, 451,
	141, 451,
	146, 451,
	154, 451,
	157, 451,
	168, 451,
	181, 451,
	183, 451,
	186, 451,
	220, 451,
	222, 451,
	273, 451,
	280, 451,
	290, 451,
	291, 451,
	299, 451,
	318, 451,
	320, 451,
	321, 451,
	-2, 450,
	-1, 1604,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 610,
	-1, 1609,
	144, 0,
	-2, 624,
	-1, 1619,
	191, 746,
	-2, 749,
	-1, 1653,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 651,
	-1, 1654,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 652,
	-1, 1655,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 653,
	-1, 1659,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 657,
	-1, 1660,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 658,
	-1, 1661,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 659,
	-1, 1774,
	144, 0,
	-2, 625,
	-1, 1777,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 628,
	-1, 1778,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 630,
	-1, 1871,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 629,
	-1, 1872,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 631,
	-1, 1879,
	144, 0,
	-2, 660,
	-1, 1930,
	144, 0,
	-2, 661,
	-1, 1986,
	36, 0,
	129, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 1028,
}

const sqlNprod = 1171
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 26274

var sqlAct = [...]int{

	636, 1965, 1985, 2009, 1936, 1563, 1966, 1984, 1967, 1128,
	1031, 861, 1039, 1818, 1597, 613, 1841, 1630, 1573, 1103,
	627, 1857, 283, 452, 1746, 1765, 751, 1732, 1690, 634,
	1758, 1598, 81, 413, 48, 633, 1374, 1733, 20, 1751,
	82, 490, 285, 81, 81, 81, 1107, 867, 81, 1121,
	1376, 81, 1398, 1579, 1487, 473, 1488, 1323, 1102, 81,
	1438, 1143, 1388, 596, 1211, 863, 81, 81, 949, 702,
	81, 1106, 1136, 81, 81, 81, 81, 81, 81, 271,
	1137, 1589, 286, 699, 1007, 1382, 1221, 1040, 1198, 607,
	1195, 884, 687, 998, 1141, 1055, 459, 61, 629, 457,
	27, 1071, 1064, 563, 16, 815, 8, 1239, 799, 1268,
	722, 1097, 704, 940, 597, 735, 492, 606, 491, 564,
	796, 983, 979, 826, 451, 510, 504, 269, 1033, 1271,
	23, 1110, 22, 890, 287, 501, 11, 61, 1842, 10,
	9, 276, 62, 7, 4, 275, 462, 277, 581, 579,
	400, 580, 795, 817, 813, 497, 391, 728, 584, 403,
	460, 63, 1864, 503, 562, 1865, 737, 1426, 61, 1138,
	612, 280, 689, 278, 737, 737, 1068, 279, 456, 2000,
	281, 273, 1132, 1036, 272, 274, 1032, 1981, 1973, 456,
	1840, 1132, 282, 1963, 282, 1958, 1061, 1957, 1132, 1074,
	1132, 1916, 78, 410, 449, 1932, 893, 894, 1061, 439,
	1926, 1910, 1900, 1132, 1840, 1132, 891, 1334, 489, 1069,
	1396, 1873, 1851, 448, 1061, 1840, 1386, 464, 1848, 896,
	67, 1132, 1335, 714, 1385, 752, 60, 479, 60, 470,
	471, 1666, 476, 478, 481, 483, 471, 1839, 1385, 1823,
	1840, 895, 1132, 69, 892, 1616, 1430, 910, 1070, 1067,
	1822, 1431, 39, 1132, 39, 81, 81, 81, 81, 81,
	40, 513, 40, 1800, 1779, 1776, 1074, 1074, 1061, 1361,
	1768, 1717, 70, 1074, 1074, 1716, 1702, 996, 1074, 1132,
	65, 1364, 41, 1132, 41, 1613, 66, 1549, 1074, 1076,
	1030, 506, 506, 1429, 1543, 457, 901, 1030, 1074, 1505,
	1215, 514, 1506, 1074, 1503, 64, 1127, 1074, 1502, 1501,
	1427, 1074, 1074, 1074, 1437, 1072, 1363, 1458, 1459, 1132,
	67, 1133, 1083, 1073, 1132, 1074, 1074, 1060, 738, 1029,
	1061, 995, 1030, 1091, 994, 745, 738, 738, 746, 592,
	856, 855, 807, 69, 806, 526, 469, 71, 911, 493,
	1399, 67, 840, 515, 546, 2020, 1843, 1983, 1979, 1972,
	1927, 1849, 1805, 1801, 1793, 1792, 1791, 893, 894, 1787,
	591, 1786, 70, 1785, 69, 1730, 1724, 81, 1681, 1066,
	65, 1676, 1675, 1674, 511, 507, 66, 1624, 1602, 1578,
	896, 67, 81, 67, 1553, 81, 81, 52, 1510, 52,
	1507, 1065, 1366, 70, 1495, 1035, 487, 1486, 1457, 1454,
	1453, 1451, 895, 912, 69, 1443, 69, 1464, 1442, 1362,
	1285, 1236, 1235, 591, 498, 471, 956, 481, 1334, 81,
	741, 81, 590, 81, 81, 81, 64, 81, 736, 859,
	695, 1207, 950, 70, 64, 70, 695, 1397, 866, 1956,
	891, 65, 81, 65, 1632, 1946, 1913, 66, 1892, 66,
	893, 894, 578, 81, 1890, 1881, 570, 901, 573, 1474,
	1868, 1458, 1459, 1861, 1846, 1837, 64, 1815, 270, 81,
	1798, 893, 894, 896, 285, 81, 81, 81, 1770, 81,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 577,
	922, 534, 893, 894, 896, 895, 725, 1740, 81, 81,
	1723, 893, 894, 1608, 1571, 694, 81, 535, 81, 911,
	693, 724, 1569, 1568, 286, 896, 895, 1566, 1522, 513,
	513, 1521, 1485, 1208, 1475, 1551, 1447, 285, 81, 1446,
	81, 81, 81, 81, 81, 81, 81, 895, 1423, 1418,
	1200, 81, 81, 1350, 529, 531, 895, 81, 1312, 841,
	901, 1311, 1299, 1298, 1278, 81, 1234, 1131, 984, 514,
	514, 1464, 987, 991, 977, 865, 287, 286, 976, 567,
	975, 974, 973, 81, 912, 972, 81, 1299, 565, 971,
	970, 969, 449, 1458, 1459, 968, 967, 966, 965, 964,
	569, 471, 901, 587, 588, 888, 963, 962, 488, 758,
	740, 448, 593, 743, 1468, 1460, 1461, 1462, 1463, 1465,
	493, 515, 515, 961, 710, 954, 943, 64, 860, 287,
	836, 870, 474, 696, 595, 532, 457, 522, 520, 1781,
	727, 1729, 793, 1728, 730, 893, 894, 950, 1344, 723,
	1343, 941, 805, 1866, 498, 471, 729, 729, 688, 540,
	1377, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	803, 922, 749, 802, 858, 1727, 1336, 747, 478, 481,
	1399, 1509, 989, 781, 830, 837, 990, 1508, 81, 695,
	1403, 556, 845, 1464, 541, 959, 81, 864, 1752, 1032,
	81, 1633, 1222, 1434, 81, 81, 980, 857, 81, 1330,
	1516, 560, 1942, 1996, 1899, 1710, 1082, 449, 872, 873,
	449, 449, 81, 874, 81, 81, 1997, 81, 265, 886,
	81, 946, 81, 81, 446, 81, 880, 513, 957, 881,
	882, 842, 1001, 561, 846, 847, 848, 849, 850, 1415,
	438, 953, 437, 432, 853, 854, 74, 1034, 433, 1034,
	899, 900, 902, 1413, 922, 1049, 506, 1357, 506, 1460,
	1461, 1462, 1463, 1465, 271, 1831, 455, 514, 600, 1056,
	705, 266, 706, 981, 982, 922, 985, 1830, 81, 81,
	1012, 1014, 988, 1000, 1537, 1536, 1513, 1512, 1406, 1533,
	897, 898, 899, 900, 902, 1349, 922, 538, 1078, 73,
	1348, 1347, 1346, 1183, 1075, 922, 1898, 992, 1000, 454,
	1024, 1023, 1020, 718, 999, 566, 1859, 1004, 1282, 515,
	1281, 285, 61, 1154, 1411, 81, 276, 61, 1416, 1122,
	275, 1058, 277, 441, 1550, 1057, 539, 1059, 1755, 1038,
	81, 81, 707, 1096, 705, 518, 706, 81, 993, 1050,
	511, 1051, 1053, 1052, 456, 1048, 280, 1021, 278, 1017,
	471, 286, 279, 1539, 481, 281, 273, 1025, 471, 272,
	274, 1320, 1254, 81, 1008, 720, 81, 985, 1698, 988,
	1047, 1134, 1043, 1462, 1463, 1465, 622, 481, 1222, 711,
	481, 1085, 982, 981, 267, 1197, 1524, 1079, 1077, 1080,
	442, 1197, 1204, 1944, 1996, 1820, 1084, 1202, 712, 1153,
	1699, 285, 731, 287, 1558, 1072, 707, 1412, 79, 447,
	1960, 2006, 72, 443, 1414, 1324, 268, 1125, 1126, 383,
	384, 385, 444, 1205, 402, 1011, 1317, 414, 711, 922,
	1100, 453, 1961, 835, 834, 402, 828, 823, 705, 2017,
	706, 286, 463, 463, 75, 1099, 79, 1541, 1332, 79,
	79, 482, 79, 485, 486, 1893, 1458, 1459, 517, 1356,
	1314, 737, 758, 758, 716, 724, 715, 1087, 81, 81,
	81, 1072, 1328, 1284, 81, 1358, 1135, 81, 1089, 1531,
	1969, 536, 537, 81, 81, 81, 81, 81, 1694, 1219,
	1695, 81, 1555, 287, 81, 81, 1090, 1458, 1459, 1101,
	471, 81, 978, 261, 997, 1088, 81, 1473, 81, 1324,
	707, 1838, 1117, 1010, 838, 81, 1877, 1697, 938, 1590,
	1292, 708, 2005, 1209, 1700, 81, 1206, 1445, 1310, 1229,
	1525, 1556, 1601, 1139, 557, 1193, 781, 781, 392, 537,
	457, 456, 583, 1212, 1249, 1968, 81, 81, 1286, 1191,
	1216, 262, 81, 1583, 1224, 1995, 1464, 1309, 1970, 397,
	1993, 1326, 513, 1745, 393, 1241, 1241, 1252, 1180, 1263,
	1119, 787, 1825, 549, 758, 1275, 1276, 1277, 641, 1287,
	1821, 527, 81, 525, 81, 1009, 81, 839, 394, 1696,
	81, 582, 558, 1796, 81, 708, 1068, 1464, 1072, 1144,
	1152, 1662, 514, 81, 1971, 1824, 1408, 396, 1474, 1887,
	2004, 2018, 1196, 81, 1203, 583, 1329, 559, 1189, 1369,
	1188, 1709, 2024, 1368, 1194, 1337, 1813, 1371, 1708, 1365,
	758, 1367, 703, 738, 1338, 1706, 1339, 1340, 1288, 1069,
	1056, 79, 499, 79, 414, 414, 2012, 457, 781, 1474,
	1515, 389, 691, 1295, 515, 1353, 1355, 1352, 1291, 780,
	1554, 1178, 1181, 1354, 1120, 1316, 871, 1359, 1360, 862,
	1766, 1322, 1937, 1475, 758, 582, 723, 852, 1070, 1067,
	808, 1574, 1797, 1747, 1663, 723, 1814, 812, 1177, 1379,
	1664, 264, 263, 1402, 1341, 471, 392, 1380, 61, 708,
	1301, 1387, 1058, 395, 781, 457, 1057, 1401, 1059, 1300,
	1761, 1296, 2023, 1190, 1475, 1585, 1707, 397, 1436, 1584,
	1192, 536, 393, 1705, 810, 496, 495, 454, 1767, 574,
	1319, 1564, 1731, 1580, 1383, 811, 1233, 829, 824, 1880,
	1409, 1407, 1795, 1489, 1811, 1072, 394, 398, 781, 1391,
	1469, 1466, 1467, 1468, 1460, 1461, 1462, 1463, 1465, 1607,
	1372, 1422, 1538, 523, 457, 396, 1812, 1342, 1394, 2010,
	81, 1179, 1452, 1417, 1321, 1081, 1028, 1433, 528, 1389,
	719, 414, 414, 1139, 555, 554, 553, 1392, 552, 1520,
	551, 1469, 1466, 1467, 1468, 1460, 1461, 1462, 1463, 1465,
	1421, 1390, 550, 547, 494, 81, 81, 1490, 1424, 1066,
	960, 1296, 844, 1232, 1545, 402, 1760, 79, 2011, 414,
	572, 414, 1964, 575, 1934, 1687, 1440, 1441, 1529, 1527,
	1514, 1373, 81, 1123, 1115, 81, 2013, 81, 463, 1054,
	1511, 744, 879, 742, 81, 1492, 1493, 1494, 739, 79,
	734, 1570, 1518, 717, 713, 1393, 81, 709, 1540, 1484,
	81, 395, 1621, 1375, 1832, 79, 1544, 285, 1997, 81,
	1497, 79, 79, 79, 1532, 732, 543, 77, 1547, 585,
	467, 1309, 76, 832, 1567, 3, 1834, 1016, 690, 1594,
	1548, 1528, 1546, 1530, 79, 79, 1575, 1129, 1542, 1843,
	1895, 1019, 800, 388, 800, 398, 1565, 286, 1929, 638,
	431, 1534, 1535, 1759, 1577, 1610, 81, 1581, 1593, 1557,
	1559, 1560, 589, 1587, 414, 1018, 800, 414, 414, 414,
	414, 414, 851, 1626, 1627, 1628, 1582, 414, 414, 1917,
	1586, 1391, 1743, 402, 1591, 1592, 1000, 586, 468, 1118,
	399, 869, 1015, 1114, 1037, 1130, 544, 475, 794, 287,
	1394, 1617, 1000, 1458, 1459, 887, 434, 435, 1013, 463,
	1620, 1588, 889, 804, 750, 1043, 1139, 1063, 1634, 1392,
	1639, 1636, 2021, 81, 81, 81, 2022, 758, 1458, 1459,
	1641, 1783, 81, 81, 1458, 1459, 1682, 1596, 81, 1561,
	81, 1552, 81, 81, 81, 893, 894, 81, 81, 1093,
	1092, 1703, 1704, 1670, 1669, 1504, 1345, 1283, 758, 758,
	1280, 1279, 1230, 1614, 1094, 947, 1139, 758, 758, 1914,
	1139, 1686, 780, 780, 1854, 1683, 1749, 1720, 1629, 81,
	81, 1370, 1095, 1027, 1026, 955, 1576, 1393, 440, 1819,
	390, 843, 1725, 548, 1959, 81, 81, 1739, 1741, 81,
	758, 781, 1739, 1464, 81, 1788, 1738, 1444, 1856, 1744,
	81, 1738, 1737, 1726, 79, 1721, 1876, 1737, 1763, 1231,
	958, 38, 1005, 1735, 616, 1667, 79, 1688, 1464, 1517,
	79, 1022, 781, 781, 79, 1748, 1677, 1750, 1742, 757,
	1109, 781, 781, 81, 1108, 1775, 288, 833, 79, 822,
	1045, 1046, 637, 79, 816, 1474, 79, 825, 414, 414,
	1387, 414, 1240, 1145, 692, 1771, 639, 755, 640, 756,
	986, 628, 753, 509, 781, 1756, 1757, 1384, 1041, 1762,
	1474, 1201, 1220, 1432, 780, 951, 608, 620, 619, 1217,
	519, 1764, 1395, 51, 533, 1144, 1637, 408, 81, 409,
	81, 1327, 81, 81, 1144, 1642, 1794, 1722, 1391, 1124,
	875, 81, 1713, 783, 800, 889, 1526, 758, 1719, 445,
	1475, 1754, 1455, 521, 1261, 1253, 1250, 1394, 568, 698,
	939, 1042, 545, 1806, 81, 1809, 1333, 1673, 1389, 1062,
	780, 594, 883, 466, 1807, 1475, 1392, 465, 1104, 542,
	809, 1086, 932, 1833, 929, 436, 81, 1889, 1116, 1294,
	1390, 1098, 1844, 81, 2016, 1139, 1139, 1255, 1894, 1139,
	1523, 1739, 81, 1941, 68, 1318, 79, 1105, 1847, 26,
	1738, 81, 81, 889, 780, 24, 1737, 21, 19, 18,
	17, 781, 1850, 1835, 25, 15, 14, 1855, 1860, 13,
	1869, 1460, 1461, 1462, 1463, 1465, 12, 37, 1853, 79,
	36, 35, 414, 1870, 1393, 34, 33, 32, 1875, 758,
	6, 5, 81, 1466, 1467, 1468, 1460, 1461, 1462, 1463,
	1465, 1867, 2, 1, 1891, 1882, 0, 1828, 1829, 0,
	0, 81, 81, 0, 0, 81, 0, 1885, 0, 81,
	0, 0, 1863, 0, 81, 0, 0, 0, 0, 0,
	0, 1905, 0, 1903, 1907, 1911, 0, 0, 0, 1886,
	0, 1739, 81, 0, 0, 1912, 0, 285, 81, 81,
	1738, 1817, 457, 0, 1915, 1918, 1737, 1906, 1904, 0,
	1919, 1921, 1924, 781, 724, 0, 0, 0, 1925, 1923,
	1922, 81, 0, 81, 81, 0, 81, 758, 0, 0,
	1928, 0, 0, 0, 79, 1289, 1290, 286, 1931, 1947,
	1005, 1945, 1939, 1297, 0, 0, 1852, 81, 1951, 1302,
	1303, 1305, 1307, 1308, 1950, 1948, 0, 1313, 0, 1943,
	1315, 79, 1139, 1949, 1739, 1955, 0, 79, 1954, 782,
	1953, 1952, 79, 1738, 1331, 81, 1827, 81, 0, 1737,
	0, 79, 1974, 0, 598, 598, 1980, 1976, 1978, 287,
	754, 79, 0, 700, 0, 81, 1977, 0, 0, 1990,
	0, 781, 0, 0, 1994, 1992, 1909, 0, 0, 1998,
	758, 0, 1098, 800, 1255, 1255, 0, 1999, 1098, 2003,
	0, 0, 0, 0, 0, 2001, 0, 0, 0, 0,
	2015, 2014, 757, 757, 0, 0, 2002, 2019, 0, 1698,
	0, 1691, 0, 0, 0, 0, 0, 0, 869, 1689,
	869, 0, 414, 1693, 2025, 0, 79, 0, 0, 0,
	1378, 0, 0, 0, 0, 0, 0, 0, 0, 1381,
	0, 1699, 0, 0, 0, 1255, 1255, 1255, 0, 79,
	0, 0, 0, 0, 781, 0, 0, 0, 0, 1962,
	0, 1692, 0, 415, 1940, 0, 0, 0, 0, 0,
	0, 876, 878, 0, 0, 0, 783, 783, 885, 0,
	0, 416, 0, 0, 0, 0, 1982, 780, 1419, 1420,
	933, 934, 935, 936, 937, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 757, 1043, 0, 418, 780, 780,
	0, 0, 423, 424, 0, 0, 429, 780, 780, 1694,
	0, 1695, 0, 0, 0, 0, 0, 0, 417, 419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	1482, 1483, 0, 0, 0, 0, 0, 0, 1697, 0,
	780, 0, 0, 0, 0, 1700, 0, 0, 0, 0,
	757, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 0,
	0, 421, 422, 0, 0, 0, 1255, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 425, 0, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1696, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 79, 0, 783, 617, 49, 0, 0, 1255,
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1562, 1255,
	0, 1005, 0, 869, 0, 0, 0, 780, 0, 0,
	1572, 893, 894, 0, 0, 0, 49, 0, 783, 0,
	0, 0, 79, 0, 0, 0, 79, 0, 0, 0,
	1605, 1606, 0, 0, 896, 1600, 0, 450, 0, 0,
	458, 0, 782, 782, 0, 426, 0, 49, 0, 427,
	0, 0, 0, 0, 428, 0, 895, 1458, 1459, 0,
	1476, 1477, 1478, 754, 754, 0, 0, 0, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1631, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 0, 1665, 0, 0, 0, 0, 1473, 780,
	598, 901, 0, 0, 0, 0, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 0, 1182,
	0, 1184, 1185, 1186, 1187, 0, 0, 0, 0, 1684,
	1685, 1005, 0, 0, 782, 0, 0, 1464, 889, 889,
	1210, 0, 0, 911, 1711, 0, 1712, 0, 79, 1714,
	1715, 0, 0, 1718, 79, 754, 0, 0, 0, 0,
	0, 0, 1237, 1238, 0, 0, 1251, 0, 1262, 1264,
	1269, 1272, 1273, 1274, 0, 0, 0, 780, 0, 0,
	0, 0, 0, 1734, 0, 889, 1105, 0, 1734, 1474,
	782, 0, 0, 700, 0, 0, 0, 0, 1255, 0,
	0, 79, 79, 0, 0, 79, 0, 0, 912, 0,
	1600, 754, 0, 0, 0, 0, 1769, 0, 893, 894,
	0, 0, 0, 0, 0, 0, 458, 0, 0, 0,
	0, 1325, 0, 0, 782, 0, 0, 757, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 0, 1789,
	0, 0, 0, 0, 1475, 754, 893, 894, 0, 0,
	780, 0, 0, 895, 0, 0, 0, 0, 757, 757,
	0, 0, 0, 1351, 0, 0, 0, 757, 757, 896,
	0, 0, 0, 0, 0, 0, 903, 904, 905, 897,
	898, 899, 900, 902, 1255, 922, 0, 0, 0, 0,
	0, 895, 1816, 0, 1005, 0, 1808, 0, 414, 1810,
	757, 783, 0, 0, 0, 0, 0, 79, 901, 0,
	0, 0, 0, 0, 0, 0, 885, 1470, 1471, 1472,
	0, 1469, 1466, 1467, 1468, 1460, 1461, 1462, 1463, 1465,
	889, 0, 783, 783, 0, 0, 0, 0, 0, 0,
	0, 783, 783, 0, 0, 0, 901, 1734, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 1858,
	911, 0, 0, 0, 0, 0, 1404, 1405, 79, 1255,
	0, 0, 1410, 0, 783, 0, 0, 889, 1600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 1428, 450, 0, 0, 0, 0,
	0, 1435, 0, 0, 1439, 0, 0, 757, 869, 0,
	0, 0, 0, 1448, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1896, 1897, 0,
	0, 1901, 0, 0, 0, 1902, 0, 1734, 945, 0,
	414, 0, 0, 0, 1269, 1269, 1269, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 1920, 0, 889, 0,
	0, 0, 0, 1930, 1600, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 783, 0, 0, 0, 0, 0, 1938, 0, 889,
	79, 0, 414, 0, 0, 905, 897, 898, 899, 900,
	902, 0, 922, 598, 0, 0, 0, 0, 0, 757,
	1734, 598, 0, 1858, 0, 700, 0, 0, 0, 0,
	450, 0, 0, 450, 450, 0, 0, 782, 0, 0,
	0, 0, 0, 0, 897, 898, 899, 900, 902, 0,
	922, 79, 0, 889, 0, 942, 0, 944, 754, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 782, 782,
	0, 1991, 0, 0, 0, 0, 0, 782, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	754, 0, 1603, 783, 0, 1604, 0, 0, 754, 754,
	0, 0, 0, 0, 0, 0, 1609, 757, 0, 0,
	782, 0, 0, 0, 0, 1618, 0, 0, 0, 0,
	0, 0, 0, 1622, 0, 0, 1351, 0, 0, 0,
	0, 754, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 1638, 0, 0, 0, 1640, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 49, 895, 1671, 1672,
	0, 783, 0, 910, 0, 0, 0, 1678, 1679, 1680,
	757, 49, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 782, 0, 0,
	598, 0, 901, 0, 0, 0, 0, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 0, 0, 754, 0,
	0, 920, 928, 916, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 927, 783, 0, 926, 0, 0, 1753,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 895, 0, 911, 0, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 1774, 0, 0, 0,
	1777, 1778, 0, 0, 0, 1780, 0, 917, 0, 0,
	0, 0, 1782, 0, 1784, 0, 0, 0, 0, 0,
	0, 0, 1790, 0, 0, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 901, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	754, 0, 0, 0, 0, 1799, 920, 928, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 1199, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 1826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 782, 0, 919,
	0, 0, 907, 908, 909, 1845, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 754, 0,
	0, 0, 0, 1802, 0, 0, 0, 1458, 1459, 1862,
	1476, 1477, 1478, 0, 912, 0, 0, 0, 0, 0,
	0, 1871, 1872, 1773, 0, 0, 921, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 458, 0, 916, 0, 0, 0, 0, 0, 0,
	896, 1884, 0, 927, 0, 0, 0, 0, 1473, 0,
	782, 0, 0, 0, 1888, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 910, 0,
	0, 754, 0, 0, 919, 0, 700, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 0, 0, 1464, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 49, 0, 0, 901, 0, 0,
	1458, 1459, 0, 1476, 1477, 1478, 0, 49, 0, 0,
	0, 1479, 28, 0, 0, 0, 920, 928, 1400, 0,
	0, 0, 0, 29, 53, 0, 0, 0, 0, 1474,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 55, 911,
	0, 1473, 0, 0, 31, 0, 60, 1199, 0, 0,
	0, 1975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 44, 944, 0, 0, 1989,
	1989, 0, 39, 0, 0, 56, 0, 0, 0, 43,
	40, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 1989, 45, 0, 0, 0,
	0, 0, 41, 0, 912, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 1479, 944, 0, 0, 0, 0,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 1472,
	0, 1469, 1466, 1467, 1468, 1460, 1461, 1462, 1463, 1465,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	42, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 0, 58, 30, 1499, 0,
	46, 1140, 57, 0, 0, 0, 0, 1475, 47, 0,
	0, 67, 0, 0, 0, 0, 50, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 1140, 0, 0, 0, 1140, 0, 0, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 66, 0, 0,
	1470, 1471, 1472, 0, 1469, 1466, 1467, 1468, 1460, 1461,
	1462, 1463, 1465, 0, 0, 0, 64, 0, 635, 625,
	626, 623, 624, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 651, 618, 0, 0, 0, 86, 87, 88,
	0, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 621, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 1988, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 609, 111, 112, 652, 653, 631, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 49,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 0, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 0, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	1140, 1140, 131, 0, 1140, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 604, 141, 632,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 610,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 0, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 630, 195, 196, 1987, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 1836, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 602, 0, 0, 0, 0, 603, 49,
	0, 611, 0, 0, 0, 0, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 303, 85, 304, 305, 306, 307,
	211, 308, 309, 310, 311, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 312, 90, 218, 219, 91,
	313, 314, 220, 221, 222, 315, 223, 316, 289, 317,
	92, 93, 94, 944, 95, 318, 96, 97, 98, 319,
	290, 99, 100, 320, 321, 322, 323, 324, 325, 101,
	102, 103, 104, 224, 105, 225, 226, 326, 106, 327,
	107, 328, 329, 330, 108, 109, 331, 110, 332, 0,
	333, 227, 111, 112, 228, 229, 334, 335, 336, 113,
	114, 230, 0, 115, 337, 116, 338, 339, 291, 340,
	117, 231, 341, 232, 342, 118, 119, 120, 121, 233,
	234, 293, 343, 124, 344, 122, 345, 292, 123, 235,
	236, 237, 238, 346, 239, 347, 294, 125, 295, 126,
	127, 348, 129, 128, 349, 240, 296, 130, 297, 350,
	131, 351, 352, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 353, 141, 354, 241, 143,
	242, 144, 145, 355, 146, 356, 357, 358, 359, 147,
	243, 299, 148, 300, 244, 149, 150, 151, 152, 360,
	245, 153, 246, 154, 361, 155, 156, 157, 247, 158,
	159, 362, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 363, 170, 301, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 364, 249, 178, 179, 365, 180,
	181, 302, 182, 250, 251, 183, 366, 189, 184, 185,
	186, 188, 252, 187, 253, 367, 190, 368, 191, 192,
	193, 369, 254, 255, 256, 370, 371, 194, 257, 258,
	372, 195, 196, 197, 198, 373, 374, 199, 200, 201,
	375, 202, 376, 203, 204, 205, 259, 260, 377, 378,
	206, 379, 380, 381, 382, 207, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1595, 83, 84, 303, 85,
	304, 305, 306, 307, 211, 308, 309, 310, 311, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 312,
	90, 218, 219, 91, 313, 314, 220, 221, 222, 315,
	223, 316, 289, 317, 92, 93, 94, 0, 95, 318,
	96, 97, 98, 319, 290, 99, 100, 320, 321, 322,
	323, 324, 325, 101, 102, 103, 104, 224, 105, 225,
	226, 326, 106, 327, 107, 328, 329, 330, 108, 109,
	331, 110, 332, 0, 333, 227, 111, 112, 228, 229,
	334, 335, 336, 113, 114, 230, 0, 115, 337, 116,
	338, 339, 291, 340, 117, 231, 341, 232, 342, 118,
	119, 120, 121, 233, 234, 293, 343, 124, 344, 122,
	345, 292, 123, 235, 236, 237, 238, 346, 239, 347,
	294, 125, 295, 126, 127, 348, 129, 128, 349, 240,
	296, 130, 297, 350, 131, 351, 352, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 353,
	141, 354, 241, 143, 242, 144, 145, 355, 146, 356,
	357, 358, 359, 147, 243, 299, 148, 300, 244, 149,
	150, 151, 152, 360, 245, 153, 246, 154, 361, 155,
	156, 157, 247, 158, 159, 362, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 363, 170, 301, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 364, 249,
	178, 179, 365, 180, 181, 302, 182, 250, 251, 183,
	366, 189, 184, 185, 186, 188, 252, 187, 253, 367,
	190, 368, 191, 192, 193, 369, 254, 255, 256, 370,
	371, 194, 257, 258, 372, 195, 196, 197, 198, 373,
	374, 199, 200, 201, 375, 202, 376, 203, 204, 205,
	259, 260, 377, 378, 206, 379, 380, 381, 382, 207,
	208, 209, 210, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 726, 0, 0, 83,
	84, 303, 85, 304, 305, 306, 307, 211, 308, 309,
	310, 311, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 312, 90, 218, 219, 91, 313, 314, 220,
	221, 222, 315, 223, 316, 289, 317, 92, 93, 94,
	0, 95, 318, 96, 97, 98, 319, 290, 99, 100,
	320, 321, 322, 323, 324, 325, 101, 102, 103, 104,
	224, 105, 225, 226, 326, 106, 327, 107, 328, 329,
	330, 108, 109, 331, 110, 332, 0, 333, 227, 111,
	112, 228, 229, 334, 335, 336, 113, 114, 230, 0,
	115, 337, 116, 338, 339, 291, 340, 117, 231, 341,
	232, 342, 118, 119, 120, 121, 233, 234, 293, 343,
	124, 344, 122, 345, 292, 123, 235, 236, 237, 238,
	346, 239, 347, 294, 125, 295, 126, 127, 348, 129,
	128, 349, 240, 296, 130, 297, 350, 131, 351, 352,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 353, 141, 354, 241, 143, 242, 144, 145,
	355, 146, 356, 357, 358, 359, 147, 243, 299, 148,
	300, 244, 149, 150, 151, 152, 360, 245, 153, 246,
	154, 361, 155, 156, 157, 247, 158, 159, 362, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 363,
	170, 301, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 364, 249, 178, 179, 365, 180, 181, 302, 182,
	250, 251, 183, 366, 189, 184, 185, 186, 188, 252,
	187, 253, 367, 190, 368, 191, 192, 193, 369, 254,
	255, 256, 370, 371, 194, 257, 258, 372, 195, 196,
	197, 198, 373, 374, 199, 200, 201, 375, 202, 376,
	203, 204, 205, 259, 260, 377, 378, 206, 379, 380,
	381, 382, 207, 208, 209, 210, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 1226, 85, 0, 0, 0, 0,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 1227, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 1225, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 602, 1228, 0, 0, 0, 603, 0, 0, 611,
	1223, 0, 0, 0, 614, 635, 625, 626, 623, 624,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 0, 651,
	618, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 621,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 701, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	609, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 604, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 610, 173, 0, 174,
	175, 176, 177, 67, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 69, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 630,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 516, 686, 0, 0, 206,
	0, 0, 0, 65, 207, 208, 209, 210, 605, 66,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 601,
	602, 0, 0, 0, 0, 603, 83, 84, 611, 85,
	0, 0, 0, 614, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 67, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 69, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	516, 686, 0, 0, 206, 0, 0, 0, 65, 207,
	208, 209, 210, 605, 66, 635, 625, 626, 623, 624,
	615, 0, 0, 0, 601, 602, 0, 0, 0, 0,
	603, 83, 84, 611, 85, 0, 0, 0, 614, 651,
	618, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 1265, 90, 218, 219, 91, 621,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	609, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 1270, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 1266, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 604, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 610, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 1267, 194, 657, 658, 630,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 0, 0, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 605, 0,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 601,
	602, 0, 0, 0, 0, 603, 83, 84, 611, 85,
	0, 0, 0, 614, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 605, 0, 0, 0, 0, 635, 625,
	626, 623, 624, 615, 601, 602, 0, 0, 0, 0,
	603, 950, 1218, 611, 83, 84, 0, 85, 614, 0,
	0, 0, 651, 618, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 621, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 609, 111, 112, 652, 653, 631, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 604, 141, 632,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 610,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 630, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 605, 0, 635, 625, 626, 623, 624, 615, 0,
	0, 0, 601, 602, 599, 0, 0, 0, 603, 83,
	84, 611, 85, 0, 0, 0, 614, 651, 618, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 621, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 609, 111,
	112, 652, 653, 631, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 604, 141, 632, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 610, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 630, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 686, 0, 0, 206, 0, 0,
	0, 0, 207, 208, 209, 210, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 602, 0,
	0, 0, 0, 603, 0, 0, 611, 1668, 0, 0,
	0, 614, 635, 625, 626, 623, 624, 615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	0, 85, 0, 0, 0, 0, 651, 618, 0, 0,
	0, 86, 87, 88, 212, 666, 214, 667, 89, 668,
	669, 0, 90, 218, 219, 91, 621, 650, 670, 671,
	222, 0, 662, 0, 643, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	644, 646, 0, 645, 647, 101, 102, 103, 104, 672,
	105, 673, 674, 0, 106, 0, 107, 0, 0, 0,
	665, 109, 0, 110, 0, 0, 0, 609, 111, 112,
	652, 653, 631, 0, 0, 113, 114, 675, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 663, 0, 232,
	0, 118, 119, 120, 121, 659, 661, 293, 0, 124,
	0, 122, 0, 292, 123, 676, 677, 678, 679, 0,
	642, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 664, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 604, 141, 632, 660, 143, 680, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	654, 149, 150, 151, 152, 0, 655, 153, 246, 154,
	0, 155, 156, 157, 681, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 610, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 648, 180, 181, 302, 182, 682,
	251, 183, 0, 189, 184, 185, 186, 188, 683, 187,
	656, 0, 190, 0, 191, 192, 193, 0, 254, 684,
	685, 0, 0, 194, 657, 658, 630, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 649, 202, 0, 203,
	204, 205, 259, 686, 1625, 0, 206, 0, 0, 0,
	0, 207, 208, 209, 210, 605, 0, 635, 625, 626,
	623, 624, 615, 0, 0, 0, 601, 602, 0, 0,
	0, 0, 603, 83, 84, 611, 85, 0, 0, 0,
	614, 651, 618, 0, 0, 0, 86, 87, 88, 212,
	666, 214, 667, 89, 668, 669, 0, 90, 218, 219,
	91, 621, 650, 670, 671, 222, 0, 662, 0, 643,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 644, 646, 0, 645, 647,
	101, 102, 103, 104, 672, 105, 673, 674, 0, 106,
	0, 107, 0, 0, 0, 665, 109, 0, 110, 0,
	0, 0, 609, 111, 112, 652, 653, 631, 0, 0,
	113, 114, 675, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 663, 0, 232, 0, 118, 119, 120, 121,
	659, 661, 293, 0, 124, 0, 122, 0, 292, 123,
	676, 677, 678, 679, 0, 642, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 664, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 604, 141, 632, 660,
	143, 680, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 299, 148, 300, 654, 149, 150, 151, 152,
	0, 655, 153, 246, 154, 0, 155, 156, 157, 681,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 610, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 648,
	180, 181, 302, 182, 682, 251, 183, 0, 189, 184,
	185, 186, 188, 683, 187, 656, 0, 190, 0, 191,
	192, 193, 0, 254, 684, 685, 0, 0, 194, 657,
	658, 630, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 649, 202, 0, 203, 204, 205, 259, 686, 0,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 602, 0, 0, 0, 0, 603, 0, 0,
	611, 1615, 0, 0, 0, 614, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 701, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 1270, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	604, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 610, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 605, 0, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 601, 602, 0, 0, 0,
	0, 603, 83, 84, 611, 85, 0, 0, 0, 614,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 0, 0, 611,
	1213, 0, 0, 0, 614, 635, 625, 626, 623, 624,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 877, 85, 0, 0, 0, 0, 651,
	618, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 621,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	609, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 604, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 610, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 630,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 0, 0, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 605, 0,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 601,
	602, 0, 0, 0, 0, 603, 83, 84, 611, 85,
	0, 0, 0, 614, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 1988, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 1987, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 605, 0, 635, 625, 626, 623, 624,
	615, 0, 0, 0, 601, 602, 0, 0, 0, 0,
	603, 83, 84, 611, 85, 0, 0, 0, 614, 651,
	618, 0, 0, 0, 86, 87, 88, 1986, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 621,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 1988, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	609, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 604, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 610, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 630,
	195, 196, 1987, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 0, 0, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 605, 0,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 601,
	602, 0, 0, 0, 0, 603, 83, 84, 611, 85,
	0, 0, 0, 614, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 605, 0, 1242, 625, 626, 623, 624,
	615, 0, 0, 0, 601, 602, 0, 0, 0, 0,
	603, 83, 84, 611, 85, 0, 0, 0, 614, 651,
	618, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 621,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 1245, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	609, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 1246, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 1247, 1244, 136, 137, 298,
	138, 139, 142, 140, 604, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 610, 173, 0, 174,
	175, 176, 1248, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 630,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 0, 0, 206,
	0, 0, 0, 0, 207, 208, 1243, 210, 605, 0,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 601,
	602, 0, 0, 0, 0, 603, 83, 84, 611, 85,
	0, 0, 0, 614, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 0,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 1260, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 635, 625, 626, 623, 624,
	615, 0, 0, 0, 1256, 1257, 0, 0, 0, 0,
	1258, 83, 84, 1259, 85, 0, 0, 0, 614, 651,
	618, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 0,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 0, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 1260, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 630,
	195, 196, 197, 198, 635, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 651, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 1259, 650,
	220, 221, 222, 614, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 652, 653, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 235, 236, 237,
	238, 0, 239, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 0, 141, 0, 660, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 657, 658, 0, 195,
	196, 197, 198, 512, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 1736, 0, 220,
	221, 222, 0, 223, 0, 289, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 293, 0,
	124, 0, 122, 0, 292, 123, 235, 236, 237, 238,
	0, 239, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 240, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 67, 249, 178, 179, 0, 180, 181, 302, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 69, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 516, 260, 0, 0, 206, 0, 0,
	0, 65, 207, 208, 209, 210, 0, 66, 512, 827,
	0, 828, 823, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 64, 85, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	289, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 831,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 820, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 293, 0, 124, 0, 122, 0, 292,
	123, 235, 236, 237, 238, 0, 239, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 240, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 821, 0, 0,
	0, 147, 243, 299, 148, 300, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 302, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 819, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	512, 827, 206, 828, 823, 818, 0, 207, 208, 209,
	210, 0, 0, 0, 0, 0, 83, 84, 0, 85,
	0, 0, 829, 824, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 289, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 814, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	820, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 293, 0, 124, 0, 122,
	0, 292, 123, 235, 236, 237, 238, 0, 239, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 240,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 821,
	0, 0, 0, 147, 243, 299, 148, 300, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 302, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 819, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 512, 827, 206, 828, 823, 818, 0, 207,
	208, 209, 210, 0, 0, 0, 0, 0, 83, 84,
	0, 85, 0, 0, 829, 824, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 289, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 820, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 293, 0, 124,
	0, 122, 0, 292, 123, 235, 236, 237, 238, 0,
	239, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 240, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 821, 0, 0, 0, 147, 243, 299, 148, 300,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 302, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 819, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 80, 0, 206, 0, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 0, 0,
	83, 84, 0, 85, 0, 0, 829, 824, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 472, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 67, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 69, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 516, 260, 0, 0, 206, 80,
	0, 0, 65, 207, 208, 209, 210, 0, 66, 0,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 0, 0, 211, 0, 0, 0, 1142, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 67, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	69, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 516,
	260, 0, 0, 206, 80, 0, 0, 65, 207, 208,
	209, 210, 0, 66, 0, 0, 0, 0, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 0, 211, 0,
	0, 0, 64, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 472, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 1142, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 721, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 1044, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 1632, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 635, 625, 626, 623, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 0, 85, 697, 0, 0, 0, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 0, 0, 670,
	671, 222, 0, 223, 0, 289, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 631, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 240, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 0, 141, 632, 241, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 257, 258, 630, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 686, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 798, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 797, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 80, 206, 0, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 801, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 512, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 801, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	289, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 293, 0, 124, 0, 122, 0, 292,
	123, 235, 236, 237, 238, 0, 239, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 240, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 302, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 1008, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 1006, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 1113, 0,
	113, 114, 230, 0, 115, 0, 116, 1011, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 1111, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 1010, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 1112, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 1008, 223, 0, 0, 1003,
	92, 93, 94, 0, 95, 1006, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 1011, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 1002,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 1010, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 1009, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 1599, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 472, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 748, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 472, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	524, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 484, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 472, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 477, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	472, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 387, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 386, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	1306, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 1304,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 1293, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 868, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 401, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 733, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 0, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 576, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 571, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 530, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 412, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 411, 255, 256, 0, 0,
	407, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 412, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 411, 255, 256, 0, 0, 407,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	508, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 505,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 502, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 500, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 480, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 461, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 404, 0, 0, 132, 0,
	133, 134, 135, 136, 412, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 406, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 405, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 411, 255, 256,
	0, 0, 407, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 0, 152, 0, 245, 153, 246, 154, 0, 155,
	0, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 0, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 927,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 895, 916,
	0, 0, 0, 0, 910, 0, 896, 0, 0, 927,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 895, 916,
	0, 0, 0, 0, 910, 0, 896, 0, 0, 927,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 901, 0, 0, 0, 0, 895, 916,
	0, 0, 0, 0, 910, 0, 896, 0, 0, 927,
	0, 0, 920, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 926, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 0, 918,
	0, 0, 920, 928, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 917, 918,
	0, 0, 920, 928, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 917, 918,
	0, 0, 920, 928, 0, 911, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 917, 918,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 921, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	912, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	919, 0, 921, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 1458,
	1459, 1935, 1476, 1477, 1478, 0, 0, 0, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 893,
	894, 1933, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	1473, 0, 896, 893, 894, 927, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 895, 0, 896, 0, 0, 927,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 895, 1464,
	0, 0, 0, 0, 910, 916, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 1479, 895, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 1474, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 928, 0, 918, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 926, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 917, 911, 0, 0, 920, 928,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 917, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 1470,
	1471, 1472, 0, 1469, 1466, 1467, 1468, 1460, 1461, 1462,
	1463, 1465, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 921, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 0, 1908, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	0, 1883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 893, 894, 1878, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 896, 893,
	894, 927, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	895, 0, 896, 0, 0, 927, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 895, 0, 0, 0, 0, 0,
	910, 916, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 927, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 920, 928, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 918, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 926, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	917, 911, 0, 0, 920, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 921, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 0, 0, 1874, 0, 0, 919, 0, 0, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 0, 1804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 893, 894, 1803, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 0, 0, 896, 893, 894, 927, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 895, 0, 896, 0,
	0, 927, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	895, 0, 0, 0, 0, 0, 910, 916, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	920, 928, 0, 0, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 928, 0, 918, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 926,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 917, 911, 0, 0,
	920, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	921, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 0, 0, 1701,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 0, 0, 1635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 893, 894, 1619,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	896, 893, 894, 927, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 895, 0, 896, 0, 0, 927, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 895, 0, 0, 0,
	0, 0, 910, 916, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 928, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 926, 0, 901, 2008, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 917, 911, 0, 0, 920, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 2007, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 921, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 1214, 0, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 927, 0,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 895, 0, 916,
	0, 0, 0, 910, 1129, 0, 896, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 931, 0, 0,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 901, 0, 1490, 0, 0, 1489, 0, 916,
	0, 0, 1130, 930, 0, 0, 896, 0, 0, 927,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 926, 0, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 918, 0,
	0, 0, 920, 928, 911, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 917, 0, 918,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 920, 928, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 921, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 927, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 895, 922, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 927, 0, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 901, 0, 0, 0, 895, 0, 916, 0, 0,
	0, 910, 0, 0, 896, 0, 0, 927, 0, 0,
	920, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 895, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 456, 0, 920,
	928, 1458, 1459, 0, 1476, 1477, 1478, 0, 0, 0,
	0, 901, 0, 0, 926, 0, 1496, 1772, 0, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	920, 928, 911, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	921, 0, 1473, 0, 0, 917, 0, 918, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 919, 921,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 0, 912, 1623,
	0, 0, 0, 0, 0, 1479, 0, 0, 893, 894,
	921, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 1474, 916, 0, 0, 0, 1491, 0,
	0, 896, 0, 0, 927, 0, 0, 919, 0, 0,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 895, 922, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 0, 1475, 0,
	0, 0, 0, 0, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 0, 0, 0, 0, 0, 901, 0,
	916, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	927, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 895,
	0, 0, 926, 0, 0, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 1470, 1471, 1472, 0, 1469, 1466, 1467, 1468, 1460,
	1461, 1462, 1463, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 893, 894, 0, 913,
	914, 915, 923, 924, 925, 0, 0, 0, 0, 0,
	0, 0, 916, 920, 928, 0, 1449, 0, 0, 896,
	0, 0, 927, 0, 0, 912, 893, 894, 926, 913,
	914, 915, 923, 924, 925, 0, 0, 921, 0, 0,
	918, 895, 916, 0, 0, 0, 911, 910, 0, 896,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 917,
	0, 895, 0, 0, 0, 0, 0, 910, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 901, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 912, 922, 0, 0, 920, 928, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 901, 0, 893, 894,
	926, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 918, 0, 916, 920, 928, 0, 911, 0,
	0, 896, 0, 0, 927, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 918, 895, 0, 0, 0, 0, 911, 910,
	0, 919, 0, 0, 907, 908, 909, 0, 906, 903,
	904, 905, 897, 898, 899, 900, 902, 0, 922, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 0, 0, 921, 0, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	927, 0, 0, 912, 0, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 895,
	0, 0, 926, 0, 0, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 919, 0, 0, 907, 908, 909, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 919, 901, 0, 907, 908, 909, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 0, 920, 928, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 0, 912, 0, 0, 926, 0,
	0, 1458, 1459, 0, 1476, 1477, 1478, 921, 896, 0,
	918, 927, 0, 0, 0, 0, 911, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	1458, 1459, 0, 1476, 1477, 1478, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 1611, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 912, 922, 0, 0, 901, 0, 0, 893, 894,
	0, 1473, 0, 921, 923, 924, 925, 0, 0, 0,
	0, 1464, 0, 0, 920, 928, 0, 0, 0, 0,
	0, 896, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 895, 0, 1479, 0, 911, 0, 910,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 1474, 907, 908, 909, 0, 906, 903,
	904, 905, 897, 898, 899, 900, 902, 0, 922, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 1470, 1471, 1472, 0, 1469, 1466, 1467, 1468, 1460,
	1461, 1462, 1463, 1465, 0, 912, 771, 765, 788, 759,
	779, 778, 0, 0, 761, 760, 0, 921, 0, 790,
	789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 1471, 1472, 0, 1469, 1466, 1467, 1468, 1460, 1461,
	1462, 1463, 1465, 0, 0, 0, 0, 0, 0, 0,
	784, 0, 776, 775, 0, 771, 765, 788, 759, 779,
	778, 774, 0, 761, 760, 0, 0, 0, 790, 789,
	0, 0, 0, 0, 0, 919, 0, 0, 773, 0,
	0, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 0, 0, 0, 0, 0, 784,
	0, 776, 775, 0, 0, 0, 766, 767, 768, 769,
	774, 787, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 777, 0, 0,
	0, 1146, 0, 0, 0, 766, 767, 768, 769, 0,
	787, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 1149,
	1147, 1148, 1151, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 777, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	770, 764, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 772, 0, 0, 762, 0, 0,
	785, 786, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 0, 0, 791, 0, 0, 0, 0, 770,
	764, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 785,
	786, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 791,
}
var sqlPact = [...]int{

	3359, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687, 1333,
	1328, 17464, -1000, -1000, -1000, -1000, -1000, -1000, 945, 659,
	171, 4619, 17464, 17464, 17195, 1159, 1159, 18809, -1000, -1000,
	22037, -1000, 2059, 498, 503, 498, 498, 497, 18809, 598,
	665, 129, -1000, 688, -2, 21768, 17464, 1388, 35, 15850,
	325, 3359, 16926, 21499, 17464, 16657, 17464, 17464, 301, 40,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1219, 1113, 1112, 15850, 21230, 20961, 20692, 20423, -1000,
	10859, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 733, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 331, 330, -1000, 16388, -1000, 930, -1000,
	34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 928,
	-1000, 17464, -1000, -1000, 20154, 19885, 328, 866, -1000, -1000,
	554, 408, 1401, -1000, 45, -1000, -1000, -1000, 1218, -1000,
	920, 1217, 1205, 1203, 1201, 1200, 1199, 405, 919, 466,
	-1000, 866, -1000, 866, -1000, -1000, -1000, 572, 18809, -1000,
	15850, -1000, 19616, 17464, 17464, 1127, 19347, -1000, 688, -1000,
	-1000, -1000, 964, 1387, 1387, 1387, 1408, 124, 115, 129,
	28, 17464, -1000, 327, 28, 6414, 6414, -1000, -1000, 325,
	-1000, 146, 13646, -1000, 7642, -1000, 947, 1288, 389, 713,
	1285, -89, 781, 779, 1284, 570, 1195, 647, 12839, 40,
	-1000, -1000, -1000, 4326, 15850, 17464, 17464, 695, 19078, -1000,
	1281, 127, 1279, -1000, 119, 1274, -1000, 119, 1272, 27,
	-1000, -1000, -1000, -1000, -1000, -1000, 325, 16119, 17464, 1474,
	25988, -1000, 9436, -1000, -1000, 14208, 1001, 14208, -1000, -1000,
	1473, -1000, 9436, -1000, 33, 31, 1055, 1093, 11436, 11154,
	1343, 959, -1000, -1000, -1000, 43, 4619, 17464, 1230, 14208,
	17464, 17464, 17464, 17464, 17464, 17464, -1000, 1052, -1000, -1000,
	17464, 17464, -1000, 30, 29, -1000, 18809, -1000, 128, -1000,
	321, 1026, 415, 141, 18540, 415, 1023, -1000, 964, -1000,
	891, 1048, 8551, 9436, 129, -1000, -1000, 129, 129, 9436,
	-1000, -1000, 17464, 28, 1465, 17464, 139, -1000, 24543, -1000,
	-1000, 9436, 9436, 9436, 9436, 9436, 857, 346, -1000, 320,
	319, 5526, -1000, -1000, 1548, -1000, -1000, -1000, 137, -1000,
	-1000, 9436, 40, -1000, -1000, -1000, -1000, 318, 1570, 431,
	-1000, -1000, -1000, 412, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1228, 316, 300, -1000, -1000, -1000, -1000,
	299, 292, 291, 290, 289, 288, 284, 283, 282, 278,
	275, 274, 273, 271, 267, 832, -1000, 428, -1000, -1000,
	428, 428, -1000, 261, 261, 265, -1000, -1000, -1000, -1000,
	261, -1000, -1000, -1000, 398, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 266, 139, -1000, -1000, -1000, 17464, 23, -1000,
	25336, -1000, -34, 771, -1000, 15312, 1435, 1419, 1354, 15850,
	1422, 1398, 569, 17464, 17464, 568, 567, 15850, 1569, 1568,
	-1000, 1191, 21, -1000, -1000, -1000, -1000, 419, 98, 1454,
	98, 13108, -1000, 17464, 17464, -1000, 17464, -1000, -1000, 17464,
	-1000, 17464, 17464, -1000, 17464, 169, 14774, 769, 1270, 664,
	-2, 19, -1000, 1478, -1000, -1000, -1000, -1000, 94, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 265, 832, 261, 261, 261, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 398, -1000, -1000, 428, 428,
	428, -1000, -1000, 15, 25336, 561, -22, 14491, 17464, -1000,
	40, -1000, -1000, 1190, 461, 14, 809, 1106, 792, -1000,
	-1000, -1000, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1532, -1000, -1000, -1000, -1000, 1547,
	22, -1000, -1000, -1000, -1000, -1000, 1567, -1000, -1000, -1000,
	4619, -1000, -1000, -1000, 17464, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 809, 1106, -1000, -1000, 15850,
	15043, 1453, 1265, 846, -1000, 1449, 17464, 917, 1021, -1000,
	592, 1264, -1000, -1000, -1000, -1000, 25336, -1000, 25336, 722,
	1116, -1000, 1116, -5, -1000, 24483, -1000, 260, 13, -1000,
	419, 6414, 12570, 25939, 25988, 17464, 583, 9436, 9436, 9436,
	9436, 9436, 9436, 9436, 9436, 9436, 9436, 9436, 9436, 9436,
	9436, 9436, 9436, 9436, 9436, 9436, 9436, 9436, 9436, 1062,
	9436, 560, 9436, 9436, 9436, 9436, 975, 889, 243, 900,
	4619, -1000, -1000, 645, 645, 645, 25524, 25524, 226, 346,
	-1000, 9436, -1000, 8232, 115, 24087, -11, -1000, -1000, -1000,
	6116, 423, 25336, 40, 4912, -1000, 1044, 1545, 1236, 1146,
	259, 114, 113, 9436, 9436, 9731, 9731, 9436, 10026, 9436,
	9436, 5821, 9436, 9436, 9436, 9436, 9436, 9436, -1000, 257,
	-1000, -1000, -1000, -1000, 1544, -1000, -1000, 1543, -1000, 580,
	578, 1540, 419, 112, 7642, -1000, 769, 17464, 17464, 17464,
	-1000, -1000, 1015, 18271, 1010, 25988, 17464, -1000, 256, 255,
	1092, 1083, 17464, 17464, 18002, 17733, 17464, 843, 254, 251,
	17464, 775, -1000, 17464, 17464, 741, 1134, -1000, 643, 1189,
	17464, 725, 9436, 819, -1000, 12285, 435, 17464, 758, 117,
	-1000, -1000, -1000, 384, 17464, -1000, -1000, -1000, 127, -1000,
	119, 119, -1000, -1000, 15850, -1000, -1000, -1000, -1000, -1000,
	-1000, 25988, 345, 343, -1000, 1539, 559, -1000, 558, 557,
	552, -1000, 246, -1000, 9436, 17464, 14491, -22, -28, -1000,
	-1000, 17464, 1106, -1000, -1000, -1000, -1000, 717, -1000, 800,
	-1000, 11718, -1000, -1000, -1000, 1044, -1000, -42, -1000, -1000,
	-1000, -1000, 111, 8, -30, 25988, -1000, -1000, -1000, -1000,
	-1000, 17464, 280, 17464, -2, 17464, -1000, 1566, -2, 17464,
	1262, 1298, 368, 17464, -1000, -1000, -1000, 9436, -1000, -1000,
	-1000, -2, 17464, -1000, 1144, -1000, -73, 1582, -102, 140,
	392, -1000, 12000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 404, 460, 460, 481, 481, 481,
	481, 2498, 2498, 2536, 2271, 25748, 25748, 25748, 367, 502,
	502, 25748, 25748, 25748, 25524, 25438, 196, 9436, 9436, 545,
	883, 243, 196, 9436, 1525, 196, 196, 196, -1000, 669,
	-1000, -1000, -1000, 1188, 242, 10026, 10026, -1000, -1000, -1000,
	5526, 10321, -1000, -1000, -1000, -1000, -1000, 241, 9436, -1000,
	24111, -158, 2, -1000, -1000, 9436, -13, -60, -1000, -1000,
	619, -1000, 9436, -1000, 3, 9436, 9436, 9436, 110, -1000,
	107, 867, 232, 229, 9436, -1000, -1000, 25306, 22623, 103,
	1187, -122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 102,
	101, 25204, -122, 100, 3360, -1000, 10026, 10026, 10026, 5526,
	225, 99, 24452, -122, 25118, 7937, 7937, 7937, 96, 24891,
	9436, -122, 22593, 3257, 3027, 1, 0, -4, 1538, -9,
	92, 401, 395, 90, 1144, -1000, -1000, -1000, -1000, 544,
	543, 1261, -1000, 1007, -1000, 439, -1000, 841, 9436, 17464,
	224, 221, 823, -1000, 1260, 944, 1259, 944, -1000, -34,
	746, 9436, 9436, -1000, 542, -1000, -1000, 541, -1000, 1177,
	-1000, 635, -1000, -1000, 6414, 25336, -1000, 757, 1366, -14,
	-1000, -1000, 6414, 419, 13108, 12570, 7642, -21, -1000, -1000,
	-1000, 769, -1000, 538, 1524, 86, 1025, 897, 770, 704,
	1522, 25336, -42, -1000, -42, -1000, -1000, -1000, -1000, -1000,
	-1000, 17464, 1130, -1000, 15043, 220, 17464, 216, -1000, 215,
	-1000, -1000, 207, 17464, 1060, 368, 1572, -1000, 415, -1000,
	81, -1000, 1141, 1403, -1000, 12570, 904, 1103, 1099, 12570,
	1355, 860, 860, 860, -1000, 392, 4022, 9436, 15581, 875,
	62, 80, 1582, 9436, 196, 196, 9436, 10026, 10026, -1000,
	196, -1000, -1000, -1000, -1000, 1174, 206, 9436, 25988, 25700,
	25661, -23, -1000, 7323, -66, -1000, 9436, -1000, 23781, -1000,
	-1000, 342, 1296, -1000, 9436, 24860, 79, 7028, -1000, 24801,
	-8, -8, -1000, 1563, -1000, 13377, 421, 885, 23745, 25939,
	25988, -1000, 9436, -1000, -1000, 1158, 9436, -1000, 25939, 25988,
	10026, 10026, 10026, 10026, 10026, 10026, 10026, 10026, 10026, 10026,
	10026, 10026, 10026, 10026, 10026, 10026, 10026, 10026, 10026, 1041,
	10026, 1514, 1514, 1514, -80, 6709, -1000, 1225, 1158, 9436,
	9436, 25988, 75, 74, 73, -1000, 9436, -122, 9436, 9436,
	9436, -1000, -1000, -1000, 70, -1000, 1519, -1000, -1000, -1000,
	-1000, 1141, 17464, 17464, 17464, 1256, -1000, 1956, -1000, 23721,
	-32, 17464, 17464, -1000, 1080, 1073, 455, 17464, -1000, 17464,
	-1000, 17464, 17464, 17464, -33, -37, 17464, 17464, 1562, -1000,
	-105, 6414, 203, -2, -105, 725, -1000, -87, -1000, 383,
	-1000, 337, 335, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 67, -1000, -1000, 1132, -1000, 10590, 200, 17464, 15043,
	1442, 10590, 910, 1063, 368, 1561, -1000, 592, -1000, 417,
	9436, 9436, 1582, 604, 12570, 12570, 1163, 1094, 12570, -1000,
	-1000, -1000, -1000, 15581, -1000, 1087, -38, -1000, -1000, 17464,
	181, -1000, 392, 511, 196, 24981, 3237, 9436, 25988, 25645,
	-43, 9436, 9436, -1000, -44, -1000, 9436, 333, 25336, -1000,
	-1000, -1000, 25336, 9436, 1516, 9436, 65, 63, 61, -1000,
	-1000, -1000, 22306, 9436, 58, -1000, 57, 56, 25336, 1225,
	25336, -1000, -1000, 593, 593, 1514, 1514, 1514, 1514, 317,
	317, 1483, 1508, 976, 976, 976, 1017, 471, 471, 976,
	976, 976, 1157, 1033, 173, 22959, 9436, -45, -1000, -1000,
	-1000, 25336, 25336, 55, -1000, -1000, -1000, -122, 2922, 23415,
	23379, -1000, 54, 417, -1000, -1000, -1000, 17464, -1000, 17464,
	-1000, 17464, 17464, 1169, 981, -1000, -1000, 1069, 170, 10026,
	17464, -1000, 859, -58, -69, 960, -1000, 927, 9436, -1000,
	25988, 944, 944, -1000, 534, 522, -1000, -1000, -1000, -1000,
	-1000, -105, 1303, 17464, 1353, -1000, -1000, 168, -1000, -1000,
	-1000, 848, -71, -1000, 311, 1374, 9436, -1000, -1000, 167,
	10590, -90, 53, -2, -96, 17464, -1000, 368, 1559, -1000,
	1298, -1000, 17464, 25336, -122, 576, -1000, 1163, -1000, 166,
	9436, 12570, -1000, -1000, -159, -1000, 361, -1000, 392, 163,
	17464, 15581, 9436, 9436, 25645, -97, -1000, 196, 196, -1000,
	23355, -1000, 25336, -1000, 24801, -1000, -1000, -1000, 851, -1000,
	23049, -1000, -1000, -1000, -1000, 10026, 1154, 158, 25988, 23013,
	-1000, -1000, 9436, -1000, -1000, -1000, -1000, -1000, 845, -1000,
	-1000, 17464, 966, -1000, -1000, 9436, 22959, 157, 1130, 151,
	-1000, -1000, -1000, 776, -1000, -1000, 25336, 1375, -1000, -1000,
	17464, 17464, 550, -106, 17464, -1000, -1000, 5231, 17464, 859,
	10590, 1396, 40, 17464, 1396, 22989, 4912, -107, -1000, 1130,
	-1000, 859, 149, 1554, -1000, 1060, -120, -1000, 1439, 13939,
	-1000, 17464, 25336, -1000, 1087, -1000, 4619, 15581, 17464, -108,
	-1000, 196, 196, -1000, -1000, 52, 885, 1394, -1000, 2317,
	10026, 25988, -113, -1000, 22683, -1000, -1000, 1255, 22653, 1039,
	17464, -1000, 17464, 17464, 442, 17464, -1000, -1000, 686, -1000,
	419, -1000, 148, 1130, -1000, -1000, -1000, -1000, 1374, 3,
	859, -1000, 1130, 10590, -1000, 1063, 17464, 147, -1000, 142,
	40, -121, -1000, -1000, -1000, -123, -1000, -1000, 736, 9436,
	2317, -125, -1000, -1000, 1247, -1000, 892, 894, 51, -130,
	141, -1000, 9436, -1000, 13108, -1000, 17464, -1000, 1396, 50,
	1130, -1000, -131, -1000, -1000, -1000, 9436, -1000, -1000, 49,
	9141, 9141, -122, -1000, 17464, -1000, 907, 902, 648, -1000,
	-1000, -1000, -1000, -1000, 1039, 25336, -104, -139, -1000, -1000,
	-1000, 859, -8, -1000, -1000, -1000, 3674, 941, 716, 24147,
	-1000, -1000, -1000, 1310, -1000, 447, 1129, 1129, 892, -1000,
	922, 1130, 47, 1486, -1000, -1000, -1000, -1000, -1000, -1000,
	1496, -1000, -1000, 1067, -1000, -1000, -1000, -1000, -1000, -1000,
	1516, 8846, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1823, 1822, 1415, 144, 1811, 1810, 143, 1807, 1806,
	1805, 1801, 1800, 1797, 106, 140, 139, 127, 136, 1796,
	95, 1789, 1786, 1785, 104, 1784, 1780, 1779, 38, 1778,
	1777, 132, 130, 1775, 1769, 100, 1765, 34, 161, 2245,
	142, 1764, 1763, 1760, 9, 112, 69, 1758, 115, 1754,
	1749, 49, 36, 18, 24, 1748, 103, 119, 906, 47,
	1747, 1745, 150, 1744, 20, 16, 170, 108, 157, 163,
	135, 1742, 1741, 1740, 1739, 58, 1738, 5, 1737, 1733,
	11, 60, 23, 1732, 27, 19, 1731, 1729, 133, 1726,
	72, 110, 120, 33, 126, 129, 1722, 63, 12, 87,
	1721, 1720, 1720, 138, 41, 1719, 55, 85, 149, 1718,
	57, 158, 81, 30, 62, 107, 1716, 1715, 1714, 109,
	1713, 102, 101, 1712, 1709, 93, 1706, 151, 148, 1700,
	1699, 128, 1697, 1691, 1689, 159, 1687, 1684, 164, 1683,
	13, 46, 71, 10, 118, 116, 113, 64, 1682, 25,
	1681, 1488, 892, 788, 15, 89, 54, 56, 88, 53,
	68, 26, 1680, 1679, 117, 1678, 1677, 1676, 1675, 1673,
	86, 1672, 1671, 83, 153, 31, 14, 52, 91, 37,
	80, 94, 169, 155, 114, 1668, 1667, 125, 1663, 235,
	1662, 1661, 1439, 121, 1660, 1659, 1658, 1418, 1182, 1108,
	98, 1657, 1656, 668, 172, 1654, 1653, 61, 1652, 122,
	1647, 1644, 154, 203, 22, 1642, 123, 1639, 105, 1637,
	0, 92, 40, 1636, 131, 84, 1634, 1630, 1619, 1617,
	28, 1, 8, 4, 6, 3, 35, 29, 1614, 1613,
	146, 96, 65, 1611, 160, 1610, 1609, 1606, 39, 1598,
	21, 1597, 17, 1595, 1584, 7, 2, 152, 1583, 111,
	1581, 1433, 1580, 156, 1579, 1578, 1440, 50, 90,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 46, 46, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 43, 43,
	48, 48, 48, 50, 50, 47, 47, 42, 42, 5,
	5, 36, 36, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 94, 94, 93, 93, 96, 96, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	188, 188, 187, 19, 162, 162, 20, 20, 20, 20,
	21, 120, 120, 22, 22, 22, 22, 23, 27, 257,
	257, 257, 261, 261, 262, 262, 263, 263, 263, 263,
	263, 263, 263, 259, 259, 30, 30, 30, 30, 30,
	139, 135, 135, 137, 137, 137, 137, 57, 134, 134,
	134, 134, 136, 136, 136, 136, 213, 212, 212, 218,
	218, 218, 72, 72, 72, 72, 72, 73, 73, 73,
	211, 211, 211, 211, 219, 219, 219, 219, 219, 219,
	74, 74, 74, 217, 217, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 18, 258, 258, 260, 260,
	32, 32, 10, 10, 11, 11, 75, 75, 76, 76,
	142, 142, 142, 142, 77, 77, 49, 49, 49, 141,
	228, 228, 229, 229, 229, 229, 229, 229, 230, 230,
	230, 230, 230, 230, 230, 226, 226, 227, 224, 224,
	225, 225, 225, 225, 264, 264, 140, 140, 80, 80,
	233, 233, 233, 233, 231, 231, 231, 231, 231, 234,
	232, 235, 235, 235, 235, 235, 174, 174, 174, 34,
	12, 55, 55, 13, 9, 9, 124, 124, 84, 84,
	179, 179, 179, 65, 65, 44, 44, 44, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 125,
	125, 126, 126, 25, 29, 33, 33, 33, 33, 33,
	266, 266, 61, 61, 61, 61, 62, 62, 138, 138,
	138, 138, 138, 56, 8, 8, 51, 51, 52, 52,
	53, 53, 54, 54, 267, 267, 24, 24, 24, 24,
	24, 68, 68, 131, 131, 131, 133, 133, 132, 132,
	132, 110, 110, 35, 89, 89, 98, 98, 99, 99,
	185, 100, 100, 28, 28, 39, 39, 37, 37, 37,
	37, 37, 37, 38, 38, 40, 40, 40, 40, 40,
	40, 40, 241, 241, 241, 244, 244, 240, 242, 242,
	243, 243, 265, 265, 111, 111, 111, 79, 78, 78,
	82, 82, 81, 83, 83, 178, 108, 108, 108, 108,
	127, 128, 128, 129, 129, 130, 130, 107, 107, 159,
	159, 41, 41, 88, 88, 90, 90, 149, 149, 150,
	150, 148, 148, 148, 180, 180, 180, 180, 180, 177,
	177, 181, 181, 181, 181, 181, 181, 175, 175, 175,
	175, 176, 176, 186, 186, 114, 114, 114, 114, 112,
	112, 113, 113, 182, 182, 182, 182, 109, 109, 183,
	183, 183, 143, 143, 189, 189, 189, 207, 207, 87,
	87, 87, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 191, 191, 191, 191, 193,
	193, 193, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 206, 206, 206, 206,
	206, 206, 194, 194, 201, 201, 202, 202, 203, 204,
	195, 195, 196, 196, 197, 198, 205, 205, 205, 205,
	209, 209, 199, 199, 199, 199, 199, 200, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 122, 122, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 153, 153, 153, 153, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 236,
	236, 236, 236, 236, 236, 236, 238, 238, 239, 239,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 245, 245, 246,
	246, 248, 248, 249, 249, 250, 251, 251, 251, 252,
	253, 253, 247, 247, 254, 254, 254, 255, 255, 256,
	256, 256, 256, 256, 164, 164, 164, 165, 165, 166,
	172, 172, 172, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 63,
	63, 63, 63, 63, 95, 95, 161, 161, 160, 160,
	160, 163, 163, 115, 115, 208, 208, 208, 208, 208,
	208, 208, 116, 116, 116, 123, 117, 117, 118, 118,
	118, 118, 118, 118, 156, 157, 119, 119, 119, 158,
	158, 167, 171, 171, 170, 169, 169, 168, 168, 146,
	146, 147, 147, 145, 144, 104, 104, 103, 103, 101,
	101, 102, 102, 268, 268, 173, 173, 105, 105, 106,
	97, 97, 184, 184, 184, 184, 91, 91, 70, 70,
	92, 92, 66, 66, 69, 69, 67, 67, 67, 67,
	85, 85, 86, 86, 64, 64, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 210, 210, 210,
	58, 58, 58, 59, 59, 60, 60, 215, 215, 215,
	216, 216, 216, 216, 214, 214, 214, 214, 214, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 6,
	5, 3, 0, 4, 6, 7, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 2, 2, 0, 2, 0,
	8, 8, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 6, 3, 1, 5, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 0, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	218, 65, -8, -9, -10, -11, -12, -13, -243, 93,
	101, 123, 201, 100, 86, 117, 221, 229, -37, -39,
	237, -139, 238, 35, 247, 59, 96, 223, 217, 269,
	67, -241, -40, -38, 317, 292, 298, 232, -41, 255,
	284, 320, 255, 132, 79, 287, 79, 79, -66, -58,
	4, -220, -222, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 58, 59, 60, 62, 64, 65, 66, 69,
	70, 77, 78, 79, 80, 82, 86, 88, 92, 93,
	95, 100, 101, 107, 108, 111, 113, 118, 123, 124,
	125, 126, 133, 136, 131, 145, 147, 148, 151, 150,
	155, 158, 161, 163, 164, 165, 166, 167, 169, 170,
	172, 174, 171, 177, 179, 180, 182, 187, 190, 193,
	194, 195, 196, 199, 201, 203, 204, 205, 207, 208,
	210, 211, 212, 213, 214, 217, 215, 216, 218, 219,
	221, 223, 224, 226, 228, 229, 230, 231, 234, 235,
	237, 238, 240, 243, 246, 247, 248, 251, 249, 245,
	254, 256, 257, 258, 265, 269, 270, 271, 272, 275,
	276, 277, 279, 281, 282, 283, 288, 293, 294, 295,
	296, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	50, 51, 52, 54, 81, 83, 84, 99, 102, 103,
	109, 119, 121, 127, 128, 137, 138, 139, 140, 142,
	153, 176, 178, 188, 192, 198, 200, 206, 225, 233,
	241, 242, 250, 252, 260, 261, 262, 266, 267, 284,
	285, 88, 136, 277, 276, 79, 132, 255, 287, -17,
	317, -28, -7, -15, -4, -24, -35, -14, -31, -18,
	-32, -16, 23, -214, 4, -220, -222, -221, -223, 56,
	68, 116, 135, 129, 144, 146, 154, 156, 168, 189,
	191, 222, 239, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 55, 57, 63, 67,
	71, 72, 73, 74, 75, 76, 85, 87, 89, 90,
	91, 94, 96, 98, 104, 105, 106, 112, 114, 115,
	117, 120, 122, 130, 132, 134, 141, 143, 149, 152,
	157, 159, 160, 173, 175, 181, 183, 184, 185, 186,
	197, 202, 209, 220, 232, 236, 244, 253, 255, 259,
	263, 264, 268, 273, 274, 278, 280, 286, 287, 289,
	290, 291, 292, -58, -58, -58, 201, 22, -261, 22,
	-262, -263, 67, 93, 117, 232, 136, 88, 276, -261,
	-62, 229, -58, -135, 158, 235, 225, 265, -136, -134,
	-213, 260, 167, -93, -58, 4, 22, 79, 58, 80,
	118, 132, 133, 63, 64, 148, 256, 260, 265, 67,
	279, -266, 265, 265, -266, -266, -61, 265, 263, -62,
	-265, 255, 255, 278, 287, -124, 79, 274, -38, -40,
	-39, -81, -82, 273, 141, 98, 186, -37, -39, -241,
	-244, 207, -240, -58, -244, -78, -79, 22, 90, 321,
	-182, -66, 184, -106, 317, -3, -182, 127, -66, -69,
	127, -66, -58, -182, 127, -58, -58, 115, 317, -103,
	-104, -144, -145, 319, 115, 143, 143, -183, -182, -58,
	127, -70, 127, -69, -94, 127, -93, -94, 127, -188,
	-187, -216, 4, -220, -222, -221, 284, 255, 132, -162,
	317, -120, 317, -58, 22, 183, 321, 183, -58, -135,
	52, -135, 317, -137, -56, -57, 145, 203, 263, 302,
	115, 296, -74, 5, 85, -96, 319, 115, -258, 183,
	115, 115, 115, 115, 115, 115, 296, 145, 203, 228,
	255, 287, -138, -56, -57, -138, 263, -62, -109, -182,
	-93, 127, -58, -93, 132, -58, 127, -81, -82, -108,
	-127, -128, 157, 181, -111, 22, 90, -111, -111, 44,
	318, 318, 321, -244, -86, 317, -97, -184, -151, 310,
	-153, 308, 309, 314, 173, 297, -164, -155, -167, 99,
	225, 317, -66, -154, 322, 9, -238, -39, 29, -165,
	-166, 48, -58, 7, 8, 5, 6, -64, -191, -200,
	268, 104, 175, -236, -237, 4, -220, -215, -192, -202,
	-196, -199, 142, 56, 72, 75, 73, 76, 236, 278,
	49, 28, 102, 103, 192, 198, 252, 266, 267, 127,
	176, 128, 54, 119, 153, 92, 37, 39, 41, 42,
	50, 51, 81, 83, 84, 109, 137, 138, 139, 140,
	178, 206, 241, 250, 261, 262, 285, -221, -203, -204,
	-197, -198, -205, -97, -106, 310, -66, 317, -105, -173,
	-151, 85, -46, 215, -45, 21, 23, 93, 282, 99,
	245, 245, 215, 99, 322, 215, 215, 99, 263, 115,
	248, 318, -91, -66, -104, -214, 310, -183, -68, -66,
	-68, 237, -58, 30, 99, -48, 321, 47, 219, 99,
	-48, 321, 99, -48, 99, 318, 321, -182, 127, -69,
	30, -161, -189, -190, -192, -201, -195, -199, -200, 40,
	46, 45, 258, 233, 242, 38, 137, 138, 139, 140,
	241, 37, 206, 109, 92, 84, 83, 178, 42, 41,
	-203, -204, -197, -198, 81, 261, 262, 142, 39, 51,
	50, 285, 250, -95, -151, -257, -92, 255, 79, -67,
	-58, 310, -263, -257, 30, -95, 321, 321, 155, -73,
	161, 172, 124, -212, 85, -218, -211, -174, 9, 268,
	104, 183, -217, 8, 309, -210, -216, 5, 7, 308,
	-212, 85, 70, -219, 5, 4, -200, -174, 85, 158,
	319, -214, -213, -260, 112, -257, -213, -213, -213, -213,
	-213, -58, 155, -213, -213, 321, 321, -62, -48, 321,
	317, -80, 173, -242, 292, -80, 317, -59, 127, -58,
	-242, 173, -108, -128, -127, -129, -151, 22, -151, -153,
	-38, -38, -38, -83, -178, -151, -240, 30, -85, -58,
	-88, 321, 115, 10, 11, 55, 33, 308, 309, 310,
	311, 110, 312, 305, 306, 307, 304, 300, 301, 302,
	61, 162, 227, 13, 14, 15, 26, 185, 156, 297,
	129, 239, 314, 16, 17, 18, 144, 36, 130, -63,
	30, 4, -71, -151, -151, -151, -151, -151, 191, -101,
	-146, 315, -39, 317, -39, -151, -95, 7, -39, -160,
	315, -168, -151, -103, 317, 5, 5, 317, -245, 293,
	112, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 200, -209,
	288, -209, -209, -193, 317, -193, -194, 317, -193, 294,
	298, 317, -88, -66, 321, 318, 321, 263, -125, 63,
	57, -141, 127, 57, -224, -58, 63, -225, 53, 274,
	202, 114, -125, 63, -125, 63, 63, -182, 33, 33,
	263, -69, -58, 263, 263, -182, 5, 5, 115, 318,
	321, -143, 290, -131, -28, 317, 85, 30, -131, -98,
	-99, -185, -100, -66, 317, -58, -58, -69, -70, -93,
	-94, -94, -17, -187, 99, -20, -28, -24, -35, -14,
	318, 321, -87, 29, -121, 317, 295, 165, 82, 125,
	164, -122, 231, 318, 321, 263, 321, -92, -85, -145,
	-144, 115, 265, 318, -57, -56, -72, 205, 243, 216,
	234, 321, 8, 7, 7, 5, -214, -259, -58, -57,
	-56, -182, -75, -85, -76, -58, -142, -141, -226, -227,
	-224, 132, 274, 105, 30, 99, -55, 196, 30, 183,
	173, -51, 257, 99, -130, 225, 226, 321, -44, 31,
	89, 317, 321, 318, -143, -184, -90, -180, -182, -66,
	-39, -181, 317, -207, -189, -206, 182, 211, 212, 210,
	214, 213, -189, -93, 260, -151, -151, -151, -151, -151,
	-151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
	-151, -151, -151, -151, -151, -151, -151, 156, 129, 239,
	36, 130, -151, 263, -151, -151, -151, -151, 175, 173,
	268, 104, 275, 90, 179, -268, 253, 32, -158, -39,
	317, -172, 27, 244, 22, -214, -164, 225, 317, -146,
	-151, -147, -95, 318, 318, 321, -95, -163, 316, -160,
	-171, -170, 289, 318, -95, 286, 22, 90, 310, -121,
	7, -246, 107, 120, 317, 318, 318, -151, -151, -115,
	-208, -95, 4, 295, 165, 82, 125, 164, 231, -115,
	-116, -151, -95, -117, -152, -153, 308, 309, 314, 317,
	225, -118, -151, -95, -151, 43, 152, 264, -119, -151,
	115, -95, -151, -151, -151, -95, -95, -95, 317, 7,
	7, 260, 260, 7, -143, 318, -173, -45, -66, -58,
	-58, 173, -141, 127, -50, 173, -189, -58, 317, 317,
	147, 147, -58, -58, 127, -58, 127, -58, -58, -46,
	215, 317, 317, -58, 215, -58, -66, 215, -36, 126,
	248, 115, -66, -110, 220, -151, -110, -133, 183, -91,
	284, -58, 220, -89, 321, 115, 302, -91, -48, -48,
	-48, -182, -189, 315, 315, 7, 263, 263, 263, 263,
	317, -151, -259, -67, -259, -56, 272, 60, 205, -218,
	-121, 321, 318, 318, 321, -59, 132, -59, -28, -93,
	5, -28, -66, 99, -52, 95, -267, 302, -58, -178,
	-20, -58, -107, 120, -186, 321, 299, 68, -114, 146,
	168, 116, 154, 222, 135, -148, 322, 317, -177, 298,
	-39, -181, -180, 296, -151, -151, 263, -268, 253, -158,
	-151, 175, 268, 104, 275, 90, 179, 115, 317, -152,
	-152, -95, -155, 317, -95, 316, 325, 318, -151, 316,
	316, 321, -169, -170, 94, -151, -82, 321, -81, -151,
	-95, -95, 318, 318, -251, 190, 317, 317, -151, 30,
	321, 318, 115, 318, 318, -123, 197, 318, 10, 11,
	308, 309, 310, 311, 110, 312, 305, 306, 307, 304,
	300, 301, 302, 61, 162, 227, 13, 14, 15, 144,
	130, -152, -152, -152, -95, 317, 318, -156, -157, 115,
	112, 30, -119, -119, -119, 318, 115, -95, 321, 321,
	321, 318, 318, 318, 7, 318, 321, 318, 296, 296,
	318, -107, 263, 263, 99, 173, 281, -228, -225, -151,
	-85, 317, 317, -43, 93, 237, -126, 99, -48, 99,
	-48, 263, -125, 63, -95, -95, 263, 263, 115, 248,
	-97, 220, 62, 318, -97, -143, -99, -90, -173, 318,
	316, 7, 7, 318, 165, 125, 164, -122, 164, -122,
	-122, 7, -58, -77, 131, -142, 317, -59, 317, 317,
	-80, 317, -58, -53, 151, -267, 4, -242, 318, -159,
	122, 44, -180, 179, 146, 146, -180, -114, 146, -112,
	189, -112, -112, -177, -214, 323, -95, -176, -175, 30,
	-58, 187, 318, -151, -151, -152, -152, 115, 317, -151,
	-161, 26, 26, 318, -95, 318, 321, -147, -151, 318,
	-160, 96, -151, 259, 318, 286, -82, -82, -82, 5,
	-252, -58, 317, 290, -81, 318, -207, -189, -151, -156,
	-151, -207, -189, -152, -152, -152, -152, -152, -152, -152,
	-152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
	-152, -152, 90, 173, 179, -152, 321, -95, 318, -157,
	-156, -151, -151, -189, 318, 318, 318, -95, -151, -151,
	-151, 318, 7, -159, -58, -58, -141, 99, -229, 63,
	-230, 55, 105, 67, 173, 175, 274, 202, 53, 85,
	209, 318, 318, -85, -85, 173, 85, 173, 85, 78,
	270, -58, -58, -66, -58, -58, 318, 318, -58, -66,
	5, -97, -132, 317, 183, -28, -110, 302, 316, 316,
	318, 130, -84, -179, -58, -239, 317, -236, -237, -64,
	317, -85, -75, 30, -84, 183, -54, 150, -267, 5,
	-51, -248, 291, -151, -95, 254, -180, -180, -113, 280,
	183, 146, -180, -176, -150, -149, 113, 171, 318, -58,
	317, -177, 26, 26, -151, -161, 318, -151, -151, 318,
	-151, 316, -151, 5, -151, 318, 318, 318, -253, -58,
	-151, 318, 318, 318, -157, 115, 90, 179, 317, -151,
	318, 318, 321, 318, 318, 318, -248, -141, -58, -93,
	-58, 105, 127, 175, 147, 317, -152, -66, -140, -264,
	66, 251, 318, 318, 175, 175, -151, -189, -48, -48,
	263, 263, 91, -85, 63, -106, -39, 317, 193, 318,
	321, -65, -103, 55, -65, -151, 317, -84, 318, 318,
	-28, 318, -66, -267, 5, -52, -249, -250, -58, 260,
	-113, 317, -151, -180, 321, 324, 302, -177, 317, -85,
	-175, -151, -151, 318, 318, -82, -247, 195, 318, -152,
	115, 317, -161, 318, -151, -230, -59, 173, -151, -60,
	317, -77, 317, 209, -47, 55, -58, -58, 276, 174,
	318, -58, -58, -140, -179, -44, -93, -44, 318, -95,
	318, -77, -140, 317, 5, -53, 321, 30, -154, -64,
	-58, -85, -149, -214, -176, -85, 318, 318, -82, 44,
	-152, -161, 318, 318, 99, 318, -233, 163, -58, -85,
	-66, -42, 280, -93, 237, -143, 317, -77, -65, -82,
	-140, -77, -84, -54, -250, -252, 317, 318, 318, -254,
	204, 226, -95, 318, 105, -231, -234, -232, 183, 116,
	194, 240, 318, 318, -80, -151, -98, -85, -44, 318,
	-77, 318, -95, 318, -255, -256, 36, 271, 70, -151,
	-255, -58, -232, 183, -234, 183, 276, 88, -233, -143,
	318, -140, -82, -256, 199, 111, 225, 199, 111, -235,
	170, 219, 47, 237, -235, -231, -49, 47, 219, -77,
	318, 26, 20, 175, 85, -256,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 66, 67, 68, 69, 70, 71, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 373, -2,
	0, 139, 0, 321, 0, 321, 321, 325, 0, 403,
	287, 400, -2, 411, 0, 0, 0, 409, 387, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 852,
	880, 881, 882, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 0, 205, 894, 895, 896, 897, 898, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 105, 112, 113, 970, 115, 0, 122,
	123, 124, 126, 127, 128, 129, 130, 131, 132, 0,
	314, 991, 327, 135, 947, 995, 1064, 1010, 142, 152,
	0, 1070, -2, 156, 83, 185, 186, 187, 0, 189,
	207, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	204, 332, 320, 332, 317, 318, 319, 322, 0, 313,
	0, 402, 0, 0, 0, 0, 0, 286, -2, 383,
	384, -2, 0, 406, 406, 406, 0, 0, 384, 0,
	392, 974, 395, 863, 393, 0, 0, 408, 407, 0,
	388, 473, 0, 431, 0, 2, 0, 1049, 473, 0,
	1049, 855, 0, 0, 1049, 0, 0, 0, 0, 853,
	827, 825, 826, 0, 0, 0, 0, 0, 479, 73,
	1049, 52, 1049, 848, 52, 1049, 81, 52, 1049, 0,
	100, 102, 890, 891, 892, 893, 1075, 0, 0, 0,
	0, 110, 0, 114, 116, 0, 0, 0, 326, 136,
	1038, 138, 0, 141, 143, 144, 0, 0, 0, 0,
	0, 0, 155, 180, 181, 84, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 200, 201,
	0, 0, 315, 328, 329, 316, 0, 324, 52, 477,
	259, 1049, 399, 259, 884, 399, 1049, -2, 0, 379,
	418, 419, 0, 0, 0, 404, 405, 0, 0, 0,
	375, 376, 0, 394, 0, 0, 434, 840, 844, 845,
	574, 0, 0, 0, 0, 0, 0, 664, 666, 1043,
	1064, 0, 668, 669, 0, 671, 673, 674, 0, 677,
	678, 818, 852, 866, 867, 868, 869, 0, 0, 0,
	874, 875, 876, 718, 687, -2, -2, 864, 505, 506,
	507, 508, -2, 1077, 691, 693, 695, 696, 697, 698,
	0, 1027, 1044, 1045, 1060, 1061, 1069, 1073, 1074, 1049,
	1057, 1050, 1039, 1047, 1056, 924, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 889, 536, 537,
	542, 543, 545, 434, 432, 474, 475, 0, 0, 837,
	835, 836, 29, 310, 31, 0, 310, 310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 846, 828, 823, 824, 483, 0, 351,
	0, 0, 480, 0, 0, 75, 0, 50, 51, 0,
	77, 0, 0, 79, 0, 401, 0, 0, 1049, 0,
	401, 0, 776, 491, 492, 493, 494, 495, 571, 498,
	499, 500, 501, 502, 503, 504, 512, 513, 514, 515,
	516, 517, 518, 533, 0, 511, 511, 511, 524, 525,
	534, 535, 540, 541, 552, 553, 555, 557, 551, 551,
	551, 548, 549, 0, 774, 0, 119, 0, 919, 850,
	856, 857, 125, 0, 0, 0, 0, 0, 0, 147,
	167, 168, 169, 148, 150, 157, 159, 160, 161, 170,
	171, 172, 173, 276, 0, 278, 183, 184, 877, 0,
	149, 151, 153, 154, 174, 175, 0, 177, 178, 179,
	0, 85, 188, 190, 0, 206, 191, 192, 193, 194,
	195, 196, 199, 202, 203, 0, 0, 323, 279, 0,
	217, 0, 0, 282, 398, 0, 0, 0, 1049, 883,
	337, 0, 382, 416, 417, 420, 423, 424, 421, 574,
	389, 390, 391, 412, 413, 297, 396, 0, 0, 860,
	483, 0, 0, 0, 0, 0, 0, 753, 754, 755,
	756, 757, 758, 761, 762, 759, 760, 763, 764, 765,
	0, 0, 0, 766, 767, 768, 0, 0, 770, 0,
	772, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 843, 769, 579, 580, 581, 603, 604, 0, 665,
	829, 822, 667, 0, -2, 774, 0, 670, 675, 676,
	0, 0, 817, -2, 0, 871, 571, 0, 720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 520, 539,
	550, 547, 546, 522, 0, 521, 519, 0, 523, 0,
	0, 0, 483, 0, 0, 839, 0, 0, 0, 0,
	309, 33, 1049, 0, 54, 0, 0, 249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 854, 0, 0, 0, 62, 60, 0, 0,
	0, 362, 0, 362, 353, 0, 0, 0, 349, 365,
	366, 368, 369, 0, 0, 481, 74, 849, 52, 82,
	52, 52, 88, 101, 0, 103, 106, 107, 108, 109,
	104, 0, 484, 486, 496, 0, 558, 559, 560, 561,
	562, 563, 572, 111, 0, 0, 0, 120, 121, 858,
	859, 0, 0, 140, 145, 146, 333, 0, 164, 0,
	166, 0, 277, 879, 878, 571, 86, 208, 133, 330,
	331, 478, 0, 0, 216, 860, 218, 220, 221, 222,
	223, 884, 0, 884, 0, 0, 280, 0, 0, 0,
	0, 339, 345, 0, 422, 425, 426, 0, 415, 295,
	296, 401, 0, 862, 428, 841, 464, 435, 443, 473,
	450, 447, 0, 575, 487, 488, 526, 527, 528, 529,
	530, 531, 576, 577, 0, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, -2, -2, -2, 595, 596,
	597, -2, -2, -2, 601, 602, -2, 771, 773, 0,
	834, 0, -2, 0, 611, -2, -2, -2, 615, 0,
	618, 620, 622, 0, 0, 0, 0, 833, 632, 809,
	0, 0, 750, 751, 752, 842, 617, 0, 0, 830,
	821, 0, 0, -2, 672, 0, 0, 0, 780, 781,
	816, 812, 0, 679, 411, 0, 0, 0, 0, 872,
	0, 728, 0, 0, 0, 692, 694, 0, 0, 0,
	0, 784, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 774, 794, 0, 0, 635, 0, 0, 0, 0,
	1064, 0, 774, 802, 0, 0, 0, 0, 0, 774,
	0, 808, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 476, 838, 32, 299, 0,
	0, 0, 35, 1049, 43, 0, 231, 0, 0, 0,
	0, 0, 312, 44, 1049, 52, 1049, 52, 45, 30,
	310, 0, 0, 303, 0, 298, 301, 0, 59, 0,
	64, 0, 847, 72, 0, 482, 346, 347, 0, 0,
	355, 352, 0, 483, 0, 0, 0, 0, 76, 78,
	80, 0, 777, 0, 0, 0, 0, 0, 0, 0,
	0, 775, 117, 851, 118, 137, 162, 163, 165, 158,
	176, 0, 225, 258, 0, 0, 884, 0, 214, 259,
	281, 283, 0, 0, 341, 345, 0, 344, 399, 414,
	0, 861, 430, 0, 433, 0, 0, 0, 0, 0,
	0, 470, 470, 470, 468, 450, 0, 0, 462, 0,
	-2, 447, 0, 0, -2, -2, 0, 0, 0, 633,
	-2, 616, 619, 621, 623, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 819, 822, -2, 775, 778,
	779, 0, 0, 813, 0, 0, 0, 0, 410, 411,
	411, 411, 685, 0, 686, 0, 0, 0, 0, 0,
	0, 701, 0, 702, 703, 0, 0, 704, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 638, 639, 640, 0, 0, 705, 800, 801, 0,
	0, 0, 0, 0, 0, 710, 0, 807, 0, 0,
	0, 714, 715, 716, 0, 509, 0, 532, 554, 556,
	544, 430, 0, 0, 0, 0, 53, 229, 248, 0,
	0, 0, 0, 37, 0, 0, 0, 0, 41, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	361, 0, 360, 0, 350, 362, 367, 364, 370, 0,
	489, 0, 0, 497, 564, 565, 566, 567, 568, 569,
	570, 0, 134, 212, 0, 219, 0, 0, 0, 217,
	0, 0, 0, 343, 345, 0, 336, 337, 397, 722,
	0, 0, 436, 0, 0, 0, 0, 0, 0, 465,
	469, 466, 467, 462, 441, 0, 0, 446, 461, 0,
	460, 449, -2, 578, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 810, 0, 745, 0, 0, 821, -2,
	782, 811, 815, 0, 680, 0, 0, 0, 0, 873,
	726, 727, 731, 0, 0, 690, 0, 0, 783, 793,
	795, 636, 637, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, -2, -2, -2, 654, 655, 656, -2,
	-2, -2, 0, 0, 0, 796, 0, 0, 748, 798,
	799, 804, 805, 0, 707, 708, 709, 806, 0, 0,
	0, 538, 0, 722, 305, 307, 34, 0, 230, 0,
	233, 0, 0, 0, 0, 239, 240, 0, 0, 0,
	0, 250, 257, 0, 0, 0, 49, 0, 0, 311,
	0, 52, 52, 300, 0, 0, 210, 211, 304, 302,
	61, 348, 0, 0, 0, 354, 363, 0, 490, 485,
	573, 0, 0, 288, 294, 294, 0, 688, 689, 0,
	0, 0, 0, 0, 0, 0, 334, 345, 0, 338,
	339, 385, 0, 429, 427, 0, 452, 0, 454, 0,
	0, 0, 456, 444, 0, 439, 0, 438, 450, 458,
	0, 0, 0, 0, -2, 0, 626, -2, -2, 744,
	775, 820, 814, 870, 411, 681, 683, 684, 733, 730,
	0, 717, 699, 700, 792, 0, 0, 0, 0, 775,
	747, 706, 0, 712, 713, 510, 386, 36, 0, 234,
	235, 884, 0, 238, 241, 0, 243, 886, 225, 0,
	254, 255, 252, 0, 38, 39, 48, 56, 40, 46,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 257,
	0, 297, 865, 0, 297, 0, 0, 0, 247, 225,
	215, 257, 0, 0, 340, 341, 721, 723, 0, 0,
	453, 0, 472, 455, 0, 442, 0, 462, 0, 0,
	448, -2, -2, 627, 746, 0, 411, 0, 719, -2,
	0, 0, 0, 749, 0, 232, 236, 0, 0, 263,
	0, 251, 0, 0, 58, 0, 306, 308, 0, 357,
	483, 359, 0, 225, 289, 290, 293, 291, 294, 411,
	257, 213, 225, 0, 342, 343, 0, 0, 463, 0,
	0, 0, 440, 437, 445, 0, 459, 682, 736, 0,
	-2, 0, 662, 711, 0, 242, 268, 0, 0, 0,
	259, 42, 0, 55, 0, 358, 0, 245, 297, 0,
	225, 284, 0, 335, 724, 725, 0, 471, 457, 0,
	0, 0, 732, 663, 0, 244, 264, 265, 0, 260,
	261, 262, 885, 256, 263, 57, 483, 0, 292, 680,
	246, 257, 411, 729, 734, 737, -2, 1013, 916, 0,
	735, 237, 266, 0, 267, 0, 0, 0, 268, 356,
	228, 225, 0, 0, 739, 740, 741, 742, 743, 269,
	0, 272, 273, 0, 270, 253, 224, 226, 227, 285,
	0, 0, 271, 274, 275, 738,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 306, 3, 312, 307, 3,
	317, 318, 310, 308, 321, 309, 319, 311, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 325, 320,
	300, 302, 301, 3, 322, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 315, 3, 316, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 323, 304, 324, 314,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 303, 57643, 313, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:745
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:751
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:757
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:850
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:873
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:883
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:946
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:950
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Database: Name(sqlDollar[3].str), To: &StrVal{s: sqlDollar[5].str}, IncrementalFrom: sqlDollar[6].union.strVal()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Database: Name(sqlDollar[3].str), From: &StrVal{s: sqlDollar[5].str}}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 87:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{ /* SKIP DOC */
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			return unimplemented(sqllex)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{ /* SKIP DOC */
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1358
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			return unimplemented(sqllex)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = Low
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = Normal
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = High
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			return unimplemented(sqllex)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			return unimplemented(sqllex)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1477
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1679
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = DropDefault
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1897
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1908
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1918
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2028
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2032
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = Ascending
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = Descending
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2086
		{
			return unimplemented(sqllex)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2087
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2144
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.str = ""
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.str = ""
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2267
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2293
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return unimplemented(sqllex)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2365
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			return unimplemented(sqllex)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2598
		{
			return unimplemented(sqllex)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2601
		{
			return unimplemented(sqllex)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			return unimplemented(sqllex)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2613
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &From{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = true
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = false
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.str = astFullJoin
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.str = astLeftJoin
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.str = astRightJoin
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.str = astInnerJoin
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3103
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			return unimplemented(sqllex)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3183
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = nil
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3331
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3363
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3403
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			return unimplemented(sqllex)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			return unimplemented(sqllex)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			return unimplemented(sqllex)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			return unimplemented(sqllex)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			return unimplemented(sqllex)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			return unimplemented(sqllex)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			return unimplemented(sqllex)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3447
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			return unimplemented(sqllex)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3451
		{
			return unimplemented(sqllex)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3486
		{
			return unimplemented(sqllex)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			return unimplemented(sqllex)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3712
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3939
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3962
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3982
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			return unimplemented(sqllex)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			return unimplemented(sqllex)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			return unimplemented(sqllex)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			return unimplemented(sqllex)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4075
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4076
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4079
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4080
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = Window(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.str = ""
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4169
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4173
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = Any
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = Some
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = All
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = Plus
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = Minus
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = Mult
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = Div
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = FloorDiv
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = Mod
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = Bitand
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = Bitor
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = Bitxor
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = Bitxor
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = LT
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = GT
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = EQ
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = LE
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = GE
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = NE
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = Like
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = NotLike
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = ILike
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = NotILike
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4558
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4718
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4754
		{
			return unimplemented(sqllex)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = DNull
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.str = ""
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
