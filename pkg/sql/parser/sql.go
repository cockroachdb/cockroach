// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HIGH = 57483
const HOUR = 57484
const IMPORT = 57485
const INCREMENTAL = 57486
const IF = 57487
const IFNULL = 57488
const ILIKE = 57489
const IN = 57490
const INET = 57491
const INTERLEAVE = 57492
const INDEX = 57493
const INDEXES = 57494
const INITIALLY = 57495
const INNER = 57496
const INSERT = 57497
const INT = 57498
const INT2VECTOR = 57499
const INT2 = 57500
const INT4 = 57501
const INT8 = 57502
const INT64 = 57503
const INTEGER = 57504
const INTERSECT = 57505
const INTERVAL = 57506
const INTO = 57507
const IS = 57508
const ISOLATION = 57509
const JOB = 57510
const JOBS = 57511
const JOIN = 57512
const JSON = 57513
const JSONB = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LESS = 57524
const LEVEL = 57525
const LIKE = 57526
const LIMIT = 57527
const LIST = 57528
const LOCAL = 57529
const LOCALTIME = 57530
const LOCALTIMESTAMP = 57531
const LOW = 57532
const LSHIFT = 57533
const MATCH = 57534
const MAXVALUE = 57535
const MINUTE = 57536
const MONTH = 57537
const NAN = 57538
const NAME = 57539
const NAMES = 57540
const NATURAL = 57541
const NEXT = 57542
const NO = 57543
const NO_INDEX_JOIN = 57544
const NORMAL = 57545
const NOT = 57546
const NOTHING = 57547
const NULL = 57548
const NULLIF = 57549
const NULLS = 57550
const NUMERIC = 57551
const OF = 57552
const OFF = 57553
const OFFSET = 57554
const OID = 57555
const ON = 57556
const ONLY = 57557
const OPTIONS = 57558
const OR = 57559
const ORDER = 57560
const ORDINALITY = 57561
const OUT = 57562
const OUTER = 57563
const OVER = 57564
const OVERLAPS = 57565
const OVERLAY = 57566
const PARENT = 57567
const PARTIAL = 57568
const PARTITION = 57569
const PASSWORD = 57570
const PAUSE = 57571
const PLACING = 57572
const PLANS = 57573
const POSITION = 57574
const PRECEDING = 57575
const PRECISION = 57576
const PREPARE = 57577
const PRIMARY = 57578
const PRIORITY = 57579
const QUERIES = 57580
const QUERY = 57581
const RANGE = 57582
const READ = 57583
const REAL = 57584
const RECURSIVE = 57585
const REF = 57586
const REFERENCES = 57587
const REGCLASS = 57588
const REGPROC = 57589
const REGPROCEDURE = 57590
const REGNAMESPACE = 57591
const REGTYPE = 57592
const REMOVE_PATH = 57593
const RENAME = 57594
const REPEATABLE = 57595
const RELEASE = 57596
const RESET = 57597
const RESTORE = 57598
const RESTRICT = 57599
const RESUME = 57600
const RETURNING = 57601
const REVOKE = 57602
const RIGHT = 57603
const ROLLBACK = 57604
const ROLLUP = 57605
const ROW = 57606
const ROWS = 57607
const RSHIFT = 57608
const SAVEPOINT = 57609
const SCATTER = 57610
const SCRUB = 57611
const SEARCH = 57612
const SECOND = 57613
const SELECT = 57614
const SEQUENCES = 57615
const SERIAL = 57616
const SERIALIZABLE = 57617
const SESSION = 57618
const SESSIONS = 57619
const SESSION_USER = 57620
const SET = 57621
const SETTING = 57622
const SETTINGS = 57623
const SHOW = 57624
const SIMILAR = 57625
const SIMPLE = 57626
const SMALLINT = 57627
const SMALLSERIAL = 57628
const SNAPSHOT = 57629
const SOME = 57630
const SOME_EXISTENCE = 57631
const SPLIT = 57632
const SQL = 57633
const START = 57634
const STATUS = 57635
const STDIN = 57636
const STRICT = 57637
const STRING = 57638
const STORE = 57639
const STORING = 57640
const SUBSTRING = 57641
const SYMMETRIC = 57642
const SYNTAX = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6931

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 731,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	151, 580,
	-2, 0,
	-1, 53,
	97, 731,
	155, 731,
	330, 731,
	331, 731,
	-2, 0,
	-1, 64,
	1, 693,
	214, 693,
	259, 693,
	375, 693,
	377, 693,
	379, 693,
	380, 693,
	-2, 706,
	-1, 98,
	4, 733,
	20, 733,
	21, 733,
	24, 733,
	29, 733,
	34, 733,
	35, 733,
	36, 733,
	37, 733,
	38, 733,
	39, 733,
	40, 733,
	41, 733,
	42, 733,
	43, 733,
	45, 733,
	46, 733,
	47, 733,
	48, 733,
	49, 733,
	52, 733,
	53, 733,
	54, 733,
	56, 733,
	57, 733,
	61, 733,
	62, 733,
	63, 733,
	65, 733,
	66, 733,
	67, 733,
	68, 733,
	70, 733,
	72, 733,
	73, 733,
	76, 733,
	77, 733,
	78, 733,
	86, 733,
	87, 733,
	88, 733,
	89, 733,
	90, 733,
	91, 733,
	92, 733,
	93, 733,
	95, 733,
	97, 733,
	99, 733,
	102, 733,
	103, 733,
	105, 733,
	109, 733,
	110, 733,
	111, 733,
	112, 733,
	113, 733,
	114, 733,
	115, 733,
	123, 733,
	124, 733,
	125, 733,
	126, 733,
	127, 733,
	129, 733,
	131, 733,
	136, 733,
	137, 733,
	139, 733,
	141, 733,
	142, 733,
	143, 733,
	144, 733,
	145, 733,
	146, 733,
	149, 733,
	150, 733,
	152, 733,
	155, 733,
	156, 733,
	157, 733,
	158, 733,
	159, 733,
	160, 733,
	161, 733,
	162, 733,
	164, 733,
	167, 733,
	168, 733,
	169, 733,
	171, 733,
	172, 733,
	173, 733,
	174, 733,
	175, 733,
	177, 733,
	178, 733,
	180, 733,
	182, 733,
	183, 733,
	186, 733,
	187, 733,
	190, 733,
	192, 733,
	194, 733,
	195, 733,
	196, 733,
	197, 733,
	198, 733,
	200, 733,
	201, 733,
	202, 733,
	203, 733,
	207, 733,
	208, 733,
	209, 733,
	210, 733,
	211, 733,
	213, 733,
	215, 733,
	216, 733,
	219, 733,
	220, 733,
	222, 733,
	224, 733,
	225, 733,
	226, 733,
	227, 733,
	228, 733,
	229, 733,
	231, 733,
	232, 733,
	233, 733,
	234, 733,
	235, 733,
	237, 733,
	238, 733,
	239, 733,
	240, 733,
	241, 733,
	242, 733,
	243, 733,
	244, 733,
	246, 733,
	247, 733,
	248, 733,
	249, 733,
	250, 733,
	252, 733,
	253, 733,
	254, 733,
	255, 733,
	256, 733,
	257, 733,
	258, 733,
	260, 733,
	262, 733,
	263, 733,
	264, 733,
	265, 733,
	267, 733,
	268, 733,
	269, 733,
	270, 733,
	271, 733,
	273, 733,
	274, 733,
	275, 733,
	276, 733,
	277, 733,
	279, 733,
	280, 733,
	281, 733,
	282, 733,
	284, 733,
	285, 733,
	286, 733,
	287, 733,
	290, 733,
	291, 733,
	292, 733,
	293, 733,
	294, 733,
	295, 733,
	296, 733,
	297, 733,
	298, 733,
	299, 733,
	301, 733,
	302, 733,
	304, 733,
	305, 733,
	306, 733,
	307, 733,
	308, 733,
	309, 733,
	310, 733,
	311, 733,
	313, 733,
	314, 733,
	315, 733,
	318, 733,
	319, 733,
	320, 733,
	321, 733,
	323, 733,
	324, 733,
	325, 733,
	326, 733,
	329, 733,
	330, 733,
	331, 733,
	332, 733,
	334, 733,
	336, 733,
	337, 733,
	338, 733,
	339, 733,
	340, 733,
	341, 733,
	344, 733,
	349, 733,
	350, 733,
	351, 733,
	352, 733,
	353, 733,
	-2, 0,
	-1, 116,
	1, 696,
	214, 696,
	259, 696,
	375, 696,
	377, 696,
	379, 696,
	380, 696,
	-2, 705,
	-1, 121,
	1, 631,
	167, 631,
	237, 631,
	241, 631,
	379, 631,
	380, 631,
	-2, 0,
	-1, 123,
	1, 631,
	379, 631,
	380, 631,
	-2, 0,
	-1, 124,
	1, 631,
	379, 631,
	380, 631,
	-2, 0,
	-1, 125,
	1, 635,
	379, 635,
	380, 635,
	-2, 0,
	-1, 146,
	4, 739,
	5, 739,
	6, 739,
	7, 739,
	8, 739,
	9, 739,
	20, 739,
	21, 739,
	24, 739,
	29, 739,
	30, 739,
	34, 739,
	35, 739,
	36, 739,
	37, 739,
	38, 739,
	39, 739,
	40, 739,
	41, 739,
	42, 739,
	43, 739,
	45, 739,
	46, 739,
	47, 739,
	48, 739,
	49, 739,
	50, 739,
	51, 739,
	52, 739,
	53, 739,
	54, 739,
	56, 739,
	57, 739,
	59, 739,
	61, 739,
	62, 739,
	63, 739,
	65, 739,
	66, 739,
	67, 739,
	68, 739,
	70, 739,
	72, 739,
	73, 739,
	75, 739,
	76, 739,
	77, 739,
	78, 739,
	80, 739,
	81, 739,
	82, 739,
	84, 739,
	85, 739,
	86, 739,
	87, 739,
	88, 739,
	89, 739,
	90, 739,
	91, 739,
	92, 739,
	93, 739,
	94, 739,
	95, 739,
	97, 739,
	99, 739,
	102, 739,
	103, 739,
	105, 739,
	109, 739,
	110, 739,
	111, 739,
	112, 739,
	113, 739,
	114, 739,
	115, 739,
	116, 739,
	117, 739,
	123, 739,
	124, 739,
	125, 739,
	126, 739,
	127, 739,
	129, 739,
	131, 739,
	134, 739,
	136, 739,
	137, 739,
	139, 739,
	141, 739,
	142, 739,
	143, 739,
	144, 739,
	145, 739,
	146, 739,
	147, 739,
	149, 739,
	150, 739,
	152, 739,
	154, 739,
	155, 739,
	156, 739,
	157, 739,
	158, 739,
	159, 739,
	160, 739,
	161, 739,
	162, 739,
	164, 739,
	166, 739,
	167, 739,
	168, 739,
	169, 739,
	170, 739,
	171, 739,
	172, 739,
	173, 739,
	174, 739,
	175, 739,
	177, 739,
	178, 739,
	180, 739,
	181, 739,
	182, 739,
	183, 739,
	184, 739,
	186, 739,
	187, 739,
	190, 739,
	192, 739,
	193, 739,
	194, 739,
	195, 739,
	196, 739,
	197, 739,
	198, 739,
	199, 739,
	200, 739,
	201, 739,
	202, 739,
	203, 739,
	204, 739,
	206, 739,
	207, 739,
	208, 739,
	209, 739,
	210, 739,
	211, 739,
	213, 739,
	216, 739,
	219, 739,
	220, 739,
	221, 739,
	222, 739,
	223, 739,
	224, 739,
	225, 739,
	226, 739,
	227, 739,
	228, 739,
	229, 739,
	231, 739,
	232, 739,
	233, 739,
	234, 739,
	235, 739,
	237, 739,
	238, 739,
	239, 739,
	240, 739,
	241, 739,
	242, 739,
	243, 739,
	244, 739,
	246, 739,
	247, 739,
	248, 739,
	249, 739,
	250, 739,
	252, 739,
	253, 739,
	254, 739,
	255, 739,
	256, 739,
	257, 739,
	258, 739,
	260, 739,
	261, 739,
	262, 739,
	263, 739,
	264, 739,
	265, 739,
	267, 739,
	268, 739,
	269, 739,
	270, 739,
	271, 739,
	273, 739,
	274, 739,
	275, 739,
	276, 739,
	277, 739,
	278, 739,
	279, 739,
	280, 739,
	281, 739,
	282, 739,
	283, 739,
	284, 739,
	285, 739,
	286, 739,
	287, 739,
	290, 739,
	291, 739,
	292, 739,
	293, 739,
	294, 739,
	295, 739,
	296, 739,
	297, 739,
	298, 739,
	299, 739,
	301, 739,
	302, 739,
	304, 739,
	305, 739,
	306, 739,
	307, 739,
	308, 739,
	309, 739,
	310, 739,
	311, 739,
	313, 739,
	314, 739,
	315, 739,
	318, 739,
	319, 739,
	320, 739,
	321, 739,
	322, 739,
	323, 739,
	324, 739,
	325, 739,
	326, 739,
	329, 739,
	330, 739,
	331, 739,
	332, 739,
	333, 739,
	334, 739,
	336, 739,
	337, 739,
	338, 739,
	339, 739,
	340, 739,
	341, 739,
	344, 739,
	349, 739,
	350, 739,
	351, 739,
	352, 739,
	353, 739,
	354, 739,
	362, 739,
	367, 739,
	368, 739,
	369, 739,
	376, 739,
	382, 739,
	-2, 0,
	-1, 149,
	1, 54,
	380, 54,
	-2, 731,
	-1, 517,
	133, 1349,
	316, 1349,
	359, 1349,
	378, 1349,
	-2, 0,
	-1, 518,
	133, 1296,
	316, 1296,
	359, 1296,
	378, 1296,
	-2, 0,
	-1, 520,
	133, 1408,
	316, 1408,
	359, 1408,
	378, 1408,
	-2, 0,
	-1, 522,
	133, 1432,
	316, 1432,
	359, 1432,
	378, 1432,
	-2, 0,
	-1, 529,
	133, 1354,
	316, 1354,
	359, 1354,
	378, 1354,
	-2, 345,
	-1, 556,
	1, 425,
	375, 425,
	377, 425,
	379, 425,
	380, 425,
	-2, 0,
	-1, 557,
	1, 479,
	130, 479,
	375, 479,
	377, 479,
	379, 479,
	380, 479,
	-2, 0,
	-1, 563,
	1, 439,
	375, 439,
	377, 439,
	379, 439,
	380, 439,
	-2, 0,
	-1, 565,
	1, 443,
	375, 443,
	377, 443,
	379, 443,
	380, 443,
	-2, 0,
	-1, 568,
	1, 451,
	375, 451,
	377, 451,
	379, 451,
	380, 451,
	-2, 0,
	-1, 569,
	1, 456,
	375, 456,
	377, 456,
	379, 456,
	380, 456,
	-2, 0,
	-1, 573,
	1, 468,
	375, 468,
	377, 468,
	379, 468,
	380, 468,
	-2, 0,
	-1, 596,
	118, 741,
	130, 741,
	185, 741,
	212, 741,
	-2, 700,
	-1, 605,
	118, 740,
	130, 740,
	185, 740,
	212, 740,
	-2, 697,
	-1, 661,
	376, 1274,
	-2, 1267,
	-1, 662,
	376, 1275,
	-2, 1268,
	-1, 668,
	5, 925,
	376, 925,
	-2, 1484,
	-1, 693,
	5, 884,
	-2, 1453,
	-1, 694,
	5, 919,
	376, 919,
	-2, 1455,
	-1, 695,
	5, 894,
	-2, 1456,
	-1, 696,
	5, 893,
	-2, 1457,
	-1, 697,
	5, 919,
	376, 919,
	-2, 1460,
	-1, 698,
	5, 919,
	376, 919,
	-2, 1461,
	-1, 699,
	5, 920,
	-2, 1464,
	-1, 700,
	5, 876,
	-2, 1465,
	-1, 701,
	5, 876,
	-2, 1466,
	-1, 702,
	5, 901,
	-2, 1470,
	-1, 703,
	5, 886,
	-2, 1471,
	-1, 704,
	5, 887,
	-2, 1472,
	-1, 705,
	5, 877,
	-2, 1478,
	-1, 706,
	5, 878,
	-2, 1479,
	-1, 707,
	5, 879,
	-2, 1480,
	-1, 708,
	5, 880,
	-2, 1481,
	-1, 709,
	5, 881,
	-2, 1482,
	-1, 710,
	5, 882,
	-2, 1483,
	-1, 711,
	5, 876,
	-2, 1490,
	-1, 712,
	5, 885,
	-2, 1495,
	-1, 713,
	5, 883,
	-2, 1498,
	-1, 714,
	5, 917,
	376, 917,
	-2, 1500,
	-1, 715,
	5, 921,
	-2, 1503,
	-1, 716,
	5, 923,
	-2, 1504,
	-1, 717,
	5, 916,
	376, 916,
	-2, 1509,
	-1, 912,
	228, 729,
	-2, 573,
	-1, 917,
	214, 1271,
	-2, 0,
	-1, 953,
	1, 223,
	375, 223,
	377, 223,
	379, 223,
	380, 223,
	-2, 704,
	-1, 956,
	4, 1508,
	10, 1508,
	11, 1508,
	13, 1508,
	14, 1508,
	15, 1508,
	16, 1508,
	17, 1508,
	18, 1508,
	20, 1508,
	21, 1508,
	23, 1508,
	24, 1508,
	27, 1508,
	29, 1508,
	31, 1508,
	34, 1508,
	35, 1508,
	36, 1508,
	37, 1508,
	38, 1508,
	39, 1508,
	40, 1508,
	41, 1508,
	42, 1508,
	43, 1508,
	45, 1508,
	46, 1508,
	47, 1508,
	48, 1508,
	49, 1508,
	52, 1508,
	53, 1508,
	54, 1508,
	56, 1508,
	57, 1508,
	58, 1508,
	61, 1508,
	62, 1508,
	63, 1508,
	64, 1508,
	65, 1508,
	66, 1508,
	67, 1508,
	68, 1508,
	70, 1508,
	71, 1508,
	72, 1508,
	73, 1508,
	75, 1508,
	76, 1508,
	77, 1508,
	78, 1508,
	86, 1508,
	87, 1508,
	88, 1508,
	89, 1508,
	90, 1508,
	91, 1508,
	92, 1508,
	93, 1508,
	95, 1508,
	97, 1508,
	99, 1508,
	102, 1508,
	103, 1508,
	105, 1508,
	109, 1508,
	110, 1508,
	111, 1508,
	112, 1508,
	113, 1508,
	114, 1508,
	115, 1508,
	119, 1508,
	120, 1508,
	121, 1508,
	122, 1508,
	123, 1508,
	124, 1508,
	125, 1508,
	126, 1508,
	127, 1508,
	128, 1508,
	129, 1508,
	131, 1508,
	134, 1508,
	136, 1508,
	137, 1508,
	139, 1508,
	141, 1508,
	142, 1508,
	143, 1508,
	144, 1508,
	145, 1508,
	146, 1508,
	147, 1508,
	148, 1508,
	149, 1508,
	150, 1508,
	152, 1508,
	154, 1508,
	155, 1508,
	156, 1508,
	157, 1508,
	158, 1508,
	159, 1508,
	160, 1508,
	161, 1508,
	162, 1508,
	164, 1508,
	166, 1508,
	167, 1508,
	168, 1508,
	169, 1508,
	170, 1508,
	171, 1508,
	172, 1508,
	173, 1508,
	174, 1508,
	175, 1508,
	177, 1508,
	178, 1508,
	180, 1508,
	181, 1508,
	182, 1508,
	183, 1508,
	184, 1508,
	186, 1508,
	187, 1508,
	190, 1508,
	191, 1508,
	192, 1508,
	194, 1508,
	195, 1508,
	196, 1508,
	197, 1508,
	198, 1508,
	199, 1508,
	200, 1508,
	201, 1508,
	202, 1508,
	203, 1508,
	207, 1508,
	208, 1508,
	209, 1508,
	210, 1508,
	211, 1508,
	213, 1508,
	216, 1508,
	217, 1508,
	219, 1508,
	220, 1508,
	222, 1508,
	224, 1508,
	225, 1508,
	226, 1508,
	227, 1508,
	228, 1508,
	229, 1508,
	231, 1508,
	232, 1508,
	233, 1508,
	234, 1508,
	235, 1508,
	237, 1508,
	238, 1508,
	239, 1508,
	240, 1508,
	241, 1508,
	242, 1508,
	243, 1508,
	244, 1508,
	246, 1508,
	247, 1508,
	248, 1508,
	249, 1508,
	250, 1508,
	251, 1508,
	252, 1508,
	253, 1508,
	254, 1508,
	255, 1508,
	256, 1508,
	257, 1508,
	258, 1508,
	260, 1508,
	261, 1508,
	262, 1508,
	263, 1508,
	264, 1508,
	265, 1508,
	266, 1508,
	267, 1508,
	268, 1508,
	269, 1508,
	270, 1508,
	271, 1508,
	273, 1508,
	274, 1508,
	275, 1508,
	276, 1508,
	277, 1508,
	279, 1508,
	280, 1508,
	281, 1508,
	282, 1508,
	283, 1508,
	284, 1508,
	285, 1508,
	286, 1508,
	287, 1508,
	289, 1508,
	290, 1508,
	291, 1508,
	292, 1508,
	293, 1508,
	294, 1508,
	295, 1508,
	296, 1508,
	297, 1508,
	298, 1508,
	299, 1508,
	301, 1508,
	302, 1508,
	304, 1508,
	305, 1508,
	306, 1508,
	307, 1508,
	308, 1508,
	309, 1508,
	310, 1508,
	311, 1508,
	313, 1508,
	314, 1508,
	315, 1508,
	318, 1508,
	319, 1508,
	320, 1508,
	321, 1508,
	323, 1508,
	324, 1508,
	325, 1508,
	326, 1508,
	329, 1508,
	330, 1508,
	331, 1508,
	332, 1508,
	334, 1508,
	336, 1508,
	337, 1508,
	338, 1508,
	339, 1508,
	340, 1508,
	341, 1508,
	344, 1508,
	349, 1508,
	350, 1508,
	351, 1508,
	352, 1508,
	353, 1508,
	354, 1508,
	355, 1508,
	357, 1508,
	358, 1508,
	359, 1508,
	360, 1508,
	361, 1508,
	362, 1508,
	364, 1508,
	365, 1508,
	366, 1508,
	367, 1508,
	368, 1508,
	369, 1508,
	370, 1508,
	371, 1508,
	372, 1508,
	374, 1508,
	377, 1508,
	378, 1508,
	381, 1508,
	382, 1508,
	-2, 0,
	-1, 972,
	133, 1408,
	316, 1408,
	359, 1408,
	378, 1408,
	-2, 0,
	-1, 989,
	133, 1432,
	316, 1432,
	359, 1432,
	378, 1432,
	-2, 0,
	-1, 990,
	167, 643,
	237, 643,
	241, 643,
	-2, 333,
	-1, 1057,
	118, 740,
	130, 740,
	185, 740,
	212, 740,
	-2, 701,
	-1, 1141,
	108, 706,
	118, 706,
	130, 706,
	163, 706,
	185, 706,
	212, 706,
	218, 706,
	327, 706,
	-2, 1055,
	-1, 1151,
	376, 1251,
	-2, 1239,
	-1, 1169,
	377, 1168,
	-2, 0,
	-1, 1193,
	167, 643,
	237, 643,
	241, 643,
	-2, 638,
	-1, 1221,
	377, 1168,
	-2, 0,
	-1, 1225,
	108, 706,
	118, 706,
	130, 706,
	163, 706,
	185, 706,
	212, 706,
	218, 706,
	327, 706,
	-2, 807,
	-1, 1369,
	167, 643,
	237, 643,
	241, 643,
	-2, 335,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 960,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 961,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 962,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 963,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 964,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 965,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 966,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 967,
	-1, 1493,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 976,
	-1, 1494,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 977,
	-1, 1495,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	289, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 978,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 983,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 985,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 989,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 990,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 991,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 992,
	-1, 1578,
	133, 1179,
	376, 1274,
	-2, 1267,
	-1, 1579,
	133, 1180,
	-2, 1449,
	-1, 1580,
	133, 1181,
	-2, 1353,
	-1, 1581,
	133, 1182,
	-2, 1314,
	-1, 1582,
	133, 1183,
	-2, 1331,
	-1, 1583,
	133, 1184,
	-2, 1352,
	-1, 1584,
	133, 1185,
	-2, 1405,
	-1, 1661,
	1, 808,
	75, 808,
	108, 808,
	118, 808,
	130, 808,
	134, 808,
	138, 808,
	140, 808,
	154, 808,
	163, 808,
	170, 808,
	181, 808,
	185, 808,
	199, 808,
	212, 808,
	214, 808,
	218, 808,
	259, 808,
	261, 808,
	327, 808,
	335, 808,
	346, 808,
	347, 808,
	356, 808,
	375, 808,
	377, 808,
	379, 808,
	380, 808,
	381, 808,
	-2, 807,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 984,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 986,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 987,
	-1, 1838,
	223, 1139,
	-2, 1141,
	-1, 2014,
	228, 729,
	-2, 573,
	-1, 2072,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 988,
	-1, 2077,
	166, 0,
	-2, 1004,
	-1, 2086,
	223, 1140,
	-2, 1142,
	-1, 2128,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1032,
	-1, 2129,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1033,
	-1, 2130,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1034,
	-1, 2134,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1038,
	-1, 2135,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1039,
	-1, 2136,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1040,
	-1, 2273,
	166, 0,
	-2, 1005,
	-1, 2276,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 1008,
	-1, 2277,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 1010,
	-1, 2401,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 1009,
	-1, 2402,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	147, 0,
	148, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 1011,
	-1, 2409,
	166, 0,
	-2, 1041,
	-1, 2486,
	166, 0,
	-2, 1042,
	-1, 2568,
	37, 0,
	147, 0,
	184, 0,
	283, 0,
	354, 0,
	362, 0,
	-2, 1452,
	-1, 2653,
	376, 1520,
	-2, 513,
}

const sqlPrivate = 57344

const sqlLast = 44344

var sqlAct = [...]int{

	662, 2650, 2576, 2567, 2636, 2617, 2369, 2368, 1738, 2051,
	2222, 2651, 2566, 1267, 2491, 2105, 2379, 1808, 2341, 660,
	789, 2233, 1275, 2327, 2255, 606, 1730, 659, 946, 2257,
	2634, 1521, 2435, 1310, 2018, 2262, 2187, 2540, 906, 186,
	2415, 804, 2188, 186, 2026, 2577, 652, 186, 1713, 2578,
	1656, 1708, 1953, 186, 655, 2020, 638, 1727, 186, 186,
	1932, 2249, 186, 949, 2307, 1219, 186, 1739, 1904, 1202,
	1270, 1269, 1712, 1940, 186, 1674, 720, 2158, 1702, 719,
	1657, 1903, 1451, 1849, 1665, 1533, 1804, 453, 1147, 993,
	1263, 614, 110, 1534, 1394, 1231, 1065, 1223, 1456, 1787,
	1233, 528, 1203, 1542, 632, 1607, 1518, 471, 26, 1558,
	1434, 63, 1390, 942, 992, 771, 1432, 450, 1179, 1183,
	1552, 1710, 1288, 791, 954, 932, 1709, 939, 1732, 1643,
	1228, 1716, 508, 774, 1210, 754, 1630, 1574, 1136, 1066,
	116, 186, 186, 630, 1393, 110, 177, 654, 117, 186,
	1435, 1193, 929, 525, 1433, 486, 521, 1282, 182, 752,
	1192, 2342, 550, 1070, 2172, 1837, 2370, 2173, 2370, 1290,
	610, 1290, 186, 186, 794, 186, 186, 806, 1731, 610,
	2666, 186, 186, 1290, 2659, 2665, 2658, 2613, 2612, 2659,
	2659, 1258, 1258, 2611, 2593, 2588, 2587, 1258, 2340, 1637,
	1637, 605, 2584, 2564, 2563, 500, 1258, 1300, 1300, 2036,
	2535, 1220, 2530, 2035, 1764, 620, 1258, 2529, 2525, 2517,
	2488, 2393, 1258, 2340, 1764, 1311, 2070, 2466, 2463, 2461,
	611, 2340, 1258, 2340, 2446, 2445, 2423, 787, 1258, 2340,
	1258, 110, 2420, 2403, 2364, 2361, 1258, 1764, 1637, 1637,
	2339, 597, 2320, 1703, 2340, 2671, 1258, 26, 2275, 596,
	2248, 2243, 1764, 2168, 1707, 1707, 2081, 2169, 2045, 2006,
	1637, 1929, 2007, 1258, 1632, 1637, 1928, 1921, 2161, 768,
	1258, 1922, 615, 1254, 2657, 1637, 1919, 779, 783, 801,
	1637, 1918, 1917, 187, 1841, 1637, 1637, 2536, 1300, 37,
	1842, 756, 1081, 1082, 1703, 718, 2397, 2393, 894, 1774,
	38, 121, 1763, 1637, 1753, 1706, 1764, 1636, 1637, 1707,
	2667, 1637, 2647, 41, 1081, 1082, 1084, 1303, 758, 1300,
	759, 1304, 2161, 1637, 1631, 2061, 1663, 123, 2141, 2083,
	2007, 1807, 1848, 1785, 1372, 1197, 1537, 42, 1084, 45,
	1083, 1535, 1555, 1258, 892, 974, 1103, 149, 2343, 971,
	970, 969, 968, 967, 966, 1391, 1735, 965, 964, 963,
	46, 146, 1083, 962, 48, 961, 960, 1291, 51, 1291,
	959, 124, 958, 957, 760, 52, 757, 115, 53, 602,
	146, 1291, 601, 600, 667, 599, 595, 594, 593, 592,
	591, 590, 148, 1556, 589, 588, 587, 583, 722, 582,
	54, 1106, 1107, 1108, 1109, 581, 548, 547, 55, 546,
	1089, 148, 186, 794, 186, 545, 186, 544, 543, 186,
	542, 541, 540, 1874, 1875, 186, 1892, 1893, 1894, 147,
	539, 538, 1089, 537, 186, 186, 186, 186, 794, 536,
	2272, 535, 534, 794, 533, 1557, 1554, 2035, 147, 532,
	531, 516, 515, 514, 513, 613, 140, 795, 1081, 1082,
	807, 512, 441, 141, 419, 118, 1874, 1875, 898, 796,
	412, 186, 808, 1104, 411, 169, 912, 1889, 168, 1760,
	167, 166, 1084, 165, 118, 186, 164, 1948, 163, 1571,
	38, 1296, 162, 1289, 56, 1104, 161, 160, 159, 158,
	57, 186, 157, 41, 156, 1425, 1083, 1081, 1082, 155,
	1569, 186, 1631, 910, 154, 915, 153, 152, 151, 65,
	119, 58, 1559, 59, 150, 60, 1567, 125, 1224, 1761,
	1397, 1084, 61, 1110, 146, 935, 935, 146, 1565, 1005,
	931, 1880, 2635, 794, 73, 1874, 1875, 94, 1105, 2640,
	1077, 2638, 2583, 2565, 611, 1083, 2550, 122, 1762, 2545,
	936, 2483, 2464, 2398, 2306, 148, 955, 481, 148, 905,
	1105, 2386, 2305, 2301, 2300, 186, 1089, 2293, 2292, 1895,
	2291, 2287, 2286, 2285, 1880, 2284, 975, 2278, 98, 2254,
	2155, 2150, 2149, 2148, 1874, 1875, 2091, 120, 55, 2005,
	1960, 1956, 147, 1553, 1890, 147, 1008, 478, 2009, 1926,
	140, 1923, 1058, 140, 1003, 1911, 1902, 141, 38, 1873,
	141, 1870, 1869, 1867, 1854, 1089, 1853, 1769, 1529, 1838,
	1661, 41, 1081, 1082, 1077, 1307, 767, 1155, 1734, 1104,
	1148, 118, 1139, 2660, 4, 1076, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 1222, 1084, 477, 2049, 903,
	2645, 2625, 1221, 1880, 990, 2624, 2494, 987, 898, 1274,
	1057, 1085, 1086, 1087, 1088, 1090, 1091, 2107, 2555, 1891,
	1083, 2554, 2553, 2520, 56, 2512, 479, 2511, 2502, 2500,
	1056, 2656, 2476, 52, 2475, 481, 53, 1523, 2432, 2411,
	2394, 2373, 2360, 2346, 1006, 2298, 795, 2231, 2228, 2227,
	119, 58, 1880, 59, 1105, 1392, 1803, 2225, 796, 2196,
	2195, 2176, 2164, 2076, 1802, 146, 55, 146, 1081, 1082,
	1995, 795, 1987, 2385, 480, 1973, 795, 94, 611, 1972,
	1530, 1958, 186, 796, 186, 597, 1927, 1062, 796, 1901,
	1089, 1063, 1084, 596, 1863, 1862, 148, 1859, 148, 1834,
	1829, 1184, 1073, 1074, 1187, 1648, 186, 186, 1619, 1078,
	1886, 1887, 1888, 1563, 1266, 1890, 1083, 1885, 1883, 1884,
	1876, 1877, 1878, 1879, 1881, 1882, 1201, 1200, 1191, 1766,
	1177, 1176, 1175, 147, 1174, 147, 1173, 1172, 1171, 1151,
	1170, 140, 1169, 140, 1168, 1167, 1181, 1182, 141, 1166,
	141, 1185, 56, 1104, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 1188, 1206, 1876, 1877, 1878, 1879, 1881, 1882, 118,
	1165, 118, 1222, 1973, 1164, 1163, 795, 1162, 119, 58,
	1161, 59, 1160, 1159, 1152, 1140, 1089, 1139, 796, 986,
	1891, 978, 110, 951, 2392, 146, 2280, 1946, 2253, 1789,
	2171, 2167, 480, 1840, 1570, 94, 1087, 1088, 1090, 1091,
	1649, 2021, 1081, 1082, 1196, 1148, 2047, 611, 1218, 1137,
	1874, 1875, 794, 186, 1773, 1568, 148, 2396, 1105, 806,
	1002, 2395, 2389, 1194, 1224, 186, 1084, 2174, 1241, 1226,
	1703, 1566, 904, 1198, 1878, 1879, 1881, 1882, 186, 1104,
	2037, 1054, 1998, 1564, 186, 1992, 186, 2399, 186, 1273,
	1083, 1189, 186, 147, 2052, 1986, 1190, 1772, 1925, 1555,
	1259, 140, 1924, 1813, 1265, 1061, 1378, 1308, 141, 1431,
	999, 1157, 1271, 1991, 1797, 1256, 1245, 2416, 1885, 1883,
	1884, 1876, 1877, 1878, 1879, 1881, 1882, 1731, 2108, 118,
	1543, 1180, 1048, 186, 186, 2643, 2642, 1845, 2031, 2608,
	794, 2548, 186, 442, 2183, 186, 1757, 447, 1143, 1279,
	1556, 170, 422, 173, 1105, 1436, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 174, 806, 2354, 1364, 2524,
	2609, 186, 1049, 1775, 1675, 420, 186, 2457, 1154, 2058,
	766, 186, 186, 749, 186, 2456, 186, 2454, 186, 2453,
	186, 2216, 1234, 1317, 747, 1235, 2048, 2212, 745, 931,
	743, 186, 1557, 1554, 721, 2180, 431, 1398, 740, 186,
	186, 1257, 1038, 2179, 1387, 1352, 1858, 1857, 1351, 1293,
	186, 1856, 1295, 1855, 1242, 1816, 1298, 1756, 175, 446,
	1382, 1381, 1698, 1391, 1388, 1694, 1281, 174, 1689, 1667,
	186, 1505, 1379, 1000, 806, 1284, 1239, 1195, 2207, 891,
	2367, 1678, 1623, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 425, 1622, 1466, 432, 1240, 2654, 1728, 446, 1423,
	664, 585, 1399, 1667, 1236, 495, 1059, 1252, 1207, 1559,
	1305, 2220, 1666, 2221, 2002, 1465, 1001, 110, 1365, 987,
	1306, 1261, 445, 1251, 2523, 1402, 1317, 1317, 1366, 1422,
	175, 1369, 1778, 1767, 1520, 1234, 1395, 1383, 1235, 604,
	1520, 2600, 1032, 1413, 1780, 1249, 2437, 176, 1352, 1352,
	1385, 1351, 1351, 1438, 425, 1222, 1527, 1406, 2561, 1403,
	1080, 445, 1525, 603, 1250, 1407, 1781, 1408, 1424, 1409,
	985, 1410, 1285, 1411, 2064, 795, 604, 1559, 1779, 2028,
	1265, 1033, 807, 2029, 2101, 1677, 186, 796, 186, 2627,
	1553, 186, 1417, 1419, 808, 1437, 1997, 1874, 1875, 1426,
	1989, 597, 186, 1427, 597, 597, 1081, 1082, 1543, 1447,
	171, 806, 1448, 1449, 186, 1011, 1243, 1236, 186, 176,
	1358, 186, 2198, 1455, 2580, 186, 1290, 1540, 2028, 186,
	1084, 2505, 1538, 2608, 1091, 186, 2059, 794, 2620, 1178,
	173, 611, 1882, 1386, 186, 806, 611, 2213, 624, 186,
	172, 1889, 1651, 1602, 1083, 1874, 1875, 186, 1892, 1893,
	1894, 1559, 1053, 795, 1531, 186, 1060, 1370, 1528, 434,
	433, 2532, 2057, 1668, 444, 796, 186, 1676, 186, 487,
	186, 1421, 171, 186, 2637, 186, 1700, 186, 186, 807,
	186, 794, 794, 1302, 1585, 794, 2533, 1457, 1464, 186,
	1692, 808, 492, 1247, 447, 1654, 421, 1650, 488, 1889,
	1679, 1681, 173, 444, 443, 1880, 2581, 1628, 1625, 1722,
	1752, 2513, 172, 1626, 1089, 2205, 2063, 751, 1367, 611,
	750, 426, 1640, 1635, 1645, 1646, 422, 1641, 1686, 1237,
	489, 741, 1592, 447, 1684, 741, 423, 742, 1696, 1234,
	1690, 1226, 1235, 443, 1751, 741, 1671, 1699, 1037, 1664,
	491, 2599, 609, 1316, 1805, 1806, 1984, 807, 2635, 421,
	996, 2438, 440, 1880, 2582, 2514, 1209, 1354, 1890, 808,
	1733, 1745, 1733, 991, 935, 110, 935, 1759, 806, 2065,
	2618, 110, 435, 1691, 426, 2098, 186, 2628, 2199, 422,
	1748, 1818, 586, 1737, 1401, 413, 494, 1519, 1746, 423,
	1747, 1754, 186, 186, 186, 1749, 186, 608, 955, 1755,
	1758, 2407, 1526, 1392, 1389, 2370, 2460, 1134, 1768, 1786,
	1502, 1236, 996, 1770, 1291, 1213, 1890, 1861, 1079, 1644,
	997, 1660, 1213, 1248, 998, 186, 2619, 2099, 984, 610,
	2062, 1012, 1237, 1891, 2267, 1216, 1185, 2579, 1188, 1069,
	2607, 1047, 1216, 2605, 2378, 2598, 1316, 1316, 2621, 1182,
	1181, 1211, 610, 1725, 1019, 981, 1776, 490, 1642, 2137,
	1354, 1354, 1214, 973, 2296, 1208, 1143, 2001, 2335, 1214,
	1013, 2448, 2447, 1010, 1545, 2633, 110, 2430, 2350, 2497,
	1212, 2182, 997, 2353, 807, 1954, 998, 1577, 1577, 1590,
	2352, 1891, 2097, 1610, 1969, 1942, 808, 1614, 1615, 1617,
	1965, 576, 1790, 1726, 1559, 1819, 1792, 2336, 1796, 1377,
	795, 1794, 2541, 1795, 1280, 493, 1272, 1268, 807, 619,
	1500, 1503, 796, 1629, 1516, 1801, 1416, 908, 996, 907,
	808, 1885, 1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882,
	1514, 1847, 1215, 1085, 1086, 1087, 1088, 1090, 1091, 1215,
	1443, 414, 1007, 617, 576, 576, 1955, 1499, 1375, 1373,
	1232, 607, 2646, 2138, 795, 795, 1068, 2234, 795, 2139,
	2380, 1376, 619, 619, 2297, 2431, 796, 796, 179, 1817,
	796, 436, 1886, 1887, 1888, 577, 622, 2632, 2349, 1885,
	1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882, 997, 1833,
	2351, 1975, 998, 186, 806, 611, 1044, 618, 1068, 186,
	186, 1974, 1943, 186, 1811, 1844, 1941, 2331, 186, 2332,
	1510, 186, 415, 437, 1639, 1638, 1444, 1930, 1511, 186,
	1512, 996, 1936, 1067, 1517, 186, 186, 186, 577, 577,
	503, 186, 497, 608, 186, 1935, 1237, 2263, 2223, 2334,
	186, 186, 186, 186, 186, 438, 1501, 439, 2337, 928,
	186, 807, 794, 917, 2371, 186, 1020, 926, 3, 186,
	2000, 1950, 1209, 808, 2308, 1067, 1045, 2159, 186, 611,
	1908, 1909, 1910, 1562, 476, 34, 1041, 1068, 186, 1966,
	186, 2410, 186, 794, 794, 578, 186, 1317, 1945, 1064,
	186, 2295, 1069, 2219, 1931, 186, 1905, 186, 2075, 2003,
	2008, 896, 2010, 897, 186, 475, 33, 1949, 1030, 1352,
	1028, 1868, 1351, 474, 30, 1990, 1828, 186, 794, 1959,
	1026, 1213, 1046, 1934, 1961, 1771, 1317, 473, 69, 1938,
	1939, 2333, 186, 1944, 472, 68, 1513, 1705, 578, 578,
	1983, 1216, 2033, 1515, 1067, 1024, 2013, 2014, 1352, 893,
	2428, 1351, 1697, 1985, 1022, 1016, 1688, 1211, 469, 21,
	1052, 1561, 1051, 1994, 979, 579, 1906, 924, 1214, 1798,
	1064, 1069, 186, 470, 22, 468, 28, 2575, 2429, 1317,
	1414, 2044, 1405, 2012, 1158, 2030, 1212, 2024, 2011, 467,
	19, 1255, 2015, 2538, 2038, 2324, 502, 2203, 496, 2201,
	580, 1352, 1036, 2181, 1351, 2017, 611, 1040, 777, 465,
	18, 739, 927, 466, 17, 2088, 2043, 616, 579, 579,
	925, 1729, 186, 2078, 34, 2056, 1723, 2054, 2055, 2039,
	2040, 2053, 2041, 2042, 1721, 1832, 2093, 2094, 2095, 1029,
	2060, 1027, 1835, 1301, 1317, 457, 14, 2066, 1215, 1299,
	2068, 1025, 2019, 580, 580, 33, 458, 15, 1970, 1851,
	1852, 2471, 1071, 30, 1297, 1294, 1352, 464, 50, 1351,
	899, 901, 1292, 1253, 2609, 1246, 1023, 69, 1244, 1238,
	1317, 1317, 2391, 2084, 68, 1021, 1015, 807, 2082, 1317,
	1317, 2087, 456, 49, 463, 11, 1809, 1970, 923, 808,
	462, 43, 1352, 1352, 186, 1351, 1351, 2109, 21, 1900,
	186, 1352, 1352, 2114, 1351, 1351, 1610, 1610, 1610, 186,
	186, 1913, 1317, 22, 2111, 28, 2100, 2102, 2103, 2390,
	1035, 1396, 2143, 2116, 2250, 744, 746, 2473, 1683, 19,
	1072, 2242, 1667, 1701, 1352, 795, 2144, 1351, 455, 44,
	2046, 1682, 976, 2193, 1693, 2142, 1667, 796, 980, 18,
	2170, 2192, 1810, 17, 1687, 1680, 1429, 1430, 186, 2218,
	186, 2160, 1799, 2163, 2162, 2157, 795, 795, 186, 110,
	2194, 794, 482, 1353, 2507, 622, 2229, 2343, 796, 796,
	763, 1014, 2226, 2209, 2485, 14, 186, 186, 2459, 2209,
	2178, 2236, 2309, 2208, 1826, 2209, 15, 2185, 1075, 2214,
	764, 795, 1695, 186, 2175, 2217, 1685, 50, 2537, 2616,
	1824, 2244, 186, 796, 806, 186, 186, 1316, 2238, 2206,
	2376, 806, 2239, 1736, 2166, 2235, 1724, 1720, 1627, 1368,
	2224, 1354, 49, 504, 11, 2177, 2230, 2269, 1309, 1313,
	43, 1457, 2112, 2237, 461, 7, 2631, 2246, 2240, 2422,
	1457, 2117, 2202, 2245, 2204, 2264, 1316, 2251, 186, 2314,
	2274, 2252, 2270, 460, 6, 2156, 2335, 1874, 1875, 2328,
	1354, 1129, 1130, 1131, 1132, 1133, 1353, 1353, 765, 2104,
	2326, 1317, 1142, 2147, 1783, 2330, 1081, 1082, 44, 2050,
	1821, 1951, 1150, 459, 36, 2282, 454, 35, 1081, 1082,
	1822, 1081, 1082, 1352, 1827, 2336, 1351, 1783, 1782, 1316,
	1084, 1920, 186, 1784, 1624, 186, 1621, 1934, 1620, 1551,
	1145, 1043, 2096, 1354, 1042, 806, 186, 186, 2329, 1155,
	186, 186, 186, 2294, 1083, 1153, 1050, 1039, 1034, 1031,
	1017, 983, 1313, 1313, 1371, 584, 1083, 186, 2436, 485,
	1404, 1018, 186, 1947, 186, 1647, 186, 186, 186, 2344,
	2531, 2288, 1860, 186, 794, 2193, 2316, 186, 2490, 2406,
	794, 1560, 1156, 2192, 1316, 2315, 2318, 2311, 186, 186,
	2323, 47, 2347, 2313, 2190, 641, 794, 2325, 1354, 2184,
	1715, 1714, 2194, 809, 7, 2193, 1380, 663, 2366, 1576,
	1458, 2193, 738, 2192, 665, 1314, 2382, 1204, 1204, 2192,
	1316, 1316, 2372, 6, 2151, 2331, 1823, 2332, 2377, 1316,
	1316, 666, 2194, 1825, 1354, 1354, 1315, 2363, 2194, 1186,
	2375, 653, 1312, 1354, 1354, 952, 1874, 1875, 2400, 2388,
	2381, 2312, 2310, 36, 1740, 2383, 35, 2334, 1384, 1524,
	1541, 1843, 1316, 2319, 1149, 633, 2337, 645, 644, 2405,
	1539, 977, 1952, 2027, 795, 2384, 1354, 1442, 1800, 1439,
	2023, 2200, 424, 2348, 1871, 186, 796, 186, 1446, 806,
	186, 950, 2412, 1599, 1591, 1587, 1055, 1135, 186, 2211,
	1741, 1004, 2034, 1765, 806, 1199, 1450, 2215, 762, 761,
	2644, 2387, 2419, 1317, 2374, 1374, 1777, 807, 1128, 2440,
	2193, 1127, 2442, 748, 807, 2499, 995, 994, 2192, 808,
	2426, 1968, 2626, 2424, 2506, 1352, 808, 2197, 1351, 186,
	2547, 1265, 794, 2439, 145, 2441, 186, 2194, 142, 2333,
	144, 143, 1999, 2193, 186, 186, 794, 794, 72, 32,
	186, 2192, 2469, 31, 1880, 93, 92, 91, 90, 1317,
	2462, 2421, 89, 88, 2209, 87, 86, 186, 2470, 2478,
	2194, 2474, 186, 2477, 2458, 85, 84, 1593, 83, 186,
	82, 1352, 2484, 2481, 1351, 81, 2468, 80, 79, 78,
	77, 76, 75, 74, 526, 2487, 2501, 523, 71, 2495,
	70, 2496, 29, 24, 186, 186, 97, 23, 67, 2479,
	2480, 186, 2503, 66, 27, 16, 1317, 1890, 807, 794,
	2504, 1316, 2493, 10, 186, 2518, 794, 794, 2451, 2452,
	808, 2510, 20, 114, 2465, 1354, 113, 112, 1352, 2521,
	111, 1351, 2522, 13, 2516, 12, 622, 622, 109, 2519,
	108, 186, 107, 186, 2527, 2528, 186, 795, 806, 106,
	105, 9, 2472, 795, 8, 96, 2261, 62, 25, 796,
	40, 2544, 39, 95, 136, 796, 2482, 2556, 133, 795,
	2558, 135, 1874, 1875, 132, 134, 104, 186, 138, 2560,
	2193, 796, 1891, 137, 130, 128, 2572, 129, 2192, 2549,
	2557, 2573, 2562, 2574, 186, 186, 186, 2559, 131, 127,
	2585, 126, 186, 1440, 139, 1445, 103, 2194, 2592, 102,
	2594, 1452, 2597, 2595, 2596, 101, 186, 1874, 1875, 100,
	2450, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 2623, 1504, 2622, 1506, 1507, 1508, 1509,
	2630, 2615, 807, 2610, 2606, 2629, 2614, 2604, 99, 2543,
	5, 2, 1, 1532, 808, 0, 806, 807, 806, 0,
	1142, 1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882, 808,
	1880, 2648, 2649, 0, 0, 0, 0, 0, 2661, 1572,
	1573, 2418, 2664, 1589, 0, 1601, 1603, 1608, 1611, 1612,
	1613, 2663, 2670, 2668, 2669, 795, 2672, 2639, 2655, 2641,
	2589, 2590, 2591, 0, 0, 647, 0, 796, 2662, 795,
	795, 0, 0, 1316, 0, 1880, 0, 0, 2444, 505,
	0, 796, 796, 483, 0, 0, 0, 1354, 0, 0,
	0, 0, 2455, 1890, 0, 0, 0, 1353, 0, 484,
	0, 0, 0, 484, 183, 0, 0, 0, 417, 0,
	0, 0, 427, 0, 0, 0, 0, 0, 448, 0,
	0, 0, 0, 498, 183, 0, 0, 506, 0, 1316,
	0, 511, 0, 0, 0, 0, 1353, 0, 1890, 530,
	0, 0, 795, 1354, 0, 0, 0, 0, 0, 795,
	795, 487, 0, 0, 796, 487, 0, 1593, 1593, 0,
	0, 796, 796, 1313, 0, 0, 0, 0, 1891, 0,
	0, 0, 0, 0, 492, 0, 0, 0, 492, 0,
	488, 807, 0, 0, 488, 0, 1316, 0, 0, 1353,
	0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
	1354, 0, 1313, 0, 0, 0, 755, 755, 0, 0,
	0, 0, 489, 1891, 417, 0, 489, 2534, 637, 0,
	0, 0, 0, 1874, 1875, 0, 1892, 1893, 1894, 0,
	0, 0, 491, 1593, 1593, 1593, 491, 417, 417, 0,
	799, 417, 0, 2551, 2552, 0, 183, 895, 0, 0,
	0, 1830, 1831, 0, 1353, 1313, 0, 0, 0, 0,
	0, 416, 0, 0, 0, 0, 0, 0, 1884, 1876,
	1877, 1878, 1879, 1881, 1882, 0, 0, 1889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1353, 0, 0, 0, 0, 0, 0, 0, 1353,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 807, 0, 0, 1876, 1877, 1878, 1879, 1881, 1882,
	1313, 808, 0, 808, 0, 0, 0, 1897, 1898, 1899,
	0, 0, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 1880, 0, 0, 0, 0, 0, 0, 0, 490,
	0, 0, 0, 490, 0, 0, 1313, 1313, 0, 0,
	0, 1896, 0, 0, 0, 1313, 1313, 772, 0, 0,
	0, 0, 0, 0, 0, 1814, 1815, 0, 0, 1895,
	0, 1820, 0, 0, 0, 0, 0, 0, 0, 0,
	781, 785, 0, 0, 803, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 1890, 0, 0, 493, 0, 0,
	0, 493, 0, 1839, 0, 0, 0, 0, 0, 1846,
	0, 0, 1850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1593, 1593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 0, 1891,
	1608, 1608, 1608, 0, 0, 0, 0, 530, 0, 530,
	0, 918, 0, 0, 921, 0, 0, 0, 0, 0,
	417, 1353, 0, 0, 0, 0, 0, 1204, 0, 530,
	530, 417, 943, 1937, 0, 1593, 1593, 1593, 1593, 1593,
	1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
	1593, 1593, 1593, 1593, 0, 1593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 0, 0,
	2073, 2074, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	1886, 1887, 1888, 0, 0, 0, 982, 1885, 1883, 1884,
	1876, 1877, 1878, 1879, 1881, 1882, 530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2025, 0, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 0, 2140,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 622, 622,
	417, 0, 0, 785, 41, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2067, 0,
	477, 0, 0, 1452, 0, 0, 0, 0, 0, 2071,
	0, 0, 2072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2077, 0, 0, 0, 0, 479,
	0, 0, 0, 2085, 0, 0, 52, 0, 481, 53,
	0, 2089, 0, 1353, 1937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2113, 0, 642, 64, 2115, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 2145, 2146, 0, 0, 0, 0, 0, 0, 1313,
	2152, 2153, 2154, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 785, 0, 1081, 1082, 0, 0, 0,
	0, 1121, 1122, 1123, 0, 0, 0, 511, 2165, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1125, 0, 0, 56, 1353, 0, 0, 0,
	0, 417, 417, 0, 0, 1313, 0, 0, 2186, 0,
	0, 0, 0, 1083, 0, 0, 0, 598, 0, 1103,
	0, 119, 58, 0, 59, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 1412, 0, 0, 480, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 773, 64, 0, 0, 0,
	0, 0, 1313, 0, 1204, 0, 0, 1217, 0, 148,
	0, 0, 0, 2247, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 1089, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1593, 38, 0, 0, 0, 0,
	0, 0, 1118, 1126, 0, 0, 147, 0, 41, 0,
	0, 2273, 0, 0, 140, 2276, 2277, 0, 183, 2279,
	0, 141, 0, 0, 0, 0, 2281, 0, 2283, 0,
	417, 0, 0, 0, 477, 1593, 0, 0, 0, 1116,
	0, 0, 118, 1278, 2290, 0, 1104, 0, 0, 417,
	0, 417, 0, 417, 772, 1229, 0, 1286, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 0, 0,
	52, 0, 481, 53, 0, 0, 0, 2299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2409, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 183,
	0, 0, 0, 55, 0, 0, 1110, 183, 0, 1593,
	530, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 38, 0, 0, 0, 0, 2345, 0, 2433,
	0, 0, 0, 0, 0, 41, 530, 0, 1119, 0,
	0, 530, 0, 0, 0, 0, 183, 530, 0, 530,
	0, 530, 0, 530, 0, 530, 0, 0, 0, 0,
	0, 477, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 530, 530, 0, 0, 0, 0,
	0, 0, 0, 1264, 0, 417, 0, 0, 0, 56,
	479, 0, 0, 0, 0, 0, 0, 52, 0, 481,
	53, 0, 785, 2486, 1283, 530, 1283, 2401, 2402, 1117,
	0, 0, 0, 0, 0, 119, 58, 1120, 59, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	55, 0, 146, 0, 0, 0, 0, 0, 2414, 480,
	0, 0, 94, 0, 2417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 148, 0, 0, 0, 0, 1874, 1875,
	0, 1892, 1893, 1894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2271, 0, 0, 2449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 1874, 1875, 0, 1892, 1893, 1894, 0, 140, 0,
	0, 0, 0, 0, 0, 141, 56, 0, 2080, 0,
	0, 511, 1889, 755, 0, 0, 895, 1081, 1082, 0,
	1111, 1112, 1113, 1121, 1122, 1123, 118, 417, 1428, 0,
	1099, 0, 119, 58, 1114, 59, 0, 0, 0, 1659,
	0, 1084, 0, 417, 1125, 1889, 417, 0, 0, 146,
	1672, 0, 0, 0, 417, 0, 480, 0, 2498, 94,
	417, 0, 0, 0, 0, 1083, 0, 0, 0, 417,
	0, 1103, 0, 0, 1704, 0, 1880, 0, 1100, 0,
	148, 0, 1711, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 417, 0, 1744, 0, 530, 0, 0, 530, 1880,
	530, 598, 417, 417, 1895, 1750, 0, 147, 0, 0,
	0, 0, 0, 0, 1672, 140, 1106, 1107, 1108, 1109,
	0, 1138, 141, 1141, 0, 1089, 0, 0, 0, 1890,
	1146, 0, 0, 0, 0, 0, 0, 1895, 0, 0,
	0, 0, 0, 452, 1118, 1126, 0, 0, 2571, 2571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1890, 1124, 2586, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 2571, 0, 772, 0, 1104, 1662,
	0, 0, 0, 0, 0, 0, 0, 785, 0, 0,
	0, 0, 478, 785, 1891, 0, 0, 0, 0, 0,
	0, 1788, 803, 38, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 417, 417, 417,
	0, 417, 2571, 0, 0, 0, 0, 1891, 0, 0,
	0, 0, 0, 0, 1742, 0, 0, 0, 1110, 0,
	0, 0, 477, 0, 0, 803, 803, 64, 0, 0,
	417, 2652, 1225, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 2652, 0, 0, 2652, 2652, 0, 0, 0,
	1119, 479, 0, 0, 0, 0, 1098, 0, 52, 0,
	481, 53, 0, 0, 0, 1886, 1887, 1888, 0, 0,
	0, 0, 1885, 1883, 1884, 1876, 1877, 1878, 1879, 1881,
	1882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 0, 0, 0, 1886, 1887,
	1888, 0, 0, 0, 0, 1885, 1883, 1884, 1876, 1877,
	1878, 1879, 1881, 1882, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 0, 1095, 1096, 1102, 1101, 1097, 1120,
	0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 2302, 0,
	1791, 803, 1793, 0, 785, 1874, 1875, 0, 1892, 1893,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 0, 0, 56, 0, 0,
	0, 0, 0, 1812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1874, 1875, 0, 1892,
	1893, 1894, 0, 119, 58, 0, 59, 0, 417, 1889,
	0, 0, 0, 0, 417, 417, 0, 0, 417, 0,
	146, 0, 0, 1659, 0, 0, 1659, 480, 0, 0,
	94, 0, 0, 0, 1957, 0, 0, 0, 0, 0,
	417, 1963, 1964, 0, 0, 0, 1672, 0, 0, 1971,
	1889, 148, 0, 0, 0, 1976, 1977, 1979, 1981, 1982,
	0, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	1993, 0, 0, 1880, 1996, 0, 0, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 147, 0,
	0, 0, 64, 1278, 0, 1278, 140, 530, 0, 0,
	0, 417, 0, 141, 0, 2022, 0, 0, 0, 0,
	417, 1895, 2032, 0, 1880, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 118, 0, 0, 598, 0, 0,
	598, 598, 1788, 0, 0, 0, 1890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1788, 0, 0,
	0, 0, 1895, 0, 0, 0, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 0, 0, 772, 772, 0,
	0, 772, 0, 0, 0, 0, 0, 1890, 0, 0,
	0, 0, 0, 1522, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 1962, 0, 0, 612, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1891, 0, 0, 0, 0, 0, 0, 1988, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2004, 2106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1891, 0, 2016, 0, 0, 0, 0, 0,
	0, 0, 0, 1264, 0, 0, 0, 0, 773, 0,
	0, 0, 1264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 1886, 1887, 1888, 0, 0, 64, 0, 1885,
	1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882, 0, 417,
	0, 0, 0, 0, 0, 1659, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 1659, 0, 0, 0, 64,
	2069, 64, 0, 1886, 1887, 1888, 0, 0, 0, 2189,
	1885, 1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882, 0,
	64, 0, 2210, 0, 0, 0, 64, 0, 2210, 0,
	0, 0, 0, 0, 2210, 0, 0, 0, 0, 0,
	0, 0, 0, 1672, 0, 1278, 0, 0, 0, 0,
	0, 0, 0, 2232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 417, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2258, 0,
	0, 0, 0, 0, 0, 0, 0, 2260, 0, 0,
	2265, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1659, 895, 0, 0, 2321, 2322, 1672, 0, 0,
	1522, 0, 0, 0, 1742, 772, 0, 0, 0, 0,
	0, 2189, 895, 0, 0, 0, 0, 2355, 0, 2356,
	1141, 417, 2358, 2359, 0, 0, 0, 0, 417, 0,
	0, 0, 2365, 0, 2266, 0, 0, 0, 0, 0,
	0, 2189, 0, 895, 1711, 0, 0, 2189, 0, 1081,
	1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 0, 0,
	0, 0, 1099, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 1083, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 773,
	772, 0, 0, 0, 0, 773, 773, 0, 0, 773,
	1672, 0, 2425, 0, 0, 2427, 0, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 2189, 0, 1106, 1107,
	1108, 1109, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 2357, 0, 0, 0, 0, 0,
	0, 2362, 64, 2210, 0, 0, 1118, 1126, 0, 2189,
	0, 0, 64, 0, 417, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 1124, 0, 0, 0, 2258,
	2258, 0, 0, 0, 0, 895, 0, 64, 0, 0,
	0, 64, 0, 1116, 0, 0, 0, 0, 0, 0,
	1104, 612, 2492, 0, 0, 0, 0, 1659, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2508,
	2509, 0, 0, 0, 0, 0, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2526,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 2434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2542, 0, 895, 0,
	0, 417, 1119, 0, 0, 0, 1081, 1082, 1098, 1111,
	1112, 1113, 1121, 1122, 1123, 0, 2189, 0, 0, 1099,
	0, 0, 0, 1114, 0, 0, 0, 2467, 0, 0,
	1084, 0, 2492, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 895,
	895, 895, 0, 0, 1083, 0, 0, 417, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 2603, 0, 1117, 0, 0, 1095, 1096, 1102, 1101,
	1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	1916, 0, 0, 1332, 64, 0, 0, 0, 0, 2515,
	0, 0, 0, 0, 0, 1106, 1107, 1108, 1109, 0,
	773, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1329, 1359,
	1318, 1350, 1349, 1118, 1126, 1320, 1319, 0, 0, 0,
	0, 1361, 1360, 0, 2546, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 1104, 0, 1355,
	0, 1347, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	1742, 0, 0, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 1342, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 1328, 0,
	0, 0, 0, 0, 0, 1333, 1331, 1334, 1335, 1336,
	1337, 1338, 1105, 1358, 0, 0, 0, 0, 0, 0,
	1322, 1321, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	0, 1341, 0, 0, 0, 1461, 1459, 1460, 1463, 1462,
	1117, 0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0,
	1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 1356, 1357, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 810, 0,
	190, 811, 812, 813, 814, 352, 815, 816, 817, 818,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	819, 195, 359, 360, 196, 197, 820, 821, 361, 362,
	363, 822, 198, 364, 823, 797, 824, 199, 200, 201,
	0, 203, 204, 205, 202, 825, 206, 0, 207, 208,
	826, 723, 209, 210, 211, 827, 828, 830, 829, 831,
	832, 833, 212, 213, 418, 214, 365, 215, 366, 367,
	834, 216, 835, 217, 836, 218, 837, 838, 219, 220,
	839, 221, 840, 64, 841, 368, 222, 224, 223, 225,
	369, 370, 842, 724, 843, 0, 1522, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 844, 229, 845, 846,
	725, 847, 230, 374, 848, 375, 849, 231, 232, 233,
	234, 376, 377, 727, 850, 378, 238, 851, 235, 852,
	726, 236, 379, 237, 380, 381, 382, 383, 384, 853,
	385, 854, 728, 239, 240, 241, 729, 386, 387, 242,
	243, 244, 855, 246, 245, 856, 388, 730, 247, 248,
	731, 857, 249, 250, 858, 859, 251, 0, 252, 732,
	253, 254, 256, 389, 255, 733, 257, 258, 260, 259,
	860, 861, 862, 390, 261, 391, 262, 263, 863, 264,
	864, 865, 265, 866, 867, 266, 392, 734, 267, 735,
	393, 268, 269, 270, 271, 272, 868, 273, 394, 274,
	395, 275, 869, 276, 277, 278, 279, 280, 396, 281,
	282, 870, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 871, 295, 736, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 872, 308,
	398, 307, 309, 310, 873, 311, 299, 300, 312, 737,
	313, 399, 400, 314, 874, 0, 321, 315, 316, 301,
	317, 320, 401, 318, 319, 402, 875, 322, 323, 876,
	324, 325, 326, 327, 328, 329, 330, 331, 877, 403,
	404, 405, 878, 879, 332, 333, 406, 407, 880, 334,
	335, 336, 337, 881, 882, 338, 339, 340, 341, 883,
	342, 884, 408, 343, 344, 345, 409, 410, 885, 886,
	346, 887, 888, 889, 890, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1652, 0, 0, 0, 0, 0, 188, 189, 810, 1653,
	190, 811, 812, 813, 814, 352, 815, 816, 817, 818,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	819, 195, 359, 360, 196, 197, 820, 821, 361, 362,
	363, 822, 198, 364, 823, 797, 824, 199, 200, 201,
	0, 203, 204, 205, 202, 825, 206, 0, 207, 208,
	826, 723, 209, 210, 211, 827, 828, 830, 829, 831,
	832, 833, 212, 213, 418, 214, 365, 215, 366, 367,
	834, 216, 835, 217, 836, 218, 837, 838, 219, 220,
	839, 221, 840, 0, 841, 368, 222, 224, 223, 225,
	369, 370, 842, 724, 843, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 844, 229, 845, 846,
	725, 847, 230, 374, 848, 375, 849, 231, 232, 233,
	234, 376, 377, 727, 850, 378, 238, 851, 235, 852,
	726, 236, 379, 237, 380, 381, 382, 383, 384, 853,
	385, 854, 728, 239, 240, 241, 729, 386, 387, 242,
	243, 244, 855, 246, 245, 856, 388, 730, 247, 248,
	731, 857, 249, 250, 858, 859, 251, 0, 252, 732,
	253, 254, 256, 389, 255, 733, 257, 258, 260, 259,
	860, 861, 862, 390, 261, 391, 262, 263, 863, 264,
	864, 865, 265, 866, 867, 266, 392, 734, 267, 735,
	393, 268, 269, 270, 271, 272, 868, 273, 394, 274,
	395, 275, 869, 276, 277, 278, 279, 280, 396, 281,
	282, 870, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 871, 295, 736, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 872, 308,
	398, 307, 309, 310, 873, 311, 299, 300, 312, 737,
	313, 399, 400, 314, 874, 0, 321, 315, 316, 301,
	317, 320, 401, 318, 319, 402, 875, 322, 323, 876,
	324, 325, 326, 327, 328, 329, 330, 331, 877, 403,
	404, 405, 878, 879, 332, 333, 406, 407, 880, 334,
	335, 336, 337, 881, 882, 338, 339, 340, 341, 883,
	342, 884, 408, 343, 344, 345, 409, 410, 885, 886,
	346, 887, 888, 889, 890, 347, 348, 349, 350, 351,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 810,
	2317, 190, 811, 812, 813, 814, 352, 815, 816, 817,
	818, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 819, 195, 359, 360, 196, 197, 820, 821, 361,
	362, 363, 822, 198, 364, 823, 797, 824, 199, 200,
	201, 0, 203, 204, 205, 202, 825, 206, 0, 207,
	208, 826, 723, 209, 210, 211, 827, 828, 830, 829,
	831, 832, 833, 212, 213, 418, 214, 365, 215, 366,
	367, 834, 216, 835, 217, 836, 218, 837, 838, 219,
	220, 839, 221, 840, 0, 841, 368, 222, 224, 223,
	225, 369, 370, 842, 724, 843, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 844, 229, 845,
	846, 725, 847, 230, 374, 848, 375, 849, 231, 232,
	233, 234, 376, 377, 727, 850, 378, 238, 851, 235,
	852, 726, 236, 379, 237, 380, 381, 382, 383, 384,
	853, 385, 854, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 855, 246, 245, 856, 388, 730, 247,
	248, 731, 857, 249, 250, 858, 859, 251, 0, 252,
	732, 253, 254, 256, 389, 255, 733, 257, 258, 260,
	259, 860, 861, 862, 390, 261, 391, 262, 263, 863,
	264, 864, 865, 265, 866, 867, 266, 392, 734, 267,
	735, 393, 268, 269, 270, 271, 272, 868, 273, 394,
	274, 395, 275, 869, 276, 277, 278, 279, 280, 396,
	281, 282, 870, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 871, 295, 736, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 872,
	308, 398, 307, 309, 310, 873, 311, 299, 300, 312,
	737, 313, 399, 400, 314, 874, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 875, 322, 323,
	876, 324, 325, 326, 327, 328, 329, 330, 331, 877,
	403, 404, 405, 878, 879, 332, 333, 406, 407, 880,
	334, 335, 336, 337, 881, 882, 338, 339, 340, 341,
	883, 342, 884, 408, 343, 344, 345, 409, 410, 885,
	886, 346, 887, 888, 889, 890, 347, 348, 349, 350,
	351, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1260, 188, 189, 810,
	0, 190, 811, 812, 813, 814, 352, 815, 816, 817,
	818, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 819, 195, 359, 360, 196, 197, 820, 821, 361,
	362, 363, 822, 198, 364, 823, 797, 824, 199, 200,
	201, 0, 203, 204, 205, 202, 825, 206, 0, 207,
	208, 826, 723, 209, 210, 211, 827, 828, 830, 829,
	831, 832, 833, 212, 213, 418, 214, 365, 215, 366,
	367, 834, 216, 835, 217, 836, 218, 837, 838, 219,
	220, 839, 221, 840, 0, 841, 368, 222, 224, 223,
	225, 369, 370, 842, 724, 843, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 844, 229, 845,
	846, 725, 847, 230, 374, 848, 375, 849, 231, 232,
	233, 234, 376, 377, 727, 850, 378, 238, 851, 235,
	852, 726, 236, 379, 237, 380, 381, 382, 383, 384,
	853, 385, 854, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 855, 246, 245, 856, 388, 730, 247,
	248, 731, 857, 249, 250, 858, 859, 251, 0, 252,
	732, 253, 254, 256, 389, 255, 733, 257, 258, 260,
	259, 860, 861, 862, 390, 261, 391, 262, 263, 863,
	264, 864, 865, 265, 866, 867, 266, 392, 734, 267,
	735, 393, 268, 269, 270, 271, 272, 868, 273, 394,
	274, 395, 275, 869, 276, 277, 278, 279, 280, 396,
	281, 282, 870, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 871, 295, 736, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 872,
	308, 398, 307, 309, 310, 873, 311, 299, 300, 312,
	737, 313, 399, 400, 314, 874, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 875, 322, 323,
	876, 324, 325, 326, 327, 328, 329, 330, 331, 877,
	403, 404, 405, 878, 879, 332, 333, 406, 407, 880,
	334, 335, 336, 337, 881, 882, 338, 339, 340, 341,
	883, 342, 884, 408, 343, 344, 345, 409, 410, 885,
	886, 346, 887, 888, 889, 890, 347, 348, 349, 350,
	351, 1550, 0, 661, 650, 651, 648, 649, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 1547, 0, 190, 0, 0, 0, 0, 678, 643,
	0, 0, 0, 191, 192, 193, 353, 693, 355, 694,
	194, 695, 696, 0, 195, 359, 360, 196, 197, 646,
	677, 697, 698, 363, 0, 198, 689, 0, 669, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 670,
	671, 673, 0, 672, 674, 212, 213, 418, 214, 699,
	215, 700, 701, 631, 216, 0, 217, 0, 218, 1548,
	0, 692, 220, 0, 221, 0, 0, 0, 634, 222,
	224, 223, 225, 679, 680, 657, 724, 0, 0, 0,
	0, 0, 226, 227, 702, 703, 704, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 690, 0, 375, 0,
	231, 232, 233, 234, 686, 688, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 705, 237, 706, 707, 708,
	709, 710, 0, 668, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 691,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 628, 0, 658, 687, 261, 711, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 681, 268, 269, 270, 271, 272, 0,
	273, 682, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 712, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 635, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 675, 311, 299,
	300, 312, 737, 313, 713, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 714, 318, 319, 683, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 715, 716, 0, 0, 332, 333, 684,
	685, 656, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 676, 342, 0, 408, 343, 344, 345, 409,
	717, 1546, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 629, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 0, 0, 625, 626, 1549, 0,
	0, 0, 0, 0, 0, 636, 1544, 0, 0, 0,
	613, 639, 661, 650, 651, 648, 649, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 678, 643, 0,
	0, 0, 191, 192, 193, 353, 693, 355, 694, 194,
	695, 696, 0, 195, 359, 360, 196, 197, 646, 677,
	697, 698, 363, 0, 198, 689, 0, 669, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 723, 209, 210, 211, 0, 670, 671,
	673, 0, 672, 674, 212, 213, 418, 214, 699, 215,
	700, 701, 631, 216, 0, 217, 0, 218, 0, 0,
	692, 220, 0, 221, 0, 0, 0, 634, 222, 224,
	223, 225, 679, 680, 657, 724, 0, 0, 0, 0,
	0, 226, 227, 702, 703, 704, 0, 228, 0, 229,
	0, 0, 725, 0, 230, 690, 0, 375, 0, 231,
	232, 233, 234, 686, 688, 727, 0, 378, 238, 0,
	235, 0, 726, 236, 705, 237, 706, 707, 708, 709,
	710, 0, 668, 0, 728, 239, 240, 241, 729, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 691, 730,
	247, 248, 731, 0, 249, 250, 0, 0, 251, 0,
	252, 732, 253, 254, 256, 389, 255, 733, 257, 258,
	260, 259, 628, 0, 658, 687, 261, 711, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 734,
	267, 735, 681, 268, 269, 270, 271, 272, 0, 273,
	682, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	712, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 736,
	296, 297, 635, 298, 0, 302, 303, 304, 305, 306,
	146, 308, 398, 307, 309, 310, 675, 311, 299, 300,
	312, 737, 313, 713, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 714, 318, 319, 683, 0, 322,
	323, 148, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 715, 716, 0, 0, 332, 333, 684, 685,
	656, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 676, 342, 0, 408, 343, 344, 345, 956, 717,
	0, 0, 346, 0, 0, 0, 140, 347, 348, 349,
	350, 351, 629, 141, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 0, 0, 625, 626, 661, 650, 651,
	648, 649, 640, 0, 1144, 0, 0, 0, 0, 0,
	639, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 678, 643, 0, 0, 0, 191, 192, 193,
	353, 693, 355, 694, 194, 695, 696, 0, 195, 359,
	360, 196, 197, 646, 677, 697, 698, 363, 0, 198,
	689, 0, 669, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 723, 209,
	210, 211, 0, 670, 671, 673, 0, 672, 674, 212,
	213, 418, 214, 699, 215, 700, 701, 631, 216, 0,
	217, 0, 218, 0, 0, 692, 220, 0, 221, 0,
	0, 0, 634, 222, 224, 223, 225, 679, 680, 657,
	724, 0, 0, 0, 0, 0, 226, 227, 702, 703,
	704, 0, 228, 0, 229, 0, 0, 725, 0, 230,
	690, 0, 375, 0, 231, 232, 233, 234, 686, 688,
	727, 0, 378, 238, 0, 235, 0, 726, 236, 705,
	237, 706, 707, 708, 709, 710, 0, 668, 0, 728,
	239, 240, 241, 729, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 691, 730, 247, 248, 731, 0, 249,
	250, 0, 0, 251, 0, 252, 732, 253, 254, 256,
	389, 255, 733, 257, 258, 260, 259, 628, 0, 658,
	687, 261, 711, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 734, 267, 735, 681, 268, 269,
	270, 271, 272, 0, 273, 682, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 712, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 736, 296, 297, 635, 298, 0,
	302, 303, 304, 305, 306, 146, 308, 398, 307, 309,
	310, 675, 311, 299, 300, 312, 737, 313, 713, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 714,
	318, 319, 683, 0, 322, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 715, 716, 0,
	0, 332, 333, 684, 685, 656, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 676, 342, 0, 408,
	343, 344, 345, 956, 717, 0, 0, 346, 0, 0,
	0, 140, 347, 348, 349, 350, 351, 629, 141, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	625, 626, 661, 650, 651, 648, 649, 640, 0, 1144,
	0, 0, 0, 0, 0, 639, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 678, 643, 0,
	0, 0, 191, 192, 193, 353, 693, 355, 694, 194,
	695, 696, 1604, 195, 359, 360, 196, 197, 646, 677,
	697, 698, 363, 0, 198, 689, 0, 669, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 723, 209, 210, 211, 0, 670, 671,
	673, 0, 672, 674, 212, 213, 418, 214, 699, 215,
	700, 701, 631, 216, 0, 217, 0, 218, 0, 0,
	692, 220, 0, 221, 0, 0, 0, 634, 222, 224,
	223, 225, 679, 680, 657, 724, 0, 0, 0, 0,
	0, 226, 227, 702, 703, 704, 0, 228, 0, 229,
	0, 1609, 725, 0, 230, 690, 0, 375, 0, 231,
	232, 233, 234, 686, 688, 727, 0, 378, 238, 0,
	235, 0, 726, 236, 705, 237, 706, 707, 708, 709,
	710, 0, 668, 0, 728, 239, 240, 241, 729, 386,
	387, 242, 243, 244, 0, 246, 245, 1605, 691, 730,
	247, 248, 731, 0, 249, 250, 0, 0, 251, 0,
	252, 732, 253, 254, 256, 389, 255, 733, 257, 258,
	260, 259, 628, 0, 658, 687, 261, 711, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 734,
	267, 735, 681, 268, 269, 270, 271, 272, 0, 273,
	682, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	712, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 736,
	296, 297, 635, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 675, 311, 299, 300,
	312, 737, 313, 713, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 714, 318, 319, 683, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 715, 716, 0, 1606, 332, 333, 684, 685,
	656, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 676, 342, 0, 408, 343, 344, 345, 409, 717,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 629, 661, 650, 651, 648, 649, 640, 0,
	627, 0, 0, 0, 0, 625, 626, 0, 0, 188,
	189, 0, 0, 190, 636, 0, 0, 0, 678, 643,
	639, 0, 0, 191, 192, 193, 353, 693, 355, 694,
	194, 695, 696, 0, 195, 359, 360, 196, 197, 646,
	677, 697, 698, 363, 0, 198, 689, 0, 669, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 670,
	671, 673, 0, 672, 674, 212, 213, 418, 214, 699,
	215, 700, 701, 631, 216, 0, 217, 0, 218, 0,
	0, 692, 220, 0, 221, 0, 0, 0, 634, 222,
	224, 223, 225, 679, 680, 657, 724, 0, 0, 0,
	0, 0, 226, 227, 702, 703, 704, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 690, 0, 375, 0,
	231, 232, 233, 234, 686, 688, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 705, 237, 706, 707, 708,
	709, 710, 0, 668, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 691,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 628, 2241, 658, 687, 261, 711, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 681, 268, 269, 270, 271, 272, 0,
	273, 682, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 712, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 635, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 675, 311, 299,
	300, 312, 737, 313, 713, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 714, 318, 319, 683, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 715, 716, 0, 0, 332, 333, 684,
	685, 656, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 676, 342, 0, 408, 343, 344, 345, 409,
	717, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 629, 661, 650, 651, 648, 649, 640,
	0, 627, 0, 0, 0, 0, 625, 626, 1205, 0,
	188, 189, 0, 0, 190, 636, 0, 0, 0, 678,
	643, 639, 0, 0, 191, 192, 193, 353, 693, 355,
	694, 194, 695, 696, 0, 195, 359, 360, 196, 197,
	646, 677, 697, 698, 363, 0, 198, 689, 0, 669,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 723, 209, 210, 211, 0,
	670, 671, 673, 0, 672, 674, 212, 213, 418, 214,
	699, 215, 700, 701, 631, 216, 0, 217, 0, 218,
	0, 0, 692, 220, 0, 221, 0, 0, 0, 634,
	222, 224, 223, 225, 679, 680, 657, 724, 0, 0,
	0, 0, 0, 226, 227, 702, 703, 704, 0, 228,
	0, 229, 0, 0, 725, 0, 230, 690, 0, 375,
	0, 231, 232, 233, 234, 686, 688, 727, 0, 378,
	238, 1454, 235, 0, 726, 236, 705, 237, 706, 707,
	708, 709, 710, 0, 668, 0, 728, 239, 240, 241,
	729, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	691, 730, 247, 248, 731, 0, 249, 250, 0, 0,
	251, 0, 252, 732, 253, 254, 256, 389, 255, 733,
	257, 258, 260, 259, 628, 0, 658, 687, 261, 711,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 734, 267, 735, 681, 268, 269, 270, 271, 272,
	0, 273, 682, 274, 395, 275, 1453, 276, 277, 278,
	279, 280, 712, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 736, 296, 297, 635, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 398, 307, 309, 310, 675, 311,
	299, 300, 312, 737, 313, 713, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 714, 318, 319, 683,
	0, 322, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 715, 716, 0, 0, 332, 333,
	684, 685, 656, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 676, 342, 0, 408, 343, 344, 345,
	409, 717, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 629, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 0, 0, 625, 626, 0,
	0, 0, 0, 0, 0, 0, 636, 0, 0, 0,
	0, 621, 639, 661, 650, 651, 648, 649, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 678, 643,
	0, 0, 0, 191, 192, 193, 353, 693, 355, 694,
	194, 695, 696, 0, 195, 359, 360, 196, 197, 646,
	677, 697, 698, 363, 0, 198, 689, 0, 669, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 670,
	671, 673, 0, 672, 674, 212, 213, 418, 214, 699,
	215, 700, 701, 631, 216, 0, 217, 0, 218, 0,
	0, 692, 220, 0, 221, 0, 0, 0, 634, 222,
	224, 223, 225, 679, 680, 657, 724, 0, 0, 0,
	0, 0, 226, 227, 702, 703, 704, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 690, 0, 375, 0,
	231, 232, 233, 234, 686, 688, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 705, 237, 706, 707, 708,
	709, 710, 0, 668, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 691,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 628, 0, 658, 687, 261, 711, 262,
	263, 0, 264, 623, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 681, 268, 269, 270, 271, 272, 0,
	273, 682, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 712, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 635, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 675, 311, 299,
	300, 312, 737, 313, 713, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 714, 318, 319, 683, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 715, 716, 0, 0, 332, 333, 684,
	685, 656, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 676, 342, 0, 408, 343, 344, 345, 409,
	717, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 629, 661, 650, 651, 648, 649, 640,
	0, 627, 0, 0, 0, 0, 625, 626, 0, 0,
	188, 189, 0, 0, 190, 636, 0, 0, 0, 678,
	643, 639, 0, 0, 191, 192, 193, 353, 693, 355,
	694, 194, 695, 696, 0, 195, 359, 360, 196, 197,
	646, 677, 697, 698, 363, 0, 198, 689, 0, 669,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 723, 209, 210, 211, 0,
	670, 671, 673, 0, 672, 674, 212, 213, 418, 214,
	699, 215, 700, 701, 631, 216, 0, 217, 0, 218,
	0, 0, 692, 220, 0, 221, 0, 0, 0, 634,
	222, 224, 223, 225, 679, 680, 657, 724, 0, 0,
	0, 0, 0, 226, 227, 702, 703, 704, 0, 228,
	0, 229, 0, 0, 725, 0, 230, 690, 0, 375,
	0, 231, 232, 233, 234, 686, 688, 727, 0, 378,
	238, 0, 235, 0, 726, 236, 705, 237, 706, 707,
	708, 709, 710, 0, 668, 0, 728, 239, 240, 241,
	729, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	691, 730, 247, 248, 731, 0, 249, 250, 0, 0,
	251, 0, 252, 732, 253, 254, 256, 389, 255, 733,
	257, 258, 260, 259, 628, 0, 658, 687, 261, 711,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 734, 267, 735, 681, 268, 269, 270, 271, 272,
	0, 273, 682, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 712, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 736, 296, 297, 635, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 398, 307, 309, 310, 675, 311,
	299, 300, 312, 737, 313, 713, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 714, 318, 319, 683,
	0, 322, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 715, 716, 0, 0, 332, 333,
	684, 685, 656, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 676, 342, 0, 408, 343, 344, 345,
	409, 717, 2092, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 629, 661, 650, 651, 648, 649,
	640, 0, 627, 0, 0, 0, 0, 625, 626, 0,
	0, 188, 189, 0, 0, 190, 636, 0, 0, 0,
	678, 643, 639, 0, 0, 191, 192, 193, 353, 693,
	355, 694, 194, 695, 696, 0, 195, 359, 360, 196,
	197, 646, 677, 697, 698, 363, 0, 198, 689, 0,
	669, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 211,
	0, 670, 671, 673, 0, 672, 674, 212, 213, 418,
	214, 699, 215, 700, 701, 631, 216, 0, 217, 0,
	218, 0, 0, 692, 220, 0, 221, 0, 0, 0,
	634, 222, 224, 223, 225, 679, 680, 657, 724, 0,
	0, 0, 0, 0, 226, 227, 702, 703, 704, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 690, 0,
	375, 0, 231, 232, 233, 234, 686, 688, 727, 0,
	378, 238, 0, 235, 0, 726, 236, 705, 237, 706,
	707, 708, 709, 710, 0, 668, 0, 728, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 691, 730, 247, 248, 731, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 628, 0, 658, 687, 261,
	711, 262, 263, 0, 264, 623, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 681, 268, 269, 270, 271,
	272, 0, 273, 682, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 712, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 635, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 675,
	311, 299, 300, 312, 737, 313, 713, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 714, 318, 319,
	683, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 715, 716, 0, 0, 332,
	333, 684, 685, 656, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 676, 342, 0, 408, 343, 344,
	345, 409, 717, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 629, 661, 650, 651, 648,
	649, 640, 0, 627, 0, 0, 0, 0, 625, 626,
	0, 0, 188, 189, 0, 0, 190, 636, 0, 0,
	0, 678, 643, 639, 0, 0, 191, 192, 193, 353,
	693, 355, 694, 194, 695, 696, 0, 195, 359, 360,
	196, 197, 646, 677, 697, 698, 363, 0, 198, 689,
	0, 669, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 723, 209, 210,
	211, 0, 670, 671, 673, 0, 672, 674, 212, 213,
	418, 214, 699, 215, 700, 701, 631, 216, 0, 217,
	0, 218, 0, 0, 692, 220, 0, 221, 0, 0,
	0, 634, 222, 224, 223, 225, 679, 680, 657, 724,
	0, 0, 0, 0, 0, 226, 227, 702, 703, 704,
	0, 228, 0, 229, 0, 0, 725, 0, 230, 690,
	0, 375, 0, 231, 232, 233, 234, 686, 688, 727,
	0, 378, 238, 0, 235, 0, 726, 236, 705, 237,
	706, 707, 708, 709, 710, 0, 668, 0, 728, 239,
	240, 241, 729, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 691, 730, 247, 248, 731, 0, 249, 250,
	0, 0, 251, 0, 252, 732, 253, 254, 256, 389,
	255, 733, 257, 258, 260, 259, 628, 0, 658, 687,
	261, 711, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 734, 267, 735, 681, 268, 269, 270,
	271, 272, 0, 273, 682, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 712, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 736, 296, 297, 635, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	675, 311, 299, 300, 312, 737, 313, 713, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 714, 318,
	319, 683, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 715, 716, 0, 0,
	332, 333, 684, 685, 656, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 676, 342, 0, 408, 343,
	344, 345, 409, 717, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 629, 661, 650, 651,
	648, 649, 640, 0, 627, 0, 0, 0, 0, 625,
	626, 1205, 0, 188, 189, 0, 0, 190, 636, 0,
	0, 0, 678, 643, 639, 0, 0, 191, 192, 193,
	353, 693, 355, 694, 194, 695, 696, 0, 195, 359,
	360, 196, 197, 646, 677, 697, 698, 363, 0, 198,
	689, 0, 669, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 723, 209,
	210, 211, 0, 670, 671, 673, 0, 672, 674, 212,
	213, 418, 214, 699, 215, 700, 701, 631, 216, 0,
	217, 0, 218, 0, 0, 692, 220, 0, 221, 0,
	0, 0, 634, 222, 224, 223, 225, 679, 680, 657,
	724, 0, 0, 0, 0, 0, 226, 227, 702, 703,
	704, 0, 228, 0, 229, 0, 1609, 725, 0, 230,
	690, 0, 375, 0, 231, 232, 233, 234, 686, 688,
	727, 0, 378, 238, 0, 235, 0, 726, 236, 705,
	237, 706, 707, 708, 709, 710, 0, 668, 0, 728,
	239, 240, 241, 729, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 691, 730, 247, 248, 731, 0, 249,
	250, 0, 0, 251, 0, 252, 732, 253, 254, 256,
	389, 255, 733, 257, 258, 260, 259, 628, 0, 658,
	687, 261, 711, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 734, 267, 735, 681, 268, 269,
	270, 271, 272, 0, 273, 682, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 712, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 736, 296, 297, 635, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 675, 311, 299, 300, 312, 737, 313, 713, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 714,
	318, 319, 683, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 715, 716, 0,
	0, 332, 333, 684, 685, 656, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 676, 342, 0, 408,
	343, 344, 345, 409, 717, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 629, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	625, 626, 0, 0, 0, 0, 0, 0, 0, 636,
	0, 0, 0, 0, 1655, 639, 661, 650, 651, 648,
	649, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 678, 643, 0, 0, 0, 191, 192, 193, 353,
	693, 355, 694, 194, 695, 696, 0, 195, 359, 360,
	196, 197, 646, 677, 697, 698, 363, 0, 198, 689,
	0, 669, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 723, 209, 210,
	211, 0, 670, 671, 673, 0, 672, 674, 212, 213,
	418, 214, 699, 215, 700, 701, 631, 216, 0, 217,
	0, 218, 0, 0, 692, 220, 0, 221, 0, 0,
	0, 634, 222, 224, 223, 225, 679, 680, 657, 724,
	0, 0, 0, 0, 0, 226, 227, 702, 703, 704,
	0, 228, 0, 229, 0, 0, 725, 0, 230, 690,
	0, 375, 0, 231, 232, 233, 234, 686, 688, 727,
	0, 378, 238, 0, 235, 0, 726, 236, 705, 237,
	706, 707, 708, 709, 710, 0, 668, 0, 728, 239,
	240, 241, 729, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 691, 730, 247, 248, 731, 0, 249, 250,
	0, 0, 251, 0, 252, 732, 253, 254, 256, 389,
	255, 733, 257, 258, 260, 259, 628, 0, 658, 687,
	261, 711, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 734, 267, 735, 681, 268, 269, 270,
	271, 272, 0, 273, 682, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 712, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 736, 296, 297, 635, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	675, 311, 299, 300, 312, 737, 313, 713, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 714, 318,
	319, 683, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 715, 716, 0, 0,
	332, 333, 684, 685, 656, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 676, 342, 0, 408, 343,
	344, 345, 409, 717, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 629, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 0, 0, 625,
	626, 0, 0, 0, 0, 0, 0, 0, 636, 0,
	0, 0, 0, 1618, 639, 661, 650, 651, 648, 649,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	678, 643, 0, 0, 0, 191, 192, 193, 353, 693,
	355, 694, 194, 695, 696, 0, 195, 359, 360, 196,
	197, 646, 677, 697, 698, 363, 0, 198, 689, 0,
	669, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 211,
	0, 670, 671, 673, 0, 672, 674, 212, 213, 418,
	214, 699, 215, 700, 701, 631, 216, 0, 217, 0,
	218, 0, 0, 692, 220, 0, 221, 0, 0, 0,
	634, 222, 224, 223, 225, 679, 680, 657, 724, 0,
	0, 0, 0, 0, 226, 227, 702, 703, 704, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 690, 0,
	375, 0, 231, 232, 233, 234, 686, 688, 727, 0,
	378, 238, 0, 235, 0, 726, 236, 705, 237, 706,
	707, 708, 709, 710, 0, 668, 0, 728, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 691, 730, 247, 248, 731, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 628, 0, 658, 687, 261,
	711, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 681, 268, 269, 270, 271,
	272, 0, 273, 682, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 712, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 635, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 675,
	311, 299, 300, 312, 737, 313, 713, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 714, 318, 319,
	683, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 715, 716, 0, 0, 332,
	333, 684, 685, 656, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 676, 342, 0, 408, 343, 344,
	345, 409, 717, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 629, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 0, 0, 625, 626,
	0, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 1616, 639, 661, 650, 651, 648, 649, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 678,
	643, 0, 0, 0, 191, 192, 193, 353, 693, 355,
	694, 194, 695, 696, 0, 195, 359, 360, 196, 197,
	646, 677, 697, 698, 363, 0, 198, 689, 0, 669,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 723, 209, 210, 211, 0,
	670, 671, 673, 0, 672, 674, 212, 213, 418, 214,
	699, 215, 700, 701, 631, 216, 0, 217, 0, 218,
	0, 0, 692, 220, 0, 221, 0, 0, 0, 634,
	222, 224, 223, 225, 679, 680, 657, 724, 0, 0,
	0, 0, 0, 226, 227, 702, 703, 704, 0, 228,
	0, 229, 0, 0, 725, 0, 230, 690, 0, 375,
	0, 231, 232, 233, 234, 686, 688, 727, 0, 378,
	238, 0, 235, 0, 726, 236, 705, 237, 706, 707,
	708, 709, 710, 0, 668, 0, 728, 239, 240, 241,
	729, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	691, 730, 247, 248, 731, 0, 249, 250, 0, 0,
	251, 0, 252, 732, 253, 254, 256, 389, 255, 733,
	257, 258, 260, 259, 628, 0, 658, 687, 261, 711,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 734, 267, 735, 681, 268, 269, 270, 271, 272,
	0, 273, 682, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 712, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 736, 296, 297, 635, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 398, 307, 309, 310, 675, 311,
	299, 300, 312, 737, 313, 713, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 714, 318, 319, 683,
	0, 322, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 715, 716, 0, 0, 332, 333,
	684, 685, 656, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 676, 342, 0, 408, 343, 344, 345,
	409, 717, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 629, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 0, 0, 625, 626, 0,
	0, 0, 0, 0, 0, 0, 636, 0, 0, 0,
	0, 1600, 639, 661, 650, 651, 648, 649, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 678, 643,
	0, 0, 0, 191, 192, 193, 353, 693, 355, 694,
	194, 695, 696, 0, 195, 359, 360, 196, 197, 646,
	677, 697, 698, 363, 0, 198, 689, 0, 669, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 670,
	671, 673, 0, 672, 674, 212, 213, 418, 214, 699,
	215, 700, 701, 631, 216, 0, 217, 0, 218, 0,
	0, 692, 220, 0, 221, 0, 0, 0, 634, 222,
	224, 223, 225, 679, 680, 657, 724, 0, 0, 0,
	0, 0, 226, 227, 702, 703, 704, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 690, 0, 375, 0,
	231, 232, 233, 234, 686, 688, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 705, 237, 706, 707, 708,
	709, 710, 0, 668, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 691,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 628, 0, 658, 687, 261, 711, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 681, 268, 269, 270, 271, 272, 0,
	273, 682, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 712, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 635, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 675, 311, 299,
	300, 312, 737, 313, 713, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 714, 318, 319, 683, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 715, 716, 0, 0, 332, 333, 684,
	685, 656, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 676, 342, 0, 408, 343, 344, 345, 409,
	717, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 629, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 0, 0, 625, 626, 0, 0,
	0, 0, 0, 0, 0, 636, 0, 0, 0, 0,
	1588, 639, 661, 650, 651, 648, 649, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 678, 643, 0,
	0, 0, 191, 192, 193, 353, 693, 355, 694, 194,
	695, 696, 0, 195, 359, 360, 196, 197, 646, 677,
	697, 698, 363, 0, 198, 689, 0, 669, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 723, 209, 210, 211, 0, 670, 671,
	673, 0, 672, 674, 212, 213, 418, 214, 699, 215,
	700, 701, 631, 216, 0, 217, 0, 218, 0, 0,
	692, 220, 0, 221, 0, 0, 0, 634, 222, 224,
	223, 225, 679, 680, 657, 724, 0, 0, 0, 0,
	0, 226, 227, 702, 703, 704, 0, 228, 0, 229,
	0, 0, 725, 0, 230, 690, 0, 375, 0, 231,
	232, 233, 234, 686, 688, 727, 0, 378, 238, 0,
	235, 0, 726, 236, 705, 237, 706, 707, 708, 709,
	710, 0, 668, 0, 728, 239, 240, 241, 729, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 691, 730,
	247, 248, 731, 0, 249, 250, 0, 0, 251, 0,
	252, 732, 253, 254, 256, 389, 255, 733, 257, 258,
	260, 259, 628, 0, 658, 687, 261, 711, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 734,
	267, 735, 681, 268, 269, 270, 271, 272, 0, 273,
	682, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	712, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 736,
	296, 297, 635, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 675, 311, 299, 300,
	312, 737, 313, 713, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 714, 318, 319, 683, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 715, 716, 0, 0, 332, 333, 684, 685,
	656, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 676, 342, 0, 408, 343, 344, 345, 409, 717,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 629, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 0, 0, 625, 626, 0, 0, 0,
	0, 0, 0, 0, 636, 0, 0, 0, 0, 1586,
	639, 1578, 650, 651, 648, 649, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 678, 643, 0, 0,
	0, 191, 192, 193, 353, 693, 355, 694, 194, 695,
	696, 0, 195, 359, 360, 196, 197, 646, 677, 697,
	698, 363, 0, 198, 689, 0, 669, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 723, 209, 210, 211, 0, 670, 671, 673,
	0, 672, 674, 212, 213, 418, 214, 699, 1581, 700,
	701, 631, 216, 0, 217, 0, 218, 0, 0, 692,
	220, 0, 221, 0, 0, 0, 634, 222, 224, 223,
	225, 679, 680, 657, 724, 0, 0, 0, 0, 0,
	226, 227, 702, 703, 704, 0, 228, 0, 229, 0,
	0, 725, 0, 230, 690, 0, 375, 0, 231, 1582,
	233, 234, 686, 688, 727, 0, 378, 238, 0, 235,
	0, 726, 236, 705, 237, 706, 707, 708, 709, 710,
	0, 668, 0, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 691, 730, 247,
	248, 731, 0, 249, 250, 0, 0, 251, 0, 252,
	732, 1583, 1580, 256, 389, 255, 733, 257, 258, 260,
	259, 628, 0, 658, 687, 261, 711, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 734, 267,
	735, 681, 268, 269, 270, 271, 272, 0, 273, 682,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 712,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 736, 296,
	297, 635, 298, 0, 302, 303, 304, 305, 1584, 0,
	308, 398, 307, 309, 310, 675, 311, 299, 300, 312,
	737, 313, 713, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 714, 318, 319, 683, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 715, 716, 0, 0, 332, 333, 684, 685, 656,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	676, 342, 0, 408, 343, 344, 345, 409, 717, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 1579,
	351, 629, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 0, 0, 625, 626, 0, 0, 0, 0,
	0, 0, 0, 636, 0, 0, 0, 0, 1575, 639,
	1578, 650, 651, 648, 649, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 678, 643, 0, 0, 0,
	191, 192, 193, 353, 693, 355, 694, 194, 695, 696,
	0, 195, 359, 360, 196, 197, 646, 677, 697, 698,
	363, 0, 198, 689, 0, 669, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 723, 209, 210, 211, 0, 670, 671, 673, 0,
	672, 674, 212, 213, 418, 214, 699, 1581, 700, 701,
	631, 216, 0, 217, 0, 218, 0, 0, 692, 220,
	0, 221, 0, 0, 0, 634, 222, 224, 223, 225,
	679, 680, 657, 724, 0, 0, 0, 0, 0, 226,
	227, 702, 703, 704, 0, 228, 0, 229, 0, 0,
	725, 0, 230, 690, 0, 375, 0, 231, 1582, 233,
	234, 686, 688, 727, 0, 378, 238, 0, 235, 0,
	726, 236, 705, 237, 706, 707, 708, 709, 710, 0,
	668, 0, 728, 239, 240, 241, 729, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 691, 730, 247, 248,
	731, 0, 249, 250, 0, 0, 251, 0, 252, 732,
	1583, 1580, 256, 389, 255, 733, 257, 258, 260, 259,
	628, 0, 658, 687, 261, 711, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 734, 267, 735,
	681, 268, 269, 270, 271, 272, 0, 273, 682, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 712, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 736, 296, 297,
	635, 298, 0, 302, 303, 304, 305, 1584, 0, 308,
	398, 307, 309, 310, 675, 311, 299, 300, 312, 737,
	313, 713, 400, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 714, 318, 319, 683, 0, 322, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	715, 716, 0, 0, 332, 333, 684, 685, 656, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 676,
	342, 0, 408, 343, 344, 345, 409, 717, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 1579, 351,
	629, 661, 650, 651, 648, 649, 640, 0, 627, 0,
	0, 0, 0, 625, 626, 0, 0, 188, 189, 0,
	0, 190, 636, 0, 0, 0, 678, 643, 639, 0,
	0, 191, 192, 193, 353, 693, 355, 694, 194, 695,
	696, 0, 195, 359, 360, 196, 197, 646, 677, 697,
	698, 363, 0, 198, 689, 0, 669, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 723, 209, 210, 211, 0, 670, 671, 673,
	0, 672, 674, 212, 213, 418, 214, 699, 215, 700,
	701, 631, 216, 0, 217, 0, 218, 0, 0, 692,
	220, 0, 221, 0, 0, 0, 634, 222, 224, 223,
	225, 679, 680, 657, 724, 0, 0, 0, 0, 0,
	226, 227, 702, 703, 704, 0, 228, 0, 229, 0,
	0, 725, 0, 230, 690, 0, 375, 0, 231, 232,
	233, 234, 686, 688, 727, 0, 378, 238, 0, 235,
	0, 726, 236, 705, 237, 706, 707, 708, 709, 710,
	0, 668, 0, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 691, 730, 247,
	248, 731, 0, 249, 250, 0, 0, 251, 0, 252,
	732, 253, 254, 256, 389, 255, 733, 257, 258, 260,
	259, 628, 0, 658, 687, 261, 711, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 734, 267,
	735, 681, 268, 269, 270, 271, 272, 0, 273, 682,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 712,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 736, 296,
	297, 635, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 675, 311, 299, 300, 312,
	737, 313, 713, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 714, 318, 319, 683, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 715, 716, 0, 0, 332, 333, 684, 685, 656,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	676, 342, 0, 408, 343, 344, 345, 409, 717, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 629, 661, 650, 651, 648, 649, 640, 0, 627,
	0, 0, 0, 0, 625, 626, 0, 0, 188, 189,
	1441, 1148, 190, 636, 0, 0, 0, 678, 643, 639,
	0, 0, 191, 192, 193, 353, 693, 355, 694, 194,
	695, 696, 0, 195, 359, 360, 196, 197, 646, 677,
	697, 698, 363, 0, 198, 689, 0, 669, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 723, 209, 210, 211, 0, 670, 671,
	673, 0, 672, 674, 212, 213, 418, 214, 699, 215,
	700, 701, 631, 216, 0, 217, 0, 218, 0, 0,
	692, 220, 0, 221, 0, 0, 0, 634, 222, 224,
	223, 225, 679, 680, 657, 724, 0, 0, 0, 0,
	0, 226, 227, 702, 703, 704, 0, 228, 0, 229,
	0, 0, 725, 0, 230, 690, 0, 375, 0, 231,
	232, 233, 234, 686, 688, 727, 0, 378, 238, 0,
	235, 0, 726, 236, 705, 237, 706, 707, 708, 709,
	710, 0, 668, 0, 728, 239, 240, 241, 729, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 691, 730,
	247, 248, 731, 0, 249, 250, 0, 0, 251, 0,
	252, 732, 253, 254, 256, 389, 255, 733, 257, 258,
	260, 259, 628, 0, 658, 687, 261, 711, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 734,
	267, 735, 681, 268, 269, 270, 271, 272, 0, 273,
	682, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	712, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 736,
	296, 297, 635, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 675, 311, 299, 300,
	312, 737, 313, 713, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 714, 318, 319, 683, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 715, 716, 0, 0, 332, 333, 684, 685,
	656, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 676, 342, 0, 408, 343, 344, 345, 409, 717,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 629, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 0, 0, 625, 626, 0, 0, 0,
	0, 0, 0, 0, 636, 0, 0, 0, 0, 902,
	639, 661, 650, 651, 648, 649, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 678, 643, 0, 0,
	0, 191, 192, 193, 353, 693, 355, 694, 194, 695,
	696, 0, 195, 359, 360, 196, 197, 646, 677, 697,
	698, 363, 0, 198, 689, 0, 669, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 723, 209, 210, 211, 0, 670, 671, 673,
	0, 672, 674, 212, 213, 418, 214, 699, 215, 700,
	701, 631, 216, 0, 217, 0, 218, 0, 0, 692,
	220, 0, 221, 0, 0, 0, 634, 222, 224, 223,
	225, 679, 680, 657, 724, 0, 0, 0, 0, 0,
	226, 227, 702, 703, 704, 0, 228, 0, 229, 0,
	0, 725, 0, 230, 690, 0, 375, 0, 231, 232,
	233, 234, 686, 688, 727, 0, 378, 238, 0, 235,
	0, 726, 236, 705, 237, 706, 707, 708, 709, 710,
	0, 668, 0, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 691, 730, 247,
	248, 731, 0, 249, 250, 0, 0, 251, 0, 252,
	732, 253, 254, 256, 389, 255, 733, 257, 258, 260,
	259, 628, 0, 658, 687, 261, 711, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 734, 267,
	735, 681, 268, 269, 270, 271, 272, 0, 273, 682,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 712,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 736, 296,
	297, 635, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 675, 311, 299, 300, 312,
	737, 313, 713, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 714, 318, 319, 683, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 715, 716, 0, 0, 332, 333, 684, 685, 656,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	676, 342, 0, 408, 343, 344, 345, 409, 717, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 629, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 0, 0, 625, 626, 0, 0, 0, 0,
	0, 0, 0, 636, 0, 0, 0, 0, 900, 639,
	661, 650, 651, 648, 649, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 678, 643, 0, 0, 0,
	191, 192, 193, 353, 693, 355, 694, 194, 695, 696,
	0, 195, 359, 360, 196, 197, 646, 677, 697, 698,
	363, 0, 198, 689, 0, 669, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 723, 209, 210, 211, 0, 670, 671, 673, 0,
	672, 674, 212, 213, 418, 214, 699, 215, 700, 701,
	631, 216, 0, 217, 0, 218, 0, 0, 692, 220,
	0, 221, 0, 0, 0, 634, 222, 224, 223, 225,
	679, 680, 657, 724, 0, 0, 0, 0, 0, 226,
	227, 702, 703, 704, 0, 228, 0, 229, 0, 0,
	725, 0, 230, 690, 0, 375, 0, 231, 232, 233,
	234, 686, 688, 727, 0, 378, 238, 0, 235, 0,
	726, 236, 705, 237, 706, 707, 708, 709, 710, 0,
	668, 0, 728, 239, 240, 241, 729, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 691, 730, 247, 248,
	731, 0, 249, 250, 0, 0, 251, 0, 252, 732,
	253, 254, 256, 389, 255, 733, 257, 258, 260, 259,
	628, 0, 658, 687, 261, 711, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 734, 267, 735,
	681, 268, 269, 270, 271, 272, 0, 273, 682, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 712, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 736, 296, 297,
	635, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	398, 307, 309, 310, 675, 311, 299, 300, 312, 737,
	313, 713, 400, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 714, 318, 319, 683, 0, 322, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	715, 716, 0, 0, 332, 333, 684, 685, 656, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 676,
	342, 0, 408, 343, 344, 345, 409, 717, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	629, 661, 650, 651, 648, 649, 640, 0, 627, 0,
	0, 0, 0, 625, 626, 0, 0, 188, 189, 0,
	0, 190, 636, 0, 0, 0, 678, 643, 639, 0,
	0, 191, 192, 193, 353, 693, 355, 694, 194, 695,
	696, 0, 195, 359, 360, 196, 197, 646, 677, 697,
	698, 363, 0, 198, 689, 0, 669, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 723, 209, 210, 211, 0, 670, 671, 673,
	0, 672, 674, 212, 213, 418, 214, 699, 215, 700,
	701, 631, 216, 0, 217, 0, 218, 0, 0, 692,
	220, 0, 221, 0, 0, 0, 634, 222, 224, 223,
	225, 679, 680, 657, 724, 0, 0, 0, 0, 0,
	226, 227, 702, 703, 704, 0, 228, 0, 229, 0,
	0, 725, 0, 230, 690, 0, 375, 0, 231, 232,
	233, 234, 686, 688, 727, 0, 378, 238, 0, 235,
	0, 726, 236, 705, 237, 706, 707, 708, 709, 710,
	0, 668, 0, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 691, 730, 247,
	248, 731, 0, 249, 250, 0, 0, 251, 0, 252,
	2653, 253, 254, 256, 389, 255, 733, 257, 258, 260,
	259, 628, 0, 658, 687, 261, 711, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 734, 267,
	735, 681, 268, 269, 270, 271, 272, 0, 273, 682,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 712,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 736, 296,
	297, 635, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 675, 311, 299, 300, 312,
	737, 313, 713, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 714, 318, 319, 683, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 715, 716, 0, 0, 332, 333, 684, 685, 656,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	676, 342, 0, 408, 343, 344, 345, 409, 717, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 629, 661, 650, 651, 648, 649, 640, 0, 627,
	0, 0, 0, 0, 625, 626, 0, 0, 188, 189,
	0, 0, 190, 636, 0, 0, 0, 678, 643, 639,
	0, 0, 191, 192, 193, 353, 693, 355, 694, 194,
	695, 696, 0, 195, 359, 360, 196, 197, 646, 677,
	697, 698, 363, 0, 198, 689, 0, 669, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 723, 209, 210, 2570, 0, 670, 671,
	673, 0, 672, 674, 212, 213, 418, 214, 699, 215,
	700, 701, 631, 216, 0, 217, 0, 218, 0, 0,
	692, 220, 0, 221, 0, 0, 0, 634, 222, 224,
	223, 225, 679, 680, 657, 724, 0, 0, 0, 0,
	0, 226, 227, 702, 703, 704, 0, 228, 0, 229,
	0, 0, 725, 0, 230, 690, 0, 375, 0, 231,
	232, 233, 234, 686, 688, 727, 0, 378, 238, 0,
	235, 0, 726, 236, 705, 237, 706, 707, 708, 709,
	710, 0, 668, 0, 728, 239, 240, 241, 729, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 691, 730,
	247, 248, 731, 0, 249, 250, 0, 0, 251, 0,
	252, 732, 253, 254, 256, 389, 255, 733, 257, 258,
	260, 259, 628, 0, 658, 687, 261, 711, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 734,
	267, 735, 681, 268, 269, 270, 271, 272, 0, 273,
	682, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	712, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 736,
	296, 297, 635, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 675, 311, 299, 300,
	312, 737, 313, 713, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 714, 318, 319, 683, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 715, 716, 0, 0, 332, 333, 684, 685,
	656, 334, 335, 2569, 337, 0, 0, 338, 339, 340,
	341, 676, 342, 0, 408, 343, 344, 345, 409, 717,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 629, 661, 650, 651, 648, 649, 640, 0,
	627, 0, 0, 0, 0, 625, 626, 0, 0, 188,
	189, 0, 0, 190, 636, 0, 0, 0, 678, 643,
	639, 0, 0, 191, 192, 193, 353, 693, 355, 694,
	194, 695, 696, 0, 195, 359, 360, 196, 197, 646,
	677, 697, 698, 363, 0, 198, 689, 0, 669, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 670,
	671, 673, 0, 672, 674, 212, 213, 418, 214, 699,
	215, 700, 701, 631, 216, 0, 217, 0, 218, 0,
	0, 692, 220, 0, 221, 0, 0, 0, 634, 222,
	224, 223, 225, 679, 680, 657, 724, 0, 0, 0,
	0, 0, 226, 227, 702, 703, 704, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 690, 0, 375, 0,
	231, 232, 233, 234, 686, 688, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 705, 237, 706, 707, 708,
	709, 710, 0, 668, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 691,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 628, 0, 658, 687, 261, 711, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 681, 268, 269, 270, 271, 272, 0,
	273, 682, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 712, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 635, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 675, 311, 299,
	300, 312, 737, 313, 713, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 714, 318, 319, 683, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 715, 716, 0, 0, 332, 333, 684,
	685, 656, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 676, 342, 0, 408, 343, 344, 345, 409,
	717, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 629, 661, 650, 651, 648, 649, 640,
	0, 627, 0, 0, 0, 0, 625, 626, 0, 0,
	188, 189, 0, 0, 190, 636, 0, 0, 0, 678,
	643, 639, 0, 0, 191, 192, 193, 2568, 693, 355,
	694, 194, 695, 696, 0, 195, 359, 360, 196, 197,
	646, 677, 697, 698, 363, 0, 198, 689, 0, 669,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 723, 209, 210, 2570, 0,
	670, 671, 673, 0, 672, 674, 212, 213, 418, 214,
	699, 215, 700, 701, 631, 216, 0, 217, 0, 218,
	0, 0, 692, 220, 0, 221, 0, 0, 0, 634,
	222, 224, 223, 225, 679, 680, 657, 724, 0, 0,
	0, 0, 0, 226, 227, 702, 703, 704, 0, 228,
	0, 229, 0, 0, 725, 0, 230, 690, 0, 375,
	0, 231, 232, 233, 234, 686, 688, 727, 0, 378,
	238, 0, 235, 0, 726, 236, 705, 237, 706, 707,
	708, 709, 710, 0, 668, 0, 728, 239, 240, 241,
	729, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	691, 730, 247, 248, 731, 0, 249, 250, 0, 0,
	251, 0, 252, 732, 253, 254, 256, 389, 255, 733,
	257, 258, 260, 259, 628, 0, 658, 687, 261, 711,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 734, 267, 735, 681, 268, 269, 270, 271, 272,
	0, 273, 682, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 712, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 736, 296, 297, 635, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 398, 307, 309, 310, 675, 311,
	299, 300, 312, 737, 313, 713, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 714, 318, 319, 683,
	0, 322, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 715, 716, 0, 0, 332, 333,
	684, 685, 656, 334, 335, 2569, 337, 0, 0, 338,
	339, 340, 341, 676, 342, 0, 408, 343, 344, 345,
	409, 717, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 629, 661, 650, 651, 648, 649,
	640, 0, 627, 0, 0, 0, 0, 625, 626, 0,
	0, 188, 189, 0, 0, 190, 636, 0, 0, 0,
	678, 643, 639, 0, 0, 191, 192, 193, 353, 693,
	355, 694, 194, 695, 696, 0, 195, 359, 360, 196,
	197, 646, 677, 697, 698, 363, 0, 198, 689, 0,
	669, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 211,
	0, 670, 671, 673, 0, 672, 674, 212, 213, 418,
	214, 699, 215, 700, 701, 0, 216, 0, 217, 0,
	218, 0, 0, 692, 220, 0, 221, 0, 0, 0,
	634, 222, 224, 223, 225, 679, 680, 657, 724, 0,
	0, 0, 0, 0, 226, 227, 702, 703, 704, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 690, 0,
	375, 0, 231, 232, 233, 234, 686, 688, 727, 0,
	378, 238, 0, 235, 0, 726, 236, 705, 237, 706,
	707, 708, 709, 710, 0, 668, 0, 728, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 691, 730, 247, 248, 731, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 0, 0, 658, 687, 261,
	711, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 681, 268, 269, 270, 271,
	272, 0, 273, 682, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 712, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 1598, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 675,
	311, 299, 300, 312, 737, 313, 713, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 714, 318, 319,
	683, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 715, 716, 0, 0, 332,
	333, 684, 685, 656, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 676, 342, 0, 408, 343, 344,
	345, 409, 717, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 661, 650, 651, 648, 649,
	640, 0, 0, 1596, 0, 0, 0, 0, 1594, 1595,
	0, 188, 189, 0, 0, 190, 0, 1597, 0, 0,
	678, 643, 0, 639, 0, 191, 192, 193, 0, 693,
	355, 694, 194, 695, 696, 0, 195, 359, 360, 196,
	197, 646, 677, 697, 698, 363, 0, 198, 689, 0,
	669, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 2570,
	0, 670, 671, 673, 0, 672, 674, 212, 213, 418,
	214, 699, 215, 700, 701, 631, 216, 0, 217, 0,
	218, 0, 0, 692, 220, 0, 221, 0, 0, 0,
	634, 222, 224, 223, 225, 679, 680, 657, 724, 0,
	0, 0, 0, 0, 226, 227, 702, 703, 704, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 690, 0,
	375, 0, 231, 232, 233, 234, 686, 688, 0, 0,
	378, 238, 0, 235, 0, 726, 236, 705, 237, 706,
	707, 708, 709, 710, 0, 668, 0, 0, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 691, 730, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 628, 0, 658, 687, 261,
	711, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 681, 268, 269, 270, 271,
	272, 0, 273, 682, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 712, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 635, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 675,
	311, 299, 300, 312, 0, 313, 713, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 714, 318, 319,
	683, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 715, 716, 0, 0, 332,
	333, 684, 685, 656, 334, 335, 2569, 337, 0, 0,
	338, 339, 340, 341, 676, 342, 0, 408, 343, 344,
	345, 409, 717, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 661, 650, 651, 648, 649,
	640, 0, 0, 0, 0, 0, 0, 0, 625, 626,
	0, 188, 189, 0, 0, 190, 0, 636, 0, 0,
	678, 643, 0, 639, 0, 191, 192, 193, 353, 693,
	355, 694, 194, 695, 696, 0, 195, 359, 360, 196,
	197, 0, 677, 697, 698, 363, 0, 198, 689, 0,
	669, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 211,
	0, 670, 671, 673, 0, 672, 674, 212, 213, 418,
	214, 699, 215, 700, 701, 0, 216, 0, 217, 0,
	218, 0, 0, 692, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 679, 680, 657, 724, 0,
	0, 0, 0, 0, 226, 227, 702, 703, 704, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 690, 0,
	375, 0, 231, 232, 233, 234, 686, 688, 727, 0,
	378, 238, 0, 235, 0, 726, 236, 705, 237, 706,
	707, 708, 709, 710, 0, 668, 0, 728, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 691, 730, 247, 248, 731, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 0, 0, 658, 687, 261,
	711, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 681, 268, 269, 270, 271,
	272, 0, 273, 682, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 712, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 1598, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 675,
	311, 299, 300, 312, 737, 313, 713, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 714, 318, 319,
	683, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 715, 716, 0, 0, 332,
	333, 684, 685, 656, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 676, 342, 0, 408, 343, 344,
	345, 409, 717, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 661, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 1597, 0, 0,
	678, 0, 0, 639, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 677, 361, 362, 363, 0, 198, 689, 0,
	669, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 211,
	0, 670, 671, 673, 0, 672, 674, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 679, 680, 0, 724, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 690, 0,
	375, 0, 231, 232, 233, 234, 686, 688, 727, 0,
	378, 238, 0, 235, 0, 726, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 728, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 691, 730, 247, 248, 731, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 0, 0, 0, 687, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 681, 268, 269, 270, 271,
	272, 0, 273, 682, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 675,
	311, 299, 300, 312, 737, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	683, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 684, 685, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 676, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 953, 0, 793, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 2191, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 797, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 723,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 724, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 725, 0,
	230, 374, 0, 375, 0, 231, 232, 233, 234, 376,
	377, 727, 0, 378, 238, 0, 235, 0, 726, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	728, 239, 240, 241, 729, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 730, 247, 248, 731, 0,
	249, 250, 0, 0, 251, 0, 252, 732, 253, 254,
	256, 389, 255, 733, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 734, 267, 735, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 736, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 146, 308, 398, 307,
	309, 310, 0, 311, 299, 300, 312, 737, 313, 399,
	400, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	401, 318, 319, 402, 0, 322, 323, 148, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 956, 410, 0, 0, 346, 613,
	0, 185, 140, 347, 348, 349, 350, 351, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	118, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 776, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 146,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 956, 410, 0,
	0, 346, 0, 0, 185, 140, 347, 348, 349, 350,
	351, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 770, 0, 1227, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 776, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 146, 308, 398, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 399, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 401, 318, 319, 402,
	0, 322, 323, 148, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	956, 410, 0, 0, 346, 613, 0, 185, 140, 347,
	348, 349, 350, 351, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 770, 0, 1227, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 146, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 956, 410, 0, 0, 346, 1933, 0,
	185, 140, 347, 348, 349, 350, 351, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 118,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 776, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	398, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 399, 400, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 401, 318, 319, 402, 0, 322, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 769, 0, 185, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	770, 0, 775, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 776, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 185, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 770, 0, 775, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 776, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 399, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 401, 318,
	319, 402, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 0, 0, 185,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 770, 0, 775, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 185, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 1262, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 185, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 1743, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 399, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 401, 318,
	319, 402, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 0, 0, 185,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 2107, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 661,
	650, 651, 648, 649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 1230, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 693, 355, 694, 194, 695, 696, 0,
	195, 359, 360, 196, 197, 0, 0, 697, 698, 363,
	0, 198, 364, 0, 797, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	723, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 699, 215, 700, 701, 0,
	216, 0, 217, 0, 218, 0, 0, 692, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 657, 724, 0, 0, 0, 0, 0, 226, 227,
	702, 703, 704, 0, 228, 0, 229, 0, 0, 725,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 727, 0, 378, 238, 0, 235, 0, 726,
	236, 705, 237, 706, 707, 708, 709, 710, 0, 668,
	0, 728, 239, 240, 241, 729, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 730, 247, 248, 731,
	0, 249, 250, 0, 0, 251, 0, 252, 732, 253,
	254, 256, 389, 255, 733, 257, 258, 260, 259, 0,
	0, 658, 390, 261, 711, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 734, 267, 735, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 712, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 736, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 737, 313,
	713, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 714, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 715,
	716, 0, 0, 332, 333, 406, 407, 656, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 717, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 1009,
	0, 793, 792, 0, 0, 0, 790, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 797, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 723, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 724, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 725, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 376, 377, 727, 0, 378, 238, 0, 235,
	0, 726, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 728, 239, 240, 241, 729, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 730, 247,
	248, 731, 0, 249, 250, 0, 0, 251, 0, 252,
	732, 253, 254, 256, 389, 255, 733, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 734, 267,
	735, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 736, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	737, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 948, 0, 793, 792, 0, 0, 0, 790, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 797, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 724, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 947, 377, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 737, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 914, 0, 793, 792, 0, 0, 0,
	790, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	797, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 723, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 724, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 725, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 913, 377, 727, 0,
	378, 238, 0, 235, 0, 726, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 728, 239, 240,
	241, 729, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 730, 247, 248, 731, 0, 249, 250, 0,
	0, 251, 0, 252, 732, 253, 254, 256, 389, 255,
	733, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 734, 267, 735, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 736, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	311, 299, 300, 312, 737, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 786, 0, 793, 792, 0,
	0, 0, 790, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 797, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 723, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	724, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 725, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 788, 377,
	727, 0, 378, 238, 0, 235, 0, 726, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 728,
	239, 240, 241, 729, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 730, 247, 248, 731, 0, 249,
	250, 0, 0, 251, 0, 252, 732, 253, 254, 256,
	389, 255, 733, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 734, 267, 735, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 736, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 737, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 501, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 181, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 398, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 399,
	400, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	401, 318, 319, 402, 0, 322, 323, 180, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 178, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 184, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 181, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 180, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 793, 792, 346,
	0, 0, 790, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 184, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 797, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 723, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	724, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 725, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	727, 0, 378, 238, 0, 235, 0, 726, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 728,
	239, 240, 241, 729, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 730, 247, 248, 731, 0, 249,
	250, 0, 0, 251, 0, 252, 732, 253, 254, 256,
	389, 255, 733, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 734, 267, 735, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 736, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 737, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 181,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 180, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 793, 792, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	184, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 797, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 723, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 724, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 725, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 727, 0, 378, 238,
	0, 235, 0, 726, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 728, 239, 240, 241, 729,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	730, 247, 248, 731, 0, 249, 250, 0, 0, 251,
	0, 252, 732, 253, 254, 256, 389, 255, 733, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	734, 267, 735, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	736, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 737, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 793,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 184, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 797, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	723, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 724, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 725,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 727, 0, 378, 238, 0, 235, 0, 726,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 728, 239, 240, 241, 729, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 730, 247, 248, 731,
	0, 249, 250, 0, 0, 251, 0, 252, 732, 253,
	254, 256, 389, 255, 733, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 734, 267, 735, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 736, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 737, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 1675, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 1673, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	1719, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 1678, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 1717, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 1677,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 1718, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 1675, 198, 364, 0,
	0, 1670, 199, 200, 201, 0, 203, 204, 205, 202,
	1673, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 1678, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 1669, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 1677, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 1676,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 930, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 776, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 399, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 401, 318,
	319, 402, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 782, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 784, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 776, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 778, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 231, 232, 233, 234, 780,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 776,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 398, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 399,
	400, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	401, 318, 319, 402, 0, 322, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 430, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 429, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	428, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 1658, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 2259, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 2259, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 2256, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 776, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	1420, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 399, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 401, 318, 319, 402, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1418, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 1400,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	527, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 988, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 529, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 399, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 401, 318, 319, 402, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 524, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1277, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 1276, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 527, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 988, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 529, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 398, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 399, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 401, 318, 319, 402,
	0, 322, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 524, 404, 405, 0, 0, 332, 989,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 527, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 518, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 529,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 972, 310, 0,
	311, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 524, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 945, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 231, 232, 233, 234, 944, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 399, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 401, 318,
	319, 402, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 941, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 940, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 938, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 231, 232, 233, 234, 937,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 398, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 399,
	400, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	401, 318, 319, 402, 0, 322, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 934, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	933, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 922, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 920, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 231, 232, 233, 234, 919,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 398, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 399,
	400, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	401, 318, 319, 402, 0, 322, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 916, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 909, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 231, 232, 233,
	234, 911, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	398, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 399, 400, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 401, 318, 319, 402, 0, 322, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 800,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 802, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	798, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 398, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 399, 400, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 401, 318, 319, 402, 0, 322,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 527, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 518, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 517, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 529, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 519, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 520, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 524, 404, 405, 0, 0, 332, 522, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 509, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 510, 303, 304,
	305, 306, 0, 308, 398, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 399, 400, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 401, 318, 319, 402,
	0, 322, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 507, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 499, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 398, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 399, 400, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 401, 318,
	319, 402, 0, 322, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 449, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 1980, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 1978, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 231, 232, 233, 234,
	1967, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 398,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	399, 400, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 401, 318, 319, 402, 0, 322, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	510, 303, 304, 305, 306, 0, 308, 398, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 399, 400,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 401,
	318, 319, 402, 0, 322, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 1287, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 398, 307, 309, 310, 0,
	0, 299, 300, 312, 0, 313, 399, 400, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 401, 318, 319,
	402, 0, 322, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 753, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 398, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 399, 400, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 401, 318, 319, 402, 0,
	322, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 0, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 0, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 0, 0, 302, 303, 304, 305, 306, 0,
	308, 398, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 399, 400, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 401, 318, 319, 402, 0, 322, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 1081, 1082, 0, 1111, 1112, 1113, 1121, 1122, 1123,
	0, 0, 0, 0, 1099, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 1125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 1083,
	0, 0, 0, 1099, 0, 1103, 0, 1114, 0, 0,
	0, 0, 1100, 0, 1084, 0, 0, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 1107, 1108, 1109, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	1107, 1108, 1109, 0, 0, 0, 0, 1124, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 1118, 1126, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 0,
	1098, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 1081, 1082, 1098,
	1111, 1112, 1113, 1121, 1122, 1123, 0, 0, 0, 0,
	1099, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 1125, 1117, 0, 0, 1095, 1096,
	1102, 1101, 1097, 1120, 0, 1094, 1092, 1093, 1085, 1086,
	1087, 1088, 1090, 1091, 0, 1083, 0, 0, 0, 0,
	0, 1103, 1915, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 1117, 0, 0, 1095, 1096, 1102,
	1101, 1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 1914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1107, 1108, 1109,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 1081,
	1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 0, 0,
	0, 0, 1099, 0, 1118, 1126, 1114, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1125, 0, 0, 0,
	0, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 1116, 0, 1103, 0, 0, 0, 0, 1104, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 1107,
	1108, 1109, 0, 0, 0, 0, 0, 1089, 1110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1118, 1126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 1124, 1098, 1081, 1082, 0,
	1111, 1112, 1113, 1121, 1122, 1123, 0, 0, 0, 0,
	1099, 0, 0, 1116, 1114, 0, 0, 0, 0, 0,
	1104, 1084, 0, 0, 1125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 0, 1111,
	1112, 1113, 1121, 1122, 1123, 1083, 1115, 0, 0, 1099,
	0, 1103, 0, 1114, 0, 0, 0, 0, 1100, 0,
	1084, 1117, 0, 1125, 1095, 1096, 1102, 1101, 1097, 1120,
	0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091,
	1110, 0, 0, 0, 1083, 0, 0, 0, 1866, 0,
	1103, 0, 0, 0, 0, 1105, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1107, 1108, 1109,
	0, 0, 1119, 0, 0, 1089, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 1107, 1108, 1109, 0,
	0, 0, 0, 1124, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 1118, 1126, 0, 0, 0, 1104, 0,
	0, 0, 0, 1117, 0, 0, 1095, 1096, 1102, 1101,
	1097, 1120, 1124, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 1115, 0, 2539, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 1098, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 1081, 1082, 1098, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	1125, 1117, 0, 0, 1095, 1096, 1102, 1101, 1097, 1120,
	0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091,
	0, 1083, 0, 0, 2489, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	1117, 0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0,
	1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0,
	0, 0, 0, 2443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 1081, 1082, 0, 1111, 1112,
	1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099, 0,
	1118, 1126, 1114, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1116, 0, 1103,
	0, 0, 0, 0, 1104, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 1089, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1118, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 1124, 1098, 1081, 1082, 0, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 1116,
	1114, 0, 0, 0, 0, 0, 1104, 1084, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1115, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 1110, 0, 0, 0,
	2413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 1119, 0,
	0, 1089, 0, 0, 1098, 1081, 1082, 0, 1111, 1112,
	1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099, 0,
	1118, 1126, 1114, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1116, 0, 1103,
	0, 0, 0, 0, 1104, 0, 1100, 0, 0, 1117,
	0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	1115, 0, 2408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 1089, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1118, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 1124, 1098, 1081, 1082, 0, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 1116,
	1114, 0, 0, 0, 0, 0, 1104, 1084, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1115, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 1110, 0, 0, 0,
	2404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 1119, 0,
	0, 1089, 0, 0, 1098, 1081, 1082, 0, 1111, 1112,
	1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099, 0,
	1118, 1126, 1114, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1116, 0, 1103,
	0, 0, 0, 0, 1104, 0, 1100, 0, 0, 1117,
	0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	1115, 0, 2338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 1089, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1118, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 1124, 1098, 1081, 1082, 0, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 1116,
	1114, 0, 0, 0, 0, 0, 1104, 1084, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1115, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 1110, 0, 0, 0,
	2304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 1119, 0,
	0, 1089, 0, 0, 1098, 1081, 1082, 0, 1111, 1112,
	1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099, 0,
	1118, 1126, 1114, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1116, 0, 1103,
	0, 0, 0, 0, 1104, 0, 1100, 0, 0, 1117,
	0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	1115, 0, 2303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 1089, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1118, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 1124, 1098, 1081, 1082, 0, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 1116,
	1114, 0, 0, 0, 0, 0, 1104, 1084, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1115, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 1110, 0, 0, 0,
	2268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 1119, 0,
	0, 1089, 0, 0, 1098, 1081, 1082, 0, 1111, 1112,
	1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099, 0,
	1118, 1126, 1114, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1116, 0, 1103,
	0, 0, 0, 0, 1104, 0, 1100, 0, 0, 1117,
	0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	1115, 0, 2110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 1089, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1118, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 1124, 1098, 1081, 1082, 0, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 1116,
	1114, 0, 0, 0, 0, 0, 1104, 1084, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1115, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 1110, 0, 0, 0,
	2086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 1119, 0,
	0, 1089, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 1117,
	0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	1115, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	1081, 1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 0,
	0, 0, 0, 1099, 0, 0, 1119, 1114, 0, 0,
	0, 0, 1098, 0, 1084, 0, 0, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 1081,
	1082, 1100, 1111, 1112, 1113, 1121, 1122, 1123, 0, 0,
	0, 0, 1099, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1125, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 0, 1083, 1836, 1106,
	1107, 1108, 1109, 1103, 0, 0, 0, 0, 1089, 2602,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 1107,
	1108, 1109, 0, 0, 1116, 0, 0, 1089, 0, 1906,
	0, 1104, 1905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 1126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 2601, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	1104, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 1117, 0, 0, 1095, 1096, 1102,
	1101, 1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 0, 1111, 1112, 1113,
	1121, 1122, 1123, 0, 0, 0, 0, 1099, 0, 0,
	0, 1114, 0, 0, 0, 0, 1809, 0, 1084, 0,
	0, 1125, 0, 1117, 0, 0, 1095, 1096, 1102, 1101,
	1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 1083, 0, 0, 0, 0, 1634, 1103, 0,
	0, 0, 0, 1081, 1082, 1100, 1111, 1112, 1113, 1121,
	1122, 1123, 0, 0, 0, 0, 1099, 0, 0, 0,
	1114, 0, 0, 0, 1633, 0, 0, 1084, 0, 0,
	1125, 0, 1810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 1106, 1107, 1108, 1109, 1103, 0, 0,
	0, 0, 1089, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 1126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1107, 1108, 1109, 0, 0, 1116, 0,
	0, 1089, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 1104, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	1081, 1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 0,
	0, 0, 0, 1099, 0, 0, 1119, 1114, 0, 0,
	0, 0, 1098, 0, 1084, 0, 0, 1125, 1117, 0,
	0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092,
	1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 1083, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	1095, 1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 0, 0, 0, 1106,
	1107, 1108, 1109, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 1081, 1082, 0, 1111, 1112, 1113, 1121, 1122,
	1123, 0, 0, 0, 0, 1099, 0, 1118, 1126, 1114,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 1125,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 1116, 0, 1103, 0, 0, 0,
	0, 1104, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 610, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 1107, 1108, 1109, 0, 0, 0, 0, 0,
	1089, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 1118,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 0, 1124, 1098,
	1081, 1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 0,
	0, 0, 0, 1099, 0, 0, 1116, 1114, 0, 0,
	0, 0, 0, 1104, 1084, 0, 0, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	1082, 0, 1111, 1112, 1113, 1121, 1122, 1123, 1083, 1115,
	0, 0, 1099, 0, 1103, 0, 1114, 0, 0, 0,
	1907, 1100, 0, 1084, 1117, 0, 1125, 1095, 1096, 1102,
	1101, 1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 1110, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 1105, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	1107, 1108, 1109, 0, 0, 1119, 0, 0, 1089, 0,
	0, 1098, 0, 1912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 1126, 0,
	0, 0, 0, 0, 2090, 0, 0, 0, 1106, 1107,
	1108, 1109, 0, 0, 0, 0, 1124, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 1118, 1126, 0, 0,
	0, 1104, 0, 0, 0, 0, 1117, 0, 0, 1095,
	1096, 1102, 1101, 1097, 1120, 1124, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 0, 0, 1115, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 0, 0, 1098,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 0, 1081, 1082, 1098, 1111,
	1112, 1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 1125, 1117, 0, 0, 1095, 1096, 1102,
	1101, 1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 1083, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 1117, 0, 0, 1095, 1096, 1102, 1101,
	1097, 1120, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 1107, 1108, 1109, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 1081, 1082,
	0, 1111, 1112, 1113, 1121, 1122, 1123, 0, 0, 0,
	0, 1099, 0, 1118, 1126, 1114, 0, 0, 0, 1865,
	0, 0, 1084, 0, 0, 1125, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	1116, 0, 1103, 0, 0, 0, 0, 1104, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 1107, 1108,
	1109, 0, 0, 0, 0, 0, 1089, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 1118, 1126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 1124, 1098, 1081, 1082, 0, 1111,
	1112, 1113, 1121, 1122, 1123, 0, 0, 0, 0, 1099,
	0, 0, 1116, 1114, 0, 0, 0, 0, 0, 1104,
	1084, 0, 0, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 0, 1111, 1112,
	1113, 1121, 1122, 1123, 1083, 1115, 0, 0, 1099, 0,
	1103, 0, 0, 0, 0, 0, 0, 1100, 0, 1084,
	1117, 0, 1125, 1095, 1096, 1102, 1101, 1097, 1120, 0,
	1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 1110,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 1105, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 1107, 1108, 1109, 0,
	0, 1119, 0, 0, 1089, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1107, 1108, 1109, 0, 0,
	0, 0, 1124, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 1118, 1126, 0, 0, 0, 1104, 0, 0,
	0, 0, 1117, 0, 0, 1095, 1096, 1102, 1101, 1097,
	1120, 1124, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 0, 1115, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 1098, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 1081, 1082, 1098, 1111, 1112, 1113, 1121, 1122,
	1123, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 1125,
	1117, 0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0,
	1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0,
	1083, 0, 0, 0, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 1117,
	0, 0, 1095, 1096, 1102, 1101, 1097, 1120, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 1107, 1108, 1109, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1329, 1359, 1318, 1350, 1349, 1118,
	1126, 1320, 1319, 0, 0, 0, 0, 1361, 1360, 0,
	0, 549, 0, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 554, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 0, 0, 1104, 552, 1355, 0, 1347, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 553, 0, 0, 0, 0,
	555, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	1344, 1342, 1343, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 556, 0,
	0, 0, 0, 1110, 1328, 0, 0, 0, 0, 0,
	0, 1333, 1331, 1334, 1335, 1336, 1337, 1338, 1105, 1358,
	575, 0, 0, 0, 0, 0, 1322, 1321, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 557, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	558, 559, 0, 0, 1348, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 0,
	0, 0, 0, 560, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 1117, 578, 0, 1095,
	1096, 1102, 1101, 1097, 1120, 0, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 1326, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 1363, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 1356,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 551, 568, 579, 0, 0,
	0, 1327, 0, 0, 0, 0, 1362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 0, 0, 569, 0, 0, 0, 574, 0, 0,
	0, 0, 580, 0, 0, 0, 0, 566, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573,
}
var sqlPact = [...]int{

	275, -1000, -23, -1000, -1000, -1000, 155, -1000, -1000, -1000,
	149, 148, 147, -1000, 145, 140, 135, 133, 130, 129,
	128, 127, 123, 119, 117, -1000, -1000, 114, -1000, -1000,
	-1000, -1000, 112, 111, 109, -1000, 106, 989, 23775, 105,
	101, 1413, 36691, 95, -1000, 1013, 27505, 949, 1380, -1000,
	93, 981, 36353, 3647, 2701, 1113, 1670, 36012, 23434, 1668,
	2697, 35671, -1000, -1000, -1000, 35330, 92, 85, 84, 83,
	82, -1000, -1000, 34989, 81, 80, 75, 73, 72, 70,
	64, 62, 61, 53, 52, 51, 49, 48, 46, -1000,
	40, 38, 37, -1000, 44009, 36, 30, 28, 1109, 27,
	26, 25, 22, -1000, -1000, 21, 20, 19, 18, 17,
	99, 16, 14, 13, 10, 904, -1000, 1264, 463, 1581,
	9239, 1046, 1038, 1036, 1032, 1021, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38719, 36691, 7, -51, 5, -1000, 2028, 644, 19619, 275,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 27164, 26823, 23093, 34648, 34307, 6697, 773, -1000, -27,
	25127, 36691, -1000, 100, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14756, 14377, 536, 100, -1000, -1000,
	-1000, 33966, 22741, 33625, 1542, 33284, -1000, -1000, 32943, -1000,
	-1000, 1805, 1695, 1687, 26482, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 32605, 32264, 31923, 31582, 22389, 487, -1000,
	-1000, -1000, 17904, -1000, -1000, -1000, -1000, 4, -1000, 3,
	1, -1000, -3, -4, -6, -10, -11, -12, -1000, -15,
	-16, -1000, -17, -18, -1000, -19, -20, 1076, 917, 1020,
	31241, 867, 1279, -1000, -1000, -26, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36691, -1000, 15809, -1000, 485, -1000,
	1671, -1000, 15809, -1000, 1271, -1000, -1000, -1000, -1000, -1000,
	36691, -1000, -1000, -1000, -1000, -1000, -1000, 2189, 1178, 483,
	30900, -1000, 1391, -1000, 597, 767, -1000, -1000, -1000, 9941,
	171, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1580, 22037, 1223, 1975, 1793, 2188, 1482, 1792, 1783,
	1758, 1748, 1746, 2187, 914, 2186, 1840, 1050, 2185, 1714,
	2169, 1469, 669, 2184, 1669, 1667, -1000, -1000, -1000, -1000,
	919, -1000, -1000, -1000, 28857, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1264, -1000, -1000, -1000,
	-1000, -1000, -1000, 813, 923, -1000, 1599, 1880, 1880, 1880,
	2003, 278, 267, -1000, 99, -1000, 1527, -1000, 1168, -1000,
	-1000, -1000, 43536, -1000, -1000, 15809, 15809, 15809, 15809, 15809,
	1214, -1000, 515, -1000, 481, 479, 7793, -1000, -1000, 2163,
	-1000, -1000, -1000, 276, -1000, -1000, 15809, 100, -1000, -1000,
	-1000, -1000, 478, 2180, -1000, 642, -1000, -1000, -1000, 602,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1694,
	477, 476, 474, -1000, 471, -1000, -1000, 469, 468, 464,
	443, 439, 438, 436, 434, 432, 431, 430, 428, 426,
	425, 424, 1015, -1000, 627, -1000, -1000, 627, 627, -1000,
	395, 395, 398, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 395, -1000, -1000, -1000, 581, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 422, 1213,
	-1000, -1000, 1213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	771, 38043, -36, 36691, -1000, 421, -36, -1000, -1000, 420,
	-1000, 10292, 10292, -1000, -1000, -1000, 15809, -1000, 1627, -1000,
	3520, -171, 296, 549, -1000, 18590, 21335, -1000, -1000, 1338,
	1810, 796, -1000, 974, 1809, 473, -1000, 608, 1806, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1201,
	-1000, 865, 1804, -99, 1719, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24113, 25127, -27, -28, -1000, -1000, -1000, 6347, 43536,
	-1000, 43536, -1000, 837, 20305, 100, -1000, -1000, -1000, -1000,
	408, 1343, 604, 1342, -1000, 303, -1000, 30559, 604, 1340,
	-1000, -1000, -1000, 28857, -1000, 36691, -1000, 36691, -1000, 903,
	-1000, 38381, 122, 1803, -1000, -1000, 122, 1796, -1000, 120,
	1795, -1000, -1000, 1187, 1780, -1000, -83, 1774, -1000, -1000,
	-1000, 15809, -50, -1000, -1000, -1000, 644, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 30218, 24451, 1215, 571, 43536, 2057, 43955, 24113,
	43536, 24451, -1000, -1000, 36691, -1000, 15809, -1000, 2048, 1275,
	-37, -1000, -1000, -1000, -1000, -1000, 1406, 1398, 731, 1066,
	9941, 9941, 1893, -1000, 162, 6697, -1000, -1000, -1000, -1000,
	29877, -1000, -1000, -1000, 1133, 36691, -1000, -1000, 1692, -1000,
	24451, 36691, -1000, 36691, -1000, 36691, -1000, 36691, -1000, 36691,
	-1000, -1000, -1000, -1000, -1000, 3226, -1000, 1690, -1000, -1000,
	36691, -1000, -1000, -1000, 1373, -1000, -1000, -1000, 29539, 29198,
	-1000, 988, 806, -1000, -1000, 134, -1000, -1000, 1599, 36691,
	1941, 596, 1520, 1680, 665, 1257, 1478, 13998, 1456, 15809,
	99, -1000, -1000, 99, 99, 8860, -1000, -1000, -1000, 36691,
	-1000, 5289, 43955, 6697, 790, 15809, 15809, 15809, 15809, 15809,
	15809, 15809, 15809, 15809, 15809, 15809, 15809, 15809, 15809, 15809,
	15809, 15809, 15809, 15809, 15809, 15809, 15809, 15809, 15809, 15809,
	15809, 15809, 15809, 15809, 15809, 15809, 15809, 1403, 15809, 765,
	15809, 15809, 15809, 15809, 1454, 1117, 331, 1144, -1000, 2141,
	2141, 2141, 43575, 43575, 374, 515, -1000, 15809, -1000, 118,
	15809, 267, 41555, -35, 7428, -1000, -1000, -1000, 13647, 625,
	43536, 100, 7049, -1000, 2162, 848, 1678, 1575, 407, 546,
	534, 518, 497, 15809, 15809, 13296, 12917, 12538, 16511, 12159,
	15809, 8158, 15809, 15809, 15809, 15809, 11780, 11401, -1000, 402,
	-1000, -1000, -1000, -1000, 2161, -1000, -1000, 2159, -1000, 789,
	779, 2157, -1000, -37, -1000, 38043, -1000, 36691, -36, 2047,
	36691, 15809, 141, -1000, 42403, -1000, 141, -60, 43536, 1485,
	1484, 19962, 1318, 1228, 1228, 1228, -1000, 399, 505, 549,
	5636, 11022, -1000, 27843, 1232, 183, 263, 18247, 1627, -1000,
	36691, -45, 1053, -1000, 26141, 1936, 1922, 1909, 28857, 2022,
	118, 1937, 1663, 762, 28857, 1175, 24113, 1927, 759, 2018,
	118, 1659, 756, 36691, 6697, 1916, 554, -1000, 36691, -1000,
	-1000, -1000, 1644, -62, -1000, -1000, 25803, 2046, 1765, -1000,
	1101, -1000, 1757, 2045, 36691, 1269, 1329, -1000, -1000, 801,
	1752, 621, 272, 2042, 272, 20649, -1000, 36691, -1000, 36691,
	-1000, -1000, 36691, -1000, 36691, -1000, 36691, 36691, -1000, 36691,
	24113, 24113, -63, 4058, 25465, 751, -1000, 651, 25803, 465,
	-65, -1000, 769, -1000, -1000, -1000, -1000, 261, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 398, 1015, 395, 395, 395, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 581, -1000, -1000, 627,
	627, 627, -1000, -1000, -52, 1632, 578, -68, 694, -37,
	-1000, 1213, -1000, 901, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2174, -1000, 2150,
	-1000, -1000, 2156, -38, -1000, -38, -1000, 6697, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36691, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 593, -1000, -1000, -1000, -1000, -1000,
	-1000, 36691, 36691, 36691, -1000, 28857, 1520, 1680, 606, 1679,
	-1000, 1946, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43536, -1000, 358, -1000, -1000, 43536, 1110, 1510, -1000, 1510,
	-40, -1000, 42344, 1471, 36691, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 590, 507, 507, 872,
	872, 872, 872, 2126, 458, 314, 728, 3415, 3415, 3415,
	3415, 3415, 3415, 3415, 3415, 632, 1206, 1206, 632, 632,
	632, 632, 632, 3415, 3415, 3415, 43575, 5186, 292, 15809,
	15809, 749, 1111, 331, 292, 15809, 292, 292, 292, 292,
	-1000, 1944, -1000, -1000, -1000, -1000, 1623, 394, 16511, 16511,
	-1000, -1000, -1000, 7793, 17211, -1000, -1000, -1000, -1000, 393,
	15809, -1000, 41713, -220, 262, -96, -1000, 15809, 498, -81,
	-1000, 873, -1000, 15809, -1000, -39, 15809, 15809, 15809, 259,
	-1000, 257, -1000, 747, -1000, 745, 741, 740, -1000, 391,
	1225, 389, 388, 15809, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43378, 39717, 256, -1000, 1618, -96, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 255, -1000, 254, -1000, 43256,
	-96, 252, 2833, -1000, 16511, 16511, 16511, 7793, 383, 249,
	-1000, 42029, -1000, 42979, 10643, 10643, 10643, 248, 42940, 15809,
	-96, 39440, 39401, 4909, -85, -86, -1000, -91, -1000, 2154,
	-100, 244, 589, 585, 242, -1000, -1000, 380, -101, -106,
	621, 10292, 19276, 6697, -1000, 621, -1000, 15809, 19962, 19962,
	1311, 1472, 19962, -1000, -1000, -1000, -1000, 27843, 490, 549,
	27843, -1000, 2134, 1384, 234, -1000, -1000, -1000, 36691, 375,
	-1000, 549, 233, 1011, 36691, 36691, 36691, -1000, -1000, 1326,
	37705, 1320, 43955, 36691, -1000, 373, 369, 1468, 1458, 36691,
	36691, 37367, 37029, 36691, 1124, 118, -1000, 582, 366, 36691,
	958, 24113, 605, 572, 36691, 118, -1000, 364, 36691, 954,
	-1000, 569, 1556, 1287, -1000, 830, 1606, 36691, 232, -108,
	-41, 43955, -1000, -1000, -1000, -1000, -1000, 36691, 467, 36691,
	118, 36691, 24113, 24113, 118, 36691, 1736, 1787, 522, 36691,
	1478, 15809, 979, -1000, 18933, 638, 36691, 930, 76, -1000,
	-1000, -1000, 561, 36691, -1000, -1000, 122, 122, -1000, 120,
	1187, -1000, -83, -1000, -1000, -1000, 36691, 24113, -109, -1000,
	660, 659, 654, -1000, 43955, -1000, 512, 661, -1000, 2132,
	586, 36691, 9941, 9941, -1000, 1494, -1000, -1000, 956, -1000,
	1005, -1000, -1000, -1000, -1000, 9941, -1000, -46, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1244, 1096, -1000,
	1110, -1000, 15809, 2127, -1000, -1000, -1000, 8860, -1000, -1000,
	-1000, 36691, -156, 15809, 292, 292, 15809, 16511, 16511, -1000,
	292, -1000, -1000, -1000, -1000, -1000, 1605, 357, 15809, 43955,
	4255, 3851, -111, -1000, 15809, -42, -1000, 15809, -1000, 41433,
	-1000, -1000, 511, 1749, -1000, 15809, 42782, 229, 9590, -1000,
	42660, -48, -48, -1000, 2167, 1327, 1263, 1000, 916, 2122,
	-1000, 20992, 622, 1241, 41275, 5289, 43955, -1000, 15809, -1000,
	-1000, 1603, 15809, -1000, 5289, 43955, 16511, 16511, 16511, 16511,
	16511, 16511, 16511, 16511, 16511, 16511, 16511, 16511, 16511, 16511,
	16511, 16511, 16511, 16511, 16511, 1389, 16511, 2107, 2107, 2107,
	-43, 15809, -1000, 1676, 1603, 15809, 15809, 43955, 226, 225,
	224, -1000, 15809, -96, 15809, 15809, 15809, -1000, -1000, -1000,
	223, -1000, 2108, -1000, -1000, -1000, -1000, 465, -1000, -1000,
	1569, -1000, -103, -1000, 1627, -1000, 1569, 43536, -1000, 1311,
	-1000, 356, 15809, 19962, -1000, 496, -1000, -114, -1000, 27843,
	-1000, 495, -217, -1000, 548, -1000, 549, 355, 36691, 27843,
	-1000, -1000, -1000, 737, 729, 1734, -1000, 1307, -1000, 647,
	-1000, 959, 15809, 17561, 354, 353, 1129, -1000, 1730, 1187,
	1728, 1187, -1000, -45, 1019, -1000, 21685, 15809, -1000, 721,
	-1000, 1029, 21685, -1000, -1000, 15809, -1000, 715, 21685, 586,
	1600, 819, -1000, 829, -1000, 1528, -1000, 25803, 351, 36691,
	343, -1000, 342, -1000, 604, -1000, 341, 36691, 1419, 522,
	24789, -1000, 604, 930, -1000, 43536, -1000, 930, 8509, 1913,
	-116, -1000, -1000, -1000, 621, 20649, 19962, 15809, -117, -1000,
	-1000, -1000, -1000, -46, 1898, 1898, -1000, 2104, -1000, 493,
	222, -1000, 28519, -46, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 36691, 1526, 6697, 36691, 36691, 1249, 41153, -1000, 1904,
	6697, 2138, 292, 3818, 423, 15809, 43955, 43852, -119, 15809,
	15809, -1000, 220, 15809, 491, 43536, -1000, -1000, -1000, 43536,
	15809, 2140, 15809, 218, 216, 215, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 214, -1000, -1000, 39057, 15809, 213,
	-1000, 211, 210, 43536, 1676, 43536, -1000, -1000, 545, 545,
	880, 880, 880, 880, 2107, 2522, 2567, 2276, 1197, 1197,
	1197, 594, 466, 466, 1197, 1197, 1197, 1598, 1394, 339,
	4296, 15809, 207, -1000, -1000, 43536, 43536, 206, -1000, -1000,
	-1000, -96, 3877, 40995, 40873, -1000, 205, 197, 1564, 1997,
	-1000, 19962, 1564, -1000, 36691, 43536, -1000, -171, -1000, 2102,
	-1000, -1000, 1384, -1000, 5996, 27843, 36691, -125, -1000, 36691,
	36691, 36691, 1726, -1000, 2061, -1000, 40715, -127, -1000, 300,
	1969, 15809, -1000, -1000, 337, 17561, 36691, -1000, 1414, 1426,
	683, 36691, -1000, 36691, -1000, 36691, 36691, 36691, -1000, 336,
	100, -132, 36691, 24113, -1000, -133, 36691, -1000, -1000, 24113,
	777, -1000, 1208, 1546, -1000, 17561, 335, 36691, 25803, 2039,
	-1000, 17561, 1260, 1423, 522, 24789, -1000, 801, -1000, -1000,
	-47, -1000, 367, 118, 930, -1000, -49, 43536, 543, 1882,
	-1000, 1835, 489, -1000, -1000, -74, 334, -1000, 542, 538,
	-1000, -75, -1000, 551, -1000, -1000, -1000, -1000, -1000, -1000,
	1904, 15809, 15809, 43852, -134, -1000, 292, 292, -1000, 40593,
	-1000, 43536, -1000, 42660, -1000, -1000, -1000, -1000, 1204, -1000,
	40435, -1000, -1000, -1000, -1000, 16511, 1588, 333, 43955, 40313,
	-1000, -1000, 15809, -1000, -1000, -1000, -1000, 610, 15809, 15809,
	1627, 610, -135, 549, -1000, -1000, -1000, 2092, -1000, -141,
	-1000, -1000, -1000, -1000, 36691, -1000, 36691, -1000, 6697, 36691,
	1673, 1301, -1000, -1000, 1432, 332, 16511, 36691, -1000, 1083,
	17561, 1904, 100, 6697, 1904, 40036, 7049, -142, -143, 1296,
	-1000, 1295, 15809, -1000, 43955, 1187, 1187, -1000, 713, 711,
	15809, 709, -1000, -1000, 701, -1000, -83, 21685, -1000, -1000,
	1993, 1211, -148, 17561, -149, 195, 118, -150, 36691, -1000,
	522, 24789, -1000, 1787, 1800, 36691, 1908, -1000, -1000, 331,
	328, 326, -1000, 28181, 28181, 24113, 24113, 1526, -1000, 36691,
	-1000, 292, 292, -1000, -1000, 194, 1241, 1989, -1000, 1255,
	16511, 43955, -157, -1000, 39997, -1000, 36691, 43536, -96, -1000,
	-1000, 27843, 301, -1000, -1000, 1443, -1000, -1000, 36691, 1305,
	-1000, -1000, 15809, 4296, 323, 1528, 322, -1000, -1000, -1000,
	-1000, -1000, -1000, 1969, -39, -1000, 996, -1000, -1000, 43536,
	1966, -1000, -1000, 36691, 36691, -48, 321, 319, -1000, 1145,
	36691, 1083, -158, -1000, 1528, -1000, 1083, 317, 24789, -1000,
	1419, 804, -159, 36691, -1000, 24113, 24113, -1000, -160, -1000,
	-1000, -1000, -165, -1000, 1041, 15809, 1255, -167, -1000, -1000,
	-84, -1000, 2027, -1000, -1000, -1000, -1000, 1724, 39839, 1350,
	36691, -1000, 36691, 1904, 192, 36691, 646, 6697, -1000, -1000,
	189, 15809, 15809, 316, 315, 312, 1528, 1083, -1000, 1528,
	17561, -1000, 1423, 889, -1000, 621, -1000, -173, -174, -1000,
	-1000, 186, 16160, 16160, -96, -1000, 36691, 311, 1700, -1000,
	1253, 1100, 185, -175, -1000, -1000, 303, -1000, 15809, -1000,
	2140, -181, -182, 36691, 36691, 36691, -1000, 1528, -1000, -183,
	-1000, 20649, -1000, 586, 586, -1000, -1000, -1000, 16861, 1242,
	887, 41970, -1000, -1000, -1000, 36691, -1000, 1259, 1256, 913,
	-1000, -1000, -1000, -1000, -1000, 1350, 43536, -1000, -1000, -184,
	-189, -190, -1000, 1083, -168, -1000, -1000, 2032, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1817, -1000, 649, 1199, 1199,
	1253, 299, 295, 1150, 1528, -1000, 15458, -1000, 2076, -1000,
	-1000, 1411, -1000, -1000, 1151, 1067, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 184, 6697, 182, 6697, -1000, 636,
	-1000, 635, 294, 1410, -59, 15107, 795, 325, -97, -1000,
	-191, -1000, 43536, -1000, 277, -1000, 15107, 1151, -1000, 15107,
	15107, -192, -1000, -1000, -197, -1000, -61, 1067, -126, -1000,
	-1000, 1067, -1000,
}
var sqlPgo = [...]int{

	0, 2632, 2631, 1698, 2630, 2146, 2628, 2579, 2575, 2569,
	2143, 2566, 2564, 2561, 2559, 2558, 2547, 2545, 2544, 2543,
	2538, 2536, 2535, 2534, 2531, 2528, 2524, 2113, 2523, 2094,
	2522, 2520, 2518, 2517, 2516, 35, 2515, 2514, 2511, 1988,
	2510, 2509, 2502, 2500, 1940, 2498, 1934, 2495, 2493, 1932,
	2490, 2487, 2486, 1907, 2483, 1896, 2482, 87, 117, 1885,
	2473, 2465, 1853, 1849, 1829, 2464, 1815, 2463, 2458, 1813,
	1798, 2457, 107, 2456, 2453, 2452, 1774, 1767, 2450, 2448,
	2447, 156, 2444, 1753, 2443, 2442, 2441, 2440, 2439, 2438,
	2437, 2435, 2430, 2428, 2426, 2425, 2416, 2415, 2413, 2412,
	2408, 2407, 2406, 2405, 162, 2403, 2399, 1745, 1714, 2398,
	2392, 29, 24, 9, 61, 111, 148, 3366, 140, 2391,
	2390, 2388, 2384, 2380, 2377, 17, 100, 95, 2374, 122,
	2372, 2371, 57, 34, 21, 16, 71, 89, 2367, 2366,
	2685, 22, 2365, 2363, 132, 2361, 46, 18, 2838, 158,
	157, 113, 127, 2358, 2356, 2355, 51, 121, 10, 7,
	6, 30, 4, 2350, 1, 11, 2349, 2348, 13, 83,
	25, 2346, 36, 126, 2345, 2343, 136, 2342, 60, 90,
	1608, 101, 125, 351, 93, 2341, 69, 8, 67, 2340,
	2337, 161, 38, 77, 154, 116, 2336, 44, 163, 129,
	73, 134, 137, 2335, 2334, 2333, 105, 2331, 120, 109,
	2324, 2322, 84, 2321, 96, 139, 2320, 150, 110, 2319,
	2318, 86, 2317, 128, 2315, 2313, 160, 151, 114, 32,
	48, 72, 26, 1559, 1557, 138, 85, 65, 52, 2312,
	1495, 1352, 1258, 56, 104, 81, 68, 31, 64, 88,
	147, 33, 2311, 2310, 143, 2308, 2307, 2305, 2304, 2301,
	103, 2300, 2299, 2298, 80, 50, 97, 82, 42, 130,
	133, 115, 152, 102, 2294, 78, 124, 2285, 225, 2282,
	2281, 1110, 119, 2279, 2276, 2271, 1044, 408, 394, 54,
	2255, 2254, 79, 76, 2252, 2250, 98, 2249, 118, 112,
	94, 144, 153, 41, 2247, 123, 20, 2246, 63, 28,
	0, 305, 293, 2243, 131, 75, 2241, 2240, 2239, 2237,
	23, 37, 2, 5, 49, 45, 27, 19, 2235, 2234,
	135, 91, 70, 2231, 159, 2222, 2221, 2219, 40, 2218,
	14, 2212, 15, 2211, 2210, 12, 3, 2205, 2203, 146,
	2201, 99, 2200, 2022, 2199, 155, 2198, 2195, 1851, 2194,
	55, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 13, 13,
	14, 23, 17, 25, 12, 20, 18, 16, 16, 22,
	22, 127, 127, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 124, 124,
	129, 129, 129, 131, 131, 128, 128, 123, 123, 27,
	27, 70, 70, 114, 63, 63, 63, 308, 308, 309,
	309, 110, 110, 111, 111, 111, 111, 112, 112, 113,
	113, 113, 37, 37, 37, 29, 29, 29, 29, 29,
	30, 30, 31, 31, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 46,
	46, 47, 47, 47, 47, 47, 47, 48, 48, 48,
	48, 49, 49, 49, 49, 49, 49, 49, 49, 54,
	54, 54, 52, 52, 52, 51, 51, 51, 50, 50,
	50, 53, 53, 53, 182, 182, 181, 181, 185, 185,
	55, 55, 55, 55, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 58, 58, 58, 58,
	58, 58, 58, 277, 277, 276, 56, 56, 252, 252,
	59, 59, 207, 207, 60, 60, 60, 60, 60, 61,
	61, 71, 71, 349, 349, 349, 353, 353, 354, 354,
	355, 355, 355, 355, 355, 355, 355, 351, 351, 66,
	66, 66, 66, 67, 67, 67, 68, 68, 109, 109,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 32,
	33, 33, 34, 34, 35, 35, 77, 77, 77, 79,
	76, 76, 76, 78, 78, 78, 78, 80, 80, 81,
	81, 81, 81, 81, 82, 82, 302, 300, 300, 301,
	301, 154, 154, 154, 154, 154, 155, 155, 155, 307,
	307, 307, 307, 307, 307, 306, 306, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 95, 95, 95, 104,
	104, 104, 104, 104, 104, 104, 84, 84, 89, 89,
	89, 89, 89, 85, 85, 90, 90, 91, 91, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 94,
	94, 94, 94, 93, 93, 100, 100, 100, 100, 100,
	100, 96, 96, 96, 96, 98, 98, 98, 97, 97,
	101, 101, 101, 101, 87, 87, 88, 88, 102, 102,
	103, 103, 103, 103, 103, 99, 99, 99, 350, 350,
	352, 352, 64, 64, 42, 42, 43, 43, 156, 156,
	157, 157, 231, 231, 231, 231, 158, 158, 130, 130,
	130, 159, 159, 160, 160, 161, 161, 161, 163, 163,
	164, 164, 165, 165, 162, 162, 162, 230, 318, 318,
	319, 319, 319, 319, 319, 319, 320, 320, 320, 320,
	320, 320, 320, 316, 316, 317, 314, 314, 315, 315,
	315, 315, 356, 356, 229, 229, 168, 168, 321, 321,
	321, 321, 322, 322, 322, 322, 322, 325, 324, 323,
	323, 323, 323, 323, 263, 263, 263, 106, 106, 44,
	44, 44, 136, 136, 45, 45, 41, 41, 41, 211,
	211, 172, 172, 268, 268, 268, 147, 147, 125, 125,
	125, 19, 21, 21, 15, 15, 15, 15, 15, 15,
	26, 26, 24, 24, 212, 212, 213, 213, 65, 65,
	69, 69, 74, 74, 105, 105, 105, 105, 105, 105,
	28, 28, 28, 28, 36, 36, 36, 36, 73, 73,
	358, 358, 143, 143, 143, 143, 144, 144, 226, 226,
	227, 227, 359, 359, 228, 228, 228, 138, 137, 139,
	139, 40, 40, 40, 132, 132, 133, 133, 134, 134,
	135, 135, 360, 360, 62, 62, 62, 108, 108, 150,
	150, 223, 223, 223, 225, 225, 224, 224, 224, 197,
	197, 197, 107, 107, 177, 177, 187, 187, 188, 188,
	274, 189, 72, 72, 117, 117, 115, 115, 115, 115,
	115, 115, 115, 115, 116, 116, 116, 118, 118, 118,
	118, 118, 118, 118, 121, 121, 121, 122, 122, 122,
	120, 120, 331, 331, 331, 334, 334, 330, 332, 332,
	333, 333, 357, 357, 198, 198, 198, 167, 166, 166,
	170, 170, 169, 171, 171, 267, 267, 267, 195, 195,
	194, 194, 194, 194, 216, 216, 214, 214, 215, 215,
	219, 219, 220, 220, 220, 221, 221, 222, 222, 193,
	193, 248, 248, 218, 218, 217, 119, 119, 119, 176,
	176, 176, 178, 178, 238, 238, 238, 239, 239, 237,
	237, 237, 237, 269, 269, 269, 269, 269, 269, 269,
	269, 347, 347, 347, 348, 348, 266, 266, 270, 270,
	270, 270, 270, 270, 264, 264, 264, 264, 265, 265,
	275, 275, 201, 201, 201, 201, 199, 199, 200, 200,
	271, 271, 271, 271, 196, 196, 272, 272, 272, 232,
	232, 278, 278, 278, 296, 296, 175, 175, 175, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	280, 280, 280, 280, 282, 282, 282, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 295, 295, 295, 295, 295,
	283, 283, 290, 290, 291, 291, 292, 293, 284, 284,
	285, 285, 286, 287, 294, 294, 294, 294, 298, 298,
	288, 288, 288, 288, 288, 289, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	209, 209, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 242, 242, 242, 242, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	326, 326, 326, 326, 326, 326, 326, 326, 328, 328,
	329, 329, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 335, 335, 336, 336, 338, 338, 339, 339,
	340, 341, 341, 341, 342, 343, 343, 337, 337, 344,
	344, 344, 345, 345, 346, 346, 346, 346, 346, 254,
	254, 255, 256, 262, 262, 262, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 145, 145, 145, 145, 145, 184, 184, 183,
	183, 251, 251, 249, 249, 253, 253, 202, 202, 297,
	297, 297, 297, 297, 297, 297, 203, 203, 203, 210,
	204, 204, 205, 205, 205, 205, 205, 245, 246, 206,
	206, 206, 247, 247, 257, 261, 261, 260, 259, 259,
	258, 258, 235, 235, 236, 236, 234, 233, 192, 192,
	191, 191, 190, 190, 361, 361, 186, 186, 273, 273,
	273, 273, 179, 179, 152, 152, 180, 180, 148, 148,
	151, 151, 149, 149, 149, 149, 173, 173, 174, 174,
	146, 146, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 299, 299, 299, 250, 140, 140, 140,
	141, 141, 142, 142, 304, 304, 304, 305, 305, 305,
	305, 303, 303, 303, 303, 303, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 7, 7, 7, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	2, 6, 2, 1, 12, 12, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 7, 1, 3, 2, 4, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 2, 3,
	7, 7, 7, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 1, 0, 9, 9, 6, 7, 5, 3, 5,
	1, 3, 1, 1, 10, 11, 9, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 2, 4,
	7, 3, 3, 0, 6, 3, 11, 14, 4, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 1, 1, 3, 3, 1, 2, 4, 4,
	2, 3, 5, 5, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 1, 0,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 1, 0, 2, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -27, -29, -37, -38,
	-60, -46, -47, -48, -59, -55, -61, -62, -63, -64,
	-56, -70, -69, -71, -74, -32, -72, -65, -66, -75,
	-83, -105, -106, -107, -108, -5, -10, 24, 35, -30,
	-31, 48, 72, -44, -39, 74, 95, -333, 99, -49,
	-53, 103, 110, 113, 135, 143, 229, 235, 256, 258,
	260, 267, -33, -115, -117, 254, -67, -68, -76, -77,
	-78, -79, -109, 279, -84, -85, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, 282, -28, -36, -73, 323, -6,
	-7, -8, -9, -11, -21, -40, -41, -42, -43, -45,
	-331, -50, -51, -52, -54, 112, -118, -116, 376, 255,
	332, 36, 292, 62, 106, 262, -13, -14, -17, -16,
	-18, -15, -23, -25, -22, -24, -26, -19, -20, -12,
	348, 355, -121, -119, -120, -122, 272, 340, 303, 380,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	2, 303, 343, 333, 88, 151, 240, -349, 2, -180,
	303, 88, -149, -140, 369, 4, -310, -312, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 141, 142, 143, 144, 152, 155, 157, 150, 167,
	168, 169, 173, 174, 175, 178, 177, 182, 183, 186,
	187, 190, 192, 194, 195, 198, 196, 200, 201, 203,
	202, 208, 210, 211, 213, 216, 219, 222, 225, 226,
	227, 228, 229, 231, 233, 235, 237, 238, 239, 240,
	241, 243, 244, 246, 247, 248, 249, 250, 254, 252,
	253, 255, 256, 257, 258, 260, 262, 263, 265, 280,
	281, 293, 267, 268, 269, 270, 271, 275, 273, 276,
	277, 279, 282, 284, 287, 291, 292, 294, 297, 298,
	295, 290, 301, 302, 304, 305, 306, 307, 308, 309,
	310, 311, 318, 319, 323, 324, 325, 326, 329, 330,
	331, 332, 334, 337, 338, 339, 344, 349, 350, 351,
	352, 353, 29, 37, 38, 39, 40, 42, 43, 46,
	47, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 145, 146, 149, 156,
	158, 159, 160, 161, 162, 164, 171, 172, 180, 197,
	207, 209, 220, 224, 232, 234, 242, 264, 274, 285,
	286, 296, 299, 313, 314, 315, 320, 321, 336, 340,
	341, 379, 379, 2, 168, 239, -148, -140, 88, 379,
	2, 303, 333, 343, -211, 88, 328, -140, 235, 22,
	2, 97, 155, 331, 330, 22, 231, 273, 305, 307,
	2, 379, 2, 343, 303, 151, 88, 333, -140, 2,
	-58, 2, 376, -57, -5, -39, -49, -59, -55, -10,
	-27, -29, -44, -46, -53, -63, -62, -64, -66, -70,
	-69, -72, -76, -77, -83, -107, -108, 74, 24, 103,
	279, 112, -353, 2, 22, -354, -355, 74, 103, 135,
	272, 155, 97, 330, 303, 2, 168, 2, -140, 2,
	-349, 2, 168, 2, -353, 2, -140, 2, -144, 2,
	267, -140, 379, 379, 379, 379, 379, 187, 56, 264,
	276, -81, 319, -80, 313, -302, -82, 2, -181, 198,
	-140, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 2,
	-104, 276, 35, 56, 22, 61, 89, 136, 151, 152,
	174, 69, 70, 238, 187, 169, 318, 175, 277, 304,
	301, 319, 74, 334, 308, 111, 4, 88, 198, 278,
	313, 379, 379, 379, -357, 2, 303, 379, 379, 379,
	379, 379, 379, 379, 379, 379, -116, -118, -117, 379,
	379, 379, 379, 269, 282, -169, -170, 327, 163, 108,
	218, -115, -117, 2, -331, -104, 276, 2, 56, 22,
	-300, 2, -240, 214, -242, 367, 368, 362, 204, 354,
	-254, 94, -244, -257, 109, 264, 376, -148, -243, 382,
	9, -328, -117, 30, -255, -256, 50, -140, 7, 8,
	5, 6, -146, -280, -250, -289, 322, 116, 206, -326,
	-327, 4, -310, -304, -281, -291, -285, -288, 164, 59,
	80, 81, 84, 82, 85, 278, 333, 51, 29, 114,
	115, 224, 232, 299, 320, 321, 145, 207, 146, 57,
	137, 180, 102, 38, 40, 42, 43, 52, 53, 90,
	92, 93, 125, 126, 127, 156, 158, 159, 160, 161,
	162, 209, 242, 285, 296, 314, 315, 341, -311, -292,
	-293, -286, -287, 75, 117, 134, 154, 147, 166, 170,
	181, 184, 193, 199, 221, 223, 261, 283, -294, -358,
	2, 319, 319, 2, -358, 2, -358, 2, -143, 2,
	319, 316, -334, 243, -330, -140, -334, 379, 379, 381,
	379, -166, -167, 2, 22, 100, 376, 2, -269, 2,
	374, -271, -148, -117, -270, 376, 215, -3, 2, -271,
	145, -148, 2, -271, 145, -148, 2, -308, 145, -306,
	9, -305, 5, 4, -310, -312, -311, 59, 2, -140,
	2, -151, 145, -148, -303, 4, -310, -312, -311, -313,
	22, 25, 26, 27, 28, 30, 31, 32, 33, 44,
	50, 51, 55, 58, 60, 69, 74, 79, 80, 82,
	81, 83, 84, 85, 94, 96, 98, 100, 101, 104,
	106, 108, 116, 118, 130, 132, 133, 135, 138, 140,
	148, 151, 153, 163, 165, 176, 179, 185, 188, 189,
	204, 205, 206, 212, 214, 215, 217, 218, 230, 236,
	245, 259, 272, 278, 288, 300, 303, 312, 316, 317,
	322, 327, 328, 333, 335, 342, 343, 345, 346, 347,
	348, 316, 381, -180, -173, -140, -234, -233, 378, -240,
	2, -240, 2, 133, 376, -191, -192, -233, -234, 2,
	-181, 145, -308, 145, 2, -181, 2, 151, -140, 145,
	2, -140, 22, 133, 2, 165, 2, 165, 2, -272,
	2, -271, -182, 145, 2, -181, -182, 145, 2, -152,
	145, 2, -151, -140, 145, 2, -309, 145, 2, -308,
	-207, 376, -277, 2, -276, -305, 340, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 276, 214, 381, -181, -240, -252, 376, 133,
	-240, 214, -140, 2, 280, 2, 376, -81, 54, 319,
	-227, 2, -228, -137, -138, -139, 167, 237, 241, 353,
	316, 359, 133, -300, -185, 378, -104, 2, -308, 2,
	280, 2, 238, 277, 56, 133, 2, 2, -350, 2,
	214, 133, 2, 133, 2, 133, 2, 133, 2, 133,
	2, 2, 238, 277, 2, 130, 2, 318, 2, 2,
	133, 2, 5, 2, 167, 237, 293, 2, 303, 343,
	2, 133, 133, 353, 2, -196, -271, -169, -170, 303,
	353, 22, -217, -194, 130, -214, -215, 185, 118, 212,
	-198, 22, 100, -198, -198, 45, 377, 377, -104, 280,
	2, 10, 11, 58, 34, 367, 368, 369, 370, 128,
	371, 372, 365, 366, 364, 357, 358, 361, 289, 23,
	71, 360, 359, 64, 191, 266, 119, 120, 121, 122,
	251, 13, 14, 15, 27, 217, 184, 354, 147, 283,
	362, 16, 17, 18, 166, 37, 148, -145, -153, -240,
	-240, -240, -240, -240, 223, -190, -235, 374, -117, 376,
	376, -117, -240, -183, 376, 7, -117, -249, 374, -258,
	-240, -191, 376, 5, 376, 5, -335, 349, 130, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 234, -298,
	344, -298, -298, -282, 376, -282, -283, 376, -282, 350,
	355, 376, -226, -227, -226, 316, -144, 381, -334, -174,
	376, 376, -186, -273, -240, 369, -186, -183, -240, 75,
	-201, 170, 199, 134, 181, 261, 154, 7, -58, -237,
	382, 376, 369, -266, 355, -117, -270, 376, -269, -148,
	376, -127, 252, -126, 21, 24, 103, 338, 109, 290,
	309, 112, 268, 252, 109, 348, 109, 112, 252, 290,
	309, 268, 252, 109, 382, 112, -308, -149, 381, -303,
	369, 294, 377, -179, -148, -192, 376, -168, 204, -136,
	-332, 348, 204, -168, 376, -141, 145, 2, -140, -332,
	204, -272, -150, -148, -150, 279, -140, 31, -129, 381,
	49, 257, 109, -129, 109, -129, 381, 109, -129, 109,
	381, 109, -183, 377, 381, -349, -355, 74, 376, 31,
	-251, -278, -279, -281, -290, -284, -288, -289, 41, 47,
	46, 172, 171, 310, 197, 274, 286, 336, 149, 39,
	213, 157, 4, 156, 158, 159, 160, 161, 162, 285,
	38, 242, 126, 127, 125, 102, 93, 92, 209, 43,
	42, -292, -293, -286, -287, 90, 314, 315, 164, 40,
	53, 52, 341, 296, -309, -349, -302, -183, 31, -227,
	2, -359, 381, 183, -155, 190, 203, 141, 215, 351,
	-307, 5, 4, -250, -263, 94, 187, -289, 8, 368,
	-299, 7, 367, -301, -300, -301, 78, 378, -303, -181,
	22, 281, 2, -302, -352, 130, -349, -302, -302, -302,
	-302, -302, 276, -58, 130, -140, 183, -302, 2, -302,
	2, 303, 151, 303, -129, 381, -217, -194, -148, 65,
	66, 353, -195, -194, -218, -217, 330, -215, -214, -219,
	-240, 22, -222, 124, 200, -240, -242, -116, -116, -116,
	-171, -267, -240, 236, 151, -302, -296, -278, -295, 247,
	248, 246, 250, 249, -278, -303, 313, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, 184,
	147, 283, 37, 148, -240, 316, -240, -240, -240, -240,
	196, 204, 206, 322, 116, 329, 100, 210, -361, 300,
	33, -247, -117, 376, -262, 28, 288, 22, -254, 264,
	376, -235, -240, -236, -184, -183, 377, 381, -184, -253,
	-249, -261, -260, 345, 377, -183, 342, 22, 100, 369,
	2, 7, -208, 352, 195, 91, 142, 194, -209, 271,
	-336, 123, 138, 376, 377, 2, 377, 2, 377, 2,
	377, 2, -240, -240, -202, 2, -297, -183, 4, 352,
	195, 91, 142, 194, 271, -202, 2, -203, 2, -240,
	-183, -204, -241, -242, 367, 368, 362, 376, 264, -205,
	2, -240, -184, -240, 44, 179, 317, -206, -240, 133,
	-183, -240, -240, -240, -183, -183, 2, -183, 2, 376,
	7, 7, 313, 313, 7, -144, -330, 31, -173, -183,
	-176, 381, 133, 31, 4, -176, 377, 381, 170, 170,
	-269, -201, 170, -199, 221, -199, -199, -347, 376, 375,
	-266, -303, 374, 383, -184, 2, -265, -264, 31, -140,
	219, 377, -148, 381, 316, -212, 69, 60, -230, 145,
	60, -314, -140, 69, -315, 55, 328, 236, 132, -212,
	69, -212, 69, 69, -271, 34, -72, 67, 133, 316,
	-271, 228, -308, 67, 316, 34, -72, 133, 316, -151,
	-303, 67, -275, 356, -140, 133, 377, 381, -156, -173,
	-157, -140, -231, -230, -316, -317, -314, 151, 328, 117,
	31, 109, 228, 109, 31, 214, 204, -132, 306, 109,
	-232, 346, -223, -72, 376, 94, 31, -223, -187, -188,
	-274, -189, -148, 376, -140, -181, -182, -182, -151, -152,
	-140, -308, -309, 377, -58, -276, 316, 335, -157, -57,
	24, 74, 103, 377, 381, -175, 30, 374, -208, 376,
	-275, 133, 359, 316, 377, 319, -228, -154, 241, 287,
	253, 275, 8, 7, 7, 381, -303, -351, -140, 276,
	-58, -148, -151, -148, -271, -195, -218, 348, 130, 66,
	-220, -299, 376, 368, -221, 264, 265, 381, -125, 32,
	98, 173, -148, 353, -240, -240, 316, -361, 300, -247,
	-240, 196, 206, 322, 116, 329, 100, 210, 133, 376,
	-241, -241, -183, -244, 376, -183, 375, 385, 377, -240,
	375, 375, 381, -259, -260, 104, -240, -170, 381, -169,
	-240, -183, -183, 377, 377, 316, 316, 316, 316, 376,
	-341, 222, 376, 376, -240, 31, 381, 377, 133, 377,
	377, -210, 230, 377, 10, 11, 367, 368, 369, 370,
	128, 371, 372, 365, 366, 364, 357, 358, 359, 64,
	191, 266, 13, 14, 15, 166, 148, -241, -241, -241,
	-183, 376, 377, -245, -246, 133, 130, 31, -206, -206,
	-206, 377, 133, -183, 381, 381, 381, 377, 377, 377,
	7, 377, 381, 377, 353, 353, 377, 376, 377, 377,
	-232, -273, -178, 2, -269, -303, -232, -240, -269, -269,
	-200, 335, 214, 170, -269, -264, 377, -348, 7, -266,
	-265, 7, -239, -238, 131, 202, 377, -140, 376, -266,
	377, -126, -148, -140, -140, 204, -230, 145, -131, 204,
	-278, -140, 376, 376, 173, 173, -140, -140, 145, -140,
	145, -140, -140, -127, 252, -72, 353, 376, -148, 252,
	-308, 348, 353, -140, -72, 376, -140, 252, 353, -110,
	144, 210, 294, 133, -148, 377, 377, 381, -141, 151,
	-141, -72, -181, -308, -308, -72, -148, 109, -133, 105,
	-360, 359, -140, -216, -214, -240, -197, -225, 259, 214,
	-179, 340, -140, -197, -177, 381, 133, 359, -179, -129,
	-129, -129, -129, -351, -308, 377, -278, 374, 375, 7,
	7, -113, 348, -351, -300, -300, -137, 326, 63, 241,
	-300, 381, 216, 240, 88, 303, -221, -240, -267, -148,
	382, -240, -240, -241, -241, 133, 376, -240, -251, 27,
	27, 377, -184, 381, -236, -240, 377, -249, 106, -240,
	312, 377, 342, -170, -170, -170, 5, 195, 142, 194,
	-209, 194, -209, -209, 7, -342, -140, 376, 346, -169,
	377, -296, -278, -240, -245, -240, -296, -278, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, 100, 204, 210,
	-241, 381, -184, -246, -245, -240, -240, -278, 377, 377,
	377, -183, -240, -240, -240, 377, 7, -57, -193, 138,
	-275, 381, -193, -200, 376, -240, -269, 375, 377, 381,
	-265, 375, 381, 384, 359, -266, 376, -173, -264, 316,
	316, 109, 204, 337, -318, -315, -240, -172, -268, -140,
	-329, 376, -326, -327, -146, 376, 376, -124, 103, 279,
	-213, 109, -129, 109, -129, 316, -212, 69, -243, -146,
	-140, -183, 316, 228, -243, -183, 316, -243, -113, 133,
	302, 294, -158, 150, -231, 376, -141, 376, 376, -168,
	-136, 376, -140, -134, 178, -360, -306, -332, -197, -197,
	-186, 205, 68, 377, -232, -188, -178, -240, 377, -114,
	76, -114, 7, 375, 377, -112, 216, -111, -140, 5,
	-140, -34, -35, 151, -303, -140, -148, 215, 377, -125,
	-303, 27, 27, -240, -251, 377, -240, -240, 377, -240,
	375, -240, 5, -240, 377, 377, 377, 377, -343, -140,
	-240, 377, 377, 377, -246, 133, 100, 210, 376, -240,
	377, 377, 381, 377, 377, 377, 377, -248, 140, 45,
	-269, -248, -173, -237, 7, -238, -303, 374, -265, -173,
	377, -140, -140, -230, 109, -319, 69, -320, 58, 117,
	74, 204, 206, 328, 236, 55, 94, 245, 377, 377,
	381, -147, -191, 58, -147, -240, 376, -172, -173, 204,
	94, 204, 94, 87, 324, -140, -140, -148, -140, -140,
	376, 377, -148, -308, 377, -140, -309, 313, -159, -160,
	227, 148, -172, 376, -173, -156, 31, -172, 214, -135,
	177, -360, -306, -132, -224, 376, 214, -72, -197, 359,
	87, 87, 375, 381, 376, 359, 359, 381, 22, 376,
	-125, -240, -240, 377, 377, -170, -337, 227, 377, -241,
	133, 376, -251, 377, -240, -338, 347, -240, -183, -338,
	377, -266, 7, 377, -230, -140, -303, -140, 117, 145,
	206, 173, 376, -241, -148, -229, -356, 73, 298, -268,
	-125, -303, -125, 377, -183, 377, 377, 206, 206, -240,
	-278, -129, -129, 316, 316, -183, 316, 316, -243, 45,
	225, 377, -172, 377, 377, -72, 377, -148, -360, -306,
	-133, 101, -173, 69, -247, 376, 376, -111, -112, -308,
	-308, -35, -173, 377, -170, 45, -241, -251, 377, 377,
	-339, -340, -140, -265, 375, -320, -141, 204, -240, -142,
	376, -158, 376, -147, -170, 245, -128, 58, -140, -140,
	-170, 376, 376, 186, 240, -148, -229, 377, -158, -229,
	376, -306, -134, 330, 205, 377, -140, -309, -309, 377,
	377, -344, 240, 265, -183, 377, 381, 31, 109, 377,
	-321, 192, -140, -173, -125, 377, -148, -123, 335, -303,
	377, -183, -183, 376, 376, 376, -158, -229, -158, -172,
	-135, 279, -232, 377, 377, 377, -345, -346, 37, 325,
	78, -240, -345, -340, -342, 117, -322, -325, -324, 214,
	134, 226, 284, 377, 377, -168, -240, 377, 377, -173,
	-173, -173, -158, 377, -187, -113, -113, -346, 233, 129,
	264, 233, 129, -140, -324, 214, -325, 214, 330, 97,
	-321, 377, 377, 377, -229, -232, 27, -323, 201, 257,
	49, 279, -323, -322, 376, 376, -130, 49, 257, -158,
	-346, 20, 206, 94, -161, 227, -162, 227, 377, -303,
	377, -303, 340, 340, -163, 376, 182, 381, -160, -159,
	-164, -165, -240, 193, 311, -161, 376, 381, 377, 381,
	376, -164, -161, -165, -164, 377, 377, 381, -160, -159,
	-162, 381, -162,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 155,
	157, 0, 0, 164, 166, -2, 0, 0, 0, 187,
	188, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 692, -2, 0, 299, 301, 310, 312,
	314, 316, 317, 0, 367, 369, 371, 373, 375, 377,
	379, 381, 383, 385, 387, 389, 391, 393, 395, 397,
	398, 400, 402, 404, 0, 614, 616, 618, -2, 59,
	61, 63, 65, 67, 77, 168, 170, 172, 174, 177,
	730, 191, 193, 195, 197, 0, -2, 741, 0, 0,
	0, -2, 0, -2, -2, -2, 68, 69, 70, 71,
	72, 73, 83, 84, 85, 86, 75, 79, 80, 82,
	0, 0, 707, 709, 711, 713, -2, 0, 0, -2,
	7, 12, 14, 16, 19, 21, 23, 25, 27, 29,
	31, 33, 35, 37, 39, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 130, 283,
	0, 1312, 1236, 1242, 1243, 1267, 1268, 1269, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 156, 158, 159, 0, 0, 0, 1238, 1312, 165,
	167, 0, 0, 0, 0, 0, 579, 274, 1374, 276,
	278, 0, 0, 0, 0, 181, 182, 183, 184, 185,
	186, 189, 190, 0, 0, 0, 0, 0, 273, 271,
	220, 221, 0, 256, 257, 258, 259, 260, 262, 224,
	226, 228, 229, 231, 233, 235, 237, 239, 241, 242,
	244, 246, 247, 249, 251, 252, 254, 580, 0, 0,
	0, 0, 0, 280, 286, 287, 288, 290, 291, 292,
	293, 294, 295, 296, 0, 136, 0, 483, 269, 267,
	0, 132, 0, 611, 0, 282, 612, 613, 608, 609,
	1401, 637, 300, 302, 311, 313, 315, -2, -2, 1496,
	-2, 331, -2, 339, 1502, 0, 342, 343, 346, -2,
	216, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	386, 388, 390, 392, 394, 396, 399, 401, 403, 405,
	406, 0, 0, 0, 410, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	0, 0, 0, -2, 0, 0, 409, 411, 412, 413,
	0, 615, 617, 619, 0, 568, 732, 60, 62, 64,
	66, 169, 171, 173, 175, 178, -2, 705, 706, 192,
	194, 196, 198, 0, 0, -2, 0, 736, 736, 736,
	0, 0, 706, 704, 0, 303, 0, 305, 0, 410,
	308, 309, 347, 348, 942, 0, 0, 0, 0, 0,
	0, 1015, 1045, 1047, 1467, 1496, 0, 1049, 1050, 0,
	1052, 1054, 1055, 0, 1058, 1059, 1211, 1238, 1252, 1253,
	1254, 1255, 0, 0, 1258, 0, 1260, 1261, 1262, 1113,
	1069, -2, -2, 1250, 870, 871, 872, 873, -2, 1510,
	1073, 1076, 1079, 1082, 1083, 1086, 1087, 0, 1451, 1468,
	1469, 1492, 1493, 1501, 1505, 1506, 1475, 1489, 1476, 1463,
	1473, 1487, 1318, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1276, 904,
	905, 910, 911, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 913, 639,
	621, 630, 639, 623, 624, 625, 626, 627, 628, 629,
	632, 0, 722, 1380, 725, 1249, 723, 708, 710, 0,
	712, 0, 0, 716, 738, 737, 0, 777, 720, 721,
	731, 792, 830, 807, 798, 0, 0, 2, 74, 0,
	1475, 830, 76, 0, 1475, 830, 78, 0, 1475, 137,
	138, 365, 366, 1277, 1278, 1279, 1280, 1510, 81, 0,
	87, 0, 1475, 1241, 0, 1281, 1282, 1283, 1284, 1285,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 0, 0, 284, 285, 1246, 1244, 1245, 0, 160,
	161, 162, 163, 0, 0, 1239, 1220, 1218, 1219, 176,
	547, 1475, -2, 1475, 571, 547, 575, -2, 729, 1475,
	653, 275, 277, 0, 180, 0, 666, 0, 668, 0,
	683, 836, 122, 1475, 201, 214, 122, 1475, 204, 122,
	1475, 207, 1234, 122, 1475, 210, 211, 1475, 213, 139,
	270, 0, 0, -2, 263, 265, -2, 261, 225, 227,
	230, 232, 234, 236, 238, 240, 243, 245, 248, 250,
	253, 255, -2, 0, 0, 0, 482, 0, 0, 0,
	610, 0, 636, 318, 0, 328, 0, 330, 1462, -2,
	-2, 334, 640, 644, 645, 646, 0, 0, 0, 0,
	0, 0, 0, 344, 217, 0, 407, 408, 416, 417,
	0, 420, 441, 453, 0, 0, 424, 426, 481, 428,
	0, 0, 430, 0, 432, 0, 434, 0, 436, 0,
	438, 440, 442, 454, 444, 731, 446, 0, 448, 452,
	0, 457, 458, 459, 0, 461, 462, 463, 0, 0,
	469, 0, 0, 414, 415, 122, 834, -2, 0, 0,
	0, 0, 749, 774, 0, 752, 753, 0, 0, 0,
	0, 734, 735, 0, 0, 0, 694, 695, 304, 0,
	307, 0, 0, 0, 0, 1146, 1147, 1148, 1149, 1150,
	1151, 1154, 1155, 1152, 1153, 1156, 1157, 0, 0, 0,
	0, 0, 1158, 0, 0, 0, 0, 0, 0, 0,
	0, 1159, 1160, 1161, 0, 0, 1163, 0, 1165, 0,
	0, 0, 0, 0, 0, 1225, 0, 0, 1162, 947,
	948, 949, 981, 982, 0, 1046, 1222, 1215, 1048, 0,
	1168, -2, 1169, 0, 0, 1051, 1056, 1057, 1168, 0,
	1210, -2, 0, 1257, 0, 939, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1191, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 907,
	918, 915, 914, 891, 0, 890, 888, 0, 892, 0,
	0, 0, 620, -2, 622, 0, 634, 0, 724, 0,
	0, 0, 781, 1226, 1230, 1231, 781, 0, 1169, 0,
	0, 0, 0, 827, 827, 827, 825, 801, 0, 807,
	0, -2, 831, 819, 0, -2, 798, 0, 0, 832,
	0, 88, 605, 101, 0, 605, 605, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 821, 1237, 0, 1216,
	1217, 152, 0, 0, 1232, 1221, 489, 0, 0, 569,
	0, 728, 0, 0, 0, 0, 1475, 578, 1270, 655,
	0, 840, 0, 669, 0, 0, 837, 0, 199, 0,
	120, 121, 0, 202, 0, 205, 0, 0, 208, 0,
	0, 0, 0, 731, 0, 0, 289, 0, 0, 731,
	0, 1171, 848, 849, 850, 851, 852, 939, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 901, 0, 876, 876, 876, 893,
	894, 902, 903, 908, 909, 920, 921, 923, 925, 919,
	919, 919, 916, 917, 821, 0, 0, 0, 0, -2,
	336, 0, 642, 0, 647, 356, 357, 358, 649, 650,
	340, 359, 360, 361, 362, 363, 364, 0, 564, 0,
	566, 1263, 0, 337, 349, 338, 341, 0, 218, 418,
	419, 421, 422, 423, 427, 0, 478, 429, 431, 433,
	435, 437, 445, 449, 731, 455, 460, 464, 465, 466,
	467, 0, 0, 0, 567, 0, 749, 774, 320, 0,
	473, 0, 698, 748, 699, 773, 775, 750, 751, 756,
	760, 761, 764, 767, 768, 758, 942, 717, 718, 719,
	742, 743, 590, 0, 0, 306, 943, 844, 845, 895,
	896, 897, 898, 899, 944, 945, 0, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, -2, -2, -2,
	-2, -2, -2, -2, -2, 968, 969, 970, 971, 972,
	973, 974, 975, -2, -2, -2, 979, 980, -2, 1164,
	1166, 0, 1225, 0, -2, 0, -2, -2, -2, -2,
	993, 0, 995, 998, 1000, 1002, 0, 0, 0, 0,
	1224, 1012, 1202, 0, 0, 1143, 1144, 1145, 997, 0,
	0, 1223, 1214, 0, 0, 1167, 1053, 0, 0, 0,
	1175, 1209, 1205, 0, 1060, 741, 0, 0, 0, 0,
	1067, 0, 1266, 926, 927, 928, 929, 930, 931, 940,
	1123, 0, 0, 0, 1074, 1075, 1077, 1078, 1080, 1081,
	1084, 1085, 0, 0, 0, 1091, 0, 1178, -2, -2,
	-2, -2, -2, -2, -2, 0, 1093, 0, 1095, 1169,
	1188, 0, 0, 1016, 0, 0, 0, 0, 1496, 0,
	1098, 1169, 1196, 0, 0, 0, 0, 0, 1169, 0,
	1201, 0, 0, 0, 0, 0, 1109, 0, 1111, 0,
	0, 0, 0, 0, 0, 633, 726, 0, 0, 0,
	840, 0, 0, 0, 1229, 840, 776, 0, 0, 0,
	0, 0, 0, 822, 826, 823, 824, 0, 0, 807,
	819, 789, 0, 0, 0, 796, 797, 818, 0, 817,
	806, -2, 0, 0, 0, 0, 0, 604, 103, 1475,
	0, 124, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	1240, 0, 142, 0, 1247, 0, 0, 0, 0, 0,
	488, 1246, 490, 492, 493, 494, 495, 1271, 0, 1271,
	0, 0, 0, 0, 0, 0, 0, 657, 663, 0,
	755, 0, 681, 671, 0, 0, 0, 681, 685, 686,
	688, 689, 0, 0, 838, 215, 122, 122, 1235, 122,
	122, 140, 212, 272, 222, 264, 0, 0, 0, 266,
	0, 0, 0, 268, 0, 841, 843, 0, 853, 0,
	151, 0, 0, 0, 329, 0, 641, 648, 0, 353,
	0, 355, 565, 1265, 1264, 0, 219, 480, 297, 447,
	450, 475, 476, 477, 835, 702, 703, 0, 0, 474,
	0, 762, 0, 0, 759, 765, 766, 0, 745, 588,
	589, 0, 0, 0, -2, -2, 0, 0, 0, 1013,
	-2, 994, 996, 999, 1001, 1003, 0, 0, 0, 0,
	0, 0, 0, 1014, 1168, 0, 1212, 1215, -2, 1170,
	1173, 1174, 0, 0, 1206, 0, 0, 0, 0, 740,
	741, 741, 741, 1066, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 1090, 0, 1092,
	1094, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1019, 1020, 1021,
	0, 1168, 1097, 1194, 1195, 0, 0, 0, 0, 0,
	0, 1103, 0, 1200, 0, 0, 0, 1107, 1108, 1110,
	0, 874, 0, 900, 922, 924, 912, 731, 1248, 778,
	770, 1227, 821, 780, 782, 1228, 770, 1170, 809, 0,
	811, 0, 0, 0, 813, 0, 802, 0, 804, 819,
	794, 0, 0, 787, 0, 786, 807, 815, 0, 0,
	833, 102, 594, 0, 0, 0, 105, 1475, 113, 0,
	519, 0, 0, 0, 0, 0, 607, 114, 1475, 122,
	1475, 122, 115, 89, 605, 90, 0, 0, 600, 0,
	592, 0, 0, 591, 91, 0, 602, 0, 0, 151,
	0, 0, 153, 0, 1233, 497, 546, 0, 0, 1271,
	0, 486, 547, 572, -2, 574, 0, 0, 659, 663,
	0, 662, 729, 681, 754, 839, 664, 681, 0, 0,
	0, 673, 670, 667, 840, 0, 0, 0, 0, 200,
	203, 206, 209, 279, 0, 0, 1172, 0, 846, 0,
	0, 131, 0, 281, 326, 327, 332, 351, 352, 354,
	350, 0, 0, 0, 0, 0, 0, 0, 744, 590,
	0, 946, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1203, 0, 0, 0, 1214, -2, 1176, 1204, 1208,
	0, 1061, 0, 0, 0, 0, 1259, 932, 933, 934,
	935, 936, 937, 938, 0, 1121, 1122, 1126, 0, 0,
	1072, 0, 0, 1177, 1187, 1189, 1017, 1018, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, -2, -2,
	-2, 1035, 1036, 1037, -2, -2, -2, 0, 0, 0,
	1190, 0, 0, 1192, 1193, 1197, 1198, 0, 1100, 1101,
	1102, 1199, 0, 0, 0, 906, 0, 0, 772, 0,
	779, 0, 772, 810, 0, 829, 812, 792, 803, 0,
	800, 790, 0, 791, 0, 819, 0, 0, 799, 0,
	0, 0, 0, 123, 517, 536, 0, 0, 581, 587,
	587, 0, 1070, 1071, 0, 0, 0, 107, 0, 0,
	0, 0, 111, 0, 117, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 95, 0, 0, 94, 129, 0,
	0, 154, 502, 0, 491, 0, 0, 0, 489, 0,
	570, 0, 0, 661, 663, 0, 654, 655, 179, 665,
	679, 680, 678, 0, 681, 687, 684, 690, 0, 0,
	133, 0, 0, 847, 854, 149, 1364, 147, 144, 146,
	298, 321, 322, 0, 470, 471, 472, 757, 763, 746,
	590, 0, 0, -2, 0, 1006, -2, -2, 1139, 1170,
	1213, 1207, 1256, 741, 1062, 1064, 1065, 941, 1128, 1125,
	0, 1112, 1088, 1089, 1186, 0, 0, 0, 0, 1170,
	1141, 1099, 0, 1105, 1106, 875, 727, 1117, 0, 0,
	783, 1117, 0, 807, 805, 788, 784, 0, 795, 0,
	816, 596, 598, 104, 0, 518, 0, 521, 0, 0,
	0, 0, 527, 528, 0, 0, 0, 0, 538, 545,
	0, 590, 1251, 0, 590, 0, 0, 0, 0, 0,
	119, 0, 0, 606, 0, 122, 122, 595, 0, 0,
	0, 0, 601, 593, 0, 603, 141, 0, 484, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 651,
	663, 0, 656, 657, 0, 0, 0, 672, 682, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 324, 0,
	747, -2, -2, 1007, 1140, 0, 741, 0, 1114, -2,
	0, 0, 0, 1142, 0, 714, 0, 771, 769, 715,
	828, 819, 0, 814, 106, 0, 522, 523, 1271, 0,
	526, 529, 0, 531, 1273, 497, 0, 542, 543, 582,
	583, 586, 584, 587, 741, 540, 0, 108, 109, 118,
	126, 110, 116, 0, 0, 741, 0, 0, 820, 0,
	0, 545, 0, 535, 497, 487, 545, 0, 0, 658,
	659, 0, 0, 0, 691, 0, 0, 148, 0, 143,
	145, 323, 0, 1063, 1131, 0, -2, 0, 1043, 1104,
	1116, 1118, 0, 793, 785, 520, 524, 0, 0, 551,
	0, 539, 0, 590, 0, 0, 128, 0, 597, 599,
	0, 0, 0, 0, 0, 0, 497, 545, 485, 497,
	0, 660, 661, 0, 675, 840, 677, 0, 0, 150,
	325, 0, 0, 0, 1127, 1044, 0, 0, 0, 530,
	556, 0, 0, 0, 585, 1061, 547, 112, 0, 125,
	0, 0, 0, 0, 0, 0, 533, 497, 576, 0,
	652, 0, 676, 151, 151, 1124, 1129, 1132, -2, 1435,
	1309, 0, 1130, 1119, 1120, 0, 532, 552, 553, 0,
	548, 549, 550, 1272, 544, 551, 127, 98, 100, 0,
	0, 0, 534, 545, 840, 134, 135, 0, 1134, 1135,
	1136, 1137, 1138, 525, 554, 0, 555, 0, 0, 0,
	556, 0, 0, 500, 497, 674, 0, 557, 0, 560,
	561, 0, 558, 541, 0, 0, 496, 498, 499, 577,
	1133, 559, 562, 563, 0, 0, 0, 0, 503, 0,
	504, 0, 0, 0, 502, 0, 0, 0, 501, 507,
	0, 510, 512, -2, 0, 505, 0, 0, 508, 0,
	0, 0, 506, 511, 0, 509, 502, 0, 501, 516,
	514, 0, 515,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:914
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1078
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1110
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1125
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1134
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1226
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = nil
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = DropCascade
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = DropRestrict
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = DropDefault
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1298
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1299
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1302
		{
			return unimplemented(sqllex, "alter using")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1303
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.str = "CSV"
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1515
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DELETE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "DELETE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "INSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{ /* SKIP DOC */
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "GRANT")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "RESET")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{ /* SKIP DOC */
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			return unimplemented(sqllex, "set local")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			return unimplemented(sqllex, "set from current")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2140
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = Low
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = Normal
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = High
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.str = "client_encoding"
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2503
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2507
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2525
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2536
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2551
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2555
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2559
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2563
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2567
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2573
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2577
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2581
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = DropDefault
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			return unimplemented(sqllex, "match full")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			return unimplemented(sqllex, "match partial")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			return unimplemented(sqllex, "match simple")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3046
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = NoAction
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = Restrict
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = Cascade
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = SetNull
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = SetDefault
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = nil
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3212
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = true
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = false
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = Ascending
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = Descending
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3298
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3300
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = true
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = false
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3334
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3422
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3433
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3494
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = ReadOnly
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = ReadWrite
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.str = ""
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.str = ""
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.str = ""
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.str = ""
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3602
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			return helpWith(sqllex, "INSERT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3685
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3724
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3725
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3887
		{
			return helpWith(sqllex, "SELECT")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			return helpWith(sqllex, "VALUES")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			return helpWith(sqllex, "TABLE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			return helpWith(sqllex, "SELECT")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			return helpWith(sqllex, "TABLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4000
		{
			return unimplemented(sqllex, "cte")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4004
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4008
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4012
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = true
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = false
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4036
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4166
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4167
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = false
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = true
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			return helpWith(sqllex, "VALUES")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4244
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &From{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4281
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4326
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4363
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = nil
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = true
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = false
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.str = astFullJoin
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.str = astLeftJoin
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.str = astRightJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.str = astInnerJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4547
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4633
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4647
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4690
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = jsonbColType
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = jsonColType
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4788
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = nil
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4853
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4949
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4981
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5020
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5021
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = year
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = month
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = day
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = hour
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = minute
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = month
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = hour
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = minute
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = minute
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = nil
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = second
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5116
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5151
		{
			return unimplemented(sqllex, "at tz")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5425
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5602
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5655
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5656
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5669
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5680
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5701
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5710
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			return unimplemented(sqllex, "current role")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5759
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5764
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5769
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5779
		{
			return unimplemented(sqllex, "treat")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5821
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5825
		{
			return unimplemented(sqllex, "within group")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5826
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5861
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.str = ""
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5923
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5924
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5925
		{
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5929
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5935
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5936
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5937
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5938
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5939
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = Any
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = Some
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = All
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Plus
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = Minus
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = Mult
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Div
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = Mod
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = Bitand
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = Bitor
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = Pow
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = Bitxor
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = LT
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = GT
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = EQ
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = LE
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = GE
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = NE
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = Like
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = NotLike
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = ILike
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = NotILike
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6275
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6295
		{
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6373
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6383
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6427
		{
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6441
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6456
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6460
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6463
		{
			return unimplemented(sqllex, "func const")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6472
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6482
		{
			sqlVAL.union.val = DNull
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6499
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6534
		{
			sqlVAL.str = ""
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6540
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6544
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
