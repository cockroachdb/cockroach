// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const KV = 57494
const LATERAL = 57495
const LC_CTYPE = 57496
const LC_COLLATE = 57497
const LEADING = 57498
const LEAST = 57499
const LEFT = 57500
const LEVEL = 57501
const LIKE = 57502
const LIMIT = 57503
const LOCAL = 57504
const LOCALTIME = 57505
const LOCALTIMESTAMP = 57506
const LOW = 57507
const LSHIFT = 57508
const MATCH = 57509
const MINUTE = 57510
const MONTH = 57511
const NAN = 57512
const NAME = 57513
const NAMES = 57514
const NATURAL = 57515
const NEXT = 57516
const NO = 57517
const NO_INDEX_JOIN = 57518
const NORMAL = 57519
const NOT = 57520
const NOTHING = 57521
const NULL = 57522
const NULLIF = 57523
const NULLS = 57524
const NUMERIC = 57525
const OF = 57526
const OFF = 57527
const OFFSET = 57528
const OID = 57529
const ON = 57530
const ONLY = 57531
const OPTIONS = 57532
const OR = 57533
const ORDER = 57534
const ORDINALITY = 57535
const OUT = 57536
const OUTER = 57537
const OVER = 57538
const OVERLAPS = 57539
const OVERLAY = 57540
const PARENT = 57541
const PARTIAL = 57542
const PARTITION = 57543
const PASSWORD = 57544
const PLACING = 57545
const POSITION = 57546
const PRECEDING = 57547
const PRECISION = 57548
const PREPARE = 57549
const PRIMARY = 57550
const PRIORITY = 57551
const QUERIES = 57552
const RANGE = 57553
const READ = 57554
const REAL = 57555
const RECURSIVE = 57556
const REF = 57557
const REFERENCES = 57558
const REGCLASS = 57559
const REGPROC = 57560
const REGPROCEDURE = 57561
const REGNAMESPACE = 57562
const REGTYPE = 57563
const RENAME = 57564
const REPEATABLE = 57565
const RELEASE = 57566
const RESET = 57567
const RESTORE = 57568
const RESTRICT = 57569
const RETURNING = 57570
const REVOKE = 57571
const RIGHT = 57572
const ROLLBACK = 57573
const ROLLUP = 57574
const ROW = 57575
const ROWS = 57576
const RSHIFT = 57577
const SAVEPOINT = 57578
const SCATTER = 57579
const SEARCH = 57580
const SECOND = 57581
const SELECT = 57582
const SERIAL = 57583
const SERIALIZABLE = 57584
const SESSION = 57585
const SESSIONS = 57586
const SESSION_USER = 57587
const SET = 57588
const SETTING = 57589
const SETTINGS = 57590
const SHOW = 57591
const SIMILAR = 57592
const SIMPLE = 57593
const SMALLINT = 57594
const SMALLSERIAL = 57595
const SNAPSHOT = 57596
const SOME = 57597
const SPLIT = 57598
const SQL = 57599
const START = 57600
const STATUS = 57601
const STDIN = 57602
const STRICT = 57603
const STRING = 57604
const STORING = 57605
const SUBSTRING = 57606
const SYMMETRIC = 57607
const SYSTEM = 57608
const TABLE = 57609
const TABLES = 57610
const TEMPLATE = 57611
const TESTING_RANGES = 57612
const TESTING_RELOCATE = 57613
const TEXT = 57614
const THEN = 57615
const TIME = 57616
const TIMESTAMP = 57617
const TIMESTAMPTZ = 57618
const TO = 57619
const TRAILING = 57620
const TRACE = 57621
const TRANSACTION = 57622
const TREAT = 57623
const TRIM = 57624
const TRUE = 57625
const TRUNCATE = 57626
const TYPE = 57627
const UNBOUNDED = 57628
const UNCOMMITTED = 57629
const UNION = 57630
const UNIQUE = 57631
const UNKNOWN = 57632
const UPDATE = 57633
const UPSERT = 57634
const USE = 57635
const USER = 57636
const USERS = 57637
const USING = 57638
const UUID = 57639
const VALID = 57640
const VALIDATE = 57641
const VALUE = 57642
const VALUES = 57643
const VARCHAR = 57644
const VARIADIC = 57645
const VIEW = 57646
const VARYING = 57647
const WHEN = 57648
const WHERE = 57649
const WINDOW = 57650
const WITH = 57651
const WITHIN = 57652
const WITHOUT = 57653
const WRITE = 57654
const YEAR = 57655
const ZONE = 57656
const NOT_LA = 57657
const WITH_LA = 57658
const AS_LA = 57659
const POSTFIXOP = 57660
const UMINUS = 57661

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5596

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	338, 32,
	-2, 448,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 421,
	188, 421,
	228, 421,
	334, 421,
	336, 421,
	338, 421,
	-2, 431,
	-1, 68,
	1, 424,
	188, 424,
	228, 424,
	334, 424,
	336, 424,
	338, 424,
	-2, 430,
	-1, 77,
	1, 32,
	338, 32,
	-2, 448,
	-1, 448,
	1, 175,
	338, 175,
	-2, 1022,
	-1, 518,
	108, 458,
	161, 458,
	186, 458,
	-2, 427,
	-1, 521,
	108, 457,
	161, 457,
	186, 457,
	-2, 425,
	-1, 672,
	108, 457,
	161, 457,
	186, 457,
	-2, 428,
	-1, 732,
	335, 953,
	-2, 946,
	-1, 733,
	335, 954,
	-2, 947,
	-1, 739,
	5, 622,
	335, 622,
	-2, 1136,
	-1, 763,
	5, 583,
	-2, 1110,
	-1, 764,
	5, 616,
	335, 616,
	-2, 1112,
	-1, 765,
	5, 591,
	-2, 1113,
	-1, 766,
	5, 590,
	-2, 1114,
	-1, 767,
	5, 616,
	335, 616,
	-2, 1117,
	-1, 768,
	5, 616,
	335, 616,
	-2, 1118,
	-1, 769,
	5, 617,
	-2, 1121,
	-1, 770,
	5, 577,
	-2, 1122,
	-1, 771,
	5, 577,
	-2, 1123,
	-1, 772,
	5, 598,
	-2, 1127,
	-1, 773,
	5, 578,
	-2, 1132,
	-1, 774,
	5, 579,
	-2, 1133,
	-1, 775,
	5, 580,
	-2, 1134,
	-1, 776,
	5, 581,
	-2, 1135,
	-1, 777,
	5, 577,
	-2, 1140,
	-1, 778,
	5, 584,
	-2, 1145,
	-1, 779,
	5, 582,
	-2, 1148,
	-1, 780,
	5, 614,
	335, 614,
	-2, 1150,
	-1, 781,
	5, 618,
	-2, 1153,
	-1, 782,
	5, 620,
	-2, 1154,
	-1, 783,
	5, 613,
	335, 613,
	-2, 1159,
	-1, 1046,
	99, 431,
	108, 431,
	144, 431,
	161, 431,
	186, 431,
	192, 431,
	288, 431,
	-2, 741,
	-1, 1055,
	335, 930,
	-2, 918,
	-1, 1266,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 657,
	-1, 1267,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 658,
	-1, 1268,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 659,
	-1, 1272,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 663,
	-1, 1273,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 664,
	-1, 1274,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 665,
	-1, 1277,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 670,
	-1, 1283,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 672,
	-1, 1285,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 676,
	-1, 1286,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 677,
	-1, 1287,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 678,
	-1, 1288,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 679,
	-1, 1315,
	197, 812,
	-2, 815,
	-1, 1344,
	117, 852,
	335, 953,
	-2, 946,
	-1, 1345,
	117, 853,
	-2, 1106,
	-1, 1346,
	117, 854,
	-2, 1021,
	-1, 1347,
	117, 855,
	-2, 988,
	-1, 1348,
	117, 856,
	-2, 1004,
	-1, 1349,
	117, 857,
	-2, 1020,
	-1, 1350,
	117, 858,
	-2, 1068,
	-1, 1509,
	99, 431,
	108, 431,
	144, 431,
	161, 431,
	186, 431,
	192, 431,
	288, 431,
	-2, 512,
	-1, 1513,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 671,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 673,
	-1, 1519,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 674,
	-1, 1537,
	197, 811,
	-2, 814,
	-1, 1727,
	1, 513,
	69, 513,
	99, 513,
	108, 513,
	118, 513,
	122, 513,
	124, 513,
	137, 513,
	144, 513,
	149, 513,
	158, 513,
	161, 513,
	173, 513,
	186, 513,
	188, 513,
	192, 513,
	228, 513,
	230, 513,
	288, 513,
	296, 513,
	307, 513,
	308, 513,
	317, 513,
	334, 513,
	336, 513,
	338, 513,
	339, 513,
	-2, 512,
	-1, 1729,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 675,
	-1, 1734,
	147, 0,
	-2, 691,
	-1, 1744,
	197, 813,
	-2, 816,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 718,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 719,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 720,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 724,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 725,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	318, 0,
	319, 0,
	320, 0,
	-2, 726,
	-1, 1905,
	147, 0,
	-2, 692,
	-1, 1908,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 695,
	-1, 1909,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 697,
	-1, 2013,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 696,
	-1, 2014,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 698,
	-1, 2021,
	147, 0,
	-2, 727,
	-1, 2075,
	147, 0,
	-2, 728,
	-1, 2138,
	36, 0,
	131, 0,
	160, 0,
	250, 0,
	315, 0,
	321, 0,
	-2, 1109,
}

const sqlPrivate = 57344

const sqlLast = 31243

var sqlAct = [...]int{

	733, 2116, 1683, 2161, 1140, 2137, 2081, 2117, 2136, 1148,
	2118, 1949, 961, 1723, 1722, 1975, 1755, 723, 1995, 1201,
	522, 1872, 1896, 1815, 731, 1504, 1883, 730, 1693, 967,
	1630, 1829, 709, 1230, 90, 90, 90, 543, 1481, 1507,
	52, 315, 1877, 1219, 1598, 1200, 317, 90, 90, 90,
	1483, 1631, 90, 1701, 567, 90, 824, 1205, 1051, 1548,
	1431, 1597, 1245, 90, 1313, 796, 509, 1710, 856, 963,
	1204, 799, 90, 90, 1177, 1495, 90, 1425, 692, 90,
	90, 90, 90, 1238, 1237, 90, 90, 1109, 1100, 1323,
	1490, 1149, 703, 1300, 1370, 1297, 529, 67, 1226, 1243,
	1132, 987, 921, 301, 20, 558, 1193, 828, 299, 610,
	801, 527, 839, 1170, 1042, 1341, 702, 825, 693, 503,
	609, 1081, 579, 1085, 504, 588, 577, 1142, 992, 521,
	1208, 580, 1240, 675, 1830, 447, 82, 532, 676, 495,
	433, 67, 725, 919, 674, 443, 424, 832, 444, 86,
	68, 530, 573, 680, 655, 656, 436, 2006, 1536, 526,
	2007, 2153, 841, 841, 821, 526, 1505, 1145, 493, 1141,
	69, 286, 2133, 841, 67, 1828, 1174, 2128, 857, 2127,
	1180, 20, 1180, 786, 2124, 2114, 32, 821, 1167, 2109,
	995, 996, 821, 1180, 73, 1540, 1373, 33, 57, 815,
	1541, 1442, 549, 486, 2106, 995, 996, 821, 540, 2077,
	1539, 546, 1167, 998, 553, 1180, 2071, 1133, 519, 821,
	1175, 75, 2055, 59, 534, 1828, 1443, 2051, 998, 35,
	821, 66, 2046, 2061, 314, 2045, 997, 1133, 518, 1493,
	708, 2015, 1012, 2002, 1167, 1989, 2003, 994, 1828, 1986,
	48, 997, 821, 1984, 1136, 76, 1828, 43, 1493, 1136,
	60, 1176, 1173, 71, 47, 1960, 44, 993, 821, 1959,
	72, 1931, 1828, 1791, 1180, 1910, 287, 1907, 1180, 66,
	1167, 1899, 49, 1849, 1180, 1741, 1180, 1848, 45, 70,
	1180, 1467, 1003, 77, 90, 90, 90, 90, 90, 90,
	1827, 509, 1098, 1828, 1471, 43, 1180, 1003, 726, 821,
	1738, 1317, 1547, 1180, 44, 1229, 541, 1191, 585, 548,
	551, 73, 541, 1669, 500, 1664, 1139, 1615, 1139, 688,
	1616, 1613, 1178, 911, 1180, 1612, 45, 1611, 1180, 556,
	1180, 527, 842, 842, 1537, 600, 1013, 1180, 75, 1502,
	539, 1470, 1234, 842, 821, 821, 506, 1184, 1179, 785,
	1180, 1180, 562, 1166, 1138, 314, 1167, 1139, 91, 1097,
	46, 850, 1096, 1831, 851, 1891, 1508, 933, 624, 314,
	73, 2151, 76, 2135, 2123, 2086, 2072, 62, 63, 34,
	71, 1987, 50, 1936, 61, 1932, 687, 72, 1924, 51,
	1923, 1922, 1918, 73, 1917, 1916, 1172, 75, 1863, 54,
	66, 1857, 56, 1806, 318, 1014, 1144, 1309, 1801, 1800,
	90, 58, 1799, 566, 66, 589, 574, 784, 1171, 583,
	75, 1749, 582, 582, 510, 90, 43, 1727, 90, 90,
	1700, 76, 1673, 1620, 1617, 44, 1605, 64, 1442, 509,
	43, 73, 2134, 1596, 845, 840, 65, 509, 1567, 44,
	56, 1564, 1473, 1563, 76, 959, 1059, 45, 1561, 993,
	1553, 1552, 71, 319, 1469, 70, 792, 1387, 75, 72,
	1338, 45, 1337, 1506, 564, 687, 90, 1052, 686, 70,
	966, 1757, 90, 511, 2098, 2058, 2044, 2043, 70, 2042,
	2034, 2032, 2023, 1008, 1006, 1007, 999, 1000, 1001, 1002,
	1004, 1005, 76, 90, 90, 90, 2010, 90, 1998, 1310,
	71, 999, 1000, 1001, 1002, 1004, 1005, 72, 1982, 1946,
	1671, 1929, 90, 1901, 541, 1866, 551, 1854, 1834, 673,
	1733, 1715, 1691, 90, 1689, 1688, 70, 1568, 1569, 1686,
	1639, 620, 1638, 1595, 1568, 1569, 509, 90, 1856, 1557,
	1556, 1533, 1528, 317, 509, 1302, 90, 1458, 1416, 1414,
	1401, 90, 90, 90, 627, 90, 1400, 791, 672, 1380,
	1336, 1233, 73, 1086, 1089, 1093, 1079, 1078, 1568, 1569,
	1077, 56, 90, 90, 603, 605, 73, 608, 1076, 1075,
	90, 1074, 90, 1073, 822, 56, 1072, 90, 1071, 75,
	1070, 1069, 1068, 1067, 1066, 790, 1065, 509, 509, 1064,
	1063, 830, 1056, 75, 661, 317, 659, 1045, 70, 960,
	544, 90, 691, 607, 90, 657, 90, 90, 90, 90,
	90, 90, 596, 76, 594, 2005, 1356, 90, 665, 1574,
	668, 71, 90, 90, 562, 1912, 1574, 76, 72, 90,
	1888, 1862, 1052, 1401, 1861, 71, 934, 1716, 1452, 510,
	90, 1451, 72, 819, 1043, 507, 1225, 70, 683, 684,
	519, 965, 792, 689, 1224, 1568, 1569, 1133, 618, 90,
	1574, 300, 90, 844, 2048, 2008, 847, 1484, 995, 996,
	518, 1860, 565, 574, 1889, 1444, 820, 995, 996, 1508,
	1584, 991, 1091, 1619, 616, 854, 1618, 1092, 1512, 647,
	834, 998, 67, 831, 852, 619, 1061, 964, 511, 1426,
	998, 738, 541, 1878, 935, 1141, 904, 809, 906, 917,
	970, 1758, 927, 926, 997, 506, 501, 905, 527, 1324,
	1082, 1438, 908, 997, 1544, 909, 807, 617, 1626, 929,
	651, 922, 928, 2089, 2148, 1842, 937, 1110, 1464, 2050,
	2149, 808, 942, 958, 485, 1183, 479, 484, 890, 1585,
	948, 628, 939, 793, 644, 943, 944, 945, 946, 947,
	480, 645, 1970, 902, 1969, 90, 1058, 652, 788, 957,
	952, 953, 1968, 90, 910, 1967, 829, 90, 1654, 1003,
	974, 541, 833, 833, 973, 90, 90, 510, 972, 90,
	1653, 1853, 90, 1623, 930, 510, 989, 1384, 792, 516,
	1113, 519, 548, 551, 519, 519, 90, 1622, 90, 90,
	1515, 90, 294, 80, 90, 787, 90, 90, 616, 90,
	90, 983, 509, 1055, 984, 985, 1457, 1670, 1174, 1456,
	1103, 1455, 918, 1570, 1571, 1572, 1573, 1575, 1576, 1161,
	1570, 1571, 1572, 1573, 1575, 1576, 511, 802, 1454, 803,
	628, 2049, 1284, 896, 511, 1181, 1130, 1129, 628, 1083,
	1084, 617, 1114, 1116, 1126, 1087, 295, 79, 658, 555,
	931, 1090, 1175, 863, 1048, 696, 1572, 1573, 1575, 1576,
	1383, 643, 1121, 1568, 1569, 1124, 1255, 1102, 1220, 1094,
	1102, 955, 1112, 1650, 510, 1135, 1101, 802, 932, 803,
	592, 318, 510, 1106, 317, 956, 1143, 1127, 1143, 1119,
	290, 492, 90, 1176, 1173, 1657, 1659, 67, 936, 1428,
	804, 1131, 67, 425, 889, 90, 90, 90, 826, 1162,
	90, 90, 1147, 1156, 1165, 1324, 606, 90, 1951, 802,
	1157, 803, 2148, 1299, 430, 1192, 589, 1163, 1159, 426,
	1160, 1158, 582, 511, 582, 510, 510, 2096, 2120, 291,
	319, 511, 525, 318, 1463, 90, 648, 1235, 317, 1641,
	804, 835, 813, 1111, 427, 1299, 1576, 735, 1087, 1678,
	1090, 1178, 2158, 1306, 1178, 1574, 512, 812, 1304, 1005,
	1084, 1083, 1432, 429, 2164, 1001, 1002, 1004, 1005, 296,
	78, 1421, 1185, 317, 631, 1095, 810, 524, 517, 1254,
	1494, 812, 804, 513, 511, 511, 67, 541, 641, 1675,
	2111, 811, 319, 514, 954, 551, 298, 649, 1195, 541,
	810, 1187, 1823, 591, 507, 502, 297, 81, 632, 1584,
	2121, 630, 1189, 2112, 1307, 811, 1152, 2169, 1197, 1295,
	1178, 551, 642, 1436, 551, 526, 1227, 1228, 1172, 1498,
	1676, 1190, 1199, 1418, 1293, 1824, 817, 841, 1223, 1386,
	90, 90, 90, 1188, 816, 2037, 90, 650, 1501, 90,
	830, 1321, 1236, 1080, 1465, 90, 90, 90, 90, 90,
	1496, 2122, 1215, 1432, 2157, 428, 2019, 90, 1412, 1499,
	90, 90, 1983, 1040, 1568, 1569, 1648, 509, 1585, 1099,
	90, 1555, 293, 292, 1497, 90, 1711, 90, 1726, 526,
	487, 1642, 2162, 1658, 90, 805, 1311, 1308, 1289, 1885,
	2119, 1178, 1388, 1394, 1952, 90, 1290, 1698, 1291, 2147,
	800, 1498, 1296, 1332, 1246, 1253, 431, 2145, 1871, 890,
	890, 523, 90, 90, 1351, 527, 1583, 1819, 1217, 1820,
	1501, 1411, 509, 635, 601, 1196, 551, 1198, 995, 996,
	541, 1500, 1709, 1434, 2163, 805, 1517, 599, 1440, 1389,
	90, 1499, 90, 1281, 90, 679, 2156, 1822, 90, 1787,
	510, 998, 90, 2165, 1413, 1825, 488, 1415, 1578, 1570,
	1571, 1572, 1573, 1575, 1576, 1241, 1574, 1962, 1298, 1472,
	1525, 1474, 1314, 1424, 997, 90, 1305, 805, 1927, 1318,
	613, 2175, 1437, 1326, 1427, 1523, 1961, 2170, 1944, 2029,
	1625, 1445, 916, 1397, 1343, 1343, 1354, 1884, 1365, 1393,
	1446, 1292, 1447, 1448, 1377, 1378, 1379, 842, 1294, 511,
	1841, 1838, 678, 1500, 1218, 527, 1398, 1840, 1460, 1461,
	1584, 890, 971, 1462, 1466, 962, 1897, 1449, 1821, 1468,
	1003, 914, 318, 979, 863, 863, 1788, 1674, 1279, 1282,
	2082, 614, 1789, 915, 615, 678, 1475, 422, 490, 1520,
	1478, 1486, 951, 912, 1694, 1873, 862, 1886, 1511, 1521,
	67, 1488, 1945, 1526, 1403, 677, 67, 1278, 1492, 1402,
	1390, 1928, 1489, 527, 1510, 2174, 1450, 1546, 1503, 1476,
	613, 890, 1706, 1705, 1013, 889, 889, 1898, 572, 1585,
	679, 319, 571, 425, 524, 669, 318, 980, 677, 1684,
	1864, 1420, 1423, 1837, 1702, 1942, 1518, 1516, 1491, 1839,
	1430, 1335, 1398, 2022, 430, 829, 1926, 890, 1599, 426,
	1732, 489, 1656, 892, 829, 1562, 1532, 1943, 1527, 1429,
	1182, 318, 527, 1137, 1125, 541, 1122, 654, 653, 646,
	640, 639, 1543, 638, 427, 637, 863, 636, 633, 1637,
	570, 563, 1600, 1014, 1062, 319, 1636, 1280, 949, 1635,
	941, 625, 1522, 429, 1334, 2115, 2079, 1812, 1646, 1524,
	891, 1644, 1624, 90, 90, 1480, 1665, 1579, 1577, 1578,
	1570, 1571, 1572, 1573, 1575, 1576, 1221, 1213, 1479, 1164,
	319, 628, 1602, 1603, 1604, 849, 848, 889, 90, 846,
	843, 838, 90, 818, 90, 814, 863, 1621, 806, 1746,
	1482, 90, 1977, 681, 509, 1241, 1231, 1628, 2149, 1690,
	537, 569, 924, 1979, 90, 1118, 1662, 90, 3, 1531,
	1655, 1649, 718, 1687, 568, 510, 317, 1534, 90, 83,
	1668, 1660, 863, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	1645, 1411, 1647, 1102, 626, 1550, 1551, 889, 1667, 1117,
	1677, 1679, 1680, 1695, 1666, 428, 87, 87, 288, 1663,
	1494, 2039, 1685, 1831, 1717, 1232, 2074, 1718, 1703, 416,
	417, 418, 682, 685, 435, 1697, 90, 449, 1594, 538,
	510, 306, 30, 889, 511, 435, 1123, 1712, 1713, 1607,
	1751, 1752, 1753, 1708, 533, 533, 545, 1704, 288, 560,
	1707, 288, 288, 552, 288, 982, 431, 87, 559, 1498,
	312, 25, 561, 1120, 557, 311, 24, 1735, 310, 23,
	1745, 1742, 859, 308, 22, 2062, 1102, 421, 1501, 305,
	16, 1651, 1115, 1652, 309, 11, 1869, 1759, 1216, 511,
	1496, 1212, 1761, 90, 90, 90, 1146, 1764, 990, 1499,
	907, 1766, 855, 478, 1169, 2172, 2173, 313, 10, 30,
	90, 2108, 1794, 2065, 1497, 90, 1894, 90, 1807, 90,
	90, 90, 995, 996, 90, 90, 1637, 509, 432, 1836,
	1795, 1568, 1569, 1636, 1681, 1832, 1635, 1672, 25, 1835,
	1614, 303, 9, 24, 663, 1808, 23, 307, 8, 302,
	7, 22, 1811, 1152, 1241, 304, 4, 16, 1453, 90,
	90, 1385, 11, 481, 482, 1382, 509, 1381, 997, 995,
	996, 1500, 1331, 1721, 1637, 1049, 90, 90, 1867, 1637,
	90, 1636, 890, 1852, 1635, 10, 1636, 1865, 90, 1635,
	1914, 664, 1870, 995, 996, 90, 1859, 862, 862, 2095,
	1739, 1976, 1893, 1754, 1241, 1868, 1477, 1241, 1246, 1762,
	1059, 1876, 1057, 890, 890, 1874, 998, 1246, 1767, 9,
	663, 662, 890, 890, 491, 8, 1892, 7, 90, 1950,
	423, 940, 634, 4, 1890, 1714, 2110, 1902, 1858, 997,
	1919, 1554, 1994, 2018, 1333, 1060, 42, 1633, 712, 1813,
	1798, 1627, 1207, 1206, 320, 890, 925, 734, 494, 1881,
	1882, 1342, 1792, 1887, 892, 892, 288, 575, 288, 449,
	449, 559, 1906, 1802, 1247, 789, 736, 860, 1696, 1925,
	737, 861, 1088, 90, 724, 90, 858, 317, 90, 587,
	1150, 1303, 1322, 1542, 1053, 704, 90, 716, 715, 1319,
	593, 1895, 317, 446, 55, 442, 1435, 863, 1855, 862,
	978, 891, 891, 1222, 975, 1643, 1637, 515, 1565, 595,
	1363, 1937, 510, 1636, 1355, 1352, 1635, 90, 1940, 660,
	795, 1041, 1151, 1954, 623, 1441, 1956, 1168, 863, 863,
	1938, 1972, 90, 1955, 318, 509, 1978, 863, 863, 90,
	1953, 690, 986, 536, 1637, 830, 1971, 90, 889, 1845,
	535, 1636, 1202, 90, 1635, 1851, 621, 1985, 1980, 862,
	1880, 913, 90, 90, 1186, 1034, 892, 2004, 1031, 1997,
	863, 511, 483, 2031, 2001, 1993, 2012, 890, 612, 889,
	889, 2011, 597, 611, 1991, 1214, 1396, 2168, 889, 889,
	2038, 1640, 2088, 319, 74, 862, 2017, 602, 2047, 2009,
	449, 449, 1974, 90, 1529, 1530, 1241, 1241, 1422, 31,
	1241, 29, 2033, 891, 26, 21, 1965, 1966, 19, 18,
	28, 889, 17, 2027, 27, 15, 892, 14, 90, 90,
	2000, 13, 2028, 1988, 12, 41, 1357, 40, 39, 2036,
	90, 628, 38, 37, 90, 36, 6, 5, 435, 2035,
	2056, 2, 509, 1, 288, 0, 2054, 0, 2024, 90,
	0, 2057, 892, 859, 859, 1591, 1592, 1593, 0, 317,
	90, 90, 0, 891, 0, 449, 667, 449, 2063, 670,
	1875, 1964, 2060, 527, 2069, 510, 890, 0, 0, 2066,
	2070, 1958, 0, 90, 533, 90, 0, 0, 90, 2073,
	317, 2064, 863, 0, 0, 288, 0, 0, 0, 891,
	2067, 0, 0, 0, 2084, 0, 2097, 2099, 0, 87,
	2101, 2094, 90, 0, 510, 90, 1948, 2100, 288, 2085,
	0, 0, 0, 288, 288, 288, 1637, 836, 2107, 2105,
	2104, 2090, 2103, 1636, 511, 0, 1635, 0, 0, 2102,
	0, 0, 2076, 889, 288, 288, 0, 90, 0, 90,
	2125, 0, 87, 2132, 87, 0, 2130, 0, 0, 449,
	0, 0, 1990, 890, 2129, 859, 90, 0, 2131, 0,
	0, 2142, 0, 511, 0, 0, 2146, 1241, 2144, 0,
	0, 0, 2150, 449, 0, 2152, 449, 0, 87, 449,
	449, 449, 449, 449, 2155, 2154, 0, 0, 0, 950,
	0, 863, 2167, 2166, 449, 449, 0, 2171, 0, 0,
	0, 435, 0, 1730, 1731, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 859, 0, 0, 2176, 0,
	0, 0, 0, 0, 0, 318, 0, 0, 0, 0,
	0, 533, 0, 0, 559, 0, 0, 0, 0, 1992,
	318, 0, 889, 1357, 1357, 1568, 1569, 890, 1586, 1587,
	1588, 859, 0, 0, 0, 0, 0, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 0, 1790, 863, 2091,
	2092, 2093, 0, 510, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1583, 0, 319,
	862, 0, 0, 0, 1357, 1357, 1357, 0, 0, 0,
	0, 2113, 0, 0, 0, 0, 0, 0, 2087, 1568,
	1569, 0, 1586, 1587, 1588, 0, 0, 0, 0, 889,
	0, 862, 862, 1823, 0, 1904, 1816, 288, 0, 0,
	862, 862, 511, 0, 1814, 1107, 0, 1574, 1818, 288,
	0, 0, 0, 0, 0, 0, 2059, 288, 1128, 0,
	0, 288, 0, 0, 1134, 0, 1824, 892, 0, 0,
	0, 1583, 863, 862, 0, 0, 0, 1152, 288, 0,
	1154, 1155, 1589, 288, 0, 0, 288, 1817, 449, 449,
	0, 449, 559, 0, 0, 0, 0, 0, 892, 892,
	510, 1584, 0, 0, 0, 0, 0, 892, 892, 0,
	0, 0, 0, 0, 891, 0, 0, 318, 0, 0,
	0, 1574, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 891, 891, 0, 318, 0,
	0, 0, 0, 0, 891, 891, 1589, 0, 1819, 511,
	1820, 903, 1357, 1357, 0, 0, 0, 0, 0, 0,
	1585, 0, 0, 0, 0, 1584, 319, 0, 0, 0,
	0, 0, 0, 0, 1194, 0, 0, 891, 1822, 0,
	0, 0, 0, 0, 0, 0, 1825, 288, 288, 288,
	0, 0, 288, 1203, 0, 862, 0, 319, 0, 559,
	0, 1947, 0, 0, 0, 0, 1357, 1357, 1357, 1357,
	1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
	1357, 1357, 1357, 1357, 1357, 0, 1357, 288, 0, 0,
	0, 0, 0, 0, 1585, 0, 0, 0, 0, 0,
	995, 996, 0, 1580, 1581, 1582, 0, 0, 1579, 1577,
	1578, 1570, 1571, 1572, 1573, 1575, 1576, 0, 0, 1821,
	0, 0, 892, 998, 0, 0, 859, 0, 995, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 998, 0, 0, 0, 0, 0, 859, 859, 1568,
	1569, 0, 0, 2021, 862, 0, 859, 859, 0, 891,
	0, 0, 0, 0, 997, 0, 0, 1580, 1581, 1582,
	0, 0, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 0, 288, 1391, 1392, 0, 0, 0, 1107, 859,
	0, 1399, 1003, 0, 0, 0, 0, 1404, 1405, 1407,
	1409, 1410, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 1419, 288, 0, 0, 0, 0, 0, 0,
	1003, 892, 288, 0, 0, 0, 0, 288, 0, 1439,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 862, 0, 0, 0, 0, 1013, 288, 0, 2075,
	0, 1574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1194, 1194, 995, 996, 891, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 998,
	0, 0, 969, 0, 969, 0, 449, 0, 1568, 1569,
	288, 0, 0, 0, 1485, 1584, 0, 0, 892, 0,
	1357, 0, 997, 0, 0, 1014, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	713, 53, 0, 995, 996, 891, 1015, 1016, 1017, 1025,
	1026, 1027, 0, 0, 0, 0, 0, 0, 1003, 1018,
	0, 0, 0, 0, 1585, 0, 998, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 997,
	1574, 0, 892, 0, 0, 1012, 999, 1000, 1001, 1002,
	1004, 1005, 1357, 0, 0, 0, 0, 0, 520, 0,
	0, 528, 1013, 0, 0, 0, 0, 0, 53, 0,
	859, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 1584, 1003, 0, 0, 0, 0,
	0, 0, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 0, 0, 0, 1022, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 1632, 0, 0, 0, 0, 0,
	1028, 1014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1020, 0, 0, 0, 0, 1357, 1013,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 1585, 0, 288, 288, 0, 0, 0,
	0, 0, 0, 0, 1019, 0, 0, 694, 694, 1568,
	1569, 0, 1586, 1587, 1588, 0, 797, 0, 0, 0,
	1682, 0, 0, 0, 1107, 1903, 969, 0, 0, 0,
	0, 0, 0, 1692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 1014, 288,
	1006, 1007, 999, 1000, 1001, 1002, 1004, 1005, 0, 0,
	1725, 1583, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 996, 0, 0, 0, 0, 1025, 1026,
	1027, 859, 1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576,
	0, 0, 0, 0, 0, 998, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1756, 0,
	0, 1574, 0, 0, 0, 0, 0, 0, 997, 0,
	0, 528, 0, 0, 1012, 0, 0, 0, 1021, 0,
	0, 1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999,
	1000, 1001, 1002, 1004, 1005, 0, 1589, 0, 0, 976,
	0, 981, 1933, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 1584, 0, 0, 0, 1035,
	1036, 1037, 1038, 1039, 1003, 1809, 1810, 1107, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 1632, 559, 1022, 1030, 0, 0, 1843, 0, 1844,
	0, 288, 1846, 1847, 0, 0, 1850, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 1585, 0, 0, 0, 0, 1632,
	0, 559, 1203, 0, 1632, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 288,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	1725, 0, 0, 0, 0, 0, 0, 1900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1920, 0, 1023, 0, 0, 0, 0, 1580, 1581, 1582,
	0, 0, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 1939, 0, 0,
	1941, 0, 0, 0, 0, 0, 0, 1021, 288, 0,
	0, 1632, 0, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1973, 0, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1632,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 1996, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 1725, 53, 0, 0, 0,
	0, 0, 0, 0, 559, 1725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	0, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 0, 1283, 969, 1285, 1286, 1287, 1288,
	0, 520, 0, 0, 520, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	2040, 2041, 0, 0, 0, 0, 1044, 0, 1046, 0,
	0, 0, 2052, 0, 0, 1050, 2053, 1339, 1340, 0,
	0, 1353, 0, 1364, 1366, 1371, 1374, 1375, 1376, 0,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1725, 559, 0, 0, 0, 0, 797, 0,
	0, 0, 995, 996, 0, 1015, 1016, 1017, 1025, 1026,
	1027, 0, 0, 0, 0, 2083, 0, 559, 1018, 0,
	288, 0, 0, 0, 0, 998, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 1568, 1569, 0, 1586, 1587,
	1588, 1632, 0, 1433, 1996, 0, 0, 1725, 997, 0,
	0, 1737, 0, 0, 1012, 0, 0, 0, 0, 53,
	0, 0, 53, 0, 0, 0, 0, 0, 995, 996,
	0, 1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 288,
	0, 559, 1459, 53, 1018, 53, 0, 1583, 0, 0,
	0, 998, 0, 0, 1029, 0, 0, 0, 2143, 0,
	0, 53, 0, 0, 1003, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	1012, 0, 0, 1022, 1030, 0, 1487, 0, 0, 0,
	0, 988, 0, 0, 0, 0, 0, 1574, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1003, 0, 1589, 0, 0, 0, 0, 0, 0, 0,
	1513, 1514, 0, 1019, 0, 0, 1519, 0, 0, 1022,
	1030, 1584, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1020, 1538,
	0, 0, 0, 0, 1013, 0, 1545, 1014, 0, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	0, 0, 1023, 0, 0, 1242, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1585, 0, 0, 1047, 0, 0, 0, 0, 0, 1371,
	1371, 1371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 1629, 0, 0, 0, 0, 1021, 1023, 0,
	1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 0, 0, 0, 0, 0, 0,
	0, 1610, 0, 0, 694, 0, 0, 0, 0, 0,
	0, 0, 0, 1580, 1581, 1582, 797, 0, 1579, 1577,
	1578, 1570, 1571, 1572, 1573, 1575, 1576, 0, 0, 1568,
	1569, 0, 1586, 1587, 1588, 0, 0, 0, 0, 0,
	0, 53, 0, 1021, 53, 1736, 1009, 1010, 1011, 1024,
	0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	0, 0, 0, 0, 0, 528, 0, 1609, 0, 0,
	0, 0, 995, 996, 0, 1015, 1016, 1017, 1025, 1026,
	1027, 1583, 0, 0, 1728, 0, 0, 1729, 1018, 1568,
	1569, 0, 1586, 1587, 1588, 998, 0, 0, 1029, 1734,
	0, 0, 0, 0, 0, 0, 0, 0, 1743, 0,
	0, 0, 0, 0, 0, 0, 1747, 0, 997, 1459,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 1574, 0, 53, 1763, 0, 0, 53, 1765, 0,
	0, 1583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 1509, 1589, 0, 0, 0,
	0, 1796, 1797, 0, 1003, 0, 0, 0, 0, 0,
	1803, 1804, 1805, 0, 0, 1584, 0, 0, 0, 0,
	0, 1574, 0, 1022, 1030, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 1833, 0, 0, 1028,
	0, 1590, 0, 1568, 1569, 0, 1586, 1587, 1588, 0,
	0, 0, 1020, 1046, 0, 0, 1589, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1584, 0, 0, 0, 0,
	0, 0, 0, 1019, 1585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1583, 0, 0, 0, 0,
	0, 0, 0, 0, 1879, 0, 0, 0, 0, 0,
	0, 0, 1046, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 1905, 0, 0, 0, 1908, 1909,
	0, 0, 1023, 1911, 1585, 1574, 0, 0, 0, 0,
	1913, 0, 1915, 0, 0, 0, 0, 0, 0, 0,
	1921, 0, 0, 0, 0, 0, 0, 1580, 1581, 1582,
	0, 0, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1930, 1242, 0, 0, 0, 0, 1584,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 0, 0, 0, 1580, 1581, 1582,
	0, 1608, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 0, 1963, 0, 1242, 0, 0, 1242, 995, 996,
	0, 1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 1585, 0,
	0, 998, 0, 0, 1029, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 995, 996, 1999, 1015, 1016,
	1017, 1025, 1026, 1027, 997, 0, 0, 0, 0, 0,
	1012, 1018, 0, 0, 0, 2013, 2014, 0, 998, 0,
	0, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 2026, 0, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2030, 0,
	1003, 1580, 1581, 1582, 0, 0, 1579, 1577, 1578, 1570,
	1571, 1572, 1573, 1575, 1576, 0, 0, 0, 0, 1022,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 1028, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1020, 0,
	0, 0, 0, 0, 1013, 0, 1022, 1030, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 1028, 0, 0, 0, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 1020, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1242, 1242, 0, 0,
	1242, 0, 0, 0, 0, 0, 1019, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 2126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 2141, 2141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 1009, 1010, 1011, 1024,
	0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	0, 0, 0, 0, 2141, 0, 0, 1560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 1009, 1010, 1011, 1024, 0, 1008, 1006,
	1007, 999, 1000, 1001, 1002, 1004, 1005, 0, 0, 1535,
	0, 1981, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	0, 92, 93, 335, 94, 336, 337, 338, 339, 234,
	340, 341, 342, 343, 95, 96, 97, 235, 236, 237,
	238, 98, 239, 240, 344, 99, 241, 242, 100, 345,
	346, 243, 244, 245, 347, 101, 246, 348, 321, 349,
	102, 103, 104, 0, 105, 350, 106, 107, 108, 351,
	322, 109, 110, 352, 353, 354, 355, 356, 357, 111,
	112, 289, 113, 247, 114, 248, 249, 358, 115, 359,
	116, 360, 361, 362, 117, 118, 363, 119, 364, 0,
	365, 250, 120, 121, 122, 251, 252, 366, 367, 368,
	123, 124, 253, 1046, 125, 369, 126, 370, 371, 323,
	372, 127, 254, 373, 255, 374, 128, 129, 130, 131,
	256, 257, 325, 375, 135, 376, 132, 377, 324, 133,
	258, 134, 259, 260, 261, 378, 262, 379, 326, 136,
	327, 137, 138, 139, 380, 141, 140, 381, 263, 328,
	142, 329, 382, 143, 383, 384, 144, 0, 145, 146,
	147, 149, 264, 148, 330, 150, 151, 153, 152, 385,
	386, 387, 265, 154, 266, 155, 156, 388, 157, 389,
	390, 158, 391, 392, 159, 267, 331, 160, 332, 268,
	161, 162, 163, 164, 393, 269, 165, 270, 166, 394,
	167, 168, 169, 170, 271, 171, 172, 395, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 396,
	184, 333, 185, 186, 272, 187, 0, 191, 192, 193,
	194, 397, 273, 195, 196, 197, 398, 198, 188, 189,
	199, 334, 200, 274, 275, 201, 399, 207, 202, 203,
	190, 204, 206, 276, 205, 277, 400, 208, 401, 209,
	210, 211, 212, 213, 402, 278, 279, 280, 403, 404,
	214, 215, 281, 282, 405, 216, 217, 218, 219, 406,
	407, 220, 221, 222, 223, 408, 224, 409, 283, 225,
	226, 227, 284, 285, 410, 411, 228, 412, 413, 414,
	415, 229, 230, 231, 232, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 1719, 0, 0, 0, 0, 0,
	0, 0, 1720, 92, 93, 335, 94, 336, 337, 338,
	339, 234, 340, 341, 342, 343, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 344, 99, 241, 242,
	100, 345, 346, 243, 244, 245, 347, 101, 246, 348,
	321, 349, 102, 103, 104, 0, 105, 350, 106, 107,
	108, 351, 322, 109, 110, 352, 353, 354, 355, 356,
	357, 111, 112, 289, 113, 247, 114, 248, 249, 358,
	115, 359, 116, 360, 361, 362, 117, 118, 363, 119,
	364, 0, 365, 250, 120, 121, 122, 251, 252, 366,
	367, 368, 123, 124, 253, 0, 125, 369, 126, 370,
	371, 323, 372, 127, 254, 373, 255, 374, 128, 129,
	130, 131, 256, 257, 325, 375, 135, 376, 132, 377,
	324, 133, 258, 134, 259, 260, 261, 378, 262, 379,
	326, 136, 327, 137, 138, 139, 380, 141, 140, 381,
	263, 328, 142, 329, 382, 143, 383, 384, 144, 0,
	145, 146, 147, 149, 264, 148, 330, 150, 151, 153,
	152, 385, 386, 387, 265, 154, 266, 155, 156, 388,
	157, 389, 390, 158, 391, 392, 159, 267, 331, 160,
	332, 268, 161, 162, 163, 164, 393, 269, 165, 270,
	166, 394, 167, 168, 169, 170, 271, 171, 172, 395,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 396, 184, 333, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 397, 273, 195, 196, 197, 398, 198,
	188, 189, 199, 334, 200, 274, 275, 201, 399, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 400, 208,
	401, 209, 210, 211, 212, 213, 402, 278, 279, 280,
	403, 404, 214, 215, 281, 282, 405, 216, 217, 218,
	219, 406, 407, 220, 221, 222, 223, 408, 224, 409,
	283, 225, 226, 227, 284, 285, 410, 411, 228, 412,
	413, 414, 415, 229, 230, 231, 232, 233, 0, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2068, 92, 93, 335,
	94, 336, 337, 338, 339, 234, 340, 341, 342, 343,
	95, 96, 97, 235, 236, 237, 238, 98, 239, 240,
	344, 99, 241, 242, 100, 345, 346, 243, 244, 245,
	347, 101, 246, 348, 321, 349, 102, 103, 104, 0,
	105, 350, 106, 107, 108, 351, 322, 109, 110, 352,
	353, 354, 355, 356, 357, 111, 112, 289, 113, 247,
	114, 248, 249, 358, 115, 359, 116, 360, 361, 362,
	117, 118, 363, 119, 364, 0, 365, 250, 120, 121,
	122, 251, 252, 366, 367, 368, 123, 124, 253, 0,
	125, 369, 126, 370, 371, 323, 372, 127, 254, 373,
	255, 374, 128, 129, 130, 131, 256, 257, 325, 375,
	135, 376, 132, 377, 324, 133, 258, 134, 259, 260,
	261, 378, 262, 379, 326, 136, 327, 137, 138, 139,
	380, 141, 140, 381, 263, 328, 142, 329, 382, 143,
	383, 384, 144, 0, 145, 146, 147, 149, 264, 148,
	330, 150, 151, 153, 152, 385, 386, 387, 265, 154,
	266, 155, 156, 388, 157, 389, 390, 158, 391, 392,
	159, 267, 331, 160, 332, 268, 161, 162, 163, 164,
	393, 269, 165, 270, 166, 394, 167, 168, 169, 170,
	271, 171, 172, 395, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 396, 184, 333, 185, 186,
	272, 187, 0, 191, 192, 193, 194, 397, 273, 195,
	196, 197, 398, 198, 188, 189, 199, 334, 200, 274,
	275, 201, 399, 207, 202, 203, 190, 204, 206, 276,
	205, 277, 400, 208, 401, 209, 210, 211, 212, 213,
	402, 278, 279, 280, 403, 404, 214, 215, 281, 282,
	405, 216, 217, 218, 219, 406, 407, 220, 221, 222,
	223, 408, 224, 409, 283, 225, 226, 227, 284, 285,
	410, 411, 228, 412, 413, 414, 415, 229, 230, 231,
	232, 233, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 92, 93,
	335, 94, 336, 337, 338, 339, 234, 340, 341, 342,
	343, 95, 96, 97, 235, 236, 237, 238, 98, 239,
	240, 344, 99, 241, 242, 100, 345, 346, 243, 244,
	245, 347, 101, 246, 348, 321, 349, 102, 103, 104,
	0, 105, 350, 106, 107, 108, 351, 322, 109, 110,
	352, 353, 354, 355, 356, 357, 111, 112, 289, 113,
	247, 114, 248, 249, 358, 115, 359, 116, 360, 361,
	362, 117, 118, 363, 119, 364, 0, 365, 250, 120,
	121, 122, 251, 252, 366, 367, 368, 123, 124, 253,
	0, 125, 369, 126, 370, 371, 323, 372, 127, 254,
	373, 255, 374, 128, 129, 130, 131, 256, 257, 325,
	375, 135, 376, 132, 377, 324, 133, 258, 134, 259,
	260, 261, 378, 262, 379, 326, 136, 327, 137, 138,
	139, 380, 141, 140, 381, 263, 328, 142, 329, 382,
	143, 383, 384, 144, 0, 145, 146, 147, 149, 264,
	148, 330, 150, 151, 153, 152, 385, 386, 387, 265,
	154, 266, 155, 156, 388, 157, 389, 390, 158, 391,
	392, 159, 267, 331, 160, 332, 268, 161, 162, 163,
	164, 393, 269, 165, 270, 166, 394, 167, 168, 169,
	170, 271, 171, 172, 395, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 396, 184, 333, 185,
	186, 272, 187, 0, 191, 192, 193, 194, 397, 273,
	195, 196, 197, 398, 198, 188, 189, 199, 334, 200,
	274, 275, 201, 399, 207, 202, 203, 190, 204, 206,
	276, 205, 277, 400, 208, 401, 209, 210, 211, 212,
	213, 402, 278, 279, 280, 403, 404, 214, 215, 281,
	282, 405, 216, 217, 218, 219, 406, 407, 220, 221,
	222, 223, 408, 224, 409, 283, 225, 226, 227, 284,
	285, 410, 411, 228, 412, 413, 414, 415, 229, 230,
	231, 232, 233, 732, 721, 722, 719, 720, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 748, 714, 0,
	0, 0, 95, 96, 97, 235, 763, 237, 764, 98,
	765, 766, 0, 99, 241, 242, 100, 717, 747, 767,
	768, 245, 0, 101, 759, 0, 740, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 322, 109,
	110, 0, 741, 743, 0, 742, 744, 111, 112, 289,
	113, 769, 114, 770, 771, 798, 115, 0, 116, 0,
	0, 0, 762, 118, 0, 119, 0, 0, 0, 705,
	120, 121, 122, 749, 750, 728, 0, 0, 123, 124,
	772, 0, 125, 0, 126, 0, 0, 323, 0, 127,
	760, 0, 255, 0, 128, 129, 130, 131, 756, 758,
	325, 0, 135, 0, 132, 0, 324, 133, 773, 134,
	774, 775, 776, 0, 739, 0, 326, 136, 327, 137,
	138, 139, 0, 141, 140, 0, 761, 328, 142, 329,
	0, 143, 0, 0, 144, 0, 145, 146, 147, 149,
	264, 148, 330, 150, 151, 153, 152, 700, 0, 729,
	757, 154, 777, 155, 156, 0, 157, 0, 0, 158,
	0, 0, 159, 267, 331, 160, 332, 751, 161, 162,
	163, 164, 0, 752, 165, 270, 166, 0, 167, 168,
	169, 170, 778, 171, 172, 0, 173, 174, 175, 176,
	177, 179, 180, 178, 181, 182, 183, 0, 184, 333,
	185, 186, 706, 187, 0, 191, 192, 193, 194, 73,
	273, 195, 196, 197, 745, 198, 188, 189, 199, 334,
	200, 779, 275, 201, 0, 207, 202, 203, 190, 204,
	206, 780, 205, 753, 0, 208, 75, 209, 210, 211,
	212, 213, 0, 278, 781, 782, 0, 0, 214, 215,
	754, 755, 727, 216, 217, 218, 219, 0, 0, 220,
	221, 222, 223, 746, 224, 0, 283, 225, 226, 227,
	590, 783, 0, 0, 228, 0, 0, 0, 71, 229,
	230, 231, 232, 233, 701, 72, 0, 0, 0, 0,
	699, 0, 0, 0, 0, 697, 698, 732, 721, 722,
	719, 720, 711, 0, 707, 0, 0, 0, 0, 710,
	0, 0, 0, 92, 93, 1328, 94, 0, 0, 0,
	0, 748, 714, 0, 0, 0, 95, 96, 97, 235,
	763, 237, 764, 98, 765, 766, 0, 99, 241, 242,
	100, 717, 747, 767, 768, 245, 0, 101, 759, 0,
	740, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 322, 109, 110, 0, 741, 743, 0, 742,
	744, 111, 112, 289, 113, 769, 114, 770, 771, 0,
	115, 0, 116, 0, 1329, 0, 762, 118, 0, 119,
	0, 0, 0, 705, 120, 121, 122, 749, 750, 728,
	0, 0, 123, 124, 772, 0, 125, 0, 126, 0,
	0, 323, 0, 127, 760, 0, 255, 0, 128, 129,
	130, 131, 756, 758, 325, 0, 135, 0, 132, 0,
	324, 133, 773, 134, 774, 775, 776, 0, 739, 0,
	326, 136, 327, 137, 138, 139, 0, 141, 140, 0,
	761, 328, 142, 329, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 330, 150, 151, 153,
	152, 700, 0, 729, 757, 154, 777, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 331, 160,
	332, 751, 161, 162, 163, 164, 0, 752, 165, 270,
	166, 0, 167, 168, 169, 170, 778, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 333, 185, 186, 706, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 745, 198,
	188, 189, 199, 334, 200, 779, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 780, 205, 753, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 781, 782,
	0, 0, 214, 215, 754, 755, 727, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 746, 224, 0,
	283, 225, 226, 227, 284, 783, 1327, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 701, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 697,
	698, 1330, 732, 721, 722, 719, 720, 711, 707, 1325,
	0, 0, 0, 710, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 748, 714, 0, 0,
	0, 95, 96, 97, 235, 763, 237, 764, 98, 765,
	766, 0, 99, 241, 242, 100, 717, 747, 767, 768,
	245, 0, 101, 759, 0, 740, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 322, 109, 110,
	0, 741, 743, 0, 742, 744, 111, 112, 289, 113,
	769, 114, 770, 771, 0, 115, 0, 116, 0, 0,
	0, 762, 118, 0, 119, 0, 0, 0, 705, 120,
	121, 122, 749, 750, 728, 0, 0, 123, 124, 772,
	0, 125, 0, 126, 0, 0, 323, 0, 127, 760,
	0, 255, 0, 128, 129, 130, 131, 756, 758, 325,
	0, 135, 0, 132, 0, 324, 133, 773, 134, 774,
	775, 776, 0, 739, 0, 326, 136, 327, 137, 138,
	139, 0, 141, 140, 0, 761, 328, 142, 329, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	148, 330, 150, 151, 153, 152, 700, 0, 729, 757,
	154, 777, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 331, 160, 332, 751, 161, 162, 163,
	164, 0, 752, 165, 270, 166, 0, 167, 168, 169,
	170, 778, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 333, 185,
	186, 706, 187, 0, 191, 192, 193, 194, 73, 273,
	195, 196, 197, 745, 198, 188, 189, 199, 334, 200,
	779, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	780, 205, 753, 0, 208, 75, 209, 210, 211, 212,
	213, 0, 278, 781, 782, 0, 0, 214, 215, 754,
	755, 727, 216, 217, 218, 219, 0, 0, 220, 221,
	222, 223, 746, 224, 0, 283, 225, 226, 227, 590,
	783, 0, 0, 228, 0, 0, 0, 71, 229, 230,
	231, 232, 233, 701, 72, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 697, 698, 732, 721, 722, 719,
	720, 711, 0, 707, 0, 0, 0, 0, 710, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	748, 714, 0, 0, 0, 95, 96, 97, 235, 763,
	237, 764, 98, 765, 766, 1367, 99, 241, 242, 100,
	717, 747, 767, 768, 245, 0, 101, 759, 0, 740,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 322, 109, 110, 0, 741, 743, 0, 742, 744,
	111, 112, 289, 113, 769, 114, 770, 771, 0, 115,
	0, 116, 0, 0, 0, 762, 118, 0, 119, 0,
	0, 0, 705, 120, 121, 122, 749, 750, 728, 0,
	0, 123, 124, 772, 0, 125, 0, 126, 0, 1372,
	323, 0, 127, 760, 0, 255, 0, 128, 129, 130,
	131, 756, 758, 325, 0, 135, 0, 132, 0, 324,
	133, 773, 134, 774, 775, 776, 0, 739, 0, 326,
	136, 327, 137, 138, 139, 0, 141, 140, 1368, 761,
	328, 142, 329, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 330, 150, 151, 153, 152,
	700, 0, 729, 757, 154, 777, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 331, 160, 332,
	751, 161, 162, 163, 164, 0, 752, 165, 270, 166,
	0, 167, 168, 169, 170, 778, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 333, 185, 186, 706, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 745, 198, 188,
	189, 199, 334, 200, 779, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 780, 205, 753, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 781, 782, 0,
	1369, 214, 215, 754, 755, 727, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 746, 224, 0, 283,
	225, 226, 227, 284, 783, 0, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 701, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 0, 697, 698,
	732, 721, 722, 719, 720, 711, 0, 707, 0, 0,
	0, 0, 710, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 748, 714, 0, 0, 0, 95,
	96, 97, 235, 763, 237, 764, 98, 765, 766, 0,
	99, 241, 242, 100, 717, 747, 767, 768, 245, 0,
	101, 759, 0, 740, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 322, 109, 110, 0, 741,
	743, 0, 742, 744, 111, 112, 289, 113, 769, 114,
	770, 771, 0, 115, 0, 116, 0, 0, 0, 762,
	118, 0, 119, 0, 0, 0, 705, 120, 121, 122,
	749, 750, 728, 0, 0, 123, 124, 772, 0, 125,
	0, 126, 0, 0, 323, 0, 127, 760, 0, 255,
	0, 128, 129, 130, 131, 756, 758, 325, 0, 135,
	0, 132, 0, 324, 133, 773, 134, 774, 775, 776,
	0, 739, 0, 326, 136, 327, 137, 138, 139, 0,
	141, 140, 0, 761, 328, 142, 329, 0, 143, 0,
	0, 144, 0, 145, 146, 147, 149, 264, 148, 330,
	150, 151, 153, 152, 700, 1661, 729, 757, 154, 777,
	155, 156, 0, 157, 0, 0, 158, 0, 0, 159,
	267, 331, 160, 332, 751, 161, 162, 163, 164, 0,
	752, 165, 270, 166, 0, 167, 168, 169, 170, 778,
	171, 172, 0, 173, 174, 175, 176, 177, 179, 180,
	178, 181, 182, 183, 0, 184, 333, 185, 186, 706,
	187, 0, 191, 192, 193, 194, 0, 273, 195, 196,
	197, 745, 198, 188, 189, 199, 334, 200, 779, 275,
	201, 0, 207, 202, 203, 190, 204, 206, 780, 205,
	753, 0, 208, 0, 209, 210, 211, 212, 213, 0,
	278, 781, 782, 0, 0, 214, 215, 754, 755, 727,
	216, 217, 218, 219, 0, 0, 220, 221, 222, 223,
	746, 224, 0, 283, 225, 226, 227, 284, 783, 0,
	0, 228, 0, 0, 0, 0, 229, 230, 231, 232,
	233, 701, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 0, 697, 698, 695, 732, 721, 722, 719, 720,
	711, 707, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 748,
	714, 0, 0, 0, 95, 96, 97, 235, 763, 237,
	764, 98, 765, 766, 0, 99, 241, 242, 100, 717,
	747, 767, 768, 245, 0, 101, 759, 0, 740, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	322, 109, 110, 0, 741, 743, 0, 742, 744, 111,
	112, 289, 113, 769, 114, 770, 771, 0, 115, 0,
	116, 0, 0, 0, 762, 118, 0, 119, 0, 0,
	0, 705, 120, 121, 122, 749, 750, 728, 0, 0,
	123, 124, 772, 0, 125, 0, 126, 0, 0, 323,
	0, 127, 760, 0, 255, 0, 128, 129, 130, 131,
	756, 758, 325, 0, 135, 0, 132, 0, 324, 133,
	773, 134, 774, 775, 776, 0, 739, 0, 326, 136,
	327, 137, 138, 139, 0, 141, 140, 0, 761, 328,
	142, 329, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 330, 150, 151, 153, 152, 700,
	0, 729, 757, 154, 777, 155, 156, 0, 157, 0,
	0, 158, 0, 0, 159, 267, 331, 160, 332, 751,
	161, 162, 163, 164, 0, 752, 165, 270, 166, 0,
	167, 168, 169, 170, 778, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 333, 185, 186, 706, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 745, 198, 188, 189,
	199, 334, 200, 779, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 780, 205, 753, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 781, 782, 0, 0,
	214, 215, 754, 755, 727, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 746, 224, 0, 283, 225,
	226, 227, 284, 783, 0, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 701, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 697, 698, 0,
	0, 0, 0, 0, 1052, 1320, 707, 0, 0, 0,
	0, 710, 732, 721, 722, 719, 720, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 748, 714, 0, 0,
	0, 95, 96, 97, 235, 763, 237, 764, 98, 765,
	766, 0, 99, 241, 242, 100, 717, 747, 767, 768,
	245, 0, 101, 759, 0, 740, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 322, 109, 110,
	0, 741, 743, 0, 742, 744, 111, 112, 289, 113,
	769, 114, 770, 771, 0, 115, 0, 116, 0, 0,
	0, 762, 118, 0, 119, 0, 0, 0, 705, 120,
	121, 122, 749, 750, 728, 0, 0, 123, 124, 772,
	0, 125, 0, 126, 0, 0, 323, 0, 127, 760,
	0, 255, 0, 128, 129, 130, 131, 756, 758, 325,
	0, 135, 0, 132, 0, 324, 133, 773, 134, 774,
	775, 776, 0, 739, 0, 326, 136, 327, 137, 138,
	139, 0, 141, 140, 0, 761, 328, 142, 329, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	148, 330, 150, 151, 153, 152, 700, 0, 729, 757,
	154, 777, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 331, 160, 332, 751, 161, 162, 163,
	164, 0, 752, 165, 270, 166, 0, 167, 168, 169,
	170, 778, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 333, 185,
	186, 706, 187, 0, 191, 192, 193, 194, 0, 273,
	195, 196, 197, 745, 198, 188, 189, 199, 334, 200,
	779, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	780, 205, 753, 0, 208, 0, 209, 210, 211, 212,
	213, 0, 278, 781, 782, 0, 0, 214, 215, 754,
	755, 727, 216, 217, 218, 219, 0, 0, 220, 221,
	222, 223, 746, 224, 0, 283, 225, 226, 227, 284,
	783, 0, 0, 228, 0, 0, 0, 0, 229, 230,
	231, 232, 233, 701, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 697, 698, 732, 721, 722, 719,
	720, 711, 0, 707, 1793, 0, 0, 0, 710, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	748, 714, 0, 0, 0, 95, 96, 97, 235, 763,
	237, 764, 98, 765, 766, 0, 99, 241, 242, 100,
	717, 747, 767, 768, 245, 0, 101, 759, 0, 740,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 322, 109, 110, 0, 741, 743, 0, 742, 744,
	111, 112, 289, 113, 769, 114, 770, 771, 0, 115,
	0, 116, 0, 0, 0, 762, 118, 0, 119, 0,
	0, 0, 705, 120, 121, 122, 749, 750, 728, 0,
	0, 123, 124, 772, 0, 125, 0, 126, 0, 0,
	323, 0, 127, 760, 0, 255, 0, 128, 129, 130,
	131, 756, 758, 325, 0, 135, 0, 132, 0, 324,
	133, 773, 134, 774, 775, 776, 0, 739, 0, 326,
	136, 327, 137, 138, 139, 0, 141, 140, 0, 761,
	328, 142, 329, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 330, 150, 151, 153, 152,
	700, 0, 729, 757, 154, 777, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 331, 160, 332,
	751, 161, 162, 163, 164, 0, 752, 165, 270, 166,
	0, 167, 168, 169, 170, 778, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 333, 185, 186, 706, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 745, 198, 188,
	189, 199, 334, 200, 779, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 780, 205, 753, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 781, 782, 0,
	0, 214, 215, 754, 755, 727, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 746, 224, 0, 283,
	225, 226, 227, 284, 783, 1750, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 701, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 0, 697, 698,
	732, 721, 722, 719, 720, 711, 0, 707, 0, 0,
	0, 0, 710, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 748, 714, 0, 0, 0, 95,
	96, 97, 235, 763, 237, 764, 98, 765, 766, 0,
	99, 241, 242, 100, 717, 747, 767, 768, 245, 0,
	101, 759, 0, 740, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 322, 109, 110, 0, 741,
	743, 0, 742, 744, 111, 112, 289, 113, 769, 114,
	770, 771, 0, 115, 0, 116, 0, 0, 0, 762,
	118, 0, 119, 0, 0, 0, 705, 120, 121, 122,
	749, 750, 728, 0, 0, 123, 124, 772, 0, 125,
	0, 126, 0, 0, 323, 0, 127, 760, 0, 255,
	0, 128, 129, 130, 131, 756, 758, 325, 0, 135,
	0, 132, 0, 324, 133, 773, 134, 774, 775, 776,
	0, 739, 0, 326, 136, 327, 137, 138, 139, 0,
	141, 140, 0, 761, 328, 142, 329, 0, 143, 0,
	0, 144, 0, 145, 146, 147, 149, 264, 148, 330,
	150, 151, 153, 152, 700, 0, 729, 757, 154, 777,
	155, 156, 0, 157, 0, 0, 158, 0, 0, 159,
	267, 331, 160, 332, 751, 161, 162, 163, 164, 0,
	752, 165, 270, 166, 0, 167, 168, 169, 170, 778,
	171, 172, 0, 173, 174, 175, 176, 177, 179, 180,
	178, 181, 182, 183, 0, 184, 333, 185, 186, 706,
	187, 0, 191, 192, 193, 194, 0, 273, 195, 196,
	197, 745, 198, 188, 189, 199, 334, 200, 779, 275,
	201, 0, 207, 202, 203, 190, 204, 206, 780, 205,
	753, 0, 208, 0, 209, 210, 211, 212, 213, 0,
	278, 781, 782, 0, 0, 214, 215, 754, 755, 727,
	216, 217, 218, 219, 0, 0, 220, 221, 222, 223,
	746, 224, 0, 283, 225, 226, 227, 284, 783, 0,
	0, 228, 0, 0, 0, 0, 229, 230, 231, 232,
	233, 701, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 0, 697, 698, 732, 721, 722, 719, 720, 711,
	0, 707, 1740, 0, 0, 0, 710, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 748, 714,
	0, 0, 0, 95, 96, 97, 235, 763, 237, 764,
	98, 765, 766, 0, 99, 241, 242, 100, 717, 747,
	767, 768, 245, 0, 101, 759, 0, 740, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 322,
	109, 110, 0, 741, 743, 0, 742, 744, 111, 112,
	289, 113, 769, 114, 770, 771, 798, 115, 0, 116,
	0, 0, 0, 762, 118, 0, 119, 0, 0, 0,
	705, 120, 121, 122, 749, 750, 728, 0, 0, 123,
	124, 772, 0, 125, 0, 126, 0, 0, 323, 0,
	127, 760, 0, 255, 0, 128, 129, 130, 131, 756,
	758, 325, 0, 135, 0, 132, 0, 324, 133, 773,
	134, 774, 775, 776, 0, 739, 0, 326, 136, 327,
	137, 138, 139, 0, 141, 140, 0, 761, 328, 142,
	329, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 148, 330, 150, 151, 153, 152, 700, 0,
	729, 757, 154, 777, 155, 156, 0, 157, 0, 0,
	158, 0, 0, 159, 267, 331, 160, 332, 751, 161,
	162, 163, 164, 0, 752, 165, 270, 166, 0, 167,
	168, 169, 170, 778, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	333, 185, 186, 706, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 196, 197, 745, 198, 188, 189, 199,
	334, 200, 779, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 780, 205, 753, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 278, 781, 782, 0, 0, 214,
	215, 754, 755, 727, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 746, 224, 0, 283, 225, 226,
	227, 284, 783, 0, 0, 228, 0, 0, 0, 0,
	229, 230, 231, 232, 233, 701, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 697, 698, 732, 721,
	722, 719, 720, 711, 0, 707, 0, 0, 0, 0,
	710, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 748, 714, 0, 0, 0, 95, 96, 97,
	235, 763, 237, 764, 98, 765, 766, 0, 99, 241,
	242, 100, 717, 747, 767, 768, 245, 0, 101, 759,
	0, 740, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 322, 109, 110, 0, 741, 743, 0,
	742, 744, 111, 112, 289, 113, 769, 114, 770, 771,
	0, 115, 0, 116, 0, 0, 0, 762, 118, 0,
	119, 0, 0, 0, 705, 120, 121, 122, 749, 750,
	728, 0, 0, 123, 124, 772, 0, 125, 0, 126,
	0, 1372, 323, 0, 127, 760, 0, 255, 0, 128,
	129, 130, 131, 756, 758, 325, 0, 135, 0, 132,
	0, 324, 133, 773, 134, 774, 775, 776, 0, 739,
	0, 326, 136, 327, 137, 138, 139, 0, 141, 140,
	0, 761, 328, 142, 329, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 330, 150, 151,
	153, 152, 700, 0, 729, 757, 154, 777, 155, 156,
	0, 157, 0, 0, 158, 0, 0, 159, 267, 331,
	160, 332, 751, 161, 162, 163, 164, 0, 752, 165,
	270, 166, 0, 167, 168, 169, 170, 778, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 333, 185, 186, 706, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 745,
	198, 188, 189, 199, 334, 200, 779, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 780, 205, 753, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 781,
	782, 0, 0, 214, 215, 754, 755, 727, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 746, 224,
	0, 283, 225, 226, 227, 284, 783, 0, 0, 228,
	0, 0, 0, 0, 229, 230, 231, 232, 233, 701,
	0, 0, 0, 0, 0, 699, 0, 0, 0, 0,
	697, 698, 732, 721, 722, 719, 720, 711, 0, 707,
	0, 0, 0, 0, 710, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 748, 714, 0, 0,
	0, 95, 96, 97, 235, 763, 237, 764, 98, 765,
	766, 0, 99, 241, 242, 100, 717, 747, 767, 768,
	245, 0, 101, 759, 0, 740, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 322, 109, 110,
	0, 741, 743, 0, 742, 744, 111, 112, 289, 113,
	769, 114, 770, 771, 0, 115, 0, 116, 0, 0,
	0, 762, 118, 0, 119, 0, 0, 0, 705, 120,
	121, 122, 749, 750, 728, 0, 0, 123, 124, 772,
	0, 125, 0, 126, 0, 0, 323, 0, 127, 760,
	0, 255, 0, 128, 129, 130, 131, 756, 758, 325,
	0, 135, 0, 132, 0, 324, 133, 773, 134, 774,
	775, 776, 0, 739, 0, 326, 136, 327, 137, 138,
	139, 0, 141, 140, 0, 761, 328, 142, 329, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	148, 330, 150, 151, 153, 152, 700, 0, 729, 757,
	154, 777, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 331, 160, 332, 751, 161, 162, 163,
	164, 0, 752, 165, 270, 166, 0, 167, 168, 169,
	170, 778, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 333, 185,
	186, 706, 187, 0, 191, 192, 193, 194, 0, 273,
	195, 196, 197, 745, 198, 188, 189, 199, 334, 200,
	779, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	780, 205, 753, 0, 208, 0, 209, 210, 211, 212,
	213, 0, 278, 781, 782, 0, 0, 214, 215, 754,
	755, 727, 216, 217, 218, 219, 0, 0, 220, 221,
	222, 223, 746, 224, 0, 283, 225, 226, 227, 284,
	783, 0, 0, 228, 0, 0, 0, 0, 229, 230,
	231, 232, 233, 701, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 697, 698, 732, 721, 722, 719,
	720, 711, 0, 707, 1315, 0, 0, 0, 710, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	748, 714, 0, 0, 0, 95, 96, 97, 235, 763,
	237, 764, 98, 765, 766, 0, 99, 241, 242, 100,
	717, 747, 767, 768, 245, 0, 101, 759, 0, 740,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 322, 109, 110, 0, 741, 743, 0, 742, 744,
	111, 112, 289, 113, 769, 114, 770, 771, 0, 115,
	0, 116, 0, 0, 0, 762, 118, 0, 119, 0,
	0, 0, 705, 120, 121, 122, 749, 750, 728, 0,
	0, 123, 124, 772, 0, 125, 0, 126, 0, 0,
	323, 0, 127, 760, 0, 255, 0, 128, 129, 130,
	131, 756, 758, 325, 0, 135, 0, 132, 0, 324,
	133, 773, 134, 774, 775, 776, 0, 739, 0, 326,
	136, 327, 137, 138, 139, 0, 141, 140, 0, 761,
	328, 142, 329, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 330, 150, 151, 153, 152,
	700, 0, 729, 757, 154, 777, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 331, 160, 332,
	751, 161, 162, 163, 164, 0, 752, 165, 270, 166,
	0, 167, 168, 169, 170, 778, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 333, 185, 186, 706, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 745, 198, 188,
	189, 199, 334, 200, 779, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 780, 205, 753, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 781, 782, 0,
	0, 214, 215, 754, 755, 727, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 746, 224, 0, 283,
	225, 226, 227, 284, 783, 0, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 701, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 0, 697, 698,
	695, 732, 721, 722, 719, 720, 711, 707, 0, 0,
	0, 0, 710, 0, 0, 0, 0, 92, 93, 977,
	94, 0, 0, 0, 0, 748, 714, 0, 0, 0,
	95, 96, 97, 235, 763, 237, 764, 98, 765, 766,
	0, 99, 241, 242, 100, 717, 747, 767, 768, 245,
	0, 101, 759, 0, 740, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 322, 109, 110, 0,
	741, 743, 0, 742, 744, 111, 112, 289, 113, 769,
	114, 770, 771, 0, 115, 0, 116, 0, 0, 0,
	762, 118, 0, 119, 0, 0, 0, 705, 120, 121,
	122, 749, 750, 728, 0, 0, 123, 124, 772, 0,
	125, 0, 126, 0, 0, 323, 0, 127, 760, 0,
	255, 0, 128, 129, 130, 131, 756, 758, 325, 0,
	135, 0, 132, 0, 324, 133, 773, 134, 774, 775,
	776, 0, 739, 0, 326, 136, 327, 137, 138, 139,
	0, 141, 140, 0, 761, 328, 142, 329, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	330, 150, 151, 153, 152, 700, 0, 729, 757, 154,
	777, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 331, 160, 332, 751, 161, 162, 163, 164,
	0, 752, 165, 270, 166, 0, 167, 168, 169, 170,
	778, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 333, 185, 186,
	706, 187, 0, 191, 192, 193, 194, 0, 273, 195,
	196, 197, 745, 198, 188, 189, 199, 334, 200, 779,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 780,
	205, 753, 0, 208, 0, 209, 210, 211, 212, 213,
	0, 278, 781, 782, 0, 0, 214, 215, 754, 755,
	727, 216, 217, 218, 219, 0, 0, 220, 221, 222,
	223, 746, 224, 0, 283, 225, 226, 227, 284, 783,
	0, 0, 228, 0, 0, 0, 0, 229, 230, 231,
	232, 233, 701, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 697, 698, 732, 721, 722, 719, 720,
	711, 0, 707, 0, 0, 0, 0, 710, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 748,
	714, 0, 0, 0, 95, 96, 97, 235, 763, 237,
	764, 98, 765, 766, 0, 99, 241, 242, 100, 717,
	747, 767, 768, 245, 0, 101, 759, 0, 740, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	322, 109, 2140, 0, 741, 743, 0, 742, 744, 111,
	112, 289, 113, 769, 114, 770, 771, 0, 115, 0,
	116, 0, 0, 0, 762, 118, 0, 119, 0, 0,
	0, 705, 120, 121, 122, 749, 750, 728, 0, 0,
	123, 124, 772, 0, 125, 0, 126, 0, 0, 323,
	0, 127, 760, 0, 255, 0, 128, 129, 130, 131,
	756, 758, 325, 0, 135, 0, 132, 0, 324, 133,
	773, 134, 774, 775, 776, 0, 739, 0, 326, 136,
	327, 137, 138, 139, 0, 141, 140, 0, 761, 328,
	142, 329, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 330, 150, 151, 153, 152, 700,
	0, 729, 757, 154, 777, 155, 156, 0, 157, 0,
	0, 158, 0, 0, 159, 267, 331, 160, 332, 751,
	161, 162, 163, 164, 0, 752, 165, 270, 166, 0,
	167, 168, 169, 170, 778, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 333, 185, 186, 706, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 745, 198, 188, 189,
	199, 334, 200, 779, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 780, 205, 753, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 781, 782, 0, 0,
	214, 215, 754, 755, 727, 216, 217, 2139, 219, 0,
	0, 220, 221, 222, 223, 746, 224, 0, 283, 225,
	226, 227, 284, 783, 0, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 701, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 697, 698, 732,
	721, 722, 719, 720, 711, 0, 707, 0, 0, 0,
	0, 710, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 748, 714, 0, 0, 0, 95, 96,
	97, 2138, 763, 237, 764, 98, 765, 766, 0, 99,
	241, 242, 100, 717, 747, 767, 768, 245, 0, 101,
	759, 0, 740, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 322, 109, 2140, 0, 741, 743,
	0, 742, 744, 111, 112, 289, 113, 769, 114, 770,
	771, 0, 115, 0, 116, 0, 0, 0, 762, 118,
	0, 119, 0, 0, 0, 705, 120, 121, 122, 749,
	750, 728, 0, 0, 123, 124, 772, 0, 125, 0,
	126, 0, 0, 323, 0, 127, 760, 0, 255, 0,
	128, 129, 130, 131, 756, 758, 325, 0, 135, 0,
	132, 0, 324, 133, 773, 134, 774, 775, 776, 0,
	739, 0, 326, 136, 327, 137, 138, 139, 0, 141,
	140, 0, 761, 328, 142, 329, 0, 143, 0, 0,
	144, 0, 145, 146, 147, 149, 264, 148, 330, 150,
	151, 153, 152, 700, 0, 729, 757, 154, 777, 155,
	156, 0, 157, 0, 0, 158, 0, 0, 159, 267,
	331, 160, 332, 751, 161, 162, 163, 164, 0, 752,
	165, 270, 166, 0, 167, 168, 169, 170, 778, 171,
	172, 0, 173, 174, 175, 176, 177, 179, 180, 178,
	181, 182, 183, 0, 184, 333, 185, 186, 706, 187,
	0, 191, 192, 193, 194, 0, 273, 195, 196, 197,
	745, 198, 188, 189, 199, 334, 200, 779, 275, 201,
	0, 207, 202, 203, 190, 204, 206, 780, 205, 753,
	0, 208, 0, 209, 210, 211, 212, 213, 0, 278,
	781, 782, 0, 0, 214, 215, 754, 755, 727, 216,
	217, 2139, 219, 0, 0, 220, 221, 222, 223, 746,
	224, 0, 283, 225, 226, 227, 284, 783, 0, 0,
	228, 0, 0, 0, 0, 229, 230, 231, 232, 233,
	701, 0, 0, 0, 0, 0, 699, 0, 0, 0,
	0, 697, 698, 732, 721, 722, 719, 720, 711, 0,
	707, 0, 0, 0, 0, 710, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 748, 714, 0,
	0, 0, 95, 96, 97, 235, 763, 237, 764, 98,
	765, 766, 0, 99, 241, 242, 100, 717, 747, 767,
	768, 245, 0, 101, 759, 0, 740, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 322, 109,
	110, 0, 741, 743, 0, 742, 744, 111, 112, 289,
	113, 769, 114, 770, 771, 0, 115, 0, 116, 0,
	0, 0, 762, 118, 0, 119, 0, 0, 0, 705,
	120, 121, 122, 749, 750, 728, 0, 0, 123, 124,
	772, 0, 125, 0, 126, 0, 0, 323, 0, 127,
	760, 0, 255, 0, 128, 129, 130, 131, 756, 758,
	325, 0, 135, 0, 132, 0, 324, 133, 773, 134,
	774, 775, 776, 0, 739, 0, 326, 136, 327, 137,
	138, 139, 0, 141, 140, 0, 761, 328, 142, 329,
	0, 143, 0, 0, 144, 0, 145, 146, 147, 149,
	264, 148, 330, 150, 151, 153, 152, 700, 0, 729,
	757, 154, 777, 155, 156, 0, 157, 0, 0, 158,
	0, 0, 159, 267, 331, 160, 332, 751, 161, 162,
	163, 164, 0, 752, 165, 270, 166, 0, 167, 168,
	169, 170, 778, 171, 172, 0, 173, 174, 175, 176,
	177, 179, 180, 178, 181, 182, 183, 0, 184, 333,
	185, 186, 706, 187, 0, 191, 192, 193, 194, 0,
	273, 195, 196, 197, 745, 198, 188, 189, 199, 334,
	200, 779, 275, 201, 0, 207, 202, 203, 190, 204,
	206, 780, 205, 753, 0, 208, 0, 209, 210, 211,
	212, 213, 0, 278, 781, 782, 0, 0, 214, 215,
	754, 755, 727, 216, 217, 218, 219, 0, 0, 220,
	221, 222, 223, 746, 224, 0, 283, 225, 226, 227,
	284, 783, 0, 0, 228, 0, 0, 0, 0, 229,
	230, 231, 232, 233, 701, 0, 0, 0, 0, 0,
	699, 0, 0, 0, 0, 697, 698, 1344, 721, 722,
	719, 720, 711, 0, 707, 0, 0, 0, 0, 710,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 748, 714, 0, 0, 0, 95, 96, 97, 235,
	763, 237, 764, 98, 765, 766, 0, 99, 241, 242,
	100, 717, 747, 767, 768, 245, 0, 101, 759, 0,
	740, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 322, 109, 110, 0, 741, 743, 0, 742,
	744, 111, 112, 289, 113, 769, 1347, 770, 771, 0,
	115, 0, 116, 0, 0, 0, 762, 118, 0, 119,
	0, 0, 0, 705, 120, 121, 122, 749, 750, 728,
	0, 0, 123, 124, 772, 0, 125, 0, 126, 0,
	0, 323, 0, 127, 760, 0, 255, 0, 128, 129,
	1348, 131, 756, 758, 325, 0, 135, 0, 132, 0,
	324, 133, 773, 134, 774, 775, 776, 0, 739, 0,
	326, 136, 327, 137, 138, 139, 0, 141, 140, 0,
	761, 328, 142, 329, 0, 143, 0, 0, 144, 0,
	145, 1349, 1346, 149, 264, 148, 330, 150, 151, 153,
	152, 700, 0, 729, 757, 154, 777, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 331, 160,
	332, 751, 161, 162, 163, 164, 0, 752, 165, 270,
	166, 0, 167, 168, 169, 170, 778, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 333, 185, 186, 706, 187, 0, 191,
	192, 193, 1350, 0, 273, 195, 196, 197, 745, 198,
	188, 189, 199, 334, 200, 779, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 780, 205, 753, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 781, 782,
	0, 0, 214, 215, 754, 755, 727, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 746, 224, 0,
	283, 225, 226, 227, 284, 783, 0, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 1345, 233, 701, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 697,
	698, 732, 721, 722, 719, 720, 711, 0, 707, 0,
	0, 0, 0, 710, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 748, 714, 0, 0, 0,
	95, 96, 97, 235, 763, 237, 764, 98, 765, 766,
	0, 99, 241, 242, 100, 717, 747, 767, 768, 245,
	0, 101, 759, 0, 740, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 322, 109, 110, 0,
	741, 743, 0, 742, 744, 111, 112, 289, 113, 769,
	114, 770, 771, 0, 115, 0, 116, 0, 0, 0,
	762, 118, 0, 119, 0, 0, 0, 705, 120, 121,
	122, 749, 750, 728, 0, 0, 123, 124, 772, 0,
	125, 0, 126, 0, 0, 323, 0, 127, 760, 0,
	255, 0, 128, 129, 130, 131, 756, 758, 325, 0,
	135, 0, 132, 0, 324, 133, 773, 134, 774, 775,
	776, 0, 739, 0, 326, 136, 327, 137, 138, 139,
	0, 141, 140, 0, 761, 328, 142, 329, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	330, 150, 151, 153, 152, 0, 0, 729, 757, 154,
	777, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 331, 160, 332, 751, 161, 162, 163, 164,
	0, 752, 165, 270, 166, 0, 167, 168, 169, 170,
	778, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 333, 185, 186,
	1362, 187, 0, 191, 192, 193, 194, 0, 273, 195,
	196, 197, 745, 198, 188, 189, 199, 334, 200, 779,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 780,
	205, 753, 0, 208, 0, 209, 210, 211, 212, 213,
	0, 278, 781, 782, 0, 0, 214, 215, 754, 755,
	727, 216, 217, 218, 219, 0, 0, 220, 221, 222,
	223, 746, 224, 0, 283, 225, 226, 227, 284, 783,
	0, 0, 228, 0, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 0, 0, 0, 0, 0, 1360, 0,
	0, 0, 0, 1358, 1359, 732, 721, 722, 719, 720,
	711, 0, 1361, 0, 0, 0, 0, 710, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 748,
	714, 0, 0, 0, 95, 96, 97, 235, 763, 237,
	764, 98, 765, 766, 0, 99, 241, 242, 100, 0,
	747, 767, 768, 245, 0, 101, 759, 0, 740, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	322, 109, 110, 0, 741, 743, 0, 742, 744, 111,
	112, 289, 113, 769, 114, 770, 771, 0, 115, 0,
	116, 0, 0, 0, 762, 118, 0, 119, 0, 0,
	0, 250, 120, 121, 122, 749, 750, 728, 0, 0,
	123, 124, 772, 0, 125, 0, 126, 0, 0, 323,
	0, 127, 760, 0, 255, 0, 128, 129, 130, 131,
	756, 758, 325, 0, 135, 0, 132, 0, 324, 133,
	773, 134, 774, 775, 776, 0, 739, 0, 326, 136,
	327, 137, 138, 139, 0, 141, 140, 0, 761, 328,
	142, 329, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 330, 150, 151, 153, 152, 0,
	0, 729, 757, 154, 777, 155, 156, 0, 157, 0,
	0, 158, 0, 0, 159, 267, 331, 160, 332, 751,
	161, 162, 163, 164, 0, 752, 165, 270, 166, 0,
	167, 168, 169, 170, 778, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 333, 185, 186, 1362, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 745, 198, 188, 189,
	199, 334, 200, 779, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 780, 205, 753, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 781, 782, 0, 0,
	214, 215, 754, 755, 727, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 746, 224, 0, 283, 225,
	226, 227, 284, 783, 0, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 0, 732, 721,
	722, 719, 720, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 1361, 94, 0, 0,
	0, 710, 748, 714, 0, 0, 0, 95, 96, 97,
	0, 763, 237, 764, 98, 765, 766, 0, 99, 241,
	242, 100, 717, 747, 767, 768, 245, 0, 101, 759,
	0, 740, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 322, 109, 2140, 0, 741, 743, 0,
	742, 744, 111, 112, 289, 113, 769, 114, 770, 771,
	0, 115, 0, 116, 0, 0, 0, 762, 118, 0,
	119, 0, 0, 0, 705, 120, 121, 122, 749, 750,
	728, 0, 0, 123, 124, 772, 0, 125, 0, 126,
	0, 0, 323, 0, 127, 760, 0, 255, 0, 128,
	129, 130, 131, 756, 758, 0, 0, 135, 0, 132,
	0, 324, 133, 773, 134, 774, 775, 776, 0, 739,
	0, 0, 136, 327, 137, 138, 139, 0, 141, 140,
	0, 761, 328, 142, 0, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 330, 150, 151,
	153, 152, 700, 0, 729, 757, 154, 777, 155, 156,
	0, 157, 0, 0, 158, 0, 0, 159, 267, 331,
	160, 332, 751, 161, 162, 163, 164, 0, 752, 165,
	270, 166, 0, 167, 168, 169, 170, 778, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 333, 185, 186, 706, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 745,
	198, 188, 189, 199, 0, 200, 779, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 780, 205, 753, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 781,
	782, 0, 0, 214, 215, 754, 755, 727, 216, 217,
	2139, 219, 0, 0, 220, 221, 222, 223, 746, 224,
	0, 283, 225, 226, 227, 284, 783, 0, 0, 228,
	0, 0, 0, 0, 229, 230, 231, 232, 233, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 698, 0, 0, 0, 92, 93, 0, 94, 707,
	0, 0, 0, 748, 710, 0, 0, 0, 95, 96,
	97, 235, 236, 237, 238, 98, 239, 240, 0, 99,
	241, 242, 100, 0, 747, 243, 244, 245, 0, 101,
	759, 0, 740, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 322, 109, 110, 0, 741, 743,
	0, 742, 744, 111, 112, 289, 113, 247, 114, 248,
	249, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 250, 120, 121, 122, 749,
	750, 0, 0, 0, 123, 124, 253, 0, 125, 0,
	126, 0, 0, 323, 0, 127, 760, 0, 255, 0,
	128, 129, 130, 131, 756, 758, 325, 0, 135, 0,
	132, 0, 324, 133, 258, 134, 259, 260, 261, 0,
	262, 0, 326, 136, 327, 137, 138, 139, 0, 141,
	140, 0, 761, 328, 142, 329, 0, 143, 0, 0,
	144, 0, 145, 146, 147, 149, 264, 148, 330, 150,
	151, 153, 152, 0, 0, 0, 757, 154, 266, 155,
	156, 0, 157, 0, 0, 158, 0, 0, 159, 267,
	331, 160, 332, 751, 161, 162, 163, 164, 0, 752,
	165, 270, 166, 0, 167, 168, 169, 170, 271, 171,
	172, 0, 173, 174, 175, 176, 177, 179, 180, 178,
	181, 182, 183, 0, 184, 333, 185, 186, 272, 187,
	0, 191, 192, 193, 194, 0, 273, 195, 196, 197,
	745, 198, 188, 189, 199, 334, 200, 274, 275, 201,
	0, 207, 202, 203, 190, 204, 206, 276, 205, 753,
	0, 208, 0, 209, 210, 211, 212, 213, 0, 278,
	279, 280, 0, 0, 214, 215, 754, 755, 0, 216,
	217, 218, 219, 0, 0, 220, 221, 222, 223, 746,
	224, 0, 283, 225, 226, 227, 284, 285, 0, 0,
	228, 0, 508, 0, 0, 229, 230, 231, 232, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 234, 0, 0, 0,
	1634, 95, 96, 97, 235, 236, 237, 238, 98, 239,
	240, 0, 99, 241, 242, 100, 0, 0, 243, 244,
	245, 0, 101, 246, 0, 321, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 322, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 289, 113,
	247, 114, 248, 249, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 250, 120,
	121, 122, 251, 252, 0, 0, 0, 123, 124, 253,
	0, 125, 0, 126, 0, 0, 323, 0, 127, 254,
	0, 255, 0, 128, 129, 130, 131, 256, 257, 325,
	0, 135, 0, 132, 0, 324, 133, 258, 134, 259,
	260, 261, 0, 262, 0, 326, 136, 327, 137, 138,
	139, 0, 141, 140, 0, 263, 328, 142, 329, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	148, 330, 150, 151, 153, 152, 0, 0, 0, 265,
	154, 266, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 331, 160, 332, 268, 161, 162, 163,
	164, 0, 269, 165, 270, 166, 0, 167, 168, 169,
	170, 271, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 333, 185,
	186, 272, 187, 0, 191, 192, 193, 194, 73, 273,
	195, 196, 197, 0, 198, 188, 189, 199, 334, 200,
	274, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	276, 205, 277, 0, 208, 75, 209, 210, 211, 212,
	213, 0, 278, 279, 280, 0, 0, 214, 215, 281,
	282, 0, 216, 217, 218, 219, 0, 0, 220, 221,
	222, 223, 0, 224, 0, 283, 225, 226, 227, 590,
	285, 0, 0, 228, 0, 0, 0, 71, 229, 230,
	231, 232, 233, 0, 72, 508, 505, 0, 506, 501,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 70, 94, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 95, 96, 97, 235, 236, 237,
	238, 98, 239, 240, 0, 99, 241, 242, 100, 0,
	0, 243, 244, 245, 0, 101, 246, 0, 321, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	322, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 289, 113, 247, 114, 248, 249, 923, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 250, 120, 121, 122, 251, 252, 498, 0, 0,
	123, 124, 253, 0, 125, 0, 126, 0, 0, 323,
	0, 127, 254, 0, 255, 0, 128, 129, 130, 131,
	256, 257, 325, 0, 135, 0, 132, 0, 324, 133,
	258, 134, 259, 260, 261, 0, 262, 0, 326, 136,
	327, 137, 138, 139, 0, 141, 140, 0, 263, 328,
	142, 329, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 330, 150, 151, 153, 152, 0,
	0, 0, 265, 154, 266, 155, 156, 0, 157, 499,
	0, 158, 0, 0, 159, 267, 331, 160, 332, 268,
	161, 162, 163, 164, 0, 269, 165, 270, 166, 0,
	167, 168, 169, 170, 271, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 333, 185, 186, 272, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 0, 198, 188, 189,
	199, 334, 200, 274, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 276, 205, 277, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 279, 280, 0, 0,
	214, 215, 281, 282, 497, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 0, 224, 0, 283, 225,
	226, 227, 284, 285, 0, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 508, 505, 0, 506,
	501, 496, 0, 0, 0, 0, 0, 507, 502, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 95, 96, 97, 235, 236,
	237, 238, 98, 239, 240, 0, 99, 241, 242, 100,
	0, 0, 243, 244, 245, 0, 101, 246, 0, 321,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 322, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 289, 113, 247, 114, 248, 249, 920, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 250, 120, 121, 122, 251, 252, 498, 0,
	0, 123, 124, 253, 0, 125, 0, 126, 0, 0,
	323, 0, 127, 254, 0, 255, 0, 128, 129, 130,
	131, 256, 257, 325, 0, 135, 0, 132, 0, 324,
	133, 258, 134, 259, 260, 261, 0, 262, 0, 326,
	136, 327, 137, 138, 139, 0, 141, 140, 0, 263,
	328, 142, 329, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 330, 150, 151, 153, 152,
	0, 0, 0, 265, 154, 266, 155, 156, 0, 157,
	499, 0, 158, 0, 0, 159, 267, 331, 160, 332,
	268, 161, 162, 163, 164, 0, 269, 165, 270, 166,
	0, 167, 168, 169, 170, 271, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 333, 185, 186, 272, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 0, 198, 188,
	189, 199, 334, 200, 274, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 276, 205, 277, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 279, 280, 0,
	0, 214, 215, 281, 282, 497, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 0, 224, 0, 283,
	225, 226, 227, 284, 285, 0, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 508, 505, 0,
	506, 501, 496, 0, 0, 0, 0, 0, 507, 502,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	321, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 322, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 622,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 498,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 323, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 256, 257, 325, 0, 135, 0, 132, 0,
	324, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	326, 136, 327, 137, 138, 139, 0, 141, 140, 0,
	263, 328, 142, 329, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 330, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 499, 0, 158, 0, 0, 159, 267, 331, 160,
	332, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 333, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 334, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 497, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 0, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 508, 505,
	0, 506, 501, 496, 0, 0, 0, 0, 0, 507,
	502, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 95, 96, 97,
	235, 236, 237, 238, 98, 239, 240, 0, 99, 241,
	242, 100, 0, 0, 243, 244, 245, 0, 101, 246,
	0, 321, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 322, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 289, 113, 247, 114, 248, 249,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 250, 120, 121, 122, 251, 252,
	498, 0, 0, 123, 124, 253, 0, 125, 0, 126,
	0, 0, 323, 0, 127, 254, 0, 255, 0, 128,
	129, 130, 131, 256, 257, 325, 0, 135, 0, 132,
	0, 324, 133, 258, 134, 259, 260, 261, 0, 262,
	0, 326, 136, 327, 137, 138, 139, 0, 141, 140,
	0, 263, 328, 142, 329, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 330, 150, 151,
	153, 152, 0, 0, 0, 265, 154, 266, 155, 156,
	0, 157, 499, 0, 158, 0, 0, 159, 267, 331,
	160, 332, 268, 161, 162, 163, 164, 0, 269, 165,
	270, 166, 0, 167, 168, 169, 170, 271, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 333, 185, 186, 272, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 0,
	198, 188, 189, 199, 334, 200, 274, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 276, 205, 277, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 279,
	280, 0, 0, 214, 215, 281, 282, 497, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 0, 224,
	0, 283, 225, 226, 227, 284, 285, 0, 89, 228,
	0, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	507, 502, 234, 0, 0, 0, 0, 95, 96, 97,
	235, 236, 237, 238, 98, 239, 240, 0, 99, 241,
	242, 100, 0, 0, 243, 244, 245, 0, 101, 246,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 289, 113, 247, 114, 248, 249,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 250, 120, 121, 122, 251, 252,
	0, 0, 0, 123, 124, 253, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 254, 0, 255, 0, 128,
	129, 130, 131, 256, 257, 0, 0, 135, 0, 132,
	0, 0, 133, 258, 134, 259, 260, 261, 0, 262,
	0, 0, 136, 0, 137, 138, 139, 0, 141, 140,
	0, 263, 0, 142, 0, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 0, 150, 151,
	153, 152, 0, 0, 0, 265, 154, 266, 155, 156,
	0, 157, 0, 542, 158, 0, 0, 159, 267, 0,
	160, 0, 268, 161, 162, 163, 164, 0, 269, 165,
	270, 166, 0, 167, 168, 169, 170, 271, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 0, 185, 186, 272, 187, 0,
	191, 192, 193, 194, 73, 273, 195, 196, 197, 0,
	198, 188, 189, 199, 0, 200, 274, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 276, 205, 277, 0,
	208, 75, 209, 210, 211, 212, 213, 0, 278, 279,
	280, 0, 0, 214, 215, 281, 282, 0, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 0, 224,
	0, 283, 225, 226, 227, 590, 285, 0, 0, 228,
	0, 89, 0, 71, 229, 230, 231, 232, 233, 0,
	72, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 234, 0, 1239, 0, 1244,
	95, 96, 97, 235, 236, 237, 238, 98, 239, 240,
	0, 99, 241, 242, 100, 0, 0, 243, 244, 245,
	0, 101, 246, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 289, 113, 247,
	114, 248, 249, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 250, 120, 121,
	122, 251, 252, 0, 0, 0, 123, 124, 253, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 254, 0,
	255, 0, 128, 129, 130, 131, 256, 257, 0, 0,
	135, 0, 132, 0, 0, 133, 258, 134, 259, 260,
	261, 0, 262, 0, 0, 136, 0, 137, 138, 139,
	0, 141, 140, 0, 263, 0, 142, 0, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	0, 150, 151, 153, 152, 0, 0, 0, 265, 154,
	266, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 0, 160, 0, 268, 161, 162, 163, 164,
	0, 269, 165, 270, 166, 0, 167, 168, 169, 170,
	271, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 0, 185, 186,
	272, 187, 0, 191, 192, 193, 194, 73, 273, 195,
	196, 197, 0, 198, 188, 189, 199, 0, 200, 274,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 276,
	205, 277, 0, 208, 75, 209, 210, 211, 212, 213,
	0, 278, 279, 280, 0, 0, 214, 215, 281, 282,
	0, 216, 217, 218, 219, 0, 0, 220, 221, 222,
	223, 0, 224, 0, 283, 225, 226, 227, 590, 285,
	0, 0, 228, 0, 89, 0, 71, 229, 230, 231,
	232, 233, 0, 72, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 234, 0,
	0, 0, 70, 95, 96, 97, 235, 236, 237, 238,
	98, 239, 240, 0, 99, 241, 242, 100, 0, 0,
	243, 244, 245, 0, 101, 246, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	289, 113, 247, 114, 248, 249, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	250, 120, 121, 122, 251, 252, 0, 0, 0, 123,
	124, 253, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 254, 0, 255, 0, 128, 129, 130, 131, 256,
	257, 0, 0, 135, 0, 132, 0, 0, 133, 258,
	134, 259, 260, 261, 0, 262, 0, 0, 136, 0,
	137, 138, 139, 0, 141, 140, 0, 263, 0, 142,
	0, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 148, 0, 150, 151, 153, 152, 0, 0,
	0, 265, 154, 266, 155, 156, 0, 157, 0, 542,
	158, 0, 0, 159, 267, 0, 160, 0, 268, 161,
	162, 163, 164, 0, 269, 165, 270, 166, 0, 167,
	168, 169, 170, 271, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	0, 185, 186, 272, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 196, 197, 0, 198, 188, 189, 199,
	0, 200, 274, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 276, 205, 277, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 278, 279, 280, 0, 0, 214,
	215, 281, 282, 0, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 0, 224, 0, 283, 225, 226,
	227, 284, 285, 0, 0, 228, 0, 89, 0, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 1239, 0, 1244, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 0,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 256, 257, 0, 0, 135, 0, 132, 0,
	0, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	0, 136, 0, 137, 138, 139, 0, 141, 140, 0,
	263, 0, 142, 0, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 0, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 0, 160,
	0, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 0, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 0, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 0, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 0, 0, 228, 0,
	0, 89, 0, 229, 230, 231, 232, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 234, 0, 0, 0, 827,
	95, 96, 97, 235, 236, 237, 238, 98, 239, 240,
	0, 99, 241, 242, 100, 0, 0, 243, 244, 245,
	0, 101, 246, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 289, 113, 247,
	114, 248, 249, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 250, 120, 121,
	122, 251, 252, 0, 0, 0, 123, 124, 253, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 254, 0,
	255, 0, 128, 129, 130, 131, 256, 257, 0, 0,
	135, 0, 132, 0, 0, 133, 258, 134, 259, 260,
	261, 0, 262, 0, 0, 136, 0, 137, 138, 139,
	0, 141, 140, 0, 263, 0, 142, 0, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	0, 150, 151, 153, 152, 0, 0, 0, 265, 154,
	266, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 0, 160, 0, 268, 161, 162, 163, 164,
	0, 269, 165, 270, 166, 0, 167, 168, 169, 170,
	271, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 0, 185, 186,
	272, 187, 0, 191, 192, 193, 194, 0, 273, 195,
	196, 197, 0, 198, 188, 189, 199, 0, 200, 274,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 276,
	205, 277, 0, 208, 0, 209, 210, 211, 212, 213,
	0, 278, 279, 280, 0, 0, 214, 215, 281, 282,
	0, 216, 217, 218, 219, 0, 0, 220, 221, 222,
	223, 0, 224, 0, 283, 225, 226, 227, 284, 285,
	0, 0, 228, 0, 89, 0, 0, 229, 230, 231,
	232, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 234, 0,
	0, 0, 1153, 95, 96, 97, 235, 236, 237, 238,
	98, 239, 240, 0, 99, 241, 242, 100, 0, 0,
	243, 244, 245, 0, 101, 246, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	289, 113, 247, 114, 248, 249, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	250, 120, 121, 122, 251, 252, 0, 0, 0, 123,
	124, 253, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 254, 0, 255, 0, 128, 129, 130, 131, 256,
	257, 0, 0, 135, 0, 132, 0, 0, 133, 258,
	134, 259, 260, 261, 0, 262, 0, 0, 136, 0,
	137, 138, 139, 0, 141, 140, 0, 263, 0, 142,
	0, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 148, 0, 150, 151, 153, 152, 0, 0,
	0, 265, 154, 266, 155, 156, 0, 157, 0, 0,
	158, 0, 0, 159, 267, 0, 160, 0, 268, 161,
	162, 163, 164, 0, 269, 165, 270, 166, 0, 167,
	168, 169, 170, 271, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	0, 185, 186, 272, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 196, 197, 0, 198, 188, 189, 199,
	0, 200, 274, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 276, 205, 277, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 278, 279, 280, 0, 0, 214,
	215, 281, 282, 0, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 0, 224, 0, 283, 225, 226,
	227, 284, 285, 0, 0, 228, 0, 89, 0, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 0, 0, 1757, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 0,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 256, 257, 0, 0, 135, 0, 132, 0,
	0, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	0, 136, 0, 137, 138, 139, 0, 141, 140, 0,
	263, 0, 142, 0, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 0, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 0, 160,
	0, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 0, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 0, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 0, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 0, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 732, 721,
	722, 719, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 794, 0,
	0, 0, 234, 0, 0, 0, 0, 95, 96, 97,
	235, 763, 237, 764, 98, 765, 766, 0, 99, 241,
	242, 100, 0, 0, 767, 768, 245, 0, 101, 246,
	0, 321, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 322, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 289, 113, 769, 114, 770, 771,
	0, 115, 0, 116, 0, 0, 0, 762, 118, 0,
	119, 0, 0, 0, 250, 120, 121, 122, 251, 252,
	728, 0, 0, 123, 124, 772, 0, 125, 0, 126,
	0, 0, 323, 0, 127, 254, 0, 255, 0, 128,
	129, 130, 131, 256, 257, 325, 0, 135, 0, 132,
	0, 324, 133, 773, 134, 774, 775, 776, 0, 739,
	0, 326, 136, 327, 137, 138, 139, 0, 141, 140,
	0, 263, 328, 142, 329, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 330, 150, 151,
	153, 152, 0, 0, 729, 265, 154, 777, 155, 156,
	0, 157, 0, 0, 158, 0, 0, 159, 267, 331,
	160, 332, 268, 161, 162, 163, 164, 0, 269, 165,
	270, 166, 0, 167, 168, 169, 170, 778, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 333, 185, 186, 272, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 0,
	198, 188, 189, 199, 334, 200, 779, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 780, 205, 277, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 781,
	782, 0, 0, 214, 215, 281, 282, 727, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 0, 224,
	0, 283, 225, 226, 227, 284, 783, 508, 505, 228,
	0, 0, 629, 0, 229, 230, 231, 232, 233, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	321, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 322, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 0,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 323, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 256, 257, 325, 0, 135, 0, 132, 0,
	324, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	326, 136, 327, 137, 138, 139, 0, 141, 140, 0,
	263, 328, 142, 329, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 330, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 331, 160,
	332, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 333, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 334, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 0, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 89, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 95, 96, 97, 235, 236,
	237, 238, 98, 239, 240, 0, 99, 241, 242, 100,
	0, 0, 243, 244, 245, 0, 101, 246, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 85, 113, 247, 114, 248, 249, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 250, 120, 121, 122, 251, 252, 0, 0,
	0, 123, 124, 253, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 254, 0, 255, 0, 128, 129, 130,
	131, 256, 257, 0, 0, 135, 0, 132, 0, 0,
	133, 258, 134, 259, 260, 261, 0, 262, 0, 0,
	136, 0, 137, 138, 139, 0, 141, 140, 0, 263,
	0, 142, 0, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 0, 150, 151, 153, 152,
	0, 0, 0, 265, 154, 266, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 0, 160, 0,
	268, 161, 162, 163, 164, 0, 269, 165, 270, 166,
	0, 167, 168, 169, 170, 271, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 0, 185, 186, 272, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 0, 198, 188,
	189, 199, 0, 200, 274, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 276, 205, 277, 0, 208, 84,
	209, 210, 211, 212, 213, 0, 278, 279, 280, 0,
	0, 214, 215, 281, 282, 0, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 0, 224, 0, 283,
	225, 226, 227, 284, 285, 508, 505, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 234,
	88, 0, 0, 0, 95, 96, 97, 235, 236, 237,
	238, 98, 239, 240, 0, 99, 241, 242, 100, 0,
	0, 243, 244, 245, 0, 101, 246, 0, 321, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	322, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 289, 113, 247, 114, 248, 249, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 250, 120, 121, 122, 251, 252, 0, 0, 0,
	123, 124, 253, 0, 125, 0, 126, 0, 0, 323,
	0, 127, 254, 0, 255, 0, 128, 129, 130, 131,
	256, 257, 325, 0, 135, 0, 132, 0, 324, 133,
	258, 134, 259, 260, 261, 0, 262, 0, 326, 136,
	327, 137, 138, 139, 0, 141, 140, 0, 263, 328,
	142, 329, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 330, 150, 151, 153, 152, 0,
	0, 0, 265, 154, 266, 155, 156, 0, 157, 0,
	0, 158, 0, 0, 159, 267, 331, 160, 332, 268,
	161, 162, 163, 164, 0, 269, 165, 270, 166, 0,
	167, 168, 169, 170, 271, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 333, 185, 186, 272, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 0, 198, 188, 189,
	199, 334, 200, 274, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 276, 205, 277, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 279, 280, 0, 0,
	214, 215, 281, 282, 0, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 0, 224, 0, 283, 225,
	226, 227, 284, 285, 89, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 95, 96, 97, 235, 236, 237, 238,
	98, 239, 240, 0, 99, 241, 242, 100, 0, 0,
	243, 244, 245, 0, 101, 246, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	289, 113, 247, 114, 248, 249, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	250, 120, 121, 122, 251, 252, 0, 0, 0, 123,
	124, 253, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 254, 0, 255, 0, 128, 129, 130, 131, 256,
	257, 0, 0, 135, 0, 132, 0, 0, 133, 258,
	134, 259, 260, 261, 0, 262, 0, 0, 136, 0,
	137, 138, 139, 0, 141, 140, 0, 263, 0, 142,
	0, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 148, 0, 150, 151, 153, 152, 0, 0,
	0, 265, 154, 266, 155, 156, 0, 157, 0, 0,
	158, 0, 0, 159, 267, 0, 160, 0, 268, 161,
	162, 163, 164, 0, 269, 165, 270, 166, 0, 167,
	168, 169, 170, 271, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	0, 185, 186, 272, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 196, 197, 0, 198, 188, 189, 199,
	0, 200, 274, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 276, 205, 277, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 278, 279, 280, 0, 0, 214,
	215, 281, 282, 0, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 0, 224, 0, 283, 225, 226,
	227, 284, 285, 508, 0, 228, 0, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 234, 88, 0,
	0, 0, 95, 96, 97, 235, 236, 237, 238, 98,
	239, 240, 0, 99, 241, 242, 100, 0, 0, 243,
	244, 245, 0, 101, 246, 0, 321, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 322, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 289,
	113, 247, 114, 248, 249, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 250,
	120, 121, 122, 251, 252, 0, 0, 0, 123, 124,
	253, 0, 125, 0, 126, 0, 0, 323, 0, 127,
	254, 0, 255, 0, 128, 129, 130, 131, 256, 257,
	325, 0, 135, 0, 132, 0, 324, 133, 258, 134,
	259, 260, 261, 0, 262, 0, 326, 136, 327, 137,
	138, 139, 0, 141, 140, 0, 263, 328, 142, 329,
	0, 143, 0, 0, 144, 0, 145, 146, 147, 149,
	264, 148, 330, 150, 151, 153, 152, 0, 0, 0,
	265, 154, 266, 155, 156, 0, 157, 0, 0, 158,
	0, 0, 159, 267, 331, 160, 332, 268, 161, 162,
	163, 164, 0, 269, 165, 270, 166, 0, 167, 168,
	169, 170, 271, 171, 172, 0, 173, 174, 175, 176,
	177, 179, 180, 178, 181, 182, 183, 0, 184, 333,
	185, 186, 272, 187, 0, 191, 192, 193, 194, 0,
	273, 195, 196, 197, 0, 198, 188, 189, 199, 334,
	200, 274, 275, 201, 0, 207, 202, 203, 190, 204,
	206, 276, 205, 277, 0, 208, 0, 209, 210, 211,
	212, 213, 0, 278, 279, 280, 0, 0, 214, 215,
	281, 282, 0, 216, 217, 218, 219, 0, 0, 220,
	221, 222, 223, 0, 224, 0, 283, 225, 226, 227,
	284, 285, 89, 0, 228, 0, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 234, 0, 0, 0,
	0, 95, 96, 97, 235, 236, 237, 238, 98, 239,
	240, 0, 99, 241, 242, 100, 0, 0, 243, 244,
	245, 1110, 101, 246, 0, 0, 0, 102, 103, 104,
	0, 105, 1108, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 289, 113,
	247, 114, 248, 249, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 250, 120,
	121, 122, 251, 252, 0, 1211, 0, 123, 124, 253,
	0, 125, 0, 126, 1113, 0, 0, 0, 127, 254,
	0, 255, 0, 128, 129, 130, 131, 256, 257, 0,
	0, 135, 1209, 132, 0, 0, 133, 258, 134, 259,
	260, 261, 0, 262, 0, 0, 136, 0, 137, 138,
	139, 0, 141, 140, 0, 263, 0, 142, 0, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	148, 0, 150, 151, 153, 152, 0, 0, 0, 265,
	154, 266, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 0, 160, 0, 268, 161, 162, 163,
	164, 0, 269, 165, 270, 166, 1112, 167, 168, 169,
	170, 271, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 0, 185,
	186, 272, 187, 0, 191, 192, 193, 194, 0, 273,
	195, 196, 197, 0, 198, 188, 189, 199, 0, 200,
	274, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	276, 205, 277, 0, 208, 0, 209, 210, 211, 212,
	213, 0, 278, 279, 280, 0, 0, 214, 215, 281,
	282, 0, 216, 217, 218, 219, 0, 1210, 220, 221,
	222, 223, 0, 224, 0, 283, 225, 226, 227, 284,
	285, 89, 0, 228, 0, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	95, 96, 97, 235, 236, 237, 238, 98, 239, 240,
	0, 99, 241, 242, 100, 0, 0, 243, 244, 245,
	1110, 101, 246, 0, 0, 1105, 102, 103, 104, 0,
	105, 1108, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 289, 113, 247,
	114, 248, 249, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 250, 120, 121,
	122, 251, 252, 0, 0, 0, 123, 124, 253, 0,
	125, 0, 126, 1113, 0, 0, 0, 127, 254, 0,
	255, 0, 128, 129, 130, 131, 1104, 257, 0, 0,
	135, 0, 132, 0, 0, 133, 258, 134, 259, 260,
	261, 0, 262, 0, 0, 136, 0, 137, 138, 139,
	0, 141, 140, 0, 263, 0, 142, 0, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	0, 150, 151, 153, 152, 0, 0, 0, 265, 154,
	266, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 0, 160, 0, 268, 161, 162, 163, 164,
	0, 269, 165, 270, 166, 1112, 167, 168, 169, 170,
	271, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 0, 185, 186,
	272, 187, 0, 191, 192, 193, 194, 0, 273, 195,
	196, 197, 0, 198, 188, 189, 199, 0, 200, 274,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 276,
	205, 277, 0, 208, 0, 209, 210, 211, 212, 213,
	0, 278, 279, 280, 0, 0, 214, 215, 281, 282,
	0, 216, 217, 218, 219, 0, 1111, 220, 221, 222,
	223, 0, 224, 0, 283, 225, 226, 227, 284, 285,
	89, 0, 228, 0, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 234, 0, 1724, 0, 0, 95,
	96, 97, 235, 236, 237, 238, 98, 239, 240, 0,
	99, 241, 242, 100, 0, 0, 243, 244, 245, 0,
	101, 246, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 289, 113, 247, 114,
	248, 249, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 250, 120, 121, 122,
	251, 252, 0, 0, 0, 123, 124, 253, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 254, 0, 255,
	0, 128, 129, 130, 131, 256, 257, 0, 0, 135,
	0, 132, 0, 0, 133, 258, 134, 259, 260, 261,
	0, 262, 0, 0, 136, 0, 137, 138, 139, 0,
	141, 140, 0, 263, 0, 142, 0, 0, 143, 0,
	0, 144, 0, 145, 146, 147, 149, 264, 148, 0,
	150, 151, 153, 152, 0, 0, 0, 265, 154, 266,
	155, 156, 0, 157, 0, 0, 158, 0, 0, 159,
	267, 0, 160, 0, 268, 161, 162, 163, 164, 0,
	269, 165, 270, 166, 0, 167, 168, 169, 170, 271,
	171, 172, 0, 173, 174, 175, 176, 177, 179, 180,
	178, 181, 182, 183, 0, 184, 0, 185, 186, 272,
	187, 0, 191, 192, 193, 194, 0, 273, 195, 196,
	197, 0, 198, 188, 189, 199, 0, 200, 274, 275,
	201, 0, 207, 202, 203, 190, 204, 206, 276, 205,
	277, 0, 208, 0, 209, 210, 211, 212, 213, 0,
	278, 279, 280, 0, 0, 214, 215, 281, 282, 0,
	216, 217, 218, 219, 0, 0, 220, 221, 222, 223,
	0, 224, 0, 283, 225, 226, 227, 284, 285, 89,
	0, 228, 0, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 95, 96,
	97, 235, 236, 237, 238, 98, 239, 240, 0, 99,
	241, 242, 100, 0, 0, 243, 244, 245, 0, 101,
	246, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 289, 113, 247, 114, 248,
	249, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 250, 120, 121, 122, 251,
	252, 0, 0, 0, 123, 124, 253, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 254, 0, 255, 0,
	128, 129, 130, 131, 256, 257, 0, 0, 135, 0,
	132, 0, 0, 133, 258, 134, 259, 260, 261, 0,
	262, 0, 0, 136, 0, 137, 138, 139, 0, 141,
	140, 0, 263, 0, 142, 0, 0, 143, 0, 0,
	144, 0, 145, 146, 147, 149, 264, 148, 0, 150,
	151, 153, 152, 0, 0, 0, 265, 154, 266, 155,
	156, 0, 157, 0, 542, 158, 0, 0, 159, 267,
	0, 160, 0, 268, 161, 162, 163, 164, 0, 269,
	165, 270, 166, 0, 167, 168, 169, 170, 271, 171,
	172, 0, 173, 174, 175, 176, 177, 179, 180, 178,
	181, 182, 183, 0, 184, 0, 185, 186, 272, 187,
	0, 191, 192, 193, 194, 0, 273, 195, 196, 197,
	0, 198, 188, 189, 199, 0, 200, 274, 275, 201,
	0, 207, 202, 203, 190, 204, 206, 276, 205, 277,
	0, 208, 0, 209, 210, 211, 212, 213, 0, 278,
	279, 280, 0, 0, 214, 215, 281, 282, 0, 216,
	217, 218, 219, 0, 0, 220, 221, 222, 223, 0,
	224, 0, 283, 225, 226, 227, 284, 285, 89, 0,
	228, 0, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 0, 0, 0, 92, 93, 938, 94, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 95, 96, 97,
	235, 236, 237, 238, 98, 239, 240, 0, 99, 241,
	242, 100, 0, 0, 243, 244, 245, 0, 101, 246,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 289, 113, 247, 114, 248, 249,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 250, 120, 121, 122, 251, 252,
	0, 0, 0, 123, 124, 253, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 254, 0, 255, 0, 128,
	129, 130, 131, 256, 257, 0, 0, 135, 0, 132,
	0, 0, 133, 258, 134, 259, 260, 261, 0, 262,
	0, 0, 136, 0, 137, 138, 139, 0, 141, 140,
	0, 263, 0, 142, 0, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 0, 150, 151,
	153, 152, 0, 0, 0, 265, 154, 266, 155, 156,
	0, 157, 0, 0, 158, 0, 0, 159, 267, 0,
	160, 0, 268, 161, 162, 163, 164, 0, 269, 165,
	270, 166, 0, 167, 168, 169, 170, 271, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 0, 185, 186, 272, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 0,
	198, 188, 189, 199, 0, 200, 274, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 276, 205, 277, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 279,
	280, 0, 0, 214, 215, 281, 282, 0, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 0, 224,
	0, 283, 225, 226, 227, 284, 285, 89, 0, 228,
	0, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 0,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 853, 257, 0, 0, 135, 0, 132, 0,
	0, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	0, 136, 0, 137, 138, 139, 0, 141, 140, 0,
	263, 0, 142, 0, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 0, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 0, 542, 158, 0, 0, 159, 267, 0, 160,
	0, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 0, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 0, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 0, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 89, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 0,
	0, 0, 92, 93, 598, 94, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 95, 96, 97, 235, 236,
	237, 238, 98, 239, 240, 0, 99, 241, 242, 100,
	0, 0, 243, 244, 245, 0, 101, 246, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 289, 113, 247, 114, 248, 249, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 250, 120, 121, 122, 251, 252, 0, 0,
	0, 123, 124, 253, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 254, 0, 255, 0, 128, 129, 130,
	131, 256, 257, 0, 0, 135, 0, 132, 0, 0,
	133, 258, 134, 259, 260, 261, 0, 262, 0, 0,
	136, 0, 137, 138, 139, 0, 141, 140, 0, 263,
	0, 142, 0, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 0, 150, 151, 153, 152,
	0, 0, 0, 265, 154, 266, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 0, 160, 0,
	268, 161, 162, 163, 164, 0, 269, 165, 270, 166,
	0, 167, 168, 169, 170, 271, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 0, 185, 186, 272, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 0, 198, 188,
	189, 199, 0, 200, 274, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 276, 205, 277, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 279, 280, 0,
	0, 214, 215, 281, 282, 0, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 0, 224, 0, 283,
	225, 226, 227, 284, 285, 89, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 95, 96, 97, 235, 236, 237,
	238, 98, 239, 240, 0, 99, 241, 242, 100, 0,
	0, 243, 244, 245, 0, 101, 246, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 289, 113, 247, 114, 248, 249, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 250, 120, 121, 122, 251, 252, 0, 0, 0,
	123, 124, 253, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 254, 0, 255, 0, 128, 129, 130, 131,
	554, 257, 0, 0, 135, 0, 132, 0, 0, 133,
	258, 134, 259, 260, 261, 0, 262, 0, 0, 136,
	0, 137, 138, 139, 0, 141, 140, 0, 263, 0,
	142, 0, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 0, 150, 151, 153, 152, 0,
	0, 0, 265, 154, 266, 155, 156, 0, 157, 0,
	542, 158, 0, 0, 159, 267, 0, 160, 0, 268,
	161, 162, 163, 164, 0, 269, 165, 270, 166, 0,
	167, 168, 169, 170, 271, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 0, 185, 186, 272, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 0, 198, 188, 189,
	199, 0, 200, 274, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 276, 205, 277, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 279, 280, 0, 0,
	214, 215, 281, 282, 0, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 0, 224, 0, 283, 225,
	226, 227, 284, 285, 89, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 95, 96, 97, 235, 236, 237, 238,
	98, 239, 240, 0, 99, 241, 242, 100, 0, 0,
	243, 244, 245, 0, 101, 246, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	289, 113, 247, 114, 248, 249, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	250, 120, 121, 122, 251, 252, 0, 0, 0, 123,
	124, 253, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 254, 0, 255, 0, 128, 129, 130, 131, 547,
	257, 0, 0, 135, 0, 132, 0, 0, 133, 258,
	134, 259, 260, 261, 0, 262, 0, 0, 136, 0,
	137, 138, 139, 0, 141, 140, 0, 263, 0, 142,
	0, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 148, 0, 150, 151, 153, 152, 0, 0,
	0, 265, 154, 266, 155, 156, 0, 157, 0, 542,
	158, 0, 0, 159, 267, 0, 160, 0, 268, 161,
	162, 163, 164, 0, 269, 165, 270, 166, 0, 167,
	168, 169, 170, 271, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	0, 185, 186, 272, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 196, 197, 0, 198, 188, 189, 199,
	0, 200, 274, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 276, 205, 277, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 278, 279, 280, 0, 0, 214,
	215, 281, 282, 0, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 0, 224, 0, 283, 225, 226,
	227, 284, 285, 89, 0, 228, 0, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 92,
	93, 420, 94, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 95, 96, 97, 235, 236, 237, 238, 98,
	239, 240, 0, 99, 241, 242, 100, 0, 0, 243,
	244, 245, 0, 101, 246, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 289,
	113, 247, 114, 248, 249, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 250,
	120, 121, 122, 251, 252, 0, 0, 0, 123, 124,
	253, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	254, 0, 255, 0, 128, 129, 130, 131, 256, 257,
	0, 0, 135, 0, 132, 0, 0, 133, 258, 134,
	259, 260, 261, 0, 262, 0, 0, 136, 0, 137,
	138, 139, 0, 141, 140, 0, 263, 0, 142, 0,
	0, 143, 0, 0, 144, 0, 145, 146, 147, 149,
	264, 148, 0, 150, 151, 153, 152, 0, 0, 0,
	265, 154, 266, 155, 156, 0, 157, 0, 0, 158,
	0, 0, 159, 267, 0, 160, 0, 268, 161, 162,
	163, 164, 0, 269, 165, 270, 419, 0, 167, 168,
	169, 170, 271, 171, 172, 0, 173, 174, 175, 176,
	177, 179, 180, 178, 181, 182, 183, 0, 184, 0,
	185, 186, 272, 187, 0, 191, 192, 193, 194, 0,
	273, 195, 196, 197, 0, 198, 188, 189, 199, 0,
	200, 274, 275, 201, 0, 207, 202, 203, 190, 204,
	206, 276, 205, 277, 0, 208, 0, 209, 210, 211,
	212, 213, 0, 278, 279, 280, 0, 0, 214, 215,
	281, 282, 0, 216, 217, 218, 219, 0, 0, 220,
	221, 222, 223, 0, 224, 0, 283, 225, 226, 227,
	284, 285, 89, 0, 228, 0, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 234, 0, 0, 0,
	0, 95, 96, 97, 235, 236, 237, 238, 98, 239,
	240, 0, 99, 241, 242, 100, 0, 0, 243, 244,
	245, 0, 101, 246, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 289, 113,
	247, 114, 248, 249, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 250, 120,
	121, 122, 251, 252, 0, 0, 0, 123, 124, 253,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 254,
	0, 255, 0, 128, 129, 130, 131, 256, 257, 0,
	0, 135, 0, 132, 0, 0, 133, 258, 134, 259,
	260, 261, 0, 262, 0, 0, 136, 0, 137, 138,
	139, 0, 141, 140, 0, 263, 0, 142, 0, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	148, 0, 150, 151, 153, 152, 0, 0, 0, 265,
	154, 266, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 0, 160, 0, 268, 161, 162, 163,
	164, 0, 269, 165, 270, 166, 0, 167, 168, 169,
	170, 271, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 0, 185,
	186, 272, 187, 0, 191, 192, 193, 194, 0, 273,
	195, 196, 197, 0, 198, 188, 189, 199, 0, 200,
	274, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	276, 205, 277, 0, 208, 0, 209, 210, 211, 212,
	213, 0, 278, 279, 280, 0, 0, 214, 215, 281,
	282, 0, 216, 217, 218, 219, 0, 0, 220, 221,
	222, 223, 0, 224, 0, 283, 225, 226, 227, 284,
	285, 89, 0, 228, 0, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	95, 96, 97, 235, 236, 237, 238, 98, 239, 240,
	0, 99, 241, 242, 100, 0, 0, 243, 244, 245,
	0, 101, 246, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 289, 113, 247,
	114, 248, 249, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 250, 120, 121,
	122, 251, 252, 0, 0, 0, 123, 124, 253, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 254, 0,
	255, 0, 128, 129, 130, 131, 1408, 257, 0, 0,
	135, 0, 132, 0, 0, 133, 258, 134, 259, 260,
	261, 0, 262, 0, 0, 136, 0, 137, 138, 139,
	0, 141, 140, 0, 263, 0, 142, 0, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	0, 150, 151, 153, 152, 0, 0, 0, 265, 154,
	266, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 0, 160, 0, 268, 161, 162, 163, 164,
	0, 269, 165, 270, 166, 0, 167, 168, 169, 170,
	271, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 0, 185, 186,
	272, 187, 0, 191, 192, 193, 194, 0, 273, 195,
	196, 197, 0, 198, 188, 189, 199, 0, 200, 274,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 276,
	205, 277, 0, 208, 0, 209, 210, 211, 212, 213,
	0, 278, 279, 280, 0, 0, 214, 215, 281, 282,
	0, 216, 217, 218, 219, 0, 0, 220, 221, 222,
	223, 0, 224, 0, 283, 225, 226, 227, 284, 285,
	89, 0, 228, 0, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 95,
	96, 97, 235, 236, 237, 238, 98, 239, 240, 0,
	99, 241, 242, 100, 0, 0, 243, 244, 245, 0,
	101, 246, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 289, 113, 247, 114,
	248, 249, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 250, 120, 121, 122,
	251, 252, 0, 0, 0, 123, 124, 253, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 254, 0, 255,
	0, 128, 129, 130, 131, 1406, 257, 0, 0, 135,
	0, 132, 0, 0, 133, 258, 134, 259, 260, 261,
	0, 262, 0, 0, 136, 0, 137, 138, 139, 0,
	141, 140, 0, 263, 0, 142, 0, 0, 143, 0,
	0, 144, 0, 145, 146, 147, 149, 264, 148, 0,
	150, 151, 153, 152, 0, 0, 0, 265, 154, 266,
	155, 156, 0, 157, 0, 0, 158, 0, 0, 159,
	267, 0, 160, 0, 268, 161, 162, 163, 164, 0,
	269, 165, 270, 166, 0, 167, 168, 169, 170, 271,
	171, 172, 0, 173, 174, 175, 176, 177, 179, 180,
	178, 181, 182, 183, 0, 184, 0, 185, 186, 272,
	187, 0, 191, 192, 193, 194, 0, 273, 195, 196,
	197, 0, 198, 188, 189, 199, 0, 200, 274, 275,
	201, 0, 207, 202, 203, 190, 204, 206, 276, 205,
	277, 0, 208, 0, 209, 210, 211, 212, 213, 0,
	278, 279, 280, 0, 0, 214, 215, 281, 282, 0,
	216, 217, 218, 219, 0, 0, 220, 221, 222, 223,
	0, 224, 0, 283, 225, 226, 227, 284, 285, 89,
	0, 228, 0, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 95, 96,
	97, 235, 236, 237, 238, 98, 239, 240, 0, 99,
	241, 242, 100, 0, 0, 243, 244, 245, 0, 101,
	246, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 289, 113, 247, 114, 248,
	249, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 250, 120, 121, 122, 251,
	252, 0, 0, 0, 123, 124, 253, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 254, 0, 255, 0,
	128, 129, 130, 131, 1395, 257, 0, 0, 135, 0,
	132, 0, 0, 133, 258, 134, 259, 260, 261, 0,
	262, 0, 0, 136, 0, 137, 138, 139, 0, 141,
	140, 0, 263, 0, 142, 0, 0, 143, 0, 0,
	144, 0, 145, 146, 147, 149, 264, 148, 0, 150,
	151, 153, 152, 0, 0, 0, 265, 154, 266, 155,
	156, 0, 157, 0, 0, 158, 0, 0, 159, 267,
	0, 160, 0, 268, 161, 162, 163, 164, 0, 269,
	165, 270, 166, 0, 167, 168, 169, 170, 271, 171,
	172, 0, 173, 174, 175, 176, 177, 179, 180, 178,
	181, 182, 183, 0, 184, 0, 185, 186, 272, 187,
	0, 191, 192, 193, 194, 0, 273, 195, 196, 197,
	0, 198, 188, 189, 199, 0, 200, 274, 275, 201,
	0, 207, 202, 203, 190, 204, 206, 276, 205, 277,
	0, 208, 0, 209, 210, 211, 212, 213, 0, 278,
	279, 280, 0, 0, 214, 215, 281, 282, 0, 216,
	217, 218, 219, 0, 0, 220, 221, 222, 223, 0,
	224, 0, 283, 225, 226, 227, 284, 285, 89, 0,
	228, 0, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 95, 96, 97,
	235, 236, 237, 238, 98, 239, 240, 0, 99, 241,
	242, 100, 0, 0, 243, 244, 245, 0, 101, 246,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 289, 113, 247, 114, 248, 249,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 250, 120, 121, 122, 251, 252,
	0, 0, 0, 123, 124, 253, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 254, 0, 255, 0, 128,
	129, 130, 131, 968, 257, 0, 0, 135, 0, 132,
	0, 0, 133, 258, 134, 259, 260, 261, 0, 262,
	0, 0, 136, 0, 137, 138, 139, 0, 141, 140,
	0, 263, 0, 142, 0, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 0, 150, 151,
	153, 152, 0, 0, 0, 265, 154, 266, 155, 156,
	0, 157, 0, 0, 158, 0, 0, 159, 267, 0,
	160, 0, 268, 161, 162, 163, 164, 0, 269, 165,
	270, 166, 0, 167, 168, 169, 170, 271, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 0, 185, 186, 272, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 0,
	198, 188, 189, 199, 0, 200, 274, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 276, 205, 277, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 279,
	280, 0, 0, 214, 215, 281, 282, 0, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 0, 224,
	0, 283, 225, 226, 227, 284, 285, 89, 0, 228,
	0, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 0,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 256, 257, 0, 0, 135, 0, 132, 0,
	0, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	0, 136, 0, 137, 138, 139, 0, 141, 140, 0,
	263, 0, 142, 0, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 0, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 0, 160,
	0, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 0, 185, 186, 272, 187, 0, 434,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 0, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 0, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 89, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	234, 0, 837, 0, 0, 95, 96, 97, 235, 236,
	237, 238, 98, 239, 240, 0, 99, 241, 242, 100,
	0, 0, 243, 244, 245, 0, 101, 246, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 289, 113, 247, 114, 248, 249, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 250, 120, 121, 122, 251, 252, 0, 0,
	0, 123, 124, 253, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 254, 0, 255, 0, 128, 129, 130,
	131, 256, 257, 0, 0, 135, 0, 132, 0, 0,
	133, 258, 134, 259, 260, 261, 0, 262, 0, 0,
	136, 0, 137, 138, 139, 0, 141, 140, 0, 263,
	0, 142, 0, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 0, 150, 151, 153, 152,
	0, 0, 0, 265, 154, 266, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 0, 160, 0,
	268, 161, 162, 163, 164, 0, 269, 165, 270, 166,
	0, 167, 168, 169, 170, 271, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 0, 185, 186, 272, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 0, 0, 188,
	189, 199, 0, 200, 274, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 276, 205, 277, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 279, 280, 0,
	0, 214, 215, 281, 282, 0, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 0, 224, 0, 283,
	225, 226, 227, 284, 285, 89, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 95, 96, 97, 235, 236, 237,
	238, 98, 239, 240, 0, 99, 241, 242, 100, 0,
	0, 243, 244, 245, 0, 101, 246, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 289, 113, 247, 114, 248, 249, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 250, 120, 121, 122, 251, 252, 0, 0, 0,
	123, 124, 253, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 254, 0, 255, 0, 128, 129, 130, 131,
	671, 257, 0, 0, 135, 0, 132, 0, 0, 133,
	258, 134, 259, 260, 261, 0, 262, 0, 0, 136,
	0, 137, 138, 139, 0, 141, 140, 0, 263, 0,
	142, 0, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 0, 150, 151, 153, 152, 0,
	0, 0, 265, 154, 266, 155, 156, 0, 157, 0,
	0, 158, 0, 0, 159, 267, 0, 160, 0, 268,
	161, 162, 163, 164, 0, 269, 165, 270, 166, 0,
	167, 168, 169, 170, 271, 171, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 0, 185, 186, 272, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 0, 198, 188, 189,
	199, 0, 200, 274, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 276, 205, 277, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 279, 280, 0, 0,
	214, 215, 281, 282, 0, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 0, 224, 0, 283, 225,
	226, 227, 284, 285, 89, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 95, 96, 97, 235, 236, 237, 238,
	98, 239, 240, 0, 99, 241, 242, 100, 0, 0,
	243, 244, 245, 0, 101, 246, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	289, 113, 247, 114, 248, 249, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	250, 120, 121, 122, 251, 252, 0, 0, 0, 123,
	124, 253, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 254, 0, 255, 0, 128, 129, 130, 131, 666,
	257, 0, 0, 135, 0, 132, 0, 0, 133, 258,
	134, 259, 260, 261, 0, 262, 0, 0, 136, 0,
	137, 138, 139, 0, 141, 140, 0, 263, 0, 142,
	0, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 148, 0, 150, 151, 153, 152, 0, 0,
	0, 265, 154, 266, 155, 156, 0, 157, 0, 0,
	158, 0, 0, 159, 267, 0, 160, 0, 268, 161,
	162, 163, 164, 0, 269, 165, 270, 166, 0, 167,
	168, 169, 170, 271, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	0, 185, 186, 272, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 196, 197, 0, 198, 188, 189, 199,
	0, 200, 274, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 276, 205, 277, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 278, 279, 280, 0, 0, 214,
	215, 281, 282, 0, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 0, 224, 0, 283, 225, 226,
	227, 284, 285, 89, 0, 228, 0, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 95, 96, 97, 235, 236, 237, 238, 98,
	239, 240, 0, 99, 241, 242, 100, 0, 0, 243,
	244, 604, 0, 101, 246, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 289,
	113, 247, 114, 248, 249, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 250,
	120, 121, 122, 251, 252, 0, 0, 0, 123, 124,
	253, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	254, 0, 255, 0, 128, 129, 130, 131, 256, 257,
	0, 0, 135, 0, 132, 0, 0, 133, 258, 134,
	259, 260, 261, 0, 262, 0, 0, 136, 0, 137,
	138, 139, 0, 141, 140, 0, 263, 0, 142, 0,
	0, 143, 0, 0, 144, 0, 145, 146, 147, 149,
	264, 448, 0, 150, 151, 153, 152, 0, 0, 0,
	265, 154, 266, 155, 156, 0, 157, 0, 0, 158,
	0, 0, 159, 267, 0, 160, 0, 268, 161, 162,
	163, 164, 0, 269, 165, 270, 166, 0, 167, 168,
	169, 170, 271, 171, 172, 0, 173, 174, 175, 176,
	177, 179, 180, 178, 181, 182, 183, 0, 184, 0,
	185, 186, 272, 187, 0, 191, 192, 193, 194, 0,
	273, 195, 196, 197, 0, 198, 188, 189, 199, 0,
	200, 274, 275, 201, 0, 207, 202, 203, 190, 204,
	206, 276, 205, 277, 0, 208, 0, 209, 210, 211,
	212, 213, 0, 445, 279, 280, 0, 0, 214, 441,
	281, 282, 0, 216, 217, 218, 219, 0, 0, 220,
	221, 222, 223, 0, 224, 0, 283, 225, 226, 227,
	284, 285, 89, 0, 228, 0, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 234, 0, 0, 0,
	0, 95, 96, 97, 235, 236, 237, 238, 98, 239,
	240, 0, 99, 241, 242, 100, 0, 0, 243, 244,
	245, 0, 101, 246, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 289, 113,
	247, 114, 248, 249, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 250, 120,
	121, 122, 251, 252, 0, 0, 0, 123, 124, 253,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 254,
	0, 255, 0, 128, 129, 130, 131, 256, 257, 0,
	0, 135, 0, 132, 0, 0, 133, 258, 134, 259,
	260, 261, 0, 262, 0, 0, 136, 0, 137, 138,
	139, 0, 141, 140, 0, 263, 0, 142, 0, 0,
	143, 0, 0, 144, 0, 145, 146, 147, 149, 264,
	448, 0, 150, 151, 153, 152, 0, 0, 0, 265,
	154, 266, 155, 156, 0, 157, 0, 0, 158, 0,
	0, 159, 267, 0, 160, 0, 268, 161, 162, 163,
	164, 0, 269, 165, 270, 166, 0, 167, 168, 169,
	170, 271, 171, 172, 0, 173, 174, 175, 176, 177,
	179, 180, 178, 181, 182, 183, 0, 184, 0, 185,
	186, 272, 187, 0, 191, 192, 193, 194, 0, 273,
	195, 196, 197, 0, 198, 188, 189, 199, 0, 200,
	274, 275, 201, 0, 207, 202, 203, 190, 204, 206,
	276, 205, 277, 0, 208, 0, 209, 210, 211, 212,
	213, 0, 445, 279, 280, 0, 0, 214, 441, 281,
	282, 0, 216, 217, 218, 219, 0, 0, 220, 221,
	222, 223, 0, 224, 0, 283, 225, 226, 227, 284,
	285, 89, 0, 228, 0, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	95, 96, 97, 235, 236, 237, 238, 98, 239, 240,
	0, 99, 241, 242, 100, 0, 0, 243, 244, 245,
	0, 101, 246, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 289, 113, 247,
	114, 248, 249, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 250, 120, 121,
	122, 251, 252, 0, 0, 0, 123, 124, 253, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 254, 0,
	255, 0, 128, 129, 130, 131, 586, 257, 0, 0,
	135, 0, 132, 0, 0, 133, 258, 134, 259, 260,
	261, 0, 262, 0, 0, 136, 0, 137, 138, 139,
	0, 141, 140, 0, 263, 0, 142, 0, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 149, 264, 148,
	0, 150, 151, 153, 152, 0, 0, 0, 265, 154,
	266, 155, 156, 0, 157, 0, 0, 158, 0, 0,
	159, 267, 0, 160, 0, 268, 161, 162, 163, 164,
	0, 269, 165, 270, 166, 0, 167, 168, 169, 170,
	271, 171, 172, 0, 173, 174, 175, 176, 177, 179,
	180, 178, 181, 182, 183, 0, 184, 0, 185, 186,
	272, 187, 0, 191, 192, 193, 194, 0, 273, 195,
	196, 197, 0, 198, 188, 189, 199, 0, 200, 274,
	275, 201, 0, 207, 202, 203, 190, 204, 206, 276,
	205, 277, 0, 208, 0, 209, 210, 211, 212, 213,
	0, 278, 279, 280, 0, 0, 214, 215, 281, 282,
	0, 216, 217, 218, 219, 0, 0, 220, 221, 222,
	223, 0, 224, 0, 283, 225, 226, 227, 284, 285,
	89, 0, 228, 0, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 95,
	96, 97, 235, 236, 237, 238, 98, 239, 240, 0,
	99, 241, 242, 100, 0, 0, 243, 244, 245, 0,
	101, 246, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 289, 113, 247, 114,
	248, 249, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 250, 120, 121, 122,
	251, 252, 0, 0, 0, 123, 124, 253, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 254, 0, 255,
	0, 128, 129, 130, 131, 584, 257, 0, 0, 135,
	0, 132, 0, 0, 133, 258, 134, 259, 260, 261,
	0, 262, 0, 0, 136, 0, 137, 138, 139, 0,
	141, 140, 0, 263, 0, 142, 0, 0, 143, 0,
	0, 144, 0, 145, 146, 147, 149, 264, 148, 0,
	150, 151, 153, 152, 0, 0, 0, 265, 154, 266,
	155, 156, 0, 157, 0, 0, 158, 0, 0, 159,
	267, 0, 160, 0, 268, 161, 162, 163, 164, 0,
	269, 165, 270, 166, 0, 167, 168, 169, 170, 271,
	171, 172, 0, 173, 174, 175, 176, 177, 179, 180,
	178, 181, 182, 183, 0, 184, 0, 185, 186, 272,
	187, 0, 191, 192, 193, 194, 0, 273, 195, 196,
	197, 0, 198, 188, 189, 199, 0, 200, 274, 275,
	201, 0, 207, 202, 203, 190, 204, 206, 276, 205,
	277, 0, 208, 0, 209, 210, 211, 212, 213, 0,
	278, 279, 280, 0, 0, 214, 215, 281, 282, 0,
	216, 217, 218, 219, 0, 0, 220, 221, 222, 223,
	0, 224, 0, 283, 225, 226, 227, 284, 285, 89,
	0, 228, 0, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 95, 96,
	97, 235, 236, 237, 238, 98, 239, 240, 0, 99,
	241, 242, 100, 0, 0, 243, 244, 245, 0, 101,
	246, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 289, 113, 247, 114, 248,
	249, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 250, 120, 121, 122, 251,
	252, 0, 0, 0, 123, 124, 253, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 254, 0, 255, 0,
	128, 129, 130, 131, 581, 257, 0, 0, 135, 0,
	132, 0, 0, 133, 258, 134, 259, 260, 261, 0,
	262, 0, 0, 136, 0, 137, 138, 139, 0, 141,
	140, 0, 263, 0, 142, 0, 0, 143, 0, 0,
	144, 0, 145, 146, 147, 149, 264, 148, 0, 150,
	151, 153, 152, 0, 0, 0, 265, 154, 266, 155,
	156, 0, 157, 0, 0, 158, 0, 0, 159, 267,
	0, 160, 0, 268, 161, 162, 163, 164, 0, 269,
	165, 270, 166, 0, 167, 168, 169, 170, 271, 171,
	172, 0, 173, 174, 175, 176, 177, 179, 180, 178,
	181, 182, 183, 0, 184, 0, 185, 186, 272, 187,
	0, 191, 192, 193, 194, 0, 273, 195, 196, 197,
	0, 198, 188, 189, 199, 0, 200, 274, 275, 201,
	0, 207, 202, 203, 190, 204, 206, 276, 205, 277,
	0, 208, 0, 209, 210, 211, 212, 213, 0, 278,
	279, 280, 0, 0, 214, 215, 281, 282, 0, 216,
	217, 218, 219, 0, 0, 220, 221, 222, 223, 0,
	224, 0, 283, 225, 226, 227, 284, 285, 89, 0,
	228, 0, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 95, 96, 97,
	235, 236, 237, 238, 98, 239, 240, 0, 99, 241,
	242, 100, 0, 0, 243, 244, 245, 0, 101, 246,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 289, 113, 247, 114, 248, 249,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 250, 120, 121, 122, 251, 252,
	0, 0, 0, 123, 124, 253, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 254, 0, 255, 0, 128,
	129, 130, 131, 578, 257, 0, 0, 135, 0, 132,
	0, 0, 133, 258, 134, 259, 260, 261, 0, 262,
	0, 0, 136, 0, 137, 138, 139, 0, 141, 140,
	0, 263, 0, 142, 0, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 149, 264, 148, 0, 150, 151,
	153, 152, 0, 0, 0, 265, 154, 266, 155, 156,
	0, 157, 0, 0, 158, 0, 0, 159, 267, 0,
	160, 0, 268, 161, 162, 163, 164, 0, 269, 165,
	270, 166, 0, 167, 168, 169, 170, 271, 171, 172,
	0, 173, 174, 175, 176, 177, 179, 180, 178, 181,
	182, 183, 0, 184, 0, 185, 186, 272, 187, 0,
	191, 192, 193, 194, 0, 273, 195, 196, 197, 0,
	198, 188, 189, 199, 0, 200, 274, 275, 201, 0,
	207, 202, 203, 190, 204, 206, 276, 205, 277, 0,
	208, 0, 209, 210, 211, 212, 213, 0, 278, 279,
	280, 0, 0, 214, 215, 281, 282, 0, 216, 217,
	218, 219, 0, 0, 220, 221, 222, 223, 0, 224,
	0, 283, 225, 226, 227, 284, 285, 89, 0, 228,
	0, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 95, 96, 97, 235,
	236, 237, 238, 98, 239, 240, 0, 99, 241, 242,
	100, 0, 0, 243, 244, 245, 0, 101, 246, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 289, 113, 247, 114, 248, 249, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 250, 120, 121, 122, 251, 252, 0,
	0, 0, 123, 124, 253, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 254, 0, 255, 0, 128, 129,
	130, 131, 576, 257, 0, 0, 135, 0, 132, 0,
	0, 133, 258, 134, 259, 260, 261, 0, 262, 0,
	0, 136, 0, 137, 138, 139, 0, 141, 140, 0,
	263, 0, 142, 0, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 149, 264, 148, 0, 150, 151, 153,
	152, 0, 0, 0, 265, 154, 266, 155, 156, 0,
	157, 0, 0, 158, 0, 0, 159, 267, 0, 160,
	0, 268, 161, 162, 163, 164, 0, 269, 165, 270,
	166, 0, 167, 168, 169, 170, 271, 171, 172, 0,
	173, 174, 175, 176, 177, 179, 180, 178, 181, 182,
	183, 0, 184, 0, 185, 186, 272, 187, 0, 191,
	192, 193, 194, 0, 273, 195, 196, 197, 0, 198,
	188, 189, 199, 0, 200, 274, 275, 201, 0, 207,
	202, 203, 190, 204, 206, 276, 205, 277, 0, 208,
	0, 209, 210, 211, 212, 213, 0, 278, 279, 280,
	0, 0, 214, 215, 281, 282, 0, 216, 217, 218,
	219, 0, 0, 220, 221, 222, 223, 0, 224, 0,
	283, 225, 226, 227, 284, 285, 89, 0, 228, 0,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 95, 96, 97, 235, 236,
	237, 238, 98, 239, 240, 0, 99, 241, 242, 100,
	0, 0, 243, 244, 245, 0, 101, 246, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 289, 113, 247, 114, 248, 249, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 250, 120, 121, 122, 251, 252, 0, 0,
	0, 123, 124, 253, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 254, 0, 255, 0, 128, 129, 130,
	131, 550, 257, 0, 0, 135, 0, 132, 0, 0,
	133, 258, 134, 259, 260, 261, 0, 262, 0, 0,
	136, 0, 137, 138, 139, 0, 141, 140, 0, 263,
	0, 142, 0, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 149, 264, 148, 0, 150, 151, 153, 152,
	0, 0, 0, 265, 154, 266, 155, 156, 0, 157,
	0, 0, 158, 0, 0, 159, 267, 0, 160, 0,
	268, 161, 162, 163, 164, 0, 269, 165, 270, 166,
	0, 167, 168, 169, 170, 271, 171, 172, 0, 173,
	174, 175, 176, 177, 179, 180, 178, 181, 182, 183,
	0, 184, 0, 185, 186, 272, 187, 0, 191, 192,
	193, 194, 0, 273, 195, 196, 197, 0, 198, 188,
	189, 199, 0, 200, 274, 275, 201, 0, 207, 202,
	203, 190, 204, 206, 276, 205, 277, 0, 208, 0,
	209, 210, 211, 212, 213, 0, 278, 279, 280, 0,
	0, 214, 215, 281, 282, 0, 216, 217, 218, 219,
	0, 0, 220, 221, 222, 223, 0, 224, 0, 283,
	225, 226, 227, 284, 285, 89, 0, 228, 0, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 95, 96, 97, 235, 236, 237,
	238, 98, 239, 240, 0, 99, 241, 242, 100, 0,
	0, 243, 244, 245, 0, 101, 246, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 289, 113, 247, 114, 248, 249, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 250, 120, 121, 122, 251, 252, 0, 0, 0,
	123, 124, 253, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 254, 0, 255, 0, 128, 129, 130, 131,
	256, 257, 0, 0, 135, 0, 132, 0, 0, 133,
	258, 134, 259, 260, 261, 0, 262, 0, 0, 136,
	0, 137, 138, 139, 0, 141, 140, 0, 263, 0,
	142, 0, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 149, 264, 148, 0, 150, 151, 153, 152, 0,
	0, 0, 265, 154, 266, 155, 156, 0, 157, 0,
	0, 158, 0, 0, 159, 267, 0, 160, 0, 268,
	161, 162, 163, 164, 0, 269, 165, 270, 166, 0,
	167, 168, 169, 170, 271, 531, 172, 0, 173, 174,
	175, 176, 177, 179, 180, 178, 181, 182, 183, 0,
	184, 0, 185, 186, 272, 187, 0, 191, 192, 193,
	194, 0, 273, 195, 196, 197, 0, 198, 188, 189,
	199, 0, 200, 274, 275, 201, 0, 207, 202, 203,
	190, 204, 206, 276, 205, 277, 0, 208, 0, 209,
	210, 211, 212, 213, 0, 278, 279, 280, 0, 0,
	214, 215, 281, 282, 0, 216, 217, 218, 219, 0,
	0, 220, 221, 222, 223, 0, 224, 0, 283, 225,
	226, 227, 284, 285, 89, 0, 228, 0, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 95, 96, 97, 235, 236, 237, 238,
	98, 239, 240, 0, 99, 241, 242, 100, 0, 0,
	243, 244, 245, 0, 439, 246, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	289, 113, 247, 114, 248, 249, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	250, 120, 121, 122, 251, 252, 0, 0, 0, 123,
	124, 253, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 254, 0, 255, 0, 128, 129, 130, 131, 256,
	257, 0, 0, 135, 0, 132, 0, 0, 133, 258,
	134, 259, 260, 261, 0, 262, 0, 0, 136, 0,
	137, 138, 139, 0, 141, 140, 0, 263, 0, 142,
	0, 0, 437, 0, 0, 144, 0, 145, 146, 147,
	149, 264, 448, 0, 150, 151, 153, 152, 0, 0,
	0, 265, 154, 266, 155, 156, 0, 157, 0, 0,
	158, 0, 0, 159, 267, 0, 160, 0, 268, 161,
	162, 163, 164, 0, 269, 165, 270, 166, 0, 167,
	168, 169, 170, 271, 171, 172, 0, 173, 174, 175,
	176, 177, 179, 180, 178, 181, 182, 183, 0, 184,
	0, 185, 186, 440, 187, 0, 191, 192, 193, 194,
	0, 273, 195, 438, 197, 0, 198, 188, 189, 199,
	0, 200, 274, 275, 201, 0, 207, 202, 203, 190,
	204, 206, 276, 205, 277, 0, 208, 0, 209, 210,
	211, 212, 213, 0, 445, 279, 280, 0, 0, 214,
	441, 281, 282, 0, 216, 217, 218, 219, 0, 0,
	220, 221, 222, 223, 0, 224, 0, 283, 225, 226,
	227, 284, 285, 89, 0, 228, 0, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 95, 96, 97, 235, 236, 237, 238, 98,
	239, 240, 0, 99, 241, 242, 100, 0, 0, 243,
	244, 245, 0, 101, 246, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 289,
	113, 247, 114, 248, 249, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 250,
	120, 121, 122, 251, 252, 0, 0, 0, 123, 124,
	253, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	254, 0, 255, 0, 128, 129, 130, 131, 256, 257,
	0, 0, 135, 0, 132, 0, 0, 133, 258, 134,
	259, 260, 261, 0, 262, 0, 0, 136, 0, 137,
	138, 139, 0, 141, 140, 0, 263, 0, 142, 0,
	0, 143, 0, 0, 144, 0, 145, 146, 147, 149,
	264, 148, 0, 150, 151, 153, 152, 0, 0, 0,
	265, 154, 266, 155, 156, 0, 157, 0, 0, 158,
	0, 0, 159, 267, 0, 160, 0, 268, 161, 162,
	0, 164, 0, 269, 165, 270, 166, 0, 167, 168,
	0, 170, 271, 171, 172, 0, 173, 174, 175, 176,
	177, 179, 180, 178, 181, 182, 183, 0, 184, 0,
	185, 186, 272, 0, 0, 191, 192, 193, 194, 0,
	273, 195, 196, 197, 0, 198, 188, 189, 199, 0,
	200, 274, 275, 201, 0, 207, 202, 203, 190, 204,
	206, 276, 205, 277, 0, 208, 0, 209, 210, 211,
	212, 213, 0, 278, 279, 280, 0, 0, 214, 215,
	281, 282, 0, 216, 217, 218, 219, 0, 0, 220,
	221, 222, 223, 0, 224, 0, 283, 225, 226, 227,
	284, 285, 0, 0, 228, 0, 0, 0, 0, 229,
	230, 231, 232, 233, 995, 996, 0, 1015, 1016, 1017,
	1025, 1026, 1027, 0, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 998, 995, 996,
	1029, 1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	997, 998, 0, 0, 1029, 0, 1012, 0, 0, 0,
	0, 995, 996, 0, 1015, 1016, 1017, 1025, 1026, 1027,
	0, 0, 0, 0, 997, 0, 0, 1018, 0, 0,
	1012, 0, 0, 0, 998, 0, 0, 1029, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1003, 997, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 1030, 0, 0, 0,
	1003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 0, 0, 0, 1022,
	1030, 0, 0, 0, 1020, 0, 0, 0, 0, 0,
	1013, 0, 0, 1003, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1020, 0,
	0, 0, 1022, 1030, 1013, 1019, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	0, 1020, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 1009, 1010, 1011, 1024, 0, 1008, 1006, 1007,
	999, 1000, 1001, 1002, 1004, 1005, 0, 0, 0, 0,
	2080, 0, 0, 1021, 0, 0, 1009, 1010, 1011, 1024,
	0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	0, 0, 0, 0, 2078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 1009,
	1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000, 1001,
	1002, 1004, 1005, 0, 0, 995, 996, 2025, 1015, 1016,
	1017, 1025, 1026, 1027, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 998, 995,
	996, 1029, 1015, 1016, 1017, 1025, 1026, 1027, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 997, 998, 0, 0, 1029, 0, 1012, 0, 0,
	0, 0, 995, 996, 0, 1015, 1016, 1017, 1025, 1026,
	1027, 0, 0, 0, 0, 997, 0, 0, 1018, 0,
	0, 1012, 0, 0, 0, 998, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 997, 0,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 1030, 0, 0,
	0, 1003, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1028, 0, 0, 0, 0, 0, 0, 0,
	1022, 1030, 0, 0, 0, 1020, 0, 0, 0, 0,
	0, 1013, 0, 0, 1003, 0, 1028, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1020,
	0, 0, 0, 1022, 1030, 1013, 1019, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1019, 0, 1020, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1019, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 1009, 1010, 1011, 1024, 0, 1008, 1006,
	1007, 999, 1000, 1001, 1002, 1004, 1005, 0, 0, 0,
	0, 2020, 0, 0, 1021, 0, 0, 1009, 1010, 1011,
	1024, 0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004,
	1005, 0, 0, 0, 0, 2016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 0, 0, 995, 996, 1957, 1015,
	1016, 1017, 1025, 1026, 1027, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 998,
	995, 996, 1029, 1015, 1016, 1017, 1025, 1026, 1027, 0,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 997, 998, 0, 0, 1029, 0, 1012, 0,
	0, 0, 0, 995, 996, 0, 1015, 1016, 1017, 1025,
	1026, 1027, 0, 0, 0, 0, 997, 0, 0, 1018,
	0, 0, 1012, 0, 0, 0, 998, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1003, 997,
	0, 0, 0, 0, 0, 1012, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 1030, 0,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1028, 0, 0, 0, 0, 0, 0,
	0, 1022, 1030, 0, 0, 0, 1020, 0, 0, 0,
	0, 0, 1013, 0, 0, 1003, 0, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1020, 0, 0, 0, 1022, 1030, 1013, 1019, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1019, 0, 1020, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1019, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 0, 1009, 1010, 1011, 1024, 0, 1008,
	1006, 1007, 999, 1000, 1001, 1002, 1004, 1005, 0, 0,
	0, 0, 1935, 0, 0, 1021, 0, 0, 1009, 1010,
	1011, 1024, 0, 1008, 1006, 1007, 999, 1000, 1001, 1002,
	1004, 1005, 0, 0, 0, 0, 1934, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999,
	1000, 1001, 1002, 1004, 1005, 0, 0, 995, 996, 1826,
	1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 0, 0, 0, 0,
	998, 995, 996, 1029, 1015, 1016, 1017, 1025, 1026, 1027,
	0, 0, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 997, 998, 0, 0, 1029, 0, 1012,
	0, 0, 0, 0, 995, 996, 0, 1015, 1016, 1017,
	1025, 1026, 1027, 0, 0, 0, 0, 997, 0, 0,
	1018, 0, 0, 1012, 0, 0, 0, 998, 0, 0,
	1029, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
	997, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 1030,
	0, 0, 0, 1003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1028, 0, 0, 0, 0, 0,
	0, 0, 1022, 1030, 0, 0, 0, 1020, 0, 0,
	0, 0, 0, 1013, 0, 0, 1003, 0, 1028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1020, 0, 0, 0, 1022, 1030, 1013, 1019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 1020, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1019, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 1021, 0, 0, 1009, 1010, 1011, 1024, 0,
	1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005, 0,
	0, 0, 0, 1760, 0, 0, 1021, 0, 0, 1009,
	1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000, 1001,
	1002, 1004, 1005, 0, 0, 0, 0, 1744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 1009, 1010, 1011, 1024, 0, 1008, 1006, 1007,
	999, 1000, 1001, 1002, 1004, 1005, 0, 0, 995, 996,
	1699, 1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 998, 995, 996, 1029, 1015, 1016, 1017, 1025, 1026,
	1027, 0, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 997, 998, 0, 0, 1029, 0,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 995,
	996, 0, 1015, 1016, 1017, 1025, 1026, 1027, 997, 0,
	0, 0, 0, 0, 1012, 1018, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 1029, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1003, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 1012, 0, 0, 0, 0, 0, 0, 0, 1022,
	1030, 0, 0, 0, 1003, 2160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 1022, 1030, 0, 0, 0, 1020, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 1028,
	0, 1003, 0, 1600, 0, 0, 1599, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 1013, 1019,
	1022, 1030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1028, 0, 0, 0,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 1020,
	0, 0, 0, 0, 0, 1013, 0, 2159, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	1019, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 1021, 0, 0, 1009, 1010, 1011, 1024,
	0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	0, 0, 0, 0, 1316, 0, 0, 1021, 0, 0,
	1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 1009, 1010, 1011,
	1024, 0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004,
	1005, 995, 996, 0, 1015, 1016, 1017, 1025, 1026, 1027,
	0, 0, 0, 0, 0, 0, 0, 1018, 0, 1033,
	0, 0, 1231, 0, 998, 995, 996, 1029, 1015, 1016,
	1017, 1025, 1026, 1027, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 1032, 0, 997, 998, 0,
	0, 1029, 0, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 996, 0, 1015, 1016, 1017, 1025, 1026,
	1027, 997, 0, 0, 0, 0, 0, 1012, 1018, 0,
	0, 1232, 0, 0, 0, 998, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1003, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 0, 1022, 1030, 0, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1028, 0,
	0, 0, 0, 0, 0, 0, 1022, 1030, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 1028, 0, 1003, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1020, 0, 0, 0, 0,
	0, 1013, 1019, 1022, 1030, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 1019, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 1019, 526, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 1021, 0, 0, 1009,
	1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000, 1001,
	1002, 1004, 1005, 0, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 1009, 1010, 1011, 1024, 0, 1008, 1006,
	1007, 999, 1000, 1001, 1002, 1004, 1005, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 995, 996, 0, 1015, 1016, 1017,
	1025, 1026, 1027, 0, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 998, 995, 996,
	1029, 1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	997, 998, 0, 0, 1029, 0, 1012, 0, 0, 0,
	0, 995, 996, 0, 1015, 1016, 1017, 1025, 1026, 1027,
	0, 0, 0, 0, 997, 0, 0, 1018, 0, 0,
	1012, 1601, 0, 0, 998, 0, 0, 1029, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1003, 997, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 1030, 0, 0, 0,
	1003, 0, 0, 0, 0, 1606, 0, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 0, 0, 0, 1022,
	1030, 0, 0, 0, 1020, 0, 0, 0, 0, 0,
	1013, 0, 0, 1003, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1020, 0,
	0, 0, 1022, 1030, 1013, 1019, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	0, 1020, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1748, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 1009, 1010, 1011, 1024, 0, 1008, 1006, 1007,
	999, 1000, 1001, 1002, 1004, 1005, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 1009, 1010, 1011, 1024,
	0, 1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 1009,
	1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000, 1001,
	1002, 1004, 1005, 995, 996, 0, 1015, 1016, 1017, 1025,
	1026, 1027, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 998, 995, 996, 1029,
	1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 0, 1559, 0, 997,
	998, 0, 0, 1029, 0, 1012, 0, 0, 0, 0,
	995, 996, 0, 1015, 1016, 1017, 1025, 1026, 1027, 0,
	0, 0, 0, 997, 0, 0, 1018, 0, 0, 1012,
	0, 0, 0, 998, 0, 0, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1003, 997, 0, 0, 0,
	0, 0, 1012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1022, 1030, 0, 0, 0, 1003,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 1022, 1030,
	0, 0, 0, 1020, 0, 0, 0, 0, 0, 1013,
	0, 0, 1003, 0, 1028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 0, 0,
	0, 1022, 1030, 1013, 1019, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1566, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	1020, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1019, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999,
	1000, 1001, 1002, 1004, 1005, 0, 0, 0, 0, 0,
	0, 0, 1021, 0, 0, 1009, 1010, 1011, 1024, 0,
	1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 0, 1009, 1010,
	1011, 1024, 0, 1008, 1006, 1007, 999, 1000, 1001, 1002,
	1004, 1005, 995, 996, 0, 1015, 1016, 1017, 1025, 1026,
	1027, 0, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 998, 995, 996, 1029, 1015,
	1016, 1017, 1025, 1026, 1027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 998,
	0, 0, 1029, 0, 1012, 0, 0, 995, 996, 0,
	1015, 1016, 1017, 1025, 1026, 1027, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 0, 1012, 0,
	998, 0, 0, 1029, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 1003, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 1030, 0, 0, 0, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 1022, 1030, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 1013, 1003,
	0, 0, 0, 1028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1020, 0, 1022, 1030,
	0, 0, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	1009, 1010, 1011, 1024, 0, 1008, 1006, 1007, 999, 1000,
	1001, 1002, 1004, 1005, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 0, 1009, 1010, 1011, 1024, 0, 1008,
	1006, 1007, 999, 1000, 1001, 1002, 1004, 1005, 0, 0,
	880, 872, 897, 864, 888, 887, 0, 0, 866, 865,
	0, 0, 1021, 899, 898, 1009, 1010, 1011, 1024, 0,
	1008, 1006, 1007, 999, 1000, 1001, 1002, 1004, 1005, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 885, 884, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 880, 872, 897, 864, 888, 887,
	0, 0, 866, 865, 882, 0, 0, 899, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 450, 875, 874, 876, 877, 878, 0, 896, 893,
	0, 885, 884, 0, 0, 0, 0, 0, 0, 455,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 456, 0, 0, 868, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	873, 457, 0, 0, 0, 0, 458, 0, 0, 0,
	0, 463, 464, 0, 0, 474, 875, 874, 876, 877,
	878, 0, 896, 0, 0, 0, 881, 453, 459, 0,
	1250, 1248, 1249, 1252, 1251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 477,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 873, 879, 870, 460, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 867, 0, 0, 894, 895,
	881, 0, 0, 0, 0, 0, 0, 0, 465, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	871, 0, 0, 0, 0, 900, 0, 0, 869, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 879,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	0, 0, 894, 895, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	468, 470, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 0, 476, 0, 0,
	0, 472, 0, 0, 0, 0, 454, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475,
}
var sqlPact = [...]int{

	163, -1000, -45, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 763, 17272, 17272, 21458, -1000, -1000, -1000, -1000,
	-1000, -1000, 851, 762, 356, 5588, 21458, 21458, 21159, 1295,
	1295, 22953, -1000, -1000, 26840, -1000, 30947, 496, 510, 496,
	496, 497, 22953, 1146, 674, 14244, 749, 140, -1000, 893,
	-46, 26541, 21458, 1468, 11, 19365, 295, 163, 20860, 26242,
	21458, 20561, 622, 0, 17870, 21458, -1000, 25, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1304, 367, 25, -1000,
	1303, 1216, 1212, 19365, 25943, 25644, 25345, 25046, 24747, -1000,
	12998, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 796, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 309, 307, -1000, 20262,
	-1000, 1019, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1006, -1000, 21458, -1000, -1000, 24448, 24149, 719,
	298, 1102, -1000, -1000, 571, 411, -1000, -1000, 13933, 41,
	-1000, -1000, -1000, -1000, 1317, 1470, 16973, 824, 1301, -1000,
	1005, 1300, 1298, 1296, 1294, 1293, -1000, 838, 632, 512,
	-1000, 1292, 405, 848, 493, -1000, 1291, 1290, 1102, -1000,
	1102, -1000, -1000, -1000, 621, 22953, -1000, -1000, -1000, -1000,
	-1000, 19365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1743, -1000, -1000, -1000, -1000, 1714, -1000, -1000,
	-1000, -1000, 23850, 21458, 21458, 1231, 23551, -1000, 893, -1000,
	-1000, -1000, 1174, 1461, 1461, 1461, 1509, 152, 149, 140,
	-10, 21458, -1000, 297, -10, 9802, 9802, -1000, -1000, 295,
	-1000, 354, 16363, -1000, 8830, -1000, 948, 1378, 500, 780,
	1375, -141, 882, 874, 1373, 16973, 17870, 0, -30, -1000,
	-1000, -1000, 5277, 16973, 698, 15453, 25, -1000, -1000, -1000,
	19365, 21458, 21458, 755, 23252, -1000, 1371, 116, 1370, -1000,
	115, 1369, -1000, 115, 1366, -30, 1365, 35, -1000, -1000,
	295, 19963, 21458, 1602, 30877, -1000, 11099, -1000, -1000, 17272,
	885, 17272, -1000, -1000, 1600, -1000, 21458, 11099, -6, -1000,
	-1000, -1000, -1000, 1164, 1136, 550, 13622, 13311, 1421, 738,
	-1000, -1000, -1000, 40, 5588, 211, 700, -1000, -1000, -1000,
	19664, -1000, -1000, 21458, 1316, 17272, 21458, 21458, 21458, 21458,
	21458, -1000, -1000, -1000, 501, 1314, 21458, -1000, 1163, -1000,
	-1000, 21458, 21458, 787, 668, -1000, -6, -1000, 22953, -1000,
	126, -1000, -1000, -1000, -1000, 294, 1117, 418, 155, 22654,
	418, 1114, -1000, 1174, -1000, 1029, 1207, 10127, 1193, 11099,
	140, -1000, -1000, 140, 140, 11099, -1000, -1000, 21458, -10,
	1598, 21458, 130, -1000, 29375, -1000, -1000, 11099, 11099, 11099,
	11099, 11099, 936, 341, -1000, 293, 292, 6548, -1000, -1000,
	1698, -1000, -1000, -1000, 154, -1000, -1000, 11099, 25, -1000,
	-1000, -1000, -1000, 287, 1737, -1000, 461, -1000, -1000, -1000,
	416, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1310, 285, 284, -1000, -1000, -1000, -1000, 281, 279, 278,
	277, 276, 275, 273, 271, 268, 266, 264, 263, 255,
	252, 251, 907, -1000, 445, -1000, -1000, 445, 445, -1000,
	248, 248, 249, -1000, -1000, -1000, -1000, 248, -1000, -1000,
	-1000, 401, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 250,
	130, -1000, -1000, -1000, 21458, 33, -1000, 30170, -1000, -37,
	862, -1000, 18767, 1548, 1465, 1431, 19365, 1560, -46, 1289,
	1533, -46, 1287, 617, 21458, 21458, 610, 609, 19365, 370,
	-1000, 21458, -1000, -1000, -80, -1000, -1000, 1286, 28, -1000,
	-1000, 428, 81, 1596, 81, 15757, -1000, 21458, 21458, -1000,
	21458, -1000, -1000, 21458, -1000, 21458, 21458, -1000, 21458, 21458,
	211, 18169, 856, 1359, 804, 211, 27, -1000, 1605, -1000,
	-1000, -1000, -1000, 93, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 249, 907, 248, 248, 248, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 401, -1000, -1000, 445, 445, 445,
	-1000, -1000, 22, 30170, 608, -1000, 1283, 495, -1000, 437,
	21, 1102, 849, -1000, -1000, -1000, -1000, -1000, -1000, -22,
	-1000, -1000, -22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1735, 5588, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 21458, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 211,
	-1000, -1000, -1000, -1000, 21458, 21458, 21458, -1000, -1000, 19365,
	18468, 1591, 1357, 920, -1000, 1588, 21458, 1000, 1106, -1000,
	649, 1356, -1000, -1000, -1000, -1000, 30170, -1000, 349, -1000,
	-1000, 30170, 853, 1220, -1000, 1220, -24, -1000, 29351, -1000,
	246, 16, 428, 9802, 15150, 30813, 30877, 5588, 642, 11099,
	11099, 11099, 11099, 11099, 11099, 11099, 11099, 11099, 11099, 11099,
	11099, 11099, 11099, 11099, 11099, 11099, 11099, 11099, 11099, 11099,
	11099, 1177, 11099, 605, 11099, 11099, 11099, 11099, 988, 973,
	230, 991, 5588, -1000, -1000, 1689, 1689, 1689, 30516, 30516,
	184, 341, -1000, 11099, -1000, 9478, 149, 28968, -28, -1000,
	-1000, -1000, 7521, 443, 30170, 25, 6223, -1000, 1695, 775,
	1325, 1259, 245, 146, 144, 11099, 11099, 11423, 11423, 11099,
	11747, 11099, 11099, 6872, 11099, 11099, 11099, 11099, 11099, 11099,
	-1000, 244, -1000, -1000, -1000, -1000, 1690, -1000, -1000, 1688,
	-1000, 636, 553, 1684, 428, 141, 8830, -1000, 856, 21458,
	21458, 21458, -1000, -1000, 1091, 22355, 1085, 30877, 21458, -1000,
	241, 235, 1189, 1184, 21458, 21458, 22056, 21757, 21458, 906,
	-46, -1000, 234, -46, -1000, 233, 21458, 871, -1000, 21458,
	21458, 809, 1244, 1059, -1000, 420, 16973, 689, 1282, 21458,
	794, 11099, 895, -1000, 14847, 450, 21458, 794, 109, -1000,
	-1000, -1000, 385, 21458, -1000, -1000, -1000, 116, -1000, 115,
	115, -30, -1000, -1000, 19365, -1000, -1000, 30877, 338, 335,
	-1000, 1681, 601, -1000, 584, 582, 579, -1000, 232, -1000,
	11099, 21458, 21458, 1202, -1000, -1000, -1000, 707, -1000, 902,
	-1000, 14244, -1000, -48, -1000, -1000, -1000, -1000, 370, -1000,
	138, 15, -35, 30877, -1000, -1000, -1000, -1000, -1000, 21458,
	328, 21458, -46, 21458, -1000, 1731, -46, 21458, 1345, 1384,
	377, 21458, 853, -1000, 11099, 1667, -1000, -1000, -1000, 11099,
	-1000, -1000, -1000, 211, -1000, 1256, -1000, -100, 1471, 342,
	-174, 148, 393, -1000, 14544, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 404, 697, 697, 688, 688,
	688, 688, 1713, 1188, 2500, 2676, 3012, 3012, 3012, 2528,
	195, 195, 3012, 3012, 3012, 30516, 30492, 180, 11099, 11099,
	563, 941, 230, 180, 11099, 180, 180, 180, 180, -1000,
	1149, -1000, -1000, -1000, -1000, 1281, 227, 11747, 11747, -1000,
	-1000, -1000, 6548, 12071, -1000, -1000, -1000, -1000, -1000, 226,
	11099, -1000, 4295, -185, 8, -1000, -1000, 11099, -124, -139,
	-1000, -1000, 659, -1000, 11099, -1000, -27, 11099, 11099, 11099,
	135, 134, -1000, 945, 225, 224, 11099, -1000, -1000, 30137,
	4258, 132, 1278, -146, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 127, 125, 30113, -146, 122, 3929, -1000, 11747, 11747,
	11747, 6548, 218, 117, 29029, -146, 29791, 9154, 9154, 9154,
	110, 29758, 11099, -146, 3912, 3578, 3512, 1, -1, -5,
	1663, -9, 108, 402, 399, 107, 1256, -1000, -1000, -1000,
	-1000, 560, 546, 1342, -1000, 1082, -1000, 460, -1000, 714,
	11099, 12695, 217, 215, 905, -1000, 1341, 1050, 1338, 1050,
	-1000, -37, 859, -1000, 11099, -1000, 11099, -1000, 543, -1000,
	-1000, 531, 420, 1275, 679, -1000, 963, -1000, -1000, 686,
	-1000, -1000, 7196, 30170, -1000, 794, 1476, -11, -1000, -1000,
	-1000, 428, 15757, 15150, 8830, -13, -1000, -1000, -1000, 856,
	-1000, 523, 1660, 106, 1138, 922, 841, 772, 1657, 30170,
	-48, -48, -1000, -1000, -1000, -1000, -1000, 21458, -1000, 1236,
	-1000, 18468, 214, 21458, 210, -1000, 209, -1000, -1000, 207,
	21458, 1169, 377, 17571, -1000, 418, 978, 28644, -1000, 104,
	1250, 1504, -1000, 15150, 1204, 1203, 15150, 1053, 951, 951,
	951, -1000, 206, 333, 393, 4641, 11099, 19066, 955, 60,
	101, 1471, 11099, 180, 180, 11099, 11747, 11747, -1000, 180,
	-1000, -1000, -1000, -1000, -1000, 1273, 205, 11099, 30877, 3869,
	3545, -26, -1000, 8506, -54, -1000, 11099, -1000, 28611, -1000,
	-1000, 329, 1382, -1000, 11099, 29734, 95, 8182, -1000, 29412,
	-33, -33, -1000, 1728, -1000, 16060, 434, 957, 28587, 30813,
	30877, -1000, 11099, -1000, -1000, 1271, 11099, -1000, 30813, 30877,
	11747, 11747, 11747, 11747, 11747, 11747, 11747, 11747, 11747, 11747,
	11747, 11747, 11747, 11747, 11747, 11747, 11747, 11747, 11747, 1128,
	11747, 1651, 1651, 1651, -66, 7858, -1000, 1308, 1271, 11099,
	11099, 30877, 86, 83, 82, -1000, 11099, -146, 11099, 11099,
	11099, -1000, -1000, -1000, 77, -1000, 1641, -1000, -1000, -1000,
	-1000, 1250, 21458, 21458, 21458, 1337, -1000, 2240, -1000, 28263,
	-36, -1000, 317, 1487, 11099, -1000, -1000, 203, 12695, 21458,
	-1000, 1195, 1201, 480, 21458, -1000, 21458, -1000, 21458, 21458,
	21458, -49, -53, 21458, 21458, -1000, 16973, 547, 202, -1000,
	-72, -1000, -1000, 223, -46, 794, -1000, -81, -1000, 381,
	-1000, 330, 327, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 72, -1000, -1000, 1238, -1000, 12695, 200, 21458, 18468,
	1586, 12695, 990, 1171, 377, 17571, -1000, 649, -1000, -1000,
	-1000, 425, 11099, 11099, 1471, 15150, 15150, 971, 1178, 15150,
	-1000, -1000, -1000, -1000, 326, 368, 393, 19066, -1000, 1639,
	1181, -55, -1000, -1000, 21458, 198, -1000, 393, 1642, 180,
	2949, 2269, 11099, 30877, 30547, -59, 11099, 11099, -1000, -61,
	-1000, 11099, 321, 30170, -1000, -1000, -1000, 30170, 11099, 1715,
	11099, 69, 68, 66, -1000, -1000, -1000, 27139, 11099, 65,
	-1000, 64, 62, 30170, 1308, 30170, -1000, -1000, 578, 578,
	675, 675, 675, 675, 1651, 903, 544, 2708, 1124, 1124,
	1124, 2559, 537, 537, 1124, 1124, 1124, 1269, 1157, 196,
	2195, 11099, -65, -1000, -1000, -1000, 30170, 30170, 59, -1000,
	-1000, -1000, -146, 2763, 28230, 28206, -1000, 57, 425, -1000,
	-1000, -1000, 21458, -1000, 21458, -1000, 5588, 21458, 1268, 1078,
	-1000, -1000, 1182, 194, 11747, 21458, -1000, 901, 12695, 1455,
	25, 5588, 1455, 27882, 6223, -67, -71, 1076, -1000, 1057,
	11099, -1000, 30877, 1050, 1050, -1000, 528, 525, 517, 515,
	-1000, -1000, -85, 16674, 1726, 1390, 21458, 1429, -1000, -1000,
	193, -1000, -1000, -1000, 933, -83, 12695, -87, 55, -46,
	-91, 21458, -1000, 377, 17571, -1000, 1384, -1000, 21458, 30170,
	-146, -1000, 971, -1000, 183, 11099, 15150, -1000, -174, -1000,
	-93, -1000, 19066, -1000, 311, -182, -1000, 375, -1000, 393,
	181, 21458, 19066, 11099, 11099, 30547, -95, -1000, 180, 180,
	-1000, 27849, -1000, 30170, -1000, 29412, -1000, -1000, -1000, 925,
	-1000, 27825, -1000, -1000, -1000, -1000, 11747, 1266, 167, 30877,
	27501, -1000, -1000, 11099, -1000, -1000, -1000, -1000, -1000, 1009,
	-1000, -1000, 21458, 1081, -1000, -1000, 11099, 2195, 166, 1236,
	165, -1000, -1000, -1000, -1000, -1000, -1000, 1487, -27, -1000,
	889, -1000, -1000, 30170, 1485, -1000, -1000, 21458, 21458, 164,
	162, -1000, 161, 25, -104, -1000, 374, 590, -109, 21458,
	-1000, -1000, 5899, 21458, 901, -114, -1000, 1236, -1000, 901,
	160, 17571, -1000, 1169, -106, -1000, 1575, -1000, 21458, 30170,
	-1000, 393, -1000, 1636, -1000, -1000, 1181, -1000, 4963, 19066,
	21458, -120, -1000, 180, 180, -1000, -1000, 50, 957, 1502,
	-1000, 4053, 11747, 30877, -127, -1000, 27468, -1000, -1000, 1336,
	27444, 1143, 21458, -1000, 21458, 1455, 49, 21458, 467, 5588,
	-1000, -1000, 11099, 11099, 11099, 1726, -1000, -1000, 1724, 741,
	-1000, 428, -1000, 159, 1236, 901, -1000, 1236, 12695, -1000,
	1171, 21458, 156, -132, 19066, -1000, -1000, -1000, 1634, -1000,
	-147, -1000, -1000, 839, 11099, 4053, -151, -1000, -1000, 1328,
	-1000, 972, 870, 48, -152, -1000, -1000, 155, -1000, 11099,
	-1000, -157, -159, -33, -1000, -1000, 15757, -1000, 21458, -1000,
	1236, -1000, -164, -1000, -1000, -1000, -1000, -1000, 118, -1000,
	47, 10775, 10775, -146, -1000, 21458, -1000, 989, 981, 681,
	-1000, -1000, -1000, -1000, -1000, 1143, 30170, -1000, -1000, 45,
	-138, -175, -1000, 901, -1000, -1000, -1000, -1000, 12384, 1011,
	779, 28992, -1000, -1000, -1000, 1399, -1000, 473, 977, 977,
	972, 1715, -1000, 1030, 1236, 1609, -1000, -1000, -1000, -1000,
	-1000, -1000, 1616, -1000, -1000, 1165, -1000, -1000, -1000, -1000,
	-1000, -1000, 10451, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1993, 1991, 1498, 1685, 1987, 1986, 1679, 1985, 1983,
	1982, 1978, 1977, 1975, 1677, 1671, 1637, 1614, 1974, 108,
	1971, 1967, 1965, 1609, 1964, 1962, 1960, 1959, 103, 1958,
	1955, 1603, 1598, 1595, 1590, 1954, 1951, 1561, 1949, 1948,
	15, 1942, 77, 1938, 40, 170, 2770, 150, 1934, 1932,
	1931, 33, 110, 71, 1930, 112, 1927, 1926, 43, 38,
	28, 21, 1925, 109, 1923, 1918, 1502, 29, 1913, 1912,
	140, 1908, 17, 31, 240, 149, 147, 122, 126, 1905,
	1904, 1901, 1896, 45, 1892, 2, 1890, 1883, 12, 59,
	20, 1882, 30, 19, 1881, 1867, 128, 1865, 84, 107,
	1509, 135, 131, 196, 1864, 78, 9, 91, 1862, 1861,
	134, 54, 1860, 37, 90, 144, 1859, 60, 153, 67,
	26, 75, 115, 1855, 1854, 1850, 94, 1849, 113, 74,
	1848, 1847, 88, 1845, 133, 138, 1844, 1843, 98, 1840,
	127, 1838, 1836, 145, 156, 1835, 154, 1834, 1833, 155,
	120, 11, 57, 70, 4, 1504, 1491, 114, 64, 25,
	22, 1831, 2421, 646, 905, 32, 92, 61, 44, 93,
	53, 58, 142, 68, 1830, 1829, 116, 1828, 1827, 1825,
	1824, 1823, 89, 1822, 1821, 65, 139, 13, 14, 39,
	101, 51, 83, 99, 132, 152, 118, 1820, 100, 125,
	1819, 178, 1816, 1814, 1007, 123, 1812, 1811, 1810, 845,
	798, 731, 308, 1807, 1806, 359, 183, 1805, 1804, 62,
	1791, 121, 119, 1788, 143, 148, 41, 1787, 124, 324,
	102, 1786, 117, 56, 0, 427, 368, 1784, 130, 87,
	1783, 1782, 1781, 1779, 23, 1, 10, 6, 7, 3,
	27, 24, 1778, 1777, 137, 96, 69, 1776, 151, 1775,
	1774, 1773, 42, 1772, 18, 1771, 16, 1770, 1766, 8,
	5, 1765, 1764, 136, 1762, 106, 1761, 1607, 1760, 146,
	1759, 1754, 1633, 50, 95,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 53, 53, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 50, 50, 55, 55, 55, 57, 57, 54,
	54, 49, 49, 5, 5, 232, 232, 233, 233, 39,
	39, 43, 43, 40, 41, 41, 42, 42, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 102, 102,
	101, 101, 104, 104, 16, 16, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 200,
	200, 199, 18, 174, 174, 20, 127, 127, 21, 21,
	21, 21, 22, 27, 273, 273, 273, 277, 277, 278,
	278, 279, 279, 279, 279, 279, 279, 279, 275, 275,
	26, 26, 26, 26, 38, 30, 30, 30, 30, 30,
	30, 147, 144, 144, 143, 143, 143, 143, 145, 145,
	145, 145, 148, 148, 82, 82, 225, 224, 224, 230,
	230, 230, 80, 80, 80, 80, 80, 81, 81, 81,
	223, 223, 223, 223, 231, 231, 231, 231, 231, 231,
	229, 229, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 17, 274, 274, 276, 276, 32, 32, 33,
	33, 34, 34, 34, 34, 10, 10, 11, 11, 83,
	83, 84, 84, 153, 153, 153, 153, 85, 85, 56,
	56, 56, 152, 242, 242, 243, 243, 243, 243, 243,
	243, 244, 244, 244, 244, 244, 244, 244, 240, 240,
	241, 238, 238, 239, 239, 239, 239, 280, 280, 151,
	151, 88, 88, 247, 247, 247, 247, 245, 245, 245,
	245, 245, 248, 246, 249, 249, 249, 249, 249, 186,
	186, 186, 36, 12, 62, 62, 13, 9, 9, 131,
	131, 92, 92, 191, 191, 191, 73, 73, 51, 51,
	51, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 132, 132, 133, 133, 24, 29, 35, 35,
	35, 35, 35, 282, 282, 69, 69, 69, 69, 70,
	70, 146, 146, 149, 149, 150, 150, 150, 64, 63,
	65, 65, 8, 8, 58, 58, 59, 59, 60, 60,
	61, 61, 283, 283, 23, 23, 23, 76, 76, 140,
	140, 140, 142, 142, 141, 141, 141, 117, 117, 117,
	37, 97, 97, 106, 106, 107, 107, 197, 108, 108,
	28, 28, 46, 46, 44, 44, 44, 44, 44, 44,
	45, 45, 47, 47, 47, 47, 47, 47, 47, 255,
	255, 255, 258, 258, 254, 256, 256, 257, 257, 281,
	281, 118, 118, 118, 87, 86, 86, 90, 90, 89,
	91, 91, 190, 115, 115, 115, 115, 134, 134, 135,
	135, 136, 136, 137, 137, 137, 138, 138, 139, 139,
	114, 114, 170, 170, 48, 48, 96, 96, 98, 98,
	160, 160, 160, 161, 161, 159, 159, 159, 159, 192,
	192, 192, 192, 192, 192, 192, 271, 271, 271, 272,
	272, 189, 189, 193, 193, 193, 193, 193, 193, 187,
	187, 187, 187, 188, 188, 198, 198, 121, 121, 121,
	121, 119, 119, 120, 120, 194, 194, 194, 194, 116,
	116, 195, 195, 195, 154, 154, 201, 201, 201, 219,
	219, 95, 95, 95, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 203, 203, 203, 203, 205, 205, 205, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 218, 218, 218, 218, 218, 206, 206, 213,
	213, 214, 214, 215, 216, 207, 207, 208, 208, 209,
	210, 217, 217, 217, 217, 221, 221, 211, 211, 211,
	211, 211, 212, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 129, 129, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 164, 164, 164, 164, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 250, 250, 250, 250,
	250, 250, 250, 252, 252, 253, 253, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 259, 259, 260, 260, 262, 262,
	263, 263, 264, 265, 265, 265, 266, 267, 267, 261,
	261, 268, 268, 268, 269, 269, 270, 270, 270, 270,
	270, 176, 176, 176, 177, 177, 178, 184, 184, 184,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 71, 71, 71, 71,
	71, 103, 103, 173, 173, 171, 171, 171, 175, 175,
	122, 122, 220, 220, 220, 220, 220, 220, 220, 123,
	123, 123, 130, 124, 124, 125, 125, 125, 125, 125,
	125, 167, 168, 126, 126, 126, 169, 169, 179, 183,
	183, 182, 181, 181, 180, 180, 157, 157, 158, 158,
	156, 155, 111, 111, 110, 110, 109, 109, 284, 284,
	185, 185, 112, 112, 113, 105, 105, 196, 196, 196,
	196, 99, 99, 78, 78, 100, 100, 74, 74, 77,
	77, 75, 75, 75, 75, 93, 93, 94, 94, 72,
	72, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 222, 222, 222, 172, 66, 66, 66, 67,
	67, 68, 68, 227, 227, 227, 228, 228, 228, 228,
	226, 226, 226, 226, 226, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 3, 6, 3, 4,
	1, 5, 2, 1, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 3, 4,
	4, 4, 4, 2, 4, 4, 4, 4, 4, 4,
	2, 3, 3, 3, 4, 4, 5, 2, 3, 3,
	4, 2, 3, 4, 3, 3, 4, 4, 2, 5,
	5, 6, 2, 2, 0, 2, 0, 6, 6, 5,
	5, 4, 12, 4, 12, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 5, 2, 0, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 6, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -17, -18, -20, -21, -22, -23, -25, -27, -29,
	-28, -30, -31, -32, -33, -34, -35, -24, -26, -36,
	-37, -38, 23, 34, 226, 66, -8, -9, -10, -11,
	-12, -13, -257, 94, 103, 125, 207, 101, 87, 119,
	229, 236, -44, -46, 246, -147, 249, 35, 258, 60,
	97, 231, 224, 225, 284, 293, 68, -255, -47, -45,
	335, 309, 316, 240, -48, 267, 301, 338, 267, 134,
	80, 304, -273, -100, 267, 80, -75, -66, 328, 4,
	-234, -236, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 152,
	155, 154, 159, 162, 165, 167, 168, 169, 172, 170,
	174, 175, 177, 176, 182, 184, 185, 187, 190, 193,
	196, 199, 200, 201, 202, 205, 207, 209, 210, 211,
	212, 214, 215, 217, 218, 219, 220, 221, 224, 222,
	223, 225, 226, 227, 229, 231, 232, 234, 247, 248,
	259, 236, 237, 238, 239, 242, 243, 244, 246, 249,
	251, 254, 257, 258, 260, 263, 261, 256, 266, 268,
	269, 270, 271, 272, 279, 280, 284, 285, 286, 287,
	290, 291, 292, 293, 295, 298, 299, 300, 305, 310,
	311, 312, 313, 314, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 55, 82, 84, 85,
	100, 104, 105, 111, 121, 123, 129, 130, 139, 141,
	142, 143, 145, 157, 171, 181, 183, 194, 198, 204,
	206, 213, 233, 241, 252, 253, 262, 264, 274, 275,
	276, 281, 282, 297, 301, 302, -273, -74, -66, 80,
	89, 138, 292, 291, 80, 134, 267, 304, 294, -19,
	335, -28, -7, -15, -4, -23, -37, -14, -31, -17,
	-32, -33, -34, -16, 23, -226, 4, -234, -236, -235,
	-237, 57, 69, 118, 137, 131, 147, 149, 158, 160,
	173, 195, 197, 230, 250, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 48, 49, 53, 56, 58,
	64, 68, 72, 73, 74, 75, 76, 77, 86, 88,
	90, 91, 92, 95, 97, 99, 106, 107, 108, 114,
	116, 117, 119, 122, 124, 132, 134, 136, 144, 146,
	153, 156, 161, 163, 164, 178, 179, 180, 186, 188,
	189, 191, 192, 203, 208, 216, 228, 240, 245, 255,
	265, 267, 273, 277, 278, 283, 288, 289, 294, 296,
	303, 304, 306, 307, 308, 309, -66, -66, -66, 207,
	22, -277, 22, -278, -279, 68, 94, 119, 240, 138,
	89, 291, -277, -70, 236, -66, -144, 162, 243, 54,
	233, 280, -145, -143, -225, 274, -148, -101, 172, -66,
	4, 172, 245, 80, 279, 22, 34, 54, 59, 81,
	120, 134, 135, 64, 65, 151, 210, 162, 243, 152,
	244, 268, 274, 280, 68, 295, 270, 102, -282, 280,
	280, -282, -282, -69, 280, 277, -70, 4, 80, 245,
	172, -281, 267, -230, -223, -186, 9, 283, 106, 188,
	-229, 8, 327, -222, -228, 5, 7, 326, 4, -234,
	-236, -235, 267, 294, 304, -131, 80, 289, -45, -47,
	-46, -89, -90, 288, 144, 99, 192, -44, -46, -255,
	-258, 214, -254, -66, -258, -86, -87, 22, 91, 339,
	-194, -74, 189, -113, 335, -3, -194, 129, -74, -77,
	129, -74, -66, -194, 129, 277, 339, -100, -93, -66,
	-156, -155, 337, 117, 117, 335, -110, -111, -155, -156,
	117, 146, 146, -195, -194, -66, 129, -78, 129, -77,
	-102, 129, -101, -102, 129, -93, 129, -200, -199, -228,
	301, 267, 134, -174, 335, -127, 335, -66, 22, 188,
	339, 188, -66, -144, 52, -144, 247, 335, -149, -150,
	-63, -64, -65, 148, 209, 212, 277, 320, 117, 314,
	-230, -82, 86, -104, 337, 114, 54, -232, -229, 9,
	247, 210, 244, 117, -274, 188, 117, 117, 117, 117,
	117, 210, 244, 279, 152, 279, 117, 314, 148, 209,
	259, 267, 304, 117, 117, -146, -149, -146, 277, -70,
	-116, -194, 8, 7, 7, -101, 129, -66, -101, 134,
	-66, 129, -89, -90, -115, -134, -135, 161, 108, 186,
	-118, 22, 91, -118, -118, 44, 336, 336, 339, -258,
	-94, 335, -105, -196, -162, 328, -164, 326, 327, 321,
	178, 315, -176, -166, -179, 100, 233, 335, -74, -165,
	340, 9, -252, -46, 29, -177, -178, 48, -66, 7,
	8, 5, 6, -72, -203, -172, -212, 283, 106, 180,
	-250, -251, 4, -234, -227, -204, -214, -208, -211, 145,
	57, 73, 76, 74, 77, 245, 294, 49, 28, 104,
	105, 198, 204, 264, 281, 282, 129, 181, 130, 55,
	121, 157, 93, 37, 39, 41, 42, 50, 51, 82,
	84, 85, 111, 139, 141, 142, 143, 183, 213, 252,
	262, 275, 276, 302, -235, -215, -216, -209, -210, -217,
	-105, -113, 328, -74, 335, -112, -185, -162, 86, -53,
	222, -52, 21, 23, 94, 299, 100, 256, 271, 237,
	256, 271, 237, 222, 100, 340, 222, 222, 100, -232,
	-75, 339, -226, 328, -233, -232, 260, 336, -99, -74,
	-111, -195, -76, -74, -76, 246, -66, 30, 100, -55,
	339, 47, 227, 100, -55, 339, 100, -55, 100, 100,
	336, 339, -194, 129, -77, 30, -173, -201, -202, -204,
	-213, -207, -211, -212, 40, 46, 45, 272, 171, 241,
	253, 297, 38, 187, 140, 139, 141, 142, 143, 252,
	37, 213, 111, 93, 85, 84, 183, 42, 41, -215,
	-216, -209, -210, 82, 275, 276, 145, 39, 51, 50,
	302, 262, -103, -162, -273, -279, -273, 30, -143, -225,
	-103, 339, 159, -81, 165, 177, 126, 189, 312, -224,
	86, -230, -224, 86, 71, -231, 5, 4, -172, -186,
	86, 162, -212, 337, -226, -19, 248, -101, 22, -225,
	-276, 114, -273, -225, -225, -225, -225, -225, 279, 114,
	-66, 159, -225, -225, 267, 134, 267, -70, -55, 339,
	335, -88, 178, -256, 309, -88, 335, -67, 129, -66,
	-256, 178, -115, -135, -134, -136, -162, 22, -139, 110,
	174, -162, -164, -45, -45, -45, -91, -190, -162, -254,
	30, -93, -96, 339, 117, 10, 11, 56, 33, 326,
	327, 328, 329, 112, 330, 331, 324, 325, 323, 318,
	319, 320, 62, 166, 235, 13, 14, 15, 26, 191,
	160, 315, 131, 250, 321, 16, 17, 18, 147, 36,
	132, -71, 30, 4, -79, -162, -162, -162, -162, -162,
	197, -109, -157, 333, -46, 335, -46, -162, -103, 7,
	-46, -171, 333, -180, -162, -110, 335, 5, 335, 5,
	-259, 310, 114, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	206, -221, 305, -221, -221, -205, 335, -205, -206, 335,
	-205, 311, 316, 335, -96, -74, 339, 336, 339, 277,
	-132, 64, 58, -152, 129, 58, -238, -66, 64, -239,
	53, 289, 208, 116, -132, 64, -132, 64, 64, -194,
	33, -28, 117, 33, -28, 117, 277, -77, -66, 277,
	277, -194, -198, 317, -66, -198, 339, 117, 336, 339,
	-154, 307, -140, -28, 335, 86, 30, -140, -106, -107,
	-197, -108, -74, 335, -66, -66, -77, -78, -101, -102,
	-102, -93, -19, -199, 100, -19, 336, 339, -95, 29,
	-128, 335, 313, 169, 83, 127, 168, -129, 239, 336,
	339, 277, 117, 280, 336, -150, -80, 212, 254, 223,
	242, 339, -226, -275, -66, -19, -74, -77, -74, -194,
	-83, -93, -84, -66, -153, -152, -240, -241, -238, 134,
	289, 107, 30, 100, -62, 202, 30, 188, 178, -58,
	269, 100, -137, -222, 335, 327, -138, 233, 234, 339,
	-51, 31, 90, 335, 336, -154, -196, -98, -192, 333,
	-194, -74, -46, -193, 335, -219, -201, -218, 218, 219,
	217, 221, 220, -201, -226, 274, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, 160, 131,
	250, 36, 132, -162, 277, -162, -162, -162, -162, 170,
	178, 180, 283, 106, 290, 91, 184, -284, 265, 32,
	-169, -46, 335, -184, 27, 255, 22, -226, -176, 233,
	335, -157, -162, -158, -103, 336, 336, 339, -103, -175,
	334, -171, -183, -182, 306, 336, -103, 303, 22, 91,
	328, 7, -128, -260, 109, 122, 335, 336, 336, -162,
	-162, -122, -220, -103, 4, 313, 169, 83, 127, 168,
	239, -122, -123, -162, -103, -124, -163, -164, 326, 327,
	321, 335, 233, -125, -162, -103, -162, 43, 156, 278,
	-126, -162, 117, -103, -162, -162, -162, -103, -103, -103,
	335, 7, 7, 274, 274, 7, -154, 336, -185, -52,
	-74, -66, -66, 178, -152, 129, -57, 178, -201, -66,
	335, 335, 150, 150, -66, -66, 129, -66, 129, -66,
	-66, -53, 222, -28, 335, -28, 335, -66, 222, -66,
	-74, 222, -39, 128, 184, -42, 309, -232, 260, 117,
	-74, -117, 228, -162, -117, -142, 188, -99, 301, -66,
	-117, -97, 339, 117, 320, -99, -55, -55, -55, -194,
	-201, 333, 333, 7, 277, 277, 277, 277, 335, -162,
	-275, -275, -63, 287, 61, 212, -230, 339, -198, 336,
	336, 339, -67, 134, -67, -28, -101, 5, -28, -74,
	100, -59, 96, -283, 320, -66, -138, -162, -190, -19,
	-114, 122, -198, 339, 69, -121, 149, 173, 118, 158,
	230, 137, 7, -19, -159, 340, 335, -189, 316, -46,
	-193, -192, 314, -162, -162, 277, -284, 265, -169, -162,
	170, 180, 283, 106, 290, 91, 184, 117, 335, -163,
	-163, -103, -166, 335, -103, 334, 343, 336, -162, 334,
	334, 339, -181, -182, 95, -162, -90, 339, -89, -162,
	-103, -103, 336, 336, -265, 196, 335, 335, -162, 30,
	339, 336, 117, 336, 336, -130, 203, 336, 10, 11,
	326, 327, 328, 329, 112, 330, 331, 324, 325, 323,
	318, 319, 320, 62, 166, 235, 13, 14, 15, 147,
	132, -163, -163, -163, -103, 335, 336, -167, -168, 117,
	114, 30, -126, -126, -126, 336, 117, -103, 339, 339,
	339, 336, 336, 336, 7, 336, 339, 336, 314, 314,
	336, -114, 277, 277, 100, 178, 298, -242, -239, -162,
	-92, -191, -66, -253, 335, -250, -251, -72, 335, 335,
	-50, 94, 246, -133, 100, -55, 100, -55, 277, -132,
	64, -103, -103, 277, 277, -42, 117, 266, 190, 260,
	-105, 179, -117, 63, 336, -154, -107, -98, -185, 336,
	334, 7, 7, 336, 169, 127, 168, -129, 168, -129,
	-129, 7, -66, -85, 133, -153, 335, -67, 335, 335,
	-88, 335, -66, -60, 155, -283, -229, -256, 189, 336,
	336, -170, 124, 44, -192, 149, 149, -192, -121, 149,
	-119, 195, -119, -119, -271, 335, 334, -189, -226, 333,
	341, -103, -188, -187, 30, -66, 193, 336, -162, -162,
	-163, -163, 117, 335, -162, -173, 26, 26, 336, -103,
	336, 339, -158, -162, 336, -171, 97, -162, 273, 336,
	303, -90, -90, -90, 5, -266, -66, 335, 307, -89,
	336, -219, -201, -162, -167, -162, -219, -201, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, 91, 178, 184,
	-163, 339, -103, 336, -168, -167, -162, -162, -201, 336,
	336, 336, -103, -162, -162, -162, 336, 7, -170, -66,
	-66, -152, 100, -243, 64, -244, 56, 107, 68, 178,
	180, 289, 208, 53, 86, 216, 336, 336, 339, -73,
	-110, 56, -73, -162, 335, -92, -93, 178, 86, 178,
	86, 79, 285, -66, -66, -74, -66, -66, 336, 336,
	-66, -74, -233, 274, 335, -141, 335, 188, -28, -117,
	320, 334, 334, 336, 132, -92, 335, -93, -83, 30,
	-92, 188, -61, 154, -283, -229, -58, -262, 308, -162,
	-103, -192, -192, -120, 296, 188, 149, -192, 334, 336,
	-272, 7, -189, -188, 7, -161, -160, 115, 176, 336,
	-66, 335, -189, 26, 26, -162, -173, 336, -162, -162,
	336, -162, 334, -162, 5, -162, 336, 336, 336, -267,
	-66, -162, 336, 336, 336, -168, 117, 91, 184, 335,
	-162, 336, 336, 339, 336, 336, 336, -262, -152, -66,
	-226, -66, 107, 129, 180, 150, 335, -163, -74, -151,
	-280, 67, 263, -191, -51, -226, -51, 336, -103, 336,
	336, 180, 180, -162, -201, -55, -55, 277, 277, 277,
	277, -165, -72, -66, -41, -40, 5, 92, -93, 64,
	-113, -46, 335, 199, 336, -92, 336, 336, -28, 336,
	-74, -283, -229, -59, -263, -264, -66, -120, 335, -162,
	-192, -159, 336, 339, -188, 334, 339, 342, 320, -189,
	335, -93, -187, -162, -162, 336, 336, -90, -261, 201,
	336, -163, 117, 335, -173, 336, -162, -244, -67, 178,
	-162, -68, 335, -85, 335, -73, -90, 216, -54, 56,
	-66, -66, 335, 335, 335, 339, 336, -43, 320, 291,
	179, 336, -66, -66, -151, 336, -85, -151, 335, -229,
	-60, 339, 30, -93, -189, 7, -160, -226, 333, -188,
	-93, 336, 336, -90, 44, -163, -173, 336, 336, 100,
	336, -247, 167, -66, -93, -51, 336, -74, -49, 296,
	-226, -103, -103, -103, -40, 5, 246, -154, 335, -85,
	-151, -85, -92, -61, -264, -266, 336, -187, 7, 336,
	-268, 211, 234, -103, 336, 107, -245, -248, -246, 188,
	118, 200, 251, 336, 336, -88, -162, 336, 336, -90,
	-106, -93, -85, 336, 334, 336, -269, -270, 36, 286,
	71, -162, -269, -66, -246, 188, -248, 188, 291, 89,
	-247, 336, -154, 336, -151, -270, 205, 113, 233, 205,
	113, -249, 175, 227, 47, 246, -249, -245, -56, 47,
	227, -85, 26, 20, 180, 86, -270,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 448, 0, 0, 0, 0, 0,
	0, 0, 420, -2, 0, 160, 0, 364, 0, 364,
	364, 368, 0, 0, 450, 0, 330, 447, -2, 458,
	0, 0, 0, 456, 434, 0, 0, -2, 0, 0,
	0, 0, 0, 134, 0, 986, 915, 921, 922, 946,
	947, 948, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 0, 0, 917, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 0, 242, 960, 961, 962, 963,
	964, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 124, 127, 128, 1040,
	130, 0, 137, 138, 139, 141, 142, 143, 144, 145,
	146, 147, 0, 357, 1065, 370, 155, 1017, 1070, 974,
	1146, 1089, 163, 168, 0, 1152, 171, 176, -2, 100,
	202, 203, 204, 205, 206, 207, 0, 0, 0, 213,
	244, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	227, 231, 0, 0, 0, 238, 0, 0, 372, 363,
	372, 360, 361, 362, 365, 0, 356, 150, 151, 152,
	153, 0, 449, 154, 179, 180, 181, 190, 191, 192,
	193, 319, 0, 321, 200, 201, 942, 0, 956, 957,
	958, 959, 0, 0, 0, 0, 0, 329, -2, 430,
	431, -2, 0, 453, 453, 453, 0, 0, 431, 0,
	439, 1045, 442, 928, 440, 0, 0, 455, 454, 0,
	435, 535, 0, 484, 0, 2, 0, 1130, 535, 0,
	1130, 920, 0, 0, 1130, 0, 0, 135, 136, 925,
	923, 924, 0, 0, 0, 0, 918, 894, 892, 893,
	0, 0, 0, 0, 541, 88, 1130, 56, 1130, 913,
	56, 1130, 98, 56, 1130, 96, 1130, 0, 119, 121,
	1158, 0, 0, 0, 0, 125, 0, 129, 131, 0,
	0, 0, 369, 156, 1119, 158, 0, 0, 162, 373,
	375, 376, 377, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 174, 101, 0, 448, 0, 208, 65, 66,
	0, 221, 228, 0, 246, 0, 0, 0, 0, 0,
	0, 222, 229, 223, 0, 0, 0, 232, 0, 234,
	235, 0, 0, 0, 0, 358, 371, 359, 0, 367,
	56, 539, 320, 944, 943, 302, 1130, 446, 302, 950,
	446, 1130, -2, 0, 426, 465, 466, 0, 0, 0,
	0, 451, 452, 0, 0, 0, 422, 423, 0, 441,
	0, 0, 487, 905, 909, 910, 639, 0, 0, 0,
	0, 0, 0, 731, 733, 1124, 1146, 0, 735, 736,
	0, 738, 740, 741, 0, 744, 745, 885, 917, 931,
	932, 933, 934, 0, 0, 937, 0, 939, 940, 941,
	785, 754, -2, -2, 929, 571, 572, 573, 574, -2,
	1160, 758, 760, 762, 763, 764, 765, 0, 1108, 1125,
	1126, 1142, 1143, 1151, 1155, 1156, 1130, 1139, 1131, 1120,
	1128, 1137, 991, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 955, 601, 602, 607, 608, 610,
	487, 485, 536, 537, 0, 0, 902, 900, 901, 33,
	353, 35, 0, 353, 353, 0, 0, 0, 0, 251,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 526,
	916, 0, 890, 891, 526, 67, 78, 0, 0, 911,
	895, 545, 0, 397, 0, 0, 542, 0, 0, 90,
	0, 54, 55, 0, 92, 0, 0, 94, 0, 0,
	448, 0, 0, 1130, 0, 448, 0, 843, 553, 554,
	555, 556, 557, 636, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 578, 579, 580, 581, 582,
	583, 584, 598, 0, 577, 577, 577, 590, 591, 599,
	600, 605, 606, 617, 618, 620, 622, 616, 616, 616,
	613, 614, 0, 841, 0, 140, 0, 0, 159, 0,
	0, 0, 0, 378, 187, 188, 189, 380, 381, 164,
	166, 177, 165, 167, 169, 170, 194, 195, 196, 197,
	198, 199, 0, 0, 102, 225, 211, 209, 210, 212,
	214, 0, 243, 215, 216, 217, 218, 219, 224, 448,
	230, 233, 236, 237, 0, 0, 0, 366, 322, 0,
	260, 0, 0, 325, 445, 0, 0, 0, 1130, 949,
	385, 0, 429, 463, 464, 467, 471, 472, 475, 478,
	479, 469, 639, 436, 437, 438, 459, 460, 340, 443,
	0, 0, 545, 0, 0, 0, 0, 0, 0, 820,
	821, 822, 823, 824, 825, 828, 829, 826, 827, 830,
	831, 832, 0, 0, 0, 833, 834, 835, 0, 0,
	837, 0, 839, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 908, 836, 644, 645, 646, 668, 669,
	0, 732, 896, 889, 734, 0, -2, 841, 0, 737,
	742, 743, 0, 0, 884, -2, 0, 936, 0, 636,
	787, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 604, 615, 612, 611, 588, 0, 587, 585, 0,
	589, 0, 0, 0, 545, 0, 0, 904, 0, 0,
	0, 0, 352, 37, 1130, 0, 58, 0, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 250, 0, 0, 0, 919, 0,
	0, 0, 70, 0, 926, 77, 0, 0, 0, 0,
	409, 0, 409, 399, 0, 0, 0, 409, 412, 413,
	415, 416, 0, 0, 543, 89, 914, 56, 99, 56,
	56, 97, 105, 120, 0, 122, 123, 0, 546, 548,
	558, 0, 623, 624, 625, 626, 627, 628, 637, 126,
	0, 0, 0, 0, 161, 374, 379, 0, 184, 0,
	186, 0, 103, 245, 148, 226, 239, 240, 526, 540,
	0, 0, 259, 925, 261, 263, 264, 265, 266, 950,
	0, 950, 0, 0, 323, 0, 0, 0, 0, 387,
	393, 0, 0, 473, 0, 0, 470, 476, 477, 0,
	462, 338, 339, 448, 927, 481, 906, 526, 488, 448,
	498, 535, 512, 503, 0, 640, 549, 550, 592, 593,
	594, 595, 596, 641, 642, 0, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, -2, -2, -2, 660,
	661, 662, -2, -2, -2, 666, 667, -2, 838, 840,
	0, 899, 0, -2, 0, -2, -2, -2, -2, 680,
	0, 682, 685, 687, 689, 0, 0, 0, 0, 898,
	699, 876, 0, 0, 817, 818, 819, 907, 684, 0,
	0, 897, 888, 0, 0, -2, 739, 0, 0, 0,
	847, 848, 883, 879, 0, 746, 458, 0, 0, 0,
	0, 0, 945, 795, 0, 0, 0, 759, 761, 0,
	0, 0, 0, 851, -2, -2, -2, -2, -2, -2,
	-2, 0, 0, 841, 861, 0, 0, 702, 0, 0,
	0, 0, 1146, 0, 841, 869, 0, 0, 0, 0,
	0, 841, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 481, 538, 903, 36,
	342, 0, 0, 0, 39, 1130, 47, 0, 274, 0,
	0, 0, 0, 0, 355, 48, 1130, 56, 1130, 56,
	49, 34, 353, 247, 0, 248, 0, 346, 0, 341,
	344, 0, 77, 0, 0, 64, 0, 68, 79, 0,
	912, 87, 0, 544, 394, 409, 0, 0, 401, 398,
	396, 545, 0, 0, 0, 0, 91, 93, 95, 0,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	132, 133, 157, 182, 183, 185, 178, 0, 241, 268,
	301, 0, 0, 950, 0, 257, 302, 324, 326, 0,
	0, 389, 393, 0, 392, 446, 0, 0, 461, 0,
	483, 0, 486, 0, 0, 0, 0, 0, 532, 532,
	532, 530, 506, 0, 512, 0, 0, 524, 0, -2,
	503, 0, 0, -2, -2, 0, 0, 0, 700, -2,
	681, 683, 686, 688, 690, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 886, 889, -2, 842, 845,
	846, 0, 0, 880, 0, 0, 0, 0, 457, 458,
	458, 458, 752, 0, 753, 0, 0, 0, 0, 0,
	0, 768, 0, 769, 770, 0, 0, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 706, 707, 0, 0, 772, 867, 868, 0,
	0, 0, 0, 0, 0, 777, 0, 874, 0, 0,
	0, 781, 782, 783, 0, 575, 0, 597, 619, 621,
	609, 483, 0, 0, 0, 0, 57, 272, 291, 0,
	0, 331, 337, 337, 0, 755, 756, 0, 0, 0,
	41, 0, 0, 0, 0, 45, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 80,
	407, 408, 395, 406, 0, 409, 414, 411, 417, 0,
	551, 0, 0, 559, 629, 630, 631, 632, 633, 634,
	635, 0, 149, 255, 0, 262, 0, 0, 0, 260,
	0, 0, 0, 391, 393, 0, 384, 385, 468, 474,
	444, 789, 0, 0, 489, 0, 0, 0, 0, 0,
	527, 531, 528, 529, 0, 0, 512, 524, 495, 0,
	0, 0, 502, 523, 0, 522, 511, -2, 643, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 877, 0,
	812, 0, 0, 888, -2, 849, 878, 882, 0, 747,
	0, 0, 0, 0, 938, 793, 794, 798, 0, 0,
	757, 0, 0, 850, 860, 862, 703, 704, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, -2, -2,
	-2, 721, 722, 723, -2, -2, -2, 0, 0, 0,
	863, 0, 0, 815, 865, 866, 871, 872, 0, 774,
	775, 776, 873, 0, 0, 0, 603, 0, 789, 348,
	350, 38, 0, 273, 0, 276, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 293, 300, 0, 340,
	930, 0, 340, 0, 0, 0, 0, 0, 53, 0,
	0, 354, 0, 56, 56, 343, 0, 0, 0, 0,
	347, 345, 69, 0, 0, 0, 0, 0, 400, 410,
	0, 552, 547, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 382, 393, 0, 386, 387, 432, 0, 482,
	480, 514, 0, 516, 0, 0, 0, 518, 498, 507,
	0, 509, 524, 500, 0, 0, 493, 0, 492, 512,
	520, 0, 0, 0, 0, -2, 0, 693, -2, -2,
	811, 842, 887, 881, 935, 458, 748, 750, 751, 800,
	797, 0, 784, 766, 767, 859, 0, 0, 0, 0,
	842, 814, 773, 0, 779, 780, 576, 433, 40, 0,
	277, 278, 950, 0, 281, 284, 0, 286, 952, 268,
	0, 297, 298, 332, 333, 336, 334, 337, 458, 295,
	0, 42, 43, 52, 60, 44, 50, 0, 0, 0,
	0, 525, 0, 0, 0, 74, 72, 0, 0, 0,
	418, 419, 0, 0, 300, 0, 290, 268, 258, 300,
	0, 0, 388, 389, 788, 790, 0, 515, 0, 534,
	517, 512, 508, 0, 505, 496, 0, 497, 0, 524,
	0, 0, 504, -2, -2, 694, 813, 0, 458, 0,
	786, -2, 0, 0, 0, 816, 0, 275, 279, 0,
	0, 306, 0, 294, 0, 340, 0, 0, 62, 0,
	349, 351, 0, 0, 0, 0, 76, 73, 0, 0,
	403, 545, 405, 0, 268, 300, 256, 268, 0, 390,
	391, 0, 0, 0, 0, 510, 494, 490, 0, 501,
	0, 521, 749, 803, 0, -2, 0, 729, 778, 0,
	285, 311, 0, 0, 0, 335, 747, 302, 46, 0,
	59, 0, 0, 458, 75, 71, 0, 404, 0, 288,
	268, 327, 0, 383, 791, 792, 533, 499, 0, 519,
	0, 0, 0, 799, 730, 0, 287, 307, 308, 0,
	303, 304, 305, 951, 299, 306, 61, 252, 254, 0,
	545, 0, 289, 300, 491, 796, 801, 804, -2, 1092,
	983, 0, 802, 280, 309, 0, 310, 0, 0, 0,
	311, 0, 402, 271, 268, 0, 806, 807, 808, 809,
	810, 312, 0, 315, 316, 0, 313, 296, 267, 269,
	270, 328, 0, 314, 317, 318, 805,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 324, 3, 330, 325, 3,
	335, 336, 328, 326, 339, 327, 337, 329, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 343, 338,
	318, 320, 319, 3, 340, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 333, 3, 334, 331, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 341, 323, 342, 321,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 322, 57661, 332, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:803
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:923
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1000
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1073
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return unimplemented(sqllex, "set local")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{ /* SKIP DOC */
		}
	case 161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			return unimplemented(sqllex, "set from current")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = Low
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = Normal
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = High
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1728
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1732
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1756
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1760
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1764
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1807
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1811
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1821
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1825
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1829
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = DropDefault
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return unimplemented(sqllex, "match full")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return unimplemented(sqllex, "match partial")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return unimplemented(sqllex, "match simple")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2122
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2132
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			return unimplemented(sqllex, "no action")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			return unimplemented(sqllex, "action set null")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return unimplemented(sqllex, "action set default")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = true
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = false
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2255
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2259
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = Ascending
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = Descending
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2313
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2314
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = true
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = false
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2370
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.str = ""
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = ReadOnly
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = ReadWrite
		}
	case 382:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.str = ""
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.str = ""
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.str = ""
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.str = ""
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2526
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2590
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 410:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2858
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2861
		{
			return unimplemented(sqllex, "cte")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2865
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2869
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2873
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = false
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = true
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2897
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2935
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2955
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &From{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3102
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3147
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3164
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = nil
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.str = astFullJoin
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.str = astLeftJoin
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.str = astRightJoin
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.str = astInnerJoin
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3339
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3340
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3439
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3454
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3463
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3535
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = nil
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3680
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3712
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3752
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = year
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = month
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = day
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = hour
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = minute
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = month
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = hour
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = minute
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = minute
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = second
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3847
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3882
		{
			return unimplemented(sqllex, "at tz")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4116
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4289
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4342
		{
			return unimplemented(sqllex, "variadic")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4343
		{
			return unimplemented(sqllex, "variadic")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4366
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			return unimplemented(sqllex, "func_application")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4383
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4387
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex, "current role")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex, "current user")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			return unimplemented(sqllex, "session user")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			return unimplemented(sqllex, "user")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4436
		{
			return unimplemented(sqllex, "treat")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4480
		{
			return unimplemented(sqllex, "within group")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4481
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = Window(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4516
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4578
		{
			return unimplemented(sqllex, "frame range")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4580
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4584
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4590
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4592
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Any
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = Some
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = All
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = Plus
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = Minus
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = Mult
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = Div
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = FloorDiv
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = Mod
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Bitand
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = Bitor
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Pow
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = Bitxor
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = LT
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = GT
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = EQ
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = LE
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = GE
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = NE
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = Like
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = NotLike
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = ILike
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = NotILike
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4959
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5077
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5121
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5157
		{
			return unimplemented(sqllex, "func const")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5166
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = DNull
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.str = ""
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
