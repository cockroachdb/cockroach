// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const SAVEPOINT = 57559
const SEARCH = 57560
const SECOND = 57561
const SELECT = 57562
const SERIAL = 57563
const SERIALIZABLE = 57564
const SESSION = 57565
const SESSION_USER = 57566
const SET = 57567
const SHOW = 57568
const SIMILAR = 57569
const SIMPLE = 57570
const SMALLINT = 57571
const SMALLSERIAL = 57572
const SNAPSHOT = 57573
const SOME = 57574
const SPLIT = 57575
const SQL = 57576
const START = 57577
const STDIN = 57578
const STRICT = 57579
const STRING = 57580
const STORING = 57581
const SUBSTRING = 57582
const SYMMETRIC = 57583
const SYSTEM = 57584
const TABLE = 57585
const TABLES = 57586
const TEXT = 57587
const THEN = 57588
const TIME = 57589
const TIMESTAMP = 57590
const TIMESTAMPTZ = 57591
const TO = 57592
const TRAILING = 57593
const TRANSACTION = 57594
const TREAT = 57595
const TRIM = 57596
const TRUE = 57597
const TRUNCATE = 57598
const TYPE = 57599
const UNBOUNDED = 57600
const UNCOMMITTED = 57601
const UNION = 57602
const UNIQUE = 57603
const UNKNOWN = 57604
const UPDATE = 57605
const UPSERT = 57606
const USER = 57607
const USERS = 57608
const USING = 57609
const VALID = 57610
const VALIDATE = 57611
const VALUE = 57612
const VALUES = 57613
const VARCHAR = 57614
const VARIADIC = 57615
const VIEW = 57616
const VARYING = 57617
const WHEN = 57618
const WHERE = 57619
const WINDOW = 57620
const WITH = 57621
const WITHIN = 57622
const WITHOUT = 57623
const YEAR = 57624
const ZONE = 57625
const NOT_LA = 57626
const WITH_LA = 57627
const AS_LA = 57628
const POSTFIXOP = 57629
const UMINUS = 57630

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4904

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	307, 27,
	-2, 387,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 360,
	178, 360,
	209, 360,
	305, 360,
	307, 360,
	-2, 370,
	-1, 59,
	1, 363,
	178, 363,
	209, 363,
	305, 363,
	307, 363,
	-2, 369,
	-1, 68,
	1, 27,
	307, 27,
	-2, 387,
	-1, 394,
	1, 177,
	307, 177,
	-2, 892,
	-1, 430,
	153, 397,
	177, 397,
	-2, 366,
	-1, 433,
	153, 396,
	177, 396,
	-2, 364,
	-1, 557,
	153, 396,
	177, 396,
	-2, 367,
	-1, 613,
	304, 830,
	-2, 823,
	-1, 614,
	304, 831,
	-2, 824,
	-1, 620,
	5, 534,
	304, 534,
	-2, 985,
	-1, 644,
	5, 500,
	-2, 959,
	-1, 645,
	5, 528,
	304, 528,
	-2, 961,
	-1, 646,
	5, 508,
	-2, 962,
	-1, 647,
	5, 507,
	-2, 963,
	-1, 648,
	5, 528,
	304, 528,
	-2, 966,
	-1, 649,
	5, 528,
	304, 528,
	-2, 967,
	-1, 650,
	5, 529,
	-2, 970,
	-1, 651,
	5, 494,
	-2, 971,
	-1, 652,
	5, 494,
	-2, 972,
	-1, 653,
	5, 510,
	-2, 976,
	-1, 654,
	5, 495,
	-2, 981,
	-1, 655,
	5, 496,
	-2, 982,
	-1, 656,
	5, 497,
	-2, 983,
	-1, 657,
	5, 498,
	-2, 984,
	-1, 658,
	5, 494,
	-2, 988,
	-1, 659,
	5, 501,
	-2, 993,
	-1, 660,
	5, 499,
	-2, 996,
	-1, 661,
	5, 526,
	304, 526,
	-2, 998,
	-1, 662,
	5, 530,
	-2, 1001,
	-1, 663,
	5, 532,
	-2, 1002,
	-1, 664,
	5, 525,
	304, 525,
	-2, 1006,
	-1, 915,
	97, 370,
	139, 370,
	153, 370,
	177, 370,
	181, 370,
	260, 370,
	-2, 646,
	-1, 923,
	304, 808,
	-2, 796,
	-1, 1127,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 569,
	-1, 1128,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 570,
	-1, 1129,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 571,
	-1, 1133,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 575,
	-1, 1134,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 576,
	-1, 1135,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 577,
	-1, 1138,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 582,
	-1, 1144,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 584,
	-1, 1147,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 589,
	-1, 1148,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 590,
	-1, 1149,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 591,
	-1, 1174,
	186, 718,
	-2, 721,
	-1, 1197,
	114, 734,
	304, 830,
	-2, 823,
	-1, 1198,
	114, 735,
	-2, 955,
	-1, 1199,
	114, 736,
	-2, 890,
	-1, 1200,
	114, 737,
	-2, 863,
	-1, 1201,
	114, 738,
	-2, 878,
	-1, 1202,
	114, 739,
	-2, 889,
	-1, 1203,
	114, 740,
	-2, 924,
	-1, 1350,
	97, 370,
	139, 370,
	153, 370,
	177, 370,
	181, 370,
	260, 370,
	-2, 435,
	-1, 1354,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 583,
	-1, 1355,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 585,
	-1, 1360,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 586,
	-1, 1378,
	186, 717,
	-2, 720,
	-1, 1544,
	1, 436,
	67, 436,
	97, 436,
	115, 436,
	119, 436,
	121, 436,
	133, 436,
	139, 436,
	144, 436,
	150, 436,
	153, 436,
	164, 436,
	177, 436,
	178, 436,
	181, 436,
	209, 436,
	211, 436,
	260, 436,
	267, 436,
	277, 436,
	278, 436,
	286, 436,
	305, 436,
	307, 436,
	308, 436,
	-2, 435,
	-1, 1546,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 587,
	-1, 1551,
	142, 0,
	-2, 601,
	-1, 1559,
	186, 719,
	-2, 722,
	-1, 1593,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 627,
	-1, 1594,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 628,
	-1, 1595,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 629,
	-1, 1599,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 633,
	-1, 1600,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 634,
	-1, 1601,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 635,
	-1, 1707,
	142, 0,
	-2, 602,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 605,
	-1, 1711,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 607,
	-1, 1799,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 606,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 608,
	-1, 1807,
	142, 0,
	-2, 636,
	-1, 1855,
	142, 0,
	-2, 637,
	-1, 1910,
	35, 0,
	127, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 958,
}

const sqlNprod = 1101
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24993

var sqlAct = [...]int{

	614, 1909, 1889, 1750, 1510, 1861, 1933, 1890, 1908, 1891,
	1003, 1099, 1011, 1786, 918, 434, 1570, 604, 838, 1075,
	1699, 265, 588, 1540, 45, 1672, 612, 611, 728, 76,
	844, 1671, 1630, 470, 1692, 455, 77, 1079, 1685, 267,
	76, 76, 76, 1435, 1539, 76, 1773, 1074, 76, 1348,
	1277, 1522, 1078, 1381, 680, 677, 76, 712, 920, 847,
	1434, 1532, 1339, 76, 76, 970, 576, 76, 1012, 1107,
	76, 76, 76, 76, 979, 268, 1184, 1043, 1160, 1027,
	1157, 1108, 1111, 1333, 1036, 792, 439, 1223, 1069, 469,
	862, 776, 682, 587, 698, 1194, 26, 19, 441, 58,
	15, 543, 471, 1109, 7, 729, 586, 472, 773, 951,
	665, 577, 955, 485, 433, 868, 491, 803, 444, 22,
	544, 1005, 73, 560, 21, 1082, 395, 10, 251, 561,
	9, 392, 482, 8, 258, 253, 58, 6, 257, 4,
	559, 790, 259, 772, 484, 794, 373, 382, 705, 269,
	442, 478, 564, 1793, 714, 714, 1794, 262, 714, 542,
	453, 59, 260, 460, 463, 261, 453, 58, 263, 438,
	452, 255, 385, 458, 60, 254, 465, 256, 1008, 606,
	1924, 1004, 1905, 1103, 1897, 1772, 1887, 1103, 1882, 1033,
	1881, 1103, 1857, 1103, 438, 1033, 1851, 1838, 1347, 1103,
	1772, 1040, 27, 421, 1828, 1801, 1783, 1103, 1033, 1772,
	68, 692, 1288, 50, 446, 461, 1780, 1046, 1771, 1103,
	431, 1772, 1755, 1226, 1754, 1103, 1732, 1103, 1712, 1046,
	1842, 1046, 1709, 430, 869, 1033, 1657, 52, 1656, 1046,
	64, 1046, 264, 28, 1041, 57, 1289, 76, 76, 76,
	76, 76, 1642, 494, 1555, 1103, 1496, 1046, 1490, 1000,
	870, 1000, 667, 66, 41, 1452, 1450, 1449, 1453, 1046,
	1046, 36, 1448, 1378, 53, 1046, 1046, 439, 40, 37,
	1042, 1039, 264, 1376, 1337, 57, 1336, 1375, 1377, 495,
	1317, 67, 1046, 1103, 1104, 42, 1046, 1103, 1606, 62,
	1055, 38, 1775, 1046, 1045, 63, 1336, 1046, 1558, 1315,
	968, 36, 1405, 1406, 64, 1032, 715, 715, 1033, 37,
	715, 1380, 1318, 999, 61, 57, 1000, 967, 722, 1103,
	966, 723, 1048, 1168, 871, 872, 1098, 66, 1063, 1044,
	453, 38, 463, 473, 572, 833, 571, 474, 871, 872,
	479, 36, 832, 784, 783, 507, 451, 874, 473, 37,
	1405, 1406, 474, 496, 488, 67, 474, 64, 817, 76,
	492, 874, 527, 62, 1349, 39, 487, 487, 873, 63,
	1944, 38, 1907, 1903, 76, 1896, 55, 76, 76, 43,
	66, 54, 873, 1852, 571, 1781, 44, 1737, 1007, 64,
	1733, 1725, 1038, 1724, 47, 49, 1723, 1718, 1717, 1716,
	1669, 1411, 1621, 1663, 51, 1616, 718, 713, 67, 1615,
	836, 76, 66, 76, 1037, 76, 76, 76, 1614, 76,
	1561, 1544, 1521, 879, 1500, 56, 1457, 1320, 1454, 64,
	1288, 1442, 1433, 1404, 76, 49, 558, 879, 1401, 1400,
	67, 61, 1498, 1398, 869, 76, 1386, 1385, 62, 1411,
	1421, 1316, 66, 1240, 63, 1191, 1190, 926, 1165, 76,
	871, 872, 571, 570, 843, 267, 76, 76, 76, 64,
	76, 467, 889, 61, 557, 49, 1880, 672, 1572, 1871,
	67, 515, 1841, 874, 1820, 1818, 702, 1809, 62, 76,
	76, 1796, 66, 700, 63, 1790, 1778, 76, 1421, 76,
	516, 268, 1769, 1747, 873, 671, 453, 1730, 1422, 1703,
	494, 494, 1679, 61, 1550, 1518, 549, 1516, 267, 76,
	67, 76, 76, 76, 76, 76, 76, 76, 62, 1662,
	890, 76, 76, 717, 63, 1515, 720, 76, 674, 818,
	473, 550, 1668, 553, 474, 76, 495, 495, 1166, 510,
	512, 1513, 699, 252, 268, 1469, 1422, 1468, 547, 453,
	706, 706, 842, 76, 666, 545, 76, 1432, 1394, 479,
	619, 1405, 1406, 1393, 1372, 269, 1368, 1162, 1304, 567,
	568, 1267, 460, 463, 573, 866, 1415, 1407, 1408, 1409,
	1410, 1412, 724, 431, 1266, 1254, 835, 1253, 1233, 871,
	872, 1254, 871, 872, 923, 439, 430, 1189, 883, 875,
	876, 877, 878, 880, 1102, 900, 707, 704, 921, 956,
	496, 496, 874, 875, 876, 877, 878, 880, 269, 900,
	959, 963, 1298, 949, 726, 1407, 1408, 1409, 1410, 1412,
	948, 947, 780, 873, 779, 946, 873, 945, 944, 888,
	819, 943, 807, 823, 824, 825, 826, 827, 814, 942,
	941, 468, 830, 831, 822, 940, 76, 939, 938, 937,
	1411, 735, 936, 935, 76, 852, 934, 933, 76, 924,
	851, 864, 76, 76, 834, 922, 76, 61, 837, 850,
	456, 575, 813, 513, 503, 501, 1667, 1297, 879, 76,
	688, 76, 76, 673, 76, 1795, 1666, 76, 1290, 76,
	76, 973, 76, 1093, 494, 1349, 431, 770, 931, 431,
	431, 961, 871, 872, 1456, 962, 521, 782, 1455, 858,
	1353, 537, 859, 860, 522, 841, 1686, 1004, 1497, 1573,
	984, 986, 1185, 1405, 1406, 952, 1389, 889, 953, 954,
	495, 900, 580, 540, 758, 957, 927, 1284, 1463, 965,
	1867, 960, 1920, 428, 673, 76, 76, 1054, 1921, 1650,
	414, 453, 1405, 1406, 420, 463, 419, 964, 415, 453,
	1311, 989, 1763, 1762, 541, 1050, 1484, 1483, 972, 997,
	1460, 1459, 1015, 1006, 1480, 1006, 1827, 463, 1356, 976,
	463, 683, 1303, 684, 917, 890, 1302, 1301, 267, 258,
	253, 58, 76, 257, 1030, 1028, 58, 259, 1029, 1010,
	1040, 1300, 1031, 1022, 496, 1023, 993, 76, 76, 1068,
	1025, 492, 262, 1145, 76, 1021, 487, 260, 487, 1020,
	261, 1024, 1411, 263, 268, 1047, 255, 996, 1019, 995,
	254, 247, 256, 669, 980, 957, 992, 960, 1409, 1410,
	1412, 76, 519, 1041, 76, 546, 954, 953, 599, 1105,
	1051, 1411, 685, 1049, 1788, 1052, 1057, 1237, 1236, 243,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 1826,
	900, 1421, 1116, 900, 1056, 423, 499, 74, 267, 1042,
	1039, 520, 683, 248, 684, 1689, 1485, 1273, 365, 366,
	367, 972, 71, 384, 1159, 983, 396, 971, 269, 1163,
	453, 683, 1752, 684, 384, 1072, 244, 696, 424, 1185,
	1073, 445, 445, 689, 268, 74, 1471, 1044, 74, 74,
	464, 74, 700, 1071, 1920, 1159, 429, 700, 1869, 1422,
	425, 871, 872, 690, 453, 708, 1505, 1502, 1044, 426,
	76, 76, 76, 1930, 70, 1239, 76, 1113, 1114, 76,
	1172, 1106, 1278, 685, 874, 76, 76, 76, 76, 76,
	1310, 689, 1478, 76, 1488, 1265, 76, 76, 1884, 1272,
	1115, 76, 685, 1503, 1941, 873, 871, 872, 76, 982,
	76, 1181, 1282, 1247, 1885, 1096, 1097, 76, 269, 498,
	1286, 1164, 1241, 900, 1059, 1044, 249, 76, 714, 874,
	1061, 1038, 439, 1269, 1204, 1413, 1414, 1415, 1407, 1408,
	1409, 1410, 1412, 1278, 1264, 1209, 1062, 371, 76, 76,
	873, 735, 735, 694, 76, 1060, 1280, 250, 693, 686,
	879, 1242, 1044, 1243, 494, 246, 245, 1407, 1408, 1409,
	1410, 1412, 1821, 981, 1312, 518, 757, 950, 1292, 1472,
	1293, 1294, 734, 1251, 76, 1929, 76, 69, 76, 1089,
	1271, 374, 76, 1805, 1275, 76, 681, 1770, 517, 914,
	495, 699, 1283, 1893, 76, 879, 1753, 1936, 1533, 437,
	699, 1291, 379, 76, 1319, 969, 1321, 375, 72, 1392,
	453, 538, 1543, 438, 1892, 74, 480, 74, 396, 396,
	1295, 1919, 1338, 1358, 758, 758, 1306, 439, 1917, 1296,
	1307, 376, 1308, 1684, 1142, 1169, 1173, 1091, 1176, 1313,
	530, 436, 1314, 518, 889, 771, 1309, 735, 508, 378,
	686, 1196, 1196, 1207, 1158, 1218, 1942, 506, 563, 1928,
	374, 1230, 1231, 1232, 496, 1526, 539, 1894, 1602, 686,
	1342, 562, 1331, 1251, 1322, 1326, 1948, 439, 1325, 1330,
	715, 379, 1379, 438, 1352, 1351, 375, 1155, 1345, 1030,
	1028, 58, 1757, 1029, 1756, 563, 453, 1031, 1745, 1340,
	1649, 1153, 890, 735, 1323, 1343, 1895, 1648, 1815, 1462,
	376, 1646, 1359, 1357, 1250, 1728, 1246, 1934, 1092, 1341,
	1700, 849, 839, 789, 1501, 1862, 1140, 1143, 378, 439,
	758, 562, 829, 1694, 785, 377, 1746, 504, 877, 878,
	880, 1256, 900, 477, 476, 76, 1255, 735, 1603, 1695,
	1388, 1139, 509, 1528, 1604, 396, 396, 787, 1527, 1935,
	517, 436, 435, 1947, 1467, 554, 1344, 1151, 788, 1150,
	1511, 1670, 1523, 1156, 1334, 1701, 1937, 1188, 380, 76,
	76, 875, 876, 877, 878, 880, 758, 900, 1492, 384,
	1808, 74, 1647, 396, 552, 396, 1645, 555, 1439, 1440,
	1441, 1729, 1638, 1743, 1727, 1436, 76, 1549, 1475, 76,
	1477, 76, 445, 1458, 377, 1399, 857, 1465, 76, 1367,
	1274, 1479, 1693, 74, 1744, 1053, 1141, 76, 998, 536,
	758, 76, 1517, 535, 1639, 1487, 1495, 74, 267, 76,
	1264, 1514, 534, 1491, 74, 74, 74, 1493, 709, 1494,
	533, 532, 531, 1152, 528, 760, 475, 380, 1437, 1537,
	1154, 1512, 932, 821, 1187, 1888, 1859, 74, 74, 1504,
	1506, 1507, 1015, 453, 268, 777, 1371, 777, 1627, 1520,
	1373, 1567, 1476, 76, 668, 1474, 1536, 1552, 1563, 1564,
	1565, 616, 1383, 1384, 1530, 1534, 1535, 396, 1342, 777,
	396, 396, 396, 396, 396, 828, 1461, 1338, 1525, 396,
	396, 1327, 1529, 1094, 1087, 384, 1345, 1026, 721, 1634,
	453, 1635, 719, 846, 453, 716, 1560, 1531, 1431, 711,
	695, 691, 687, 1343, 1764, 848, 757, 757, 1574, 1444,
	1100, 445, 734, 734, 867, 565, 449, 1637, 269, 1921,
	76, 76, 76, 1579, 1640, 1342, 809, 972, 524, 76,
	76, 1766, 988, 987, 1489, 76, 1775, 76, 1609, 76,
	76, 76, 3, 1345, 76, 76, 972, 1854, 1643, 1644,
	1481, 1482, 985, 1823, 1340, 1524, 1610, 569, 991, 1626,
	1343, 990, 1576, 1577, 1344, 370, 413, 1101, 1843, 1682,
	1623, 1581, 1582, 1090, 1341, 1086, 76, 76, 1009, 865,
	781, 1636, 566, 450, 727, 1365, 1035, 1945, 76, 76,
	1946, 1678, 76, 1405, 1406, 1680, 1678, 76, 1622, 1363,
	1677, 1676, 76, 1665, 1613, 1677, 1676, 525, 735, 381,
	1683, 457, 757, 1714, 74, 1660, 871, 872, 734, 416,
	417, 1344, 977, 1508, 1681, 1499, 74, 1065, 1064, 1451,
	74, 994, 1653, 76, 74, 1299, 735, 735, 1659, 1708,
	1238, 1697, 1235, 1234, 1182, 735, 735, 74, 1664, 1017,
	1018, 1066, 74, 1566, 1704, 74, 1556, 396, 396, 1328,
	396, 1324, 1067, 578, 578, 925, 422, 1361, 757, 1690,
	1691, 1366, 678, 1696, 734, 1751, 372, 820, 735, 529,
	1883, 453, 453, 1726, 1720, 453, 1391, 1785, 76, 701,
	76, 758, 76, 76, 1804, 1186, 930, 35, 840, 1674,
	592, 76, 1628, 1464, 1081, 1080, 270, 810, 799, 615,
	793, 802, 757, 777, 867, 1195, 1607, 670, 734, 758,
	758, 617, 1738, 76, 732, 1739, 618, 1617, 758, 758,
	871, 872, 733, 958, 605, 730, 490, 1335, 1013, 1183,
	1387, 928, 1765, 591, 597, 76, 596, 76, 1774, 1170,
	500, 1362, 1698, 874, 1346, 48, 76, 1678, 1364, 514,
	1070, 758, 1767, 1210, 76, 76, 1677, 1676, 390, 1760,
	1761, 1779, 391, 1281, 873, 74, 1077, 1661, 854, 856,
	1095, 1776, 867, 1797, 853, 863, 1789, 1473, 1798, 427,
	735, 1803, 1402, 502, 1749, 760, 760, 909, 910, 911,
	912, 913, 1216, 1208, 76, 1205, 916, 548, 1688, 74,
	676, 1014, 396, 526, 1287, 1819, 1759, 1034, 1741, 1810,
	574, 861, 448, 76, 76, 447, 929, 76, 1076, 879,
	523, 76, 786, 1813, 1814, 1831, 76, 1792, 1784, 1058,
	1782, 418, 1817, 1088, 1249, 1833, 1839, 1840, 1835, 453,
	1678, 76, 1940, 1822, 439, 1470, 267, 76, 1832, 1677,
	1676, 1866, 65, 25, 23, 20, 1845, 18, 700, 17,
	1847, 1844, 16, 758, 1848, 24, 1850, 1849, 889, 76,
	1853, 76, 76, 14, 76, 13, 12, 11, 34, 33,
	735, 32, 268, 31, 30, 29, 1872, 5, 1856, 1870,
	1864, 760, 1875, 76, 2, 1876, 1, 0, 74, 1244,
	1245, 0, 0, 1874, 977, 0, 1878, 1252, 0, 1678,
	1879, 1774, 0, 1257, 1258, 1260, 1262, 1263, 1677, 1676,
	76, 1268, 76, 1877, 1270, 74, 890, 0, 0, 74,
	1904, 0, 1900, 1873, 1898, 1902, 74, 0, 1285, 76,
	0, 1901, 0, 0, 1914, 74, 759, 760, 0, 1918,
	1916, 0, 1834, 731, 1922, 74, 269, 0, 0, 1925,
	735, 1923, 1927, 758, 0, 1865, 0, 0, 0, 0,
	1210, 1210, 1926, 0, 0, 1939, 1070, 777, 1938, 0,
	1943, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 757, 0, 0, 0, 1949, 0, 734,
	1868, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	0, 900, 846, 1015, 846, 0, 396, 0, 0, 0,
	74, 757, 757, 1329, 1210, 1210, 1210, 734, 734, 0,
	757, 757, 1332, 0, 0, 0, 734, 734, 0, 735,
	0, 74, 0, 758, 812, 811, 0, 805, 800, 0,
	0, 0, 1837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 0, 1144, 0, 1146, 1147, 1148, 1149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 815, 0, 0, 0, 1886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1192, 1193, 0, 0, 1206, 0, 1217, 1219, 1224,
	1227, 1228, 1229, 0, 1906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1210, 1210, 678, 0, 0, 757, 0, 0, 0, 0,
	764, 734, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	1279, 0, 0, 0, 0, 0, 0, 74, 74, 0,
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 0,
	1210, 0, 0, 0, 1509, 0, 0, 977, 0, 846,
	0, 0, 1305, 1369, 1370, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 1405, 1406, 0, 74,
	0, 0, 0, 0, 0, 757, 0, 1542, 0, 0,
	0, 734, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 46, 1405, 1406, 0, 1423, 1424, 1425, 0,
	0, 0, 0, 0, 863, 0, 0, 1428, 1429, 1430,
	760, 760, 0, 0, 0, 0, 759, 759, 0, 760,
	760, 1571, 0, 731, 731, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 806, 801, 0, 0, 0,
	0, 0, 0, 1420, 0, 1354, 1355, 0, 0, 0,
	432, 1360, 760, 440, 0, 757, 0, 0, 0, 0,
	46, 734, 0, 0, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 0, 1374, 0, 0, 871, 872, 0,
	0, 0, 0, 1382, 0, 0, 0, 0, 1624, 1625,
	977, 1390, 1411, 0, 0, 1395, 0, 867, 867, 0,
	874, 0, 0, 1651, 0, 1652, 0, 74, 1654, 1655,
	0, 1427, 1658, 74, 1421, 0, 0, 0, 0, 0,
	916, 873, 759, 0, 0, 1426, 1224, 1224, 1224, 731,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	734, 1421, 1673, 0, 867, 1077, 0, 1673, 0, 0,
	0, 0, 1210, 1547, 1548, 0, 74, 74, 0, 1466,
	74, 0, 0, 0, 760, 1542, 0, 0, 0, 0,
	1702, 0, 1422, 0, 0, 0, 879, 0, 759, 0,
	0, 0, 0, 0, 578, 731, 0, 0, 0, 0,
	0, 0, 578, 0, 0, 0, 678, 0, 0, 1422,
	0, 1721, 0, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 759, 1605, 0, 889, 0, 0, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1210, 0, 0, 0, 440, 0, 0, 1416, 1413, 1414,
	1415, 1407, 1408, 1409, 1410, 1412, 977, 0, 1740, 1545,
	396, 1742, 1546, 0, 760, 0, 0, 0, 0, 74,
	1417, 1418, 1419, 1551, 1416, 1413, 1414, 1415, 1407, 1408,
	1409, 1410, 1412, 890, 1405, 1406, 1305, 1423, 1424, 1425,
	0, 867, 0, 0, 0, 1568, 1638, 0, 1631, 0,
	1706, 0, 0, 0, 0, 1578, 1629, 0, 1673, 1580,
	1633, 0, 0, 74, 0, 1787, 0, 0, 0, 0,
	0, 1210, 0, 0, 74, 0, 0, 0, 1639, 0,
	0, 0, 867, 1542, 1420, 0, 0, 0, 0, 0,
	0, 0, 1611, 1612, 760, 0, 0, 0, 1632, 0,
	0, 1618, 1619, 1620, 0, 0, 0, 0, 0, 881,
	882, 883, 875, 876, 877, 878, 880, 0, 900, 0,
	0, 0, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 1824, 1825, 0, 578, 1829, 1405, 1406, 0, 1830,
	0, 1673, 0, 0, 396, 0, 0, 0, 0, 0,
	0, 0, 0, 1634, 0, 1635, 1426, 1846, 0, 867,
	0, 0, 0, 760, 0, 867, 0, 0, 0, 1687,
	0, 0, 1421, 432, 0, 1748, 0, 0, 0, 0,
	0, 1637, 0, 0, 0, 0, 1420, 1863, 1640, 867,
	74, 0, 396, 1405, 1406, 1707, 1423, 1424, 1425, 1710,
	1711, 0, 0, 0, 1713, 0, 0, 0, 1715, 1705,
	1673, 1787, 0, 0, 0, 1719, 0, 0, 0, 1722,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	1422, 0, 0, 0, 0, 1411, 0, 894, 74, 0,
	867, 0, 0, 1420, 874, 1636, 905, 0, 0, 0,
	0, 0, 1731, 759, 0, 0, 0, 1915, 0, 0,
	731, 0, 0, 1807, 0, 873, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 759, 0, 1421, 0, 0, 0, 731, 731,
	759, 759, 1411, 0, 1758, 0, 432, 731, 731, 432,
	432, 1417, 1418, 1419, 0, 1416, 1413, 1414, 1415, 1407,
	1408, 1409, 1410, 1412, 0, 0, 0, 0, 0, 0,
	879, 1777, 915, 759, 0, 1426, 919, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	1791, 1421, 1422, 0, 1855, 0, 0, 0, 0, 0,
	0, 1799, 1800, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 889,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 1816, 0, 0, 0, 0, 0, 1422,
	0, 0, 1405, 1406, 0, 1423, 1424, 1425, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 1416, 1413, 1414,
	1415, 1407, 1408, 1409, 1410, 1412, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 46, 899, 46,
	871, 872, 731, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 1420, 0, 46, 0, 894, 0, 0, 46,
	0, 0, 0, 874, 0, 905, 0, 0, 0, 0,
	1417, 1418, 1419, 0, 1416, 1413, 1414, 1415, 1407, 1408,
	1409, 1410, 1412, 0, 873, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 1411, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900, 1899, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 1002, 0, 0, 871, 872, 0, 0,
	1913, 1913, 901, 902, 903, 759, 0, 0, 0, 879,
	0, 0, 731, 0, 0, 0, 0, 0, 0, 874,
	1421, 905, 0, 0, 0, 0, 1913, 898, 906, 0,
	0, 0, 0, 0, 1405, 1406, 0, 1423, 1424, 1425,
	873, 0, 904, 0, 0, 0, 888, 0, 0, 0,
	1554, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 1913, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 1422, 0,
	895, 0, 0, 0, 1420, 759, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 0,
	0, 0, 0, 898, 906, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 1411, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 1417,
	1418, 1419, 0, 1416, 1413, 1414, 1415, 1407, 1408, 1409,
	1410, 1412, 0, 0, 759, 0, 1426, 0, 0, 0,
	0, 731, 748, 742, 765, 736, 756, 755, 0, 0,
	738, 737, 1421, 0, 897, 767, 766, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	0, 900, 890, 0, 0, 0, 0, 0, 1734, 440,
	0, 0, 0, 899, 0, 0, 761, 0, 753, 752,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 743, 744, 745, 746, 0, 764, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 0, 900, 46, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 0,
	754, 1417, 1418, 1419, 1350, 1416, 1413, 1414, 1415, 1407,
	1408, 1409, 1410, 1412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 915, 747, 741, 0, 0, 0,
	0, 0, 0, 0, 769, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 762, 763, 0, 0, 0, 0,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 768, 80,
	0, 0, 0, 0, 629, 595, 915, 0, 0, 81,
	82, 0, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 1912, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 1110, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 0, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 0, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 1110, 0,
	122, 0, 1110, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	626, 163, 164, 0, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 0,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 1911, 180, 397, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 241, 664, 0,
	0, 188, 0, 0, 398, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 583, 0, 0,
	590, 0, 46, 0, 0, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 405, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 401, 0, 0, 0, 0, 0, 0, 0, 1110,
	1110, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 408, 0, 0, 409,
	0, 0, 0, 0, 410, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 285, 80, 286, 287, 288, 289, 193,
	290, 291, 292, 293, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 294, 84, 200, 201, 85, 295, 296,
	202, 203, 204, 297, 205, 298, 271, 299, 86, 87,
	88, 915, 89, 300, 90, 91, 92, 301, 272, 93,
	94, 302, 303, 304, 305, 306, 307, 95, 96, 97,
	98, 206, 99, 207, 208, 308, 100, 309, 101, 310,
	311, 312, 102, 103, 313, 104, 314, 0, 315, 209,
	105, 106, 210, 211, 316, 317, 318, 107, 108, 212,
	0, 109, 319, 110, 320, 321, 273, 322, 111, 213,
	323, 214, 324, 112, 113, 114, 215, 216, 275, 325,
	117, 326, 115, 327, 274, 116, 217, 218, 219, 220,
	328, 221, 329, 276, 118, 277, 119, 120, 330, 331,
	222, 278, 121, 279, 332, 122, 333, 334, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	335, 132, 336, 223, 134, 224, 135, 136, 337, 338,
	339, 340, 341, 137, 225, 281, 138, 282, 226, 139,
	140, 141, 142, 342, 227, 143, 228, 144, 343, 145,
	146, 147, 229, 148, 149, 344, 151, 152, 150, 153,
	345, 154, 283, 155, 156, 230, 157, 0, 158, 159,
	160, 346, 231, 161, 162, 347, 163, 164, 284, 165,
	232, 233, 166, 348, 172, 167, 168, 169, 171, 234,
	170, 235, 349, 173, 350, 174, 175, 351, 236, 237,
	238, 352, 353, 176, 239, 240, 354, 177, 178, 179,
	180, 355, 356, 181, 182, 183, 357, 184, 358, 185,
	186, 187, 241, 242, 359, 360, 188, 361, 362, 363,
	364, 189, 190, 191, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1538, 78, 79, 285, 80, 286, 287, 288, 289,
	193, 290, 291, 292, 293, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 294, 84, 200, 201, 85, 295,
	296, 202, 203, 204, 297, 205, 298, 271, 299, 86,
	87, 88, 0, 89, 300, 90, 91, 92, 301, 272,
	93, 94, 302, 303, 304, 305, 306, 307, 95, 96,
	97, 98, 206, 99, 207, 208, 308, 100, 309, 101,
	310, 311, 312, 102, 103, 313, 104, 314, 0, 315,
	209, 105, 106, 210, 211, 316, 317, 318, 107, 108,
	212, 0, 109, 319, 110, 320, 321, 273, 322, 111,
	213, 323, 214, 324, 112, 113, 114, 215, 216, 275,
	325, 117, 326, 115, 327, 274, 116, 217, 218, 219,
	220, 328, 221, 329, 276, 118, 277, 119, 120, 330,
	331, 222, 278, 121, 279, 332, 122, 333, 334, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 335, 132, 336, 223, 134, 224, 135, 136, 337,
	338, 339, 340, 341, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 342, 227, 143, 228, 144, 343,
	145, 146, 147, 229, 148, 149, 344, 151, 152, 150,
	153, 345, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 346, 231, 161, 162, 347, 163, 164, 284,
	165, 232, 233, 166, 348, 172, 167, 168, 169, 171,
	234, 170, 235, 349, 173, 350, 174, 175, 351, 236,
	237, 238, 352, 353, 176, 239, 240, 354, 177, 178,
	179, 180, 355, 356, 181, 182, 183, 357, 184, 358,
	185, 186, 187, 241, 242, 359, 360, 188, 361, 362,
	363, 364, 189, 190, 191, 192, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 78, 79, 285, 80, 286, 287, 288, 289,
	193, 290, 291, 292, 293, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 294, 84, 200, 201, 85, 295,
	296, 202, 203, 204, 297, 205, 298, 271, 299, 86,
	87, 88, 0, 89, 300, 90, 91, 92, 301, 272,
	93, 94, 302, 303, 304, 305, 306, 307, 95, 96,
	97, 98, 206, 99, 207, 208, 308, 100, 309, 101,
	310, 311, 312, 102, 103, 313, 104, 314, 0, 315,
	209, 105, 106, 210, 211, 316, 317, 318, 107, 108,
	212, 0, 109, 319, 110, 320, 321, 273, 322, 111,
	213, 323, 214, 324, 112, 113, 114, 215, 216, 275,
	325, 117, 326, 115, 327, 274, 116, 217, 218, 219,
	220, 328, 221, 329, 276, 118, 277, 119, 120, 330,
	331, 222, 278, 121, 279, 332, 122, 333, 334, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 335, 132, 336, 223, 134, 224, 135, 136, 337,
	338, 339, 340, 341, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 342, 227, 143, 228, 144, 343,
	145, 146, 147, 229, 148, 149, 344, 151, 152, 150,
	153, 345, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 346, 231, 161, 162, 347, 163, 164, 284,
	165, 232, 233, 166, 348, 172, 167, 168, 169, 171,
	234, 170, 235, 349, 173, 350, 174, 175, 351, 236,
	237, 238, 352, 353, 176, 239, 240, 354, 177, 178,
	179, 180, 355, 356, 181, 182, 183, 357, 184, 358,
	185, 186, 187, 241, 242, 359, 360, 188, 361, 362,
	363, 364, 189, 190, 191, 192, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 1178, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 1179, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 1177, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 582, 1180,
	0, 0, 0, 583, 0, 0, 590, 1175, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 679, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 64, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 66, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 497, 664, 0, 0, 188,
	0, 0, 0, 62, 189, 190, 191, 192, 585, 63,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 78, 79, 590, 80,
	0, 0, 0, 0, 629, 595, 0, 0, 0, 81,
	82, 194, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 94, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 0, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 64, 231, 161, 162,
	626, 163, 164, 284, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 66,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 497, 664, 0,
	0, 188, 0, 0, 0, 62, 189, 190, 191, 192,
	585, 63, 613, 602, 603, 600, 601, 589, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 583, 78, 79,
	590, 80, 0, 0, 0, 0, 629, 595, 0, 0,
	0, 81, 82, 194, 644, 196, 645, 83, 646, 647,
	1220, 84, 200, 201, 85, 610, 628, 648, 649, 204,
	0, 640, 0, 621, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 272, 93, 94, 0, 622,
	624, 0, 623, 625, 95, 96, 97, 98, 650, 99,
	651, 652, 0, 100, 0, 101, 0, 0, 0, 643,
	103, 0, 104, 0, 0, 0, 594, 105, 106, 630,
	631, 608, 0, 0, 107, 108, 653, 0, 109, 0,
	110, 0, 1225, 273, 0, 111, 641, 0, 214, 0,
	112, 113, 114, 637, 639, 275, 0, 117, 0, 115,
	0, 274, 116, 654, 655, 656, 657, 0, 620, 0,
	276, 118, 277, 119, 120, 0, 1221, 642, 278, 121,
	279, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 584, 132, 609,
	638, 134, 658, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 281, 138, 282, 632, 139, 140, 141, 142,
	0, 633, 143, 228, 144, 0, 145, 146, 147, 659,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 283,
	155, 156, 598, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 626, 163, 164, 284, 165, 660, 233, 166,
	0, 172, 167, 168, 169, 171, 661, 170, 634, 0,
	173, 0, 174, 175, 0, 236, 662, 663, 0, 1222,
	176, 635, 636, 607, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 627, 184, 0, 185, 186, 187, 241,
	664, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 585, 0, 613, 602, 603, 600, 601, 589,
	0, 0, 0, 581, 582, 0, 0, 0, 0, 583,
	78, 79, 590, 80, 0, 0, 0, 0, 629, 595,
	0, 0, 0, 81, 82, 194, 644, 196, 645, 83,
	646, 647, 0, 84, 200, 201, 85, 610, 628, 648,
	649, 204, 0, 640, 0, 621, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 622, 624, 0, 623, 625, 95, 96, 97, 98,
	650, 99, 651, 652, 0, 100, 0, 101, 0, 0,
	0, 643, 103, 0, 104, 0, 0, 0, 594, 105,
	106, 630, 631, 608, 0, 0, 107, 108, 653, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 641, 0,
	214, 0, 112, 113, 114, 637, 639, 275, 0, 117,
	0, 115, 0, 274, 116, 654, 655, 656, 657, 0,
	620, 0, 276, 118, 277, 119, 120, 0, 0, 642,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 584,
	132, 609, 638, 134, 658, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 632, 139, 140,
	141, 142, 0, 633, 143, 228, 144, 0, 145, 146,
	147, 659, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 598, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 626, 163, 164, 284, 165, 660,
	233, 166, 0, 172, 167, 168, 169, 171, 661, 170,
	634, 0, 173, 0, 174, 175, 0, 236, 662, 663,
	0, 0, 176, 635, 636, 607, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 627, 184, 0, 185, 186,
	187, 241, 664, 0, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 582, 0, 0, 0,
	0, 583, 0, 0, 590, 1608, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 583, 0, 0, 590, 1557, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 0, 0, 590, 1174,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 629, 595, 0, 0, 0, 81,
	82, 194, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 94, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 0, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	626, 163, 164, 284, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 0,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 241, 664, 0,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	585, 0, 0, 0, 0, 613, 602, 603, 600, 601,
	589, 581, 582, 0, 0, 0, 0, 583, 921, 1171,
	590, 78, 79, 0, 80, 0, 0, 0, 0, 629,
	595, 0, 0, 0, 81, 82, 194, 644, 196, 645,
	83, 646, 647, 0, 84, 200, 201, 85, 610, 628,
	648, 649, 204, 0, 640, 0, 621, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	94, 0, 622, 624, 0, 623, 625, 95, 96, 97,
	98, 650, 99, 651, 652, 0, 100, 0, 101, 0,
	0, 0, 643, 103, 0, 104, 0, 0, 0, 594,
	105, 106, 630, 631, 608, 0, 0, 107, 108, 653,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 641,
	0, 214, 0, 112, 113, 114, 637, 639, 275, 0,
	117, 0, 115, 0, 274, 116, 654, 655, 656, 657,
	0, 620, 0, 276, 118, 277, 119, 120, 0, 0,
	642, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	584, 132, 609, 638, 134, 658, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 281, 138, 282, 632, 139,
	140, 141, 142, 0, 633, 143, 228, 144, 0, 145,
	146, 147, 659, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 598, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 626, 163, 164, 284, 165,
	660, 233, 166, 0, 172, 167, 168, 169, 171, 661,
	170, 634, 0, 173, 0, 174, 175, 0, 236, 662,
	663, 0, 0, 176, 635, 636, 607, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 627, 184, 0, 185,
	186, 187, 241, 664, 0, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 585, 0, 613, 602, 603,
	600, 601, 589, 0, 0, 0, 581, 582, 579, 0,
	0, 0, 583, 78, 79, 590, 80, 0, 0, 0,
	0, 629, 595, 0, 0, 0, 81, 82, 194, 644,
	196, 645, 83, 646, 647, 0, 84, 200, 201, 85,
	610, 628, 648, 649, 204, 0, 640, 0, 621, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 94, 0, 622, 624, 0, 623, 625, 95,
	96, 97, 98, 650, 99, 651, 652, 0, 100, 0,
	101, 0, 0, 0, 643, 103, 0, 104, 0, 0,
	0, 594, 105, 106, 630, 631, 608, 0, 0, 107,
	108, 653, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 641, 0, 214, 0, 112, 113, 114, 637, 639,
	275, 0, 117, 0, 115, 0, 274, 116, 654, 655,
	656, 657, 0, 620, 0, 276, 118, 277, 119, 120,
	0, 0, 642, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 584, 132, 609, 638, 134, 658, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 281, 138, 282,
	632, 139, 140, 141, 142, 0, 633, 143, 228, 144,
	0, 145, 146, 147, 659, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 598, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 626, 163, 164,
	284, 165, 660, 233, 166, 0, 172, 167, 168, 169,
	171, 661, 170, 634, 0, 173, 0, 174, 175, 0,
	236, 662, 663, 0, 0, 176, 635, 636, 607, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 627, 184,
	0, 185, 186, 187, 241, 664, 1562, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 585, 0, 613,
	602, 603, 600, 601, 589, 0, 0, 0, 581, 582,
	0, 0, 0, 0, 583, 78, 79, 590, 80, 0,
	0, 0, 0, 629, 595, 0, 0, 0, 81, 82,
	194, 644, 196, 645, 83, 646, 647, 0, 84, 200,
	201, 85, 610, 628, 648, 649, 204, 0, 640, 0,
	621, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 272, 93, 94, 0, 622, 624, 0, 623,
	625, 95, 96, 97, 98, 650, 99, 651, 652, 679,
	100, 0, 101, 0, 0, 0, 643, 103, 0, 104,
	0, 0, 0, 594, 105, 106, 630, 631, 608, 0,
	0, 107, 108, 653, 0, 109, 0, 110, 0, 0,
	273, 0, 111, 641, 0, 214, 0, 112, 113, 114,
	637, 639, 275, 0, 117, 0, 115, 0, 274, 116,
	654, 655, 656, 657, 0, 620, 0, 276, 118, 277,
	119, 120, 0, 0, 642, 278, 121, 279, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 280,
	129, 130, 133, 131, 584, 132, 609, 638, 134, 658,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 281,
	138, 282, 632, 139, 140, 141, 142, 0, 633, 143,
	228, 144, 0, 145, 146, 147, 659, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 283, 155, 156, 598,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 626,
	163, 164, 284, 165, 660, 233, 166, 0, 172, 167,
	168, 169, 171, 661, 170, 634, 0, 173, 0, 174,
	175, 0, 236, 662, 663, 0, 0, 176, 635, 636,
	607, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	627, 184, 0, 185, 186, 187, 241, 664, 0, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 585,
	0, 613, 602, 603, 600, 601, 589, 0, 0, 0,
	581, 582, 0, 0, 0, 0, 583, 78, 79, 590,
	80, 0, 0, 0, 0, 629, 595, 0, 0, 0,
	81, 82, 194, 644, 196, 645, 83, 646, 647, 0,
	84, 200, 201, 85, 610, 628, 648, 649, 204, 0,
	640, 0, 621, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 622, 624,
	0, 623, 625, 95, 96, 97, 98, 650, 99, 651,
	652, 0, 100, 0, 101, 0, 0, 0, 643, 103,
	0, 104, 0, 0, 0, 594, 105, 106, 630, 631,
	608, 0, 0, 107, 108, 653, 0, 109, 0, 110,
	0, 1225, 273, 0, 111, 641, 0, 214, 0, 112,
	113, 114, 637, 639, 275, 0, 117, 0, 115, 0,
	274, 116, 654, 655, 656, 657, 0, 620, 0, 276,
	118, 277, 119, 120, 0, 0, 642, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 280, 129, 130, 133, 131, 584, 132, 609, 638,
	134, 658, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 281, 138, 282, 632, 139, 140, 141, 142, 0,
	633, 143, 228, 144, 0, 145, 146, 147, 659, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 598, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 626, 163, 164, 284, 165, 660, 233, 166, 0,
	172, 167, 168, 169, 171, 661, 170, 634, 0, 173,
	0, 174, 175, 0, 236, 662, 663, 0, 0, 176,
	635, 636, 607, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 627, 184, 0, 185, 186, 187, 241, 664,
	0, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 585, 0, 0, 0, 0, 613, 602, 603, 600,
	601, 589, 581, 582, 0, 0, 0, 0, 583, 0,
	0, 590, 78, 79, 855, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 583, 78, 79, 590, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 1912, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 1911, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 585, 0,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 78, 79, 590, 80,
	0, 0, 0, 0, 629, 595, 0, 0, 0, 81,
	82, 1910, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 1912, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 0, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	626, 163, 164, 284, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 0,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 1911, 180, 0, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 241, 664, 0,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	585, 0, 613, 602, 603, 600, 601, 589, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 583, 78, 79,
	590, 80, 0, 0, 0, 0, 629, 595, 0, 0,
	0, 81, 82, 194, 644, 196, 645, 83, 646, 647,
	0, 84, 200, 201, 85, 610, 628, 648, 649, 204,
	0, 640, 0, 621, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 272, 93, 94, 0, 622,
	624, 0, 623, 625, 95, 96, 97, 98, 650, 99,
	651, 652, 0, 100, 0, 101, 0, 0, 0, 643,
	103, 0, 104, 0, 0, 0, 594, 105, 106, 630,
	631, 608, 0, 0, 107, 108, 653, 0, 109, 0,
	110, 0, 0, 273, 0, 111, 641, 0, 214, 0,
	112, 113, 114, 637, 639, 275, 0, 117, 0, 115,
	0, 274, 116, 654, 655, 656, 657, 0, 620, 0,
	276, 118, 277, 119, 120, 0, 0, 642, 278, 121,
	279, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 584, 132, 609,
	638, 134, 658, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 281, 138, 282, 632, 139, 140, 141, 142,
	0, 633, 143, 228, 144, 0, 145, 146, 147, 659,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 283,
	155, 156, 598, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 626, 163, 164, 284, 165, 660, 233, 166,
	0, 172, 167, 168, 169, 171, 661, 170, 634, 0,
	173, 0, 174, 175, 0, 236, 662, 663, 0, 0,
	176, 635, 636, 607, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 627, 184, 0, 185, 186, 187, 241,
	664, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 585, 0, 1197, 602, 603, 600, 601, 589,
	0, 0, 0, 581, 582, 0, 0, 0, 0, 583,
	78, 79, 590, 80, 0, 0, 0, 0, 629, 595,
	0, 0, 0, 81, 82, 194, 644, 196, 645, 83,
	646, 647, 0, 84, 200, 201, 85, 610, 628, 648,
	649, 204, 0, 640, 0, 621, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 622, 624, 0, 623, 625, 95, 96, 97, 98,
	650, 1200, 651, 652, 0, 100, 0, 101, 0, 0,
	0, 643, 103, 0, 104, 0, 0, 0, 594, 105,
	106, 630, 631, 608, 0, 0, 107, 108, 653, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 641, 0,
	214, 0, 112, 113, 1201, 637, 639, 275, 0, 117,
	0, 115, 0, 274, 116, 654, 655, 656, 657, 0,
	620, 0, 276, 118, 277, 119, 120, 0, 0, 642,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	1202, 1199, 127, 128, 280, 129, 130, 133, 131, 584,
	132, 609, 638, 134, 658, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 632, 139, 140,
	141, 142, 0, 633, 143, 228, 144, 0, 145, 146,
	147, 659, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 598, 157, 0, 158, 159, 1203,
	0, 231, 161, 162, 626, 163, 164, 284, 165, 660,
	233, 166, 0, 172, 167, 168, 169, 171, 661, 170,
	634, 0, 173, 0, 174, 175, 0, 236, 662, 663,
	0, 0, 176, 635, 636, 607, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 627, 184, 0, 185, 186,
	187, 241, 664, 0, 0, 188, 0, 0, 0, 0,
	189, 190, 1198, 192, 585, 0, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 581, 582, 0, 0, 0,
	0, 583, 78, 79, 590, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 0, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 1215, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 613, 0,
	0, 0, 0, 0, 0, 0, 0, 1211, 1212, 0,
	0, 0, 0, 1213, 78, 79, 1214, 80, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 628, 202, 203, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 630, 631, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 217,
	218, 219, 220, 0, 221, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 0, 132, 0, 638, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 284, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 635, 636, 0,
	177, 178, 179, 180, 493, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 1675, 202,
	203, 204, 0, 205, 0, 271, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 275, 0, 117,
	0, 115, 0, 274, 116, 217, 218, 219, 220, 0,
	221, 0, 276, 118, 277, 119, 120, 0, 0, 222,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 230, 157, 0, 158, 159, 160,
	64, 231, 161, 162, 0, 163, 164, 284, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 66, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 497, 242, 0, 0, 188, 0, 0, 0, 62,
	189, 190, 191, 192, 0, 63, 493, 804, 0, 805,
	800, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 61, 80, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 271, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 808, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 797, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 275,
	0, 117, 0, 115, 0, 274, 116, 217, 218, 219,
	220, 0, 221, 0, 276, 118, 277, 119, 120, 0,
	0, 222, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	798, 0, 0, 0, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 284,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 796, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 493, 804, 188, 805, 800,
	795, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 806, 801, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 271, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 791, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 797, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 215, 216, 275, 0,
	117, 0, 115, 0, 274, 116, 217, 218, 219, 220,
	0, 221, 0, 276, 118, 277, 119, 120, 0, 0,
	222, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 798,
	0, 0, 0, 137, 225, 281, 138, 282, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 284, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 796, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 493, 804, 188, 805, 800, 795,
	0, 189, 190, 191, 192, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 806, 801, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 271, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 797, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 275, 0, 117,
	0, 115, 0, 274, 116, 217, 218, 219, 220, 0,
	221, 0, 276, 118, 277, 119, 120, 0, 0, 222,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 798, 0,
	0, 0, 137, 225, 281, 138, 282, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 284, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 796, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 75, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 806, 801, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 454, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 64,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 66, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	497, 242, 0, 0, 188, 75, 0, 0, 62, 189,
	190, 191, 192, 0, 63, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 193,
	0, 0, 0, 1112, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 215, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 64, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 66, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 497, 242, 0, 0, 188, 75, 0, 0,
	62, 189, 190, 191, 192, 0, 63, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 193, 0, 0, 0, 61, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 454, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 1112, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 0, 75, 0, 0, 189,
	190, 191, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	193, 0, 0, 0, 697, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 1016, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 1572, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 613, 602,
	603, 600, 601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 675, 0,
	0, 0, 193, 0, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 0, 0, 648, 649, 204, 0, 205, 0, 271,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 222, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 0, 132, 609, 223, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 239, 240, 607,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 775, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 774, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 75, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 778, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 493, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 778, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 271, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 275, 0, 117,
	0, 115, 0, 274, 116, 217, 218, 219, 220, 0,
	221, 0, 276, 118, 277, 119, 120, 0, 0, 222,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 284, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 980, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 978, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	1085, 0, 107, 108, 212, 0, 109, 0, 110, 983,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 1083, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 982, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 1084, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 980, 205, 0, 0, 975, 86,
	87, 88, 0, 89, 978, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 983, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 974, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 982,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 981, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 1541, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 454, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 725, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 454,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 505, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 466, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 454, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 459, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 454, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 369, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	368, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 1261, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 1259, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 1248, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 845,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 383, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 710, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 0, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 556, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 551, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 511, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 394, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 393, 237, 238, 0, 0, 389, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 394, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 393, 237, 238,
	0, 0, 389, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 489, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 486, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 483, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 481,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 462, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 443, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 386, 0, 0, 123,
	0, 124, 125, 126, 127, 394, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 388, 157, 0, 158,
	159, 160, 0, 231, 161, 387, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 393,
	237, 238, 0, 0, 389, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 0, 142,
	0, 227, 143, 228, 144, 0, 145, 0, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 0, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 874, 0, 905, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 873, 0, 0, 0,
	0, 874, 888, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 0, 0, 0, 879, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 898, 906, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 895, 0, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 890, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 874, 899, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 897, 0, 0, 885,
	886, 887, 0, 884, 881, 882, 883, 875, 876, 877,
	878, 880, 0, 900, 0, 0, 0, 0, 0, 0,
	1447, 0, 897, 0, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	879, 0, 0, 0, 871, 872, 1446, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 898, 906,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 905,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 873, 889,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 879, 0, 0, 0, 890, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 874, 899, 905,
	0, 898, 906, 0, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 904, 0, 873, 0,
	0, 0, 894, 0, 888, 0, 896, 0, 0, 874,
	0, 905, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 895, 897, 888, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900, 879, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 879, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 898, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 895, 0, 0, 0,
	890, 0, 1397, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 890, 894, 0, 0, 0, 0, 0, 0,
	874, 0, 905, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 888, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 0, 1405, 1406, 1860,
	1423, 1424, 1425, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 0, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 879, 900, 0, 0,
	0, 1858, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 898, 906, 0, 1420, 894, 0,
	0, 0, 0, 0, 0, 874, 0, 905, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 889, 873, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 1426,
	0, 879, 0, 890, 894, 0, 0, 0, 0, 0,
	0, 874, 0, 905, 899, 1421, 0, 0, 0, 898,
	906, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 904, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 895, 1422, 885, 886, 887, 0, 884, 881,
	882, 883, 875, 876, 877, 878, 880, 879, 900, 0,
	0, 0, 1836, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 898, 906, 0, 890, 894,
	0, 0, 0, 0, 0, 0, 874, 0, 905, 899,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 889, 873, 0, 0,
	0, 0, 0, 888, 1417, 1418, 1419, 0, 1416, 1413,
	1414, 1415, 1407, 1408, 1409, 1410, 1412, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 885,
	886, 887, 0, 884, 881, 882, 883, 875, 876, 877,
	878, 880, 879, 900, 890, 0, 0, 1811, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	898, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 895, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	0, 0, 0, 1806, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 890,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 905,
	899, 0, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 873, 894,
	0, 0, 0, 0, 888, 0, 874, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 0, 884, 881, 882, 883, 875, 876,
	877, 878, 880, 879, 900, 0, 0, 0, 1802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	898, 906, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 896, 0, 0, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 890,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 905,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 0, 0, 0, 1736,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 0, 884, 881, 882, 883, 875, 876,
	877, 878, 880, 879, 900, 0, 0, 0, 1735, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 898, 906, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 874, 0, 905, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 873, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 879, 0,
	890, 894, 0, 0, 0, 0, 0, 0, 874, 0,
	905, 899, 0, 0, 0, 0, 898, 906, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 904, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 895,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 879, 900, 0, 0, 0, 1641,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 898, 906, 0, 890, 894, 0, 0, 0,
	0, 0, 0, 874, 0, 905, 899, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 889, 873, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 885, 886, 887, 0,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 879,
	900, 890, 0, 0, 1575, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 898, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	895, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 0, 900, 0, 0, 0,
	1559, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 890, 894, 0, 0,
	0, 0, 0, 0, 874, 0, 905, 899, 0, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 873, 894, 0, 0, 0,
	0, 888, 0, 874, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	879, 900, 0, 0, 0, 1167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 879,
	1932, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 898, 906, 889,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 1931, 0, 0, 0, 899, 0,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 890, 894, 0, 0,
	0, 0, 0, 0, 874, 0, 905, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	879, 900, 1437, 0, 0, 1436, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 898, 906,
	0, 0, 894, 0, 0, 0, 0, 1100, 0, 874,
	0, 905, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 889,
	873, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 908, 0, 0, 0,
	0, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 879, 0, 890, 894, 0,
	0, 0, 907, 0, 0, 874, 0, 905, 899, 0,
	0, 0, 0, 898, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 904, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 895, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 879, 900, 0, 0, 0, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 898,
	906, 0, 890, 894, 0, 0, 0, 0, 0, 0,
	874, 0, 905, 899, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	889, 873, 0, 0, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 0, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 879, 900, 890, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 899,
	0, 0, 0, 0, 898, 906, 894, 0, 0, 0,
	0, 0, 0, 874, 0, 905, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 873, 889, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 895, 438, 885,
	886, 887, 0, 884, 881, 882, 883, 875, 876, 877,
	878, 880, 0, 900, 0, 0, 0, 0, 0, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 879,
	0, 0, 0, 890, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 874, 899, 905, 0, 898, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 873, 0, 0, 0, 0, 0,
	888, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 897, 0, 0, 885, 886, 887, 0, 884, 881,
	882, 883, 875, 876, 877, 878, 880, 0, 900, 879,
	0, 0, 0, 0, 1443, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 890, 898, 906, 0,
	0, 894, 0, 0, 0, 1438, 0, 899, 874, 0,
	905, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 1569, 0, 889, 873,
	0, 0, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	0, 900, 0, 0, 879, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 898, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 895, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	0, 900, 0, 0, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 890, 894, 0, 0, 0, 0, 0, 0, 874,
	0, 905, 899, 0, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	873, 894, 0, 0, 0, 1396, 888, 0, 874, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 888, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 879, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 1405, 1406, 0, 1423, 1424,
	1425, 0, 0, 0, 879, 0, 0, 0, 904, 0,
	0, 1553, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 898, 906, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 1420, 895, 896, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 1411, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 890, 894, 0, 0, 0, 0, 0, 0, 874,
	0, 905, 899, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 1421, 0, 0, 888, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 0, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 879, 900, 0, 0, 871,
	872, 1422, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 898, 906, 894, 0, 0, 0, 0,
	0, 0, 874, 0, 905, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 873, 889, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 1417, 1418, 1419, 0, 1416, 1413, 1414, 1415,
	1407, 1408, 1409, 1410, 1412, 0, 0, 0, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 879, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 899, 905, 0, 898, 906, 0, 0,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 904, 0, 873, 0, 0, 0, 0, 0, 888,
	0, 896, 0, 0, 874, 0, 905, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	897, 888, 0, 885, 886, 887, 0, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 0, 900, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 898, 906, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	879, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 889, 898, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 889,
	0, 0, 0, 897, 0, 0, 885, 886, 887, 0,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 0,
	900, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 885, 886, 887, 0,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900,
}
var sqlPact = [...]int{

	179, -1000, -97, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 844, 16530, -1000,
	-1000, -1000, -1000, -1000, -1000, 802, 783, 259, 4522, 16530,
	16530, 16274, 1025, 1025, 17810, -1000, -1000, 20882, -1000, 3682,
	528, 536, 528, 528, 534, 17810, 662, 695, 147, -1000,
	1012, 20, 20626, 16530, 1434, 48, 14994, 396, 179, 16018,
	20370, 16530, 15762, 367, 56, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1252, 1113, 1112, 14994, 20114, 19858, 19602,
	19346, -1000, 10220, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 776, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 401, 400, -1000, 15506, -1000,
	989, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 980, -1000, 16530, -1000, -1000, 19090, 18834, 399, 955,
	-1000, -1000, 622, 461, 1463, -1000, 66, -1000, -1000, -1000,
	1250, -1000, 972, 1248, 1247, 1246, 1238, 1229, 1225, 458,
	978, 520, -1000, 955, -1000, 955, -1000, -1000, -1000, 625,
	17810, -1000, 14994, -1000, 18578, 16530, 16530, 1145, 18322, -1000,
	1012, -1000, -1000, -1000, 1028, 1433, 1433, 1433, 1454, 168,
	167, 147, 36, 16530, -1000, 397, 36, 7141, 7141, -1000,
	-1000, 396, -1000, 416, 12894, -1000, 7705, -1000, 891, 1344,
	477, 758, 1343, -98, 853, 848, 1342, 701, 12109, 56,
	-1000, -1000, -1000, 9118, 4242, 14994, 16530, 16530, 740, 18066,
	-1000, 1341, 109, 1337, -1000, 108, 1334, -1000, 108, 1330,
	23, -1000, -1000, -1000, -1000, -1000, -1000, 396, 15250, 16530,
	1494, 3176, -1000, 9118, -1000, -1000, 13430, 1104, 13430, -1000,
	-1000, 1490, -1000, 9118, -1000, 46, 45, 1093, 1110, 10771,
	10502, 1397, 1990, -1000, -1000, -1000, 62, 4522, 16530, 1262,
	13430, 16530, 16530, 16530, 16530, 16530, 16530, -1000, 1091, -1000,
	16530, 16530, -1000, 44, 37, -1000, 17810, -1000, 112, -1000,
	394, 1063, 466, 170, 17554, 1351, 1062, -1000, 1028, -1000,
	991, 1088, 8272, 9118, 147, -1000, -1000, 147, 147, 9118,
	-1000, -1000, 16530, 36, 1489, 16530, 146, -1000, 23652, -1000,
	-1000, 9118, 9118, 9118, 9118, 9118, 913, -1000, -1000, -1000,
	5386, -1000, -1000, 56, 393, 326, -1000, -1000, 391, 56,
	-1000, -1000, -1000, -1000, 385, 1600, 462, -1000, -1000, -1000,
	9118, 448, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1261, 383, 382, -1000, -1000, -1000, -1000, 379, 378,
	375, 374, 373, 371, 366, 365, 357, 354, 353, 351,
	347, 346, 339, 882, -1000, 480, -1000, -1000, 480, 480,
	-1000, 325, 325, 336, -1000, -1000, -1000, -1000, 325, -1000,
	-1000, -1000, 450, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	337, 146, -1000, -1000, -1000, 16530, 22, -1000, 24466, -1000,
	2, 865, -1000, 14482, 1430, 1411, 1410, 14994, 1468, 1465,
	616, 16530, 16530, 609, 607, 14994, -1000, 1224, 18, -1000,
	-1000, 2721, -1000, -1000, 470, 94, 1488, 94, 12382, -1000,
	16530, 16530, -1000, 16530, -1000, -1000, 16530, -1000, 16530, 16530,
	-1000, 16530, 219, 13970, 910, 1329, 710, 20, 10, -1000,
	1497, -1000, -1000, -1000, -1000, 120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	336, 882, 325, 325, 325, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 450, -1000, -1000, 480, 480, 480, -1000, -1000,
	-1, 24466, 605, 24, 13700, 16530, -1000, 60, -1000, -1000,
	1221, 525, -5, 877, 1127, 824, -1000, -1000, -1000, -1000,
	30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1560, -1000, -1000, -1000, -1000, 1584, 30, -1000, -1000,
	-1000, -1000, -1000, 1597, -1000, -1000, -1000, 4522, -1000, -1000,
	-1000, 16530, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 877, 1127, -1000, -1000, 14994, 14226, 1485, 1326,
	898, -1000, 1483, 16530, 969, 1059, -1000, -1000, 434, 1325,
	-1000, -1000, -1000, -1000, 24466, -1000, 24466, 801, 1132, -1000,
	1132, 28, -1000, 23566, -1000, 320, -11, -1000, 470, 7141,
	11853, 3176, 3176, 16530, 655, 9118, 9118, 9118, 9118, 9118,
	9118, 9118, 9118, 9118, 9118, 9118, 9118, 9118, 9118, 9118,
	9118, 9118, 9118, 9118, 9118, 9118, 9118, 1109, 9118, 593,
	9118, 9118, 9118, 9118, 1108, 923, 283, 4522, -1000, 722,
	722, 722, 24659, 24659, 254, 41, 23050, 25, 56, -1000,
	-1000, 6856, 6554, 56, 4802, -1000, 749, 1577, 476, 24466,
	1268, 1168, 313, 161, 160, 9118, 9118, 9400, 9400, 9118,
	9682, 9118, 9118, 5668, 9118, 9118, 9118, 9118, 9118, 9118,
	-1000, 304, -1000, -1000, -1000, -1000, 1576, -1000, -1000, 1575,
	-1000, 641, 640, 1573, 470, 158, 7705, -1000, 910, 16530,
	16530, 16530, -1000, -1000, 1057, 17298, 1055, 3176, 16530, -1000,
	303, 301, 1111, 1106, 16530, 16530, 17042, 16786, 16530, 790,
	300, 287, 16530, 828, -1000, 16530, 16530, 794, 681, 1216,
	16530, -1000, 9118, 773, 9118, 834, -1000, 11581, 496, 16530,
	811, 132, -1000, -1000, -1000, 429, 16530, -1000, -1000, -1000,
	109, -1000, 108, 108, -1000, -1000, 14994, -1000, -1000, -1000,
	-1000, -1000, -1000, 3176, 405, 340, -1000, 1568, 581, -1000,
	567, 566, 562, -1000, 284, -1000, 9118, 16530, 13700, 24,
	21, -1000, -1000, 16530, 1127, -1000, -1000, -1000, -1000, 731,
	-1000, 874, -1000, 11040, -1000, -1000, -1000, 749, -1000, 1,
	-1000, -1000, -1000, -1000, 156, -15, 14, 3176, -1000, -1000,
	-1000, -1000, -1000, 16530, 307, 16530, 20, 16530, -1000, 1596,
	20, 16530, 1323, 1594, 16530, -1000, -1000, -1000, 9118, -1000,
	-1000, -1000, 20, 16530, -1000, 1165, -1000, -2, 1350, -111,
	440, -1000, 11309, -1000, -1000, -1000, 457, 951, 951, 460,
	460, 460, 460, 324, 324, 996, 2317, 3026, 3026, 3026,
	1660, 338, 338, 3026, 3026, 3026, 24659, 24569, 599, 9118,
	9118, 558, 892, 283, 599, 9118, 1546, 599, 599, 599,
	-1000, 1436, -1000, -1000, -1000, 1215, 282, 9682, 9682, -1000,
	-1000, -1000, 5386, -1000, -1000, 280, 9118, -1000, 9118, -16,
	-20, -1000, -1000, -32, -1000, -1000, 13, 9118, 9118, 9118,
	152, -1000, 151, 663, -1000, 9118, 934, 279, 274, 9118,
	-1000, -1000, 24275, 21734, 148, 1211, -91, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 144, 143, 24246, -91, 138, 2233,
	-1000, 9682, 9682, 9682, 5386, 273, 137, 23461, -91, 24055,
	7987, 7987, 7987, 136, 23950, 9118, -91, 21631, 21438, 21412,
	-33, -38, -39, 1562, -40, 133, 455, 451, 131, 1165,
	-1000, -1000, -1000, -1000, 551, 550, 1318, -1000, 1050, -1000,
	500, -1000, 812, 9118, 16530, 263, 261, 854, -1000, 1297,
	982, 1294, 982, -1000, 2, 742, 9118, 9118, -1000, 547,
	-1000, -1000, 546, -1000, 680, -1000, 23241, -1000, 7141, 24466,
	-1000, 785, 1413, -47, -1000, -1000, 7141, 470, 12382, 11853,
	7705, -49, -1000, -1000, -1000, 910, -1000, 445, 1558, 129,
	1073, 843, 806, 728, 1556, 24466, 1, -1000, 1, -1000,
	-1000, -1000, -1000, -1000, -1000, 16530, 1151, -1000, 14226, 257,
	16530, 241, -1000, 223, -1000, -1000, 221, 16530, -1000, 1351,
	-1000, 127, -1000, 1161, 1452, -1000, 11853, 1000, 1124, 1119,
	11853, 1293, 924, 924, 924, -1000, 440, 3951, 14738, 940,
	89, 126, 1350, 9118, 599, 599, 9118, 9682, 9682, -1000,
	599, -1000, -1000, -1000, -1000, 1203, 220, 9118, 3176, 24365,
	3064, -51, 6252, 0, 22945, -1000, -1000, 326, -1000, 125,
	7423, -1000, 23757, -12, -12, -1000, 1588, 1296, -1000, 9118,
	23860, -1000, 12638, 472, 942, 22859, 3176, 3176, -1000, 9118,
	-1000, -1000, 1201, 9118, -1000, 3176, 3176, 9682, 9682, 9682,
	9682, 9682, 9682, 9682, 9682, 9682, 9682, 9682, 9682, 9682,
	9682, 9682, 9682, 9682, 9682, 9682, 1089, 9682, 1523, 1523,
	1523, -10, 5950, -1000, 1257, 1201, 9118, 9118, 3176, 123,
	114, 110, -1000, 9118, -91, 9118, 9118, 9118, -1000, -1000,
	-1000, 107, -1000, 1531, -1000, -1000, -1000, -1000, 1161, 16530,
	16530, 16530, 1290, -1000, 2494, -1000, 22754, -53, 16530, 16530,
	-1000, 1137, 1133, 522, 16530, -1000, 16530, -1000, 16530, 16530,
	16530, -67, -69, 16530, 16530, -1000, -1000, -74, 7141, 235,
	20, -74, 773, -1000, -22, -1000, 427, -1000, 403, 249,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 105, -1000,
	-1000, 1153, -1000, 9964, 218, 16530, 14226, 1479, 9964, 965,
	-1000, -1000, 468, 9118, 9118, 1350, 673, 11853, 11853, 1065,
	1115, 11853, -1000, -1000, -1000, -1000, 14738, -1000, 1118, -1000,
	-1000, 16530, 215, -1000, 440, 602, 599, 2693, 2524, 9118,
	3176, 24691, -73, 9118, 9118, -1000, -77, -1000, 9118, -1000,
	-1000, 1548, 9118, 104, 103, 102, -1000, -1000, 24466, 9118,
	-1000, -1000, 21138, 9118, 101, -1000, 98, 96, 24466, 1257,
	24466, -1000, -1000, 571, 571, 1523, 1523, 1523, 1523, 302,
	302, 350, 743, 2636, 2636, 2636, 2206, 772, 772, 2636,
	2636, 2636, 1200, 1136, 213, 22117, 9118, -79, -1000, -1000,
	-1000, 24466, 24466, 95, -1000, -1000, -1000, -91, 2940, 22563,
	22534, -1000, 92, 468, -1000, -1000, -1000, 16530, -1000, 16530,
	-1000, 16530, 16530, 1209, 1037, -1000, -1000, 1101, 209, 9682,
	16530, -1000, 867, -81, -83, 1033, -1000, 1031, 9118, -1000,
	3176, 982, 982, -1000, 543, 542, -1000, -1000, -1000, -1000,
	-74, 1354, 16530, 1409, -1000, -1000, 208, -1000, -1000, -1000,
	909, -87, -1000, 248, 1422, 9118, -1000, -1000, 202, 9964,
	-89, 90, 20, -99, 16530, -1000, 16530, 24466, -91, 637,
	-1000, 1065, -1000, 201, 9118, 11853, -1000, -1000, -155, -1000,
	426, -1000, 197, 16530, 14738, 9118, 9118, 24691, -100, -1000,
	599, 599, -1000, 22343, -1000, 23757, -1000, -1000, -1000, 24466,
	903, -1000, 22238, -1000, -1000, -1000, -1000, 9682, 1186, 193,
	3176, 22152, -1000, -1000, 9118, -1000, -1000, -1000, -1000, -1000,
	1260, -1000, -1000, 16530, 1049, -1000, -1000, 9118, 22117, 191,
	1151, 190, -1000, -1000, -1000, 868, -1000, -1000, 24466, 1439,
	-1000, -1000, 16530, 16530, 636, -101, 16530, -1000, -1000, 5104,
	16530, 867, 9964, 1419, 56, 16530, 1419, 22047, 4802, -108,
	-1000, 1151, -1000, 867, 188, -78, -1000, 1478, 13174, -1000,
	16530, 24466, -1000, 1118, -1000, 4522, 16530, -109, -1000, 599,
	599, -1000, -1000, 88, 942, 1444, -1000, 2902, 9682, 3176,
	-113, -1000, 21856, -1000, -1000, 1278, 21824, 1076, 16530, -1000,
	16530, 16530, 503, 16530, -1000, -1000, 733, -1000, 470, -1000,
	185, 1151, -1000, -1000, -1000, -1000, 1422, 13, 867, -1000,
	1151, 9964, 16530, 184, -1000, 182, 56, -115, -1000, -1000,
	-117, -1000, -1000, 799, 9118, 2902, -119, -1000, -1000, 1271,
	-1000, 946, 988, 80, -121, 170, -1000, 9118, -1000, 12382,
	-1000, 16530, -1000, 1419, 78, 1151, -1000, -123, -1000, -1000,
	9118, -1000, -1000, 77, 8836, 8836, -91, -1000, 16530, -1000,
	960, 953, 691, -1000, -1000, -1000, -1000, -1000, 1076, 24466,
	-96, -125, -1000, -1000, -1000, 867, -12, -1000, -1000, -1000,
	3426, 975, 759, 23270, -1000, -1000, -1000, 1372, -1000, 509,
	1061, 1061, 946, -1000, 958, 1151, 75, 1501, -1000, -1000,
	-1000, -1000, -1000, -1000, 1510, -1000, -1000, 1102, -1000, -1000,
	-1000, -1000, -1000, -1000, 1548, 8554, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1846, 1844, 1482, 139, 1837, 137, 1835, 1834, 1833,
	1831, 1829, 1828, 104, 133, 130, 128, 127, 1827, 79,
	1826, 1825, 1823, 100, 1815, 1812, 1809, 97, 1807, 1805,
	124, 119, 1804, 1803, 96, 24, 174, 2241, 161, 1802,
	1801, 1795, 11, 92, 54, 1793, 57, 1792, 1784, 59,
	1783, 101, 120, 878, 30, 1782, 1781, 147, 17, 46,
	93, 91, 148, 144, 132, 1779, 1772, 1770, 47, 1768,
	4, 1765, 1762, 18, 53, 15, 1761, 31, 19, 1760,
	1757, 115, 1754, 69, 94, 108, 126, 113, 223, 1753,
	66, 12, 68, 1751, 14, 1750, 35, 83, 140, 1747,
	50, 152, 61, 34, 62, 95, 1745, 1743, 1742, 87,
	1733, 84, 77, 1732, 1729, 65, 1727, 123, 129, 1724,
	1720, 121, 1717, 1713, 1712, 172, 1708, 1699, 159, 1695,
	3, 37, 52, 10, 107, 102, 33, 1694, 20, 1692,
	1155, 1045, 762, 22, 60, 43, 78, 51, 58, 28,
	1690, 1689, 106, 1686, 1684, 1683, 1681, 1680, 76, 1679,
	55, 145, 23, 44, 49, 90, 25, 81, 82, 103,
	151, 111, 1678, 1677, 116, 1676, 105, 1675, 1674, 1401,
	112, 1673, 1672, 1666, 1394, 863, 580, 179, 1664, 1661,
	574, 262, 1657, 1655, 109, 1651, 1650, 141, 131, 21,
	1649, 117, 1648, 85, 1647, 0, 110, 36, 1646, 125,
	74, 1645, 1644, 1643, 1642, 32, 2, 9, 5, 7,
	6, 27, 26, 1640, 1639, 118, 98, 1638, 1637, 150,
	1636, 1635, 1634, 38, 1627, 13, 1626, 16, 1624, 1620,
	8, 1, 143, 1619, 88, 1617, 1505, 1616, 146, 1615,
	1606, 1506, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 175, 175, 174, 18, 150,
	150, 19, 19, 19, 19, 20, 110, 110, 21, 21,
	21, 21, 22, 26, 242, 242, 242, 246, 246, 247,
	247, 248, 248, 248, 248, 248, 248, 248, 244, 244,
	29, 29, 29, 29, 29, 129, 125, 125, 127, 127,
	127, 127, 52, 124, 124, 124, 124, 126, 126, 126,
	126, 198, 197, 197, 203, 203, 203, 65, 65, 65,
	65, 65, 66, 66, 66, 196, 196, 196, 196, 204,
	204, 204, 204, 204, 204, 67, 67, 67, 202, 202,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 17,
	243, 243, 245, 245, 31, 31, 9, 9, 10, 10,
	68, 68, 69, 69, 132, 132, 132, 132, 70, 70,
	47, 47, 47, 131, 213, 213, 214, 214, 214, 214,
	214, 214, 215, 215, 215, 215, 215, 215, 215, 211,
	211, 212, 209, 209, 210, 210, 210, 210, 249, 249,
	130, 130, 73, 73, 218, 218, 218, 218, 216, 216,
	216, 216, 216, 219, 217, 220, 220, 220, 220, 220,
	161, 161, 161, 33, 11, 50, 50, 12, 8, 8,
	114, 114, 77, 77, 166, 166, 166, 59, 59, 42,
	42, 42, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 115, 115, 116, 116, 24, 28, 32,
	32, 32, 32, 32, 251, 251, 56, 56, 56, 56,
	57, 57, 128, 128, 128, 128, 128, 51, 7, 7,
	49, 49, 23, 23, 23, 23, 23, 62, 62, 121,
	121, 121, 123, 123, 122, 122, 122, 100, 100, 34,
	82, 82, 91, 91, 92, 92, 172, 93, 93, 27,
	27, 37, 37, 35, 35, 35, 35, 35, 35, 36,
	36, 38, 38, 38, 38, 38, 38, 38, 226, 226,
	226, 229, 229, 225, 227, 227, 228, 228, 250, 250,
	101, 101, 101, 72, 71, 71, 75, 75, 74, 76,
	76, 165, 98, 98, 98, 98, 117, 118, 118, 119,
	119, 120, 120, 97, 97, 147, 147, 39, 39, 81,
	81, 83, 83, 138, 138, 139, 139, 137, 137, 137,
	167, 167, 167, 167, 164, 164, 168, 168, 168, 168,
	168, 168, 162, 162, 162, 162, 163, 163, 173, 173,
	104, 104, 104, 104, 102, 102, 103, 103, 169, 169,
	169, 169, 99, 99, 170, 170, 170, 133, 133, 176,
	176, 176, 80, 80, 80, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 178, 178,
	178, 178, 180, 180, 180, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 181,
	181, 188, 188, 189, 189, 190, 191, 182, 182, 183,
	183, 184, 185, 192, 192, 192, 192, 194, 194, 186,
	186, 186, 186, 186, 187, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 221, 221, 221, 221, 221, 221, 221, 223,
	223, 224, 224, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	230, 230, 231, 231, 233, 233, 234, 234, 235, 236,
	236, 236, 237, 238, 238, 232, 232, 239, 239, 239,
	240, 240, 241, 241, 241, 241, 241, 152, 152, 152,
	153, 153, 154, 88, 88, 149, 149, 148, 148, 148,
	151, 151, 105, 105, 193, 193, 193, 193, 193, 193,
	193, 106, 106, 106, 113, 107, 107, 108, 108, 108,
	108, 108, 108, 144, 145, 109, 109, 109, 146, 146,
	155, 159, 159, 158, 157, 157, 156, 156, 136, 136,
	136, 136, 135, 134, 94, 94, 252, 252, 160, 160,
	95, 95, 96, 90, 90, 171, 171, 171, 171, 84,
	84, 64, 64, 85, 85, 60, 60, 63, 63, 61,
	61, 61, 61, 78, 78, 79, 79, 58, 58, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	195, 195, 195, 53, 53, 53, 54, 54, 55, 55,
	200, 200, 200, 201, 201, 201, 201, 199, 199, 199,
	199, 199, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	4, 3, 1, 5, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -228, 92, 100, 122, 196,
	99, 85, 116, 210, 217, -35, -37, 225, -129, 226,
	34, 235, 58, 95, 212, 207, 256, 66, -226, -38,
	-36, 304, 279, 285, 220, -39, 243, 271, 307, 243,
	130, 78, 274, -60, -53, 4, -205, -207, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 151, 154, 157, 159, 160, 161, 162, 163, 165,
	166, 168, 170, 167, 173, 175, 176, 182, 185, 188,
	189, 190, 191, 194, 196, 198, 199, 200, 202, 203,
	207, 205, 206, 208, 210, 212, 213, 215, 217, 218,
	219, 222, 223, 225, 226, 228, 231, 234, 235, 236,
	239, 237, 233, 242, 244, 245, 252, 256, 257, 258,
	259, 262, 263, 264, 266, 268, 269, 270, 275, 280,
	281, 282, 283, 28, 35, 36, 37, 38, 40, 41,
	44, 45, 49, 50, 51, 53, 80, 82, 83, 98,
	101, 102, 108, 118, 120, 125, 126, 135, 136, 137,
	138, 140, 149, 172, 174, 183, 187, 193, 195, 201,
	214, 221, 229, 230, 238, 240, 247, 248, 249, 253,
	254, 271, 272, 87, 134, 264, 263, 78, 130, 243,
	274, -16, 304, -27, -6, -14, -4, -23, -34, -13,
	-30, -17, -31, -15, 23, -199, 4, -205, -207, -206,
	-208, 55, 67, 115, 133, 127, 142, 144, 150, 152,
	164, 184, 186, 211, 227, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 42, 47, 48, 52, 54, 56,
	62, 66, 70, 71, 72, 73, 74, 75, 84, 86,
	88, 89, 90, 93, 95, 97, 103, 104, 105, 111,
	113, 114, 116, 119, 121, 128, 130, 132, 139, 141,
	147, 148, 153, 155, 156, 169, 171, 177, 178, 179,
	180, 181, 192, 197, 204, 209, 220, 224, 232, 241,
	243, 246, 250, 251, 255, 260, 261, 265, 267, 273,
	274, 276, 277, 278, 279, -53, -53, -53, 196, 22,
	-246, 22, -247, -248, 66, 92, 116, 220, 134, 87,
	263, -246, -57, 217, -53, -125, 154, 223, 214, 252,
	-126, -124, -198, 247, 163, -86, -53, 4, 22, 78,
	57, 79, 117, 130, 131, 62, 63, 146, 244, 247,
	252, 66, 266, -251, 252, 252, -251, -251, -56, 252,
	250, -57, -250, 243, 243, 265, 274, -114, 78, 261,
	-36, -38, -37, -74, -75, 260, 139, 97, 181, -35,
	-37, -226, -229, 202, -225, -53, -229, -71, -72, 22,
	89, 308, -169, -60, 179, -96, 304, -3, -169, 125,
	-60, -63, 125, -60, -53, -169, 125, 114, 304, -94,
	-136, -135, -134, 302, 306, 114, 141, 141, -170, -169,
	-53, 125, -64, 125, -63, -87, 125, -86, -87, 125,
	-175, -174, -201, 4, -205, -207, -206, 271, 243, 130,
	-150, 304, -110, 304, -53, 22, 178, 308, 178, -53,
	-125, 51, -125, 304, -127, -51, -52, 143, 198, 250,
	289, 114, 283, -67, 5, 84, -89, 306, 114, -243,
	178, 114, 114, 114, 114, 114, 114, 283, 143, 198,
	243, 274, -128, -51, -52, -128, 250, -57, -99, -169,
	-86, 125, -53, -86, 130, -53, 125, -74, -75, -98,
	-117, -118, 153, 177, -101, 22, 89, -101, -101, 43,
	305, 305, 308, -229, -79, 304, -90, -171, -140, 297,
	-142, 295, 296, 301, 169, 284, -152, -60, -143, 9,
	304, -155, -223, -37, 98, 29, -153, -154, 214, -53,
	7, 8, 5, 6, -58, -178, -187, 255, 103, 171,
	47, -221, -222, 4, -205, -200, -179, -189, -183, -186,
	140, 55, 71, 74, 72, 75, 224, 265, 48, 28,
	101, 102, 187, 193, 240, 253, 254, 125, 172, 126,
	53, 118, 149, 91, 36, 38, 40, 41, 49, 50,
	80, 82, 83, 108, 135, 136, 137, 138, 174, 201,
	229, 238, 248, 249, 272, -206, -190, -191, -184, -185,
	-192, -90, -96, 297, -60, 304, -95, -160, -140, 84,
	-44, 205, -43, 21, 23, 92, 269, 98, 233, 233,
	205, 98, 309, 205, 205, 98, 236, 305, -84, -60,
	-136, -140, -199, 297, -170, -62, -60, -62, 225, -53,
	30, 98, -46, 308, 46, 208, 98, -46, 308, 98,
	-46, 98, 305, 308, -169, 125, -63, 30, -149, -176,
	-177, -179, -188, -182, -186, -187, 39, 45, 44, 245,
	221, 230, 37, 135, 136, 137, 138, 229, 36, 201,
	108, 91, 83, 82, 174, 41, 40, -190, -191, -184,
	-185, 80, 248, 249, 140, 38, 50, 49, 272, 238,
	-88, -140, -242, -85, 243, 78, -61, -53, 297, -248,
	-242, 30, -88, 308, 308, 151, -66, 157, 168, 123,
	-197, 84, -203, -196, -161, 9, 255, 103, 178, -202,
	8, 296, -195, -201, 5, 7, 295, -197, 84, 69,
	-204, 5, 4, -187, -161, 84, 154, 306, -199, -198,
	-245, 111, -242, -198, -198, -198, -198, -198, -53, 151,
	-198, -198, 308, 308, -57, -46, 308, 304, -73, 169,
	-227, 279, -73, 304, -54, 125, -53, -49, 94, 169,
	-98, -118, -117, -119, -140, 22, -140, -142, -36, -36,
	-36, -76, -165, -140, -225, 30, -78, -53, -81, 308,
	114, 10, 11, 54, 33, 295, 296, 297, 298, 109,
	299, 292, 293, 294, 291, 287, 288, 289, 60, 158,
	216, 13, 14, 15, 26, 180, 152, 284, 127, 227,
	301, 16, 17, 18, 142, 35, 128, 30, 4, -140,
	-140, -140, -140, -140, 186, -37, -140, -88, -94, -37,
	-148, 302, 304, -94, 304, 5, 5, 304, -156, -140,
	-230, 280, 111, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	195, -194, 275, -194, -194, -180, 304, -180, -181, 304,
	-180, 281, 285, 304, -81, -60, 308, 305, 308, 250,
	-115, 62, 56, -131, 125, 56, -209, -53, 62, -210,
	52, 261, 197, 113, -115, 62, -115, 62, 62, -169,
	33, 33, 250, -63, -53, 250, 250, -169, 114, 305,
	308, 303, 312, -133, 277, -121, -27, 304, 84, 30,
	-121, -91, -92, -172, -93, -60, 304, -53, -53, -63,
	-64, -86, -87, -87, -16, -174, 98, -19, -27, -23,
	-34, -13, 305, 308, -80, 29, -111, 304, 282, 161,
	81, 124, 160, -112, 219, 305, 308, 250, 308, -85,
	-78, -135, -134, 114, 252, 305, -52, -51, -65, 200,
	231, 206, 222, 308, 8, 7, 7, 5, -199, -244,
	-53, -52, -51, -169, -68, -78, -69, -53, -132, -131,
	-211, -212, -209, 130, 261, 104, 30, 98, -50, 191,
	30, 178, 169, 289, 98, -120, 214, 215, 308, -42,
	31, 88, 304, 308, 305, -133, -171, -83, -167, -169,
	-37, -168, 304, -176, -176, -86, 247, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, 152,
	127, 227, 35, 128, -140, 250, -140, -140, -140, -140,
	171, 169, 255, 103, 262, 89, 175, -252, 241, 32,
	-146, -37, 304, -199, -152, 214, 304, 305, 308, -88,
	-151, 303, -148, -88, 305, 305, -88, 273, 22, 89,
	297, -111, 7, -159, -158, 276, -231, 106, 119, 304,
	305, 305, -140, -140, -105, -193, -88, 4, 282, 161,
	81, 124, 160, 219, -105, -106, -140, -88, -107, -141,
	-142, 295, 296, 301, 304, 214, -108, -140, -88, -140,
	42, 148, 251, -109, -140, 114, -88, -140, -140, -140,
	-88, -88, -88, 304, 7, 7, 247, 247, 7, -133,
	305, -160, -43, -60, -53, -53, 169, -131, 125, -48,
	169, -176, -53, 304, 304, 145, 145, -53, -53, 125,
	-53, 125, -53, -53, -44, 205, 304, 304, -53, 205,
	-53, -60, 205, 236, 114, -60, -140, -100, 209, -140,
	-100, -123, 178, -84, 271, -53, 209, -82, 308, 114,
	289, -84, -46, -46, -46, -169, -176, 302, 302, 7,
	250, 250, 250, 250, 304, -140, -244, -61, -244, -51,
	259, 59, 200, -203, -111, 308, 305, 305, 308, -54,
	130, -54, -27, -86, 5, -27, -60, 98, 5, -53,
	-165, -19, -53, -97, 119, -173, 308, 286, 67, -104,
	144, 164, 115, 150, 211, 133, -137, 309, -164, 285,
	-37, -168, -167, 283, -140, -140, 250, -252, 241, -146,
	-140, 171, 255, 103, 262, 89, 175, 114, 304, -141,
	-141, -88, 304, -88, -140, 303, 303, 308, 305, -75,
	308, -74, -140, -88, -88, 305, 305, -157, -158, 93,
	-140, -236, 185, 304, 304, -140, 30, 308, 305, 114,
	305, 305, -113, 192, 305, 10, 11, 295, 296, 297,
	298, 109, 299, 292, 293, 294, 291, 287, 288, 289,
	60, 158, 216, 13, 14, 15, 142, 128, -141, -141,
	-141, -88, 304, 305, -144, -145, 114, 111, 30, -109,
	-109, -109, 305, 114, -88, 308, 308, 308, 305, 305,
	305, 7, 305, 308, 305, 283, 283, 305, -97, 250,
	250, 98, 169, 268, -213, -210, -140, -78, 304, 304,
	-41, 92, 225, -116, 98, -46, 98, -46, 250, -115,
	62, -88, -88, 250, 250, 236, 303, -90, 209, 61,
	305, -90, -133, -92, -83, -160, 305, 303, 7, 7,
	305, 161, 124, 160, -112, 160, -112, -112, 7, -53,
	-70, 129, -132, 304, -54, 304, 304, -73, 304, -53,
	-49, 305, -147, 121, 43, -167, 175, 144, 144, -167,
	-104, 144, -102, 184, -102, -102, -164, -199, 310, -163,
	-162, 30, -53, 182, 305, -140, -140, -141, -141, 114,
	304, -140, -149, 26, 26, 305, -88, 305, 308, 305,
	-148, 305, 273, -75, -75, -75, 5, 95, -140, 246,
	-237, -53, 304, 277, -74, 305, -176, -176, -140, -144,
	-140, -176, -176, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, 89, 169, 175, -141, 308, -88, 305, -145,
	-144, -140, -140, -176, 305, 305, 305, -88, -140, -140,
	-140, 305, 7, -147, -53, -53, -131, 98, -214, 62,
	-215, 54, 104, 66, 169, 171, 261, 197, 52, 84,
	204, 305, 305, -78, -78, 169, 84, 169, 84, 77,
	257, -53, -53, -60, -53, -53, 305, 305, -53, -60,
	-90, -122, 304, 178, -27, -100, 289, 303, 303, 305,
	128, -77, -166, -53, -224, 304, -221, -222, -58, 304,
	-78, -68, 30, -77, 178, -233, 278, -140, -88, 242,
	-167, -167, -103, 267, 178, 144, -167, -163, -139, -138,
	112, 167, -53, 304, -164, 26, 26, -140, -149, 305,
	-140, -140, 305, -140, 5, -140, 305, 305, 305, -140,
	-238, -53, -140, 305, 305, 305, -145, 114, 89, 175,
	304, -140, 305, 305, 308, 305, 305, 305, -233, -131,
	-53, -86, -53, 104, 125, 171, 145, 304, -141, -60,
	-130, -249, 65, 239, 305, 305, 171, 171, -140, -176,
	-46, -46, 250, 250, 90, -78, 62, -96, -37, 304,
	188, 305, 308, -59, -94, 54, -59, -140, 304, -77,
	305, 305, -27, 305, -60, -234, -235, -53, 247, -103,
	304, -140, -167, 308, 311, 289, 304, -78, -162, -140,
	-140, 305, 305, -75, -232, 190, 305, -141, 114, 304,
	-149, 305, -140, -215, -54, 169, -140, -55, 304, -70,
	304, 204, -45, 54, -53, -53, 263, 170, 305, -53,
	-53, -130, -166, -42, -86, -42, 305, -88, 305, -70,
	-130, 304, 308, 30, -143, -58, -53, -78, -138, -199,
	-78, 305, 305, -75, 43, -141, -149, 305, 305, 98,
	305, -218, 159, -53, -78, -60, -40, 267, -86, 225,
	-133, 304, -70, -59, -75, -130, -70, -77, -235, -237,
	304, 305, 305, -239, 199, 215, -88, 305, 104, -216,
	-219, -217, 178, 115, 189, 228, 305, 305, -73, -140,
	-91, -78, -42, 305, -70, 305, -88, 305, -240, -241,
	35, 258, 69, -140, -240, -53, -217, 178, -219, 178,
	263, 87, -218, -133, 305, -130, -75, -241, 194, 110,
	214, 194, 110, -220, 166, 208, 46, 225, -220, -216,
	-47, 46, 208, -70, 305, 26, 20, 171, 84, -241,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 387, 0, 0,
	0, 0, 0, 0, 0, 359, -2, 0, 134, 0,
	315, 0, 315, 315, 319, 0, 389, 281, 386, -2,
	397, 0, 0, 0, 395, 373, 0, 0, -2, 0,
	0, 0, 0, 0, 795, 823, 824, 825, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 0, 199, 837, 838, 839, 840,
	841, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 100, 107, 108, 908, 110,
	0, 117, 118, 119, 121, 122, 123, 124, 125, 126,
	127, 0, 308, 922, 321, 130, 886, 926, 994, 940,
	137, 147, 0, 1000, -2, 151, 78, 180, 181, 182,
	0, 184, 201, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 198, 326, 314, 326, 311, 312, 313, 316,
	0, 307, 0, 388, 0, 0, 0, 0, 0, 280,
	-2, 369, 370, -2, 0, 392, 392, 392, 0, 0,
	370, 0, 378, 912, 381, 806, 379, 0, 0, 394,
	393, 0, 374, 458, 0, 417, 0, 2, 0, 979,
	458, 0, 979, 798, 0, 0, 979, 0, 0, 796,
	774, 768, 769, 0, 0, 0, 0, 0, 0, 464,
	68, 979, 51, 979, 791, 51, 979, 76, 51, 979,
	0, 95, 97, 833, 834, 835, 836, 1005, 0, 0,
	0, 0, 105, 0, 109, 111, 0, 0, 0, 320,
	131, 968, 133, 0, 136, 138, 139, 0, 0, 0,
	0, 0, 0, 150, 175, 176, 79, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 195,
	0, 0, 309, 322, 323, 310, 0, 318, 51, 462,
	253, 979, 385, 253, 827, 331, 979, -2, 0, 365,
	404, 405, 0, 0, 0, 390, 391, 0, 0, 0,
	361, 362, 0, 380, 0, 0, 420, 783, 787, 788,
	551, 0, 0, 0, 0, 0, 0, 640, 641, 642,
	0, 644, 645, 646, 973, 0, 650, 651, 994, 795,
	809, 810, 811, 812, 0, 0, 0, 817, 818, 819,
	767, 691, 660, -2, -2, 807, 488, 489, 490, 491,
	-2, 1007, 664, 666, 668, 669, 670, 671, 0, 957,
	974, 975, 990, 991, 999, 1003, 1004, 979, 987, 980,
	969, 977, 986, 866, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 832, 513, 514, 519, 520,
	522, 420, 418, 459, 460, 0, 0, 780, 778, 779,
	28, 304, 30, 0, 304, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 789,
	775, 0, 772, 773, 468, 0, 337, 0, 0, 465,
	0, 0, 70, 0, 49, 50, 0, 72, 0, 0,
	74, 0, 387, 0, 0, 979, 0, 387, 0, 725,
	474, 475, 476, 477, 478, 548, 481, 482, 483, 484,
	485, 486, 487, 495, 496, 497, 498, 499, 500, 501,
	510, 0, 494, 494, 494, 507, 508, 511, 512, 517,
	518, 529, 530, 532, 534, 528, 528, 528, 525, 526,
	0, 723, 0, 114, 0, 861, 793, 799, 800, 120,
	0, 0, 0, 0, 0, 0, 142, 162, 163, 164,
	143, 145, 152, 154, 155, 156, 165, 166, 167, 168,
	270, 0, 272, 178, 179, 820, 0, 144, 146, 148,
	149, 169, 170, 0, 172, 173, 174, 0, 80, 183,
	185, 0, 200, 186, 187, 188, 189, 190, 191, 194,
	196, 197, 0, 0, 317, 273, 0, 211, 0, 0,
	276, 384, 0, 0, 0, 979, 826, 328, 0, 0,
	368, 402, 403, 406, 409, 410, 407, 551, 375, 376,
	377, 398, 399, 291, 382, 0, 0, 803, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 777, 0, 0, 786, 556,
	557, 558, 580, 581, 0, -2, 723, 0, 647, 648,
	649, 0, 0, -2, 0, 814, 548, 0, 0, 766,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	503, 516, 527, 524, 523, 505, 0, 504, 502, 0,
	506, 0, 0, 0, 468, 0, 0, 782, 0, 0,
	0, 0, 303, 32, 979, 0, 53, 0, 0, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 770, 0, 348, 0, 348, 339, 0, 0, 0,
	335, 351, 352, 354, 355, 0, 0, 466, 69, 792,
	51, 77, 51, 51, 83, 96, 0, 98, 101, 102,
	103, 104, 99, 0, 469, 471, 479, 0, 535, 536,
	537, 538, 539, 540, 549, 106, 0, 0, 0, 115,
	116, 801, 802, 0, 0, 135, 140, 141, 327, 0,
	159, 0, 161, 0, 271, 822, 821, 548, 81, 202,
	128, 324, 325, 463, 0, 0, 210, 803, 212, 214,
	215, 216, 217, 827, 0, 827, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 408, 411, 412, 0, 401,
	289, 290, 387, 0, 805, 414, 784, 449, 421, 429,
	435, 432, 0, 552, 553, 554, 0, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, -2, -2, -2,
	572, 573, 574, -2, -2, -2, 578, 579, -2, 0,
	0, 0, 777, 0, -2, 0, 588, -2, -2, -2,
	592, 0, 595, 597, 599, 0, 0, 0, 0, 776,
	609, 758, 0, 785, 594, 0, 0, 643, 0, 0,
	0, 729, 730, 0, -2, 652, 397, 0, 0, 0,
	0, 815, 0, 765, 761, 0, 701, 0, 0, 0,
	665, 667, 0, 0, 0, 0, 733, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 723, 743, 0, 0,
	611, 0, 0, 0, 0, 994, 0, 723, 751, 0,
	0, 0, 0, 0, 723, 0, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	461, 781, 31, 293, 0, 0, 0, 34, 979, 42,
	0, 225, 0, 0, 0, 0, 0, 306, 43, 979,
	51, 979, 51, 44, 29, 304, 0, 0, 297, 0,
	292, 295, 0, 59, 0, 790, 0, 67, 0, 467,
	332, 333, 0, 0, 341, 338, 0, 468, 0, 0,
	0, 0, 71, 73, 75, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 112, 794, 113, 132,
	157, 158, 160, 153, 171, 0, 219, 252, 0, 0,
	827, 0, 208, 253, 275, 277, 0, 0, 330, 331,
	400, 0, 804, 416, 0, 419, 0, 0, 0, 0,
	0, 0, 455, 455, 455, 453, 435, 0, 447, 0,
	-2, 432, 0, 0, -2, -2, 0, 0, 0, 610,
	-2, 593, 596, 598, 600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 727, 728, 0, -2, 0,
	0, 396, 397, 397, 397, 658, 0, 0, 762, 0,
	0, 659, 0, 0, 0, 0, 0, 0, 674, 0,
	675, 676, 0, 0, 677, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 615,
	616, 0, 0, 678, 749, 750, 0, 0, 0, 0,
	0, 0, 683, 0, 756, 0, 0, 0, 687, 688,
	689, 0, 492, 0, 509, 531, 533, 521, 416, 0,
	0, 0, 0, 52, 223, 242, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 40, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 60, 771, 347, 0, 346,
	0, 336, 348, 353, 350, 356, 0, 472, 0, 0,
	480, 541, 542, 543, 544, 545, 546, 547, 0, 129,
	206, 0, 213, 0, 0, 0, 211, 0, 0, 0,
	329, 383, 695, 0, 0, 422, 0, 0, 0, 0,
	0, 0, 450, 454, 451, 452, 447, 427, 0, 431,
	446, 0, 445, 434, -2, 555, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 759, 0, 718, 0, -2,
	731, 653, 0, 0, 0, 0, 816, 760, 764, 0,
	699, 700, 704, 0, 0, 663, 0, 0, 732, 742,
	744, 612, 613, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, -2, -2, -2, 630, 631, 632, -2,
	-2, -2, 0, 0, 0, 745, 0, 0, 721, 747,
	748, 753, 754, 0, 680, 681, 682, 755, 0, 0,
	0, 515, 0, 695, 299, 301, 33, 0, 224, 0,
	227, 0, 0, 0, 0, 233, 234, 0, 0, 0,
	0, 244, 251, 0, 0, 0, 48, 0, 0, 305,
	0, 51, 51, 294, 0, 0, 204, 205, 298, 296,
	334, 0, 0, 0, 340, 349, 0, 473, 470, 550,
	0, 0, 282, 288, 288, 0, 661, 662, 0, 0,
	0, 0, 0, 0, 0, 371, 0, 415, 413, 0,
	437, 0, 439, 0, 0, 0, 441, 430, 0, 425,
	0, 424, 443, 0, 0, 0, 0, -2, 0, 603,
	-2, -2, 717, 724, 813, 397, 654, 656, 657, 763,
	706, 703, 0, 690, 672, 673, 741, 0, 0, 0,
	0, 724, 720, 679, 0, 685, 686, 493, 372, 35,
	0, 228, 229, 827, 0, 232, 235, 0, 237, 829,
	219, 0, 248, 249, 246, 0, 37, 38, 47, 55,
	39, 45, 0, 0, 0, 0, 0, 357, 358, 0,
	0, 251, 0, 291, 808, 0, 291, 0, 0, 0,
	241, 219, 209, 251, 0, 694, 696, 0, 0, 438,
	0, 457, 440, 0, 428, 0, 0, 0, 433, -2,
	-2, 604, 719, 0, 397, 0, 692, -2, 0, 0,
	0, 722, 0, 226, 230, 0, 0, 257, 0, 245,
	0, 0, 57, 0, 300, 302, 0, 343, 468, 345,
	0, 219, 283, 284, 287, 285, 288, 397, 251, 207,
	219, 0, 0, 0, 448, 0, 0, 0, 426, 423,
	0, 444, 655, 709, 0, -2, 0, 638, 684, 0,
	236, 262, 0, 0, 0, 253, 41, 0, 54, 0,
	344, 0, 239, 291, 0, 219, 278, 0, 697, 698,
	0, 456, 442, 0, 0, 0, 705, 639, 0, 238,
	258, 259, 0, 254, 255, 256, 828, 250, 257, 56,
	468, 0, 286, 653, 240, 251, 397, 702, 707, 710,
	-2, 943, 858, 0, 708, 231, 260, 0, 261, 0,
	0, 0, 262, 342, 222, 219, 0, 0, 712, 713,
	714, 715, 716, 263, 0, 266, 267, 0, 264, 247,
	218, 220, 221, 279, 0, 0, 265, 268, 269, 711,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 293, 3, 299, 294, 3,
	304, 305, 297, 295, 308, 296, 306, 298, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 312, 307,
	287, 289, 288, 3, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 302, 3, 303, 292, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 310, 291, 311, 301,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 290,
	57630, 300, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:724
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:730
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:845
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1430
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = DropDefault
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return unimplemented(sqllex)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = true
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = false
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1974
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1978
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = Ascending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = Descending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2032
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2033
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2047
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2090
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.str = ""
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.str = ""
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2191
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2263
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			return unimplemented(sqllex)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			return unimplemented(sqllex)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			return unimplemented(sqllex)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			return unimplemented(sqllex)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2499
		{
			return unimplemented(sqllex)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2503
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2511
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = true
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = false
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = false
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = true
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2535
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &From{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[4].union.aliasClause(), Ordinality: sqlDollar[3].union.bool()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[3].union.aliasClause(), Ordinality: sqlDollar[2].union.bool()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[5].union.aliasClause(), Ordinality: sqlDollar[4].union.bool()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = true
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = false
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.str = astFullJoin
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.str = astLeftJoin
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.str = astRightJoin
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.str = astInnerJoin
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2890
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2980
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2981
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2985
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2994
		{
			return unimplemented(sqllex)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3050
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = nil
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3171
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			return unimplemented(sqllex)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3291
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3323
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			return unimplemented(sqllex)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3734
		{
			return unimplemented(sqllex)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3735
		{
			return unimplemented(sqllex)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3758
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			return unimplemented(sqllex)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3778
		{
			return unimplemented(sqllex)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			return unimplemented(sqllex)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			return unimplemented(sqllex)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			return unimplemented(sqllex)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3827
		{
			return unimplemented(sqllex)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3871
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3872
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3875
		{
			return unimplemented(sqllex)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3876
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = Window(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.str = ""
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3965
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3968
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3969
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4316
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4476
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4512
		{
			return unimplemented(sqllex)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = DNull
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.str = ""
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
