// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:47

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:495
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ACTION = lex.ACTION
const ADD = lex.ADD
const ALL = lex.ALL
const ALL_EXISTENCE = lex.ALL_EXISTENCE
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HELP = lex.HELP
const HIGH = lex.HIGH
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SOME_EXISTENCE = lex.SOME_EXISTENCE
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6979

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 734,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 583,
	-2, 0,
	-1, 54,
	97, 734,
	156, 734,
	331, 734,
	332, 734,
	-2, 0,
	-1, 64,
	1, 696,
	215, 696,
	261, 696,
	376, 696,
	378, 696,
	380, 696,
	381, 696,
	-2, 709,
	-1, 97,
	4, 736,
	20, 736,
	21, 736,
	24, 736,
	29, 736,
	34, 736,
	35, 736,
	36, 736,
	37, 736,
	38, 736,
	39, 736,
	40, 736,
	41, 736,
	42, 736,
	43, 736,
	45, 736,
	46, 736,
	47, 736,
	48, 736,
	49, 736,
	52, 736,
	53, 736,
	54, 736,
	56, 736,
	57, 736,
	61, 736,
	62, 736,
	63, 736,
	65, 736,
	66, 736,
	67, 736,
	68, 736,
	70, 736,
	72, 736,
	73, 736,
	76, 736,
	77, 736,
	78, 736,
	86, 736,
	87, 736,
	88, 736,
	89, 736,
	90, 736,
	91, 736,
	92, 736,
	93, 736,
	95, 736,
	97, 736,
	99, 736,
	102, 736,
	103, 736,
	105, 736,
	109, 736,
	110, 736,
	111, 736,
	112, 736,
	113, 736,
	114, 736,
	115, 736,
	123, 736,
	124, 736,
	125, 736,
	126, 736,
	127, 736,
	129, 736,
	131, 736,
	136, 736,
	137, 736,
	139, 736,
	142, 736,
	143, 736,
	144, 736,
	145, 736,
	146, 736,
	147, 736,
	150, 736,
	151, 736,
	153, 736,
	156, 736,
	157, 736,
	158, 736,
	159, 736,
	160, 736,
	161, 736,
	162, 736,
	163, 736,
	165, 736,
	168, 736,
	169, 736,
	170, 736,
	172, 736,
	173, 736,
	174, 736,
	175, 736,
	176, 736,
	178, 736,
	179, 736,
	181, 736,
	183, 736,
	184, 736,
	187, 736,
	188, 736,
	191, 736,
	193, 736,
	195, 736,
	196, 736,
	197, 736,
	198, 736,
	199, 736,
	201, 736,
	202, 736,
	203, 736,
	204, 736,
	208, 736,
	209, 736,
	210, 736,
	211, 736,
	212, 736,
	214, 736,
	216, 736,
	217, 736,
	220, 736,
	221, 736,
	223, 736,
	225, 736,
	226, 736,
	227, 736,
	228, 736,
	229, 736,
	230, 736,
	231, 736,
	233, 736,
	234, 736,
	235, 736,
	236, 736,
	237, 736,
	239, 736,
	240, 736,
	241, 736,
	242, 736,
	243, 736,
	244, 736,
	245, 736,
	246, 736,
	248, 736,
	249, 736,
	250, 736,
	251, 736,
	252, 736,
	254, 736,
	255, 736,
	256, 736,
	257, 736,
	258, 736,
	259, 736,
	260, 736,
	262, 736,
	264, 736,
	265, 736,
	266, 736,
	267, 736,
	269, 736,
	270, 736,
	271, 736,
	272, 736,
	273, 736,
	275, 736,
	276, 736,
	277, 736,
	278, 736,
	279, 736,
	281, 736,
	282, 736,
	283, 736,
	284, 736,
	286, 736,
	287, 736,
	288, 736,
	289, 736,
	292, 736,
	293, 736,
	294, 736,
	295, 736,
	296, 736,
	297, 736,
	298, 736,
	299, 736,
	300, 736,
	301, 736,
	303, 736,
	305, 736,
	306, 736,
	307, 736,
	308, 736,
	309, 736,
	310, 736,
	311, 736,
	312, 736,
	314, 736,
	315, 736,
	316, 736,
	319, 736,
	320, 736,
	321, 736,
	322, 736,
	324, 736,
	325, 736,
	326, 736,
	327, 736,
	330, 736,
	331, 736,
	332, 736,
	333, 736,
	335, 736,
	337, 736,
	338, 736,
	339, 736,
	340, 736,
	341, 736,
	342, 736,
	345, 736,
	350, 736,
	351, 736,
	352, 736,
	353, 736,
	354, 736,
	-2, 0,
	-1, 115,
	1, 699,
	215, 699,
	261, 699,
	376, 699,
	378, 699,
	380, 699,
	381, 699,
	-2, 708,
	-1, 120,
	1, 634,
	168, 634,
	239, 634,
	243, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 122,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 123,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 124,
	1, 638,
	380, 638,
	381, 638,
	-2, 0,
	-1, 146,
	4, 742,
	5, 742,
	6, 742,
	7, 742,
	8, 742,
	9, 742,
	20, 742,
	21, 742,
	24, 742,
	29, 742,
	30, 742,
	34, 742,
	35, 742,
	36, 742,
	37, 742,
	38, 742,
	39, 742,
	40, 742,
	41, 742,
	42, 742,
	43, 742,
	45, 742,
	46, 742,
	47, 742,
	48, 742,
	49, 742,
	50, 742,
	51, 742,
	52, 742,
	53, 742,
	54, 742,
	56, 742,
	57, 742,
	59, 742,
	61, 742,
	62, 742,
	63, 742,
	65, 742,
	66, 742,
	67, 742,
	68, 742,
	70, 742,
	72, 742,
	73, 742,
	75, 742,
	76, 742,
	77, 742,
	78, 742,
	80, 742,
	81, 742,
	82, 742,
	84, 742,
	85, 742,
	86, 742,
	87, 742,
	88, 742,
	89, 742,
	90, 742,
	91, 742,
	92, 742,
	93, 742,
	94, 742,
	95, 742,
	97, 742,
	99, 742,
	102, 742,
	103, 742,
	105, 742,
	109, 742,
	110, 742,
	111, 742,
	112, 742,
	113, 742,
	114, 742,
	115, 742,
	116, 742,
	117, 742,
	123, 742,
	124, 742,
	125, 742,
	126, 742,
	127, 742,
	129, 742,
	131, 742,
	134, 742,
	136, 742,
	137, 742,
	139, 742,
	142, 742,
	143, 742,
	144, 742,
	145, 742,
	146, 742,
	147, 742,
	148, 742,
	150, 742,
	151, 742,
	153, 742,
	155, 742,
	156, 742,
	157, 742,
	158, 742,
	159, 742,
	160, 742,
	161, 742,
	162, 742,
	163, 742,
	165, 742,
	167, 742,
	168, 742,
	169, 742,
	170, 742,
	171, 742,
	172, 742,
	173, 742,
	174, 742,
	175, 742,
	176, 742,
	178, 742,
	179, 742,
	181, 742,
	182, 742,
	183, 742,
	184, 742,
	185, 742,
	187, 742,
	188, 742,
	191, 742,
	193, 742,
	194, 742,
	195, 742,
	196, 742,
	197, 742,
	198, 742,
	199, 742,
	200, 742,
	201, 742,
	202, 742,
	203, 742,
	204, 742,
	205, 742,
	207, 742,
	208, 742,
	209, 742,
	210, 742,
	211, 742,
	212, 742,
	214, 742,
	217, 742,
	220, 742,
	221, 742,
	222, 742,
	223, 742,
	224, 742,
	225, 742,
	226, 742,
	227, 742,
	228, 742,
	229, 742,
	230, 742,
	231, 742,
	233, 742,
	234, 742,
	235, 742,
	236, 742,
	237, 742,
	239, 742,
	240, 742,
	241, 742,
	242, 742,
	243, 742,
	244, 742,
	245, 742,
	246, 742,
	248, 742,
	249, 742,
	250, 742,
	251, 742,
	252, 742,
	254, 742,
	255, 742,
	256, 742,
	257, 742,
	258, 742,
	259, 742,
	260, 742,
	262, 742,
	263, 742,
	264, 742,
	265, 742,
	266, 742,
	267, 742,
	269, 742,
	270, 742,
	271, 742,
	272, 742,
	273, 742,
	275, 742,
	276, 742,
	277, 742,
	278, 742,
	279, 742,
	280, 742,
	281, 742,
	282, 742,
	283, 742,
	284, 742,
	285, 742,
	286, 742,
	287, 742,
	288, 742,
	289, 742,
	292, 742,
	293, 742,
	294, 742,
	295, 742,
	296, 742,
	297, 742,
	298, 742,
	299, 742,
	300, 742,
	301, 742,
	303, 742,
	305, 742,
	306, 742,
	307, 742,
	308, 742,
	309, 742,
	310, 742,
	311, 742,
	312, 742,
	314, 742,
	315, 742,
	316, 742,
	319, 742,
	320, 742,
	321, 742,
	322, 742,
	323, 742,
	324, 742,
	325, 742,
	326, 742,
	327, 742,
	330, 742,
	331, 742,
	332, 742,
	333, 742,
	334, 742,
	335, 742,
	337, 742,
	338, 742,
	339, 742,
	340, 742,
	341, 742,
	342, 742,
	345, 742,
	350, 742,
	351, 742,
	352, 742,
	353, 742,
	354, 742,
	355, 742,
	363, 742,
	368, 742,
	369, 742,
	370, 742,
	377, 742,
	383, 742,
	-2, 0,
	-1, 149,
	1, 54,
	381, 54,
	-2, 734,
	-1, 517,
	133, 1354,
	317, 1354,
	360, 1354,
	379, 1354,
	-2, 0,
	-1, 518,
	133, 1301,
	317, 1301,
	360, 1301,
	379, 1301,
	-2, 0,
	-1, 520,
	133, 1414,
	317, 1414,
	360, 1414,
	379, 1414,
	-2, 0,
	-1, 522,
	133, 1437,
	317, 1437,
	360, 1437,
	379, 1437,
	-2, 0,
	-1, 529,
	133, 1359,
	317, 1359,
	360, 1359,
	379, 1359,
	-2, 348,
	-1, 555,
	1, 426,
	376, 426,
	378, 426,
	380, 426,
	381, 426,
	-2, 0,
	-1, 556,
	1, 479,
	130, 479,
	376, 479,
	378, 479,
	380, 479,
	381, 479,
	-2, 0,
	-1, 562,
	1, 440,
	376, 440,
	378, 440,
	380, 440,
	381, 440,
	-2, 0,
	-1, 564,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 567,
	1, 452,
	376, 452,
	378, 452,
	380, 452,
	381, 452,
	-2, 0,
	-1, 568,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 571,
	1, 467,
	376, 467,
	378, 467,
	380, 467,
	381, 467,
	-2, 0,
	-1, 596,
	118, 744,
	130, 744,
	186, 744,
	213, 744,
	-2, 703,
	-1, 603,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 700,
	-1, 659,
	377, 1279,
	-2, 1272,
	-1, 660,
	377, 1280,
	-2, 1273,
	-1, 666,
	5, 930,
	377, 930,
	-2, 1489,
	-1, 691,
	5, 887,
	-2, 1458,
	-1, 692,
	5, 922,
	377, 922,
	-2, 1460,
	-1, 693,
	5, 897,
	-2, 1461,
	-1, 694,
	5, 896,
	-2, 1462,
	-1, 695,
	5, 922,
	377, 922,
	-2, 1465,
	-1, 696,
	5, 922,
	377, 922,
	-2, 1466,
	-1, 697,
	5, 923,
	-2, 1469,
	-1, 698,
	5, 879,
	-2, 1470,
	-1, 699,
	5, 879,
	-2, 1471,
	-1, 700,
	5, 904,
	-2, 1475,
	-1, 701,
	5, 889,
	-2, 1476,
	-1, 702,
	5, 890,
	-2, 1477,
	-1, 703,
	5, 880,
	-2, 1483,
	-1, 704,
	5, 881,
	-2, 1484,
	-1, 705,
	5, 882,
	-2, 1485,
	-1, 706,
	5, 883,
	-2, 1486,
	-1, 707,
	5, 884,
	-2, 1487,
	-1, 708,
	5, 885,
	-2, 1488,
	-1, 709,
	5, 879,
	-2, 1495,
	-1, 710,
	5, 888,
	-2, 1500,
	-1, 711,
	5, 886,
	-2, 1503,
	-1, 712,
	5, 920,
	377, 920,
	-2, 1505,
	-1, 713,
	5, 924,
	-2, 1507,
	-1, 714,
	5, 926,
	-2, 1508,
	-1, 715,
	5, 928,
	-2, 1509,
	-1, 716,
	5, 919,
	377, 919,
	-2, 1514,
	-1, 780,
	112, 503,
	-2, 833,
	-1, 911,
	229, 732,
	-2, 576,
	-1, 916,
	215, 1276,
	-2, 0,
	-1, 952,
	1, 225,
	376, 225,
	378, 225,
	380, 225,
	381, 225,
	-2, 707,
	-1, 955,
	4, 1513,
	10, 1513,
	11, 1513,
	13, 1513,
	14, 1513,
	15, 1513,
	16, 1513,
	17, 1513,
	18, 1513,
	20, 1513,
	21, 1513,
	23, 1513,
	24, 1513,
	27, 1513,
	29, 1513,
	31, 1513,
	34, 1513,
	35, 1513,
	36, 1513,
	37, 1513,
	38, 1513,
	39, 1513,
	40, 1513,
	41, 1513,
	42, 1513,
	43, 1513,
	45, 1513,
	46, 1513,
	47, 1513,
	48, 1513,
	49, 1513,
	52, 1513,
	53, 1513,
	54, 1513,
	56, 1513,
	57, 1513,
	58, 1513,
	61, 1513,
	62, 1513,
	63, 1513,
	64, 1513,
	65, 1513,
	66, 1513,
	67, 1513,
	68, 1513,
	70, 1513,
	71, 1513,
	72, 1513,
	73, 1513,
	75, 1513,
	76, 1513,
	77, 1513,
	78, 1513,
	86, 1513,
	87, 1513,
	88, 1513,
	89, 1513,
	90, 1513,
	91, 1513,
	92, 1513,
	93, 1513,
	95, 1513,
	97, 1513,
	99, 1513,
	102, 1513,
	103, 1513,
	105, 1513,
	109, 1513,
	110, 1513,
	111, 1513,
	112, 1513,
	113, 1513,
	114, 1513,
	115, 1513,
	119, 1513,
	120, 1513,
	121, 1513,
	122, 1513,
	123, 1513,
	124, 1513,
	125, 1513,
	126, 1513,
	127, 1513,
	128, 1513,
	129, 1513,
	131, 1513,
	134, 1513,
	136, 1513,
	137, 1513,
	139, 1513,
	142, 1513,
	143, 1513,
	144, 1513,
	145, 1513,
	146, 1513,
	147, 1513,
	148, 1513,
	149, 1513,
	150, 1513,
	151, 1513,
	153, 1513,
	155, 1513,
	156, 1513,
	157, 1513,
	158, 1513,
	159, 1513,
	160, 1513,
	161, 1513,
	162, 1513,
	163, 1513,
	165, 1513,
	167, 1513,
	168, 1513,
	169, 1513,
	170, 1513,
	171, 1513,
	172, 1513,
	173, 1513,
	174, 1513,
	175, 1513,
	176, 1513,
	178, 1513,
	179, 1513,
	181, 1513,
	182, 1513,
	183, 1513,
	184, 1513,
	185, 1513,
	187, 1513,
	188, 1513,
	191, 1513,
	192, 1513,
	193, 1513,
	195, 1513,
	196, 1513,
	197, 1513,
	198, 1513,
	199, 1513,
	200, 1513,
	201, 1513,
	202, 1513,
	203, 1513,
	204, 1513,
	208, 1513,
	209, 1513,
	210, 1513,
	211, 1513,
	212, 1513,
	214, 1513,
	217, 1513,
	218, 1513,
	220, 1513,
	221, 1513,
	223, 1513,
	225, 1513,
	226, 1513,
	227, 1513,
	228, 1513,
	229, 1513,
	230, 1513,
	231, 1513,
	233, 1513,
	234, 1513,
	235, 1513,
	236, 1513,
	237, 1513,
	239, 1513,
	240, 1513,
	241, 1513,
	242, 1513,
	243, 1513,
	244, 1513,
	245, 1513,
	246, 1513,
	248, 1513,
	249, 1513,
	250, 1513,
	251, 1513,
	252, 1513,
	253, 1513,
	254, 1513,
	255, 1513,
	256, 1513,
	257, 1513,
	258, 1513,
	259, 1513,
	260, 1513,
	262, 1513,
	263, 1513,
	264, 1513,
	265, 1513,
	266, 1513,
	267, 1513,
	268, 1513,
	269, 1513,
	270, 1513,
	271, 1513,
	272, 1513,
	273, 1513,
	275, 1513,
	276, 1513,
	277, 1513,
	278, 1513,
	279, 1513,
	281, 1513,
	282, 1513,
	283, 1513,
	284, 1513,
	285, 1513,
	286, 1513,
	287, 1513,
	288, 1513,
	289, 1513,
	291, 1513,
	292, 1513,
	293, 1513,
	294, 1513,
	295, 1513,
	296, 1513,
	297, 1513,
	298, 1513,
	299, 1513,
	300, 1513,
	301, 1513,
	303, 1513,
	305, 1513,
	306, 1513,
	307, 1513,
	308, 1513,
	309, 1513,
	310, 1513,
	311, 1513,
	312, 1513,
	314, 1513,
	315, 1513,
	316, 1513,
	319, 1513,
	320, 1513,
	321, 1513,
	322, 1513,
	324, 1513,
	325, 1513,
	326, 1513,
	327, 1513,
	330, 1513,
	331, 1513,
	332, 1513,
	333, 1513,
	335, 1513,
	337, 1513,
	338, 1513,
	339, 1513,
	340, 1513,
	341, 1513,
	342, 1513,
	345, 1513,
	350, 1513,
	351, 1513,
	352, 1513,
	353, 1513,
	354, 1513,
	355, 1513,
	356, 1513,
	358, 1513,
	359, 1513,
	360, 1513,
	361, 1513,
	362, 1513,
	363, 1513,
	365, 1513,
	366, 1513,
	367, 1513,
	368, 1513,
	369, 1513,
	370, 1513,
	371, 1513,
	372, 1513,
	373, 1513,
	375, 1513,
	378, 1513,
	379, 1513,
	382, 1513,
	383, 1513,
	-2, 0,
	-1, 971,
	133, 1414,
	317, 1414,
	360, 1414,
	379, 1414,
	-2, 0,
	-1, 988,
	133, 1437,
	317, 1437,
	360, 1437,
	379, 1437,
	-2, 0,
	-1, 989,
	168, 646,
	239, 646,
	243, 646,
	-2, 336,
	-1, 1057,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 704,
	-1, 1138,
	108, 709,
	118, 709,
	130, 709,
	164, 709,
	186, 709,
	213, 709,
	219, 709,
	328, 709,
	-2, 1060,
	-1, 1148,
	377, 1256,
	-2, 1244,
	-1, 1166,
	378, 1173,
	-2, 0,
	-1, 1191,
	168, 646,
	239, 646,
	243, 646,
	-2, 641,
	-1, 1219,
	378, 1173,
	-2, 0,
	-1, 1223,
	108, 709,
	118, 709,
	130, 709,
	164, 709,
	186, 709,
	213, 709,
	219, 709,
	328, 709,
	-2, 810,
	-1, 1371,
	168, 646,
	239, 646,
	243, 646,
	-2, 338,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 965,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 966,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 967,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 968,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 969,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 970,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 971,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 972,
	-1, 1495,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 981,
	-1, 1496,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 982,
	-1, 1497,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 983,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 990,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 994,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 995,
	-1, 1510,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 996,
	-1, 1511,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 997,
	-1, 1580,
	133, 1184,
	377, 1279,
	-2, 1272,
	-1, 1581,
	133, 1185,
	-2, 1454,
	-1, 1582,
	133, 1186,
	-2, 1358,
	-1, 1583,
	133, 1187,
	-2, 1319,
	-1, 1584,
	133, 1188,
	-2, 1336,
	-1, 1585,
	133, 1189,
	-2, 1357,
	-1, 1586,
	133, 1190,
	-2, 1411,
	-1, 1664,
	1, 811,
	75, 811,
	108, 811,
	118, 811,
	130, 811,
	134, 811,
	138, 811,
	140, 811,
	155, 811,
	164, 811,
	171, 811,
	182, 811,
	186, 811,
	200, 811,
	213, 811,
	215, 811,
	219, 811,
	261, 811,
	263, 811,
	328, 811,
	336, 811,
	347, 811,
	348, 811,
	357, 811,
	376, 811,
	378, 811,
	380, 811,
	381, 811,
	382, 811,
	-2, 810,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 1825,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 992,
	-1, 1843,
	224, 1144,
	-2, 1146,
	-1, 2021,
	229, 732,
	-2, 576,
	-1, 2080,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 993,
	-1, 2085,
	167, 0,
	-2, 1009,
	-1, 2094,
	224, 1145,
	-2, 1147,
	-1, 2136,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2137,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1038,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1039,
	-1, 2142,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1043,
	-1, 2143,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1044,
	-1, 2144,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1045,
	-1, 2284,
	167, 0,
	-2, 1010,
	-1, 2287,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1013,
	-1, 2288,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1015,
	-1, 2416,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1014,
	-1, 2417,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1016,
	-1, 2424,
	167, 0,
	-2, 1046,
	-1, 2501,
	167, 0,
	-2, 1047,
	-1, 2583,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1457,
	-1, 2666,
	377, 1525,
	-2, 516,
}

const sqlPrivate = 57344

const sqlLast = 43658

var sqlAct = [...]int{

	660, 2651, 2663, 1241, 2664, 2382, 2632, 2381, 2649, 2591,
	2582, 2555, 2592, 1735, 2593, 2231, 2450, 2581, 1743, 1268,
	2058, 2113, 945, 2506, 650, 2242, 2352, 658, 1276, 2392,
	2271, 2264, 1523, 2338, 1311, 2266, 2196, 2025, 1659, 186,
	2430, 1239, 657, 905, 186, 1718, 2195, 1221, 186, 1732,
	788, 1713, 1959, 2027, 186, 1909, 2033, 941, 1217, 186,
	186, 2318, 2258, 186, 1938, 1813, 186, 1744, 1200, 1271,
	1717, 1270, 1677, 948, 186, 1660, 1854, 636, 1946, 1668,
	453, 1707, 1908, 2166, 1560, 1453, 1144, 1714, 1809, 1458,
	1062, 992, 1396, 1535, 1264, 1229, 1792, 1201, 612, 110,
	1289, 1609, 1520, 528, 1536, 1231, 1544, 63, 1392, 471,
	26, 1436, 991, 1434, 450, 1176, 1554, 1715, 938, 931,
	1737, 770, 1180, 790, 803, 953, 1721, 1646, 773, 1633,
	753, 1576, 1226, 1208, 508, 628, 1133, 525, 1063, 1437,
	1395, 186, 186, 604, 115, 1435, 652, 177, 1191, 186,
	486, 521, 116, 110, 751, 1283, 928, 182, 1190, 2353,
	1067, 2180, 1842, 549, 2181, 1291, 2383, 1291, 1291, 2383,
	1078, 1079, 186, 186, 793, 186, 186, 805, 1736, 2679,
	2678, 186, 186, 2672, 2672, 2671, 2628, 2627, 1537, 2672,
	1259, 1259, 2626, 603, 1081, 2608, 1259, 2603, 2602, 2351,
	2599, 1640, 1640, 608, 1259, 2579, 2578, 500, 608, 1301,
	1301, 2550, 618, 2042, 2043, 1769, 2545, 2544, 1080, 2540,
	1259, 2406, 2532, 1259, 2503, 609, 2351, 2481, 1769, 1740,
	2478, 2351, 2476, 800, 1259, 2461, 2351, 2460, 2438, 1259,
	2435, 2351, 1259, 1635, 1259, 2418, 2377, 786, 110, 1769,
	1640, 1708, 2372, 2350, 2331, 597, 1640, 2351, 1259, 26,
	1218, 2286, 2257, 596, 2252, 1769, 1712, 2176, 1712, 893,
	2089, 2177, 1846, 2078, 1640, 757, 2169, 758, 1847, 1078,
	1079, 767, 613, 1255, 2684, 1118, 1119, 1120, 1086, 2670,
	1640, 2052, 2551, 778, 782, 2014, 755, 2013, 1935, 1301,
	1934, 1259, 1640, 1081, 1259, 1926, 1122, 1879, 1880, 1927,
	1897, 1898, 1899, 1924, 1923, 1922, 1708, 1640, 1640, 1640,
	2680, 1779, 1768, 2660, 2283, 1640, 1769, 1080, 2410, 2406,
	2169, 1078, 1079, 1100, 1108, 1109, 1110, 1118, 1119, 1120,
	1634, 1301, 1758, 1711, 1096, 1639, 1640, 1712, 1111, 1640,
	1304, 2068, 1101, 1666, 1305, 1081, 2149, 2091, 1122, 1078,
	1079, 1894, 2014, 1812, 1790, 1374, 1640, 1195, 1879, 1880,
	1539, 1853, 1259, 891, 973, 1292, 149, 1292, 1292, 1080,
	2354, 970, 969, 1081, 968, 1100, 653, 967, 1103, 1104,
	1105, 1106, 1097, 1393, 966, 965, 964, 1086, 963, 1557,
	962, 961, 960, 959, 146, 958, 957, 1080, 956, 146,
	759, 756, 602, 601, 600, 599, 595, 1115, 1123, 594,
	593, 592, 186, 793, 186, 1885, 186, 591, 1102, 186,
	588, 587, 586, 585, 148, 186, 581, 580, 579, 148,
	1103, 1104, 1105, 1106, 186, 186, 186, 186, 793, 1086,
	547, 1558, 546, 793, 1113, 545, 544, 543, 542, 541,
	540, 1101, 539, 2042, 1900, 538, 537, 536, 535, 1115,
	1123, 147, 534, 533, 532, 531, 147, 1086, 1078, 1079,
	516, 186, 1215, 515, 140, 514, 1885, 513, 1121, 1895,
	897, 141, 1634, 512, 441, 186, 911, 419, 1297, 478,
	1290, 1427, 1081, 1559, 1556, 412, 1113, 117, 411, 169,
	38, 186, 1739, 1101, 168, 1879, 1880, 167, 166, 165,
	164, 186, 1107, 41, 163, 909, 1080, 914, 1082, 1083,
	1084, 1085, 1087, 1088, 162, 161, 160, 1102, 159, 1112,
	1954, 1101, 158, 157, 156, 155, 154, 934, 934, 477,
	1895, 153, 793, 152, 1116, 611, 930, 151, 150, 1573,
	609, 1571, 1222, 1399, 935, 1896, 1569, 1567, 1004, 1894,
	2655, 2653, 2598, 2580, 1107, 1242, 954, 904, 479, 2566,
	2560, 1561, 2498, 186, 1074, 53, 2479, 481, 54, 1102,
	2411, 2317, 2316, 2312, 2311, 2304, 1086, 2303, 974, 2302,
	2298, 2297, 2296, 2295, 2399, 2289, 1116, 2263, 2163, 2158,
	2157, 2156, 1095, 2099, 2012, 1966, 1962, 1102, 2016, 56,
	1932, 1928, 1002, 1916, 1114, 1007, 1896, 1907, 1878, 1875,
	1078, 1079, 1117, 1885, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 1874, 1872, 1859, 1879, 1880, 1858, 1843,
	1664, 1078, 1079, 1074, 1081, 1891, 1892, 1893, 1308, 1531,
	1101, 1555, 1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886,
	1887, 989, 986, 1057, 1073, 1081, 1114, 766, 1080, 1092,
	1093, 1099, 1098, 1094, 1117, 1774, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 1220, 902, 1895, 1145, 1080,
	1152, 897, 1219, 2313, 1053, 57, 2673, 2658, 1879, 1880,
	2640, 1897, 1898, 1899, 1005, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 2639, 2669, 2282, 1881, 1882, 1883, 1884,
	1886, 1887, 118, 59, 1275, 60, 1102, 1078, 1079, 1145,
	1058, 1136, 609, 2115, 1059, 2570, 1879, 1880, 1086, 146,
	1060, 186, 2569, 186, 1394, 1808, 480, 597, 2568, 93,
	2535, 1081, 1894, 1807, 1885, 596, 2398, 1070, 1071, 1086,
	1532, 2527, 2525, 1896, 2517, 186, 186, 2515, 1075, 148,
	2491, 2490, 1525, 2447, 146, 1080, 2426, 2407, 2386, 2375,
	2357, 1100, 2309, 2240, 2237, 2236, 2234, 2204, 2203, 2184,
	2172, 2084, 2056, 2002, 1993, 1148, 1979, 1978, 1964, 1933,
	1906, 1178, 1179, 1868, 148, 1867, 147, 1864, 1839, 1206,
	1312, 1834, 1182, 1140, 140, 1181, 1885, 146, 1879, 1880,
	1204, 141, 1185, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 1251, 1979, 1184, 2509, 1103, 1104, 1105, 1106,
	1651, 147, 117, 1621, 1565, 1086, 1267, 148, 1199, 140,
	1198, 1189, 1078, 1079, 1885, 1900, 141, 1174, 110, 1173,
	1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 1172,
	1171, 1170, 609, 1169, 1216, 1194, 1081, 117, 1168, 1167,
	1895, 793, 186, 1166, 147, 1165, 1164, 1163, 805, 1162,
	1192, 1161, 140, 1224, 186, 1160, 1159, 1196, 1158, 141,
	1080, 1952, 1157, 1156, 1149, 1137, 1136, 186, 985, 1101,
	977, 950, 2405, 186, 2291, 186, 2262, 186, 1895, 1771,
	117, 186, 2179, 2054, 1274, 1572, 2175, 1570, 1845, 620,
	903, 1134, 1568, 1566, 1220, 2412, 1885, 1652, 1266, 2028,
	1001, 1778, 1879, 1880, 1205, 2409, 2408, 2402, 2182, 2044,
	1187, 1309, 1708, 1222, 1257, 1188, 1896, 1051, 1056, 2223,
	2216, 2005, 186, 186, 1380, 1998, 1931, 1930, 1929, 793,
	1107, 186, 1818, 1431, 186, 998, 1186, 1280, 1082, 1083,
	1084, 1085, 1087, 1088, 1777, 1102, 1242, 1154, 2059, 1272,
	1997, 1366, 1800, 1245, 1896, 805, 1883, 1884, 1886, 1887,
	186, 1084, 1085, 1087, 1088, 186, 2431, 1736, 2116, 1545,
	186, 186, 1260, 186, 174, 186, 1177, 186, 2656, 186,
	1850, 1557, 1232, 1045, 2654, 1233, 1294, 2038, 1240, 1296,
	186, 719, 2191, 1299, 930, 2563, 186, 186, 1762, 1258,
	447, 422, 765, 173, 2624, 186, 1891, 1892, 1893, 2623,
	1237, 1438, 607, 1890, 1888, 1889, 1881, 1882, 1883, 1884,
	1886, 1887, 1151, 1046, 2365, 2539, 1780, 186, 1238, 1282,
	746, 805, 1285, 1558, 744, 2380, 2472, 187, 175, 748,
	2470, 2469, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887,
	1381, 2468, 2065, 1401, 1234, 1037, 1670, 1670, 606, 2225,
	1306, 1368, 2218, 986, 1307, 2215, 1669, 2188, 1367, 1400,
	2187, 742, 739, 110, 999, 1559, 1556, 1371, 1220, 1303,
	1678, 1397, 1863, 431, 1862, 1385, 1861, 1860, 1821, 1415,
	1761, 1703, 1405, 1426, 1440, 425, 420, 1698, 1409, 1693,
	1410, 1507, 1411, 718, 1412, 1193, 1413, 1408, 890, 1626,
	1625, 2055, 1232, 608, 1369, 1233, 665, 1000, 176, 1624,
	1468, 1733, 2667, 1419, 1421, 1425, 1881, 1882, 1883, 1884,
	1886, 1887, 1266, 583, 186, 442, 186, 170, 1432, 186,
	2538, 1439, 432, 1232, 1433, 1467, 1233, 1054, 2229, 495,
	186, 2452, 597, 1561, 1457, 597, 597, 1681, 1424, 805,
	1449, 2230, 186, 1450, 1451, 1088, 186, 2009, 1262, 186,
	2576, 590, 1542, 186, 898, 900, 1522, 186, 1879, 1880,
	171, 1286, 425, 805, 609, 186, 589, 793, 1522, 609,
	1540, 1879, 1880, 1031, 1234, 186, 805, 2109, 1561, 590,
	186, 794, 1077, 2615, 806, 1653, 1404, 1530, 186, 1533,
	173, 1604, 1545, 2206, 1772, 1044, 186, 2035, 1671, 2642,
	172, 446, 605, 174, 1529, 1234, 1631, 186, 2623, 186,
	1527, 186, 1032, 1555, 186, 1587, 186, 984, 186, 186,
	1055, 186, 793, 793, 446, 2004, 793, 622, 1810, 1811,
	186, 2547, 1704, 1682, 1684, 1887, 975, 440, 1247, 1050,
	1696, 2520, 979, 1680, 1657, 1757, 1629, 1995, 1628, 1243,
	1140, 2066, 1594, 609, 1638, 1561, 2548, 435, 1547, 1175,
	1648, 1649, 1643, 1654, 1644, 445, 2071, 175, 1689, 620,
	1235, 1579, 1579, 1592, 1224, 1753, 1885, 1612, 1687, 1674,
	1700, 1616, 1617, 1619, 1318, 2219, 1694, 1692, 445, 1885,
	1423, 421, 2036, 2213, 1667, 1756, 2064, 434, 433, 1291,
	1705, 2595, 1727, 1384, 1383, 1389, 1393, 1390, 1632, 2272,
	1695, 1764, 1242, 1738, 1750, 1738, 426, 934, 740, 934,
	805, 422, 740, 110, 750, 1990, 1742, 749, 186, 110,
	2073, 423, 2528, 1751, 1679, 1752, 2422, 1754, 2035, 1759,
	1895, 413, 2383, 2475, 186, 186, 186, 1763, 186, 954,
	2614, 1760, 1036, 1895, 1207, 1773, 1230, 176, 2453, 1372,
	487, 1041, 1131, 1126, 1127, 1128, 1129, 1130, 1775, 741,
	740, 2207, 1866, 1647, 1139, 1663, 2069, 186, 421, 608,
	1248, 1242, 2278, 492, 1147, 1318, 1318, 2529, 2273, 488,
	1182, 2635, 1185, 1387, 2596, 1831, 1018, 2512, 1179, 1178,
	2346, 2594, 1797, 426, 505, 2622, 1781, 1253, 422, 2643,
	1235, 1829, 2620, 1211, 2391, 584, 1896, 444, 423, 171,
	2070, 489, 1730, 1252, 484, 1823, 980, 1504, 972, 1896,
	794, 494, 1042, 1066, 1214, 110, 2008, 1521, 2648, 2347,
	444, 1235, 491, 2463, 1791, 1249, 2106, 447, 1010, 173,
	1209, 1795, 2462, 2597, 483, 794, 2613, 443, 1824, 172,
	794, 1212, 1076, 1250, 1360, 1804, 1803, 1403, 436, 1799,
	447, 2445, 1528, 1806, 484, 2307, 487, 1783, 1065, 1210,
	443, 2190, 2072, 1006, 2364, 574, 1065, 1388, 1043, 1785,
	1061, 2363, 1826, 615, 1948, 574, 1975, 983, 2107, 492,
	1202, 1202, 1827, 617, 990, 488, 1832, 1971, 414, 1292,
	437, 1786, 1731, 617, 1888, 1889, 1881, 1882, 1883, 1884,
	1886, 1887, 1281, 1784, 995, 995, 487, 1822, 1889, 1881,
	1882, 1883, 1884, 1886, 1887, 1273, 1269, 489, 1502, 1505,
	2556, 438, 1213, 439, 2633, 2105, 1064, 616, 1418, 492,
	2342, 2647, 2343, 609, 1064, 488, 186, 805, 491, 794,
	490, 717, 186, 186, 1379, 1960, 186, 1936, 2361, 575,
	1849, 186, 1942, 1066, 186, 1501, 1561, 1445, 2659, 575,
	415, 1066, 186, 2345, 1375, 1065, 2308, 489, 186, 186,
	186, 2243, 2348, 907, 186, 996, 996, 186, 906, 997,
	997, 2634, 2362, 186, 186, 186, 186, 186, 491, 1019,
	2393, 1852, 1956, 1377, 186, 1947, 793, 493, 1828, 186,
	1955, 179, 721, 2636, 805, 1830, 1378, 609, 1913, 1914,
	1915, 2145, 1965, 186, 1837, 2446, 1981, 1961, 1980, 1972,
	1816, 1840, 1949, 186, 720, 186, 1951, 186, 793, 793,
	1642, 186, 1937, 1064, 1446, 186, 1211, 1641, 1856, 1857,
	186, 995, 186, 606, 916, 2232, 2384, 1394, 1391, 186,
	995, 2015, 2443, 2017, 2344, 1503, 490, 1214, 574, 2360,
	576, 1941, 186, 793, 662, 2007, 1011, 2319, 1940, 1996,
	576, 2167, 1967, 1645, 1944, 1945, 617, 186, 1950, 927,
	1564, 2444, 503, 1989, 1212, 497, 2425, 925, 1905, 2306,
	2228, 476, 34, 1910, 2083, 1612, 1612, 1612, 1991, 2040,
	1918, 2020, 2021, 2010, 1873, 1012, 490, 1833, 1009, 2000,
	1776, 1040, 1710, 493, 1702, 795, 2146, 186, 807, 620,
	620, 996, 2147, 475, 33, 997, 2031, 1691, 2003, 3,
	2019, 1049, 474, 30, 2037, 2018, 2051, 1048, 978, 2022,
	1029, 577, 575, 2045, 1035, 473, 69, 609, 1911, 614,
	1061, 577, 2046, 2047, 1801, 2048, 2049, 895, 2050, 472,
	68, 1416, 896, 493, 1407, 1213, 1155, 186, 1563, 2086,
	2061, 2062, 2063, 2060, 2590, 578, 1701, 1027, 1690, 469,
	22, 1256, 892, 2067, 1442, 578, 1447, 470, 23, 2486,
	468, 28, 1454, 2553, 2074, 2335, 467, 20, 2076, 1459,
	1466, 2211, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 2095, 1506, 2092, 1508, 1509, 1510,
	1511, 34, 1039, 926, 2090, 2117, 2108, 2110, 2111, 502,
	186, 924, 496, 576, 1534, 2209, 186, 465, 19, 2122,
	2119, 1139, 466, 18, 2151, 186, 186, 457, 15, 2124,
	2189, 1028, 1034, 33, 458, 16, 464, 51, 794, 776,
	1574, 1575, 30, 2024, 1591, 806, 1603, 1605, 1610, 1613,
	1614, 1615, 2152, 1734, 2178, 69, 1025, 456, 50, 2101,
	2102, 2103, 1023, 1021, 2202, 463, 12, 2201, 1026, 68,
	2183, 2150, 462, 44, 2165, 186, 738, 186, 1728, 1353,
	2168, 1726, 2200, 2221, 2171, 186, 2170, 2227, 793, 22,
	2221, 1302, 110, 1300, 577, 1015, 1298, 23, 923, 2238,
	28, 2186, 1207, 186, 186, 2235, 20, 455, 45, 1295,
	2193, 1293, 2185, 1254, 1246, 2253, 461, 7, 460, 6,
	186, 1244, 1318, 1236, 795, 2096, 794, 2026, 578, 186,
	2214, 805, 186, 186, 186, 1068, 2220, 762, 2245, 805,
	2244, 2624, 2174, 2226, 1814, 2233, 2210, 2247, 2212, 795,
	2404, 2248, 806, 2239, 795, 2403, 1398, 763, 645, 2246,
	2259, 1211, 1518, 1318, 2249, 2251, 2159, 19, 2255, 2488,
	2254, 1686, 18, 459, 36, 2260, 186, 15, 1516, 2285,
	1353, 1353, 1214, 1670, 16, 2001, 51, 1024, 454, 35,
	1802, 2277, 1685, 1022, 1020, 1992, 1670, 183, 1209, 743,
	745, 1352, 417, 2280, 1706, 1683, 427, 50, 1697, 1212,
	1815, 2522, 448, 1069, 1317, 12, 1318, 498, 183, 1429,
	1430, 506, 44, 2354, 511, 482, 1014, 1210, 806, 922,
	186, 1013, 530, 186, 2500, 764, 1940, 2474, 2305, 2320,
	1072, 1699, 2217, 805, 186, 186, 1688, 2552, 186, 186,
	186, 2224, 2389, 795, 1741, 2274, 1729, 45, 1725, 1512,
	1630, 1078, 1079, 2281, 1370, 186, 7, 1513, 6, 1514,
	186, 1310, 186, 1519, 186, 186, 186, 2631, 2646, 186,
	793, 1318, 2329, 1879, 1880, 2355, 805, 504, 2202, 793,
	1213, 2201, 2322, 2326, 2324, 2334, 2437, 186, 186, 754,
	754, 2221, 1352, 1352, 2325, 793, 2200, 417, 2221, 1080,
	2358, 2379, 1078, 1079, 2261, 1317, 1317, 1318, 1318, 2202,
	2323, 2164, 2201, 36, 2112, 2202, 1318, 1318, 2201, 1788,
	417, 417, 2330, 798, 417, 2057, 1081, 2200, 35, 183,
	894, 2385, 1957, 2200, 1078, 1079, 1925, 2390, 1789, 2388,
	1788, 1787, 2359, 2374, 2371, 2395, 2396, 2394, 1627, 1318,
	1080, 2376, 2321, 1623, 1622, 1553, 806, 2327, 1142, 2293,
	2401, 2104, 1152, 1150, 1047, 1038, 1033, 1030, 2413, 2414,
	1016, 1819, 1820, 982, 2387, 1515, 1373, 1825, 582, 2451,
	806, 635, 1517, 485, 794, 1406, 186, 1017, 186, 1953,
	805, 186, 1650, 806, 2427, 2546, 1838, 2415, 2299, 186,
	2378, 1865, 2505, 2421, 1562, 805, 1153, 48, 2198, 1844,
	639, 2336, 2400, 2434, 2192, 1851, 1720, 1719, 1855, 808,
	1382, 661, 2436, 1578, 1448, 416, 2202, 1460, 737, 2201,
	663, 2439, 1315, 664, 1316, 1869, 1183, 651, 2454, 794,
	794, 1313, 186, 794, 2200, 793, 951, 1266, 1745, 186,
	1386, 1526, 1543, 1848, 1146, 2221, 631, 186, 186, 793,
	793, 2202, 643, 186, 2201, 642, 1541, 976, 2455, 1139,
	630, 2457, 1958, 2034, 2397, 1444, 1610, 1610, 1610, 2200,
	1805, 1441, 186, 2477, 2485, 2489, 2030, 186, 2420, 2493,
	2208, 2496, 2492, 424, 186, 2484, 1876, 2483, 949, 1601,
	1593, 1589, 1052, 1132, 1202, 1746, 1003, 2041, 2473, 1770,
	1943, 2502, 1197, 1452, 2441, 761, 2516, 2466, 2467, 186,
	186, 1318, 2511, 1595, 2510, 2508, 186, 760, 2657, 2456,
	771, 1376, 2494, 2495, 793, 2518, 2487, 806, 1782, 186,
	1125, 793, 793, 2531, 1124, 2533, 1976, 747, 2534, 2480,
	2497, 2514, 994, 780, 784, 993, 1974, 802, 2641, 2433,
	2521, 2537, 2205, 2542, 2543, 2562, 186, 145, 186, 142,
	530, 186, 530, 805, 917, 144, 143, 920, 2006, 72,
	32, 31, 795, 417, 2536, 92, 91, 1976, 90, 807,
	89, 88, 530, 530, 417, 942, 2459, 2571, 87, 2572,
	2573, 86, 186, 85, 2577, 84, 2032, 83, 82, 81,
	2202, 80, 79, 2201, 2471, 2499, 2587, 2575, 78, 186,
	186, 186, 77, 76, 2589, 2588, 75, 186, 2200, 530,
	74, 2600, 2574, 526, 2559, 523, 71, 70, 2607, 29,
	2053, 186, 25, 530, 2612, 2609, 96, 620, 620, 2610,
	2611, 24, 67, 2519, 66, 2558, 2621, 2619, 27, 981,
	620, 17, 2625, 11, 21, 2526, 114, 113, 112, 530,
	795, 111, 14, 2630, 13, 2629, 109, 2075, 108, 107,
	106, 2637, 1454, 105, 10, 2638, 9, 95, 2079, 2270,
	42, 2080, 2645, 2650, 2652, 2644, 807, 2564, 8, 40,
	39, 94, 136, 2085, 135, 132, 2604, 2605, 2606, 134,
	131, 133, 2093, 2661, 2650, 2662, 103, 138, 137, 2668,
	2097, 129, 2674, 1943, 2650, 127, 2677, 2676, 128, 2675,
	1355, 417, 2683, 130, 2652, 2681, 2685, 2682, 2652, 2549,
	126, 1459, 2120, 2121, 125, 139, 1318, 2123, 102, 101,
	1459, 2125, 1354, 100, 99, 1879, 1880, 98, 1897, 1898,
	1899, 5, 2, 1, 2565, 0, 2567, 1353, 2346, 0,
	0, 2339, 807, 0, 806, 0, 0, 0, 0, 0,
	2153, 2154, 2337, 2155, 0, 0, 0, 2341, 0, 2160,
	2161, 2162, 1314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 2347, 1353, 1894,
	0, 0, 0, 0, 0, 0, 784, 0, 2173, 0,
	0, 0, 0, 0, 0, 0, 0, 802, 0, 0,
	2340, 1355, 1355, 794, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 0, 0, 2194, 0,
	0, 0, 0, 1354, 1354, 0, 0, 0, 0, 0,
	0, 1353, 0, 1318, 0, 794, 794, 0, 0, 0,
	0, 0, 0, 1885, 0, 0, 0, 0, 1595, 1595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	0, 0, 0, 1314, 1314, 0, 0, 0, 0, 511,
	794, 754, 1317, 1835, 1836, 1202, 0, 0, 0, 0,
	807, 0, 1900, 0, 2256, 0, 0, 0, 2342, 0,
	2343, 0, 0, 417, 417, 0, 1353, 640, 64, 0,
	1352, 0, 0, 0, 807, 0, 0, 1895, 795, 0,
	0, 0, 0, 1317, 0, 0, 0, 807, 0, 0,
	0, 2345, 0, 2284, 1595, 1595, 1595, 2287, 2288, 0,
	2348, 2290, 1353, 1353, 784, 0, 0, 0, 2292, 0,
	2294, 1353, 1353, 0, 0, 0, 0, 1078, 1079, 1902,
	1903, 1904, 64, 1352, 0, 0, 2301, 0, 0, 0,
	0, 0, 0, 795, 795, 0, 1317, 795, 0, 0,
	0, 1081, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 1896, 0, 0, 0, 0, 0, 2310,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	183, 0, 2344, 0, 0, 610, 0, 0, 1352, 0,
	0, 0, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 1279, 0, 0, 0, 2356,
	0, 417, 0, 417, 0, 417, 772, 64, 0, 1287,
	0, 0, 0, 0, 1352, 1352, 0, 0, 0, 0,
	0, 807, 0, 1352, 1352, 1086, 0, 1317, 1317, 0,
	0, 0, 0, 1891, 1892, 1893, 1317, 1317, 0, 0,
	1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 0,
	530, 183, 0, 0, 0, 0, 1352, 0, 0, 183,
	0, 0, 530, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2416, 2417, 0, 0, 771, 1227, 530, 1101,
	0, 0, 0, 530, 0, 794, 0, 0, 183, 530,
	0, 530, 0, 530, 0, 530, 1353, 530, 0, 0,
	1595, 1595, 0, 2429, 0, 0, 0, 0, 1417, 2432,
	0, 0, 0, 0, 530, 530, 0, 0, 0, 0,
	0, 0, 0, 417, 0, 2081, 2082, 0, 806, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 0, 0, 0, 0,
	0, 0, 0, 2464, 0, 1102, 2465, 0, 0, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 0, 1595,
	0, 0, 0, 0, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2144, 0, 2148, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 0,
	0, 0, 0, 0, 784, 0, 1284, 0, 1284, 0,
	0, 1317, 0, 0, 0, 0, 0, 2513, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 511, 0, 754, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 794, 417, 0,
	0, 0, 0, 806, 0, 0, 794, 0, 0, 0,
	1662, 0, 0, 0, 417, 0, 0, 417, 0, 0,
	610, 1675, 794, 0, 0, 417, 0, 795, 0, 0,
	0, 0, 0, 417, 0, 807, 0, 0, 0, 0,
	0, 1353, 0, 417, 0, 0, 0, 0, 1709, 0,
	0, 0, 0, 0, 0, 0, 1716, 2586, 2586, 795,
	795, 0, 0, 0, 894, 0, 0, 0, 1355, 0,
	0, 0, 0, 2601, 0, 417, 1428, 1749, 0, 530,
	0, 0, 530, 0, 530, 0, 417, 417, 0, 1755,
	1354, 0, 0, 2586, 795, 0, 0, 1353, 1675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 1354, 806, 0, 0, 1879, 1880, 0, 1897, 1898,
	1899, 2586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2088, 0, 0, 0, 0, 0, 1353, 0,
	0, 0, 1355, 1352, 0, 0, 0, 0, 2665, 0,
	0, 1314, 794, 0, 0, 0, 1317, 0, 0, 2665,
	598, 0, 2665, 2665, 1354, 0, 794, 794, 0, 1894,
	0, 0, 0, 0, 0, 0, 1793, 0, 0, 0,
	1135, 0, 1138, 0, 0, 0, 0, 0, 0, 1143,
	0, 0, 417, 417, 417, 0, 417, 0, 0, 1352,
	0, 0, 0, 0, 1314, 0, 0, 1355, 0, 0,
	0, 771, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 0, 771, 0, 1354,
	1665, 0, 0, 1885, 0, 0, 0, 0, 784, 0,
	0, 794, 0, 1355, 1355, 0, 784, 0, 794, 794,
	0, 0, 1355, 1355, 0, 0, 802, 0, 0, 0,
	1352, 0, 0, 0, 0, 1354, 1354, 0, 0, 1314,
	0, 0, 1900, 1317, 1354, 1354, 0, 0, 478, 0,
	806, 0, 0, 0, 1595, 1355, 0, 0, 1747, 38,
	0, 0, 0, 0, 0, 0, 0, 1895, 0, 802,
	802, 0, 41, 0, 0, 1314, 1314, 1354, 0, 2424,
	0, 0, 0, 0, 1314, 1314, 0, 64, 0, 0,
	0, 1765, 1223, 0, 0, 1595, 0, 0, 477, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 795,
	0, 0, 0, 0, 0, 41, 0, 1314, 0, 0,
	2448, 0, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 0, 0, 53, 0, 481, 54, 0, 0,
	0, 1766, 0, 1896, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	1767, 0, 0, 1595, 417, 0, 0, 0, 0, 481,
	417, 417, 0, 0, 417, 0, 0, 0, 0, 1662,
	0, 0, 1662, 0, 0, 1796, 802, 1798, 2501, 784,
	1963, 0, 0, 0, 0, 0, 417, 1969, 1970, 0,
	0, 56, 1675, 0, 0, 1977, 0, 0, 0, 0,
	0, 1982, 1983, 1985, 1987, 1988, 0, 1355, 1817, 0,
	0, 0, 417, 1891, 1892, 1893, 0, 1999, 0, 0,
	1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 1354,
	0, 417, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 1279, 0, 1279, 807, 530, 0, 0, 0, 417,
	0, 0, 0, 2029, 0, 0, 0, 0, 417, 0,
	2039, 118, 59, 0, 60, 0, 0, 417, 0, 1314,
	0, 0, 0, 0, 0, 0, 0, 57, 146, 0,
	1793, 795, 1794, 0, 0, 480, 0, 807, 93, 0,
	795, 0, 0, 0, 0, 1793, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 59, 795, 60, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 480, 0,
	0, 93, 64, 0, 0, 417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 148, 0, 140, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 598, 0, 0, 598, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 2114, 0, 771, 147, 0,
	0, 0, 0, 771, 771, 0, 140, 771, 0, 0,
	0, 807, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 1968,
	0, 1524, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 1355, 0, 610, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 1994, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 0, 795, 0, 1879, 1880,
	0, 1897, 1898, 1899, 2011, 0, 0, 0, 417, 0,
	795, 795, 0, 0, 1662, 2087, 0, 0, 0, 0,
	0, 0, 2023, 894, 1662, 0, 0, 0, 1355, 0,
	0, 1265, 0, 0, 1314, 0, 0, 0, 2197, 0,
	1265, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	1354, 0, 1894, 0, 0, 0, 0, 2222, 0, 0,
	0, 0, 0, 1223, 2222, 0, 0, 0, 0, 0,
	0, 0, 0, 1675, 0, 1279, 64, 0, 0, 0,
	0, 0, 0, 2241, 0, 795, 0, 0, 64, 1355,
	1314, 0, 795, 795, 0, 0, 0, 0, 0, 0,
	0, 417, 417, 0, 0, 0, 0, 0, 2077, 0,
	0, 1354, 0, 0, 0, 0, 1885, 0, 2267, 0,
	0, 64, 0, 64, 807, 0, 0, 2269, 0, 0,
	2275, 417, 417, 0, 0, 0, 0, 0, 37, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 64, 38,
	120, 1314, 0, 0, 0, 1900, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2300, 0, 122, 0, 0, 0,
	1895, 0, 0, 0, 0, 0, 43, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 49, 0, 0, 0, 52, 0, 0,
	123, 0, 0, 0, 53, 0, 104, 54, 417, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 771, 1662, 894, 0, 0, 2332, 2333, 1675, 55,
	0, 0, 0, 0, 64, 0, 1896, 0, 56, 0,
	0, 0, 2197, 894, 0, 0, 0, 0, 2366, 0,
	2367, 0, 417, 2369, 2370, 2222, 0, 417, 0, 0,
	0, 0, 2222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2197, 0, 894, 1716, 0, 0, 2197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1747, 771, 0, 0, 0, 0,
	0, 0, 0, 1524, 57, 0, 1891, 1892, 1893, 0,
	0, 58, 0, 1890, 1888, 1889, 1881, 1882, 1883, 1884,
	1886, 1887, 0, 1138, 2276, 802, 0, 0, 0, 0,
	65, 118, 59, 0, 60, 0, 61, 0, 124, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 1675, 73, 2440, 0, 93, 2442,
	0, 0, 0, 0, 0, 0, 0, 417, 121, 0,
	2197, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1138, 97, 2222,
	0, 0, 0, 0, 0, 2197, 0, 119, 0, 0,
	417, 0, 0, 0, 0, 147, 0, 894, 0, 0,
	0, 771, 0, 140, 0, 2267, 2267, 0, 0, 0,
	141, 894, 0, 772, 0, 0, 0, 0, 0, 772,
	772, 0, 0, 772, 0, 0, 0, 0, 0, 0,
	2507, 117, 0, 0, 4, 1662, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 2368, 0, 0, 0, 0,
	2373, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 2523, 2524, 0,
	0, 0, 0, 0, 417, 1078, 1079, 64, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 2541, 1096, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 1122, 64, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 2557, 0, 894, 610, 0, 417,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 1100,
	0, 0, 478, 0, 2197, 0, 1097, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	2507, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 894, 894, 894,
	0, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	2449, 0, 477, 0, 1103, 1104, 1105, 1106, 0, 2618,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 479, 0, 1115, 1123, 0, 0, 0, 53, 0,
	481, 54, 0, 2482, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	1113, 0, 56, 1111, 0, 0, 0, 1101, 0, 0,
	1081, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 0, 1112, 1080, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1097, 0, 478,
	0, 0, 0, 0, 0, 0, 0, 2530, 0, 0,
	38, 64, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 41, 0, 0, 0, 772, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 57, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 477,
	1116, 0, 2561, 0, 1086, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 59, 0, 60, 0,
	0, 0, 0, 0, 1115, 1123, 0, 0, 479, 0,
	0, 0, 146, 0, 0, 53, 1414, 481, 54, 480,
	0, 0, 93, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	0, 1113, 148, 0, 0, 0, 0, 0, 1101, 56,
	1114, 772, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	0, 0, 0, 0, 1112, 0, 0, 1921, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 59, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 146,
	0, 0, 0, 0, 0, 0, 480, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 1920, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	64, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 452, 0, 0, 0, 0, 0, 0, 188,
	189, 809, 0, 190, 810, 811, 812, 813, 352, 814,
	815, 816, 817, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 818, 195, 359, 360, 196, 197, 819,
	820, 361, 362, 363, 821, 198, 364, 822, 796, 823,
	199, 200, 201, 0, 203, 204, 205, 202, 824, 206,
	0, 207, 208, 825, 722, 209, 210, 211, 826, 827,
	829, 828, 830, 831, 832, 212, 213, 418, 214, 365,
	215, 366, 367, 833, 216, 834, 217, 835, 218, 836,
	837, 219, 220, 838, 221, 839, 0, 840, 368, 222,
	224, 223, 225, 369, 370, 841, 723, 842, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 64, 228, 843,
	229, 844, 845, 724, 846, 230, 374, 847, 375, 848,
	1524, 231, 232, 233, 234, 376, 377, 726, 849, 378,
	238, 850, 235, 851, 725, 236, 379, 237, 380, 381,
	382, 383, 384, 852, 385, 853, 727, 239, 240, 241,
	728, 386, 387, 242, 243, 244, 854, 246, 245, 855,
	388, 729, 247, 248, 730, 856, 249, 250, 857, 858,
	251, 0, 252, 731, 253, 254, 256, 389, 255, 732,
	257, 258, 260, 259, 859, 860, 861, 390, 261, 391,
	262, 263, 862, 264, 863, 864, 265, 865, 866, 266,
	392, 733, 267, 734, 393, 268, 269, 270, 271, 272,
	273, 867, 274, 394, 275, 395, 276, 868, 277, 278,
	279, 280, 281, 396, 282, 283, 869, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	870, 296, 735, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 871, 309, 398, 308, 310, 311, 872,
	312, 300, 301, 313, 736, 314, 399, 400, 315, 873,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 874, 323, 875, 324, 325, 326, 327, 328, 329,
	330, 331, 876, 403, 404, 405, 877, 878, 332, 333,
	406, 407, 879, 334, 335, 336, 337, 880, 881, 338,
	339, 340, 341, 882, 342, 883, 408, 343, 344, 345,
	409, 410, 884, 885, 346, 886, 887, 888, 889, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1655, 0, 0, 0, 0, 0,
	188, 189, 809, 1656, 190, 810, 811, 812, 813, 352,
	814, 815, 816, 817, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 818, 195, 359, 360, 196, 197,
	819, 820, 361, 362, 363, 821, 198, 364, 822, 796,
	823, 199, 200, 201, 0, 203, 204, 205, 202, 824,
	206, 0, 207, 208, 825, 722, 209, 210, 211, 826,
	827, 829, 828, 830, 831, 832, 212, 213, 418, 214,
	365, 215, 366, 367, 833, 216, 834, 217, 835, 218,
	836, 837, 219, 220, 838, 221, 839, 0, 840, 368,
	222, 224, 223, 225, 369, 370, 841, 723, 842, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	843, 229, 844, 845, 724, 846, 230, 374, 847, 375,
	848, 0, 231, 232, 233, 234, 376, 377, 726, 849,
	378, 238, 850, 235, 851, 725, 236, 379, 237, 380,
	381, 382, 383, 384, 852, 385, 853, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 854, 246, 245,
	855, 388, 729, 247, 248, 730, 856, 249, 250, 857,
	858, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 859, 860, 861, 390, 261,
	391, 262, 263, 862, 264, 863, 864, 265, 865, 866,
	266, 392, 733, 267, 734, 393, 268, 269, 270, 271,
	272, 273, 867, 274, 394, 275, 395, 276, 868, 277,
	278, 279, 280, 281, 396, 282, 283, 869, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 870, 296, 735, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 871, 309, 398, 308, 310, 311,
	872, 312, 300, 301, 313, 736, 314, 399, 400, 315,
	873, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 874, 323, 875, 324, 325, 326, 327, 328,
	329, 330, 331, 876, 403, 404, 405, 877, 878, 332,
	333, 406, 407, 879, 334, 335, 336, 337, 880, 881,
	338, 339, 340, 341, 882, 342, 883, 408, 343, 344,
	345, 409, 410, 884, 885, 346, 886, 887, 888, 889,
	347, 348, 349, 350, 351, 0, 804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 809, 2328, 190, 810, 811, 812,
	813, 352, 814, 815, 816, 817, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 818, 195, 359, 360,
	196, 197, 819, 820, 361, 362, 363, 821, 198, 364,
	822, 796, 823, 199, 200, 201, 0, 203, 204, 205,
	202, 824, 206, 0, 207, 208, 825, 722, 209, 210,
	211, 826, 827, 829, 828, 830, 831, 832, 212, 213,
	418, 214, 365, 215, 366, 367, 833, 216, 834, 217,
	835, 218, 836, 837, 219, 220, 838, 221, 839, 0,
	840, 368, 222, 224, 223, 225, 369, 370, 841, 723,
	842, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 843, 229, 844, 845, 724, 846, 230, 374,
	847, 375, 848, 0, 231, 232, 233, 234, 376, 377,
	726, 849, 378, 238, 850, 235, 851, 725, 236, 379,
	237, 380, 381, 382, 383, 384, 852, 385, 853, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 854,
	246, 245, 855, 388, 729, 247, 248, 730, 856, 249,
	250, 857, 858, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 859, 860, 861,
	390, 261, 391, 262, 263, 862, 264, 863, 864, 265,
	865, 866, 266, 392, 733, 267, 734, 393, 268, 269,
	270, 271, 272, 273, 867, 274, 394, 275, 395, 276,
	868, 277, 278, 279, 280, 281, 396, 282, 283, 869,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 870, 296, 735, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 871, 309, 398, 308,
	310, 311, 872, 312, 300, 301, 313, 736, 314, 399,
	400, 315, 873, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 874, 323, 875, 324, 325, 326,
	327, 328, 329, 330, 331, 876, 403, 404, 405, 877,
	878, 332, 333, 406, 407, 879, 334, 335, 336, 337,
	880, 881, 338, 339, 340, 341, 882, 342, 883, 408,
	343, 344, 345, 409, 410, 884, 885, 346, 886, 887,
	888, 889, 347, 348, 349, 350, 351, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1261, 188, 189, 809, 0, 190, 810, 811,
	812, 813, 352, 814, 815, 816, 817, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 818, 195, 359,
	360, 196, 197, 819, 820, 361, 362, 363, 821, 198,
	364, 822, 796, 823, 199, 200, 201, 0, 203, 204,
	205, 202, 824, 206, 0, 207, 208, 825, 722, 209,
	210, 211, 826, 827, 829, 828, 830, 831, 832, 212,
	213, 418, 214, 365, 215, 366, 367, 833, 216, 834,
	217, 835, 218, 836, 837, 219, 220, 838, 221, 839,
	0, 840, 368, 222, 224, 223, 225, 369, 370, 841,
	723, 842, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 843, 229, 844, 845, 724, 846, 230,
	374, 847, 375, 848, 0, 231, 232, 233, 234, 376,
	377, 726, 849, 378, 238, 850, 235, 851, 725, 236,
	379, 237, 380, 381, 382, 383, 384, 852, 385, 853,
	727, 239, 240, 241, 728, 386, 387, 242, 243, 244,
	854, 246, 245, 855, 388, 729, 247, 248, 730, 856,
	249, 250, 857, 858, 251, 0, 252, 731, 253, 254,
	256, 389, 255, 732, 257, 258, 260, 259, 859, 860,
	861, 390, 261, 391, 262, 263, 862, 264, 863, 864,
	265, 865, 866, 266, 392, 733, 267, 734, 393, 268,
	269, 270, 271, 272, 273, 867, 274, 394, 275, 395,
	276, 868, 277, 278, 279, 280, 281, 396, 282, 283,
	869, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 870, 296, 735, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 871, 309, 398,
	308, 310, 311, 872, 312, 300, 301, 313, 736, 314,
	399, 400, 315, 873, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 874, 323, 875, 324, 325,
	326, 327, 328, 329, 330, 331, 876, 403, 404, 405,
	877, 878, 332, 333, 406, 407, 879, 334, 335, 336,
	337, 880, 881, 338, 339, 340, 341, 882, 342, 883,
	408, 343, 344, 345, 409, 410, 884, 885, 346, 886,
	887, 888, 889, 347, 348, 349, 350, 351, 1552, 0,
	659, 648, 649, 646, 647, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 1549, 0,
	190, 0, 0, 0, 0, 676, 641, 0, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 1550, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 723, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	731, 253, 254, 256, 389, 255, 732, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 733, 267,
	734, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 735,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 736, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	713, 714, 715, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 716, 1548,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 1551, 0, 0, 0,
	0, 0, 0, 634, 1546, 0, 0, 0, 611, 637,
	659, 648, 649, 646, 647, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 676, 641, 0, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 723, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	731, 253, 254, 256, 389, 255, 732, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 733, 267,
	734, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 735,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	146, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 736, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	713, 714, 715, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 955, 716, 0,
	0, 346, 0, 0, 0, 140, 347, 348, 349, 350,
	351, 627, 141, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 659, 648, 649, 646,
	647, 638, 0, 1141, 0, 0, 0, 0, 0, 637,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 723,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 733, 267, 734, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 735, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 146, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 736, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 713, 714, 715, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 955, 716, 0, 0, 346, 0, 0,
	0, 140, 347, 348, 349, 350, 351, 627, 141, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 659, 648, 649, 646, 647, 638, 0, 1141,
	0, 0, 0, 0, 0, 637, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 676, 641, 0,
	0, 0, 191, 192, 193, 353, 691, 355, 692, 194,
	693, 694, 1606, 195, 359, 360, 196, 197, 644, 675,
	695, 696, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 697, 215,
	698, 699, 629, 216, 0, 217, 0, 218, 0, 0,
	690, 220, 0, 221, 0, 0, 0, 632, 222, 224,
	223, 225, 677, 678, 655, 723, 0, 0, 0, 0,
	0, 226, 227, 700, 701, 702, 0, 228, 0, 229,
	0, 1611, 724, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 703, 237, 704, 705, 706,
	707, 708, 0, 666, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 1607, 689,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 731, 253, 254, 256, 389, 255, 732, 257,
	258, 260, 259, 626, 0, 656, 685, 261, 709, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	733, 267, 734, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 710, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 735, 297, 298, 633, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 736, 314, 711, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 712, 319, 320, 681,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 713, 714, 715, 0, 1608, 332, 333, 682,
	683, 654, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 409,
	716, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 659, 648, 649, 646, 647, 638,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	188, 189, 0, 0, 190, 634, 0, 0, 0, 676,
	641, 637, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 2250, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 659, 648, 649, 646,
	647, 638, 0, 625, 0, 0, 0, 0, 623, 624,
	1203, 0, 188, 189, 0, 0, 190, 634, 0, 0,
	0, 676, 641, 637, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 723,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	726, 0, 378, 238, 1456, 235, 0, 725, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 733, 267, 734, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	1455, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 735, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 736, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 713, 714, 715, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 619, 637, 659, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 723,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 621, 0, 265,
	0, 0, 266, 392, 733, 267, 734, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 735, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 736, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 713, 714, 715, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 659, 648,
	649, 646, 647, 638, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 0, 0, 190, 634,
	0, 0, 0, 676, 641, 637, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 723, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 731, 253,
	254, 256, 389, 255, 732, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 733, 267, 734, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 735, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 736,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 713, 714,
	715, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 716, 2100, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	659, 648, 649, 646, 647, 638, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 0, 0,
	190, 634, 0, 0, 0, 676, 641, 637, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 723, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	731, 253, 254, 256, 389, 255, 732, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 621, 0, 265, 0, 0, 266, 392, 733, 267,
	734, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 735,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 736, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	713, 714, 715, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 716, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 659, 648, 649, 646, 647, 638, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 188, 189,
	0, 0, 190, 634, 0, 0, 0, 676, 641, 637,
	0, 0, 191, 192, 193, 353, 691, 355, 692, 194,
	693, 694, 0, 195, 359, 360, 196, 197, 644, 675,
	695, 696, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 697, 215,
	698, 699, 629, 216, 0, 217, 0, 218, 0, 0,
	690, 220, 0, 221, 0, 0, 0, 632, 222, 224,
	223, 225, 677, 678, 655, 723, 0, 0, 0, 0,
	0, 226, 227, 700, 701, 702, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 703, 237, 704, 705, 706,
	707, 708, 0, 666, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 689,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 731, 253, 254, 256, 389, 255, 732, 257,
	258, 260, 259, 626, 0, 656, 685, 261, 709, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	733, 267, 734, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 710, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 735, 297, 298, 633, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 736, 314, 711, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 712, 319, 320, 681,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 713, 714, 715, 0, 0, 332, 333, 682,
	683, 654, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 409,
	716, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 659, 648, 649, 646, 647, 638,
	0, 625, 0, 0, 0, 0, 623, 624, 1203, 0,
	188, 189, 0, 0, 190, 634, 0, 0, 0, 676,
	641, 637, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 1611, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1658, 637, 659, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1620, 637, 659, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1618, 637, 659, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1602, 637, 659, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1590, 637, 659, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1588, 637, 1580, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 1583, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 1584, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 1585, 1582, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 1586, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 1581, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 1577, 637, 1580, 648, 649, 646, 647, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 1583, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 1584, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 1585, 1582, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 1586, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 1581, 351, 627, 659, 648, 649, 646,
	647, 638, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 188, 189, 0, 0, 190, 634, 0, 0,
	0, 676, 641, 637, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 723,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 733, 267, 734, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 735, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 736, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 713, 714, 715, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 659, 648,
	649, 646, 647, 638, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 1443, 1145, 190, 634,
	0, 0, 0, 676, 641, 637, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 723, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 731, 253,
	254, 256, 389, 255, 732, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 733, 267, 734, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 735, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 736,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 713, 714,
	715, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 0, 901, 637, 659, 648,
	649, 646, 647, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 676, 641, 0, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 723, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 731, 253,
	254, 256, 389, 255, 732, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 733, 267, 734, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 735, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 736,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 713, 714,
	715, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 0, 899, 637, 659, 648,
	649, 646, 647, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 676, 641, 0, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 723, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 731, 253,
	254, 256, 389, 255, 732, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 733, 267, 734, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 735, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 736,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 713, 714,
	715, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	659, 648, 649, 646, 647, 638, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 0, 0,
	190, 634, 0, 0, 0, 676, 641, 637, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 723, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	2666, 253, 254, 256, 389, 255, 732, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 733, 267,
	734, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 735,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 736, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	713, 714, 715, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 716, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 659, 648, 649, 646, 647, 638, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 188, 189,
	0, 0, 190, 634, 0, 0, 0, 676, 641, 637,
	0, 0, 191, 192, 193, 353, 691, 355, 692, 194,
	693, 694, 0, 195, 359, 360, 196, 197, 644, 675,
	695, 696, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 2585, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 697, 215,
	698, 699, 629, 216, 0, 217, 0, 218, 0, 0,
	690, 220, 0, 221, 0, 0, 0, 632, 222, 224,
	223, 225, 677, 678, 655, 723, 0, 0, 0, 0,
	0, 226, 227, 700, 701, 702, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 703, 237, 704, 705, 706,
	707, 708, 0, 666, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 689,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 731, 253, 254, 256, 389, 255, 732, 257,
	258, 260, 259, 626, 0, 656, 685, 261, 709, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	733, 267, 734, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 710, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 735, 297, 298, 633, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 736, 314, 711, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 712, 319, 320, 681,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 713, 714, 715, 0, 0, 332, 333, 682,
	683, 654, 334, 335, 2584, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 409,
	716, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 659, 648, 649, 646, 647, 638,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	188, 189, 0, 0, 190, 634, 0, 0, 0, 676,
	641, 637, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 723, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 736, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 713, 714, 715, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 659, 648, 649, 646,
	647, 638, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 188, 189, 0, 0, 190, 634, 0, 0,
	0, 676, 641, 637, 0, 0, 191, 192, 193, 2583,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	2585, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 723,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 733, 267, 734, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 735, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 736, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 713, 714, 715, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 2584, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 659, 648,
	649, 646, 647, 638, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 0, 0, 190, 634,
	0, 0, 0, 676, 641, 637, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 0, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 723, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 731, 253,
	254, 256, 389, 255, 732, 257, 258, 260, 259, 0,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 733, 267, 734, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 735, 297, 298,
	1600, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 736,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 713, 714,
	715, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 659,
	648, 649, 646, 647, 638, 0, 0, 1598, 0, 0,
	0, 0, 1596, 1597, 0, 188, 189, 0, 0, 190,
	0, 1599, 0, 0, 676, 641, 0, 637, 0, 191,
	192, 193, 0, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	722, 209, 210, 2585, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 723, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 724,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 0, 0, 378, 238, 0, 235, 0,
	725, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 0, 239, 240, 241, 728, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 729, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 731,
	253, 254, 256, 389, 255, 732, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 733, 267, 734,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 735, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	0, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 713,
	714, 715, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 2584, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 716, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 624, 0, 188, 189, 0, 0,
	190, 0, 634, 0, 0, 676, 0, 0, 637, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 675, 361, 362,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	677, 678, 0, 723, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	731, 253, 254, 256, 389, 255, 732, 257, 258, 260,
	259, 0, 0, 0, 685, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 733, 267,
	734, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 735,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 736, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 682, 683, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 952, 0, 792, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 2199, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 796,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 723, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 731, 253, 254, 256, 389, 255,
	732, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 733, 267, 734, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 735, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 146, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 736, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 148, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 955, 410, 0, 0, 346, 611, 0, 185, 140,
	347, 348, 349, 350, 351, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 117, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	775, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 146, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 148, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 955, 410, 0, 0, 346,
	0, 0, 185, 140, 347, 348, 349, 350, 351, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 769,
	0, 1225, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 775, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 146, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 148, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 955,
	410, 0, 0, 346, 611, 0, 185, 140, 347, 348,
	349, 350, 351, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 769, 0, 1225, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 146, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 955, 410, 0, 0, 346, 1939, 0,
	185, 140, 347, 348, 349, 350, 351, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 117,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 775, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 768, 0, 185, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 769, 0, 774, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 775, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 185, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 769, 0, 774, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	775, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 185, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 769,
	0, 774, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 185, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 1263, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 185, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	1748, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 185, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 2115, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 659, 648, 649, 646,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 1228, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 0, 0, 695, 696, 363, 0, 198, 364,
	0, 796, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 697, 215, 698, 699, 0, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 655, 723,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 731, 253, 254, 256,
	389, 255, 732, 257, 258, 260, 259, 0, 0, 656,
	390, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 733, 267, 734, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 735, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 736, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 713, 714, 715, 0,
	0, 332, 333, 406, 407, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 1008, 0, 792,
	791, 0, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 796, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	722, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 723, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 724,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 726, 0, 378, 238, 0, 235, 0,
	725, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 727, 239, 240, 241, 728, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 729, 247, 248,
	730, 0, 249, 250, 0, 0, 251, 0, 252, 731,
	253, 254, 256, 389, 255, 732, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 733, 267, 734,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 735, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	736, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	947, 0, 792, 791, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 796, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 723, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 946, 377, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 731, 253, 254, 256, 389, 255, 732, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	733, 267, 734, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 735, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 736, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 913, 0, 792, 791, 0, 0, 0,
	789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	796, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 722, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 723, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 724, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 912, 377, 726,
	0, 378, 238, 0, 235, 0, 725, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 727, 239,
	240, 241, 728, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 729, 247, 248, 730, 0, 249, 250,
	0, 0, 251, 0, 252, 731, 253, 254, 256, 389,
	255, 732, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 733, 267, 734, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 735, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 736, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 785, 0, 792, 791,
	0, 0, 0, 789, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 796, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 723, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	787, 377, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 731, 253,
	254, 256, 389, 255, 732, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 733, 267, 734, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 735, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 736,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 501, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 181, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	180, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	178, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 184, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 181, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 180, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 792, 791, 346, 0, 0, 789, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 184, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 796, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 722, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 723, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 724, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 726, 0, 378, 238, 0,
	235, 0, 725, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 727, 239, 240, 241, 728, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 729,
	247, 248, 730, 0, 249, 250, 0, 0, 251, 0,
	252, 731, 253, 254, 256, 389, 255, 732, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 733,
	267, 734, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	735, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 736, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 181, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	180, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 792,
	791, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 184, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 796, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	722, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 723, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 724,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 726, 0, 378, 238, 0, 235, 0,
	725, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 727, 239, 240, 241, 728, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 729, 247, 248,
	730, 0, 249, 250, 0, 0, 251, 0, 252, 731,
	253, 254, 256, 389, 255, 732, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 733, 267, 734,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 735, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	736, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 792, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 184, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 796, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 722, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	723, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 724, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 726, 0, 378, 238, 0, 235, 0, 725, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	727, 239, 240, 241, 728, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 729, 247, 248, 730, 0,
	249, 250, 0, 0, 251, 0, 252, 731, 253, 254,
	256, 389, 255, 732, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 733, 267, 734, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 735, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 736, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 1678, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 1676, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 1724,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 1681, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 1722, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	1680, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 1723, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 1678, 198, 364, 0,
	0, 1673, 199, 200, 201, 0, 203, 204, 205, 202,
	1676, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 1681, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 1672, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 1680,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	1679, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 929, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 775,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 781, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 783, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 775, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 777,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 779, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 775, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 430, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 429, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 428, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 1661,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 2268, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 2268, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 2265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 775, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 1422,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1420, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	1402, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 527, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 987, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 529,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 524, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 1278, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 1277, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 527, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 987, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 529, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 524, 404,
	405, 0, 0, 332, 988, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 527, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 518, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 529, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 971, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	524, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	944, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 943, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 940, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 939, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 937, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 936, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 933, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	932, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 921, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 919, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 918, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 915,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 908, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 910, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 799, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 801, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 797, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 527, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 518, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 517, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 529, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 519, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 520, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 524,
	404, 405, 0, 0, 332, 522, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 509,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 510, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 507, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 499, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 449, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 1986, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 1984, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 1973, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 510, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 1288, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 0, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 752, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 0, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 0, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 0, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1122, 0, 0,
	0, 0, 1879, 1880, 0, 1897, 1898, 1899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 1078, 1079, 1100, 1108, 1109, 1110, 1118, 1119,
	1120, 1097, 0, 0, 0, 1096, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 1894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 1100, 0, 0, 1103,
	1104, 1105, 1106, 1097, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1885, 0, 0, 0, 0, 0, 0, 1121, 0, 0,
	0, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	1086, 1901, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 1900,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 1121,
	0, 0, 0, 0, 1895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	1896, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 1078, 1079, 0,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 1116, 0, 0,
	1096, 0, 0, 1095, 1111, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 1122, 1114, 0, 0, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 1080, 0, 0, 0, 0,
	0, 1100, 1919, 0, 0, 0, 0, 0, 1097, 0,
	1891, 1892, 1893, 0, 0, 0, 0, 1890, 1888, 1889,
	1881, 1882, 1883, 1884, 1886, 1887, 0, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 1871, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 1115, 1123, 1111, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 1113, 0, 1100, 0, 0, 0, 478, 1101,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 477, 1103,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 1086, 0,
	1107, 0, 0, 1879, 1880, 0, 1897, 1898, 1899, 0,
	0, 0, 0, 0, 0, 1102, 0, 479, 1115, 1123,
	0, 0, 0, 0, 53, 0, 481, 54, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 1121, 1095, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 1113, 1111, 1894, 56, 0,
	0, 0, 1101, 1081, 0, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1112, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 1885, 0, 1107, 0, 2554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 1116, 0, 1086, 0, 0,
	0, 1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 118, 59, 0, 60, 1096, 0, 1115, 1123, 1111,
	0, 0, 0, 0, 0, 1895, 1081, 0, 146, 1122,
	0, 0, 0, 0, 0, 480, 1121, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 1113, 0, 1100, 0, 148, 0,
	0, 1101, 0, 1097, 0, 1114, 0, 0, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 0, 0, 1112, 2504, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 1896, 0, 140, 0, 0, 0, 0, 0, 0,
	141, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	1086, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 1102, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 1121,
	1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 1113, 1111, 0,
	0, 0, 0, 0, 1101, 1081, 0, 0, 1122, 0,
	0, 1891, 1892, 1893, 0, 0, 0, 0, 1890, 1888,
	1889, 1881, 1882, 1883, 1884, 1886, 1887, 0, 0, 1080,
	1112, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 1107, 0, 2458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 1116, 0, 1086,
	0, 0, 0, 1095, 1078, 1079, 0, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 0, 0, 0, 1096, 0, 1115,
	1123, 1111, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 1113, 0, 1100, 0,
	0, 0, 0, 1101, 0, 1097, 0, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 0, 1112,
	2428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 1121, 1095, 1078, 1079, 0, 1108, 1109, 1110, 1118,
	1119, 1120, 0, 0, 0, 0, 1096, 0, 0, 1113,
	1111, 0, 0, 0, 0, 0, 1101, 1081, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1112, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1097, 0, 1114, 0, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 0, 1107, 0, 2423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 0, 0, 0, 1116,
	0, 1086, 0, 0, 0, 1095, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	0, 1115, 1123, 1111, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 1113, 0,
	1100, 0, 0, 0, 0, 1101, 0, 1097, 0, 1114,
	0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0,
	0, 1112, 2419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 1086, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 1115, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 1121, 1095, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096, 0,
	0, 1113, 1111, 0, 0, 0, 0, 0, 1101, 1081,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 1112, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1097, 0, 1114, 0,
	0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 1107,
	0, 2349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 0,
	0, 1116, 0, 1086, 0, 0, 0, 1095, 1078, 1079,
	0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0,
	0, 1096, 0, 1115, 1123, 1111, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	1113, 0, 1100, 0, 0, 0, 0, 1101, 0, 1097,
	0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 0, 1112, 2315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 1104, 1105,
	1106, 0, 0, 0, 0, 0, 1086, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 1115, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 1121, 1095, 1078, 1079, 0,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0,
	1096, 0, 0, 1113, 1111, 0, 0, 0, 0, 0,
	1101, 1081, 0, 0, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1112, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1097, 0,
	1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	0, 1107, 0, 2314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 1116, 0, 1086, 0, 0, 0, 1095,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 1115, 1123, 1111, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 1113, 0, 1100, 0, 0, 0, 0, 1101,
	0, 1097, 0, 1114, 0, 0, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 0, 0, 0, 1112, 2279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 1086, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 1115, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 1121, 1095, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 1113, 1111, 0, 0, 0,
	0, 0, 1101, 1081, 0, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1112, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 0, 1107, 0, 2118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 1116, 0, 1086, 0, 0,
	0, 1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 0, 0, 0, 1096, 0, 1115, 1123, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 1113, 0, 1100, 0, 0, 0,
	0, 1101, 0, 1097, 0, 1114, 0, 0, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 0, 0, 1112, 2094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	1086, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 1121,
	1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 1113, 1111, 0,
	0, 0, 0, 0, 1101, 1081, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	1112, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 1107, 0, 1538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 1116, 0, 1086,
	2617, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 1841, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1079, 1102,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0,
	1096, 0, 0, 0, 1111, 0, 1116, 0, 0, 0,
	0, 1081, 1095, 0, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 0, 0, 1086, 0, 1911, 0, 0,
	1910, 0, 0, 0, 0, 0, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 1115, 1123, 0, 0, 1096,
	0, 0, 0, 1111, 0, 0, 0, 0, 1814, 0,
	1081, 0, 0, 1122, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 1080, 0, 0, 0, 0, 1101,
	1100, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 1815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 0,
	1107, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 1123, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 1101, 0,
	1637, 0, 0, 0, 0, 0, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	0, 0, 0, 1111, 1112, 0, 0, 1636, 0, 0,
	1081, 0, 1114, 1122, 0, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 0, 0, 1080, 0, 0, 0, 0, 1107,
	1100, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 1078, 1079, 1095, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096, 0,
	0, 0, 1111, 0, 0, 1103, 1104, 1105, 1106, 1081,
	0, 0, 1122, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 1115, 1123, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 1114, 0, 1121, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 1113, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 1086, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 1116, 0, 0, 0, 1078, 1079, 1095, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096, 0,
	0, 0, 1111, 1112, 608, 0, 0, 0, 0, 1081,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 1107, 1100,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 1114, 0, 1102, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	1116, 0, 0, 0, 1078, 1079, 1095, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 0, 0, 0, 1096, 0, 0,
	0, 1111, 0, 0, 1103, 1104, 1105, 1106, 1081, 0,
	0, 1122, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 1115, 1123, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	1114, 0, 1121, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 1112, 0, 0, 0, 1917, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 2098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 0, 0, 0, 1096, 0, 1107, 0, 1111,
	0, 0, 0, 1912, 0, 0, 1081, 0, 0, 1122,
	1114, 0, 1102, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 1116,
	1080, 0, 0, 0, 0, 1095, 1100, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 0, 1111, 0,
	0, 1103, 1104, 1105, 1106, 1081, 0, 0, 1122, 1114,
	1086, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 1080,
	1115, 1123, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 0, 0, 1086,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 1116, 0, 0,
	0, 1078, 1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 0, 1111, 1112,
	0, 0, 1870, 0, 0, 1081, 0, 0, 1122, 0,
	0, 0, 0, 1877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 1107, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 1114, 0, 1102,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 1116, 0, 0, 0,
	1078, 1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 0, 0, 1111, 0, 0,
	1103, 1104, 1105, 1106, 1081, 0, 0, 1122, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 1115,
	1123, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 1114, 0, 1121, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 1113, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 1086, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 1116, 0, 0, 0,
	1078, 1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 0, 0, 1111, 1112, 0,
	0, 0, 0, 0, 1081, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 1107, 1100, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 1114, 0, 1102, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 1116, 0, 0, 0, 1078,
	1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 1081, 0, 0, 1122, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1115, 1123,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 1114, 0, 1121, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 1113, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 1116, 0, 0, 0, 1078,
	1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 1107, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 1114, 0, 1102, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 1116, 0, 0, 0, 0, 0,
	1095, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 1341, 1330, 1361, 1319, 1351,
	1350, 0, 0, 1321, 1320, 0, 0, 1115, 1123, 1363,
	1362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 1113, 0, 0, 1356, 0, 1348,
	1347, 1101, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1343, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 1107, 0, 1334, 1332, 1335, 1336, 1337, 1338,
	1339, 0, 1360, 0, 0, 0, 0, 1102, 0, 1323,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 1333, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 1330,
	1361, 1319, 1351, 1350, 0, 0, 1321, 1320, 0, 0,
	0, 1342, 1363, 1362, 0, 1463, 1461, 1462, 1465, 1464,
	0, 0, 0, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 1326, 548, 0, 574, 0, 0, 0,
	1356, 0, 1348, 1347, 1340, 1327, 0, 0, 0, 0,
	0, 0, 1346, 0, 553, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 1324, 0,
	0, 1357, 1358, 1359, 0, 1345, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 554, 1328, 0, 0, 0, 0, 1364,
	1329, 560, 561, 0, 0, 0, 570, 1334, 1332, 1335,
	1336, 1337, 1338, 1339, 0, 1360, 0, 0, 0, 0,
	575, 555, 1323, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 0, 0, 1331, 0, 0, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 0, 564, 0, 0, 0, 0, 559, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	0, 576, 0, 0, 0, 0, 0, 1340, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1357, 1358, 1359, 0, 0, 0,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 1364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	550, 567, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 572, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 565, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 571,
}
var sqlPact = [...]int{

	4154, -1000, -5, -1000, -1000, -1000, 178, -1000, -1000, -1000,
	-1000, 177, 173, 171, -1000, 166, 165, 164, 163, 162,
	158, 156, 155, 154, 144, 140, -1000, 139, -1000, -1000,
	-1000, -1000, 138, 137, 134, -1000, 129, 1195, 22978, 128,
	125, 1419, -1000, 35932, 117, -1000, 1154, 26719, 1046, 1315,
	-1000, 114, 1193, 35593, 4775, 1532, 1207, 1783, 35251, 22636,
	1780, 1482, 34909, -1000, -1000, 34567, 113, 107, 105, 103,
	100, -1000, -1000, 34225, 95, 94, 93, 92, 88, 87,
	86, 85, 82, 80, 79, 78, 77, 76, -1000, 75,
	72, 70, -1000, 43322, 58, 57, 56, 1191, 53, 52,
	51, 50, -1000, -1000, 975, 47, 41, 40, 39, 36,
	130, 35, 34, 33, 32, -1000, 954, 553, 1571, 8752,
	1130, 1129, 1082, 1078, 1087, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	37966, 35932, 31, -105, 30, -1000, 2075, 675, 18810, 4154,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26377, 26035, 22294, 33883, 33541, 6203, 851, -1000, -9,
	24334, 35932, -1000, 111, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14284, 13904, 563, 111, -1000, -1000,
	-1000, 33199, 21941, 32857, 1592, 32515, -1000, -1000, 32173, -1000,
	-1000, 2036, 1785, 1777, 25693, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31834, 31492, 31150, 30808, 21588, 544, -1000,
	-1000, -1000, 17090, -1000, -1000, -1000, -1000, 28, -1000, 26,
	25, -1000, 23, 22, 21, 20, 18, 16, -1000, 15,
	14, -1000, 7, 4, -1000, 2, 1, 1067, 936, 1216,
	30466, 947, 1293, -1000, -1000, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35932, -1000, 15340, -1000, 543, -1000,
	1705, -1000, 15340, -1000, 1291, -1000, -1000, -1000, -1000, -1000,
	35932, -1000, -1000, -1000, -1000, -1000, -1000, 2321, 1295, 541,
	30124, -1000, 1582, -1000, 631, 817, -1000, -1000, -1000, 9456,
	189, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1561, 21235, 1526, 2115, 2033, 2318, 1474, 2001, 2000, 1994,
	1875, 1838, 2315, 1013, 2314, 1842, 1113, 2313, 1809, 1273,
	729, 2312, 1704, 1698, -1000, -1000, -1000, -1000, 965, -1000,
	-1000, -1000, 28075, -1000, -1000, -1000, -1000, -1000, -1000, 903,
	946, -1000, -1000, -1000, -1000, -1000, 954, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1440, 2053, 2053, 2053, 2135, 296,
	275, -1000, 130, -1000, 1754, -1000, 1260, -1000, -1000, -1000,
	42480, -1000, -1000, 15340, 15340, 15340, 15340, 15340, 1218, -1000,
	566, -1000, 539, 538, 7302, -1000, -1000, 2301, -1000, -1000,
	-1000, 364, -1000, -1000, 15340, 111, -1000, -1000, -1000, -1000,
	537, 2308, -1000, 695, -1000, -1000, -1000, 647, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1736, 536, 535,
	531, -1000, 529, -1000, -1000, 528, 524, 522, 520, 519,
	518, 516, 512, 511, 506, 504, 503, 502, 492, 490,
	1103, -1000, 681, -1000, -1000, 681, 681, -1000, 448, 448,
	467, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 448,
	-1000, -1000, -1000, 635, 609, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 484, 1436, -1000,
	-1000, 1436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 848,
	37288, -15, 35932, -1000, 483, -15, -1000, -1000, 481, -1000,
	9808, 9808, -1000, -1000, -1000, 15340, -1000, 1967, -1000, 475,
	-123, 325, 607, -1000, 17778, 20531, -1000, -1000, 1182, 1954,
	768, -1000, 1075, 1952, 574, -1000, 654, 1945, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1206, -1000,
	1233, 1944, -100, 1769, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23317, 24334, -9, -10, -1000, -1000, -1000, 5852, 42480, -1000,
	42480, -1000, 932, 19498, 111, -1000, -1000, -1000, -1000, 479,
	1411, 650, 1410, -1000, 357, -1000, 29782, 650, 1397, -1000,
	-1000, -1000, 28075, -1000, 35932, -1000, 35932, -1000, 960, -1000,
	37627, 118, 1942, -1000, -1000, 118, 1940, -1000, 116, 1927,
	-1000, -1000, 1330, 1924, -1000, -83, 1922, -1000, -1000, -1000,
	15340, -28, -1000, -1000, -1000, 675, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 29440, 23656, 1366, 584, 42480, 2180, 43240, 23317, 42480,
	23656, -1000, -1000, 35932, -1000, 15340, -1000, 2173, 1437, -17,
	-1000, -1000, -1000, -1000, -1000, 1480, 1502, 758, 1379, 9456,
	9456, 2018, -1000, 184, 6203, -1000, -1000, -1000, -1000, 29098,
	-1000, -1000, -1000, 1264, 35932, -1000, -1000, 1734, -1000, 23656,
	35932, -1000, 35932, -1000, 35932, -1000, 35932, -1000, 35932, -1000,
	-1000, -1000, -1000, -1000, 4608, -1000, 1731, -1000, -1000, 35932,
	-1000, 1444, -1000, -1000, -1000, 28759, 28417, -1000, 1066, 881,
	-1000, -1000, 119, -1000, 35932, 2094, 629, -1000, 1440, 1448,
	1720, 730, 1300, 1547, 13524, 1533, 15340, 130, -1000, -1000,
	130, 130, 8372, -1000, -1000, -1000, 35932, -1000, 43047, 43240,
	6203, 866, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340,
	15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340,
	15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340,
	15340, 15340, 15340, 15340, 1470, 15340, 844, 15340, 15340, 15340,
	15340, 2002, 1215, 405, 1262, -1000, 2274, 2274, 2274, 42759,
	42759, 393, 566, -1000, 15340, -1000, 510, 15340, 275, 40659,
	-12, 6936, -1000, -1000, -1000, 13172, 673, 42480, 111, 6556,
	-1000, 2298, 940, 1745, 1642, 477, 565, 564, 559, 557,
	15340, 15340, 12820, 12440, 12060, 16044, 11680, 15340, 7668, 15340,
	15340, 15340, 15340, 11300, 10920, -1000, 476, -1000, -1000, -1000,
	-1000, 2297, -1000, -1000, 2296, -1000, 865, 856, 855, 2291,
	-1000, -17, -1000, 37288, -1000, 35932, -15, 2169, 35932, 15340,
	110, -1000, 41516, -1000, 110, -33, 42480, 1566, 1559, 19154,
	1602, 1231, 1231, 1231, -1000, 473, 571, 607, 5139, 10540,
	-1000, 27058, 1235, 206, 272, 17434, 1967, -1000, 35932, -29,
	1057, -1000, 25351, 2076, 2063, 2042, 28075, 2152, 510, 1766,
	1694, -1000, 6203, 842, 28075, 1161, 23317, 2081, 840, 2147,
	510, 1764, 1681, 834, 35932, 6203, 2077, 605, -1000, 35932,
	-1000, -1000, -1000, 1679, -35, -1000, -1000, 25012, 2167, 1912,
	-1000, 1153, -1000, 1909, 2165, 35932, 1287, 1387, -1000, -1000,
	874, 1884, 670, 135, 2163, 135, 19843, -1000, 35932, -1000,
	35932, -1000, -1000, 35932, -1000, 35932, -1000, 35932, 35932, -1000,
	35932, 23317, 23317, -36, 39134, 24673, 833, -1000, 712, 25012,
	3627, -56, -1000, 899, -1000, -1000, -1000, -1000, 308, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 467, 1103, 448, 448, 448,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 635, 609, -1000,
	-1000, 681, 681, 681, -1000, -1000, -41, 1677, 634, -57,
	756, -17, -1000, 1436, -1000, 1314, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2307,
	-1000, 2283, -1000, -1000, 2281, -18, -1000, -18, -1000, 6203,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35932, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3584, -1000, -1000, -1000,
	-1000, -1000, -1000, 35932, 35932, 35932, -1000, 28075, 653, 1724,
	-1000, 2064, 1448, 1720, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 42480, -1000, 386, -1000, -1000, 42480, 1042, 1579,
	-1000, 1579, -19, -1000, 41326, 1546, 35932, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 628, 641,
	641, 852, 852, 852, 852, 2242, 2917, 160, 349, 269,
	269, 269, 269, 269, 269, 269, 269, 468, 620, 620,
	468, 468, 468, 468, 468, 269, 269, 269, 42759, 42670,
	727, 15340, 15340, 831, 1203, 405, 727, 15340, 727, 727,
	727, 727, -1000, 1375, -1000, -1000, -1000, -1000, 1674, 444,
	16044, 16044, -1000, -1000, -1000, 7302, 15340, -1000, -1000, -1000,
	-1000, 441, 15340, -1000, 40782, -224, 271, -92, -1000, 15340,
	562, -104, -1000, 926, -1000, 15340, -1000, -11, 15340, 15340,
	15340, 270, -1000, 267, -1000, 830, -1000, 829, 827, 825,
	-1000, 440, 1229, 438, 436, 15340, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42391, 38702, 266, -1000, 1671, -92,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 265, -1000, 251,
	-1000, 42201, -92, 250, 38682, -1000, 16044, 16044, 16044, 7302,
	433, 249, -1000, 41197, -1000, 42112, 10160, 10160, 10160, 245,
	41884, 15340, -92, 38650, 4726, 4565, -63, -64, -1000, -65,
	-1000, 2279, -73, 243, 624, 623, 622, 242, -1000, -1000,
	432, -78, -80, 670, 9808, 18466, 6203, -1000, 670, -1000,
	15340, 19154, 19154, 1359, 1551, 19154, -1000, -1000, -1000, -1000,
	27058, 533, 607, 27058, -1000, 2275, 1514, 238, -1000, -1000,
	-1000, 35932, 431, -1000, 607, 237, 1011, 35932, 35932, 35932,
	-1000, -1000, 1382, 36949, 1371, 43240, 35932, -1000, 430, 429,
	1544, 1542, 35932, 35932, 36610, 36271, 35932, 1151, 510, -1000,
	2068, 427, -1000, 35932, 1073, 23317, 651, 621, 35932, 510,
	-1000, 2058, 426, 6203, 1051, -1000, 617, 1620, 1305, -1000,
	931, 1670, 35932, 236, -81, -20, 43240, -1000, -1000, -1000,
	-1000, -1000, 35932, 466, 35932, 510, 35932, 23317, 23317, 510,
	35932, 1874, 1962, 589, 35932, 1547, 15340, 1157, -1000, 18122,
	696, 35932, 1016, 81, -1000, -1000, -1000, 599, 35932, -1000,
	-1000, 118, 118, -1000, 116, 1330, -1000, -83, -1000, -1000,
	-1000, 35932, 23317, -87, -1000, 719, 717, 716, -1000, 43240,
	-1000, 558, 795, -1000, 2268, 649, 35932, 9456, 9456, -1000,
	1573, -1000, -1000, 1049, -1000, 1088, -1000, -1000, -1000, -1000,
	9456, -1000, -31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1239, 1258, -1000, -1000, -1000, 1042, -1000, 15340, 2262, -1000,
	-1000, -1000, 8372, -1000, -1000, -1000, 35932, -110, 15340, 727,
	727, 15340, 16044, 16044, -1000, 727, -1000, -1000, -1000, -1000,
	-1000, 1661, 424, 15340, 43240, 4028, 3435, -108, 468, 15340,
	-25, -1000, 15340, -1000, 40500, -1000, -1000, 323, 1959, -1000,
	15340, 41795, 235, 9104, -1000, 41605, -16, -16, -1000, 2306,
	1429, 1383, 1062, 985, 2257, -1000, 20187, 671, 1240, 40377,
	43047, 43240, -1000, 15340, -1000, -1000, 1660, 15340, -1000, 43047,
	43240, 16044, 16044, 16044, 16044, 16044, 16044, 16044, 16044, 16044,
	16044, 16044, 16044, 16044, 16044, 16044, 16044, 16044, 16044, 16044,
	1611, 16044, 2213, 2213, 2213, -26, 15340, -1000, 1718, 1660,
	15340, 15340, 43240, 233, 232, 231, -1000, 15340, -92, 15340,
	15340, 15340, -1000, -1000, -1000, 230, -1000, 2254, -1000, -1000,
	-1000, -1000, -1000, 3627, -1000, -1000, 1633, -1000, -106, -1000,
	1967, -1000, 1633, 42480, -1000, 1359, -1000, 423, 15340, 19154,
	-1000, 560, -1000, -111, -1000, 27058, -1000, 556, -221, -1000,
	598, -1000, 607, 422, 35932, 27058, -1000, -1000, -1000, 813,
	810, 1861, -1000, 1356, -1000, 704, -1000, 1085, 15340, 16746,
	421, 420, 1170, -1000, 1846, 1330, 1792, 1330, -1000, -29,
	1056, -1000, 616, 15340, -1000, 805, -1000, 1136, 20882, -1000,
	-1000, 615, 15340, -1000, 802, 20882, 649, 1657, 905, -1000,
	925, -1000, 1594, -1000, 25012, 419, 35932, 418, -1000, 417,
	-1000, 650, -1000, 416, 35932, 1492, 589, 23995, -1000, 650,
	1016, -1000, 42480, -1000, 1016, 8020, 2037, -114, -1000, -1000,
	-1000, 670, 19843, 19154, 15340, -116, -1000, -1000, -1000, -1000,
	-31, 2024, 2024, -1000, 2247, -1000, 550, 229, -1000, 27736,
	-31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35932, 1237,
	6203, 35932, 35932, 35932, 1246, 40218, -1000, 2052, 6203, 2191,
	727, 698, 297, 15340, 43240, 42949, -117, 15340, 15340, -1000,
	227, 15340, 548, 42480, -1000, -1000, -1000, 42480, 15340, 2304,
	15340, 225, 224, 223, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 222, -1000, -1000, 38305, 15340, 221, -1000, 219,
	217, 42480, 1718, 42480, -1000, -1000, 636, 636, 942, 942,
	942, 942, 2213, 1241, 358, 1228, 505, 505, 505, 736,
	818, 818, 505, 505, 505, 1656, 1455, 415, 2695, 15340,
	216, -1000, -1000, 42480, 42480, 215, -1000, -1000, -1000, -92,
	321, 40095, 39936, -1000, 214, 213, 1627, 2134, -1000, 19154,
	1627, -1000, 35932, 42480, -1000, -123, -1000, 2237, -1000, -1000,
	1514, -1000, 5500, 27058, 35932, -124, -1000, 35932, 35932, 35932,
	1786, -1000, 2663, -1000, 39813, -125, -1000, 322, 2105, 15340,
	-1000, -1000, 413, 16746, 35932, -1000, 1554, 1477, 749, 35932,
	-1000, 35932, -1000, 35932, 35932, 35932, 20882, -126, 35932, 23317,
	-1000, 412, 111, 20882, -132, 6203, -1000, -1000, 23317, 771,
	-1000, 1194, 1597, -1000, 16746, 411, 35932, 25012, 2161, -1000,
	16746, 1279, 1512, 589, 23995, -1000, 874, -1000, -1000, -42,
	-1000, 389, 510, 1016, -1000, -52, 42480, 597, 2008, -1000,
	2003, 546, -1000, -1000, -53, 410, -1000, 596, 595, -1000,
	-54, -1000, 568, -1000, -1000, -1000, 1164, 1164, -1000, -1000,
	-1000, 2052, 15340, 15340, 42949, -133, -1000, 727, 727, -1000,
	39654, -1000, 42480, -1000, 41605, -1000, -1000, -1000, -1000, 1188,
	-1000, 39531, -1000, -1000, -1000, -1000, 16044, 1653, 409, 43240,
	39372, -1000, -1000, 15340, -1000, -1000, -1000, -1000, 668, 15340,
	15340, 1967, 668, -138, 607, -1000, -1000, -1000, 2229, -1000,
	-140, -1000, -1000, -1000, -1000, 35932, -1000, 35932, -1000, 6203,
	35932, 1635, 1344, -1000, -1000, 1541, 406, 16044, 35932, -1000,
	1138, 16746, 2052, 111, 6203, 2052, 39249, 6556, -141, -143,
	1325, -1000, 1316, 15340, -1000, 43240, 1330, 1330, -1000, 794,
	774, -1000, 773, -1000, -1000, 15340, -1000, 769, -1000, -83,
	20882, -1000, -1000, 2132, 1197, -146, 16746, -148, 208, 510,
	-151, 35932, -1000, 589, 23995, -1000, 1962, 1788, 35932, 2040,
	-1000, -1000, 405, 404, 403, -1000, 27397, 27397, 23317, 23317,
	1237, -1000, 35932, -1000, -1000, -1000, 727, 727, -1000, -1000,
	204, 1240, 2129, -1000, 39213, 16044, 43240, -154, -1000, 39090,
	-1000, 35932, 42480, -92, -1000, -1000, 27058, 469, -1000, -1000,
	1425, -1000, -1000, 35932, 1272, -1000, -1000, 15340, 2695, 400,
	1594, 397, -1000, -1000, -1000, -1000, -1000, -1000, 2105, -11,
	-1000, 1074, -1000, -1000, 42480, 2093, -1000, -1000, 35932, 35932,
	395, -16, 394, -1000, 1225, 35932, 1138, -156, -1000, 1594,
	-1000, 1138, 383, 23995, -1000, 1492, 869, -159, 35932, -1000,
	23317, 23317, -1000, -161, -1000, -1000, -1000, -162, -1000, 1069,
	15340, 39213, -167, -1000, -1000, -90, -1000, 2156, -1000, -1000,
	-1000, -1000, 1784, 38967, 1427, 35932, -1000, 35932, 2052, 202,
	35932, 709, 6203, -1000, -1000, 15340, 201, 15340, 381, 375,
	368, 1594, 1138, -1000, 1594, 16746, -1000, 1512, 949, -1000,
	670, -1000, -172, -173, -1000, -1000, 195, 15692, 15692, -92,
	-1000, 35932, 366, 1757, -1000, 1266, 1247, 194, -178, -1000,
	-1000, 357, -1000, 15340, -1000, -180, 2304, -181, 35932, 35932,
	35932, -1000, 1594, -1000, -183, -1000, 19843, -1000, 649, 649,
	-1000, -1000, -1000, 16395, 1301, 997, 40941, -1000, -1000, -1000,
	35932, -1000, 1277, 1270, 957, -1000, -1000, -1000, -1000, -1000,
	1427, 42480, -1000, -1000, -186, -191, -192, -1000, 1138, -169,
	-1000, -1000, 2190, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1984, -1000, 728, 1422, 1422, 1266, 346, 333, 1230, 1594,
	-1000, 14988, -1000, 2198, -1000, -1000, 1424, -1000, -1000, 1164,
	1164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 193,
	693, 192, 687, -1000, 330, -1000, 1475, -59, 14636, 870,
	347, -93, -1000, -193, -1000, 42480, -1000, 329, -1000, 14636,
	1164, -1000, 14636, 14636, -198, -1000, -1000, -199, -1000, -62,
	1164, -98, -1000, -1000, 1164, -1000,
}
var sqlPgo = [...]int{

	0, 2713, 2712, 1829, 2711, 2128, 2707, 2704, 2703, 2699,
	2113, 2698, 2695, 2694, 2690, 2683, 2678, 2675, 2671, 2668,
	2667, 2666, 2661, 2660, 2659, 2655, 2654, 2652, 2058, 2651,
	2056, 2650, 2649, 2648, 2640, 2639, 30, 2637, 2636, 2634,
	2047, 2633, 2630, 2629, 2628, 2012, 2626, 2005, 2624, 2622,
	1997, 2621, 2618, 2617, 1976, 2616, 1974, 2614, 80, 114,
	1967, 2613, 2611, 1962, 1957, 1896, 2608, 1890, 2604, 2602,
	1887, 1879, 2601, 109, 2596, 2592, 2589, 1859, 1845, 2587,
	2586, 2585, 151, 2583, 1832, 2580, 2576, 2573, 2572, 2568,
	2562, 2561, 2559, 2558, 2557, 2555, 2553, 2551, 2548, 2541,
	2540, 2538, 2536, 2535, 163, 2531, 2530, 1823, 1791, 2529,
	2528, 35, 31, 20, 62, 107, 152, 2877, 144, 2526,
	2525, 2519, 2517, 2515, 2512, 65, 105, 95, 2510, 100,
	2508, 2506, 49, 37, 25, 29, 71, 91, 2505, 2502,
	2098, 28, 2501, 2497, 134, 2494, 24, 26, 2331, 157,
	155, 57, 118, 2490, 2488, 2481, 51, 117, 15, 7,
	5, 3, 41, 8, 1, 2478, 2, 4, 2477, 2465,
	19, 76, 143, 2463, 46, 87, 2462, 2459, 129, 2457,
	64, 94, 1701, 103, 119, 188, 104, 2456, 68, 18,
	67, 2455, 2453, 159, 43, 83, 145, 113, 2452, 56,
	160, 127, 78, 133, 131, 2451, 2450, 2449, 101, 2448,
	116, 84, 2446, 2443, 79, 2440, 90, 138, 2436, 139,
	111, 2431, 2430, 88, 2425, 120, 2424, 2423, 158, 148,
	112, 16, 45, 70, 13, 1678, 1673, 136, 93, 58,
	52, 2422, 819, 1332, 1307, 77, 2420, 82, 55, 32,
	61, 86, 146, 34, 2417, 2416, 135, 2415, 2412, 2406,
	2404, 2403, 106, 2402, 2401, 2400, 75, 38, 47, 85,
	36, 132, 128, 121, 156, 97, 2398, 81, 125, 2396,
	820, 2391, 2387, 1764, 122, 2386, 2384, 2383, 1724, 1702,
	1176, 386, 2382, 2380, 1163, 1041, 2378, 2377, 89, 2373,
	115, 108, 92, 140, 137, 124, 2371, 123, 50, 2370,
	73, 22, 0, 1641, 1087, 2369, 126, 72, 2367, 2366,
	2364, 2361, 33, 11, 9, 6, 14, 12, 42, 27,
	2360, 2358, 130, 98, 69, 2357, 154, 2356, 2354, 2353,
	40, 2352, 23, 2351, 21, 2348, 2345, 17, 10, 2342,
	2339, 147, 2337, 96, 2335, 2165, 2333, 150, 2329, 2328,
	2016, 2326, 53, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 127, 127, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	124, 124, 129, 129, 129, 131, 131, 128, 128, 123,
	123, 28, 28, 71, 71, 114, 64, 64, 64, 310,
	310, 311, 311, 110, 110, 111, 111, 111, 111, 112,
	112, 113, 113, 113, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	50, 55, 55, 55, 53, 53, 53, 52, 52, 52,
	51, 51, 51, 54, 54, 54, 184, 184, 183, 183,
	187, 187, 56, 56, 56, 56, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	59, 59, 59, 59, 59, 279, 279, 278, 57, 57,
	254, 254, 60, 60, 209, 209, 61, 61, 61, 61,
	61, 62, 62, 72, 72, 351, 351, 351, 355, 355,
	356, 356, 357, 357, 357, 357, 357, 357, 357, 353,
	353, 67, 67, 67, 67, 68, 68, 68, 69, 69,
	109, 109, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 33, 34, 34, 35, 35, 36, 36, 36, 78,
	78, 78, 80, 77, 77, 77, 79, 79, 79, 79,
	81, 81, 82, 82, 82, 82, 82, 83, 83, 304,
	302, 302, 303, 303, 154, 154, 154, 154, 154, 155,
	155, 155, 309, 309, 309, 309, 309, 309, 308, 308,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 96, 96, 96,
	104, 104, 104, 104, 104, 104, 104, 85, 85, 90,
	90, 90, 90, 90, 86, 86, 91, 91, 92, 92,
	93, 93, 93, 93, 93, 93, 87, 87, 87, 87,
	95, 95, 95, 95, 94, 94, 100, 100, 100, 100,
	100, 100, 97, 97, 97, 97, 98, 98, 98, 101,
	101, 101, 101, 88, 88, 89, 89, 102, 102, 103,
	103, 103, 103, 103, 103, 99, 99, 99, 352, 352,
	354, 354, 65, 65, 43, 43, 44, 44, 156, 156,
	157, 157, 233, 233, 233, 233, 158, 158, 130, 130,
	130, 161, 162, 162, 159, 159, 160, 160, 163, 163,
	163, 165, 165, 166, 166, 167, 167, 164, 164, 164,
	232, 320, 320, 321, 321, 321, 321, 321, 321, 322,
	322, 322, 322, 322, 322, 322, 318, 318, 319, 316,
	316, 317, 317, 317, 317, 358, 358, 231, 231, 170,
	170, 323, 323, 323, 323, 324, 324, 324, 324, 324,
	327, 326, 325, 325, 325, 325, 325, 265, 265, 265,
	106, 106, 45, 45, 45, 136, 136, 46, 46, 42,
	42, 42, 213, 213, 174, 174, 270, 270, 270, 147,
	147, 125, 125, 125, 19, 21, 21, 15, 15, 15,
	15, 15, 15, 27, 27, 24, 24, 214, 214, 215,
	215, 66, 66, 70, 70, 75, 75, 105, 105, 105,
	105, 105, 105, 29, 29, 29, 29, 37, 37, 37,
	37, 74, 74, 360, 360, 143, 143, 143, 143, 144,
	144, 228, 228, 229, 229, 361, 361, 230, 230, 230,
	138, 137, 139, 139, 41, 41, 41, 132, 132, 133,
	133, 134, 134, 135, 135, 362, 362, 63, 63, 63,
	108, 108, 150, 150, 225, 225, 225, 227, 227, 226,
	226, 226, 199, 199, 199, 107, 107, 179, 179, 189,
	189, 190, 190, 276, 191, 73, 73, 117, 117, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	118, 118, 118, 118, 118, 118, 118, 121, 121, 121,
	122, 122, 122, 120, 120, 333, 333, 333, 336, 336,
	332, 334, 334, 335, 335, 359, 359, 200, 200, 200,
	169, 168, 168, 172, 172, 171, 173, 173, 269, 269,
	269, 197, 197, 196, 196, 196, 196, 218, 218, 216,
	216, 217, 217, 221, 221, 222, 222, 222, 223, 223,
	224, 224, 195, 195, 250, 250, 220, 220, 219, 119,
	119, 119, 178, 178, 178, 180, 180, 240, 240, 240,
	241, 241, 239, 239, 239, 239, 271, 271, 271, 271,
	271, 271, 271, 271, 349, 349, 349, 350, 350, 268,
	268, 272, 272, 272, 272, 272, 272, 266, 266, 266,
	266, 267, 267, 277, 277, 203, 203, 203, 203, 201,
	201, 202, 202, 273, 273, 273, 273, 198, 198, 274,
	274, 274, 234, 234, 280, 280, 280, 298, 298, 177,
	177, 177, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 282, 282, 282, 282, 284, 284, 284,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 297, 297,
	297, 297, 297, 285, 285, 292, 292, 293, 293, 294,
	295, 286, 286, 287, 287, 288, 289, 296, 296, 296,
	296, 300, 300, 290, 290, 290, 290, 290, 290, 290,
	291, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 211, 211, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	244, 244, 244, 244, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 328, 328, 328, 328, 328,
	328, 328, 328, 330, 330, 331, 331, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 337, 337, 338,
	338, 340, 340, 341, 341, 342, 343, 343, 343, 344,
	345, 345, 339, 339, 346, 346, 346, 347, 347, 348,
	348, 348, 348, 348, 256, 256, 257, 258, 264, 264,
	264, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 145, 145, 145,
	145, 145, 186, 186, 185, 185, 253, 253, 251, 251,
	255, 255, 204, 204, 299, 299, 299, 299, 299, 299,
	299, 205, 205, 205, 212, 206, 206, 207, 207, 207,
	207, 207, 247, 248, 208, 208, 208, 249, 249, 259,
	263, 263, 262, 261, 261, 260, 260, 237, 237, 238,
	238, 236, 235, 194, 194, 193, 193, 192, 192, 363,
	363, 188, 188, 275, 275, 275, 275, 181, 181, 152,
	152, 182, 182, 148, 148, 151, 151, 149, 149, 149,
	149, 175, 175, 176, 176, 146, 146, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 301, 301,
	301, 252, 140, 140, 140, 141, 141, 142, 142, 306,
	306, 306, 307, 307, 307, 307, 305, 305, 305, 305,
	305, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 4, 7, 1, 3, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 8, 8, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 5, 6,
	4, 3, 5, 1, 3, 1, 1, 9, 10, 8,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 7, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 1, 0, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 1, 0, 2, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -28, -30, -33, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -31,
	-32, 48, -34, 72, -45, -40, 74, 95, -335, 99,
	-50, -54, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -115, -117, 256, -68, -69, -77, -78,
	-79, -80, -109, 281, -85, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, 284, -29, -37, -74, 324, -6, -7,
	-8, -9, -11, -21, 112, -41, -42, -43, -44, -46,
	-333, -51, -52, -53, -55, -118, -116, 377, 257, 333,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -27, -19, -20, -12,
	349, 356, -121, -119, -120, -122, 274, 341, 304, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	2, 304, 344, 334, 88, 152, 242, -351, 2, -182,
	304, 88, -149, -140, 370, 4, -312, -314, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 231, 233, 235, 237, 239, 240, 241,
	242, 243, 245, 246, 248, 249, 250, 251, 252, 256,
	254, 255, 257, 258, 259, 260, 262, 264, 265, 267,
	282, 283, 295, 269, 270, 271, 272, 273, 277, 275,
	278, 279, 281, 284, 286, 289, 293, 294, 296, 299,
	300, 297, 292, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 319, 320, 324, 325, 326, 327, 330, 331,
	332, 333, 335, 338, 339, 340, 345, 350, 351, 352,
	353, 354, 29, 37, 38, 39, 40, 42, 43, 46,
	47, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 146, 147, 150, 157,
	159, 160, 161, 162, 163, 165, 172, 173, 181, 198,
	208, 210, 221, 225, 234, 236, 244, 266, 276, 287,
	288, 298, 301, 314, 315, 316, 321, 322, 337, 341,
	342, 380, 380, 2, 169, 241, -148, -140, 88, 380,
	2, 304, 334, 344, -213, 88, 329, -140, 237, 22,
	2, 97, 156, 332, 331, 22, 233, 275, 306, 308,
	2, 380, 2, 344, 304, 152, 88, 334, -140, 2,
	-59, 2, 377, -58, -5, -40, -50, -60, -56, -10,
	-28, -30, -45, -47, -54, -64, -63, -65, -67, -71,
	-70, -73, -77, -78, -84, -107, -108, 74, 24, 103,
	281, 112, -355, 2, 22, -356, -357, 74, 103, 135,
	274, 156, 97, 331, 304, 2, 169, 2, -140, 2,
	-351, 2, 169, 2, -355, 2, -140, 2, -144, 2,
	269, -140, 380, 380, 380, 380, 380, 188, 56, 266,
	278, -82, 320, -81, 314, -304, -83, 2, -183, 199,
	-140, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 2, -104,
	278, 35, 56, 22, 61, 89, 136, 152, 153, 175,
	69, 70, 240, 188, 170, 319, 176, 279, 305, 320,
	74, 335, 309, 111, 4, 88, 199, 280, 314, 380,
	380, 380, -359, 2, 304, 380, 380, 380, 380, 271,
	284, 380, 380, 380, 380, 380, -116, -118, -117, 380,
	380, 380, 380, -171, -172, 328, 164, 108, 219, -115,
	-117, 2, -333, -104, 278, 2, 56, 22, -302, 2,
	-242, 215, -244, 368, 369, 363, 205, 355, -256, 94,
	-246, -259, 109, 266, 377, -148, -245, 383, 9, -330,
	-117, 30, -257, -258, 50, -140, 7, 8, 5, 6,
	-146, -282, -252, -291, 323, 116, 207, -328, -329, 4,
	-312, -306, -283, -293, -287, -290, 165, 59, 80, 81,
	84, 82, 85, 280, 334, 51, 29, 114, 115, 225,
	234, 301, 321, 322, 146, 208, 147, 57, 137, 181,
	102, 38, 40, 42, 43, 52, 53, 90, 92, 93,
	125, 126, 127, 157, 159, 160, 161, 162, 163, 210,
	244, 287, 298, 314, 315, 316, 342, -313, -294, -295,
	-288, -289, 75, 117, 134, 155, 148, 167, 171, 182,
	185, 194, 200, 222, 224, 263, 285, -296, -360, 2,
	320, 320, 2, -360, 2, -360, 2, -143, 2, 320,
	317, -336, 245, -332, -140, -336, 380, 380, 382, 380,
	-168, -169, 2, 22, 100, 377, 2, -271, 2, 375,
	-273, -148, -117, -272, 377, 216, -3, 2, -273, 146,
	-148, 2, -273, 146, -148, 2, -310, 146, -308, 9,
	-307, 5, 4, -312, -314, -313, 59, 2, -140, 2,
	-151, 146, -148, -305, 4, -312, -314, -313, -315, 22,
	25, 26, 27, 28, 30, 31, 32, 33, 44, 50,
	51, 55, 58, 60, 69, 74, 79, 80, 82, 81,
	83, 84, 85, 94, 96, 98, 100, 101, 104, 106,
	108, 116, 118, 130, 132, 133, 135, 138, 140, 149,
	152, 154, 164, 166, 177, 180, 186, 189, 190, 205,
	206, 207, 213, 215, 216, 218, 219, 232, 238, 247,
	261, 274, 280, 290, 302, 304, 313, 317, 318, 323,
	328, 329, 334, 336, 343, 344, 346, 347, 348, 349,
	317, 382, -182, -175, -140, -236, -235, 379, -242, 2,
	-242, 2, 133, 377, -193, -194, -235, -236, 2, -183,
	146, -310, 146, 2, -183, 2, 152, -140, 146, 2,
	-140, 22, 133, 2, 166, 2, 166, 2, -274, 2,
	-273, -184, 146, 2, -183, -184, 146, 2, -152, 146,
	2, -151, -140, 146, 2, -311, 146, 2, -310, -209,
	377, -279, 2, -278, -307, 341, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 278, 215, 382, -183, -242, -254, 377, 133, -242,
	215, -140, 2, 282, 2, 377, -82, 54, 320, -229,
	2, -230, -137, -138, -139, 168, 239, 243, 354, 317,
	360, 133, -302, -187, 379, -104, 2, -310, 2, 282,
	2, 240, 279, 56, 133, 2, 2, -352, 2, 215,
	133, 2, 133, 2, 133, 2, 133, 2, 133, 2,
	2, 240, 279, 2, 130, 2, 319, 2, 2, 133,
	2, 168, 239, 295, 2, 304, 344, 2, 133, 133,
	354, 2, -198, -273, 304, 354, 22, -171, -172, -219,
	-196, 130, -216, -217, 186, 118, 213, -200, 22, 100,
	-200, -200, 45, 378, 378, -104, 282, 2, 10, 11,
	58, 34, 368, 369, 370, 371, 128, 372, 373, 366,
	367, 365, 358, 359, 362, 291, 23, 71, 361, 360,
	64, 192, 268, 119, 120, 121, 122, 253, 13, 14,
	15, 27, 218, 185, 355, 148, 285, 363, 16, 17,
	18, 167, 37, 149, -145, -153, -242, -242, -242, -242,
	-242, 224, -192, -237, 375, -117, 377, 377, -117, -242,
	-185, 377, 7, -117, -251, 375, -260, -242, -193, 377,
	5, 377, 5, -337, 350, 130, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 236, -300, 345, -300, -300,
	-284, 377, -284, -285, 377, -284, 351, 351, 356, 377,
	-228, -229, -228, 317, -144, 382, -336, -176, 377, 377,
	-188, -275, -242, 370, -188, -185, -242, 75, -203, 171,
	200, 134, 182, 263, 155, 7, -59, -239, 383, 377,
	370, -268, 356, -117, -272, 377, -271, -148, 377, -127,
	254, -126, 21, 24, 103, 339, 109, 292, 310, -162,
	270, -161, 228, 254, 109, 349, 109, 112, 254, 292,
	310, -162, 270, 254, 109, 383, 112, -310, -149, 382,
	-305, 370, 296, 378, -181, -148, -194, 377, -170, 205,
	-136, -334, 349, 205, -170, 377, -141, 146, 2, -140,
	-334, 205, -274, -150, -148, -150, 281, -140, 31, -129,
	382, 49, 259, 109, -129, 109, -129, 382, 109, -129,
	109, 382, 109, -185, 378, 382, -351, -357, 74, 377,
	31, -253, -280, -281, -283, -292, -286, -290, -291, 41,
	47, 46, 173, 172, 311, 198, 276, 288, 337, 150,
	39, 214, 158, 4, 157, 159, 160, 161, 162, 163,
	287, 38, 244, 126, 127, 125, 102, 93, 92, 210,
	43, 42, -294, -295, -288, -289, 90, 314, 315, 316,
	165, 40, 53, 52, 342, 298, -311, -351, -304, -185,
	31, -229, 2, -361, 382, 184, -155, 191, 204, 142,
	216, 352, -309, 5, 4, -252, -265, 94, 188, -291,
	8, 369, -301, 7, 368, -303, -302, -303, 78, 379,
	-305, -183, 22, 283, 2, -304, -354, 130, -351, -304,
	-304, -304, -304, -304, 278, -59, 130, -140, 184, -304,
	2, -304, 2, 304, 152, 304, -129, 382, -148, 65,
	66, 354, -219, -196, -197, -196, -220, -219, 331, -217,
	-216, -221, -242, 22, -224, 124, 201, -242, -244, -116,
	-116, -116, -173, -269, -242, 238, 152, -304, -298, -280,
	-297, 249, 250, 248, 252, 251, -280, -305, 314, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, 185, 148, 285, 37, 149, -242, 317, -242, -242,
	-242, -242, 197, 205, 207, 323, 116, 330, 100, 211,
	-363, 302, 33, -249, -117, 377, -264, 28, 290, 22,
	-256, 266, 377, -237, -242, -238, -186, -185, 378, 382,
	-186, -255, -251, -263, -262, 346, 378, -185, 343, 22,
	100, 370, 2, 7, -210, 353, 196, 91, 143, 195,
	-211, 273, -338, 123, 138, 377, 378, 2, 378, 2,
	378, 2, 378, 2, -242, -242, -204, 2, -299, -185,
	4, 353, 196, 91, 143, 195, 273, -204, 2, -205,
	2, -242, -185, -206, -243, -244, 368, 369, 363, 377,
	266, -207, 2, -242, -186, -242, 44, 180, 318, -208,
	-242, 133, -185, -242, -242, -242, -185, -185, 2, -185,
	2, 377, 7, 7, 314, 314, 314, 7, -144, -332,
	31, -175, -185, -178, 382, 133, 31, 4, -178, 378,
	382, 171, 171, -271, -203, 171, -201, 222, -201, -201,
	-349, 377, 376, -268, -305, 375, 384, -186, 2, -267,
	-266, 31, -140, 220, 378, -148, 382, 317, -214, 69,
	60, -232, 146, 60, -316, -140, 69, -317, 55, 329,
	238, 132, -214, 69, -214, 69, 69, -273, 34, -73,
	112, 133, -305, 317, -273, 229, -310, 67, 317, 34,
	-73, 112, 133, 317, -151, -305, 67, -277, 357, -140,
	133, 378, 382, -156, -175, -157, -140, -233, -232, -318,
	-319, -316, 152, 329, 117, 31, 109, 229, 109, 31,
	215, 205, -132, 307, 109, -234, 347, -225, -73, 377,
	94, 31, -225, -189, -190, -276, -191, -148, 377, -140,
	-183, -184, -184, -151, -152, -140, -310, -311, 378, -59,
	-278, 317, 336, -157, -58, 24, 74, 103, 378, 382,
	-177, 30, 375, -210, 377, -277, 133, 360, 317, 378,
	320, -230, -154, 243, 289, 255, 277, 8, 7, 7,
	382, -305, -353, -140, 278, -59, -148, -151, -148, -273,
	349, 130, 66, -197, -220, -222, -301, 377, 369, -223,
	266, 267, 382, -125, 32, 98, 174, -148, 354, -242,
	-242, 317, -363, 302, -249, -242, 197, 207, 323, 116,
	330, 100, 211, 133, 377, -243, -243, -185, -242, 377,
	-185, 376, 386, 378, -242, 376, 376, 382, -261, -262,
	104, -242, -172, 382, -171, -242, -185, -185, 378, 378,
	317, 317, 317, 317, 377, -343, 223, 377, 377, -242,
	31, 382, 378, 133, 378, 378, -212, 232, 378, 10,
	11, 368, 369, 370, 371, 128, 372, 373, 366, 367,
	365, 358, 359, 360, 64, 192, 268, 13, 14, 15,
	167, 149, -243, -243, -243, -185, 377, 378, -247, -248,
	133, 130, 31, -208, -208, -208, 378, 133, -185, 382,
	382, 382, 378, 378, 378, 7, 378, 382, 378, 354,
	354, 354, 378, 377, 378, 378, -234, -275, -180, 2,
	-271, -305, -234, -242, -271, -271, -202, 336, 215, 171,
	-271, -266, 378, -350, 7, -268, -267, 7, -241, -240,
	131, 203, 378, -140, 377, -268, 378, -126, -148, -140,
	-140, 205, -232, 146, -131, 205, -280, -140, 377, 377,
	174, 174, -140, -140, 146, -140, 146, -140, -140, -127,
	254, -73, 67, 377, -148, 254, -310, 349, 354, -140,
	-73, 67, 377, -305, 254, 354, -110, 145, 211, 296,
	133, -148, 378, 378, 382, -141, 152, -141, -73, -183,
	-310, -310, -73, -148, 109, -133, 105, -362, 360, -140,
	-218, -216, -242, -199, -227, 261, 215, -181, 341, -140,
	-199, -179, 382, 133, 360, -181, -129, -129, -129, -129,
	-353, -310, 378, -280, 375, 376, 7, 7, -113, 349,
	-353, -302, -302, -137, 327, 63, 243, -302, 382, 217,
	242, 88, 304, 152, -223, -242, -269, -148, 383, -242,
	-242, -243, -243, 133, 377, -242, -253, 27, 27, 378,
	-186, 382, -238, -242, 378, -251, 106, -242, 313, 378,
	343, -172, -172, -172, 5, 196, 143, 195, -211, 195,
	-211, -211, 7, -344, -140, 377, 347, -171, 378, -298,
	-280, -242, -247, -242, -298, -280, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, 100, 205, 211, -243, 382,
	-186, -248, -247, -242, -242, -280, 378, 378, 378, -185,
	-242, -242, -242, 378, 7, -58, -195, 138, -277, 382,
	-195, -202, 377, -242, -271, 376, 378, 382, -267, 376,
	382, 385, 360, -268, 377, -175, -266, 317, 317, 109,
	205, 338, -320, -317, -242, -174, -270, -140, -331, 377,
	-328, -329, -146, 377, 377, -124, 103, 281, -215, 109,
	-129, 109, -129, 317, -214, 69, 354, -185, 317, 229,
	-245, -146, -140, 354, -185, 317, -245, -113, 133, 303,
	296, -158, 151, -233, 377, -141, 377, 377, -170, -136,
	377, -140, -134, 179, -362, -308, -334, -199, -199, -188,
	206, 68, 378, -234, -190, -180, -242, 378, -114, 76,
	-114, 7, 376, 378, -112, 217, -111, -140, 5, -140,
	-35, -36, 152, 231, -305, -140, -148, -151, 216, 378,
	-125, -305, 27, 27, -242, -253, 378, -242, -242, 378,
	-242, 376, -242, 5, -242, 378, 378, 378, 378, -345,
	-140, -242, 378, 378, 378, -248, 133, 100, 211, 377,
	-242, 378, 378, 382, 378, 378, 378, 378, -250, 140,
	45, -271, -250, -175, -239, 7, -240, -305, 375, -267,
	-175, 378, -140, -140, -232, 109, -321, 69, -322, 58,
	117, 74, 205, 207, 329, 238, 55, 94, 247, 378,
	378, 382, -147, -193, 58, -147, -242, 377, -174, -175,
	205, 94, 205, 94, 87, 325, -140, -140, -148, -140,
	-140, -245, 378, -148, -310, 377, -245, 378, -305, -311,
	314, -159, -160, 228, 149, -174, 377, -175, -156, 31,
	-174, 215, -135, 178, -362, -308, -132, -226, 377, 215,
	-73, -199, 360, 87, 87, 376, 382, 377, 360, 360,
	382, 22, 377, -162, -162, -125, -242, -242, 378, 378,
	-172, -339, 228, 378, -243, 133, 377, -253, 378, -242,
	-340, 348, -242, -185, -340, 378, -268, 7, 378, -232,
	-140, -305, -140, 117, 146, 207, 174, 377, -243, -148,
	-231, -358, 73, 300, -270, -125, -305, -125, 378, -185,
	378, 378, 207, 207, -242, -280, -129, -129, 317, 317,
	317, -185, 317, -245, 45, 226, 378, -174, 378, 378,
	-73, 378, -148, -362, -308, -133, 101, -175, 69, -249,
	377, 377, -111, -112, -310, -310, -36, -175, 378, -172,
	45, -243, -253, 378, 378, -341, -342, -140, -267, 376,
	-322, -141, 205, -242, -142, 377, -158, 377, -147, -172,
	247, -128, 58, -140, -140, 377, -172, 377, 187, 242,
	-148, -231, 378, -158, -231, 377, -308, -134, 331, 206,
	378, -140, -311, -311, 378, 378, -346, 242, 267, -185,
	378, 382, 31, 109, 378, -323, 193, -140, -175, -125,
	378, -148, -123, 336, -305, -185, 378, -185, 377, 377,
	377, -158, -231, -158, -174, -135, 281, -234, 378, 378,
	378, -347, -348, 37, 326, 78, -242, -347, -342, -344,
	117, -324, -327, -326, 215, 134, 227, 286, 378, 378,
	-170, -242, 378, 378, -175, -175, -175, -158, 378, -189,
	-113, -113, -348, 235, 129, 266, 235, 129, -140, -326,
	215, -327, 215, 331, 97, -323, 378, 378, 378, -231,
	-234, 27, -325, 202, 259, 49, 281, -325, -324, 377,
	377, -130, 49, 259, -158, -348, 20, 207, 94, -163,
	-161, -164, -161, 378, 341, 378, 341, -165, 377, 183,
	382, -160, -159, -166, -167, -242, 194, 312, -163, 377,
	382, 378, 382, 377, -166, -163, -167, -166, 378, 378,
	382, -160, -159, -164, 382, -164,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 0, 166, 168, -2, 0, 0, 0,
	189, 190, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 695, -2, 0, 301, 303, 312, 314,
	316, 318, 319, 0, 370, 372, 374, 376, 378, 380,
	382, 384, 386, 388, 390, 392, 394, 396, 398, 399,
	401, 403, 405, 0, 617, 619, 621, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	733, 193, 195, 197, 199, -2, 744, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 87, 75, 79, 80, 82,
	0, 0, 710, 712, 714, 716, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 132, 285,
	0, 1317, 1241, 1247, 1248, 1272, 1273, 1274, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 158, 160, 161, 0, 0, 0, 1243, 1317, 167,
	169, 0, 0, 0, 0, 0, 582, 276, 1380, 278,
	280, 0, 0, 0, 0, 183, 184, 185, 186, 187,
	188, 191, 192, 0, 0, 0, 0, 0, 275, 273,
	222, 223, 0, 258, 259, 260, 261, 262, 264, 226,
	228, 230, 231, 233, 235, 237, 239, 241, 243, 244,
	246, 248, 249, 251, 253, 254, 256, 583, 0, 0,
	0, 0, 0, 282, 288, 289, 290, 292, 293, 294,
	295, 296, 297, 298, 0, 138, 0, 483, 271, 269,
	0, 134, 0, 614, 0, 284, 615, 616, 611, 612,
	1407, 640, 302, 304, 313, 315, 317, -2, -2, 1501,
	-2, 334, -2, 342, 1507, 0, 345, 346, 349, -2,
	218, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	389, 391, 393, 395, 397, 400, 402, 404, 406, 407,
	0, 0, 0, 411, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 410, 412, 413, 414, 0, 618,
	620, 622, 0, 571, 735, 60, 62, 64, 66, 0,
	0, 171, 173, 175, 177, 180, -2, 708, 709, 194,
	196, 198, 200, -2, 0, 739, 739, 739, 0, 0,
	709, 707, 0, 305, 0, 307, 0, 411, 310, 311,
	350, 351, 947, 0, 0, 0, 0, 0, 0, 1020,
	1050, 1052, 1472, 1501, 0, 1054, 1055, 0, 1057, 1059,
	1060, 0, 1063, 1064, 1216, 1243, 1257, 1258, 1259, 1260,
	0, 0, 1263, 0, 1265, 1266, 1267, 1118, 1074, -2,
	-2, 1255, 873, 874, 875, 876, -2, 1515, 1078, 1081,
	1084, 1087, 1088, 1091, 1092, 0, 1456, 1473, 1474, 1497,
	1498, 1506, 1510, 1511, 1480, 1494, 1481, 1468, 1478, 1492,
	1323, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1281, 907, 908,
	913, 914, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 916, 642, 624,
	633, 642, 626, 627, 628, 629, 630, 631, 632, 635,
	0, 725, 1386, 728, 1254, 726, 711, 713, 0, 715,
	0, 0, 719, 741, 740, 0, 780, 723, 724, 734,
	795, 833, 810, 801, 0, 0, 2, 74, 0, 1480,
	-2, 76, 0, 1480, 833, 78, 0, 1480, 139, 140,
	368, 369, 1282, 1283, 1284, 1285, 1515, 81, 0, 88,
	503, 1480, 1246, 0, 1286, 1287, 1288, 1289, 1290, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	0, 0, 286, 287, 1251, 1249, 1250, 0, 162, 163,
	164, 165, 0, 0, 1244, 1225, 1223, 1224, 178, 550,
	1480, -2, 1480, 574, 550, 578, -2, 732, 1480, 656,
	277, 279, 0, 182, 0, 669, 0, 671, 0, 686,
	839, 124, 1480, 203, 216, 124, 1480, 206, 124, 1480,
	209, 1239, 124, 1480, 212, 213, 1480, 215, 141, 272,
	0, 0, -2, 265, 267, -2, 263, 227, 229, 232,
	234, 236, 238, 240, 242, 245, 247, 250, 252, 255,
	257, -2, 0, 0, 0, 482, 0, 0, 0, 613,
	0, 639, 320, 0, 331, 0, 333, 1467, -2, -2,
	337, 643, 647, 648, 649, 0, 0, 0, 0, 0,
	0, 0, 347, 219, 0, 408, 409, 417, 418, 0,
	421, 442, 454, 0, 0, 425, 427, 481, 429, 0,
	0, 431, 0, 433, 0, 435, 0, 437, 0, 439,
	441, 443, 455, 445, 734, 447, 0, 449, 453, 0,
	458, 0, 460, 461, 462, 0, 0, 468, 0, 0,
	415, 416, 124, 837, 0, 0, 0, -2, 0, 752,
	777, 0, 755, 756, 0, 0, 0, 0, 737, 738,
	0, 0, 0, 697, 698, 306, 0, 309, 0, 0,
	0, 0, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160,
	1157, 1158, 1161, 1162, 0, 0, 0, 0, 0, 1163,
	0, 0, 0, 0, 0, 0, 0, 0, 1164, 1165,
	1166, 0, 0, 1168, 0, 1170, 0, 0, 0, 0,
	0, 0, 1230, 0, 0, 1167, 952, 953, 954, 986,
	987, 0, 1051, 1227, 1220, 1053, 0, 1173, -2, 1174,
	0, 0, 1056, 1061, 1062, 1173, 0, 1215, -2, 0,
	1262, 0, 944, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1196, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 910, 921, 918, 917,
	894, 0, 893, 891, 0, 895, 0, 0, 0, 0,
	623, -2, 625, 0, 637, 0, 727, 0, 0, 0,
	784, 1231, 1235, 1236, 784, 0, 1174, 0, 0, 0,
	0, 830, 830, 830, 828, 804, 0, 810, 0, -2,
	834, 822, 0, -2, 801, 0, 0, 835, 0, 89,
	608, 103, 0, 608, 608, 0, 0, 0, 0, 0,
	99, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 824, 1242, 0,
	1221, 1222, 154, 0, 0, 1237, 1226, 489, 0, 0,
	572, 0, 731, 0, 0, 0, 0, 1480, 581, 1275,
	658, 0, 843, 0, 672, 0, 0, 840, 0, 201,
	0, 122, 123, 0, 204, 0, 207, 0, 0, 210,
	0, 0, 0, 0, 734, 0, 0, 291, 0, 0,
	734, 0, 1176, 851, 852, 853, 854, 855, 944, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 904, 0, 879, 879, 879,
	896, 897, 905, 906, 911, 912, 923, 924, 926, 928,
	930, 922, 922, 922, 919, 920, 824, 0, 0, 0,
	0, -2, 339, 0, 645, 0, 650, 359, 360, 361,
	652, 653, 343, 362, 363, 364, 365, 366, 367, 0,
	567, 0, 569, 1268, 0, 340, 352, 341, 344, 0,
	220, 419, 420, 422, 423, 424, 428, 0, 478, 430,
	432, 434, 436, 438, 446, 450, 734, 456, 459, 463,
	464, 465, 466, 0, 0, 0, 570, 0, 322, 0,
	473, 0, 752, 777, 701, 751, 702, 776, 778, 753,
	754, 759, 763, 764, 767, 770, 771, 761, 947, 720,
	721, 722, 745, 746, 593, 0, 0, 308, 948, 847,
	848, 898, 899, 900, 901, 902, 949, 950, 0, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, -2,
	-2, -2, -2, -2, -2, -2, -2, 973, 974, 975,
	976, 977, 978, 979, 980, -2, -2, -2, 984, 985,
	-2, 1169, 1171, 0, 1230, 0, -2, 0, -2, -2,
	-2, -2, 998, 0, 1000, 1003, 1005, 1007, 0, 0,
	0, 0, 1229, 1017, 1207, 0, 0, 1148, 1149, 1150,
	1002, 0, 0, 1228, 1219, 0, 0, 1172, 1058, 0,
	0, 0, 1180, 1214, 1210, 0, 1065, 744, 0, 0,
	0, 0, 1072, 0, 1271, 931, 932, 933, 934, 935,
	936, 945, 1128, 0, 0, 0, 1079, 1080, 1082, 1083,
	1085, 1086, 1089, 1090, 0, 0, 0, 1096, 0, 1183,
	-2, -2, -2, -2, -2, -2, -2, 0, 1098, 0,
	1100, 1174, 1193, 0, 0, 1021, 0, 0, 0, 0,
	1501, 0, 1103, 1174, 1201, 0, 0, 0, 0, 0,
	1174, 0, 1206, 0, 0, 0, 0, 0, 1114, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 636, 729,
	0, 0, 0, 843, 0, 0, 0, 1234, 843, 779,
	0, 0, 0, 0, 0, 0, 825, 829, 826, 827,
	0, 0, 810, 822, 792, 0, 0, 0, 799, 800,
	821, 0, 820, 809, -2, 0, 0, 0, 0, 0,
	607, 105, 1480, 0, 126, 0, 0, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 1245, 0, 144, 0, 1252,
	0, 0, 0, 0, 0, 488, 1251, 490, 492, 493,
	494, 495, 1276, 0, 1276, 0, 0, 0, 0, 0,
	0, 0, 660, 666, 0, 758, 0, 684, 674, 0,
	0, 0, 684, 688, 689, 691, 692, 0, 0, 841,
	217, 124, 124, 1240, 124, 124, 142, 214, 274, 224,
	266, 0, 0, 0, 268, 0, 0, 0, 270, 0,
	844, 846, 0, 856, 0, 153, 0, 0, 0, 332,
	0, 644, 651, 0, 356, 0, 358, 568, 1270, 1269,
	0, 221, 480, 299, 448, 451, 475, 476, 477, 838,
	0, 0, 474, 705, 706, 0, 765, 0, 0, 762,
	768, 769, 0, 748, 591, 592, 0, 0, 0, -2,
	-2, 0, 0, 0, 1018, -2, 999, 1001, 1004, 1006,
	1008, 0, 0, 0, 0, 0, 0, 0, 1019, 1173,
	0, 1217, 1220, -2, 1175, 1178, 1179, 0, 0, 1211,
	0, 0, 0, 0, 743, 744, 744, 744, 1071, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 1095, 0, 1097, 1099, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1024, 1025, 1026, 0, 1173, 1102, 1199, 1200,
	0, 0, 0, 0, 0, 0, 1108, 0, 1205, 0,
	0, 0, 1112, 1113, 1115, 0, 877, 0, 903, 925,
	927, 929, 915, 734, 1253, 781, 773, 1232, 824, 783,
	785, 1233, 773, 1175, 812, 0, 814, 0, 0, 0,
	816, 0, 805, 0, 807, 822, 797, 0, 0, 790,
	0, 789, 810, 818, 0, 0, 836, 104, 597, 0,
	0, 0, 107, 1480, 115, 0, 522, 0, 0, 0,
	0, 0, 610, 116, 1480, 124, 1480, 124, 117, 90,
	608, 91, 0, 0, 603, 0, 595, 0, 0, 594,
	92, 0, 0, 605, 0, 0, 153, 0, 0, 155,
	0, 1238, 497, 549, 0, 0, 1276, 0, 486, 550,
	575, -2, 577, 0, 0, 662, 666, 0, 665, 732,
	684, 757, 842, 667, 684, 0, 0, 0, 676, 673,
	670, 843, 0, 0, 0, 0, 202, 205, 208, 211,
	281, 0, 0, 1177, 0, 849, 0, 0, 133, 0,
	283, 329, 330, 335, 354, 355, 357, 353, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 593, 0, 951,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1208,
	0, 0, 0, 1219, -2, 1181, 1209, 1213, 0, 1066,
	0, 0, 0, 0, 1264, 937, 938, 939, 940, 941,
	942, 943, 0, 1126, 1127, 1131, 0, 0, 1077, 0,
	0, 1182, 1192, 1194, 1022, 1023, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, -2, -2, -2, 1040,
	1041, 1042, -2, -2, -2, 0, 0, 0, 1195, 0,
	0, 1197, 1198, 1202, 1203, 0, 1105, 1106, 1107, 1204,
	0, 0, 0, 909, 0, 0, 775, 0, 782, 0,
	775, 813, 0, 832, 815, 795, 806, 0, 803, 793,
	0, 794, 0, 822, 0, 0, 802, 0, 0, 0,
	0, 125, 520, 539, 0, 0, 584, 590, 590, 0,
	1075, 1076, 0, 0, 0, 109, 0, 0, 0, 0,
	113, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 95, 131, 0, 0,
	156, 505, 0, 491, 0, 0, 0, 489, 0, 573,
	0, 0, 664, 666, 0, 657, 658, 181, 668, 682,
	683, 681, 0, 684, 690, 687, 693, 0, 0, 135,
	0, 0, 850, 857, 151, 1369, 149, 146, 148, 300,
	323, 324, 0, 328, 469, 470, 503, 503, 760, 766,
	749, 593, 0, 0, -2, 0, 1011, -2, -2, 1144,
	1175, 1218, 1212, 1261, 744, 1067, 1069, 1070, 946, 1133,
	1130, 0, 1117, 1093, 1094, 1191, 0, 0, 0, 0,
	1175, 1146, 1104, 0, 1110, 1111, 878, 730, 1122, 0,
	0, 786, 1122, 0, 810, 808, 791, 787, 0, 798,
	0, 819, 599, 601, 106, 0, 521, 0, 524, 0,
	0, 0, 0, 530, 531, 0, 0, 0, 0, 541,
	548, 0, 593, 1256, 0, 593, 0, 0, 0, 0,
	0, 121, 0, 0, 609, 0, 124, 124, 598, 0,
	0, 97, 0, 604, 596, 0, 98, 0, 606, 143,
	0, 484, 504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 666, 0, 659, 660, 0, 0, 0,
	675, 685, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 326, 0, 471, 472, 750, -2, -2, 1012, 1145,
	0, 744, 0, 1119, -2, 0, 0, 0, 1147, 0,
	717, 0, 774, 772, 718, 831, 822, 0, 817, 108,
	0, 525, 526, 1276, 0, 529, 532, 0, 534, 1278,
	497, 0, 545, 546, 585, 586, 589, 587, 590, 744,
	543, 0, 110, 111, 120, 128, 112, 118, 0, 0,
	0, 744, 0, 823, 0, 0, 548, 0, 538, 497,
	487, 548, 0, 0, 661, 662, 0, 0, 0, 694,
	0, 0, 150, 0, 145, 147, 325, 0, 1068, 1136,
	0, -2, 0, 1048, 1109, 1121, 1123, 0, 796, 788,
	523, 527, 0, 0, 554, 0, 542, 0, 593, 0,
	0, 130, 0, 600, 602, 0, 0, 0, 0, 0,
	0, 497, 548, 485, 497, 0, 663, 664, 0, 678,
	843, 680, 0, 0, 152, 327, 0, 0, 0, 1132,
	1049, 0, 0, 0, 533, 559, 0, 0, 0, 588,
	1066, 550, 114, 0, 127, 0, 0, 0, 0, 0,
	0, 536, 497, 579, 0, 655, 0, 679, 153, 153,
	1129, 1134, 1137, -2, 1440, 1314, 0, 1135, 1124, 1125,
	0, 535, 555, 556, 0, 551, 552, 553, 1277, 547,
	554, 129, 100, 102, 0, 0, 0, 537, 548, 843,
	136, 137, 0, 1139, 1140, 1141, 1142, 1143, 528, 557,
	0, 558, 0, 0, 0, 559, 0, 0, 500, 497,
	677, 0, 560, 0, 563, 564, 0, 561, 544, 0,
	0, 496, 498, 499, 580, 1138, 562, 565, 566, 0,
	0, 0, 0, 506, 0, 507, 0, 505, 0, 0,
	0, 504, 510, 0, 513, 515, -2, 0, 508, 0,
	0, 511, 0, 0, 0, 509, 514, 0, 512, 505,
	0, 504, 519, 517, 0, 518,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1061
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1117
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1123
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1141
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1153
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1248
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1325
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1485
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2009
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			return unimplemented(sqllex, "set local")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplemented(sqllex, "set from current")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = Low
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = Normal
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = High
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.str = "client_encoding"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2374
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2519
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2530
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2541
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2552
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2567
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2571
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2575
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2582
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2589
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2593
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2599
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2603
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2607
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = DropDefault
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.str = ""
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			return unimplemented(sqllex, "match full")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			return unimplemented(sqllex, "match partial")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			return unimplemented(sqllex, "match simple")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3085
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = NoAction
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = Restrict
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = Cascade
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = SetNull
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = SetDefault
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = nil
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = true
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = false
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3282
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3286
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = Ascending
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = Descending
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3337
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = false
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3395
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3461
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3472
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3531
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3533
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = ReadOnly
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = ReadWrite
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.str = ""
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.str = ""
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3641
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			return helpWith(sqllex, "INSERT")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3724
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 685:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3764
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			return helpWith(sqllex, "SELECT")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			return helpWith(sqllex, "TABLE")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			return helpWith(sqllex, "SELECT")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWith(sqllex, "TABLE")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4039
		{
			return unimplemented(sqllex, "cte")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4043
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = false
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = false
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = true
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			return helpWith(sqllex, "VALUES")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4283
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &From{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4320
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4365
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4402
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = nil
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = true
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = false
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.str = astFullJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.str = astLeftJoin
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.str = astRightJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.str = astInnerJoin
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4586
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4672
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4686
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4729
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = jsonbColType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = jsonColType
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4827
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = nil
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4988
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5020
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5060
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = timeColTypeTime
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = timeColTypeTime
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = year
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = month
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = day
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = hour
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = month
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = hour
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = minute
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = minute
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = nil
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = second
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5163
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5198
		{
			return unimplemented(sqllex, "at tz")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5472
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5649
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5702
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5703
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5727
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5744
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5748
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5757
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5775
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5776
		{
			return unimplemented(sqllex, "current role")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5785
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5806
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5825
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5826
		{
			return unimplemented(sqllex, "treat")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5863
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5872
		{
			return unimplemented(sqllex, "within group")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5873
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5908
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.str = ""
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5970
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5971
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5972
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5976
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5983
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5984
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5985
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Any
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = Some
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = All
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = Plus
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = Minus
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Mult
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = Div
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = Mod
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = Bitand
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = Bitor
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = Pow
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = Bitxor
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = LT
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = GT
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = EQ
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = LE
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = GE
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = NE
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = Like
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = NotLike
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = ILike
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = NotILike
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6342
		{
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6356
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6373
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6381
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6430
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6474
		{
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6484
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6488
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6495
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6499
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6503
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6507
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6510
		{
			return unimplemented(sqllex, "func const")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6512
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6516
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6519
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = DNull
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6536
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6540
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6546
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6581
		{
			sqlVAL.str = ""
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6587
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6591
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
