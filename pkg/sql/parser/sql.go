// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6914

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 713,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 563,
	-2, 0,
	-1, 64,
	96, 713,
	157, 713,
	330, 713,
	331, 713,
	-2, 0,
	-1, 74,
	1, 675,
	216, 675,
	261, 675,
	377, 675,
	379, 675,
	381, 675,
	382, 675,
	-2, 688,
	-1, 107,
	4, 715,
	20, 715,
	21, 715,
	23, 715,
	28, 715,
	33, 715,
	34, 715,
	35, 715,
	36, 715,
	37, 715,
	38, 715,
	39, 715,
	40, 715,
	41, 715,
	42, 715,
	44, 715,
	45, 715,
	46, 715,
	47, 715,
	48, 715,
	51, 715,
	52, 715,
	53, 715,
	55, 715,
	56, 715,
	60, 715,
	61, 715,
	62, 715,
	64, 715,
	65, 715,
	66, 715,
	67, 715,
	69, 715,
	71, 715,
	72, 715,
	75, 715,
	76, 715,
	77, 715,
	85, 715,
	86, 715,
	87, 715,
	88, 715,
	89, 715,
	90, 715,
	91, 715,
	92, 715,
	94, 715,
	96, 715,
	98, 715,
	101, 715,
	102, 715,
	104, 715,
	108, 715,
	109, 715,
	110, 715,
	111, 715,
	112, 715,
	113, 715,
	114, 715,
	122, 715,
	123, 715,
	124, 715,
	125, 715,
	126, 715,
	128, 715,
	130, 715,
	135, 715,
	136, 715,
	138, 715,
	141, 715,
	142, 715,
	145, 715,
	146, 715,
	147, 715,
	148, 715,
	151, 715,
	152, 715,
	154, 715,
	157, 715,
	158, 715,
	159, 715,
	160, 715,
	161, 715,
	162, 715,
	163, 715,
	164, 715,
	166, 715,
	169, 715,
	170, 715,
	171, 715,
	173, 715,
	174, 715,
	175, 715,
	176, 715,
	177, 715,
	179, 715,
	180, 715,
	182, 715,
	184, 715,
	185, 715,
	188, 715,
	189, 715,
	192, 715,
	194, 715,
	196, 715,
	197, 715,
	198, 715,
	199, 715,
	200, 715,
	202, 715,
	203, 715,
	204, 715,
	205, 715,
	209, 715,
	210, 715,
	211, 715,
	212, 715,
	213, 715,
	215, 715,
	217, 715,
	218, 715,
	221, 715,
	222, 715,
	224, 715,
	226, 715,
	227, 715,
	228, 715,
	229, 715,
	230, 715,
	231, 715,
	233, 715,
	234, 715,
	235, 715,
	236, 715,
	237, 715,
	239, 715,
	240, 715,
	241, 715,
	242, 715,
	243, 715,
	244, 715,
	245, 715,
	246, 715,
	248, 715,
	249, 715,
	250, 715,
	251, 715,
	252, 715,
	254, 715,
	255, 715,
	256, 715,
	257, 715,
	258, 715,
	259, 715,
	260, 715,
	262, 715,
	264, 715,
	265, 715,
	266, 715,
	267, 715,
	269, 715,
	270, 715,
	271, 715,
	272, 715,
	273, 715,
	275, 715,
	276, 715,
	277, 715,
	278, 715,
	279, 715,
	281, 715,
	282, 715,
	283, 715,
	284, 715,
	286, 715,
	287, 715,
	288, 715,
	289, 715,
	291, 715,
	292, 715,
	293, 715,
	294, 715,
	295, 715,
	296, 715,
	297, 715,
	298, 715,
	299, 715,
	300, 715,
	302, 715,
	304, 715,
	305, 715,
	306, 715,
	307, 715,
	308, 715,
	309, 715,
	310, 715,
	311, 715,
	313, 715,
	314, 715,
	315, 715,
	318, 715,
	319, 715,
	320, 715,
	321, 715,
	323, 715,
	324, 715,
	325, 715,
	326, 715,
	329, 715,
	330, 715,
	331, 715,
	332, 715,
	334, 715,
	336, 715,
	337, 715,
	338, 715,
	339, 715,
	340, 715,
	341, 715,
	344, 715,
	349, 715,
	350, 715,
	351, 715,
	352, 715,
	353, 715,
	-2, 0,
	-1, 124,
	1, 678,
	216, 678,
	261, 678,
	377, 678,
	379, 678,
	381, 678,
	382, 678,
	-2, 687,
	-1, 129,
	1, 612,
	169, 612,
	239, 612,
	243, 612,
	381, 612,
	382, 612,
	-2, 0,
	-1, 131,
	1, 612,
	381, 612,
	382, 612,
	-2, 0,
	-1, 132,
	1, 612,
	381, 612,
	382, 612,
	-2, 0,
	-1, 133,
	1, 616,
	381, 616,
	382, 616,
	-2, 0,
	-1, 140,
	4, 721,
	5, 721,
	6, 721,
	7, 721,
	8, 721,
	9, 721,
	20, 721,
	21, 721,
	23, 721,
	28, 721,
	29, 721,
	33, 721,
	34, 721,
	35, 721,
	36, 721,
	37, 721,
	38, 721,
	39, 721,
	40, 721,
	41, 721,
	42, 721,
	44, 721,
	45, 721,
	46, 721,
	47, 721,
	48, 721,
	49, 721,
	50, 721,
	51, 721,
	52, 721,
	53, 721,
	55, 721,
	56, 721,
	58, 721,
	60, 721,
	61, 721,
	62, 721,
	64, 721,
	65, 721,
	66, 721,
	67, 721,
	69, 721,
	71, 721,
	72, 721,
	74, 721,
	75, 721,
	76, 721,
	77, 721,
	79, 721,
	80, 721,
	81, 721,
	83, 721,
	84, 721,
	85, 721,
	86, 721,
	87, 721,
	88, 721,
	89, 721,
	90, 721,
	91, 721,
	92, 721,
	94, 721,
	96, 721,
	98, 721,
	101, 721,
	102, 721,
	104, 721,
	108, 721,
	109, 721,
	110, 721,
	111, 721,
	112, 721,
	113, 721,
	114, 721,
	115, 721,
	116, 721,
	122, 721,
	123, 721,
	124, 721,
	125, 721,
	126, 721,
	128, 721,
	130, 721,
	133, 721,
	135, 721,
	136, 721,
	138, 721,
	141, 721,
	142, 721,
	145, 721,
	146, 721,
	147, 721,
	148, 721,
	149, 721,
	151, 721,
	152, 721,
	154, 721,
	156, 721,
	157, 721,
	158, 721,
	159, 721,
	160, 721,
	161, 721,
	162, 721,
	163, 721,
	164, 721,
	166, 721,
	168, 721,
	169, 721,
	170, 721,
	171, 721,
	172, 721,
	173, 721,
	174, 721,
	175, 721,
	176, 721,
	177, 721,
	179, 721,
	180, 721,
	182, 721,
	183, 721,
	184, 721,
	185, 721,
	186, 721,
	188, 721,
	189, 721,
	192, 721,
	194, 721,
	195, 721,
	196, 721,
	197, 721,
	198, 721,
	199, 721,
	200, 721,
	201, 721,
	202, 721,
	203, 721,
	204, 721,
	205, 721,
	206, 721,
	208, 721,
	209, 721,
	210, 721,
	211, 721,
	212, 721,
	213, 721,
	215, 721,
	218, 721,
	221, 721,
	222, 721,
	223, 721,
	224, 721,
	225, 721,
	226, 721,
	227, 721,
	228, 721,
	229, 721,
	230, 721,
	231, 721,
	233, 721,
	234, 721,
	235, 721,
	236, 721,
	237, 721,
	239, 721,
	240, 721,
	241, 721,
	242, 721,
	243, 721,
	244, 721,
	245, 721,
	246, 721,
	248, 721,
	249, 721,
	250, 721,
	251, 721,
	252, 721,
	254, 721,
	255, 721,
	256, 721,
	257, 721,
	258, 721,
	259, 721,
	260, 721,
	262, 721,
	263, 721,
	264, 721,
	265, 721,
	266, 721,
	267, 721,
	269, 721,
	270, 721,
	271, 721,
	272, 721,
	273, 721,
	275, 721,
	276, 721,
	277, 721,
	278, 721,
	279, 721,
	280, 721,
	281, 721,
	282, 721,
	283, 721,
	284, 721,
	285, 721,
	286, 721,
	287, 721,
	288, 721,
	289, 721,
	291, 721,
	292, 721,
	293, 721,
	294, 721,
	295, 721,
	296, 721,
	297, 721,
	298, 721,
	299, 721,
	300, 721,
	302, 721,
	304, 721,
	305, 721,
	306, 721,
	307, 721,
	308, 721,
	309, 721,
	310, 721,
	311, 721,
	313, 721,
	314, 721,
	315, 721,
	318, 721,
	319, 721,
	320, 721,
	321, 721,
	322, 721,
	323, 721,
	324, 721,
	325, 721,
	326, 721,
	329, 721,
	330, 721,
	331, 721,
	332, 721,
	333, 721,
	334, 721,
	336, 721,
	337, 721,
	338, 721,
	339, 721,
	340, 721,
	341, 721,
	344, 721,
	349, 721,
	350, 721,
	351, 721,
	352, 721,
	353, 721,
	354, 721,
	364, 721,
	369, 721,
	370, 721,
	371, 721,
	378, 721,
	384, 721,
	-2, 0,
	-1, 143,
	1, 54,
	382, 54,
	-2, 713,
	-1, 515,
	132, 1335,
	316, 1335,
	359, 1335,
	380, 1335,
	-2, 0,
	-1, 516,
	132, 1282,
	316, 1282,
	359, 1282,
	380, 1282,
	-2, 0,
	-1, 518,
	132, 1394,
	316, 1394,
	359, 1394,
	380, 1394,
	-2, 0,
	-1, 520,
	132, 1417,
	316, 1417,
	359, 1417,
	380, 1417,
	-2, 0,
	-1, 527,
	132, 1340,
	316, 1340,
	359, 1340,
	380, 1340,
	-2, 332,
	-1, 553,
	1, 410,
	377, 410,
	379, 410,
	381, 410,
	382, 410,
	-2, 0,
	-1, 554,
	1, 462,
	129, 462,
	377, 462,
	379, 462,
	381, 462,
	382, 462,
	-2, 0,
	-1, 560,
	1, 424,
	377, 424,
	379, 424,
	381, 424,
	382, 424,
	-2, 0,
	-1, 562,
	1, 428,
	377, 428,
	379, 428,
	381, 428,
	382, 428,
	-2, 0,
	-1, 565,
	1, 436,
	377, 436,
	379, 436,
	381, 436,
	382, 436,
	-2, 0,
	-1, 566,
	1, 441,
	377, 441,
	379, 441,
	381, 441,
	382, 441,
	-2, 0,
	-1, 569,
	1, 451,
	377, 451,
	379, 451,
	381, 451,
	382, 451,
	-2, 0,
	-1, 585,
	117, 723,
	129, 723,
	187, 723,
	214, 723,
	-2, 682,
	-1, 588,
	117, 722,
	129, 722,
	187, 722,
	214, 722,
	-2, 679,
	-1, 645,
	378, 1260,
	-2, 1253,
	-1, 646,
	378, 1261,
	-2, 1254,
	-1, 652,
	5, 907,
	378, 907,
	-2, 1469,
	-1, 677,
	5, 866,
	-2, 1438,
	-1, 678,
	5, 901,
	378, 901,
	-2, 1440,
	-1, 679,
	5, 876,
	-2, 1441,
	-1, 680,
	5, 875,
	-2, 1442,
	-1, 681,
	5, 901,
	378, 901,
	-2, 1445,
	-1, 682,
	5, 901,
	378, 901,
	-2, 1446,
	-1, 683,
	5, 902,
	-2, 1449,
	-1, 684,
	5, 858,
	-2, 1450,
	-1, 685,
	5, 858,
	-2, 1451,
	-1, 686,
	5, 883,
	-2, 1455,
	-1, 687,
	5, 868,
	-2, 1456,
	-1, 688,
	5, 869,
	-2, 1457,
	-1, 689,
	5, 859,
	-2, 1463,
	-1, 690,
	5, 860,
	-2, 1464,
	-1, 691,
	5, 861,
	-2, 1465,
	-1, 692,
	5, 862,
	-2, 1466,
	-1, 693,
	5, 863,
	-2, 1467,
	-1, 694,
	5, 864,
	-2, 1468,
	-1, 695,
	5, 858,
	-2, 1475,
	-1, 696,
	5, 867,
	-2, 1480,
	-1, 697,
	5, 865,
	-2, 1483,
	-1, 698,
	5, 899,
	378, 899,
	-2, 1485,
	-1, 699,
	5, 903,
	-2, 1488,
	-1, 700,
	5, 905,
	-2, 1489,
	-1, 701,
	5, 898,
	378, 898,
	-2, 1494,
	-1, 886,
	230, 711,
	-2, 556,
	-1, 890,
	216, 1257,
	-2, 0,
	-1, 925,
	1, 216,
	377, 216,
	379, 216,
	381, 216,
	382, 216,
	-2, 686,
	-1, 932,
	4, 1493,
	10, 1493,
	11, 1493,
	13, 1493,
	14, 1493,
	15, 1493,
	16, 1493,
	17, 1493,
	18, 1493,
	20, 1493,
	21, 1493,
	23, 1493,
	26, 1493,
	28, 1493,
	30, 1493,
	33, 1493,
	34, 1493,
	35, 1493,
	36, 1493,
	37, 1493,
	38, 1493,
	39, 1493,
	40, 1493,
	41, 1493,
	42, 1493,
	44, 1493,
	45, 1493,
	46, 1493,
	47, 1493,
	48, 1493,
	51, 1493,
	52, 1493,
	53, 1493,
	55, 1493,
	56, 1493,
	57, 1493,
	60, 1493,
	61, 1493,
	62, 1493,
	63, 1493,
	64, 1493,
	65, 1493,
	66, 1493,
	67, 1493,
	69, 1493,
	70, 1493,
	71, 1493,
	72, 1493,
	74, 1493,
	75, 1493,
	76, 1493,
	77, 1493,
	85, 1493,
	86, 1493,
	87, 1493,
	88, 1493,
	89, 1493,
	90, 1493,
	91, 1493,
	92, 1493,
	94, 1493,
	96, 1493,
	98, 1493,
	101, 1493,
	102, 1493,
	104, 1493,
	108, 1493,
	109, 1493,
	110, 1493,
	111, 1493,
	112, 1493,
	113, 1493,
	114, 1493,
	118, 1493,
	119, 1493,
	120, 1493,
	121, 1493,
	122, 1493,
	123, 1493,
	124, 1493,
	125, 1493,
	126, 1493,
	127, 1493,
	128, 1493,
	130, 1493,
	133, 1493,
	135, 1493,
	136, 1493,
	138, 1493,
	141, 1493,
	142, 1493,
	145, 1493,
	146, 1493,
	147, 1493,
	148, 1493,
	149, 1493,
	150, 1493,
	151, 1493,
	152, 1493,
	154, 1493,
	156, 1493,
	157, 1493,
	158, 1493,
	159, 1493,
	160, 1493,
	161, 1493,
	162, 1493,
	163, 1493,
	164, 1493,
	166, 1493,
	168, 1493,
	169, 1493,
	170, 1493,
	171, 1493,
	172, 1493,
	173, 1493,
	174, 1493,
	175, 1493,
	176, 1493,
	177, 1493,
	179, 1493,
	180, 1493,
	182, 1493,
	183, 1493,
	184, 1493,
	185, 1493,
	186, 1493,
	188, 1493,
	189, 1493,
	192, 1493,
	193, 1493,
	194, 1493,
	196, 1493,
	197, 1493,
	198, 1493,
	199, 1493,
	200, 1493,
	201, 1493,
	202, 1493,
	203, 1493,
	204, 1493,
	205, 1493,
	209, 1493,
	210, 1493,
	211, 1493,
	212, 1493,
	213, 1493,
	215, 1493,
	218, 1493,
	219, 1493,
	221, 1493,
	222, 1493,
	224, 1493,
	226, 1493,
	227, 1493,
	228, 1493,
	229, 1493,
	230, 1493,
	231, 1493,
	233, 1493,
	234, 1493,
	235, 1493,
	236, 1493,
	237, 1493,
	239, 1493,
	240, 1493,
	241, 1493,
	242, 1493,
	243, 1493,
	244, 1493,
	245, 1493,
	246, 1493,
	248, 1493,
	249, 1493,
	250, 1493,
	251, 1493,
	252, 1493,
	253, 1493,
	254, 1493,
	255, 1493,
	256, 1493,
	257, 1493,
	258, 1493,
	259, 1493,
	260, 1493,
	262, 1493,
	263, 1493,
	264, 1493,
	265, 1493,
	266, 1493,
	267, 1493,
	268, 1493,
	269, 1493,
	270, 1493,
	271, 1493,
	272, 1493,
	273, 1493,
	275, 1493,
	276, 1493,
	277, 1493,
	278, 1493,
	279, 1493,
	281, 1493,
	282, 1493,
	283, 1493,
	284, 1493,
	285, 1493,
	286, 1493,
	287, 1493,
	288, 1493,
	289, 1493,
	291, 1493,
	292, 1493,
	293, 1493,
	294, 1493,
	295, 1493,
	296, 1493,
	297, 1493,
	298, 1493,
	299, 1493,
	300, 1493,
	302, 1493,
	304, 1493,
	305, 1493,
	306, 1493,
	307, 1493,
	308, 1493,
	309, 1493,
	310, 1493,
	311, 1493,
	313, 1493,
	314, 1493,
	315, 1493,
	318, 1493,
	319, 1493,
	320, 1493,
	321, 1493,
	323, 1493,
	324, 1493,
	325, 1493,
	326, 1493,
	329, 1493,
	330, 1493,
	331, 1493,
	332, 1493,
	334, 1493,
	336, 1493,
	337, 1493,
	338, 1493,
	339, 1493,
	340, 1493,
	341, 1493,
	344, 1493,
	349, 1493,
	350, 1493,
	351, 1493,
	352, 1493,
	353, 1493,
	354, 1493,
	355, 1493,
	357, 1493,
	358, 1493,
	359, 1493,
	360, 1493,
	361, 1493,
	362, 1493,
	363, 1493,
	364, 1493,
	366, 1493,
	367, 1493,
	368, 1493,
	369, 1493,
	370, 1493,
	371, 1493,
	372, 1493,
	373, 1493,
	374, 1493,
	376, 1493,
	379, 1493,
	380, 1493,
	383, 1493,
	384, 1493,
	-2, 0,
	-1, 945,
	132, 1394,
	316, 1394,
	359, 1394,
	380, 1394,
	-2, 0,
	-1, 962,
	132, 1417,
	316, 1417,
	359, 1417,
	380, 1417,
	-2, 0,
	-1, 963,
	169, 624,
	239, 624,
	243, 624,
	-2, 320,
	-1, 1035,
	117, 722,
	129, 722,
	187, 722,
	214, 722,
	-2, 683,
	-1, 1116,
	107, 688,
	117, 688,
	129, 688,
	165, 688,
	187, 688,
	214, 688,
	220, 688,
	327, 688,
	-2, 1036,
	-1, 1126,
	378, 1237,
	-2, 1225,
	-1, 1144,
	379, 1149,
	-2, 0,
	-1, 1168,
	169, 624,
	239, 624,
	243, 624,
	-2, 619,
	-1, 1196,
	379, 1149,
	-2, 0,
	-1, 1200,
	107, 688,
	117, 688,
	129, 688,
	165, 688,
	187, 688,
	214, 688,
	220, 688,
	327, 688,
	-2, 789,
	-1, 1342,
	169, 624,
	239, 624,
	243, 624,
	-2, 322,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 942,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 943,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 944,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 945,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 946,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 947,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 948,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 949,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 958,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 959,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 960,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 965,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 967,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 971,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 972,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 973,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 974,
	-1, 1551,
	132, 1160,
	378, 1260,
	-2, 1253,
	-1, 1552,
	132, 1161,
	-2, 1434,
	-1, 1553,
	132, 1162,
	-2, 1339,
	-1, 1554,
	132, 1163,
	-2, 1300,
	-1, 1555,
	132, 1164,
	-2, 1317,
	-1, 1556,
	132, 1165,
	-2, 1338,
	-1, 1557,
	132, 1166,
	-2, 1391,
	-1, 1633,
	1, 790,
	74, 790,
	107, 790,
	117, 790,
	129, 790,
	133, 790,
	137, 790,
	139, 790,
	156, 790,
	165, 790,
	172, 790,
	183, 790,
	187, 790,
	201, 790,
	214, 790,
	216, 790,
	220, 790,
	261, 790,
	263, 790,
	327, 790,
	335, 790,
	346, 790,
	347, 790,
	356, 790,
	377, 790,
	379, 790,
	381, 790,
	382, 790,
	383, 790,
	-2, 789,
	-1, 1781,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 966,
	-1, 1782,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 968,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 969,
	-1, 1805,
	225, 1120,
	-2, 1122,
	-1, 2039,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 970,
	-1, 2044,
	168, 0,
	-2, 986,
	-1, 2053,
	225, 1121,
	-2, 1123,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1013,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1014,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1015,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1019,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1020,
	-1, 2103,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1021,
	-1, 2237,
	168, 0,
	-2, 987,
	-1, 2240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 990,
	-1, 2241,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 992,
	-1, 2363,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 991,
	-1, 2364,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 993,
	-1, 2371,
	168, 0,
	-2, 1022,
	-1, 2449,
	168, 0,
	-2, 1023,
	-1, 2530,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1437,
	-1, 2616,
	378, 1505,
	-2, 497,
}

const sqlPrivate = 57344

const sqlLast = 44174

var sqlAct = [...]int{

	646, 2598, 2612, 2332, 2331, 2613, 2596, 2188, 2579, 2539,
	2529, 1699, 2538, 2397, 2502, 2540, 2015, 1240, 2342, 2072,
	1707, 2454, 983, 2198, 2154, 2528, 2305, 1247, 1337, 2222,
	750, 73, 2291, 605, 2220, 1628, 1282, 589, 1336, 636,
	1565, 1696, 182, 777, 2377, 644, 1981, 182, 2155, 1919,
	622, 2271, 2028, 1194, 2214, 182, 880, 1871, 1898, 1198,
	1708, 1203, 1177, 1775, 182, 1683, 1646, 1243, 1682, 182,
	182, 1629, 1637, 182, 1672, 2125, 182, 1983, 1870, 1429,
	639, 1906, 1989, 1531, 182, 1424, 472, 26, 597, 123,
	1367, 1678, 966, 457, 1771, 1122, 1816, 1236, 526, 1206,
	1040, 1507, 1754, 1178, 1260, 1208, 1515, 1494, 1363, 616,
	1506, 1491, 1407, 965, 1405, 1154, 756, 1158, 1580, 1525,
	915, 1680, 912, 985, 926, 643, 905, 1701, 1686, 759,
	1185, 454, 1615, 1602, 738, 182, 182, 1547, 506, 1111,
	523, 615, 124, 182, 125, 1041, 1366, 638, 1168, 519,
	173, 484, 1679, 123, 902, 1254, 178, 736, 594, 1167,
	1408, 1406, 1045, 2306, 2139, 1804, 547, 2140, 2333, 182,
	182, 182, 182, 779, 1700, 1262, 2629, 182, 182, 2628,
	2622, 2621, 2333, 2622, 593, 2622, 2575, 1262, 1262, 2574,
	1231, 2573, 2555, 1231, 2550, 1231, 2304, 2549, 1722, 2546,
	1195, 1722, 2526, 1231, 753, 593, 1737, 2634, 1841, 1842,
	2525, 1998, 2497, 2492, 1737, 2620, 1730, 2356, 1999, 603,
	498, 2488, 588, 2480, 2451, 1231, 1722, 2304, 1730, 1283,
	26, 2445, 123, 2428, 2425, 1231, 2423, 2304, 1231, 2408,
	2304, 2407, 2385, 1231, 2382, 2304, 1231, 2365, 1231, 1056,
	1057, 1730, 1086, 1087, 1088, 1096, 1097, 1098, 2327, 2325,
	40, 2037, 1722, 1722, 1673, 1089, 586, 1227, 585, 2303,
	2284, 41, 1059, 2304, 1231, 1100, 2239, 2213, 2208, 2135,
	1730, 1677, 1677, 2136, 44, 764, 768, 1841, 1842, 2498,
	1737, 2128, 774, 740, 598, 2048, 1058, 2009, 1604, 1722,
	1808, 1971, 1078, 1970, 40, 2356, 1809, 1231, 1895, 1075,
	51, 742, 1231, 743, 1888, 41, 1841, 1842, 1889, 1859,
	1860, 1861, 2630, 1886, 1673, 1847, 2128, 1722, 44, 1885,
	868, 1884, 2236, 1722, 1741, 1722, 2609, 1729, 1722, 62,
	1856, 1730, 1603, 2226, 2026, 1635, 63, 1722, 479, 64,
	2108, 1737, 1721, 2050, 51, 596, 1722, 1081, 1082, 1083,
	1084, 1508, 1231, 183, 1971, 1774, 1064, 1752, 1815, 1856,
	1676, 702, 1609, 1345, 1677, 1275, 1608, 1704, 1528, 1276,
	1172, 1510, 66, 62, 866, 947, 1263, 143, 1093, 1101,
	63, 1857, 479, 64, 2307, 944, 943, 942, 1263, 1263,
	941, 940, 939, 938, 1847, 937, 936, 1099, 935, 140,
	934, 933, 744, 741, 579, 578, 1056, 1057, 577, 182,
	1364, 182, 182, 545, 182, 1091, 66, 544, 543, 182,
	1529, 542, 1079, 1847, 541, 182, 540, 539, 142, 1059,
	538, 537, 536, 535, 534, 533, 532, 531, 182, 182,
	182, 182, 182, 530, 529, 514, 513, 929, 1090, 512,
	140, 511, 510, 1058, 445, 444, 1858, 872, 67, 1998,
	1857, 443, 442, 441, 1862, 141, 426, 1841, 1842, 182,
	1859, 1860, 1861, 134, 1530, 1527, 425, 417, 594, 142,
	135, 416, 1085, 182, 127, 69, 415, 70, 414, 1857,
	1841, 1842, 407, 1859, 1860, 1861, 406, 1080, 1914, 182,
	1268, 140, 67, 126, 166, 1756, 2235, 884, 478, 182,
	888, 103, 1261, 1398, 1094, 165, 141, 164, 163, 162,
	1856, 161, 160, 1064, 159, 158, 780, 157, 127, 69,
	142, 70, 156, 155, 781, 1858, 908, 908, 154, 1603,
	929, 904, 153, 1856, 152, 140, 151, 150, 140, 1385,
	149, 1532, 478, 148, 126, 103, 1851, 1843, 1844, 1845,
	1846, 1848, 1849, 147, 1858, 909, 879, 141, 981, 1544,
	927, 182, 146, 145, 142, 134, 144, 142, 1542, 1540,
	1199, 948, 135, 1092, 1847, 1538, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 919, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 1052, 126, 1370, 1847, 976, 2349,
	978, 141, 2266, 1036, 141, 2602, 2600, 140, 2545, 134,
	2527, 2512, 134, 2507, 2446, 1862, 135, 2426, 2597, 135,
	1526, 2270, 2269, 1852, 1850, 1851, 1843, 1844, 1845, 1846,
	1848, 1849, 594, 2265, 2264, 2257, 142, 2256, 1862, 126,
	1857, 2255, 1703, 1853, 1854, 1855, 1735, 1973, 960, 963,
	2251, 2250, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 2249, 1035, 1857, 2248, 1279, 2242, 2219, 2122, 2117,
	2116, 2115, 2058, 141, 1969, 1926, 1922, 1031, 1893, 1890,
	1878, 134, 1869, 1840, 1837, 1836, 1056, 1057, 135, 1834,
	1056, 1057, 1096, 1097, 1098, 979, 1197, 872, 1821, 1820,
	1805, 1633, 1052, 1196, 751, 1051, 1841, 1842, 877, 1059,
	1502, 126, 1100, 1059, 1130, 1858, 182, 1123, 182, 1114,
	586, 2623, 585, 2607, 2587, 2586, 1246, 2074, 2517, 2516,
	1037, 1038, 2515, 1058, 1048, 1049, 2483, 1058, 1858, 1078,
	2475, 182, 182, 2474, 2465, 2463, 1053, 2440, 1841, 1842,
	2439, 1859, 1860, 1861, 1176, 1060, 1061, 1062, 1063, 1065,
	1066, 2348, 1365, 1770, 2047, 2438, 1183, 2619, 2394, 2373,
	2357, 1769, 594, 1841, 1842, 1126, 2336, 1156, 1157, 2324,
	2310, 2262, 2227, 1160, 2196, 2194, 2193, 2191, 2163, 1181,
	2162, 2143, 2131, 1163, 1081, 1082, 1083, 1084, 2043, 1959,
	930, 1856, 1953, 1064, 1853, 1854, 1855, 1064, 931, 1939,
	2013, 1938, 1924, 1852, 1850, 1851, 1843, 1844, 1845, 1846,
	1848, 1849, 1503, 1847, 123, 1093, 1101, 1853, 1854, 1855,
	1894, 1868, 1830, 1829, 1826, 1801, 1852, 1850, 1851, 1843,
	1844, 1845, 1846, 1848, 1849, 1796, 929, 182, 1732, 1496,
	1159, 1162, 1620, 779, 1171, 1592, 1536, 1056, 1057, 182,
	1912, 1239, 1091, 752, 1175, 1847, 1169, 1193, 1166, 1079,
	1201, 182, 1939, 1152, 1229, 1173, 1151, 182, 1150, 182,
	1059, 182, 1149, 1148, 1147, 182, 1245, 1146, 1145, 1144,
	1847, 1143, 1142, 930, 1141, 1140, 1232, 1139, 1138, 1137,
	1136, 931, 1135, 1134, 1058, 1127, 1862, 1115, 1114, 959,
	951, 1056, 1057, 923, 2457, 2355, 1238, 2244, 2218, 2138,
	2134, 1807, 1621, 1123, 1841, 1842, 182, 182, 2011, 1085,
	1112, 1857, 1197, 929, 1059, 182, 1543, 1740, 182, 1251,
	1984, 2359, 2358, 2352, 1080, 1541, 1539, 2141, 2000, 1673,
	1199, 1164, 1537, 1034, 878, 975, 1165, 1962, 1058, 779,
	1029, 1094, 1118, 1956, 1952, 1892, 1891, 1780, 182, 1402,
	1280, 972, 1132, 182, 2016, 1841, 1842, 1528, 182, 182,
	1739, 182, 1351, 182, 1244, 182, 1762, 182, 2378, 1700,
	2075, 1516, 1155, 904, 1265, 1812, 2605, 1267, 182, 2604,
	1994, 1270, 1371, 1230, 182, 182, 1858, 1209, 167, 1210,
	2150, 2570, 1289, 182, 2510, 2487, 1023, 1726, 1409, 2023,
	1742, 2318, 2571, 2419, 731, 729, 1647, 2418, 1064, 1529,
	1092, 1253, 1015, 1360, 2416, 182, 1256, 727, 2415, 779,
	1095, 2182, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 1062, 1063, 1065, 1066, 446, 1024, 419, 2179, 2147,
	2146, 1355, 1354, 1825, 1364, 1361, 1372, 1845, 1846, 1848,
	1849, 1841, 1842, 1824, 1823, 960, 733, 1277, 1339, 1278,
	752, 123, 1438, 1530, 1527, 1338, 724, 1129, 1211, 1822,
	1639, 1342, 1847, 170, 1079, 1853, 1854, 1855, 1783, 2174,
	1356, 1368, 1725, 1650, 1852, 1850, 1851, 1843, 1844, 1845,
	1846, 1848, 1849, 1376, 1668, 1397, 1352, 1289, 1289, 1380,
	1664, 1381, 1411, 1382, 1386, 1383, 594, 1384, 1379, 1661,
	1478, 594, 1843, 1844, 1845, 1846, 1848, 1849, 2486, 973,
	450, 1209, 423, 1210, 1390, 1392, 1170, 865, 2330, 1596,
	1358, 182, 1595, 182, 1439, 704, 182, 2617, 1857, 171,
	1532, 609, 1697, 1238, 1274, 1396, 1410, 182, 586, 1080,
	1420, 586, 586, 1421, 1422, 1428, 779, 1403, 1404, 182,
	2012, 1032, 974, 182, 1639, 2186, 182, 1216, 1847, 2187,
	182, 1493, 1966, 1638, 182, 1733, 1493, 2031, 2399, 1513,
	182, 581, 592, 1395, 493, 1511, 449, 182, 779, 930,
	1649, 1234, 182, 1209, 594, 1210, 780, 931, 431, 1623,
	182, 1066, 1211, 1330, 781, 584, 1575, 182, 1612, 2523,
	1504, 1501, 2165, 1858, 1622, 1257, 2068, 1516, 182, 1526,
	182, 1375, 182, 1055, 958, 182, 1359, 182, 172, 182,
	182, 1670, 182, 182, 1857, 1640, 2570, 929, 1009, 1558,
	591, 182, 703, 1651, 1653, 1273, 1430, 1437, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 1532, 2562, 1626, 432,
	1745, 1991, 1658, 2022, 1033, 2468, 583, 1599, 1849, 1598,
	1666, 2024, 1747, 607, 1211, 1607, 930, 1010, 1613, 584,
	1648, 1340, 1617, 1618, 931, 1022, 2542, 1475, 1601, 168,
	1656, 1028, 1201, 1532, 1748, 593, 1662, 1961, 1643, 1955,
	2582, 1702, 780, 1702, 1212, 1218, 1746, 1669, 1220, 1858,
	781, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849,
	1714, 725, 725, 908, 123, 908, 1217, 2172, 1014, 169,
	123, 779, 2030, 1394, 726, 1728, 448, 2589, 418, 182,
	2065, 1992, 1225, 1500, 1706, 1772, 1773, 1214, 1498, 1717,
	2494, 1715, 1718, 1716, 1950, 182, 182, 182, 1224, 182,
	927, 1724, 1727, 424, 1153, 1215, 451, 1723, 420, 1734,
	735, 1736, 1692, 734, 1753, 2495, 447, 2476, 421, 1222,
	969, 2543, 780, 725, 1262, 1720, 1991, 1793, 182, 2599,
	781, 2166, 408, 2032, 2066, 2597, 1160, 1223, 1163, 1184,
	1473, 1476, 590, 1791, 2369, 2400, 1365, 1362, 1157, 1156,
	1843, 1844, 1845, 1846, 1848, 1849, 988, 2333, 1743, 2422,
	1109, 1636, 980, 2561, 572, 1828, 1207, 1197, 1616, 1632,
	593, 2477, 434, 433, 2231, 1043, 123, 1472, 1212, 2544,
	1785, 1118, 602, 2541, 2569, 1492, 503, 1056, 1057, 1518,
	970, 1221, 1019, 2567, 971, 2580, 996, 2341, 1188, 1694,
	954, 946, 1550, 1550, 1563, 1965, 482, 600, 1583, 572,
	1059, 1532, 1587, 1588, 1590, 1761, 1759, 1766, 1765, 1757,
	2104, 1191, 582, 1044, 1768, 492, 1788, 602, 594, 485,
	2299, 2460, 1797, 1798, 1058, 2299, 1789, 1186, 2292, 651,
	1794, 2410, 1374, 1054, 957, 1042, 2260, 573, 1189, 2290,
	1212, 2581, 490, 2409, 2294, 2392, 1814, 485, 486, 780,
	601, 2314, 1020, 440, 572, 2595, 1187, 781, 2149, 2300,
	2560, 1920, 1044, 2583, 2300, 1935, 1474, 1931, 1695, 1252,
	490, 1908, 602, 435, 1786, 1241, 486, 1784, 2590, 1416,
	487, 780, 573, 2064, 873, 875, 2317, 2293, 2503, 781,
	409, 1343, 594, 2316, 1064, 182, 779, 1800, 1864, 1865,
	1866, 182, 182, 489, 1896, 182, 1043, 1021, 487, 1902,
	182, 1811, 1389, 182, 1346, 2343, 964, 2105, 1190, 2608,
	2199, 182, 1043, 2106, 706, 1263, 882, 182, 182, 182,
	930, 489, 1903, 182, 1039, 1921, 182, 573, 931, 1901,
	1790, 1499, 182, 182, 182, 182, 182, 1792, 1916, 2261,
	574, 2393, 182, 1941, 881, 182, 1900, 1350, 1417, 182,
	1079, 410, 1904, 1905, 2313, 175, 1910, 1940, 182, 949,
	2594, 1915, 2295, 1778, 2296, 953, 1042, 2295, 182, 2296,
	182, 1911, 182, 1925, 989, 182, 1875, 1876, 1877, 182,
	1907, 705, 1042, 1909, 182, 574, 182, 1897, 1932, 1188,
	997, 1611, 607, 182, 2298, 1972, 2315, 1974, 1348, 2298,
	1610, 969, 591, 2301, 2029, 1289, 182, 929, 2301, 1044,
	488, 1349, 1191, 990, 780, 594, 987, 890, 929, 182,
	575, 1927, 781, 2189, 1951, 1080, 2334, 2390, 1614, 1964,
	501, 495, 1958, 1841, 1842, 2008, 1949, 2272, 488, 1189,
	574, 2372, 1289, 2126, 901, 1535, 2017, 2259, 969, 899,
	2185, 1872, 2042, 576, 1967, 1835, 3, 1975, 2391, 182,
	1978, 1795, 1738, 599, 1675, 575, 491, 1667, 1660, 1996,
	1976, 477, 34, 969, 436, 1104, 1105, 1106, 1107, 1108,
	1987, 1993, 476, 33, 2297, 1117, 1027, 1026, 952, 2297,
	2001, 1289, 475, 30, 491, 1125, 870, 1873, 576, 1018,
	2002, 2003, 1007, 2004, 2005, 2040, 2041, 1039, 2007, 182,
	2019, 2020, 1763, 2045, 723, 2021, 437, 1387, 970, 1190,
	575, 2018, 971, 2025, 871, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 867, 1378, 1133, 2060, 2061, 2062, 1799, 1013,
	2035, 1005, 2033, 970, 1534, 1802, 438, 971, 439, 2537,
	1847, 474, 79, 576, 1936, 473, 78, 1289, 470, 22,
	471, 23, 1818, 1819, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2049, 2107, 2054, 1228, 2067, 2069, 2070,
	182, 1936, 2078, 1289, 1289, 2051, 182, 2081, 500, 494,
	762, 2083, 1289, 1289, 2500, 182, 182, 2076, 2110, 900,
	1179, 1179, 1867, 2288, 898, 34, 1857, 607, 1489, 1583,
	1583, 1583, 469, 28, 1880, 2170, 33, 468, 20, 1017,
	2111, 2137, 1006, 648, 1487, 1289, 30, 1184, 466, 19,
	2010, 467, 18, 461, 15, 1003, 728, 730, 2168, 780,
	2109, 2133, 182, 2127, 182, 462, 16, 781, 2129, 2161,
	2184, 182, 2142, 123, 929, 2160, 1012, 2130, 2124, 460,
	14, 1004, 2176, 1001, 2195, 999, 2176, 2145, 993, 182,
	182, 2192, 2176, 2175, 2152, 897, 2201, 2180, 2148, 2209,
	1980, 1858, 1698, 2183, 1691, 79, 1188, 182, 1272, 78,
	1271, 1269, 22, 2173, 23, 1266, 1264, 182, 465, 12,
	1226, 779, 182, 182, 2212, 459, 10, 1483, 779, 1191,
	2190, 1219, 1213, 2055, 1982, 1484, 2433, 1485, 464, 7,
	2169, 1490, 2171, 2202, 2205, 1186, 463, 6, 2211, 2210,
	2200, 1900, 1430, 2079, 2216, 2159, 1189, 458, 5, 2203,
	1776, 1430, 2084, 2204, 2228, 182, 1046, 2144, 2571, 747,
	2238, 2234, 1369, 2354, 1187, 2353, 28, 2215, 480, 2435,
	930, 20, 1655, 2207, 1639, 1002, 1671, 1639, 931, 748,
	2233, 930, 19, 1654, 2114, 18, 1652, 15, 1663, 931,
	1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849, 1659, 16,
	1400, 1401, 1764, 1000, 1289, 998, 2470, 1324, 992, 182,
	1056, 1057, 182, 14, 991, 896, 1777, 2307, 2448, 2258,
	2421, 2273, 779, 182, 182, 1050, 1190, 182, 182, 182,
	1665, 1657, 2499, 1047, 2339, 1705, 1693, 1690, 607, 607,
	502, 1486, 1600, 1341, 182, 1281, 2578, 2593, 1488, 182,
	2384, 182, 12, 182, 182, 182, 749, 1058, 2282, 10,
	182, 2275, 2278, 182, 2308, 2280, 929, 2311, 2277, 2279,
	2274, 2217, 7, 1025, 182, 182, 1056, 1057, 1841, 1842,
	6, 929, 2161, 1056, 1057, 1750, 1749, 2123, 2160, 2071,
	1750, 5, 2014, 1917, 2287, 1887, 2335, 1751, 1597, 1059,
	1594, 2340, 1593, 2345, 2329, 1524, 1419, 1413, 182, 1418,
	1120, 2161, 1324, 1324, 1323, 1425, 2161, 2160, 2246, 2063,
	1977, 2118, 2160, 1058, 2346, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 2344, 1477, 2360,
	1479, 1480, 1481, 1482, 2276, 2367, 2338, 1130, 2159, 182,
	1128, 182, 2351, 779, 182, 2350, 2283, 1505, 2362, 2374,
	2371, 1016, 182, 1011, 1117, 1008, 994, 956, 779, 1344,
	580, 2398, 483, 1377, 995, 2178, 2312, 2159, 1913, 1619,
	2381, 2181, 2159, 1545, 1546, 1566, 2493, 1562, 2252, 1574,
	1576, 1581, 1584, 1585, 1586, 1827, 2388, 2383, 2453, 1323,
	1323, 2395, 182, 1289, 2161, 929, 2337, 930, 2368, 182,
	2160, 2403, 1533, 2401, 2386, 931, 1131, 182, 182, 929,
	929, 2424, 55, 1238, 2157, 625, 2289, 2431, 2151, 2402,
	2176, 1685, 2404, 1684, 782, 1353, 2161, 647, 1549, 182,
	2361, 2420, 2160, 2436, 182, 1431, 2441, 2443, 2444, 722,
	649, 182, 2442, 2432, 780, 1286, 650, 1287, 1161, 1289,
	637, 780, 781, 1284, 631, 2464, 2447, 924, 1709, 781,
	2450, 1357, 1497, 2449, 1514, 1810, 182, 182, 2459, 2456,
	2458, 2430, 1124, 182, 2413, 2414, 2427, 617, 629, 628,
	2159, 929, 2466, 1512, 2481, 950, 182, 2479, 1918, 1990,
	929, 929, 2482, 2347, 2467, 1415, 179, 1767, 1412, 1986,
	2167, 412, 422, 2484, 1289, 2473, 2485, 1838, 922, 427,
	1572, 1564, 2159, 1560, 182, 1030, 182, 1182, 452, 182,
	594, 779, 1183, 496, 179, 1110, 1710, 504, 2490, 2491,
	509, 977, 1997, 1731, 1174, 1423, 746, 2518, 528, 745,
	2520, 1288, 2606, 1347, 2519, 1744, 1103, 1102, 732, 182,
	2524, 2434, 2462, 968, 2522, 780, 967, 1242, 2521, 1934,
	2588, 2469, 481, 781, 2511, 2164, 182, 182, 182, 2536,
	2535, 2534, 2509, 2161, 182, 139, 2547, 2554, 136, 2160,
	2506, 138, 482, 137, 1963, 82, 32, 31, 182, 739,
	739, 2559, 2557, 2558, 2556, 102, 101, 412, 2412, 930,
	2568, 100, 99, 98, 97, 2566, 96, 931, 95, 94,
	93, 92, 2572, 91, 930, 90, 89, 88, 2577, 2576,
	87, 86, 931, 412, 412, 772, 412, 85, 84, 524,
	2584, 179, 869, 485, 2591, 2585, 1326, 521, 81, 2592,
	80, 29, 25, 106, 24, 77, 1288, 1288, 779, 76,
	779, 27, 17, 11, 21, 60, 490, 61, 59, 2159,
	2610, 2611, 486, 58, 57, 13, 2618, 53, 2505, 52,
	50, 49, 2624, 48, 47, 9, 2627, 2625, 2626, 105,
	2027, 45, 2633, 2631, 2632, 2380, 2635, 8, 43, 42,
	104, 2601, 118, 2603, 487, 115, 117, 114, 116, 120,
	119, 112, 110, 1325, 111, 113, 780, 1781, 1782, 109,
	108, 121, 39, 1787, 781, 38, 37, 489, 2551, 2552,
	2553, 780, 2406, 1566, 1566, 36, 35, 2, 1, 781,
	0, 0, 0, 0, 0, 0, 2417, 0, 0, 0,
	0, 1326, 1326, 0, 0, 1806, 0, 0, 0, 0,
	0, 1813, 0, 0, 1817, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 1831, 930, 930, 0, 0, 0, 0, 0, 0,
	931, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1566,
	1566, 1566, 0, 0, 0, 1117, 0, 0, 1325, 1325,
	621, 0, 1581, 1581, 1581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 488, 0, 0, 0, 1179, 0,
	0, 0, 0, 607, 930, 0, 0, 0, 0, 0,
	0, 0, 931, 930, 930, 0, 0, 411, 0, 0,
	2496, 931, 931, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 528, 0, 886, 528, 0, 891, 0,
	0, 0, 0, 894, 780, 0, 2513, 2514, 0, 412,
	491, 0, 781, 0, 0, 0, 0, 0, 455, 0,
	0, 0, 528, 528, 412, 916, 869, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 528, 0, 1988, 0, 1056, 1057, 0,
	0, 0, 0, 44, 0, 0, 0, 528, 0, 0,
	0, 0, 0, 757, 0, 1285, 1324, 2006, 0, 0,
	1059, 0, 0, 955, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 528, 607, 607, 0, 1323, 0, 766,
	770, 0, 776, 0, 1058, 0, 0, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 2034, 63, 0, 479, 64, 1425,
	0, 780, 0, 780, 1323, 2038, 1566, 1566, 2039, 781,
	0, 781, 1324, 0, 0, 0, 0, 0, 0, 0,
	2044, 0, 0, 41, 0, 412, 0, 0, 0, 2052,
	0, 66, 0, 0, 0, 0, 44, 2056, 0, 0,
	2006, 0, 0, 0, 1064, 0, 0, 0, 1324, 1324,
	1285, 1285, 0, 1323, 0, 0, 0, 1324, 1324, 0,
	2080, 0, 0, 0, 2082, 1566, 1566, 1566, 1566, 1566,
	1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
	1566, 1566, 1566, 1566, 0, 1566, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 2112, 2113, 0,
	479, 0, 0, 0, 0, 0, 2119, 2120, 2121, 0,
	1079, 0, 0, 0, 0, 0, 0, 67, 0, 1323,
	0, 0, 0, 0, 0, 0, 1841, 1842, 0, 1859,
	1860, 1861, 0, 2132, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 69, 0, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 1323, 0, 0, 0,
	140, 0, 0, 2153, 1323, 1323, 0, 478, 1056, 1057,
	103, 0, 626, 74, 0, 0, 0, 0, 0, 1856,
	509, 0, 739, 0, 0, 1080, 0, 0, 0, 142,
	0, 1059, 0, 0, 0, 1841, 1842, 1323, 1859, 1860,
	1861, 0, 0, 0, 0, 412, 412, 0, 0, 1056,
	1057, 2046, 0, 0, 0, 1058, 1179, 0, 0, 0,
	67, 1078, 0, 0, 1288, 607, 141, 0, 0, 0,
	0, 0, 1059, 0, 134, 770, 0, 74, 0, 0,
	0, 135, 0, 1847, 0, 0, 127, 69, 1856, 70,
	776, 0, 0, 0, 0, 0, 1058, 0, 0, 1324,
	0, 1288, 0, 140, 456, 0, 0, 2237, 0, 0,
	478, 2240, 2241, 103, 0, 2243, 1081, 1082, 1083, 1084,
	0, 0, 2245, 0, 2247, 1064, 1060, 1061, 1062, 1063,
	1065, 1066, 142, 0, 0, 0, 587, 0, 0, 595,
	2254, 0, 0, 0, 0, 0, 0, 0, 0, 1857,
	1288, 179, 1847, 0, 0, 758, 74, 0, 0, 1326,
	0, 0, 0, 412, 0, 0, 1064, 0, 0, 141,
	0, 0, 0, 2263, 0, 1250, 0, 134, 0, 0,
	0, 412, 0, 412, 135, 412, 0, 0, 0, 1258,
	0, 1079, 0, 1862, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 1857, 0,
	0, 770, 0, 2309, 1858, 0, 1325, 0, 0, 0,
	528, 179, 1079, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 528, 0, 0, 1326, 0, 0, 0, 0,
	0, 1085, 1288, 1288, 0, 0, 0, 0, 0, 0,
	0, 1288, 1288, 1325, 0, 0, 1080, 0, 0, 0,
	0, 0, 528, 0, 0, 0, 0, 528, 0, 0,
	0, 0, 179, 528, 0, 528, 0, 528, 0, 528,
	0, 528, 0, 1858, 1288, 0, 0, 0, 0, 0,
	2363, 2364, 1388, 0, 0, 0, 0, 1080, 528, 528,
	0, 1326, 1325, 1853, 1854, 1855, 0, 412, 1324, 0,
	0, 1566, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 2376, 0, 0, 0, 0, 0, 2379, 0, 528,
	0, 0, 0, 0, 0, 0, 0, 1326, 1326, 0,
	0, 0, 0, 0, 0, 0, 1326, 1326, 0, 0,
	0, 0, 1566, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 1324, 0, 0, 0, 1325, 0,
	0, 2411, 1853, 1854, 1855, 0, 0, 0, 0, 1326,
	0, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849,
	0, 757, 1204, 0, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 1325, 1325, 0, 0, 0, 0,
	0, 0, 0, 1325, 1325, 1323, 0, 0, 0, 1324,
	0, 0, 0, 0, 1566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 1325, 739, 0, 2461,
	869, 0, 0, 1288, 0, 0, 1192, 0, 0, 595,
	0, 412, 0, 0, 0, 0, 0, 0, 1285, 0,
	0, 1323, 40, 1631, 0, 0, 0, 412, 0, 0,
	412, 0, 0, 41, 1644, 0, 0, 0, 412, 0,
	0, 0, 0, 607, 412, 0, 44, 0, 0, 0,
	0, 412, 0, 0, 0, 1285, 1674, 0, 0, 1237,
	0, 0, 0, 0, 1681, 0, 0, 0, 0, 0,
	0, 869, 51, 0, 0, 0, 1323, 770, 0, 1255,
	0, 1255, 412, 0, 1713, 0, 528, 0, 0, 528,
	0, 528, 0, 412, 412, 0, 1719, 869, 1326, 2533,
	2533, 62, 0, 0, 1285, 1644, 0, 0, 63, 0,
	479, 64, 0, 0, 0, 2548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2533, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	1285, 1113, 0, 1116, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 2533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1755, 0, 0, 1285, 1285, 0, 0,
	0, 0, 2614, 1399, 0, 1285, 1285, 0, 0, 412,
	412, 412, 1288, 412, 2614, 0, 0, 2614, 2614, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 412, 0, 0, 0, 127, 69, 0, 70,
	0, 0, 0, 1841, 1842, 0, 1859, 1860, 1861, 0,
	0, 0, 0, 140, 40, 0, 0, 0, 1288, 0,
	478, 0, 0, 103, 0, 41, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 131, 1200, 0, 0, 1856, 1326, 0, 0,
	0, 0, 46, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 54, 0, 134, 0, 56,
	0, 0, 0, 62, 135, 0, 132, 0, 0, 0,
	63, 0, 122, 64, 0, 0, 0, 757, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 126, 0, 0,
	1847, 0, 0, 757, 1325, 65, 1634, 0, 0, 0,
	0, 0, 0, 0, 770, 0, 66, 0, 0, 0,
	770, 0, 0, 1863, 0, 0, 0, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 1862, 0, 0, 0, 0, 0, 0, 1326, 412,
	0, 0, 0, 0, 0, 412, 412, 0, 1711, 412,
	1325, 0, 0, 0, 1631, 0, 1857, 1631, 0, 776,
	776, 0, 0, 0, 0, 1923, 0, 0, 0, 0,
	0, 412, 1929, 1930, 0, 0, 0, 1644, 0, 0,
	1937, 0, 40, 0, 0, 0, 1942, 1943, 1945, 1947,
	1948, 0, 67, 41, 0, 0, 412, 0, 68, 1957,
	0, 0, 0, 1960, 0, 1325, 44, 0, 0, 0,
	0, 0, 412, 0, 0, 0, 0, 75, 127, 69,
	0, 70, 1250, 71, 1250, 133, 528, 0, 0, 412,
	72, 1858, 51, 1985, 0, 140, 0, 0, 412, 0,
	1995, 0, 83, 0, 0, 103, 0, 412, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	1755, 62, 0, 0, 142, 0, 0, 0, 63, 0,
	479, 64, 0, 1755, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 1758, 776, 1760, 0, 770,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 66, 0, 0, 0, 587, 134,
	0, 587, 587, 412, 0, 0, 135, 0, 1779, 0,
	1853, 1854, 1855, 0, 0, 0, 0, 0, 0, 1852,
	1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849, 0, 126,
	0, 0, 4, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2073, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 69, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 103, 412, 0, 0, 0, 0, 758,
	1631, 0, 0, 0, 0, 0, 0, 1285, 0, 869,
	1631, 0, 142, 0, 0, 1200, 0, 0, 0, 0,
	0, 0, 0, 0, 2156, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 74, 2177, 0, 0,
	0, 2177, 0, 0, 0, 757, 0, 2177, 0, 141,
	0, 757, 757, 0, 0, 757, 1644, 134, 1250, 0,
	0, 0, 0, 0, 135, 2197, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1928, 0, 0,
	0, 0, 0, 412, 412, 0, 0, 126, 74, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 2223, 1954, 0, 0, 0, 0, 0, 0, 0,
	0, 2225, 0, 0, 0, 0, 2229, 412, 1968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1979, 0, 0, 0, 0,
	0, 0, 0, 0, 1237, 0, 0, 0, 0, 0,
	0, 0, 0, 1237, 0, 0, 0, 0, 0, 2253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 0, 0, 869, 0, 0, 2036,
	0, 0, 0, 0, 0, 0, 0, 1631, 869, 0,
	0, 2285, 2286, 1644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2156, 869, 0,
	0, 0, 0, 2319, 0, 2320, 0, 412, 2322, 2323,
	0, 0, 0, 0, 412, 0, 0, 2328, 0, 0,
	0, 0, 0, 0, 0, 0, 2156, 0, 869, 1681,
	0, 2156, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 1644, 1078, 2387, 0, 0, 2389, 0,
	0, 1075, 0, 1116, 0, 0, 412, 0, 0, 2156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2177, 0, 758, 0, 0,
	0, 2156, 0, 758, 758, 0, 412, 758, 0, 1081,
	1082, 1083, 1084, 869, 0, 0, 0, 0, 1064, 1711,
	757, 2223, 2223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 1101, 0, 2455, 0, 0, 0, 0, 1631, 0,
	74, 0, 0, 2230, 0, 1250, 0, 0, 74, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	2471, 2472, 0, 74, 1079, 0, 74, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	2489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2504, 0,
	869, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 2156, 757,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 2455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	869, 869, 869, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 2321, 0, 0, 0, 0, 0, 0,
	2326, 0, 2565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1059, 0, 1092, 1100, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 1058, 0, 0,
	0, 0, 0, 1078, 1883, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 758, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 0, 2396, 0, 0, 0, 0, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 0, 1064, 1058, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 546, 0, 572, 0, 0, 1093,
	1101, 0, 2429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 1091, 0, 0, 1081,
	1082, 1083, 1084, 1079, 0, 0, 0, 550, 1064, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	558, 559, 0, 0, 0, 568, 0, 0, 0, 1090,
	1093, 1101, 0, 0, 0, 0, 0, 0, 0, 573,
	553, 0, 0, 2478, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 1085, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 554, 0, 2508,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 555, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 562, 0, 0, 0, 0, 557, 564,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 1711, 0, 0, 0, 0, 1080,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 1094, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0, 0,
	0, 0, 560, 1882, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 565, 575, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 566, 0, 0, 0,
	570, 0, 0, 0, 1881, 576, 0, 0, 0, 0,
	563, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 784, 186, 785, 786, 787, 788, 347,
	789, 790, 791, 792, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 793, 191, 354, 355, 192, 193,
	794, 795, 356, 357, 358, 796, 194, 359, 797, 783,
	798, 195, 196, 197, 0, 199, 200, 201, 198, 799,
	202, 1116, 203, 204, 800, 707, 205, 206, 207, 801,
	802, 804, 803, 805, 806, 807, 208, 209, 413, 210,
	360, 211, 361, 362, 808, 212, 809, 213, 810, 214,
	811, 812, 215, 216, 813, 217, 814, 0, 815, 363,
	218, 220, 219, 221, 364, 365, 816, 708, 817, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	818, 225, 819, 820, 709, 821, 226, 369, 822, 370,
	823, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	711, 824, 373, 234, 825, 231, 826, 710, 232, 374,
	233, 375, 376, 377, 378, 379, 827, 380, 828, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 829,
	242, 241, 830, 383, 714, 243, 244, 715, 831, 245,
	246, 832, 833, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 834, 835, 836,
	385, 257, 386, 258, 259, 837, 260, 838, 839, 261,
	840, 841, 262, 387, 718, 263, 719, 388, 264, 265,
	266, 267, 268, 842, 269, 389, 270, 390, 271, 843,
	272, 273, 274, 275, 276, 391, 277, 278, 844, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 845, 291, 720, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 846, 304, 393, 303, 305,
	306, 847, 307, 295, 296, 308, 721, 309, 394, 395,
	310, 848, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 849, 318, 850, 319, 320, 321, 322, 323,
	324, 325, 326, 851, 398, 399, 400, 852, 853, 327,
	328, 401, 402, 854, 329, 330, 331, 332, 855, 856,
	333, 334, 335, 336, 857, 337, 858, 403, 338, 339,
	340, 404, 405, 859, 860, 341, 861, 862, 863, 864,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 778, 0, 0, 0, 0, 0, 1624, 0, 0,
	0, 0, 0, 0, 0, 0, 1625, 184, 185, 784,
	186, 785, 786, 787, 788, 347, 789, 790, 791, 792,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	793, 191, 354, 355, 192, 193, 794, 795, 356, 357,
	358, 796, 194, 359, 797, 783, 798, 195, 196, 197,
	0, 199, 200, 201, 198, 799, 202, 0, 203, 204,
	800, 707, 205, 206, 207, 801, 802, 804, 803, 805,
	806, 807, 208, 209, 413, 210, 360, 211, 361, 362,
	808, 212, 809, 213, 810, 214, 811, 812, 215, 216,
	813, 217, 814, 0, 815, 363, 218, 220, 219, 221,
	364, 365, 816, 708, 817, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 818, 225, 819, 820,
	709, 821, 226, 369, 822, 370, 823, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 711, 824, 373, 234,
	825, 231, 826, 710, 232, 374, 233, 375, 376, 377,
	378, 379, 827, 380, 828, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 829, 242, 241, 830, 383,
	714, 243, 244, 715, 831, 245, 246, 832, 833, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 834, 835, 836, 385, 257, 386, 258,
	259, 837, 260, 838, 839, 261, 840, 841, 262, 387,
	718, 263, 719, 388, 264, 265, 266, 267, 268, 842,
	269, 389, 270, 390, 271, 843, 272, 273, 274, 275,
	276, 391, 277, 278, 844, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 845, 291,
	720, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 846, 304, 393, 303, 305, 306, 847, 307, 295,
	296, 308, 721, 309, 394, 395, 310, 848, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 849, 318,
	850, 319, 320, 321, 322, 323, 324, 325, 326, 851,
	398, 399, 400, 852, 853, 327, 328, 401, 402, 854,
	329, 330, 331, 332, 855, 856, 333, 334, 335, 336,
	857, 337, 858, 403, 338, 339, 340, 404, 405, 859,
	860, 341, 861, 862, 863, 864, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2281, 184, 185, 784, 186, 785, 786,
	787, 788, 347, 789, 790, 791, 792, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 793, 191, 354,
	355, 192, 193, 794, 795, 356, 357, 358, 796, 194,
	359, 797, 783, 798, 195, 196, 197, 0, 199, 200,
	201, 198, 799, 202, 0, 203, 204, 800, 707, 205,
	206, 207, 801, 802, 804, 803, 805, 806, 807, 208,
	209, 413, 210, 360, 211, 361, 362, 808, 212, 809,
	213, 810, 214, 811, 812, 215, 216, 813, 217, 814,
	0, 815, 363, 218, 220, 219, 221, 364, 365, 816,
	708, 817, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 818, 225, 819, 820, 709, 821, 226,
	369, 822, 370, 823, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 711, 824, 373, 234, 825, 231, 826,
	710, 232, 374, 233, 375, 376, 377, 378, 379, 827,
	380, 828, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 829, 242, 241, 830, 383, 714, 243, 244,
	715, 831, 245, 246, 832, 833, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	834, 835, 836, 385, 257, 386, 258, 259, 837, 260,
	838, 839, 261, 840, 841, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 842, 269, 389, 270,
	390, 271, 843, 272, 273, 274, 275, 276, 391, 277,
	278, 844, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 845, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 846, 304,
	393, 303, 305, 306, 847, 307, 295, 296, 308, 721,
	309, 394, 395, 310, 848, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 849, 318, 850, 319, 320,
	321, 322, 323, 324, 325, 326, 851, 398, 399, 400,
	852, 853, 327, 328, 401, 402, 854, 329, 330, 331,
	332, 855, 856, 333, 334, 335, 336, 857, 337, 858,
	403, 338, 339, 340, 404, 405, 859, 860, 341, 861,
	862, 863, 864, 342, 343, 344, 345, 346, 0, 0,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1233, 184, 185, 784, 186,
	785, 786, 787, 788, 347, 789, 790, 791, 792, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 793,
	191, 354, 355, 192, 193, 794, 795, 356, 357, 358,
	796, 194, 359, 797, 783, 798, 195, 196, 197, 0,
	199, 200, 201, 198, 799, 202, 0, 203, 204, 800,
	707, 205, 206, 207, 801, 802, 804, 803, 805, 806,
	807, 208, 209, 413, 210, 360, 211, 361, 362, 808,
	212, 809, 213, 810, 214, 811, 812, 215, 216, 813,
	217, 814, 0, 815, 363, 218, 220, 219, 221, 364,
	365, 816, 708, 817, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 818, 225, 819, 820, 709,
	821, 226, 369, 822, 370, 823, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 711, 824, 373, 234, 825,
	231, 826, 710, 232, 374, 233, 375, 376, 377, 378,
	379, 827, 380, 828, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 829, 242, 241, 830, 383, 714,
	243, 244, 715, 831, 245, 246, 832, 833, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 834, 835, 836, 385, 257, 386, 258, 259,
	837, 260, 838, 839, 261, 840, 841, 262, 387, 718,
	263, 719, 388, 264, 265, 266, 267, 268, 842, 269,
	389, 270, 390, 271, 843, 272, 273, 274, 275, 276,
	391, 277, 278, 844, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 845, 291, 720,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	846, 304, 393, 303, 305, 306, 847, 307, 295, 296,
	308, 721, 309, 394, 395, 310, 848, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 849, 318, 850,
	319, 320, 321, 322, 323, 324, 325, 326, 851, 398,
	399, 400, 852, 853, 327, 328, 401, 402, 854, 329,
	330, 331, 332, 855, 856, 333, 334, 335, 336, 857,
	337, 858, 403, 338, 339, 340, 404, 405, 859, 860,
	341, 861, 862, 863, 864, 342, 343, 344, 345, 346,
	1523, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	1520, 186, 0, 0, 0, 0, 662, 627, 0, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 1521, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	1519, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 1522,
	184, 185, 0, 186, 0, 0, 620, 1517, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 608, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 140, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 142, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	932, 701, 0, 0, 341, 0, 0, 0, 134, 342,
	343, 344, 345, 346, 614, 135, 596, 0, 645, 634,
	635, 632, 633, 624, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 0, 184, 185, 0, 186, 1119, 0,
	0, 0, 662, 627, 623, 0, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 932, 701, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 614, 135,
	645, 634, 635, 632, 633, 624, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 184, 185, 0, 186,
	0, 0, 1119, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	140, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 142,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 932, 701, 0, 0,
	341, 0, 0, 0, 134, 342, 343, 344, 345, 346,
	614, 135, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 184, 185,
	0, 186, 0, 0, 1119, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 1577, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	1582, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 1578,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 1579, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 604, 0, 645, 634, 635, 632, 633,
	624, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 184, 185, 0, 186, 0, 620, 0, 0, 662,
	627, 0, 623, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 608, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 606, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 184, 185, 0, 186, 0, 0, 620,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	2206, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 1180, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 1427, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 1426, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 184, 185, 0,
	186, 0, 0, 620, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	608, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 606, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 184,
	185, 0, 186, 0, 0, 620, 0, 662, 627, 0,
	0, 623, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 2615, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 2616, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 620, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 608, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 184, 185, 0, 186, 0, 0, 620,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 2059, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 1180, 184, 185, 0,
	186, 0, 0, 620, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 1582,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 1627, 0, 645, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 186, 0, 620, 0, 0, 662, 627,
	0, 623, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 1591, 0, 645, 634, 635,
	632, 633, 624, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 184, 185, 0, 186, 0, 620, 0,
	0, 662, 627, 0, 623, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 1589, 0,
	645, 634, 635, 632, 633, 624, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 0, 184, 185, 0, 186,
	0, 620, 0, 0, 662, 627, 0, 623, 0, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 1573, 0, 645, 634, 635, 632, 633, 624, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 184,
	185, 0, 186, 0, 620, 0, 0, 662, 627, 0,
	623, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 1561, 0, 645, 634, 635, 632,
	633, 624, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 0, 184, 185, 0, 186, 0, 620, 0, 0,
	662, 627, 0, 623, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 1559, 0, 1551,
	634, 635, 632, 633, 624, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 0, 184, 185, 0, 186, 0,
	620, 0, 0, 662, 627, 0, 623, 0, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 1554, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 1555, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 1556, 1553, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 1557, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 1552, 346, 614,
	1548, 0, 1551, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 186, 0, 620, 0, 0, 662, 627, 0, 623,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 1554, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	1555, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 1556, 1553, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 1557, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	1552, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 1414, 186, 1123, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 876, 0, 645,
	634, 635, 632, 633, 624, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 0, 184, 185, 0, 186, 0,
	620, 0, 0, 662, 627, 0, 623, 0, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	874, 0, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 186, 0, 620, 0, 0, 662, 627, 0, 623,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 2532, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 2531, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 0, 645, 634,
	635, 632, 633, 624, 0, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 184, 185, 0, 186, 0, 0,
	620, 0, 662, 627, 0, 0, 623, 187, 188, 189,
	2530, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 2532, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 2531,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 184, 185, 0, 186,
	0, 0, 620, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 0, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 1571, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	1569, 0, 0, 0, 0, 1567, 1568, 0, 184, 185,
	0, 186, 0, 0, 1570, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 0, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 0, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 1571, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 1570, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 0, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 2532, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 0,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 0, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 0, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 2531, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 0, 0, 0, 623, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 661, 356, 357, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 663, 664, 0, 708, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 0, 0,
	0, 671, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 668, 669, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 925, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	2158, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 783, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	708, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 721,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 932, 405, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 596, 135,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 126, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 761, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	140, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 142,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 932, 405, 0, 0,
	341, 0, 0, 0, 134, 342, 343, 344, 345, 346,
	0, 135, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 755, 0, 1202, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 761, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 932, 405,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 596, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 755, 0, 1202, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 140, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 142, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	932, 405, 0, 0, 341, 0, 0, 0, 134, 342,
	343, 344, 345, 346, 1899, 135, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 126, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 754, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 755, 0,
	760, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 761, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	755, 0, 760, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 761, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 755, 0, 760, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 1235, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 1712, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 2074, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 645, 634, 635, 632, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 1205, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 0, 0,
	681, 682, 358, 0, 194, 359, 0, 783, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 642, 385, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 401,
	402, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 499, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 177, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 176, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 174, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 180, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 177, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 176, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 181, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 180, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 177, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 176, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 181, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 180, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 982, 0, 928, 986, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 783,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 708, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 721, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 928, 986, 341, 0, 0, 984, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 783, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 708, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 721, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 928, 986, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 783, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 708, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 721, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 928,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 783, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 708, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	721, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 1647, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 1645, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 1689,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 1650, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 1687, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 1649, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 1688, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 1647, 194, 359, 0, 0,
	1642, 195, 196, 197, 0, 199, 200, 201, 198, 1645,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 1650, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 1641, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 1649,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 1648,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 903, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 767, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	769, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	761, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 763, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 765, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 761, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 430, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 429, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 428, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 1630, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 2224, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 2224, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 2221, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 761, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	1393, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 1391, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 1373,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	525, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 961, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 527, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 522, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 1249, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 1248, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 525, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 961, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	527, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 522, 399, 400, 0, 0, 327, 962,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 525, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 516, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 527, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 945,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 522, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 921, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 920,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 918, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	917, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 914, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 913, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 911, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 910, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 907, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 906, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 895, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 893, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 892, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 889, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 887,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	883, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 885, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 773, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 775, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 771, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 525, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 516, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	515, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 527, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 517, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 518,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 522, 399, 400, 0, 0, 327,
	520, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 507, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 508, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 505, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 497, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 453, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 1946, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 1944, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 1933, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 508, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 1259, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 0, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 737, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 0, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 0, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 0, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	1058, 0, 0, 0, 1089, 0, 1078, 0, 0, 0,
	0, 1059, 0, 1075, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 1056, 1057, 0, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 1093, 1101, 1091,
	0, 0, 1089, 0, 0, 0, 1079, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 1058, 1091, 0, 0, 0, 0, 1078,
	0, 1079, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 1094, 0,
	0, 1085, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 1101, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 1092, 0, 1079,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 0, 0, 0, 0, 1090, 1833, 0, 0, 0,
	0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 0, 0, 0, 2501, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 1094, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 2452, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 1089, 1093, 1101, 0,
	0, 0, 0, 1059, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1078, 1091, 0, 0, 0, 0, 0,
	1075, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1093,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 1099, 1056,
	1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 0, 0, 0, 0, 1089, 1091, 0, 0, 0,
	0, 0, 1059, 1079, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 1058, 0, 0, 1090,
	0, 0, 1078, 1089, 0, 0, 0, 0, 0, 1075,
	1059, 0, 1092, 1100, 0, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 1085, 1058, 0, 0, 2405, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 1075, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 0, 0, 0, 0, 1094, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 1101,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 0, 1064, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1093, 1101, 0, 0,
	0, 0, 1079, 0, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 1099, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 0, 1090, 2375,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 1094, 0, 0, 0, 0, 1089,
	1085, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1094, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 2370, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 1093, 1101, 0, 0, 2366, 0, 0, 1056,
	1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 1099, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 1100, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 1080, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 1057, 1094, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1093, 1101,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 1091, 0, 0, 0, 1078,
	0, 0, 1079, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 1090, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 0, 2302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 1085, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 1093, 1101, 0, 0, 0,
	0, 0, 1056, 1057, 1094, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 1099, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 2268, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 1080, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	1057, 1094, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 1093, 1101, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 1100, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 1091, 0,
	0, 0, 1078, 0, 0, 1079, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 1090, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 2267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 0, 0, 0, 0, 1085, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 1093, 1101,
	0, 0, 0, 0, 0, 1056, 1057, 1094, 1086, 1087,
	1088, 1096, 1097, 1098, 0, 0, 0, 1099, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 1100, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0,
	0, 2232, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 1082, 1083, 1084, 1080, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 1057, 1094, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 1093, 1101, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1091, 0, 0, 0, 1078, 0, 0, 1079, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 1090, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 2077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 0, 0, 0, 0, 1085, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 1093, 1101, 0, 0, 0, 0, 0, 1056, 1057,
	1094, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	1099, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 0, 0, 2053, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	1080, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 1090, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0,
	0, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 0, 1094, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 0, 1803, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 2564, 0, 0, 0,
	1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 1089, 1093, 1101, 0,
	0, 0, 0, 1059, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1078, 1091, 0, 0, 0, 0, 0,
	1075, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2563, 0, 0, 0, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 0, 1064, 0, 1873,
	0, 1085, 1872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1093,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 1099, 1056,
	1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 0, 0, 0, 0, 1089, 1091, 0, 0, 0,
	1776, 0, 1059, 1079, 0, 1100, 0, 0, 0, 0,
	0, 1606, 0, 0, 0, 0, 0, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 1058, 0, 0, 1090,
	0, 0, 1078, 1089, 0, 0, 0, 1605, 0, 1075,
	1059, 0, 1092, 1100, 0, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 1085, 1058, 0, 1777, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 1075, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 0, 0, 0, 0, 1094, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 1101,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 0, 1064, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1093, 1101, 0, 0,
	0, 0, 1079, 0, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 1099, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 0, 1090, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 1094, 0, 0, 0, 0, 1089,
	1085, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1094, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 1093, 1101, 0, 0, 0, 0, 0, 1056,
	1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 1099, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 1100, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 1090, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 1080, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 1057, 1094, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1093, 1101,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 1091, 0, 0, 0, 1078,
	0, 0, 1079, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 1090, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 1085, 1064, 0, 0, 0, 0, 1879, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 1093, 1101, 0, 0, 0,
	0, 0, 1056, 1057, 1094, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 1099, 0, 0, 0, 1089, 0,
	0, 0, 1874, 0, 0, 1059, 0, 0, 1100, 0,
	0, 2057, 1091, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 1080, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 1090, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 0, 0, 1089, 1085, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	1080, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 1058, 0, 1094, 0, 1089,
	0, 1078, 0, 1832, 0, 0, 1059, 0, 1075, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 1093, 1101, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 1093, 1101, 1091, 0, 0, 1089, 0, 0,
	0, 1079, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 1058, 1091,
	0, 0, 0, 0, 1078, 0, 1079, 0, 0, 0,
	1839, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	1082, 1083, 1084, 1094, 0, 0, 1085, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 1101, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 1092, 0, 1079, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 0, 0, 0, 0, 1094, 1089, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 1101, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 1091, 0, 0,
	0, 0, 0, 1075, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088,
	1096, 1097, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 1058, 0, 0, 1085, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 1080,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 1081, 1082, 1083, 1084, 1079, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 1085, 0, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 1312, 1301, 1331, 1290, 1322,
	1321, 0, 1080, 1292, 1291, 0, 0, 0, 0, 1333,
	1332, 0, 0, 0, 0, 0, 0, 1092, 0, 1094,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 1319,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 1314, 1315, 0, 0, 0, 1092, 0,
	0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0,
	1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 1300,
	0, 0, 0, 0, 0, 0, 1305, 1303, 1306, 1307,
	1308, 1309, 1310, 0, 1330, 0, 0, 0, 0, 0,
	0, 1294, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 1302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	1301, 1331, 1290, 1322, 1321, 0, 0, 1292, 1291, 0,
	0, 0, 1313, 1333, 1332, 0, 1434, 1432, 1433, 1436,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 1327, 0, 1319, 1318, 1311, 1298, 0, 0, 0,
	0, 0, 0, 1317, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 1328, 1329, 0, 0, 1316, 1314, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 0, 0, 0, 0, 1334,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	1305, 1303, 1306, 1307, 1308, 1309, 1310, 0, 1330, 0,
	0, 0, 0, 0, 0, 1294, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1320, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 1328, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 1334,
}
var sqlPact = [...]int{

	3831, -1000, 5, -1000, -1000, -1000, 205, -1000, -1000, -1000,
	-1000, 202, 201, 192, -1000, 182, 179, 176, 175, 173,
	171, 167, 162, 161, 156, 154, -1000, 153, -1000, -1000,
	-1000, -1000, 151, 150, 148, 147, 146, 144, 133, -1000,
	1026, 22751, 125, 121, 1430, -1000, 36703, 117, 115, 110,
	106, 1075, 105, 95, 26835, 1142, 1561, 92, 91, 90,
	84, 83, 1073, 36365, 2846, 2510, 1222, 1749, 36024, 22410,
	1748, 1484, 35683, -1000, -1000, 35342, 81, 80, 78, 75,
	74, -1000, -1000, 35001, 73, 72, 66, 65, 64, 63,
	62, 61, 60, 59, 56, 55, 53, 50, -1000, 47,
	46, 42, -1000, 5092, 37, 34, 33, 1219, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1035, 186, -1000, 1115, 353, 1505, 8691, 1104,
	1055, 1043, 1042, 1094, 38731, 36703, 32, -70, 31, -1000,
	2077, 722, 19964, 3831, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26494, 26153,
	34660, 34319, 6576, 851, -1000, 1, 23429, 36703, -1000, 87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15388,
	15035, 596, 87, -1000, -1000, -1000, -1000, -1000, 33978, -1000,
	33637, 33296, 1584, 32955, -1000, -1000, -1000, -1000, 32614, -1000,
	-1000, 2003, 1767, 1762, 25812, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 32276, 31935, 31594,
	31253, 30912, 555, -1000, -1000, -1000, 18204, -1000, -1000, -1000,
	-1000, 30, -1000, 29, -1000, 27, 25, 24, 22, -1000,
	21, 20, -1000, 19, 16, -1000, 15, 14, 30571, 961,
	1285, -1000, -1000, 2, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36703, -1000, 16092, -1000, 552, -1000, 1676, -1000,
	16092, -1000, 1284, -1000, -1000, -1000, -1000, -1000, 36703, -1000,
	-1000, -1000, -1000, -1000, -1000, 2305, 1262, 551, 30230, -1000,
	1624, -1000, 638, 843, -1000, -1000, -1000, 9747, 240, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1460, 23781,
	1454, 2079, 1996, 2304, 1494, 1993, 1991, 1963, 1859, 1820,
	2303, 1038, 2301, 1857, 1050, 2299, 1817, 1323, 733, 2191,
	1675, 1674, -1000, -1000, -1000, -1000, 978, -1000, -1000, -1000,
	28187, -1000, -1000, 898, 951, 1115, -1000, -1000, -1000, 1515,
	2054, 2054, 2054, 2101, 346, 343, -1000, 186, -1000, 1560,
	-1000, 1261, -1000, -1000, -1000, -1000, -1000, 42961, -1000, -1000,
	16092, 16092, 16092, 16092, 16092, 1235, 574, -1000, 550, 549,
	7986, -1000, -1000, 2223, -1000, -1000, -1000, 361, -1000, -1000,
	16092, 87, -1000, -1000, -1000, -1000, 547, 2285, -1000, 729,
	-1000, -1000, -1000, 643, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1725, 545, 544, 542, -1000, 541, -1000,
	-1000, 540, 539, 537, 536, 534, 533, 531, 530, 529,
	526, 525, 524, 520, 518, 515, 1168, -1000, 668, -1000,
	-1000, 668, 668, -1000, 492, 492, 493, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 492, -1000, -1000, -1000, 621,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 510, 1251, -1000, -1000, 1251, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 850, 38055, -3, 36703, -1000, 506,
	-3, -1000, -1000, 505, -1000, 11155, 11155, -1000, -1000, -1000,
	-1000, -1000, 10451, 1883, -1000, 3579, -184, 345, 615, -1000,
	18908, 21718, -1000, -1000, 1212, 1934, 1096, -1000, 1091, 1933,
	581, -1000, 1237, -1000, 1128, 1922, -117, 1795, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 24119, 23429, 1, -21, -1000,
	-1000, -1000, 6224, 42961, -1000, 42961, -1000, 936, 20666, 87,
	-1000, -1000, -1000, -1000, 503, 1379, 656, -1000, 368, -1000,
	29889, 656, 1373, -1000, -1000, -1000, 28187, -1000, 36703, -1000,
	36703, -1000, 974, -1000, 38393, 139, 1918, -1000, -1000, 139,
	1917, -1000, 127, 1913, -1000, -1000, 1376, 1912, -1000, -21,
	1910, -1000, -1000, 16092, -4, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 722, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29548, 23090, 1456, 612, 42961,
	2135, 43832, 24119, 42961, 23090, -1000, -1000, 36703, -1000, 16092,
	-1000, 2133, 1599, -10, -1000, -1000, -1000, -1000, -1000, 1439,
	1526, 785, 1077, 9747, 9747, 2005, -1000, 236, 6576, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 29207, -1000, -1000,
	-1000, 1259, 36703, -1000, -1000, 1724, -1000, 23090, 36703, -1000,
	36703, -1000, 36703, -1000, 36703, -1000, 36703, -1000, -1000, -1000,
	-1000, -1000, 281, -1000, 1708, -1000, -1000, 36703, -1000, 1437,
	-1000, -1000, -1000, 28869, 28528, -1000, 1070, 882, -1000, -1000,
	140, -1000, 36703, 2056, 636, -1000, 1515, 1358, 1698, 708,
	1309, 1499, 14682, 1466, 16092, 186, -1000, -1000, 186, 186,
	9395, -1000, -1000, -1000, 36703, -1000, 43638, 43832, 6576, 861,
	16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092,
	16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092,
	16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092, 16092,
	16092, 16092, 1291, 16092, 834, 16092, 16092, 16092, 16092, 1839,
	1184, 491, 1361, -1000, 2193, 2193, 2193, 43343, 43343, 464,
	574, -1000, 16092, -1000, 135, 16092, 343, 41202, -2, 7634,
	-1000, -1000, -1000, 14330, 666, 42961, 87, 6928, -1000, 2218,
	907, 1742, 1628, 498, 593, 587, 586, 577, 16092, 16092,
	13978, 13625, 13272, 16796, 12919, 16092, 8338, 16092, 16092, 16092,
	16092, 12566, 12213, -1000, 497, -1000, -1000, -1000, -1000, 2215,
	-1000, -1000, 2213, -1000, 859, 856, 2211, -1000, -10, -1000,
	38055, -1000, 36703, -3, 2132, 36703, -1000, 166, -1000, 41927,
	-1000, 166, -7, -1000, 1548, 1539, 20315, 1576, 1245, 1245,
	1245, -1000, 494, 565, 615, 5501, 11860, -1000, 27173, 1248,
	235, 342, 18556, 1883, -1000, 36703, -38, 1145, -1000, 25471,
	2038, 2035, 2024, 28187, 2118, 135, 2052, 1656, 833, 28187,
	2042, 824, 2117, 135, 1655, 818, 36703, 6576, 2030, 613,
	-1000, 36703, -1000, -1000, -1000, 1652, -9, -1000, -1000, 25133,
	2127, 1906, -1000, 1182, -1000, 2126, 36703, 1283, 1372, -1000,
	-1000, 876, 1904, 663, 284, 2125, 284, 21016, -1000, 36703,
	-1000, 36703, -1000, -1000, 36703, -1000, 36703, -1000, 36703, 36703,
	-1000, 36703, 36703, -27, 42961, 4029, 24795, 806, -1000, 702,
	25133, 2949, -42, -1000, 839, -1000, -1000, -1000, -1000, 288,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 493, 1168, 492, 492,
	492, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 621, -1000,
	-1000, 668, 668, 668, -1000, -1000, -32, -1000, 1650, 641,
	-45, 721, -10, -1000, 1251, -1000, 1057, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2282, -1000, 2198, -1000, -1000, 2210, -16, -1000, -16, -1000,
	6576, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36703, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 237, -1000, -1000,
	-1000, -1000, -1000, -1000, 36703, 36703, 36703, -1000, 28187, 658,
	1703, -1000, 2057, 1358, 1698, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42961, -1000, 413, -1000, -1000, 42961, 1119,
	1557, -1000, 1557, -18, -1000, 41889, 1508, 36703, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 634,
	700, 700, 867, 867, 867, 867, 2186, 1477, 2877, 921,
	696, 696, 696, 696, 696, 696, 696, 696, 3159, 406,
	406, 3159, 3159, 3159, 3159, 3159, 696, 696, 696, 43343,
	43221, 3118, 16092, 16092, 802, 1179, 491, 3118, 16092, 3118,
	3118, 3118, 3118, -1000, 1328, -1000, -1000, -1000, -1000, 1649,
	487, 16796, 16796, -1000, -1000, -1000, 7986, 17148, -1000, -1000,
	-1000, -1000, 477, 16092, -1000, 41348, -222, 341, -157, -1000,
	16092, 564, -77, -1000, 912, -1000, 16092, -1000, -15, 16092,
	16092, 16092, 340, -1000, 339, -1000, 793, -1000, 778, 777,
	767, -1000, 476, 1241, 475, 474, 16092, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42833, 39413, 330, -1000, 1643,
	-157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 326, -1000,
	325, -1000, 42798, -157, 324, 3833, -1000, 16796, 16796, 16796,
	7986, 473, 323, -1000, 41730, -1000, 42572, 11507, 11507, 11507,
	321, 42426, 16092, -157, 5021, 4950, 4631, -48, -50, -1000,
	-56, -1000, 2208, -65, 320, 633, 632, 319, -1000, -1000,
	472, -71, 663, 11155, 19612, 6576, -1000, 663, 10451, -1000,
	20315, 20315, 1365, 1531, 20315, -1000, -1000, -1000, -1000, 27173,
	501, 615, 27173, -1000, 2206, 1441, 317, -1000, -1000, -1000,
	36703, 454, -1000, 615, 316, 1006, 36703, 36703, 36703, -1000,
	-1000, 1371, 37717, 1369, 43832, 36703, -1000, 453, 451, 1502,
	1488, 36703, 36703, 37379, 37041, 36703, 1140, 135, -1000, 631,
	444, 36703, 1085, 630, 36703, 135, -1000, 441, 36703, 1083,
	-1000, 624, 1603, 1293, -1000, 917, 1642, 36703, 315, -76,
	-19, 43832, -1000, -1000, -1000, -1000, -1000, 36703, 514, 36703,
	135, 36703, 2235, 135, 36703, 1902, 1940, 601, 36703, 1499,
	16092, 1165, -1000, 19260, 680, 36703, 1040, 86, -1000, -1000,
	-1000, 609, 36703, -1000, -1000, 139, 139, -1000, 127, 1376,
	-21, -1000, 16092, -1000, -1000, 36703, 24119, -82, -1000, -1000,
	43832, -1000, 572, 823, -1000, 2205, 646, 24119, 36703, 9747,
	9747, -1000, 1552, -1000, -1000, 977, -1000, 1068, -1000, -1000,
	-1000, -1000, 9747, -1000, -39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1571, 1130, -1000, -1000, -1000, 1119, -1000, 16092,
	2203, -1000, -1000, -1000, 9395, -1000, -1000, -1000, 36703, -123,
	16092, 3118, 3118, 16092, 16796, 16796, -1000, 3118, -1000, -1000,
	-1000, -1000, -1000, 1640, 440, 16092, 43832, 3145, 758, -84,
	-1000, 16092, -30, -1000, 16092, -1000, 41075, -1000, -1000, 567,
	1938, -1000, 16092, 42299, 313, 10803, -1000, 42153, -36, -36,
	-1000, 2234, 1396, 1238, 1060, 1023, 2202, -1000, 21367, 664,
	1250, 40929, 43638, 43832, -1000, 16092, -1000, -1000, 1639, 16092,
	-1000, 43638, 43832, 16796, 16796, 16796, 16796, 16796, 16796, 16796,
	16796, 16796, 16796, 16796, 16796, 16796, 16796, 16796, 16796, 16796,
	16796, 16796, 1421, 16796, 2188, 2188, 2188, -33, 16092, -1000,
	1688, 1639, 16092, 16092, 43832, 312, 311, 310, -1000, 16092,
	-157, 16092, 16092, 16092, -1000, -1000, -1000, 309, -1000, 2200,
	-1000, -1000, -1000, -1000, 2949, -1000, 1626, -1000, -92, -1000,
	1883, -1000, 1626, -1000, -1000, 1365, -1000, 434, 16092, 20315,
	-1000, 563, -1000, -100, -1000, 27173, -1000, 562, -219, -1000,
	608, -1000, 615, 433, 36703, 27173, -1000, -1000, -1000, 764,
	763, 1900, -1000, 1362, -1000, 693, -1000, 992, 16092, 17852,
	432, 430, 1150, -1000, 1860, 1376, 1837, 1376, -1000, -38,
	1051, -1000, 22069, 16092, -1000, 762, 22069, -1000, -1000, 16092,
	-1000, 745, 22069, 646, 1638, 903, -1000, 914, -1000, 1591,
	-1000, 25133, 429, 36703, 428, -1000, 427, -1000, -1000, 426,
	36703, 1450, 601, 24457, -1000, 656, 1040, -1000, 42961, -1000,
	1040, 9043, 2026, -101, -1000, -1000, -1000, 663, 21016, 20315,
	10451, -102, -1000, -1000, -1000, -1000, 42961, -39, 2012, 2012,
	-1000, 2184, -1000, 561, 308, -1000, 27849, -1000, -39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36703, -40, -1000, 424,
	6576, 36703, 36703, 1257, 40802, -1000, 2039, 6576, 2120, 3118,
	490, 306, 16092, 43832, 43414, -103, 16092, 16092, -1000, 307,
	16092, 560, 42961, -1000, -1000, -1000, 42961, 16092, 2233, 16092,
	305, 302, 292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 291, -1000, -1000, 39069, 16092, 282, -1000, 278, 276,
	42961, 1688, 42961, -1000, -1000, 716, 716, 934, 934, 934,
	934, 2188, 198, 1081, 1743, 277, 277, 277, 985, 783,
	783, 277, 277, 277, 1635, 1447, 423, 467, 16092, 275,
	-1000, -1000, 42961, 42961, 274, -1000, -1000, -1000, -157, 239,
	40656, 40529, -1000, 263, 262, 1618, 2097, -1000, 20315, 1618,
	-1000, 36703, 42961, -1000, -184, -1000, 2175, -1000, -1000, 1441,
	-1000, 5867, 27173, 36703, -109, -1000, 36703, 36703, 36703, 1825,
	-1000, 1481, -1000, 40383, -110, -1000, 337, 2080, 16092, -1000,
	-1000, 422, 17852, 36703, -1000, 1468, 1510, 717, 36703, -1000,
	36703, -1000, 36703, 36703, 36703, -1000, 421, 87, -120, 36703,
	-1000, -121, 36703, -1000, -1000, 24119, 855, -1000, 1228, 1596,
	-1000, 17852, 418, 36703, 25133, 2124, 17852, 1281, 1446, 601,
	24457, -1000, 876, -1000, -1000, -41, -1000, 403, 135, 1040,
	-1000, -57, -1000, 604, 1999, -1000, 1997, 558, -1000, -1000,
	-78, 412, -1000, 603, 602, -1000, 1571, 36703, -1000, -1000,
	-1000, -1000, -1000, -1000, 2039, 16092, 16092, 43414, -132, -1000,
	3118, 3118, -1000, 40157, -1000, 42961, -1000, 42153, -1000, -1000,
	-1000, -1000, 1215, -1000, 40119, -1000, -1000, -1000, -1000, 16796,
	1629, 411, 43832, 39960, -1000, -1000, 16092, -1000, -1000, -1000,
	-1000, 661, 16092, 16092, 1883, 661, -135, 615, -1000, -1000,
	-1000, 2163, -1000, -137, -1000, -1000, -1000, -1000, 36703, -1000,
	36703, -1000, 6576, 36703, 1631, 1347, -1000, -1000, 1486, 410,
	16796, 36703, -1000, 1146, 17852, 2039, 87, 6576, 2039, 39838,
	6928, -138, -140, 1345, -1000, 1333, 16092, -1000, 43832, 1376,
	1376, -1000, 742, 738, 16092, 731, -1000, 727, -1000, -93,
	22069, -1000, -1000, 2096, 1232, -143, 17852, -145, 258, 135,
	-146, 36703, -1000, 601, 24457, -1000, 1940, 1946, 36703, 2021,
	-1000, -1000, 407, 392, 389, -1000, 27511, 27511, 24119, 24119,
	-1000, -148, -1000, 3118, 3118, -1000, -1000, 255, 1250, 2094,
	-1000, 3076, 16796, 43832, -155, -1000, 39576, -1000, 36703, 42961,
	-157, -1000, -1000, 27173, 557, -1000, -1000, 1476, -1000, -1000,
	36703, 1325, -1000, -1000, 16092, 467, 387, 1591, 386, -1000,
	-1000, -1000, -1000, -1000, -1000, 2080, -15, -1000, 1058, -1000,
	-1000, 42961, 2069, -1000, -1000, 36703, 36703, -36, 385, 382,
	-1000, 1229, 36703, 1146, -156, -1000, 1591, -1000, 1146, 378,
	24457, -1000, 1450, 828, -158, 36703, -1000, -1000, 7280, 24119,
	24119, -1000, -166, -1000, -1000, -1000, -1000, 1148, 16092, 3076,
	-167, -1000, -1000, -94, -1000, 2122, -1000, -1000, -1000, -1000,
	1816, 39448, 1404, 36703, -1000, 36703, 2039, 254, 36703, 699,
	6576, -1000, -1000, 252, 16092, 16092, 374, 371, 370, 1591,
	1146, -1000, 1591, 17852, -1000, 1446, 968, -1000, 663, -1000,
	-169, -177, -1000, 251, 16444, 16444, -157, -1000, 36703, 369,
	1753, -1000, 1267, 1193, 249, -180, -1000, -1000, 368, -1000,
	16092, -1000, 2233, -182, -185, 36703, 36703, 36703, -1000, 1591,
	-1000, -187, -1000, 21016, -1000, 646, 646, -1000, -1000, -1000,
	17500, 1335, 1031, 41608, -1000, -1000, -1000, 36703, -1000, 1277,
	1268, 946, -1000, -1000, -1000, -1000, -1000, 1404, 42961, -1000,
	-1000, -188, -190, -193, -1000, 1146, -172, -1000, -1000, 2140,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1982, -1000, 701,
	1292, 1292, 1267, 367, 366, 1329, 1591, -1000, 15740, -1000,
	2147, -1000, -1000, 1472, -1000, -1000, 1206, 1200, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 247, 6576, 246, 6576,
	-1000, 679, -1000, 676, 365, 1445, -47, 10099, 866, 409,
	-168, -1000, -198, -1000, 42961, -1000, -1000, 363, -1000, 10099,
	1206, -1000, 10099, 10099, -200, -1000, -1000, -203, -1000, -61,
	1200, -176, -1000, -1000, 1200, -1000,
}
var sqlPgo = [...]int{

	0, 2678, 2677, 1776, 2067, 2676, 2675, 2666, 2665, 2662,
	2661, 2660, 2659, 2655, 2654, 2652, 2651, 2650, 2649, 2648,
	2647, 2646, 2645, 2642, 2056, 2640, 2048, 2639, 2638, 2637,
	2631, 2630, 52, 2629, 2625, 2035, 2624, 2623, 2621, 2620,
	2619, 2617, 2028, 2615, 1989, 2614, 2613, 2608, 2607, 2605,
	1975, 2604, 93, 131, 1963, 2603, 2602, 1961, 1958, 1947,
	2601, 1942, 2599, 2595, 1880, 1878, 2594, 86, 2593, 2592,
	2591, 1875, 1871, 2590, 2588, 2587, 149, 2579, 1812, 2578,
	2577, 2571, 2570, 2567, 2566, 2565, 2563, 2561, 2560, 2559,
	2558, 2556, 2554, 2553, 2552, 2551, 2546, 2545, 166, 2537,
	2536, 1802, 1791, 2535, 2534, 29, 34, 16, 54, 31,
	144, 3132, 142, 2533, 2531, 2528, 2525, 2522, 2515, 63,
	105, 99, 2511, 104, 2510, 2509, 41, 46, 23, 18,
	2507, 92, 2506, 2503, 2404, 27, 2502, 2498, 138, 2497,
	39, 26, 2760, 156, 155, 120, 122, 2496, 2495, 2493,
	91, 121, 7, 4, 3, 6, 1, 2492, 2, 5,
	2489, 2486, 17, 96, 37, 2485, 24, 152, 2484, 2483,
	133, 2482, 58, 97, 1675, 98, 126, 361, 101, 2481,
	62, 20, 60, 2476, 2475, 163, 56, 2467, 30, 75,
	161, 114, 2465, 82, 162, 132, 81, 130, 137, 2463,
	2461, 2460, 118, 2458, 119, 83, 2457, 2452, 72, 2450,
	100, 145, 2449, 160, 112, 2448, 2447, 94, 2445, 127,
	2443, 2439, 159, 148, 113, 13, 65, 68, 11, 1664,
	1636, 139, 110, 53, 49, 2438, 1184, 40, 1181, 50,
	109, 78, 57, 107, 51, 95, 147, 36, 2435, 2433,
	141, 2429, 2428, 2427, 2422, 2415, 106, 2414, 2412, 33,
	2411, 71, 35, 59, 85, 48, 61, 129, 116, 154,
	103, 2408, 74, 124, 2407, 229, 2403, 2400, 1953, 117,
	2398, 2397, 2396, 1701, 1634, 1539, 80, 2395, 2390, 1282,
	1175, 2389, 2385, 79, 2378, 115, 108, 90, 146, 140,
	43, 2377, 123, 22, 2375, 28, 38, 0, 371, 363,
	2374, 128, 66, 2373, 2371, 2368, 2366, 32, 14, 12,
	8, 15, 9, 125, 45, 2365, 2364, 134, 88, 67,
	2362, 157, 2356, 2352, 2348, 44, 2338, 21, 2335, 19,
	2328, 2326, 25, 10, 2319, 2318, 150, 2314, 102, 2313,
	2088, 2312, 151, 2311, 2310, 1834, 2309, 77, 111,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 305, 305, 306, 306, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	274, 274, 273, 51, 51, 248, 248, 54, 54, 203,
	203, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	346, 346, 346, 350, 350, 351, 351, 352, 352, 352,
	352, 352, 352, 352, 348, 348, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 32, 72, 72, 72, 74, 71, 71, 71,
	73, 73, 73, 73, 75, 75, 76, 76, 76, 76,
	76, 77, 77, 299, 297, 297, 298, 298, 148, 148,
	148, 148, 148, 149, 149, 149, 304, 304, 304, 304,
	304, 304, 303, 303, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 90, 90, 90, 98, 98, 98, 98, 98, 98,
	98, 79, 79, 84, 84, 84, 84, 84, 80, 80,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 87,
	81, 81, 81, 81, 89, 89, 89, 89, 88, 88,
	94, 94, 94, 94, 94, 94, 91, 91, 91, 91,
	92, 92, 92, 95, 95, 95, 95, 82, 82, 83,
	83, 96, 96, 97, 97, 97, 97, 97, 93, 93,
	93, 347, 347, 349, 349, 59, 59, 38, 38, 39,
	39, 150, 150, 151, 151, 227, 227, 227, 227, 152,
	152, 124, 124, 124, 153, 153, 154, 154, 155, 155,
	155, 157, 157, 158, 158, 159, 159, 159, 156, 156,
	156, 226, 315, 315, 316, 316, 316, 316, 316, 316,
	317, 317, 317, 317, 317, 317, 317, 313, 313, 314,
	311, 311, 312, 312, 312, 312, 353, 353, 225, 225,
	162, 162, 318, 318, 318, 318, 319, 319, 319, 319,
	319, 322, 321, 320, 320, 320, 320, 320, 260, 260,
	260, 100, 100, 40, 40, 130, 130, 41, 41, 37,
	37, 37, 207, 207, 166, 166, 265, 265, 265, 141,
	141, 119, 119, 119, 17, 13, 13, 13, 13, 13,
	13, 23, 23, 21, 21, 208, 208, 209, 209, 60,
	60, 64, 64, 69, 69, 99, 99, 99, 99, 99,
	99, 25, 25, 25, 25, 33, 33, 33, 33, 68,
	68, 355, 355, 137, 137, 137, 137, 138, 138, 222,
	222, 223, 223, 356, 356, 224, 224, 224, 132, 131,
	133, 133, 36, 36, 36, 126, 126, 127, 127, 128,
	128, 129, 129, 357, 357, 57, 57, 57, 102, 102,
	144, 144, 219, 219, 219, 221, 221, 220, 220, 220,
	193, 193, 193, 101, 101, 171, 171, 181, 181, 182,
	182, 271, 183, 183, 67, 67, 111, 111, 109, 109,
	109, 109, 109, 109, 109, 109, 110, 110, 110, 112,
	112, 112, 112, 112, 112, 112, 115, 115, 115, 116,
	116, 116, 114, 114, 328, 328, 328, 331, 331, 327,
	329, 329, 330, 330, 354, 354, 194, 194, 194, 161,
	160, 160, 164, 164, 163, 165, 165, 264, 264, 264,
	191, 191, 190, 190, 190, 190, 212, 212, 210, 210,
	211, 211, 215, 215, 216, 216, 216, 217, 217, 218,
	218, 189, 189, 244, 244, 214, 214, 213, 113, 113,
	113, 170, 170, 170, 172, 172, 234, 234, 234, 235,
	235, 233, 233, 233, 233, 266, 266, 266, 266, 266,
	266, 266, 266, 344, 344, 344, 345, 345, 263, 263,
	267, 267, 267, 267, 267, 267, 261, 261, 261, 261,
	262, 262, 272, 272, 197, 197, 197, 197, 195, 195,
	196, 196, 268, 268, 268, 268, 192, 192, 269, 269,
	269, 228, 228, 275, 275, 275, 293, 293, 169, 169,
	169, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 277, 277, 277, 277, 279, 279, 279, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 292, 292, 292,
	292, 292, 280, 280, 287, 287, 288, 288, 289, 290,
	281, 281, 282, 282, 283, 284, 291, 291, 291, 291,
	295, 295, 285, 285, 285, 285, 285, 286, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 205, 205, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 238, 238, 238, 238,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 323, 323, 323, 323, 323, 323, 323, 323, 325,
	325, 326, 326, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 332, 332, 333, 333, 335, 335, 336,
	336, 337, 338, 338, 338, 339, 340, 340, 334, 334,
	341, 341, 341, 342, 342, 343, 343, 343, 343, 343,
	250, 250, 251, 252, 258, 258, 258, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 139, 139, 139, 139, 139, 178, 178,
	177, 177, 247, 247, 245, 245, 249, 249, 198, 198,
	294, 294, 294, 294, 294, 294, 294, 199, 199, 199,
	206, 200, 200, 201, 201, 201, 201, 201, 241, 242,
	202, 202, 202, 243, 243, 253, 257, 257, 256, 255,
	255, 254, 254, 231, 231, 232, 232, 230, 229, 186,
	186, 185, 185, 184, 184, 358, 358, 259, 259, 187,
	187, 188, 180, 180, 270, 270, 270, 270, 173, 173,
	146, 146, 174, 174, 142, 142, 145, 145, 143, 143,
	143, 143, 167, 167, 168, 168, 140, 140, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 296,
	296, 296, 246, 134, 134, 134, 135, 135, 136, 136,
	301, 301, 301, 302, 302, 302, 302, 300, 300, 300,
	300, 300, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 1,
	3, 1, 4, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	4, 3, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 2, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 2, 3, 7, 7, 7, 4, 5, 5, 5,
	5, 2, 0, 2, 0, 3, 2, 8, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 1, 0, 9, 9, 6, 7,
	5, 3, 5, 1, 3, 1, 1, 1, 10, 11,
	9, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	1, 0, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 1, 0, 2, 2, 2,
	3, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 3, 3, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, 73, -40, -41, 94, -330, 98, -45, -46, -47,
	-49, -48, 102, 109, 112, 134, 145, 231, 237, 258,
	260, 262, 269, -109, -111, 256, -62, -63, -71, -72,
	-73, -74, -103, 281, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 284, -25, -33, -68, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -328, -112, -110, 378, 257, 332, 35,
	293, 61, 105, 264, 348, 355, -115, -113, -114, -116,
	274, 340, 303, 382, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 2, 303, 343,
	87, 153, 242, -346, 2, -174, 303, 87, -143, -134,
	371, 4, -307, -309, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 233,
	235, 237, 239, 240, 241, 242, 243, 245, 246, 248,
	249, 250, 251, 252, 256, 254, 255, 257, 258, 259,
	260, 262, 264, 265, 267, 282, 283, 294, 269, 270,
	271, 272, 273, 277, 275, 278, 279, 281, 284, 286,
	289, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 173, 174, 182, 199, 209, 211, 222, 226, 234,
	236, 244, 266, 276, 287, 288, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 381, 381, 2, 170,
	241, -142, -134, 87, 381, 381, 381, 381, 303, 2,
	333, 343, -207, 87, 328, 381, 381, -134, 237, 22,
	2, 96, 157, 331, 330, 22, 233, 275, 305, 307,
	2, 381, 381, 381, 381, 381, 2, 343, 303, 153,
	87, 333, -134, 2, -53, 2, 378, -52, -4, -35,
	-44, -54, -50, -24, -26, -42, -58, -57, -59, -61,
	-65, -64, -67, -71, -72, -78, -101, -102, 281, 111,
	-350, 2, 22, -351, -352, 73, 102, 134, 274, 157,
	96, 330, 303, 2, 170, 2, -134, 2, -346, 2,
	170, 2, -350, 2, -134, 2, -138, 2, 269, -134,
	381, 381, 381, 381, 381, 189, 55, 266, 278, -76,
	319, -75, 313, -299, -77, 2, -175, 200, -134, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 2, -98, 278, 34,
	55, 22, 60, 88, 135, 153, 154, 176, 68, 69,
	240, 189, 171, 318, 177, 279, 304, 319, 73, 334,
	308, 110, 4, 87, 200, 280, 313, 381, 381, 381,
	-354, 2, 303, 271, 284, -110, -112, -111, -163, -164,
	327, 165, 107, 220, -109, -111, 2, -328, -98, 278,
	2, 55, 22, -297, 2, -259, 216, -236, 93, -238,
	369, 370, 364, 206, 354, -250, -240, -253, 108, 266,
	378, -142, -239, 384, 9, -325, -111, 29, -251, -252,
	49, -134, 7, 8, 5, 6, -140, -277, -246, -286,
	322, 115, 208, -323, -324, 4, -307, -301, -278, -288,
	-282, -285, 166, 58, 79, 80, 83, 81, 84, 280,
	333, 50, 28, 113, 114, 226, 234, 300, 320, 321,
	147, 209, 148, 56, 136, 182, 101, 37, 39, 41,
	42, 51, 52, 89, 91, 92, 124, 125, 126, 158,
	160, 161, 162, 163, 164, 211, 244, 287, 297, 314,
	315, 341, -308, -289, -290, -283, -284, 74, 116, 133,
	156, 149, 168, 172, 183, 186, 195, 201, 223, 225,
	263, 285, -291, -355, 2, 319, 319, 2, -355, 2,
	-355, 2, -137, 2, 319, 316, -331, 245, -327, -134,
	-331, 381, 381, 383, 381, -160, -161, 2, 22, 99,
	-188, 2, 378, -266, 2, 376, -268, -142, -111, -267,
	378, 217, -3, 2, -268, 147, -142, 2, -268, 147,
	-142, 2, -134, 2, -145, 147, -142, -300, 4, -307,
	-309, -308, -310, 58, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 68,
	73, 78, 79, 81, 80, 82, 83, 84, 93, 95,
	97, 99, 100, 103, 105, 107, 115, 117, 129, 131,
	132, 134, 137, 139, 150, 153, 155, 165, 167, 178,
	181, 187, 190, 191, 206, 207, 208, 214, 216, 217,
	219, 220, 232, 238, 247, 261, 274, 280, 290, 301,
	303, 312, 316, 317, 322, 327, 328, 333, 335, 342,
	343, 345, 346, 347, 348, 316, 383, -174, -167, -134,
	-230, -229, 380, -236, 2, -236, 2, 132, 378, -185,
	-186, -229, -230, 2, -175, 147, -134, 2, -175, 2,
	153, -134, 147, 2, -134, 22, 132, 2, 167, 2,
	167, 2, -269, 2, -268, -176, 147, 2, -175, -176,
	147, 2, -146, 147, 2, -145, -134, 147, 2, -167,
	147, 2, -203, 378, -274, 2, -273, -302, 4, -307,
	-309, -308, 340, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 278, 216, 383, -175, -236,
	-248, 378, 132, -236, 216, -134, 2, 282, 2, 378,
	-76, 53, 319, -223, 2, -224, -131, -132, -133, 169,
	239, 243, 353, 316, 359, 132, -297, -179, 380, -98,
	2, -305, 2, -303, 9, -302, 5, 282, 2, 240,
	279, 55, 132, 2, 2, -347, 2, 216, 132, 2,
	132, 2, 132, 2, 132, 2, 132, 2, 2, 240,
	279, 2, 129, 2, 318, 2, 2, 132, 2, 169,
	239, 294, 2, 303, 343, 2, 132, 132, 353, 2,
	-192, -268, 303, 353, 22, -163, -164, -213, -190, 129,
	-210, -211, 187, 117, 214, -194, 22, 99, -194, -194,
	44, 379, 379, -98, 282, 2, 10, 11, 57, 33,
	369, 370, 371, 372, 127, 373, 374, 367, 368, 366,
	357, 358, 361, 362, 363, 70, 360, 359, 63, 193,
	268, 118, 119, 120, 121, 253, 13, 14, 15, 26,
	219, 186, 354, 149, 285, 364, 16, 17, 18, 168,
	36, 150, -139, -147, -236, -236, -236, -236, -236, 225,
	-184, -231, 376, -111, 378, 378, -111, -236, -177, 378,
	7, -111, -245, 376, -254, -236, -185, 378, 5, 378,
	5, -332, 349, 129, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 236, -295, 344, -295, -295, -279, 378,
	-279, -280, 378, -279, 350, 355, 378, -222, -223, -222,
	316, -138, 383, -331, -168, 378, -188, -180, -270, -236,
	371, -180, -187, -259, 74, -197, 172, 201, 133, 183,
	263, 156, 7, -53, -233, 384, 378, 371, -263, 355,
	-111, -267, 378, -266, -142, 378, -121, 254, -120, 21,
	23, 102, 338, 108, 291, 309, 111, 270, 254, 108,
	111, 254, 291, 309, 270, 254, 108, 384, 111, -305,
	-143, 383, -300, 371, 295, 379, -173, -142, -186, 378,
	-162, 206, -130, -329, 348, -162, 378, -135, 147, 2,
	-134, -329, 206, -269, -144, -142, -144, 281, -134, 30,
	-123, 383, 48, 259, 108, -123, 108, -123, 383, 108,
	-123, 108, 108, -177, -236, 379, 383, -346, -352, 73,
	378, 30, -247, -275, -276, -278, -287, -281, -285, -286,
	40, 46, 45, 174, 173, 310, 199, 276, 288, 336,
	151, 38, 215, 159, 4, 158, 160, 161, 162, 163,
	164, 287, 37, 244, 125, 126, 124, 101, 92, 91,
	211, 42, 41, -289, -290, -283, -284, 89, 314, 315,
	166, 39, 52, 51, 341, 297, -306, -305, -346, -299,
	-177, 30, -223, 2, -356, 383, 185, -149, 192, 205,
	141, 217, 351, -304, 5, 4, -246, -260, 93, 189,
	-286, 8, 370, -296, 7, 369, -298, -297, -298, 77,
	380, -300, -175, 22, 283, 2, -299, -349, 129, -346,
	-299, -299, -299, -299, -299, 278, -53, 129, -134, 185,
	-299, 2, -299, 2, 303, 153, 303, -123, 383, -142,
	64, 65, 353, -213, -190, -191, -190, -214, -213, 330,
	-211, -210, -215, -236, 22, -218, 123, 202, -236, -238,
	-110, -110, -110, -165, -264, -236, 238, 153, -299, -293,
	-275, -292, 249, 250, 248, 252, 251, -275, -300, 313,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, 186, 149, 285, 36, 150, -236, 316, -236,
	-236, -236, -236, 198, 206, 208, 322, 115, 329, 99,
	212, -358, 301, 32, -243, -111, 378, -258, 27, 290,
	22, -250, 266, 378, -231, -236, -232, -178, -177, 379,
	383, -178, -249, -245, -257, -256, 345, 379, -177, 342,
	22, 99, 371, 2, 7, -204, 352, 197, 90, 142,
	196, -205, 273, -333, 122, 137, 378, 379, 2, 379,
	2, 379, 2, 379, 2, -236, -236, -198, 2, -294,
	-177, 4, 352, 197, 90, 142, 196, 273, -198, 2,
	-199, 2, -236, -177, -200, -237, -238, 369, 370, 364,
	378, 266, -201, 2, -236, -178, -236, 43, 181, 317,
	-202, -236, 132, -177, -236, -236, -236, -177, -177, 2,
	-177, 2, 378, 7, 7, 313, 313, 7, -138, -327,
	30, -167, -170, 383, 132, 30, 4, -170, 383, 379,
	172, 172, -266, -197, 172, -195, 223, -195, -195, -344,
	378, 377, -263, -300, 376, 385, -178, 2, -262, -261,
	30, -134, 221, 379, -142, 383, 316, -208, 68, 59,
	-226, 147, 59, -311, -134, 68, -312, 54, 328, 238,
	131, -208, 68, -208, 68, 68, -268, 33, -67, 66,
	132, 316, -268, 66, 316, 33, -67, 132, 316, -145,
	-300, 66, -272, 356, -134, 132, 379, 383, -150, -167,
	-151, -134, -227, -226, -313, -314, -311, 153, 328, 116,
	30, 108, 230, 30, 216, 206, -126, 306, 108, -228,
	346, -219, -67, 378, 93, 30, -219, -181, -182, -271,
	-183, -142, 378, -134, -175, -176, -176, -145, -146, -134,
	-167, 379, 383, -53, -273, 316, 335, -151, -52, 379,
	383, -169, 29, 376, -204, 378, -272, 383, 132, 359,
	316, 379, 319, -224, -148, 243, 289, 255, 277, 8,
	7, 7, 383, -300, -348, -134, 278, -53, -142, -145,
	-142, -268, 348, 129, 65, -191, -214, -216, -296, 378,
	370, -217, 266, 267, 383, -119, 31, 97, 175, -142,
	353, -236, -236, 316, -358, 301, -243, -236, 198, 208,
	322, 115, 329, 99, 212, 132, 378, -237, -237, -177,
	-240, 378, -177, 377, 387, 379, -236, 377, 377, 383,
	-255, -256, 103, -236, -164, 383, -163, -236, -177, -177,
	379, 379, 316, 316, 316, 316, 378, -338, 224, 378,
	378, -236, 30, 383, 379, 132, 379, 379, -206, 232,
	379, 10, 11, 369, 370, 371, 372, 127, 373, 374,
	367, 368, 366, 357, 358, 359, 63, 193, 268, 13,
	14, 15, 168, 150, -237, -237, -237, -177, 378, 379,
	-241, -242, 132, 129, 30, -202, -202, -202, 379, 132,
	-177, 383, 383, 383, 379, 379, 379, 7, 379, 383,
	379, 353, 353, 379, 378, 379, -228, -270, -172, 2,
	-266, -300, -228, -259, -266, -266, -196, 335, 216, 172,
	-266, -261, 379, -345, 7, -263, -262, 7, -235, -234,
	130, 204, 379, -134, 378, -263, 379, -120, -142, -134,
	-134, 206, -226, 147, -125, 206, -275, -134, 378, 378,
	175, 175, -134, -134, 147, -134, 147, -134, -134, -121,
	254, -67, 353, 378, -142, 254, 353, -134, -67, 378,
	-134, 254, 353, -104, 146, 212, 295, 132, -142, 379,
	379, 383, -135, 153, -135, -67, -175, 5, -67, -142,
	108, -127, 104, -357, 359, -134, -212, -210, -236, -193,
	-221, 261, 216, -173, 340, -134, -193, -171, 383, 132,
	359, -173, -123, -123, -123, -123, -236, -348, -305, 379,
	-275, 376, 377, 7, 7, -107, 348, -305, -348, -297,
	-297, -131, 326, 62, 243, -297, 383, -31, -32, 153,
	242, 87, 303, -217, -236, -264, -142, 384, -236, -236,
	-237, -237, 132, 378, -236, -247, 26, 26, 379, -178,
	383, -232, -236, 379, -245, 105, -236, 312, 379, 342,
	-164, -164, -164, 5, 197, 142, 196, -205, 196, -205,
	-205, 7, -339, -134, 378, 346, -163, 379, -293, -275,
	-236, -241, -236, -293, -275, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, 99, 206, 212, -237, 383, -178,
	-242, -241, -236, -236, -275, 379, 379, 379, -177, -236,
	-236, -236, 379, 7, -52, -189, 137, -272, 383, -189,
	-196, 378, -236, -266, 377, 379, 383, -262, 377, 383,
	386, 359, -263, 378, -167, -261, 316, 316, 108, 206,
	337, -315, -312, -236, -166, -265, -134, -326, 378, -323,
	-324, -140, 378, 378, -118, 102, 281, -209, 108, -123,
	108, -123, 316, -208, 68, -239, -140, -134, -177, 316,
	-239, -177, 316, -239, -107, 132, 302, 295, -152, 152,
	-227, 378, -135, 378, 378, -162, 378, -134, -128, 180,
	-357, -303, -329, -193, -193, -180, 207, 67, 379, -228,
	-182, -172, -259, 379, -108, 75, -108, 7, 377, 379,
	-106, 218, -105, -134, 5, -134, 383, 378, -300, -134,
	-142, 217, 379, -119, -300, 26, 26, -236, -247, 379,
	-236, -236, 379, -236, 377, -236, 5, -236, 379, 379,
	379, 379, -340, -134, -236, 379, 379, 379, -242, 132,
	99, 212, 378, -236, 379, 379, 383, 379, 379, 379,
	379, -244, 139, 44, -266, -244, -167, -233, 7, -234,
	-300, 376, -262, -167, 379, -134, -134, -226, 108, -316,
	68, -317, 57, 116, 73, 206, 208, 328, 238, 54,
	93, 247, 379, 379, 383, -141, -185, 57, -141, -236,
	378, -166, -167, 206, 93, 206, 93, 86, 324, -134,
	-134, -142, -134, -134, 378, 379, -142, 379, -134, -306,
	313, -153, -154, 229, 150, -166, 378, -167, -150, 30,
	-166, 216, -129, 179, -357, -303, -126, -220, 378, 216,
	-67, -193, 359, 86, 86, 377, 383, 378, 359, 359,
	-32, -167, -119, -236, -236, 379, 379, -164, -334, 229,
	379, -237, 132, 378, -247, 379, -236, -335, 347, -236,
	-177, -335, 379, -263, 7, 379, -226, -134, -300, -134,
	116, 147, 208, 175, 378, -237, -142, -225, -353, 72,
	299, -265, -119, -300, -119, 379, -177, 379, 379, 208,
	208, -236, -275, -123, -123, 316, 316, -177, 316, 316,
	-239, 44, 227, 379, -166, 379, 379, -67, 379, -142,
	-357, -303, -127, 100, -167, 68, -188, -111, 378, 378,
	378, -105, -106, -305, -305, 379, 379, -164, 44, -237,
	-247, 379, 379, -336, -337, -134, -262, 377, -317, -135,
	206, -236, -136, 378, -152, 378, -141, -164, 247, -122,
	57, -134, -134, -164, 378, 378, 188, 242, -142, -225,
	379, -152, -225, 378, -303, -128, 330, 207, 379, -134,
	-306, -306, 379, -341, 242, 267, -177, 379, 383, 30,
	108, 379, -318, 194, -134, -167, -119, 379, -142, -117,
	335, -300, 379, -177, -177, 378, 378, 378, -152, -225,
	-152, -166, -129, 281, -228, 379, 379, 379, -342, -343,
	36, 325, 77, -236, -342, -337, -339, 116, -319, -322,
	-321, 216, 133, 228, 286, 379, 379, -162, -236, 379,
	379, -167, -167, -167, -152, 379, -181, -107, -107, -343,
	235, 128, 266, 235, 128, -134, -321, 216, -322, 216,
	330, 96, -318, 379, 379, 379, -225, -228, 26, -320,
	203, 259, 48, 281, -320, -319, 378, 378, -124, 48,
	259, -152, -343, 20, 208, 93, -155, 229, -156, 229,
	379, -300, 379, -300, 340, 340, -157, 378, 184, 383,
	-154, -153, -158, -159, -236, 93, 195, 311, -155, 378,
	383, 379, 383, 378, -158, -155, -159, -158, 379, 379,
	383, -154, -153, -156, 383, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 674, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 354, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 383,
	385, 387, 389, 0, 595, 597, 599, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 712, -2, 723, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 689, 691, 693, 695,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1298, 1222, 1228,
	1229, 1253, 1254, 1255, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 151, 153, 154, 0,
	0, 0, 1224, 1298, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 562, 169, 171, 261, 1360, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 466, 256, 254, 0, 127,
	0, 592, 0, 269, 593, 594, 589, 590, 1387, 618,
	287, 289, 298, 300, 302, -2, -2, 1481, -2, 318,
	-2, 326, 1487, 0, 329, 330, 333, -2, 209, 355,
	357, 359, 361, 363, 365, 367, 369, 371, 373, 375,
	377, 379, 381, 384, 386, 388, 390, 391, 0, 0,
	0, 395, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 394, 396, 397, 398, 0, 596, 598, 600,
	0, 552, 714, 0, 0, -2, 687, 688, -2, 0,
	718, 718, 718, 0, 0, 688, 686, 0, 290, 0,
	292, 0, 395, 295, 296, 334, 335, 1207, 1208, 924,
	0, 0, 0, 0, 0, 0, 1026, 1028, 1452, 1481,
	0, 1030, 1031, 0, 1033, 1035, 1036, 0, 1039, 1040,
	1192, 1224, 1238, 1239, 1240, 1241, 0, 0, 1244, 0,
	1246, 1247, 1248, 1094, 1050, -2, -2, 1236, 852, 853,
	854, 855, -2, 1495, 1054, 1057, 1060, 1063, 1064, 1067,
	1068, 0, 1436, 1453, 1454, 1477, 1478, 1486, 1490, 1491,
	1460, 1474, 1461, 1448, 1458, 1472, 1304, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1262, 886, 887, 892, 893, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 895, 620, 602, 611, 620, 604, 605, 606,
	607, 608, 609, 610, 613, 0, 704, 1366, 707, 1235,
	705, 690, 692, 0, 694, 0, 0, 698, 720, 719,
	758, 759, 0, 702, 703, 713, 774, 812, 789, 780,
	0, 0, 2, 71, 0, 1460, 812, 73, 0, 1460,
	812, 76, 0, 82, 0, 1460, 1227, 0, 1267, 1268,
	1269, 1270, 1271, 1495, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 0, 0, 271, 272, 1232,
	1230, 1231, 0, 155, 156, 157, 158, 0, 0, 1225,
	1201, 1199, 1200, 167, 531, 1460, -2, 554, 531, 558,
	-2, 711, 1460, 634, 262, 264, 0, 174, 0, 647,
	0, 649, 0, 664, 818, 117, 1460, 194, 207, 117,
	1460, 197, 117, 1460, 200, 1220, 117, 1460, 203, 204,
	1460, 206, 257, 0, 0, -2, 250, 252, 1263, 1264,
	1265, 1266, -2, 248, 218, 221, 223, 225, 227, 230,
	232, 235, 237, 240, 242, -2, 0, 0, 0, 465,
	0, 0, 0, 591, 0, 617, 305, 0, 315, 0,
	317, 1447, -2, -2, 321, 621, 625, 626, 627, 0,
	0, 0, 0, 0, 0, 0, 331, 210, 0, 392,
	393, 401, 402, 132, 133, 352, 353, 0, 405, 426,
	438, 0, 0, 409, 411, 464, 413, 0, 0, 415,
	0, 417, 0, 419, 0, 421, 0, 423, 425, 427,
	439, 429, 713, 431, 0, 433, 437, 0, 442, 0,
	444, 445, 446, 0, 0, 452, 0, 0, 399, 400,
	117, 816, 0, 0, 0, -2, 0, 731, 756, 0,
	734, 735, 0, 0, 0, 0, 716, 717, 0, 0,
	0, 676, 677, 291, 0, 294, 0, 0, 0, 0,
	1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1133, 1134,
	1137, 1138, 0, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 1141, 1142, 0,
	0, 1144, 0, 1146, 0, 0, 0, 0, 0, 0,
	1206, 0, 0, 1143, 929, 930, 931, 963, 964, 0,
	1027, 1203, 1196, 1029, 0, 1149, -2, 1150, 0, 0,
	1032, 1037, 1038, 1149, 0, 1191, -2, 0, 1243, 0,
	921, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1172, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 889, 900, 897, 896, 873, 0,
	872, 870, 0, 874, 0, 0, 0, 601, -2, 603,
	0, 615, 0, 706, 0, 0, 760, 763, 1212, 1216,
	1217, 763, 0, 1209, 0, 0, 0, 0, 809, 809,
	809, 807, 783, 0, 789, 0, -2, 813, 801, 0,
	-2, 780, 0, 0, 814, 0, 83, 586, 96, 0,
	586, 586, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 803,
	1223, 0, 1197, 1198, 147, 0, 0, 1218, 1202, 472,
	0, 0, 553, 0, 710, 0, 0, 0, 1460, 561,
	1256, 636, 0, 822, 0, 650, 0, 0, 819, 0,
	192, 0, 115, 116, 0, 195, 0, 198, 0, 0,
	201, 0, 0, 0, 1150, 713, 0, 0, 276, 0,
	0, 713, 0, 1152, 830, 831, 832, 833, 834, 921,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 883, 0, 858, 858,
	858, 875, 876, 884, 885, 890, 891, 902, 903, 905,
	907, 901, 901, 901, 898, 899, 803, 134, 0, 0,
	0, 0, -2, 323, 0, 623, 0, 628, 343, 344,
	345, 630, 631, 327, 346, 347, 348, 349, 350, 351,
	0, 548, 0, 550, 1249, 0, 324, 336, 325, 328,
	0, 211, 403, 404, 406, 407, 408, 412, 0, 461,
	414, 416, 418, 420, 422, 430, 434, 713, 440, 443,
	447, 448, 449, 450, 0, 0, 0, 551, 0, 307,
	0, 456, 0, 731, 756, 680, 730, 681, 755, 757,
	732, 733, 738, 742, 743, 746, 749, 750, 740, 924,
	699, 700, 701, 724, 725, 573, 0, 0, 293, 925,
	826, 827, 877, 878, 879, 880, 881, 926, 927, 0,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	-2, -2, -2, -2, -2, -2, -2, -2, 950, 951,
	952, 953, 954, 955, 956, 957, -2, -2, -2, 961,
	962, -2, 1145, 1147, 0, 1206, 0, -2, 0, -2,
	-2, -2, -2, 975, 0, 977, 980, 982, 984, 0,
	0, 0, 0, 1205, 994, 1183, 0, 0, 1124, 1125,
	1126, 979, 0, 0, 1204, 1195, 0, 0, 1148, 1034,
	0, 0, 0, 1156, 1190, 1186, 0, 1041, 723, 0,
	0, 0, 0, 1048, 0, 1252, 908, 909, 910, 911,
	912, 913, 922, 1104, 0, 0, 0, 1055, 1056, 1058,
	1059, 1061, 1062, 1065, 1066, 0, 0, 0, 1072, 0,
	1159, -2, -2, -2, -2, -2, -2, -2, 0, 1074,
	0, 1076, 1150, 1169, 0, 0, 997, 0, 0, 0,
	0, 1481, 0, 1079, 1150, 1177, 0, 0, 0, 0,
	0, 1150, 0, 1182, 0, 0, 0, 0, 0, 1090,
	0, 1092, 0, 0, 0, 0, 0, 0, 614, 708,
	0, 0, 822, 0, 0, 0, 1215, 822, 0, 1211,
	0, 0, 0, 0, 0, 804, 808, 805, 806, 0,
	0, 789, 801, 771, 0, 0, 0, 778, 779, 800,
	0, 799, 788, -2, 0, 0, 0, 0, 0, 585,
	98, 1460, 0, 119, 0, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	1226, 0, 137, 0, 1233, 0, 0, 0, 0, 0,
	471, 1232, 473, 475, 476, 477, 478, 1257, 0, 1257,
	0, 0, 0, 0, 0, 0, 638, 644, 0, 737,
	0, 662, 652, 0, 0, 0, 662, 666, 667, 669,
	670, 0, 0, 820, 208, 117, 117, 1221, 117, 117,
	205, 259, 0, 215, 251, 0, 0, 0, 253, 255,
	0, 823, 825, 0, 835, 0, 146, 0, 0, 0,
	0, 316, 0, 622, 629, 0, 340, 0, 342, 549,
	1251, 1250, 0, 212, 463, 284, 432, 435, 458, 459,
	460, 817, 0, 0, 457, 684, 685, 0, 744, 0,
	0, 741, 747, 748, 0, 727, 571, 572, 0, 0,
	0, -2, -2, 0, 0, 0, 995, -2, 976, 978,
	981, 983, 985, 0, 0, 0, 0, 0, 0, 0,
	996, 1149, 0, 1193, 1196, -2, 1151, 1154, 1155, 0,
	0, 1187, 0, 0, 0, 0, 722, 723, 723, 723,
	1047, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 0, 0, 1071, 0, 1073, 1075, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 1001, 1002, 0, 1149, 1078,
	1175, 1176, 0, 0, 0, 0, 0, 0, 1084, 0,
	1181, 0, 0, 0, 1088, 1089, 1091, 0, 856, 0,
	882, 904, 906, 894, 713, 1234, 752, 1213, 803, 762,
	764, 1214, 752, 1210, 791, 0, 793, 0, 0, 0,
	795, 0, 784, 0, 786, 801, 776, 0, 0, 769,
	0, 768, 789, 797, 0, 0, 815, 97, 575, 0,
	0, 0, 100, 1460, 108, 0, 503, 0, 0, 0,
	0, 0, 588, 109, 1460, 117, 1460, 117, 110, 84,
	586, 85, 0, 0, 581, 0, 0, 574, 86, 0,
	583, 0, 0, 146, 0, 0, 148, 0, 1219, 480,
	530, 0, 0, 1257, 0, 469, 531, 555, 557, 0,
	0, 640, 644, 0, 643, 711, 662, 736, 821, 645,
	662, 0, 0, 0, 654, 651, 648, 822, 0, 0,
	0, 0, 193, 196, 199, 202, 1151, 266, 0, 0,
	1153, 0, 828, 0, 0, 126, 0, 135, 268, 313,
	314, 319, 338, 339, 341, 337, 0, 308, 309, 311,
	0, 0, 0, 0, 0, 726, 573, 0, 928, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1184, 0,
	0, 0, 1195, -2, 1157, 1185, 1189, 0, 1042, 0,
	0, 0, 0, 1245, 914, 915, 916, 917, 918, 919,
	920, 0, 1102, 1103, 1107, 0, 0, 1053, 0, 0,
	1158, 1168, 1170, 998, 999, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, -2, -2, -2, 1016, 1017,
	1018, -2, -2, -2, 0, 0, 0, 1171, 0, 0,
	1173, 1174, 1178, 1179, 0, 1081, 1082, 1083, 1180, 0,
	0, 0, 888, 0, 0, 754, 0, 761, 0, 754,
	792, 0, 811, 794, 774, 785, 0, 782, 772, 0,
	773, 0, 801, 0, 0, 781, 0, 0, 0, 0,
	118, 501, 520, 0, 0, 564, 570, 570, 0, 1051,
	1052, 0, 0, 0, 102, 0, 0, 0, 0, 106,
	0, 112, 0, 0, 0, 91, 0, 0, 0, 0,
	90, 0, 0, 89, 124, 0, 0, 149, 485, 0,
	474, 0, 0, 0, 472, 0, 0, 0, 642, 644,
	0, 635, 636, 173, 646, 660, 661, 659, 0, 662,
	668, 665, 671, 0, 0, 128, 0, 0, 829, 836,
	144, 1350, 142, 139, 141, 285, 0, 0, 453, 454,
	455, 739, 745, 728, 573, 0, 0, -2, 0, 988,
	-2, -2, 1120, 1151, 1194, 1188, 1242, 723, 1043, 1045,
	1046, 923, 1109, 1106, 0, 1093, 1069, 1070, 1167, 0,
	0, 0, 0, 1151, 1122, 1080, 0, 1086, 1087, 857,
	709, 1098, 0, 0, 765, 1098, 0, 789, 787, 770,
	766, 0, 777, 0, 798, 577, 579, 99, 0, 502,
	0, 505, 0, 0, 0, 0, 511, 512, 0, 0,
	0, 0, 522, 529, 0, 573, 1237, 0, 573, 0,
	0, 0, 0, 0, 114, 0, 0, 587, 0, 117,
	117, 576, 0, 0, 0, 0, 582, 0, 584, 136,
	0, 467, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 632, 644, 0, 637, 638, 0, 0, 0,
	653, 663, 0, 0, 0, 824, 0, 0, 0, 0,
	310, 0, 729, -2, -2, 989, 1121, 0, 723, 0,
	1095, -2, 0, 0, 0, 1123, 0, 696, 0, 753,
	751, 697, 810, 801, 0, 796, 101, 0, 506, 507,
	1257, 0, 510, 513, 0, 515, 1259, 480, 0, 526,
	527, 565, 566, 569, 567, 570, 723, 524, 0, 103,
	104, 113, 121, 105, 111, 0, 0, 723, 0, 0,
	802, 0, 0, 529, 0, 519, 480, 470, 529, 0,
	0, 639, 640, 0, 0, 0, 672, 673, 0, 0,
	0, 143, 0, 138, 140, 312, 1044, 1112, 0, -2,
	0, 1024, 1085, 1097, 1099, 0, 775, 767, 504, 508,
	0, 0, 535, 0, 523, 0, 573, 0, 0, 123,
	0, 578, 580, 0, 0, 0, 0, 0, 0, 480,
	529, 468, 480, 0, 641, 642, 0, 656, 822, 658,
	0, 0, 145, 0, 0, 0, 1108, 1025, 0, 0,
	0, 514, 540, 0, 0, 0, 568, 1042, 531, 107,
	0, 120, 0, 0, 0, 0, 0, 0, 517, 480,
	559, 0, 633, 0, 657, 146, 146, 1105, 1110, 1113,
	-2, 1420, 1295, 0, 1111, 1100, 1101, 0, 516, 536,
	537, 0, 532, 533, 534, 1258, 528, 535, 122, 93,
	95, 0, 0, 0, 518, 529, 822, 129, 130, 0,
	1115, 1116, 1117, 1118, 1119, 509, 538, 0, 539, 0,
	0, 0, 540, 0, 0, 483, 480, 655, 0, 541,
	0, 544, 545, 0, 542, 525, 0, 0, 479, 481,
	482, 560, 1114, 543, 546, 547, 0, 0, 0, 0,
	486, 0, 487, 0, 0, 0, 485, 0, 0, 0,
	484, 490, 0, 493, 495, 496, -2, 0, 488, 0,
	0, 491, 0, 0, 0, 489, 494, 0, 492, 485,
	0, 484, 500, 498, 0, 499,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1097
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1280
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[6].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2033
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2088
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			return unimplemented(sqllex, "set from current")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = Low
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = Normal
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = High
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.str = "client_encoding"
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2462
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2495
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2506
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2510
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2514
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2522
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2540
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = DropDefault
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return unimplemented(sqllex, "match full")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			return unimplemented(sqllex, "match partial")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			return unimplemented(sqllex, "match simple")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3009
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = NoAction
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = Restrict
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = Cascade
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = SetNull
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = SetDefault
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3171
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = true
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = false
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3202
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3205
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3206
		{
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = Ascending
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = Descending
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3246
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3248
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = true
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = false
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3281
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3304
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3381
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.str = ""
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3442
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = ReadOnly
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = ReadWrite
		}
	case 632:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.str = ""
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			return helpWith(sqllex, "INSERT")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3633
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 663:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3673
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			return helpWith(sqllex, "SELECT")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			return helpWith(sqllex, "VALUES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			return helpWith(sqllex, "TABLE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			return helpWith(sqllex, "SELECT")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			return helpWith(sqllex, "TABLE")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3958
		{
			return unimplemented(sqllex, "cte")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3966
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3970
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = true
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = false
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = true
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3994
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = false
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = true
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			return helpWith(sqllex, "VALUES")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &From{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4239
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4284
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4321
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = nil
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = true
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = false
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.str = astFullJoin
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.str = astLeftJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.str = astRightJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.str = astInnerJoin
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4505
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4605
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4637
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4648
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = jsonbColType
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = jsonColType
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4746
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = nil
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4907
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4979
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = year
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = month
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = day
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = hour
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = minute
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = month
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = hour
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = minute
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = minute
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = nil
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = second
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5074
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5109
		{
			return unimplemented(sqllex, "at tz")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5556
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5609
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5610
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5623
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5634
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5655
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5664
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5673
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5682
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			return unimplemented(sqllex, "current role")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5692
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5713
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5723
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5733
		{
			return unimplemented(sqllex, "treat")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5775
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5779
		{
			return unimplemented(sqllex, "within group")
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5780
		{
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5815
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.str = ""
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5877
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5878
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5879
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5882
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5883
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5889
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5890
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5891
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5893
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = Any
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = Some
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = All
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Plus
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Minus
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Mult
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = Div
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Mod
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Bitand
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Bitor
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = Pow
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Bitxor
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = LT
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = GT
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = EQ
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = LE
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = GE
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = NE
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = Like
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = NotLike
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = ILike
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = NotILike
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6248
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6249
		{
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6293
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6411
		{
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6447
		{
			return unimplemented(sqllex, "func const")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6449
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6453
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6456
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = DNull
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6483
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6518
		{
			sqlVAL.str = ""
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6528
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
