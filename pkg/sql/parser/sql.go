// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USER = 57633
const USERS = 57634
const USING = 57635
const UUID = 57636
const VALID = 57637
const VALIDATE = 57638
const VALUE = 57639
const VALUES = 57640
const VARCHAR = 57641
const VARIADIC = 57642
const VIEW = 57643
const VARYING = 57644
const WHEN = 57645
const WHERE = 57646
const WINDOW = 57647
const WITH = 57648
const WITHIN = 57649
const WITHOUT = 57650
const YEAR = 57651
const ZONE = 57652
const NOT_LA = 57653
const WITH_LA = 57654
const AS_LA = 57655
const POSTFIXOP = 57656
const UMINUS = 57657

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5521

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	334, 31,
	-2, 437,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	1, 410,
	187, 410,
	227, 410,
	330, 410,
	332, 410,
	334, 410,
	-2, 420,
	-1, 66,
	1, 413,
	187, 413,
	227, 413,
	330, 413,
	332, 413,
	334, 413,
	-2, 419,
	-1, 75,
	1, 31,
	334, 31,
	-2, 437,
	-1, 439,
	1, 200,
	334, 200,
	-2, 1012,
	-1, 483,
	108, 447,
	160, 447,
	185, 447,
	-2, 416,
	-1, 486,
	108, 446,
	160, 446,
	185, 446,
	-2, 414,
	-1, 627,
	108, 446,
	160, 446,
	185, 446,
	-2, 417,
	-1, 687,
	331, 944,
	-2, 937,
	-1, 688,
	331, 945,
	-2, 938,
	-1, 694,
	5, 613,
	331, 613,
	-2, 1123,
	-1, 718,
	5, 574,
	-2, 1097,
	-1, 719,
	5, 607,
	331, 607,
	-2, 1099,
	-1, 720,
	5, 582,
	-2, 1100,
	-1, 721,
	5, 581,
	-2, 1101,
	-1, 722,
	5, 607,
	331, 607,
	-2, 1104,
	-1, 723,
	5, 607,
	331, 607,
	-2, 1105,
	-1, 724,
	5, 608,
	-2, 1108,
	-1, 725,
	5, 568,
	-2, 1109,
	-1, 726,
	5, 568,
	-2, 1110,
	-1, 727,
	5, 589,
	-2, 1114,
	-1, 728,
	5, 569,
	-2, 1119,
	-1, 729,
	5, 570,
	-2, 1120,
	-1, 730,
	5, 571,
	-2, 1121,
	-1, 731,
	5, 572,
	-2, 1122,
	-1, 732,
	5, 568,
	-2, 1127,
	-1, 733,
	5, 575,
	-2, 1132,
	-1, 734,
	5, 573,
	-2, 1135,
	-1, 735,
	5, 605,
	331, 605,
	-2, 1137,
	-1, 736,
	5, 609,
	-2, 1140,
	-1, 737,
	5, 611,
	-2, 1141,
	-1, 738,
	5, 604,
	331, 604,
	-2, 1146,
	-1, 1014,
	99, 420,
	108, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 732,
	-1, 1023,
	331, 921,
	-2, 909,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 648,
	-1, 1243,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 649,
	-1, 1244,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 650,
	-1, 1248,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 654,
	-1, 1249,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 655,
	-1, 1250,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 656,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 661,
	-1, 1259,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 663,
	-1, 1261,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 667,
	-1, 1262,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 668,
	-1, 1263,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 669,
	-1, 1264,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 670,
	-1, 1291,
	196, 803,
	-2, 806,
	-1, 1320,
	117, 843,
	331, 944,
	-2, 937,
	-1, 1321,
	117, 844,
	-2, 1093,
	-1, 1322,
	117, 845,
	-2, 1011,
	-1, 1323,
	117, 846,
	-2, 979,
	-1, 1324,
	117, 847,
	-2, 995,
	-1, 1325,
	117, 848,
	-2, 1010,
	-1, 1326,
	117, 849,
	-2, 1058,
	-1, 1486,
	99, 420,
	108, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 503,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 662,
	-1, 1491,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 664,
	-1, 1496,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 665,
	-1, 1514,
	196, 802,
	-2, 805,
	-1, 1706,
	1, 504,
	69, 504,
	99, 504,
	108, 504,
	118, 504,
	122, 504,
	124, 504,
	137, 504,
	144, 504,
	149, 504,
	157, 504,
	160, 504,
	172, 504,
	185, 504,
	187, 504,
	191, 504,
	227, 504,
	229, 504,
	286, 504,
	293, 504,
	304, 504,
	305, 504,
	313, 504,
	330, 504,
	332, 504,
	334, 504,
	335, 504,
	-2, 503,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 666,
	-1, 1713,
	147, 0,
	-2, 682,
	-1, 1723,
	196, 804,
	-2, 807,
	-1, 1757,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 709,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 710,
	-1, 1759,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 711,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 715,
	-1, 1764,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 716,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	314, 0,
	315, 0,
	316, 0,
	-2, 717,
	-1, 1886,
	147, 0,
	-2, 683,
	-1, 1889,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 686,
	-1, 1890,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 688,
	-1, 1996,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 687,
	-1, 1997,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 689,
	-1, 2004,
	147, 0,
	-2, 718,
	-1, 2060,
	147, 0,
	-2, 719,
	-1, 2125,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	311, 0,
	317, 0,
	-2, 1096,
}

const sqlPrivate = 57344

const sqlLast = 29897

var sqlAct = [...]int{

	688, 2124, 2102, 1660, 2149, 2066, 2103, 2123, 2104, 1976,
	1930, 1116, 1701, 678, 929, 1108, 1670, 686, 1956, 1177,
	1702, 1877, 494, 65, 1484, 1734, 487, 685, 292, 1851,
	1607, 1794, 1206, 88, 88, 88, 935, 775, 308, 1481,
	1808, 1862, 664, 1457, 1608, 310, 88, 88, 88, 508,
	1856, 88, 532, 1195, 88, 1181, 51, 1459, 777, 1176,
	1575, 1214, 88, 88, 550, 1407, 65, 814, 1574, 1678,
	88, 88, 1221, 783, 88, 1289, 931, 88, 88, 88,
	88, 1525, 1471, 88, 88, 1019, 1687, 1180, 1117, 754,
	798, 1213, 1401, 1148, 1346, 1077, 1466, 1299, 65, 1068,
	647, 751, 658, 523, 663, 1273, 1276, 1219, 1100, 955,
	1132, 301, 22, 613, 1202, 787, 1168, 756, 1317, 878,
	1141, 1010, 614, 551, 784, 492, 299, 30, 657, 648,
	1053, 1216, 681, 888, 542, 960, 544, 1049, 545, 281,
	298, 16, 300, 8, 1110, 497, 1809, 630, 629, 486,
	1184, 66, 631, 876, 880, 680, 80, 436, 426, 417,
	791, 538, 84, 495, 635, 612, 1989, 1513, 800, 1990,
	800, 1482, 440, 491, 429, 294, 20, 307, 506, 67,
	491, 513, 516, 800, 506, 1145, 2140, 22, 1109, 780,
	280, 2119, 2114, 2113, 1807, 1151, 1151, 2110, 2100, 1419,
	780, 1138, 30, 963, 964, 505, 2095, 2091, 511, 780,
	780, 518, 2062, 770, 514, 1138, 16, 484, 8, 1418,
	473, 2056, 64, 1113, 780, 2038, 966, 962, 1807, 1146,
	963, 964, 2034, 2029, 499, 780, 2028, 1998, 1986, 1983,
	1138, 809, 1984, 1970, 1101, 483, 1807, 71, 42, 965,
	1151, 20, 2044, 966, 1104, 980, 1967, 43, 1965, 780,
	1941, 1807, 1940, 780, 1912, 1807, 1469, 1151, 1891, 1147,
	1144, 1151, 1888, 1469, 73, 1138, 965, 1880, 1828, 44,
	1151, 1151, 1827, 1806, 1717, 1151, 1807, 1151, 88, 88,
	88, 88, 88, 1646, 554, 1641, 1107, 1592, 1107, 1590,
	1593, 1589, 1151, 1517, 1151, 971, 74, 1588, 1518, 1349,
	1151, 1516, 961, 1101, 69, 437, 1151, 1151, 1514, 1446,
	70, 1151, 780, 1210, 1524, 1155, 780, 1150, 1151, 1770,
	1151, 1137, 971, 1106, 1138, 1104, 1107, 1720, 1065, 68,
	1149, 1064, 1443, 808, 1066, 307, 809, 801, 1447, 801,
	492, 1293, 552, 1205, 1163, 643, 924, 923, 981, 870,
	869, 780, 801, 963, 964, 521, 567, 504, 75, 527,
	1870, 1810, 963, 964, 902, 588, 71, 889, 474, 815,
	71, 1485, 2138, 2122, 2109, 981, 966, 2071, 2057, 1968,
	64, 1917, 506, 71, 516, 966, 1913, 1905, 963, 964,
	1904, 642, 55, 73, 1903, 1899, 1898, 73, 1897, 965,
	1842, 1143, 1836, 88, 1449, 1785, 42, 1418, 965, 539,
	73, 966, 1780, 1779, 1778, 43, 1728, 982, 88, 531,
	548, 88, 88, 1142, 1285, 74, 1706, 1677, 1650, 74,
	1597, 1594, 1027, 69, 965, 961, 1582, 44, 1573, 70,
	1545, 1546, 74, 1020, 982, 68, 804, 1544, 799, 1541,
	69, 1540, 1538, 547, 547, 971, 70, 1530, 1112, 529,
	1529, 927, 68, 88, 971, 1445, 88, 747, 88, 88,
	88, 1363, 88, 1314, 1483, 68, 1648, 1313, 642, 641,
	934, 1736, 2083, 2041, 2027, 2026, 2025, 88, 2017, 2015,
	971, 2006, 1993, 1979, 1963, 1927, 1910, 1882, 88, 1845,
	628, 1833, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 554, 88, 1813, 747, 1712, 1692, 1668, 310, 554,
	1666, 88, 1665, 1286, 1663, 1616, 88, 88, 88, 1615,
	88, 975, 967, 968, 969, 970, 972, 973, 576, 1572,
	1534, 2121, 1551, 981, 746, 1533, 1835, 577, 1510, 88,
	88, 71, 1505, 1278, 1434, 627, 781, 88, 1392, 88,
	55, 1390, 1377, 1376, 88, 1356, 1312, 1209, 1054, 1057,
	506, 554, 554, 1061, 789, 1047, 1046, 1045, 73, 310,
	1044, 88, 1043, 1042, 88, 1041, 88, 88, 88, 88,
	88, 88, 745, 1040, 88, 570, 572, 619, 1039, 88,
	88, 1377, 748, 1038, 1037, 1036, 1035, 88, 885, 885,
	74, 1034, 982, 1033, 1032, 88, 1031, 903, 69, 1024,
	741, 617, 1013, 615, 70, 788, 803, 68, 933, 806,
	506, 792, 792, 740, 88, 774, 484, 88, 527, 928,
	620, 509, 623, 1694, 638, 639, 646, 574, 563, 561,
	644, 2093, 1988, 513, 516, 1893, 959, 539, 1871, 1867,
	1841, 1840, 1695, 1020, 483, 967, 968, 969, 970, 972,
	973, 1545, 1546, 530, 779, 1428, 969, 970, 972, 973,
	810, 582, 890, 1201, 821, 1868, 812, 790, 793, 963,
	964, 1200, 938, 1427, 1011, 1545, 1546, 580, 2031, 926,
	967, 968, 969, 970, 972, 973, 901, 1991, 1460, 492,
	1839, 1420, 966, 862, 1101, 864, 1485, 863, 1596, 896,
	895, 866, 889, 886, 1595, 891, 1059, 89, 898, 897,
	1060, 932, 764, 1489, 604, 965, 583, 581, 693, 1029,
	88, 739, 910, 1402, 307, 1857, 1109, 1737, 88, 1300,
	1521, 762, 88, 905, 1549, 1550, 1552, 1553, 1026, 1050,
	88, 88, 288, 1414, 88, 925, 763, 940, 757, 942,
	758, 88, 311, 941, 1603, 78, 608, 484, 2074, 957,
	484, 484, 2135, 1821, 1154, 88, 312, 88, 88, 64,
	88, 466, 472, 88, 471, 88, 88, 1551, 88, 1647,
	554, 899, 2136, 1071, 757, 951, 758, 467, 952, 953,
	1023, 609, 1951, 481, 1950, 42, 289, 1440, 1949, 1948,
	747, 65, 1078, 1631, 43, 1630, 65, 1129, 2033, 77,
	1600, 1599, 1492, 1433, 1432, 1431, 1430, 1145, 1260, 284,
	580, 759, 1152, 1098, 1063, 490, 44, 1055, 1082, 1084,
	1051, 1052, 743, 1058, 1097, 1094, 506, 1271, 552, 616,
	854, 520, 1832, 860, 516, 1360, 1359, 1231, 506, 1196,
	922, 1062, 1269, 476, 868, 1634, 900, 759, 1636, 867,
	581, 1146, 1103, 1087, 1275, 1081, 1070, 605, 285, 1120,
	489, 1275, 1627, 310, 516, 1099, 1095, 516, 1074, 907,
	88, 1404, 911, 912, 913, 914, 915, 785, 2081, 904,
	921, 88, 88, 88, 918, 919, 1545, 1546, 88, 88,
	1932, 1147, 1144, 1130, 573, 88, 1124, 1125, 1115, 1089,
	1135, 1167, 1092, 651, 1127, 1265, 1128, 491, 794, 2032,
	559, 1618, 1149, 1266, 1134, 1267, 1136, 606, 290, 1272,
	757, 2146, 758, 88, 1332, 1412, 310, 1111, 1300, 1111,
	71, 76, 1016, 1055, 1408, 1058, 1211, 1126, 547, 55,
	547, 767, 1070, 1652, 1157, 2020, 1080, 2097, 1069, 1133,
	963, 964, 1156, 291, 1052, 1051, 2157, 73, 1553, 1441,
	765, 310, 1149, 800, 1230, 1408, 79, 607, 1478, 477,
	2098, 1397, 2135, 966, 1388, 766, 973, 1547, 1548, 1549,
	1550, 1552, 1553, 1653, 1394, 1170, 516, 1172, 1551, 74,
	482, 555, 506, 759, 478, 772, 965, 69, 1174, 1283,
	1257, 768, 488, 70, 479, 556, 1173, 890, 887, 287,
	286, 1439, 920, 760, 601, 771, 767, 1268, 1171, 1175,
	1545, 1546, 293, 2106, 1270, 2145, 1079, 1217, 88, 88,
	88, 1470, 579, 1143, 88, 765, 789, 88, 1362, 1048,
	1199, 1561, 558, 88, 88, 88, 88, 88, 602, 760,
	766, 1212, 971, 591, 1149, 88, 821, 821, 88, 88,
	963, 964, 1619, 1191, 1479, 554, 1297, 1655, 88, 1203,
	1204, 2002, 1560, 88, 1625, 88, 1282, 418, 1964, 1502,
	1474, 1280, 88, 966, 1802, 1933, 1494, 592, 1008, 1370,
	590, 1287, 88, 1274, 1500, 1255, 1258, 1284, 423, 1477,
	1688, 1159, 1532, 419, 2107, 981, 965, 1705, 1308, 491,
	1562, 1472, 1161, 88, 88, 1327, 2144, 1803, 1635, 1475,
	755, 1675, 1551, 1254, 554, 578, 1364, 634, 420, 492,
	742, 1162, 1366, 2105, 1473, 2158, 1410, 1387, 1149, 2134,
	2132, 1416, 801, 1160, 1365, 1850, 88, 422, 88, 1864,
	88, 1400, 848, 1193, 88, 2108, 595, 1497, 88, 690,
	1067, 885, 971, 1396, 2152, 847, 568, 1498, 821, 566,
	633, 1503, 1406, 1943, 982, 1561, 1422, 788, 1423, 1424,
	1942, 88, 1448, 1925, 1450, 579, 788, 947, 1413, 1403,
	1817, 1476, 65, 2012, 1602, 760, 506, 1421, 1547, 1548,
	1549, 1550, 1552, 1553, 1820, 1908, 2163, 875, 1798, 55,
	1799, 1819, 1373, 1256, 1369, 981, 1194, 939, 555, 930,
	1651, 2067, 632, 1425, 1389, 311, 555, 1391, 1438, 1436,
	1437, 821, 556, 917, 1766, 1852, 871, 492, 1801, 312,
	556, 1444, 1488, 1442, 1562, 873, 1804, 634, 421, 633,
	948, 1878, 1671, 1926, 1865, 1863, 1379, 874, 1455, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 1378, 1499,
	820, 1683, 821, 1462, 578, 1464, 1501, 1682, 555, 555,
	1465, 1816, 1468, 1290, 982, 1217, 311, 1480, 1487, 1523,
	1294, 2150, 556, 556, 1302, 492, 1135, 1909, 424, 2162,
	312, 632, 1818, 1222, 1229, 1319, 1319, 1330, 1281, 1341,
	1134, 1879, 1136, 537, 536, 1353, 1354, 1355, 1800, 489,
	1767, 1474, 1452, 1493, 1451, 1495, 1768, 624, 1454, 1556,
	1554, 1555, 1547, 1548, 1549, 1550, 1552, 1553, 1661, 1843,
	1477, 1470, 1509, 2151, 1923, 1133, 1399, 1679, 1467, 1311,
	2005, 1614, 1686, 1907, 492, 1613, 1520, 1576, 1711, 1633,
	1475, 1539, 2153, 1504, 1405, 1612, 1924, 1153, 1105, 1093,
	974, 975, 967, 968, 969, 970, 972, 973, 1090, 88,
	88, 611, 610, 603, 850, 600, 599, 598, 597, 1310,
	1474, 596, 593, 1642, 535, 528, 1577, 1030, 1579, 1580,
	1581, 909, 2101, 2064, 88, 1791, 1623, 1621, 88, 1477,
	88, 1601, 1456, 1197, 1189, 1374, 1131, 88, 807, 1598,
	554, 1472, 805, 802, 797, 773, 673, 1667, 769, 1475,
	88, 1605, 1476, 88, 1622, 761, 1624, 1639, 1725, 1458,
	1958, 2136, 636, 310, 1473, 88, 1664, 585, 1626, 502,
	534, 1632, 81, 1207, 533, 305, 25, 1673, 893, 85,
	85, 282, 65, 304, 24, 3, 1696, 1643, 1693, 1637,
	1960, 1644, 409, 410, 411, 1387, 1672, 428, 1426, 1086,
	441, 1697, 1645, 1120, 1217, 1654, 1656, 1657, 428, 441,
	2022, 1681, 1640, 88, 1684, 1662, 498, 498, 1674, 1810,
	282, 1476, 1070, 282, 282, 517, 282, 555, 1085, 85,
	524, 637, 1208, 1730, 1731, 1732, 1685, 589, 503, 1374,
	465, 556, 1689, 1690, 2059, 303, 23, 1680, 586, 302,
	11, 25, 640, 1714, 1217, 522, 525, 1217, 950, 24,
	526, 510, 1091, 306, 10, 296, 9, 1070, 1508, 1721,
	1088, 963, 964, 1083, 848, 848, 1511, 2045, 295, 7,
	88, 88, 88, 1848, 1724, 414, 1192, 847, 847, 1740,
	1188, 1743, 297, 4, 1527, 1528, 1738, 88, 1745, 468,
	469, 1114, 88, 958, 88, 865, 88, 88, 88, 1614,
	813, 88, 88, 1613, 554, 1773, 1815, 965, 821, 1140,
	311, 23, 2160, 1612, 1774, 11, 1814, 1571, 2161, 1545,
	1546, 1811, 963, 964, 312, 425, 2094, 1790, 1584, 10,
	2048, 9, 963, 964, 1165, 1164, 88, 88, 1787, 821,
	821, 1875, 1786, 554, 7, 966, 1658, 1614, 821, 821,
	1649, 1613, 1614, 88, 88, 1846, 1613, 88, 4, 1591,
	1165, 1612, 1429, 1361, 1844, 554, 1612, 88, 965, 1849,
	1628, 1358, 1629, 311, 88, 1357, 848, 1831, 1838, 1874,
	1854, 821, 820, 820, 1307, 1166, 1017, 312, 1895, 847,
	1873, 2080, 1957, 1733, 1453, 1027, 1847, 1025, 1855, 1853,
	1824, 1883, 849, 475, 1931, 416, 1830, 88, 311, 908,
	594, 1869, 1691, 2096, 1860, 1861, 1900, 1531, 1866, 1975,
	2001, 492, 312, 552, 282, 540, 282, 441, 441, 1872,
	1309, 817, 1028, 41, 1610, 667, 1792, 1604, 1183, 848,
	1182, 313, 894, 689, 879, 1318, 1223, 744, 691, 818,
	1887, 692, 847, 819, 1056, 679, 816, 1217, 1217, 1118,
	1279, 1217, 88, 1700, 88, 1298, 310, 88, 1519, 1021,
	659, 671, 670, 1295, 1906, 88, 560, 1876, 54, 575,
	848, 310, 435, 1411, 861, 1834, 946, 1837, 1198, 943,
	1718, 1614, 1620, 847, 820, 1613, 850, 850, 480, 1542,
	562, 1339, 1331, 1328, 1921, 1612, 88, 618, 1918, 750,
	1009, 1935, 555, 1119, 1937, 821, 1953, 1919, 587, 1936,
	1417, 88, 1934, 1139, 554, 1959, 556, 645, 88, 1614,
	954, 501, 789, 1613, 500, 1178, 88, 584, 872, 1158,
	1002, 999, 470, 1612, 88, 1952, 1966, 2014, 1190, 564,
	1372, 2156, 1771, 88, 88, 2021, 1987, 820, 1617, 1961,
	2073, 1973, 72, 1781, 569, 2030, 1985, 441, 441, 1974,
	1955, 555, 1994, 1978, 1995, 1992, 1398, 1982, 29, 1929,
	1972, 26, 21, 1946, 1947, 556, 1222, 1741, 19, 18,
	28, 17, 27, 2000, 88, 1222, 1746, 1981, 820, 15,
	14, 13, 12, 40, 2016, 39, 38, 37, 850, 428,
	36, 35, 282, 6, 441, 622, 441, 5, 625, 88,
	88, 2, 2010, 1, 821, 1971, 0, 0, 1777, 0,
	2011, 88, 0, 498, 0, 88, 2019, 0, 0, 0,
	1217, 0, 2039, 554, 282, 0, 2037, 0, 2007, 2018,
	88, 2040, 1333, 0, 0, 0, 88, 0, 85, 0,
	1859, 2043, 310, 88, 88, 0, 0, 282, 2049, 2046,
	0, 850, 282, 282, 282, 2054, 795, 2047, 0, 65,
	2042, 2051, 0, 2055, 0, 2050, 88, 0, 88, 0,
	492, 88, 0, 310, 1969, 282, 282, 0, 2058, 0,
	2052, 0, 0, 85, 0, 85, 0, 2069, 0, 0,
	441, 2084, 850, 821, 2086, 88, 0, 2079, 88, 2085,
	2082, 2070, 0, 0, 2089, 1614, 0, 441, 0, 1613,
	441, 2075, 85, 441, 441, 441, 441, 441, 2092, 1612,
	916, 2090, 2087, 2088, 2061, 441, 441, 0, 0, 0,
	0, 0, 88, 428, 88, 0, 0, 2111, 0, 2118,
	0, 937, 0, 2116, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 2117, 0, 2115, 2129, 0, 0, 0,
	498, 2133, 2131, 524, 0, 0, 0, 2137, 2120, 0,
	0, 88, 0, 1939, 0, 2072, 0, 2143, 0, 0,
	2141, 0, 2139, 2142, 849, 849, 848, 0, 0, 821,
	2155, 2154, 0, 0, 0, 2159, 0, 0, 0, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	415, 0, 2164, 817, 817, 0, 0, 848, 848, 0,
	0, 0, 0, 0, 0, 0, 848, 848, 0, 0,
	847, 847, 0, 0, 0, 0, 1120, 0, 0, 847,
	847, 0, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 1945, 0, 0, 0, 0, 418, 0, 0, 848,
	0, 556, 0, 0, 0, 0, 282, 1333, 1333, 0,
	311, 0, 847, 0, 1075, 0, 0, 423, 282, 0,
	0, 0, 419, 0, 312, 0, 282, 1096, 1506, 1507,
	282, 0, 0, 0, 0, 0, 849, 1102, 0, 0,
	0, 0, 0, 0, 820, 0, 0, 420, 0, 0,
	0, 282, 0, 1122, 1123, 0, 282, 0, 0, 282,
	0, 441, 441, 0, 441, 817, 422, 0, 1333, 1333,
	1333, 0, 668, 52, 0, 820, 820, 0, 0, 0,
	0, 0, 0, 0, 820, 820, 0, 0, 0, 1568,
	1569, 1570, 0, 0, 0, 0, 0, 0, 0, 849,
	0, 0, 0, 0, 0, 649, 649, 0, 1545, 1546,
	0, 1563, 1564, 1565, 752, 0, 52, 820, 0, 0,
	0, 1545, 1546, 0, 0, 2076, 2077, 2078, 817, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 485, 0,
	849, 493, 0, 0, 0, 0, 847, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 850, 2099,
	1560, 555, 0, 0, 0, 0, 1169, 421, 0, 817,
	0, 0, 1545, 1546, 0, 556, 0, 282, 282, 282,
	0, 0, 0, 0, 282, 1179, 0, 0, 0, 850,
	850, 524, 0, 0, 0, 0, 0, 0, 850, 850,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 0, 0, 556, 0, 0, 424, 0, 282,
	0, 0, 555, 1551, 0, 0, 0, 1333, 1333, 0,
	0, 850, 0, 0, 0, 0, 556, 944, 0, 949,
	0, 0, 848, 0, 0, 956, 0, 0, 1709, 1710,
	0, 820, 0, 0, 0, 847, 0, 1003, 1004, 1005,
	1006, 1007, 0, 1561, 0, 0, 0, 1015, 0, 0,
	0, 0, 0, 0, 1551, 0, 1561, 1022, 0, 0,
	0, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	0, 1333, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 0, 1769, 311, 282, 1367, 1368, 1561, 0, 0,
	1075, 848, 1562, 1375, 0, 0, 0, 312, 311, 1380,
	1381, 1383, 1385, 1386, 847, 1562, 0, 0, 0, 0,
	0, 1393, 312, 0, 1395, 282, 0, 0, 0, 0,
	820, 0, 0, 0, 282, 850, 493, 0, 0, 282,
	0, 1415, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 555, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 556, 1562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1545, 1546, 0, 1169,
	1169, 0, 1557, 1558, 1559, 0, 0, 1556, 1554, 1555,
	1547, 1548, 1549, 1550, 1552, 1553, 0, 848, 0, 0,
	1556, 1554, 1555, 1547, 1548, 1549, 1550, 1552, 1553, 0,
	847, 0, 937, 0, 937, 0, 441, 0, 0, 820,
	282, 0, 0, 0, 1461, 0, 0, 1545, 1546, 0,
	1563, 1564, 1565, 0, 0, 0, 849, 0, 0, 0,
	0, 0, 0, 1885, 850, 0, 0, 282, 0, 0,
	0, 0, 1554, 1555, 1547, 1548, 1549, 1550, 1552, 1553,
	0, 0, 0, 0, 0, 817, 0, 849, 849, 0,
	555, 0, 0, 0, 0, 0, 849, 849, 1551, 1560,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 817, 817, 0, 0,
	0, 0, 0, 312, 0, 817, 817, 1333, 0, 849,
	0, 0, 0, 0, 0, 820, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 1928, 1551,
	0, 1561, 0, 850, 312, 0, 649, 485, 817, 0,
	0, 0, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1566, 1259, 0, 1261, 1262, 1263,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1561, 0, 0, 0, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1562, 0, 0, 0, 1609, 0, 0, 0, 1315, 1316,
	0, 1333, 1329, 0, 1340, 1342, 1347, 1350, 1351, 1352,
	0, 0, 0, 0, 0, 1802, 0, 0, 1795, 850,
	0, 0, 2004, 0, 0, 0, 1793, 0, 0, 752,
	1797, 0, 0, 849, 0, 282, 282, 0, 0, 0,
	0, 1562, 0, 0, 0, 0, 0, 0, 1803, 0,
	0, 0, 0, 0, 1545, 1546, 0, 1563, 1564, 1565,
	1659, 0, 817, 0, 1075, 0, 937, 0, 485, 1796,
	1884, 485, 485, 1669, 1409, 0, 0, 1555, 1547, 1548,
	1549, 1550, 1552, 1553, 0, 0, 282, 0, 0, 282,
	0, 0, 0, 1012, 0, 1014, 0, 0, 0, 1333,
	0, 1704, 1018, 0, 0, 0, 1560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	2060, 1557, 1558, 1559, 0, 0, 1556, 1554, 1555, 1547,
	1548, 1549, 1550, 1552, 1553, 0, 0, 0, 0, 1798,
	0, 1799, 849, 0, 0, 0, 0, 0, 0, 1735,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 1801,
	956, 817, 0, 0, 0, 0, 0, 1804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1566, 0, 0, 0, 0, 52, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1561,
	0, 0, 0, 0, 0, 0, 1788, 1789, 1075, 1490,
	1491, 0, 0, 0, 52, 1496, 52, 0, 0, 0,
	0, 849, 1609, 524, 0, 0, 0, 0, 1822, 0,
	1823, 52, 282, 1825, 1826, 0, 52, 1829, 282, 1800,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	817, 0, 0, 0, 0, 1522, 0, 0, 1526, 0,
	0, 0, 0, 0, 0, 0, 0, 1535, 1562, 0,
	1609, 0, 524, 1179, 0, 1609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	282, 0, 1015, 282, 0, 0, 0, 0, 1347, 1347,
	1347, 0, 0, 1704, 0, 0, 0, 0, 0, 0,
	1881, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1901, 0, 0, 817, 0, 1557, 1558,
	1559, 0, 0, 1556, 1554, 1555, 1547, 1548, 1549, 1550,
	1552, 1553, 0, 649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	1920, 0, 0, 1922, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 1609, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 963, 964, 0, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 1954,
	0, 986, 524, 0, 1707, 0, 0, 1708, 966, 0,
	0, 997, 1609, 0, 0, 0, 0, 282, 0, 1713,
	0, 0, 0, 0, 1977, 0, 0, 0, 1722, 0,
	0, 965, 282, 0, 0, 0, 1726, 980, 0, 1435,
	1704, 0, 0, 0, 0, 0, 0, 0, 0, 524,
	1704, 0, 0, 0, 1742, 0, 0, 0, 1744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	937, 1775, 1776, 0, 0, 493, 0, 0, 0, 0,
	1782, 1783, 1784, 0, 0, 0, 990, 998, 0, 0,
	0, 0, 0, 0, 0, 2023, 2024, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 1812, 2035, 0, 0,
	0, 2036, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 524, 0, 0, 0,
	0, 0, 1704, 0, 0, 0, 0, 0, 0, 1704,
	524, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 2068, 0, 524, 0, 0, 282, 0, 0,
	0, 0, 52, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 1609, 982,
	0, 1977, 1545, 1546, 1704, 1563, 1564, 1565, 0, 0,
	0, 0, 0, 0, 991, 0, 1886, 0, 1716, 0,
	1889, 1890, 0, 0, 0, 1892, 0, 0, 0, 0,
	0, 1277, 1894, 0, 1896, 0, 0, 0, 282, 0,
	524, 0, 1902, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 1560, 0, 0, 0, 2130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1911, 989, 1704, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 0, 0, 0, 0, 0,
	1914, 0, 0, 0, 1551, 0, 0, 0, 0, 0,
	1014, 0, 963, 964, 0, 983, 984, 985, 993, 994,
	995, 0, 0, 0, 1944, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 997, 1566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1561, 965, 0,
	0, 0, 0, 0, 980, 0, 0, 0, 0, 1980,
	0, 0, 963, 964, 0, 983, 984, 985, 993, 994,
	995, 0, 0, 0, 0, 0, 0, 0, 986, 1996,
	1997, 0, 1218, 0, 0, 966, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 965, 2009,
	0, 0, 0, 0, 980, 0, 1562, 0, 0, 0,
	0, 0, 2013, 990, 998, 0, 0, 0, 0, 0,
	0, 0, 1218, 0, 0, 1218, 0, 0, 0, 996,
	0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 988, 0, 0, 0, 0, 0, 981, 752, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 1545, 1546, 0, 1563, 1564, 1565, 0,
	0, 0, 987, 990, 998, 0, 0, 0, 0, 1715,
	0, 0, 0, 0, 0, 0, 1557, 1558, 1559, 996,
	0, 1556, 1554, 1555, 1547, 1548, 1549, 1550, 1552, 1553,
	0, 988, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 1560, 982, 0, 0, 0,
	0, 963, 964, 0, 983, 984, 985, 993, 994, 995,
	0, 991, 987, 0, 0, 0, 0, 0, 1545, 1546,
	0, 1563, 1564, 1565, 966, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2112,
	0, 0, 0, 0, 0, 1551, 0, 965, 0, 0,
	0, 0, 0, 980, 0, 0, 982, 0, 0, 0,
	0, 0, 2128, 2128, 0, 0, 0, 0, 0, 0,
	1560, 991, 0, 989, 52, 0, 977, 978, 979, 992,
	1566, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	2128, 0, 0, 0, 0, 0, 0, 1587, 1561, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 442, 1218, 1218, 0, 0, 1218,
	1551, 0, 990, 998, 0, 2128, 0, 493, 0, 0,
	0, 0, 443, 989, 0, 0, 977, 978, 979, 992,
	1567, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	988, 0, 0, 0, 0, 1566, 981, 1586, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 1562, 0, 447,
	0, 0, 0, 1561, 452, 453, 0, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	446, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 1562, 0, 450, 451, 0, 1557, 1558, 1559,
	0, 0, 1556, 1554, 1555, 1547, 1548, 1549, 1550, 1552,
	1553, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 456, 1962, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1218, 0,
	0, 0, 989, 0, 0, 977, 978, 979, 992, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 455,
	0, 0, 1557, 1558, 1559, 0, 0, 1556, 1554, 1555,
	1547, 1548, 1549, 1550, 1552, 1553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 457, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 458, 0, 463,
	0, 0, 0, 459, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 462, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	90, 91, 328, 92, 329, 330, 331, 332, 228, 333,
	334, 335, 336, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 337, 97, 235, 236, 98, 338, 339,
	237, 238, 239, 340, 99, 240, 341, 314, 342, 100,
	101, 102, 0, 103, 343, 104, 105, 106, 344, 315,
	107, 108, 345, 346, 347, 348, 349, 350, 109, 110,
	283, 111, 241, 112, 242, 243, 351, 113, 352, 114,
	353, 354, 355, 115, 116, 356, 117, 357, 0, 358,
	244, 118, 119, 120, 245, 246, 359, 360, 361, 121,
	122, 247, 0, 123, 362, 124, 363, 364, 316, 365,
	125, 248, 366, 249, 367, 126, 127, 128, 129, 250,
	251, 318, 368, 133, 369, 130, 370, 317, 131, 252,
	132, 253, 254, 255, 371, 256, 372, 319, 134, 320,
	135, 136, 373, 138, 137, 374, 257, 321, 139, 322,
	375, 140, 376, 377, 141, 0, 142, 143, 144, 146,
	258, 145, 323, 147, 148, 150, 149, 378, 379, 380,
	259, 151, 260, 152, 153, 381, 154, 382, 383, 155,
	384, 385, 156, 261, 324, 157, 325, 262, 158, 159,
	160, 161, 386, 263, 162, 264, 163, 387, 164, 165,
	166, 167, 265, 168, 169, 388, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 389, 181, 326,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 390,
	267, 192, 193, 194, 391, 195, 185, 186, 196, 327,
	197, 268, 269, 198, 392, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 393, 205, 394, 206, 207, 208,
	209, 210, 395, 272, 273, 274, 396, 397, 211, 275,
	276, 398, 212, 213, 214, 215, 399, 400, 216, 217,
	218, 401, 219, 402, 277, 220, 221, 222, 278, 279,
	403, 404, 223, 405, 406, 407, 408, 224, 225, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 0, 0, 1698,
	0, 0, 0, 0, 0, 0, 0, 1699, 90, 91,
	328, 92, 329, 330, 331, 332, 228, 333, 334, 335,
	336, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 337, 97, 235, 236, 98, 338, 339, 237, 238,
	239, 340, 99, 240, 341, 314, 342, 100, 101, 102,
	0, 103, 343, 104, 105, 106, 344, 315, 107, 108,
	345, 346, 347, 348, 349, 350, 109, 110, 283, 111,
	241, 112, 242, 243, 351, 113, 352, 114, 353, 354,
	355, 115, 116, 356, 117, 357, 0, 358, 244, 118,
	119, 120, 245, 246, 359, 360, 361, 121, 122, 247,
	0, 123, 362, 124, 363, 364, 316, 365, 125, 248,
	366, 249, 367, 126, 127, 128, 129, 250, 251, 318,
	368, 133, 369, 130, 370, 317, 131, 252, 132, 253,
	254, 255, 371, 256, 372, 319, 134, 320, 135, 136,
	373, 138, 137, 374, 257, 321, 139, 322, 375, 140,
	376, 377, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 378, 379, 380, 259, 151,
	260, 152, 153, 381, 154, 382, 383, 155, 384, 385,
	156, 261, 324, 157, 325, 262, 158, 159, 160, 161,
	386, 263, 162, 264, 163, 387, 164, 165, 166, 167,
	265, 168, 169, 388, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 389, 181, 326, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 390, 267, 192,
	193, 194, 391, 195, 185, 186, 196, 327, 197, 268,
	269, 198, 392, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 393, 205, 394, 206, 207, 208, 209, 210,
	395, 272, 273, 274, 396, 397, 211, 275, 276, 398,
	212, 213, 214, 215, 399, 400, 216, 217, 218, 401,
	219, 402, 277, 220, 221, 222, 278, 279, 403, 404,
	223, 405, 406, 407, 408, 224, 225, 226, 227, 0,
	0, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2053, 90, 91,
	328, 92, 329, 330, 331, 332, 228, 333, 334, 335,
	336, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 337, 97, 235, 236, 98, 338, 339, 237, 238,
	239, 340, 99, 240, 341, 314, 342, 100, 101, 102,
	0, 103, 343, 104, 105, 106, 344, 315, 107, 108,
	345, 346, 347, 348, 349, 350, 109, 110, 283, 111,
	241, 112, 242, 243, 351, 113, 352, 114, 353, 354,
	355, 115, 116, 356, 117, 357, 0, 358, 244, 118,
	119, 120, 245, 246, 359, 360, 361, 121, 122, 247,
	0, 123, 362, 124, 363, 364, 316, 365, 125, 248,
	366, 249, 367, 126, 127, 128, 129, 250, 251, 318,
	368, 133, 369, 130, 370, 317, 131, 252, 132, 253,
	254, 255, 371, 256, 372, 319, 134, 320, 135, 136,
	373, 138, 137, 374, 257, 321, 139, 322, 375, 140,
	376, 377, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 378, 379, 380, 259, 151,
	260, 152, 153, 381, 154, 382, 383, 155, 384, 385,
	156, 261, 324, 157, 325, 262, 158, 159, 160, 161,
	386, 263, 162, 264, 163, 387, 164, 165, 166, 167,
	265, 168, 169, 388, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 389, 181, 326, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 390, 267, 192,
	193, 194, 391, 195, 185, 186, 196, 327, 197, 268,
	269, 198, 392, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 393, 205, 394, 206, 207, 208, 209, 210,
	395, 272, 273, 274, 396, 397, 211, 275, 276, 398,
	212, 213, 214, 215, 399, 400, 216, 217, 218, 401,
	219, 402, 277, 220, 221, 222, 278, 279, 403, 404,
	223, 405, 406, 407, 408, 224, 225, 226, 227, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 782, 0, 0, 90, 91, 328, 92, 329,
	330, 331, 332, 228, 333, 334, 335, 336, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 337, 97,
	235, 236, 98, 338, 339, 237, 238, 239, 340, 99,
	240, 341, 314, 342, 100, 101, 102, 0, 103, 343,
	104, 105, 106, 344, 315, 107, 108, 345, 346, 347,
	348, 349, 350, 109, 110, 283, 111, 241, 112, 242,
	243, 351, 113, 352, 114, 353, 354, 355, 115, 116,
	356, 117, 357, 0, 358, 244, 118, 119, 120, 245,
	246, 359, 360, 361, 121, 122, 247, 0, 123, 362,
	124, 363, 364, 316, 365, 125, 248, 366, 249, 367,
	126, 127, 128, 129, 250, 251, 318, 368, 133, 369,
	130, 370, 317, 131, 252, 132, 253, 254, 255, 371,
	256, 372, 319, 134, 320, 135, 136, 373, 138, 137,
	374, 257, 321, 139, 322, 375, 140, 376, 377, 141,
	0, 142, 143, 144, 146, 258, 145, 323, 147, 148,
	150, 149, 378, 379, 380, 259, 151, 260, 152, 153,
	381, 154, 382, 383, 155, 384, 385, 156, 261, 324,
	157, 325, 262, 158, 159, 160, 161, 386, 263, 162,
	264, 163, 387, 164, 165, 166, 167, 265, 168, 169,
	388, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 389, 181, 326, 182, 183, 266, 184, 0,
	188, 189, 190, 191, 390, 267, 192, 193, 194, 391,
	195, 185, 186, 196, 327, 197, 268, 269, 198, 392,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 393,
	205, 394, 206, 207, 208, 209, 210, 395, 272, 273,
	274, 396, 397, 211, 275, 276, 398, 212, 213, 214,
	215, 399, 400, 216, 217, 218, 401, 219, 402, 277,
	220, 221, 222, 278, 279, 403, 404, 223, 405, 406,
	407, 408, 224, 225, 226, 227, 687, 676, 677, 674,
	675, 666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	703, 669, 0, 0, 0, 93, 94, 95, 229, 718,
	231, 719, 96, 720, 721, 0, 97, 235, 236, 98,
	672, 702, 722, 723, 239, 0, 99, 714, 0, 695,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 315, 107, 108, 0, 696, 698, 0, 697, 699,
	109, 110, 283, 111, 724, 112, 725, 726, 753, 113,
	0, 114, 0, 0, 0, 717, 116, 0, 117, 0,
	0, 0, 660, 118, 119, 120, 704, 705, 683, 0,
	0, 121, 122, 727, 0, 123, 0, 124, 0, 0,
	316, 0, 125, 715, 0, 249, 0, 126, 127, 128,
	129, 711, 713, 318, 0, 133, 0, 130, 0, 317,
	131, 728, 132, 729, 730, 731, 0, 694, 0, 319,
	134, 320, 135, 136, 0, 138, 137, 0, 716, 321,
	139, 322, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 323, 147, 148, 150, 149, 655,
	0, 684, 712, 151, 732, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 324, 157, 325, 706,
	158, 159, 160, 161, 0, 707, 162, 264, 163, 0,
	164, 165, 166, 167, 733, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 326, 182, 183, 661, 184, 0, 188, 189, 190,
	191, 71, 267, 192, 193, 194, 700, 195, 185, 186,
	196, 327, 197, 734, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 735, 202, 708, 0, 205, 73, 206,
	207, 208, 209, 210, 0, 272, 736, 737, 0, 0,
	211, 709, 710, 682, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 701, 219, 0, 277, 220, 221, 222,
	557, 738, 0, 0, 223, 0, 0, 0, 69, 224,
	225, 226, 227, 656, 70, 0, 0, 0, 0, 654,
	0, 0, 0, 0, 652, 653, 687, 676, 677, 674,
	675, 666, 0, 662, 0, 0, 0, 0, 665, 0,
	0, 0, 90, 91, 1304, 92, 0, 0, 0, 0,
	703, 669, 0, 0, 0, 93, 94, 95, 229, 718,
	231, 719, 96, 720, 721, 0, 97, 235, 236, 98,
	672, 702, 722, 723, 239, 0, 99, 714, 0, 695,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 315, 107, 108, 0, 696, 698, 0, 697, 699,
	109, 110, 283, 111, 724, 112, 725, 726, 0, 113,
	0, 114, 0, 1305, 0, 717, 116, 0, 117, 0,
	0, 0, 660, 118, 119, 120, 704, 705, 683, 0,
	0, 121, 122, 727, 0, 123, 0, 124, 0, 0,
	316, 0, 125, 715, 0, 249, 0, 126, 127, 128,
	129, 711, 713, 318, 0, 133, 0, 130, 0, 317,
	131, 728, 132, 729, 730, 731, 0, 694, 0, 319,
	134, 320, 135, 136, 0, 138, 137, 0, 716, 321,
	139, 322, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 323, 147, 148, 150, 149, 655,
	0, 684, 712, 151, 732, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 324, 157, 325, 706,
	158, 159, 160, 161, 0, 707, 162, 264, 163, 0,
	164, 165, 166, 167, 733, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 326, 182, 183, 661, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 700, 195, 185, 186,
	196, 327, 197, 734, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 735, 202, 708, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 736, 737, 0, 0,
	211, 709, 710, 682, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 701, 219, 0, 277, 220, 221, 222,
	278, 738, 1303, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 656, 0, 0, 0, 0, 0, 654,
	0, 0, 0, 0, 652, 653, 1306, 687, 676, 677,
	674, 675, 666, 662, 1301, 0, 0, 0, 665, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 703, 669, 0, 0, 0, 93, 94, 95, 229,
	718, 231, 719, 96, 720, 721, 0, 97, 235, 236,
	98, 672, 702, 722, 723, 239, 0, 99, 714, 0,
	695, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 315, 107, 108, 0, 696, 698, 0, 697,
	699, 109, 110, 283, 111, 724, 112, 725, 726, 0,
	113, 0, 114, 0, 0, 0, 717, 116, 0, 117,
	0, 0, 0, 660, 118, 119, 120, 704, 705, 683,
	0, 0, 121, 122, 727, 0, 123, 0, 124, 0,
	0, 316, 0, 125, 715, 0, 249, 0, 126, 127,
	128, 129, 711, 713, 318, 0, 133, 0, 130, 0,
	317, 131, 728, 132, 729, 730, 731, 0, 694, 0,
	319, 134, 320, 135, 136, 0, 138, 137, 0, 716,
	321, 139, 322, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 323, 147, 148, 150, 149,
	655, 0, 684, 712, 151, 732, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 324, 157, 325,
	706, 158, 159, 160, 161, 0, 707, 162, 264, 163,
	0, 164, 165, 166, 167, 733, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 326, 182, 183, 661, 184, 0, 188, 189,
	190, 191, 71, 267, 192, 193, 194, 700, 195, 185,
	186, 196, 327, 197, 734, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 735, 202, 708, 0, 205, 73,
	206, 207, 208, 209, 210, 0, 272, 736, 737, 0,
	0, 211, 709, 710, 682, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 701, 219, 0, 277, 220, 221,
	222, 557, 738, 0, 0, 223, 0, 0, 0, 69,
	224, 225, 226, 227, 656, 70, 0, 0, 0, 0,
	654, 0, 0, 0, 0, 652, 653, 687, 676, 677,
	674, 675, 666, 0, 662, 0, 0, 0, 0, 665,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 703, 669, 0, 0, 0, 93, 94, 95, 229,
	718, 231, 719, 96, 720, 721, 1343, 97, 235, 236,
	98, 672, 702, 722, 723, 239, 0, 99, 714, 0,
	695, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 315, 107, 108, 0, 696, 698, 0, 697,
	699, 109, 110, 283, 111, 724, 112, 725, 726, 0,
	113, 0, 114, 0, 0, 0, 717, 116, 0, 117,
	0, 0, 0, 660, 118, 119, 120, 704, 705, 683,
	0, 0, 121, 122, 727, 0, 123, 0, 124, 0,
	1348, 316, 0, 125, 715, 0, 249, 0, 126, 127,
	128, 129, 711, 713, 318, 0, 133, 0, 130, 0,
	317, 131, 728, 132, 729, 730, 731, 0, 694, 0,
	319, 134, 320, 135, 136, 0, 138, 137, 1344, 716,
	321, 139, 322, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 323, 147, 148, 150, 149,
	655, 0, 684, 712, 151, 732, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 324, 157, 325,
	706, 158, 159, 160, 161, 0, 707, 162, 264, 163,
	0, 164, 165, 166, 167, 733, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 326, 182, 183, 661, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 700, 195, 185,
	186, 196, 327, 197, 734, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 735, 202, 708, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 736, 737, 0,
	1345, 211, 709, 710, 682, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 701, 219, 0, 277, 220, 221,
	222, 278, 738, 0, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 656, 0, 0, 0, 0, 0,
	654, 0, 0, 0, 0, 652, 653, 687, 676, 677,
	674, 675, 666, 0, 662, 0, 0, 0, 0, 665,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 703, 669, 0, 0, 0, 93, 94, 95, 229,
	718, 231, 719, 96, 720, 721, 0, 97, 235, 236,
	98, 672, 702, 722, 723, 239, 0, 99, 714, 0,
	695, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 315, 107, 108, 0, 696, 698, 0, 697,
	699, 109, 110, 283, 111, 724, 112, 725, 726, 0,
	113, 0, 114, 0, 0, 0, 717, 116, 0, 117,
	0, 0, 0, 660, 118, 119, 120, 704, 705, 683,
	0, 0, 121, 122, 727, 0, 123, 0, 124, 0,
	0, 316, 0, 125, 715, 0, 249, 0, 126, 127,
	128, 129, 711, 713, 318, 0, 133, 0, 130, 0,
	317, 131, 728, 132, 729, 730, 731, 0, 694, 0,
	319, 134, 320, 135, 136, 0, 138, 137, 0, 716,
	321, 139, 322, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 323, 147, 148, 150, 149,
	655, 1638, 684, 712, 151, 732, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 324, 157, 325,
	706, 158, 159, 160, 161, 0, 707, 162, 264, 163,
	0, 164, 165, 166, 167, 733, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 326, 182, 183, 661, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 700, 195, 185,
	186, 196, 327, 197, 734, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 735, 202, 708, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 736, 737, 0,
	0, 211, 709, 710, 682, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 701, 219, 0, 277, 220, 221,
	222, 278, 738, 0, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 656, 0, 0, 0, 0, 0,
	654, 0, 0, 0, 0, 652, 653, 650, 687, 676,
	677, 674, 675, 666, 662, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 703, 669, 0, 0, 0, 93, 94, 95,
	229, 718, 231, 719, 96, 720, 721, 0, 97, 235,
	236, 98, 672, 702, 722, 723, 239, 0, 99, 714,
	0, 695, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 315, 107, 108, 0, 696, 698, 0,
	697, 699, 109, 110, 283, 111, 724, 112, 725, 726,
	0, 113, 0, 114, 0, 0, 0, 717, 116, 0,
	117, 0, 0, 0, 660, 118, 119, 120, 704, 705,
	683, 0, 0, 121, 122, 727, 0, 123, 0, 124,
	0, 0, 316, 0, 125, 715, 0, 249, 0, 126,
	127, 128, 129, 711, 713, 318, 0, 133, 0, 130,
	0, 317, 131, 728, 132, 729, 730, 731, 0, 694,
	0, 319, 134, 320, 135, 136, 0, 138, 137, 0,
	716, 321, 139, 322, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 323, 147, 148, 150,
	149, 655, 0, 684, 712, 151, 732, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 324, 157,
	325, 706, 158, 159, 160, 161, 0, 707, 162, 264,
	163, 0, 164, 165, 166, 167, 733, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 326, 182, 183, 661, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 700, 195,
	185, 186, 196, 327, 197, 734, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 735, 202, 708, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 736, 737,
	0, 0, 211, 709, 710, 682, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 701, 219, 0, 277, 220,
	221, 222, 278, 738, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 656, 0, 0, 0, 0,
	0, 654, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 0, 1020, 1296, 662, 0, 0, 0, 0,
	665, 687, 676, 677, 674, 675, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 687, 676, 677, 674, 675, 666, 0, 662, 1772,
	0, 0, 0, 665, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 1729, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 687, 676, 677, 674, 675, 666, 0, 662, 0,
	0, 0, 0, 665, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 687, 676, 677, 674, 675, 666, 0, 662, 1719,
	0, 0, 0, 665, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 753, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 687, 676, 677, 674, 675, 666, 0, 662, 0,
	0, 0, 0, 665, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 1348, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 687, 676, 677, 674, 675, 666, 0, 662, 0,
	0, 0, 0, 665, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 687, 676, 677, 674, 675, 666, 0, 662, 1291,
	0, 0, 0, 665, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 703, 669, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 656, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 0, 652,
	653, 650, 687, 676, 677, 674, 675, 666, 662, 0,
	0, 0, 0, 665, 0, 0, 0, 0, 90, 91,
	945, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 229, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 672, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 108,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 112, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 660, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 128, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 655, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	661, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 656,
	0, 0, 0, 0, 0, 654, 0, 0, 0, 0,
	652, 653, 687, 676, 677, 674, 675, 666, 0, 662,
	0, 0, 0, 0, 665, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 229, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 672, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 2127,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 112, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 660, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 128, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 655, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	661, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 2126, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 656,
	0, 0, 0, 0, 0, 654, 0, 0, 0, 0,
	652, 653, 687, 676, 677, 674, 675, 666, 0, 662,
	0, 0, 0, 0, 665, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 2125, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 672, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 2127,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 112, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 660, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 128, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 655, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	661, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 2126, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 656,
	0, 0, 0, 0, 0, 654, 0, 0, 0, 0,
	652, 653, 687, 676, 677, 674, 675, 666, 0, 662,
	0, 0, 0, 0, 665, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 229, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 672, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 108,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 112, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 660, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 128, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 655, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	661, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 656,
	0, 0, 0, 0, 0, 654, 0, 0, 0, 0,
	652, 653, 1320, 676, 677, 674, 675, 666, 0, 662,
	0, 0, 0, 0, 665, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 229, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 672, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 108,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 1323, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 660, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 1324, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 1325, 1322, 146, 258, 145,
	323, 147, 148, 150, 149, 655, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	661, 184, 0, 188, 189, 190, 1326, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 1321, 227, 656,
	0, 0, 0, 0, 0, 654, 0, 0, 0, 0,
	652, 653, 687, 676, 677, 674, 675, 666, 0, 662,
	0, 0, 0, 0, 665, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 229, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 672, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 108,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 112, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 660, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 128, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 0, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	1338, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	1334, 1335, 687, 676, 677, 674, 675, 666, 0, 1337,
	0, 0, 0, 0, 665, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 703, 669, 0, 0,
	0, 93, 94, 95, 229, 718, 231, 719, 96, 720,
	721, 0, 97, 235, 236, 98, 0, 702, 722, 723,
	239, 0, 99, 714, 0, 695, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 108,
	0, 696, 698, 0, 697, 699, 109, 110, 283, 111,
	724, 112, 725, 726, 0, 113, 0, 114, 0, 0,
	0, 717, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 704, 705, 683, 0, 0, 121, 122, 727,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 715,
	0, 249, 0, 126, 127, 128, 129, 711, 713, 318,
	0, 133, 0, 130, 0, 317, 131, 728, 132, 729,
	730, 731, 0, 694, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 716, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 0, 0, 684, 712, 151,
	732, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 706, 158, 159, 160, 161,
	0, 707, 162, 264, 163, 0, 164, 165, 166, 167,
	733, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	1338, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 700, 195, 185, 186, 196, 327, 197, 734,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 735,
	202, 708, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 736, 737, 0, 0, 211, 709, 710, 682,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 701,
	219, 0, 277, 220, 221, 222, 278, 738, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 0,
	0, 687, 676, 677, 674, 675, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 1337,
	92, 0, 0, 0, 665, 703, 669, 0, 0, 0,
	93, 94, 95, 0, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 672, 702, 722, 723, 239,
	0, 99, 714, 0, 695, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 2127, 0,
	696, 698, 0, 697, 699, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 660, 118, 119,
	120, 704, 705, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 715, 0,
	249, 0, 126, 127, 128, 129, 711, 713, 0, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 0, 134, 320, 135, 136, 0,
	138, 137, 0, 716, 321, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 655, 0, 684, 712, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 706, 158, 159, 160, 161, 0,
	707, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 661,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 700, 195, 185, 186, 196, 0, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	708, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 709, 710, 682, 212,
	213, 2126, 215, 0, 0, 216, 217, 218, 701, 219,
	0, 277, 220, 221, 222, 278, 738, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 90, 91, 0, 92, 662, 0,
	0, 0, 703, 665, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 702, 237, 238, 239, 0, 99, 714,
	0, 695, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 315, 107, 108, 0, 696, 698, 0,
	697, 699, 109, 110, 283, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 704, 705,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 316, 0, 125, 715, 0, 249, 0, 126,
	127, 128, 129, 711, 713, 318, 0, 133, 0, 130,
	0, 317, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 319, 134, 320, 135, 136, 0, 138, 137, 0,
	716, 321, 139, 322, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 323, 147, 148, 150,
	149, 0, 0, 0, 712, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 324, 157,
	325, 706, 158, 159, 160, 161, 0, 707, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 326, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 700, 195,
	185, 186, 196, 327, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 708, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 709, 710, 0, 212, 213, 214, 215,
	0, 553, 216, 217, 218, 701, 219, 0, 277, 220,
	221, 222, 278, 279, 0, 0, 223, 90, 91, 0,
	92, 224, 225, 226, 227, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 1611, 0, 237, 238, 239,
	0, 99, 240, 0, 314, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 283, 111, 241,
	112, 242, 243, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 0, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 250, 251, 318, 0,
	133, 0, 130, 0, 317, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 257, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 0, 0, 0, 259, 151, 260,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 71, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 327, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 0, 205, 73, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 275, 276, 0, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 0, 219,
	0, 277, 220, 221, 222, 557, 279, 0, 0, 223,
	0, 0, 0, 69, 224, 225, 226, 227, 0, 70,
	553, 778, 0, 889, 886, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 68, 92,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 314, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 315, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 283, 111, 241, 112,
	242, 243, 892, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 883, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 316, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 318, 0, 133,
	0, 130, 0, 317, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 319, 134, 320, 135, 136, 0, 138,
	137, 0, 257, 321, 139, 322, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 323, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 884, 0, 155, 0, 0, 156, 261,
	324, 157, 325, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 326, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 327, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 882, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 0, 219, 0,
	277, 220, 221, 222, 278, 279, 553, 778, 223, 889,
	886, 881, 0, 224, 225, 226, 227, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 890, 887,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 314,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 315, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 283, 111, 241, 112, 242, 243, 877, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 883, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	316, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 318, 0, 133, 0, 130, 0, 317,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 319,
	134, 320, 135, 136, 0, 138, 137, 0, 257, 321,
	139, 322, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 323, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 884,
	0, 155, 0, 0, 156, 261, 324, 157, 325, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 326, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 327, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 882, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 277, 220, 221, 222,
	278, 279, 553, 778, 223, 889, 886, 881, 0, 224,
	225, 226, 227, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 890, 887, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 314, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 315, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 283, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 883, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 316, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 318,
	0, 133, 0, 130, 0, 317, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 319, 134, 320, 135, 136,
	0, 138, 137, 0, 257, 321, 139, 322, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	323, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 884, 0, 155, 0, 0,
	156, 261, 324, 157, 325, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 326, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 327, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 882,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 0,
	219, 0, 277, 220, 221, 222, 278, 279, 87, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	890, 887, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 283, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 507, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 71, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	73, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 0, 219, 0, 277, 220,
	221, 222, 557, 279, 0, 0, 223, 87, 0, 0,
	69, 224, 225, 226, 227, 0, 70, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 228, 0, 1215, 0, 1220, 93, 94, 95, 229,
	230, 231, 232, 96, 233, 234, 0, 97, 235, 236,
	98, 0, 0, 237, 238, 239, 0, 99, 240, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 283, 111, 241, 112, 242, 243, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 244, 118, 119, 120, 245, 246, 0,
	0, 0, 121, 122, 247, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 248, 0, 249, 0, 126, 127,
	128, 129, 250, 251, 0, 0, 133, 0, 130, 0,
	0, 131, 252, 132, 253, 254, 255, 0, 256, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 257,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 259, 151, 260, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 0, 157, 0,
	262, 158, 159, 160, 161, 0, 263, 162, 264, 163,
	0, 164, 165, 166, 167, 265, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 0, 182, 183, 266, 184, 0, 188, 189,
	190, 191, 71, 267, 192, 193, 194, 0, 195, 185,
	186, 196, 0, 197, 268, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 270, 202, 271, 0, 205, 73,
	206, 207, 208, 209, 210, 0, 272, 273, 274, 0,
	0, 211, 275, 276, 0, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 0, 219, 0, 277, 220, 221,
	222, 557, 279, 0, 0, 223, 87, 0, 0, 69,
	224, 225, 226, 227, 0, 70, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	228, 0, 0, 0, 68, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 283, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	507, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 277, 220, 221, 222,
	278, 279, 0, 0, 223, 87, 0, 0, 0, 224,
	225, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 228,
	0, 1215, 0, 1220, 93, 94, 95, 229, 230, 231,
	232, 96, 233, 234, 0, 97, 235, 236, 98, 0,
	0, 237, 238, 239, 0, 99, 240, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 283, 111, 241, 112, 242, 243, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 244, 118, 119, 120, 245, 246, 0, 0, 0,
	121, 122, 247, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 248, 0, 249, 0, 126, 127, 128, 129,
	250, 251, 0, 0, 133, 0, 130, 0, 0, 131,
	252, 132, 253, 254, 255, 0, 256, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 257, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 259, 151, 260, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 0, 157, 0, 262, 158,
	159, 160, 161, 0, 263, 162, 264, 163, 0, 164,
	165, 166, 167, 265, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	0, 182, 183, 266, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 0, 195, 185, 186, 196,
	0, 197, 268, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 270, 202, 271, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 272, 273, 274, 0, 0, 211,
	275, 276, 0, 212, 213, 214, 215, 0, 87, 216,
	217, 218, 0, 219, 0, 277, 220, 221, 222, 278,
	279, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 786, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 283, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 87, 216, 217, 218, 0, 219, 0, 277, 220,
	221, 222, 278, 279, 0, 0, 223, 90, 91, 0,
	92, 224, 225, 226, 227, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 1121, 0, 237, 238, 239,
	0, 99, 240, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 283, 111, 241,
	112, 242, 243, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 0, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 250, 251, 0, 0,
	133, 0, 130, 0, 0, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 257, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 259, 151, 260,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 0, 157, 0, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 0, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 0, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 275, 276, 0, 212,
	213, 214, 215, 0, 87, 216, 217, 218, 0, 219,
	0, 277, 220, 221, 222, 278, 279, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 1736, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	283, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 0, 219, 0, 277, 220, 221, 222, 278, 279,
	0, 0, 223, 0, 0, 0, 0, 224, 225, 226,
	227, 687, 676, 677, 674, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 749, 0, 0, 0, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 718, 231, 719, 96, 720, 721,
	0, 97, 235, 236, 98, 0, 0, 722, 723, 239,
	0, 99, 240, 0, 314, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 315, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 283, 111, 724,
	112, 725, 726, 0, 113, 0, 114, 0, 0, 0,
	717, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 683, 0, 0, 121, 122, 727, 0,
	123, 0, 124, 0, 0, 316, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 250, 251, 318, 0,
	133, 0, 130, 0, 317, 131, 728, 132, 729, 730,
	731, 0, 694, 0, 319, 134, 320, 135, 136, 0,
	138, 137, 0, 257, 321, 139, 322, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 323,
	147, 148, 150, 149, 0, 0, 684, 259, 151, 732,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 324, 157, 325, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 733,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 326, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 327, 197, 734, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 735, 202,
	271, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 736, 737, 0, 0, 211, 275, 276, 682, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 0, 219,
	0, 277, 220, 221, 222, 278, 738, 553, 778, 223,
	0, 0, 776, 0, 224, 225, 226, 227, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 93, 94, 95, 229,
	230, 231, 232, 96, 233, 234, 0, 97, 235, 236,
	98, 0, 0, 237, 238, 239, 0, 99, 240, 0,
	314, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 315, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 283, 111, 241, 112, 242, 243, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 244, 118, 119, 120, 245, 246, 0,
	0, 0, 121, 122, 247, 0, 123, 0, 124, 0,
	0, 316, 0, 125, 248, 0, 249, 0, 126, 127,
	128, 129, 250, 251, 318, 0, 133, 0, 130, 0,
	317, 131, 252, 132, 253, 254, 255, 0, 256, 0,
	319, 134, 320, 135, 136, 0, 138, 137, 0, 257,
	321, 139, 322, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 323, 147, 148, 150, 149,
	0, 0, 0, 259, 151, 260, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 324, 157, 325,
	262, 158, 159, 160, 161, 0, 263, 162, 264, 163,
	0, 164, 165, 166, 167, 265, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 326, 182, 183, 266, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 0, 195, 185,
	186, 196, 327, 197, 268, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 270, 202, 271, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 273, 274, 0,
	0, 211, 275, 276, 0, 212, 213, 214, 215, 0,
	87, 216, 217, 218, 0, 219, 0, 277, 220, 221,
	222, 278, 279, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 83, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 82, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 0, 219, 0,
	277, 220, 221, 222, 278, 279, 0, 0, 223, 553,
	778, 0, 0, 224, 225, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	86, 0, 0, 228, 0, 0, 0, 0, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 0, 97,
	235, 236, 98, 0, 0, 237, 238, 239, 0, 99,
	240, 0, 314, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 315, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 283, 111, 241, 112, 242,
	243, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 244, 118, 119, 120, 245,
	246, 0, 0, 0, 121, 122, 247, 0, 123, 0,
	124, 0, 0, 316, 0, 125, 248, 0, 249, 0,
	126, 127, 128, 129, 250, 251, 318, 0, 133, 0,
	130, 0, 317, 131, 252, 132, 253, 254, 255, 0,
	256, 0, 319, 134, 320, 135, 136, 0, 138, 137,
	0, 257, 321, 139, 322, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 323, 147, 148,
	150, 149, 0, 0, 0, 259, 151, 260, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 324,
	157, 325, 262, 158, 159, 160, 161, 0, 263, 162,
	264, 163, 0, 164, 165, 166, 167, 265, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 326, 182, 183, 266, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 0,
	195, 185, 186, 196, 327, 197, 268, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 273,
	274, 0, 0, 211, 275, 276, 0, 212, 213, 214,
	215, 0, 87, 216, 217, 218, 0, 219, 0, 277,
	220, 221, 222, 278, 279, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 283, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 0,
	219, 0, 277, 220, 221, 222, 278, 279, 0, 553,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 86, 228, 0, 0, 0, 0, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 0, 97,
	235, 236, 98, 0, 0, 237, 238, 239, 0, 99,
	240, 0, 314, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 315, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 283, 111, 241, 112, 242,
	243, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 244, 118, 119, 120, 245,
	246, 0, 0, 0, 121, 122, 247, 0, 123, 0,
	124, 0, 0, 316, 0, 125, 248, 0, 249, 0,
	126, 127, 128, 129, 250, 251, 318, 0, 133, 0,
	130, 0, 317, 131, 252, 132, 253, 254, 255, 0,
	256, 0, 319, 134, 320, 135, 136, 0, 138, 137,
	0, 257, 321, 139, 322, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 323, 147, 148,
	150, 149, 0, 0, 0, 259, 151, 260, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 324,
	157, 325, 262, 158, 159, 160, 161, 0, 263, 162,
	264, 163, 0, 164, 165, 166, 167, 265, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 326, 182, 183, 266, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 0,
	195, 185, 186, 196, 327, 197, 268, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 273,
	274, 0, 0, 211, 275, 276, 0, 212, 213, 214,
	215, 0, 87, 216, 217, 218, 0, 219, 0, 277,
	220, 221, 222, 278, 279, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 1078, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 1076, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 283, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 1187, 0, 121, 122, 247,
	0, 123, 0, 124, 1081, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 1185, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 1080, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 1186, 216, 217, 218, 0,
	219, 0, 277, 220, 221, 222, 278, 279, 87, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 1078, 99, 240,
	0, 0, 1073, 100, 101, 102, 0, 103, 1076, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 283, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	1081, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 1072, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 1080, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 1079, 216, 217, 218, 0, 219, 0, 277, 220,
	221, 222, 278, 279, 87, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 228, 0,
	1703, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	283, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 0, 87, 216, 217,
	218, 0, 219, 0, 277, 220, 221, 222, 278, 279,
	0, 0, 223, 90, 91, 0, 92, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 93, 94, 95, 229,
	230, 231, 232, 96, 233, 234, 0, 97, 235, 236,
	98, 0, 0, 237, 238, 239, 0, 99, 240, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 283, 111, 241, 112, 242, 243, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 244, 118, 119, 120, 245, 246, 0,
	0, 0, 121, 122, 247, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 248, 0, 249, 0, 126, 127,
	128, 129, 250, 251, 0, 0, 133, 0, 130, 0,
	0, 131, 252, 132, 253, 254, 255, 0, 256, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 257,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 259, 151, 260, 152, 153, 0, 154,
	0, 507, 155, 0, 0, 156, 261, 0, 157, 0,
	262, 158, 159, 160, 161, 0, 263, 162, 264, 163,
	0, 164, 165, 166, 167, 265, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 0, 182, 183, 266, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 0, 195, 185,
	186, 196, 0, 197, 268, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 270, 202, 271, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 273, 274, 0,
	0, 211, 275, 276, 0, 212, 213, 214, 215, 0,
	87, 216, 217, 218, 0, 219, 0, 277, 220, 221,
	222, 278, 279, 0, 0, 223, 90, 91, 906, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 283, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 0, 87, 216, 217, 218, 0, 219, 0,
	277, 220, 221, 222, 278, 279, 0, 0, 223, 90,
	91, 0, 92, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 0, 0, 237,
	238, 239, 0, 99, 240, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 283,
	111, 241, 112, 242, 243, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 245, 246, 0, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	248, 0, 249, 0, 126, 127, 128, 129, 811, 251,
	0, 0, 133, 0, 130, 0, 0, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 257, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 259,
	151, 260, 152, 153, 0, 154, 0, 507, 155, 0,
	0, 156, 261, 0, 157, 0, 262, 158, 159, 160,
	161, 0, 263, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 0, 182,
	183, 266, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 0, 195, 185, 186, 196, 0, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 271, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 275, 276,
	0, 212, 213, 214, 215, 0, 87, 216, 217, 218,
	0, 219, 0, 277, 220, 221, 222, 278, 279, 0,
	0, 223, 90, 91, 565, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 283, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 87,
	216, 217, 218, 0, 219, 0, 277, 220, 221, 222,
	278, 279, 0, 0, 223, 90, 91, 0, 92, 224,
	225, 226, 227, 228, 0, 0, 0, 0, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 0, 97,
	235, 236, 98, 0, 0, 237, 238, 239, 0, 99,
	240, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 283, 111, 241, 112, 242,
	243, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 244, 118, 119, 120, 245,
	246, 0, 0, 0, 121, 122, 247, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 248, 0, 249, 0,
	126, 127, 128, 129, 519, 251, 0, 0, 133, 0,
	130, 0, 0, 131, 252, 132, 253, 254, 255, 0,
	256, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 257, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 259, 151, 260, 152, 153,
	0, 154, 0, 507, 155, 0, 0, 156, 261, 0,
	157, 0, 262, 158, 159, 160, 161, 0, 263, 162,
	264, 163, 0, 164, 165, 166, 167, 265, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 0, 182, 183, 266, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 0,
	195, 185, 186, 196, 0, 197, 268, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 273,
	274, 0, 0, 211, 275, 276, 0, 212, 213, 214,
	215, 0, 87, 216, 217, 218, 0, 219, 0, 277,
	220, 221, 222, 278, 279, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 283, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 512, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 507, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 87, 216, 217, 218, 0,
	219, 0, 277, 220, 221, 222, 278, 279, 0, 0,
	223, 90, 91, 413, 92, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 93, 94, 95, 229, 230, 231,
	232, 96, 233, 234, 0, 97, 235, 236, 98, 0,
	0, 237, 238, 239, 0, 99, 240, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 283, 111, 241, 112, 242, 243, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 244, 118, 119, 120, 245, 246, 0, 0, 0,
	121, 122, 247, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 248, 0, 249, 0, 126, 127, 128, 129,
	250, 251, 0, 0, 133, 0, 130, 0, 0, 131,
	252, 132, 253, 254, 255, 0, 256, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 257, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 259, 151, 260, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 0, 157, 0, 262, 158,
	159, 160, 161, 0, 263, 162, 264, 412, 0, 164,
	165, 166, 167, 265, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	0, 182, 183, 266, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 0, 195, 185, 186, 196,
	0, 197, 268, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 270, 202, 271, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 272, 273, 274, 0, 0, 211,
	275, 276, 0, 212, 213, 214, 215, 0, 87, 216,
	217, 218, 0, 219, 0, 277, 220, 221, 222, 278,
	279, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 283, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 87, 216, 217, 218, 0, 219, 0, 277, 220,
	221, 222, 278, 279, 0, 0, 223, 90, 91, 0,
	92, 224, 225, 226, 227, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 0, 0, 237, 238, 239,
	0, 99, 240, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 283, 111, 241,
	112, 242, 243, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 0, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 1384, 251, 0, 0,
	133, 0, 130, 0, 0, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 257, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 259, 151, 260,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 0, 157, 0, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 0, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 0, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 275, 276, 0, 212,
	213, 214, 215, 0, 87, 216, 217, 218, 0, 219,
	0, 277, 220, 221, 222, 278, 279, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	283, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 1382,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 0, 87, 216, 217,
	218, 0, 219, 0, 277, 220, 221, 222, 278, 279,
	0, 0, 223, 90, 91, 0, 92, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 93, 94, 95, 229,
	230, 231, 232, 96, 233, 234, 0, 97, 235, 236,
	98, 0, 0, 237, 238, 239, 0, 99, 240, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 283, 111, 241, 112, 242, 243, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 244, 118, 119, 120, 245, 246, 0,
	0, 0, 121, 122, 247, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 248, 0, 249, 0, 126, 127,
	128, 129, 1371, 251, 0, 0, 133, 0, 130, 0,
	0, 131, 252, 132, 253, 254, 255, 0, 256, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 257,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 259, 151, 260, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 0, 157, 0,
	262, 158, 159, 160, 161, 0, 263, 162, 264, 163,
	0, 164, 165, 166, 167, 265, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 0, 182, 183, 266, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 0, 195, 185,
	186, 196, 0, 197, 268, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 270, 202, 271, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 273, 274, 0,
	0, 211, 275, 276, 0, 212, 213, 214, 215, 0,
	87, 216, 217, 218, 0, 219, 0, 277, 220, 221,
	222, 278, 279, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 283, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 936, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 0, 87, 216, 217, 218, 0, 219, 0,
	277, 220, 221, 222, 278, 279, 0, 0, 223, 90,
	91, 0, 92, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 0, 0, 237,
	238, 239, 0, 99, 240, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 283,
	111, 241, 112, 242, 243, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 245, 246, 0, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	248, 0, 249, 0, 126, 127, 128, 129, 250, 251,
	0, 0, 133, 0, 130, 0, 0, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 257, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 259,
	151, 260, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 0, 157, 0, 262, 158, 159, 160,
	161, 0, 263, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 0, 182,
	183, 266, 184, 0, 427, 189, 190, 191, 0, 267,
	192, 193, 194, 0, 195, 185, 186, 196, 0, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 271, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 275, 276,
	0, 212, 213, 214, 215, 0, 87, 216, 217, 218,
	0, 219, 0, 277, 220, 221, 222, 278, 279, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 796, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 283, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 0, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 87,
	216, 217, 218, 0, 219, 0, 277, 220, 221, 222,
	278, 279, 0, 0, 223, 90, 91, 0, 92, 224,
	225, 226, 227, 228, 0, 0, 0, 0, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 0, 97,
	235, 236, 98, 0, 0, 237, 238, 239, 0, 99,
	240, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 283, 111, 241, 112, 242,
	243, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 244, 118, 119, 120, 245,
	246, 0, 0, 0, 121, 122, 247, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 248, 0, 249, 0,
	126, 127, 128, 129, 626, 251, 0, 0, 133, 0,
	130, 0, 0, 131, 252, 132, 253, 254, 255, 0,
	256, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 257, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 259, 151, 260, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 0,
	157, 0, 262, 158, 159, 160, 161, 0, 263, 162,
	264, 163, 0, 164, 165, 166, 167, 265, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 0, 182, 183, 266, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 0,
	195, 185, 186, 196, 0, 197, 268, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 273,
	274, 0, 0, 211, 275, 276, 0, 212, 213, 214,
	215, 0, 87, 216, 217, 218, 0, 219, 0, 277,
	220, 221, 222, 278, 279, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 283, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 621, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 87, 216, 217, 218, 0,
	219, 0, 277, 220, 221, 222, 278, 279, 0, 0,
	223, 90, 91, 0, 92, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 93, 94, 95, 229, 230, 231,
	232, 96, 233, 234, 0, 97, 235, 236, 98, 0,
	0, 237, 238, 571, 0, 99, 240, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 283, 111, 241, 112, 242, 243, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 244, 118, 119, 120, 245, 246, 0, 0, 0,
	121, 122, 247, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 248, 0, 249, 0, 126, 127, 128, 129,
	250, 251, 0, 0, 133, 0, 130, 0, 0, 131,
	252, 132, 253, 254, 255, 0, 256, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 257, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 439, 0, 147, 148, 150, 149, 0, 0,
	0, 259, 151, 260, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 0, 157, 0, 262, 158,
	159, 160, 161, 0, 263, 162, 264, 163, 0, 164,
	165, 166, 167, 265, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	0, 182, 183, 266, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 0, 195, 185, 186, 196,
	0, 197, 268, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 270, 202, 271, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 438, 273, 274, 0, 0, 434,
	275, 276, 0, 212, 213, 214, 215, 0, 87, 216,
	217, 218, 0, 219, 0, 277, 220, 221, 222, 278,
	279, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 283, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 439, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 438, 273, 274,
	0, 0, 434, 275, 276, 0, 212, 213, 214, 215,
	0, 87, 216, 217, 218, 0, 219, 0, 277, 220,
	221, 222, 278, 279, 0, 0, 223, 90, 91, 0,
	92, 224, 225, 226, 227, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 0, 0, 237, 238, 239,
	0, 99, 240, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 283, 111, 241,
	112, 242, 243, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 0, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 549, 251, 0, 0,
	133, 0, 130, 0, 0, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 257, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 259, 151, 260,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 0, 157, 0, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 0, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 0, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 275, 276, 0, 212,
	213, 214, 215, 0, 87, 216, 217, 218, 0, 219,
	0, 277, 220, 221, 222, 278, 279, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	283, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 546,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 0, 87, 216, 217,
	218, 0, 219, 0, 277, 220, 221, 222, 278, 279,
	0, 0, 223, 90, 91, 0, 92, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 93, 94, 95, 229,
	230, 231, 232, 96, 233, 234, 0, 97, 235, 236,
	98, 0, 0, 237, 238, 239, 0, 99, 240, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 283, 111, 241, 112, 242, 243, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 244, 118, 119, 120, 245, 246, 0,
	0, 0, 121, 122, 247, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 248, 0, 249, 0, 126, 127,
	128, 129, 543, 251, 0, 0, 133, 0, 130, 0,
	0, 131, 252, 132, 253, 254, 255, 0, 256, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 257,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 259, 151, 260, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 0, 157, 0,
	262, 158, 159, 160, 161, 0, 263, 162, 264, 163,
	0, 164, 165, 166, 167, 265, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 0, 182, 183, 266, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 0, 195, 185,
	186, 196, 0, 197, 268, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 270, 202, 271, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 273, 274, 0,
	0, 211, 275, 276, 0, 212, 213, 214, 215, 0,
	87, 216, 217, 218, 0, 219, 0, 277, 220, 221,
	222, 278, 279, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 283, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 541, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 0, 87, 216, 217, 218, 0, 219, 0,
	277, 220, 221, 222, 278, 279, 0, 0, 223, 90,
	91, 0, 92, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 0, 0, 237,
	238, 239, 0, 99, 240, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 283,
	111, 241, 112, 242, 243, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 245, 246, 0, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	248, 0, 249, 0, 126, 127, 128, 129, 515, 251,
	0, 0, 133, 0, 130, 0, 0, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 257, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 259,
	151, 260, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 0, 157, 0, 262, 158, 159, 160,
	161, 0, 263, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 0, 182,
	183, 266, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 0, 195, 185, 186, 196, 0, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 271, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 275, 276,
	0, 212, 213, 214, 215, 0, 87, 216, 217, 218,
	0, 219, 0, 277, 220, 221, 222, 278, 279, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 283, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 496, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 87,
	216, 217, 218, 0, 219, 0, 277, 220, 221, 222,
	278, 279, 0, 0, 223, 90, 91, 0, 92, 224,
	225, 226, 227, 228, 0, 0, 0, 0, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 0, 97,
	235, 236, 98, 0, 0, 237, 238, 239, 0, 432,
	240, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 283, 111, 241, 112, 242,
	243, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 244, 118, 119, 120, 245,
	246, 0, 0, 0, 121, 122, 247, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 248, 0, 249, 0,
	126, 127, 128, 129, 250, 251, 0, 0, 133, 0,
	130, 0, 0, 131, 252, 132, 253, 254, 255, 0,
	256, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 257, 0, 139, 0, 0, 430, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 439, 0, 147, 148,
	150, 149, 0, 0, 0, 259, 151, 260, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 0,
	157, 0, 262, 158, 159, 160, 161, 0, 263, 162,
	264, 163, 0, 164, 165, 166, 167, 265, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 0, 182, 183, 433, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 431, 194, 0,
	195, 185, 186, 196, 0, 197, 268, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 438, 273,
	274, 0, 0, 434, 275, 276, 0, 212, 213, 214,
	215, 0, 87, 216, 217, 218, 0, 219, 0, 277,
	220, 221, 222, 278, 279, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 283, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 0, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 0, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 0, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 0,
	219, 0, 277, 220, 221, 222, 278, 279, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 963,
	964, 0, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 997, 0, 0, 0, 0,
	0, 963, 964, 0, 983, 984, 985, 993, 994, 995,
	0, 0, 0, 0, 0, 965, 0, 986, 0, 0,
	0, 980, 0, 0, 966, 0, 0, 997, 0, 0,
	0, 0, 0, 963, 964, 0, 983, 984, 985, 993,
	994, 995, 0, 0, 0, 0, 0, 965, 0, 986,
	0, 0, 0, 980, 0, 0, 966, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	990, 998, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 990, 998, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	988, 0, 0, 0, 990, 998, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 988, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 991, 977, 978, 979, 992, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 0, 0, 0,
	0, 0, 0, 0, 1585, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 977, 978, 979, 992, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 0,
	0, 0, 0, 0, 0, 0, 1537, 0, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 977, 978, 979,
	992, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 0, 963, 964, 2065, 983, 984, 985, 993,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 0, 966, 963, 964, 997,
	983, 984, 985, 993, 994, 995, 0, 0, 0, 0,
	0, 1545, 1546, 986, 1563, 1564, 1565, 0, 0, 965,
	966, 0, 0, 997, 0, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 964, 0, 983, 984, 985,
	993, 994, 995, 965, 0, 0, 0, 0, 0, 980,
	986, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	997, 0, 0, 1560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 0, 0, 990, 998, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 1551, 0, 0, 0, 0, 990, 998,
	0, 0, 988, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 996, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 0, 1566, 0,
	0, 0, 981, 987, 0, 990, 998, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 987, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1562, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 989, 0, 0, 977, 978, 979,
	992, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 0, 0, 0, 2063, 0, 0, 989, 0,
	0, 977, 978, 979, 992, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 1557, 1558, 1559, 0, 2008,
	1556, 1554, 1555, 1547, 1548, 1549, 1550, 1552, 1553, 0,
	0, 0, 0, 0, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 963, 964, 2003, 983, 984, 985,
	993, 994, 995, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 966, 963, 964,
	997, 983, 984, 985, 993, 994, 995, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	965, 966, 0, 0, 997, 0, 980, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 964, 0, 983, 984,
	985, 993, 994, 995, 965, 0, 0, 0, 0, 0,
	980, 986, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 990, 998, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 990,
	998, 0, 0, 988, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 996, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 981, 987, 0, 990, 998, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 987, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 1999, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	1938, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 963, 964, 1916, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 987, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 0, 0, 1915, 0, 0,
	989, 0, 0, 977, 978, 979, 992, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 0, 0, 0,
	0, 1805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	977, 978, 979, 992, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 0, 0, 963, 964, 1739, 983,
	984, 985, 993, 994, 995, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 966,
	963, 964, 997, 983, 984, 985, 993, 994, 995, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 965, 966, 0, 0, 997, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 964, 0,
	983, 984, 985, 993, 994, 995, 965, 0, 0, 0,
	0, 0, 980, 986, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 990, 998, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 990, 998, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 996, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 981, 987, 0, 990, 998,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 988, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 987, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 989, 0, 0,
	977, 978, 979, 992, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 0, 0, 0, 0, 1723, 0,
	0, 989, 0, 0, 977, 978, 979, 992, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 1676, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 977, 978, 979, 992, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 0, 0, 963, 964, 1292,
	983, 984, 985, 993, 994, 995, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	966, 963, 964, 997, 983, 984, 985, 993, 994, 995,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 965, 966, 0, 0, 997, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 964,
	0, 983, 984, 985, 993, 994, 995, 965, 0, 0,
	0, 0, 0, 980, 986, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 990, 998,
	0, 0, 0, 971, 2148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 990, 998, 0, 0, 988, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 996, 0,
	971, 0, 1577, 0, 0, 1576, 0, 0, 0, 0,
	988, 0, 0, 0, 0, 0, 981, 987, 0, 990,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 0, 0, 0, 0,
	0, 987, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 981, 0, 2147, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 987, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 989, 0,
	0, 977, 978, 979, 992, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 0, 0, 1512, 0, 0,
	0, 0, 989, 0, 0, 977, 978, 979, 992, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 1001, 0, 0, 1207, 0, 966,
	963, 964, 997, 983, 984, 985, 993, 994, 995, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	1000, 0, 965, 966, 0, 0, 997, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 964, 0,
	983, 984, 985, 993, 994, 995, 965, 0, 0, 0,
	0, 0, 980, 986, 0, 0, 1208, 0, 0, 0,
	966, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 990, 998, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 990, 998, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 996, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 981, 987, 0, 990, 998,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 988, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 987, 491, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 989, 0, 0,
	977, 978, 979, 992, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 977, 978, 979, 992, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 977, 978, 979, 992, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 963, 964, 0, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 1578, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 0, 0, 0, 0, 1583, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 987, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1727, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 977, 978, 979, 992, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	977, 978, 979, 992, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 963, 964, 0, 983, 984, 985,
	993, 994, 995, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 966, 963, 964,
	997, 983, 984, 985, 993, 994, 995, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 1536, 0,
	965, 966, 0, 0, 997, 0, 980, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 964, 0, 983, 984,
	985, 993, 994, 995, 965, 0, 0, 0, 0, 0,
	980, 986, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 990, 998, 0, 963, 964,
	971, 983, 984, 985, 993, 994, 995, 0, 0, 0,
	0, 996, 0, 0, 986, 0, 0, 0, 0, 990,
	998, 966, 0, 988, 997, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 996, 0, 971, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 988, 0, 0,
	980, 0, 0, 981, 987, 0, 990, 998, 0, 0,
	0, 0, 0, 0, 0, 0, 1543, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 987, 0, 0, 0, 990,
	998, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 991, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 963, 964, 0, 983, 984, 985,
	993, 994, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	965, 0, 977, 978, 979, 992, 980, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 0, 990, 998, 0, 0, 0,
	0, 963, 964, 0, 32, 56, 0, 993, 994, 995,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 966, 0, 0, 997, 0, 981,
	58, 0, 0, 0, 0, 0, 34, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 59, 0, 0,
	0, 46, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 44, 0, 0, 982, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 990, 998, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 45, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 61, 62, 33, 0, 0, 49, 0,
	60, 0, 0, 0, 0, 50, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 53, 0, 0, 55, 0,
	0, 0, 0, 0, 0, 982, 0, 57, 0, 0,
	838, 830, 855, 822, 846, 845, 73, 0, 824, 823,
	991, 0, 0, 857, 856, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 851, 69, 843, 842, 0,
	0, 0, 70, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 989, 0, 840, 0, 0, 0, 992, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 832, 834, 835, 836, 0, 854, 0,
	0, 0, 0, 0, 838, 830, 855, 822, 846, 845,
	0, 0, 824, 823, 0, 0, 0, 857, 856, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 843, 842, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 839, 0, 0, 0, 1226,
	1224, 1225, 1228, 1227, 0, 0, 0, 0, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 828, 833, 832, 834, 835,
	836, 0, 854, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 852, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 844,
	0, 0, 858, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 852, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 0, 0, 0, 858,
}
var sqlPact = [...]int{

	29260, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 705, 16316, 16316, 20334, -1000, -1000, -1000, -1000, -1000,
	-1000, 760, 692, 731, 5185, 20334, 20334, 20051, 2138, 2138,
	21749, -1000, -1000, 25145, -1000, 3960, 523, 539, 523, 523,
	526, 21749, 20334, 617, 743, 141, -1000, 756, 8, 24862,
	20334, 1467, 32, 18353, 320, 29260, 19768, 24579, 20334, 19485,
	595, 30, 16898, 20334, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1318, 352, 36, -1000, 1317, 1208, 1207, 18353, 24296, 24013,
	23730, 23447, -1000, 12487, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 816, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 328,
	327, -1000, 19202, -1000, 1022, -1000, 31, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1019, -1000, 20334, -1000, -1000,
	23164, 22881, 688, 326, 1017, -1000, -1000, 574, 436, 1482,
	-1000, 42, -1000, 1503, 884, -1000, -1000, 1315, -1000, 1009,
	1314, 1311, 1310, 1309, 1308, -1000, 845, -1000, 1306, 434,
	749, 520, -1000, 1305, 1304, 1017, -1000, 1017, -1000, -1000,
	-1000, 593, 21749, -1000, -1000, 18353, -1000, 22598, 20334, 20334,
	1233, 22315, -1000, 756, -1000, -1000, -1000, 1102, 1460, 1460,
	1460, 1528, 157, 156, 141, 20, 20334, -1000, 325, 20,
	9347, 9347, -1000, -1000, 320, -1000, 200, 15430, -1000, 8387,
	-1000, 939, 1375, 506, 820, 1368, -123, 834, 814, 1365,
	16033, 16898, 30, 26, -1000, -1000, -1000, 4878, 16033, 658,
	14581, 36, -1000, -1000, -1000, 18353, 20334, 20334, 703, 22032,
	-1000, 1364, 123, 1363, -1000, 121, 1362, -1000, 121, 1358,
	11, -1000, -1000, -1000, -1000, -1000, -1000, 320, 18919, 20334,
	1600, 29597, -1000, 10628, -1000, -1000, 16316, 1049, 16316, -1000,
	-1000, 1595, -1000, 20334, 10628, -1000, 25, 24, 1118, 1121,
	13092, 12796, 1427, 725, -1000, -1000, -1000, 41, 5185, 672,
	18636, -1000, -1000, 20334, 1327, 16316, 20334, 20334, 20334, 20334,
	20334, -1000, -1000, 20334, -1000, 1115, -1000, -1000, 20334, 20334,
	786, 614, -1000, 22, 21, -1000, 21749, -1000, 136, -1000,
	318, 1082, 435, 159, 21466, 435, 1080, -1000, 1102, -1000,
	982, 1181, 9668, 1117, 10628, 141, -1000, -1000, 141, 141,
	10628, -1000, -1000, 20334, 20, 1593, 20334, 110, -1000, 28040,
	-1000, -1000, 10628, 10628, 10628, 10628, 10628, 932, 375, -1000,
	306, 301, 6133, -1000, -1000, 1709, -1000, -1000, -1000, 124,
	-1000, -1000, 10628, 36, -1000, -1000, -1000, -1000, 298, 1722,
	-1000, 437, -1000, -1000, -1000, 442, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1323, 295, 293, -1000, -1000,
	-1000, -1000, 292, 290, 285, 284, 283, 282, 277, 272,
	264, 262, 261, 259, 256, 255, 254, 874, -1000, 467,
	-1000, -1000, 467, 467, -1000, 247, 247, 248, -1000, -1000,
	-1000, -1000, 247, -1000, -1000, -1000, 428, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 252, 110, -1000, -1000, -1000, 20334,
	6, -1000, 28835, -1000, 9, 924, -1000, 17774, 1529, 1484,
	1455, 18353, 1557, 8, 1301, 1549, 8, 1292, 589, 20334,
	20334, 588, 577, 18353, 411, -1000, -1000, -1000, -1000, -1000,
	20334, -1000, -1000, 0, -1000, -1000, 1291, 1, -1000, -1000,
	452, 137, 1591, 137, 14864, -1000, 20334, 20334, -1000, 20334,
	-1000, -1000, 20334, -1000, 20334, 20334, -1000, 20334, 154, 17195,
	757, 1356, 745, 8, -1, -1000, 1610, -1000, -1000, -1000,
	-1000, 102, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	248, 874, 247, 247, 247, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 428, -1000, -1000, 467, 467, 467, -1000, -1000,
	-5, 28835, 576, -1000, 1290, 516, -1000, 431, -7, 864,
	1166, 930, -1000, -1000, -1000, -1000, 19, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1657, -1000, -1000,
	1708, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1720, 5185, -1000, -1000, -1000, -1000, -1000, -1000, 20334,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20334, 20334, 20334, 864, 1166, -1000, -1000, 18353, 17478, 1580,
	1354, 902, -1000, 1576, 20334, 1006, 1079, -1000, 611, 1353,
	-1000, -1000, -1000, -1000, 28835, -1000, 370, -1000, -1000, 28835,
	877, 1215, -1000, 1215, 18, -1000, 28016, -1000, 246, -9,
	452, 9347, 14282, 29483, 29597, 5185, 604, 10628, 10628, 10628,
	10628, 10628, 10628, 10628, 10628, 10628, 10628, 10628, 10628, 10628,
	10628, 10628, 10628, 10628, 10628, 10628, 10628, 10628, 10628, 1004,
	10628, 572, 10628, 10628, 10628, 10628, 776, 869, 232, 1094,
	5185, -1000, -1000, 1652, 1652, 1652, 29154, 29154, 202, 375,
	-1000, 10628, -1000, 9027, 156, 27317, 16, -1000, -1000, -1000,
	7094, 456, 28835, 36, 5812, -1000, 1707, 764, 1320, 1267,
	245, 155, 151, 10628, 10628, 10948, 10948, 10628, 11268, 10628,
	10628, 6453, 10628, 10628, 10628, 10628, 10628, 10628, -1000, 244,
	-1000, -1000, -1000, -1000, 1698, -1000, -1000, 1694, -1000, 603,
	602, 1686, 452, 149, 8387, -1000, 757, 20334, 20334, 20334,
	-1000, -1000, 1077, 21183, 1075, 29597, 20334, -1000, 242, 241,
	1158, 1146, 20334, 20334, 20900, 20617, 20334, 793, 8, -1000,
	240, 8, -1000, 237, 20334, 803, -1000, 20334, 20334, 790,
	1258, 1008, -1000, 447, 16033, 652, 1287, 20334, 747, 10628,
	778, -1000, 13983, 475, 20334, 747, 82, -1000, -1000, -1000,
	405, 20334, -1000, -1000, -1000, 123, -1000, 121, 121, -1000,
	-1000, 18353, -1000, -1000, -1000, -1000, -1000, -1000, 29597, 374,
	356, -1000, 1685, 570, -1000, 569, 568, 567, -1000, 233,
	-1000, 10628, 20334, 20334, 1166, -1000, -1000, -1000, -1000, 766,
	-1000, 788, -1000, 13388, -1000, -1000, -1000, -1000, 7, -1000,
	-1000, -1000, 411, -1000, -1000, -1000, 143, -13, 13, 29597,
	-1000, -1000, -1000, -1000, -1000, 20334, 280, 20334, 8, 20334,
	-1000, 1719, 8, 20334, 1352, 1383, 402, 20334, 877, -1000,
	10628, 1683, -1000, -1000, -1000, 10628, -1000, -1000, -1000, 8,
	-1000, 1266, -1000, -69, 1312, 1001, -165, 153, 414, -1000,
	13684, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 433, 362, 362, 689, 689, 689, 689, 1642, 220,
	388, 1090, 29281, 29281, 29281, 980, 353, 353, 29281, 29281,
	29281, 29154, 28898, 193, 10628, 10628, 566, 862, 232, 193,
	10628, 193, 193, 193, 193, -1000, 1028, -1000, -1000, -1000,
	-1000, 1286, 231, 11268, 11268, -1000, -1000, -1000, 6133, 11588,
	-1000, -1000, -1000, -1000, -1000, 227, 10628, -1000, 27637, -172,
	-14, -1000, -1000, 10628, -19, -27, -1000, -1000, 665, -1000,
	10628, -1000, -11, 10628, 10628, 10628, 138, 135, -1000, 947,
	224, 219, 10628, -1000, -1000, 28798, 25761, 130, 1284, -85,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 129, 127, 28774,
	-85, 125, 3858, -1000, 11268, 11268, 11268, 6133, 218, 116,
	27698, -85, 28456, 8707, 8707, 8707, 114, 28419, 10628, -85,
	25729, 3672, 3612, -25, -31, -33, 1682, -35, 109, 424,
	418, 108, 1266, -1000, -1000, -1000, -1000, 565, 564, 1351,
	-1000, 1057, -1000, 489, -1000, 779, 10628, 12204, 208, 204,
	857, -1000, 1347, 956, 1346, 956, -1000, 9, 838, -1000,
	10628, -1000, 10628, -1000, 559, -1000, -1000, 557, 447, 1282,
	620, -1000, 969, -1000, -1000, 629, -1000, -1000, 6773, 28835,
	-1000, 747, 1469, -37, -1000, -1000, -1000, 452, 14864, 14282,
	8387, -39, -1000, -1000, -1000, 757, -1000, 479, 1673, 106,
	1092, 856, 940, 714, 1669, 28835, 7, 7, -1000, -1000,
	-1000, -1000, -1000, 20334, -1000, 1245, -1000, 17478, 203, 20334,
	201, -1000, 199, -1000, -1000, 196, 20334, 1138, 402, 16615,
	-1000, 435, 973, 27280, -1000, 105, 1263, 1523, -1000, 14282,
	1168, 1162, 14282, 1243, 946, 946, 946, -1000, 195, 322,
	342, 414, 4250, 10628, 18070, 955, 69, 104, 1312, 10628,
	193, 193, 10628, 11268, 11268, -1000, 193, -1000, -1000, -1000,
	-1000, -1000, 1281, 194, 10628, 29597, 3783, 3502, -48, -1000,
	8067, 2, -1000, 10628, -1000, 27256, -1000, -1000, 344, 1381,
	-1000, 10628, 28395, 94, 7747, -1000, 28077, -18, -18, -1000,
	1718, -1000, 15147, 453, 958, 26936, 29483, 29597, -1000, 10628,
	-1000, -1000, 1280, 10628, -1000, 29483, 29597, 11268, 11268, 11268,
	11268, 11268, 11268, 11268, 11268, 11268, 11268, 11268, 11268, 11268,
	11268, 11268, 11268, 11268, 11268, 11268, 1183, 11268, 1639, 1639,
	1639, -6, 7427, -1000, 1322, 1280, 10628, 10628, 29597, 92,
	91, 90, -1000, 10628, -85, 10628, 10628, 10628, -1000, -1000,
	-1000, 83, -1000, 1665, -1000, -1000, -1000, -1000, 1263, 20334,
	20334, 20334, 1345, -1000, 2812, -1000, 26899, -49, -1000, 315,
	1483, 10628, -1000, -1000, 192, 12204, 20334, -1000, 1144, 1165,
	510, 20334, -1000, 20334, -1000, 20334, 20334, 20334, -50, -54,
	20334, 20334, -1000, 16033, 599, 180, -1000, -23, -1000, -1000,
	225, 8, 747, -1000, -62, -1000, 404, -1000, 341, 340,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 78, -1000,
	-1000, 1247, -1000, 12204, 178, 20334, 17478, 1573, 12204, 998,
	1122, 402, 16615, -1000, 611, -1000, -1000, -1000, 450, 10628,
	10628, 1312, 14282, 14282, 1002, 1145, 14282, -1000, -1000, -1000,
	-1000, 339, 363, 338, 12487, 414, 18070, -1000, 1664, 1176,
	-55, -1000, -1000, 20334, 176, -1000, 414, 1581, 193, 2894,
	2657, 10628, 29597, 3841, -60, 10628, 10628, -1000, -64, -1000,
	10628, 335, 28835, -1000, -1000, -1000, 28835, 10628, 1713, 10628,
	76, 74, 73, -1000, -1000, -1000, 25428, 10628, 72, -1000,
	68, 65, 28835, 1322, 28835, -1000, -1000, 440, 440, 671,
	671, 671, 671, 1639, 2606, 916, 2372, 1050, 1050, 1050,
	2321, 695, 695, 1050, 1050, 1050, 1276, 1154, 175, 26151,
	10628, -68, -1000, -1000, -1000, 28835, 28835, 64, -1000, -1000,
	-1000, -85, 3275, 26875, 26555, -1000, 59, 450, -1000, -1000,
	-1000, 20334, -1000, 20334, -1000, 5185, 20334, 1277, 1044, -1000,
	-1000, 1143, 174, 11268, 20334, -1000, 863, 12204, 1462, 36,
	5185, 1462, 26518, 5812, -70, -72, 1041, -1000, 1034, 10628,
	-1000, 29597, 956, 956, -1000, 553, 552, 548, 546, -1000,
	-1000, -81, 15737, 1717, 1388, 20334, 1446, -1000, -1000, 173,
	-1000, -1000, -1000, 920, -74, 12204, -76, 57, 8, -89,
	20334, -1000, 402, 16615, -1000, 1383, -1000, 20334, 28835, -85,
	-1000, 1002, -1000, 172, 10628, 14282, -1000, -165, -1000, -93,
	-1000, 414, -94, 18070, -1000, 332, -169, -1000, 401, -1000,
	414, 171, 20334, 18070, 10628, 10628, 3841, -95, -1000, 193,
	193, -1000, 26494, -1000, 28835, -1000, 28077, -1000, -1000, -1000,
	911, -1000, 26174, -1000, -1000, -1000, -1000, 11268, 1273, 170,
	29597, 26137, -1000, -1000, 10628, -1000, -1000, -1000, -1000, -1000,
	1071, -1000, -1000, 20334, 1056, -1000, -1000, 10628, 26151, 168,
	1245, 167, -1000, -1000, -1000, -1000, -1000, -1000, 1483, -11,
	-1000, 770, -1000, -1000, 28835, 1474, -1000, -1000, 20334, 20334,
	165, 164, -1000, 163, 36, -99, -1000, 392, 660, -100,
	20334, -1000, -1000, 5492, 20334, 863, -107, -1000, 1245, -1000,
	863, 162, 16615, -1000, 1138, -83, -1000, 1567, -1000, 20334,
	28835, -1000, 414, -1000, 1653, 18070, 154, -1000, -1000, 1176,
	-1000, 4568, 18070, 20334, -111, -1000, 193, 193, -1000, -1000,
	56, 958, 1520, -1000, 2308, 11268, 29597, -120, -1000, 26113,
	-1000, -1000, 1343, 25793, 1095, 20334, -1000, 20334, 1462, 55,
	20334, 495, 5185, -1000, -1000, 10628, 10628, 10628, 1717, -1000,
	-1000, 1716, 673, -1000, 452, -1000, 161, 1245, 863, -1000,
	1245, 12204, -1000, 1122, 20334, 160, -125, 18070, -1000, -1000,
	331, -1000, -1000, 1649, -1000, -126, -1000, -1000, 777, 10628,
	2308, -134, -1000, -1000, 1335, -1000, 986, 945, 52, -135,
	-1000, -1000, 159, -1000, 10628, -1000, -139, -140, -18, -1000,
	-1000, 14864, -1000, 20334, -1000, 1245, -1000, -141, -1000, -1000,
	-1000, -1000, -1000, 414, 221, -1000, 51, 10308, 10308, -85,
	-1000, 20334, -1000, 993, 992, 723, -1000, -1000, -1000, -1000,
	-1000, 1095, 28835, -1000, -1000, 50, -116, -146, -1000, 863,
	18070, -1000, -1000, -1000, -1000, 11897, 952, 729, 27661, -1000,
	-1000, -1000, 1392, -1000, 503, 1157, 1157, 986, 1713, -1000,
	949, 1245, -1000, 1616, -1000, -1000, -1000, -1000, -1000, -1000,
	1628, -1000, -1000, 1160, -1000, -1000, -1000, -1000, -1000, -1000,
	9988, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1953, 1951, 1505, 1612, 1947, 1943, 1598, 1941, 1940,
	1937, 1936, 1935, 1933, 142, 1585, 1583, 28, 1569, 1932,
	110, 1931, 1930, 1929, 140, 1922, 1921, 1920, 1919, 175,
	1918, 1912, 111, 1565, 1503, 1495, 1911, 1908, 126, 1906,
	18, 1900, 92, 1895, 56, 179, 2282, 151, 1892, 1890,
	1888, 32, 117, 89, 1885, 90, 1881, 1880, 53, 43,
	16, 29, 1878, 113, 122, 1466, 36, 1877, 1872, 158,
	1871, 13, 40, 104, 162, 160, 136, 134, 1870, 1869,
	1868, 1867, 59, 1865, 3, 1864, 1861, 14, 81, 26,
	1860, 30, 19, 1857, 1853, 135, 1850, 91, 115, 1492,
	172, 138, 309, 1848, 100, 11, 88, 1843, 1840, 146,
	52, 1839, 49, 96, 148, 1837, 65, 164, 86, 41,
	82, 118, 1833, 1832, 1831, 94, 1830, 120, 93, 1829,
	1828, 99, 1822, 147, 152, 1819, 1818, 114, 1816, 144,
	1815, 1813, 157, 174, 1812, 1809, 165, 1808, 10, 55,
	87, 15, 1494, 1490, 121, 75, 39, 21, 1807, 1814,
	964, 943, 42, 102, 68, 60, 106, 69, 85, 155,
	67, 1806, 1803, 128, 1802, 1801, 1800, 1799, 1798, 97,
	1795, 1790, 101, 154, 20, 12, 24, 109, 44, 61,
	107, 131, 161, 129, 1789, 108, 123, 64, 379, 1786,
	1785, 1199, 130, 1784, 1783, 1781, 1170, 862, 748, 132,
	1779, 1778, 643, 630, 1777, 1776, 72, 1775, 137, 133,
	1774, 153, 315, 38, 1773, 58, 37, 119, 1772, 124,
	73, 0, 751, 737, 1771, 150, 95, 1770, 1768, 1767,
	1766, 31, 2, 8, 5, 6, 4, 27, 17, 1765,
	1764, 145, 22, 76, 1763, 163, 1762, 1760, 1750, 50,
	1749, 9, 1747, 25, 1746, 1743, 7, 1, 1742, 1741,
	156, 1740, 116, 1739, 1605, 1735, 159, 1734, 1733, 1560,
	57, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 229, 229, 230, 230, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 197, 197, 196, 19,
	171, 171, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 270, 270, 270, 274, 274,
	275, 275, 276, 276, 276, 276, 276, 276, 276, 272,
	272, 27, 31, 31, 31, 31, 31, 31, 147, 143,
	143, 145, 145, 145, 145, 64, 142, 142, 142, 142,
	144, 144, 144, 144, 222, 221, 221, 227, 227, 227,
	79, 79, 79, 79, 79, 80, 80, 80, 220, 220,
	220, 220, 228, 228, 228, 228, 228, 228, 81, 81,
	81, 226, 226, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 18, 271, 271, 273,
	273, 33, 33, 34, 34, 35, 35, 35, 35, 10,
	10, 11, 11, 82, 82, 83, 83, 150, 150, 150,
	150, 84, 84, 56, 56, 56, 149, 239, 239, 240,
	240, 240, 240, 240, 240, 241, 241, 241, 241, 241,
	241, 241, 237, 237, 238, 235, 235, 236, 236, 236,
	236, 277, 277, 148, 148, 87, 87, 244, 244, 244,
	244, 242, 242, 242, 242, 242, 245, 243, 246, 246,
	246, 246, 246, 183, 183, 183, 37, 12, 62, 62,
	13, 9, 9, 130, 130, 91, 91, 188, 188, 188,
	72, 72, 51, 51, 51, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 131, 131, 132, 132,
	25, 30, 36, 36, 36, 36, 36, 279, 279, 68,
	68, 68, 68, 69, 69, 146, 146, 146, 146, 146,
	63, 8, 8, 58, 58, 59, 59, 60, 60, 61,
	61, 280, 280, 24, 24, 24, 75, 75, 139, 139,
	139, 141, 141, 140, 140, 140, 116, 116, 116, 38,
	96, 96, 105, 105, 106, 106, 194, 107, 107, 29,
	29, 46, 46, 44, 44, 44, 44, 44, 44, 45,
	45, 47, 47, 47, 47, 47, 47, 47, 252, 252,
	252, 255, 255, 251, 253, 253, 254, 254, 278, 278,
	117, 117, 117, 86, 85, 85, 89, 89, 88, 90,
	90, 187, 114, 114, 114, 114, 133, 133, 134, 134,
	135, 135, 136, 136, 136, 137, 137, 138, 138, 113,
	113, 167, 167, 48, 48, 95, 95, 97, 97, 157,
	157, 157, 158, 158, 156, 156, 156, 156, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 268, 268, 268,
	269, 269, 186, 186, 190, 190, 190, 190, 190, 190,
	184, 184, 184, 184, 185, 185, 195, 195, 120, 120,
	120, 120, 118, 118, 119, 119, 191, 191, 191, 191,
	115, 115, 192, 192, 192, 151, 151, 198, 198, 198,
	216, 216, 94, 94, 94, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 200, 200, 200, 200, 202, 202, 202, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 215, 215, 215, 215, 215, 203, 203,
	210, 210, 211, 211, 212, 213, 204, 204, 205, 205,
	206, 207, 214, 214, 214, 214, 218, 218, 208, 208,
	208, 208, 208, 209, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 128, 128,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 161, 161, 161, 161, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 247, 247, 247,
	247, 247, 247, 247, 249, 249, 250, 250, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 256, 256, 257, 257, 259,
	259, 260, 260, 261, 262, 262, 262, 263, 264, 264,
	258, 258, 265, 265, 265, 266, 266, 267, 267, 267,
	267, 267, 173, 173, 173, 174, 174, 175, 181, 181,
	181, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 70, 70, 70,
	70, 70, 102, 102, 170, 170, 168, 168, 168, 172,
	172, 121, 121, 217, 217, 217, 217, 217, 217, 217,
	122, 122, 122, 129, 123, 123, 124, 124, 124, 124,
	124, 124, 164, 165, 125, 125, 125, 166, 166, 176,
	180, 180, 179, 178, 178, 177, 177, 154, 154, 155,
	155, 153, 152, 110, 110, 109, 109, 108, 108, 281,
	281, 182, 182, 111, 111, 112, 104, 104, 193, 193,
	193, 193, 98, 98, 77, 77, 99, 99, 73, 73,
	76, 76, 74, 74, 74, 74, 92, 92, 93, 93,
	71, 71, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 219, 219, 219, 169, 65, 65, 65,
	66, 66, 67, 67, 224, 224, 224, 225, 225, 225,
	225, 223, 223, 223, 223, 223, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 2, 3,
	3, 2, 3, 3, 4, 2, 3, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 6, 6, 5, 5, 4, 12, 4, 12, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 5, 2, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 225, 66, -8, -9, -10, -11, -12,
	-13, -254, 94, 103, 125, 206, 101, 87, 119, 228,
	235, -44, -46, 245, -147, 248, 35, 257, 60, 97,
	230, 223, 224, 282, 68, -252, -47, -45, 331, 306,
	312, 239, -48, 266, 298, 334, 266, 134, 80, 301,
	-270, -99, 266, 80, -74, -65, 324, 4, -231, -233,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 211, 213, 214,
	216, 217, 218, 219, 220, 223, 221, 222, 224, 225,
	226, 228, 230, 231, 233, 246, 247, 258, 235, 236,
	237, 238, 241, 242, 243, 245, 248, 250, 253, 256,
	257, 259, 262, 260, 255, 265, 267, 268, 269, 270,
	271, 278, 282, 283, 284, 285, 288, 289, 290, 292,
	295, 296, 297, 302, 307, 308, 309, 310, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 50, 51, 52,
	55, 82, 84, 85, 100, 104, 105, 111, 121, 123,
	129, 130, 139, 141, 142, 143, 145, 156, 170, 180,
	182, 193, 197, 203, 205, 212, 232, 240, 251, 252,
	261, 263, 273, 274, 275, 279, 280, 294, 298, 299,
	-270, -73, -65, 80, 89, 138, 290, 289, 80, 134,
	266, 301, -17, 331, -29, -7, -15, -4, -24, -38,
	-14, -32, -18, -33, -34, -35, -16, 23, -223, 4,
	-231, -233, -232, -234, 57, 69, 118, 137, 131, 147,
	149, 157, 159, 172, 194, 196, 229, 249, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 48, 49,
	53, 56, 58, 64, 68, 72, 73, 74, 75, 76,
	77, 86, 88, 90, 91, 92, 95, 97, 99, 106,
	107, 108, 114, 116, 117, 119, 122, 124, 132, 134,
	136, 144, 146, 152, 155, 160, 162, 163, 177, 178,
	179, 185, 187, 188, 190, 191, 202, 207, 215, 227,
	239, 244, 254, 264, 266, 272, 276, 277, 281, 286,
	287, 291, 293, 300, 301, 303, 304, 305, 306, -65,
	-65, -65, 206, 22, -274, 22, -275, -276, 68, 94,
	119, 239, 138, 89, 289, -274, -69, 235, -65, -143,
	161, 242, 54, 232, 278, -144, -142, -222, 273, 171,
	-100, -65, 4, 22, 54, 244, 80, 59, 81, 120,
	134, 135, 64, 65, 151, 209, 161, 243, 267, 273,
	278, 68, 292, 269, 102, -279, 278, 278, -279, -279,
	-68, 278, 276, -69, -222, -278, 266, 266, 291, 301,
	-130, 80, 287, -45, -47, -46, -88, -89, 286, 144,
	99, 191, -44, -46, -252, -255, 213, -251, -65, -255,
	-85, -86, 22, 91, 335, -191, -73, 188, -112, 331,
	-3, -191, 129, -73, -76, 129, -73, -65, -191, 129,
	276, 335, -99, -92, -65, -153, -152, 333, 117, 117,
	331, -109, -110, -152, -153, 117, 146, 146, -192, -191,
	-65, 129, -77, 129, -76, -101, 129, -100, -101, 129,
	-197, -196, -225, 4, -231, -233, -232, 298, 266, 134,
	-171, 331, -126, 331, -65, 22, 187, 335, 187, -65,
	-143, 52, -143, 246, 331, -145, -63, -64, 148, 208,
	276, 316, 117, 310, -81, 5, 86, -103, 333, 54,
	246, 209, 243, 117, -271, 187, 117, 117, 117, 117,
	117, 209, 243, 117, 310, 148, 208, 258, 266, 301,
	117, 117, -146, -63, -64, -146, 276, -69, -115, -191,
	-100, 129, -65, -100, 134, -65, 129, -88, -89, -114,
	-133, -134, 160, 108, 185, -117, 22, 91, -117, -117,
	44, 332, 332, 335, -255, -93, 331, -104, -193, -159,
	324, -161, 322, 323, 317, 177, 311, -173, -163, -176,
	100, 232, 331, -73, -162, 336, 9, -249, -46, 29,
	-174, -175, 48, -65, 7, 8, 5, 6, -71, -200,
	-169, -209, 281, 106, 179, -247, -248, 4, -231, -224,
	-201, -211, -205, -208, 145, 57, 73, 76, 74, 77,
	244, 291, 49, 28, 104, 105, 197, 203, 263, 279,
	280, 129, 180, 130, 55, 121, 156, 93, 37, 39,
	41, 42, 50, 51, 82, 84, 85, 111, 139, 141,
	142, 143, 182, 212, 251, 261, 274, 275, 299, -232,
	-212, -213, -206, -207, -214, -104, -112, 324, -73, 331,
	-111, -182, -159, 86, -53, 221, -52, 21, 23, 94,
	296, 100, 255, 270, 236, 255, 270, 236, 221, 100,
	336, 221, 221, 100, -229, -226, 9, -225, 5, -74,
	335, -223, 324, -230, -229, 259, 332, -98, -73, -110,
	-192, -75, -73, -75, 245, -65, 30, 100, -55, 335,
	47, 226, 100, -55, 335, 100, -55, 100, 332, 335,
	-191, 129, -76, 30, -170, -198, -199, -201, -210, -204,
	-208, -209, 40, 46, 45, 271, 170, 240, 252, 294,
	38, 186, 140, 139, 141, 142, 143, 251, 37, 212,
	111, 93, 85, 84, 182, 42, 41, -212, -213, -206,
	-207, 82, 274, 275, 145, 39, 51, 50, 299, 261,
	-102, -159, -270, -276, -270, 30, -142, -222, -102, 335,
	335, 158, -80, 164, 176, 126, -221, 86, -227, -220,
	-183, 9, 281, 106, 187, -226, 8, 323, -219, 7,
	322, -221, 86, 71, -228, 5, 4, -169, -183, 86,
	161, -209, 333, -223, 247, -100, 22, -222, -273, 114,
	-270, -222, -222, -222, -222, -222, -65, 158, -222, -222,
	266, 134, 266, 335, 335, -69, -55, 335, 331, -87,
	177, -253, 306, -87, 331, -66, 129, -65, -253, 177,
	-114, -134, -133, -135, -159, 22, -138, 110, 173, -159,
	-161, -45, -45, -45, -90, -187, -159, -251, 30, -92,
	-95, 335, 117, 10, 11, 56, 33, 322, 323, 324,
	325, 112, 326, 327, 320, 321, 319, 314, 315, 316,
	62, 165, 234, 13, 14, 15, 26, 190, 159, 311,
	131, 249, 317, 16, 17, 18, 147, 36, 132, -70,
	30, 4, -78, -159, -159, -159, -159, -159, 196, -108,
	-154, 329, -46, 331, -46, -159, -102, 7, -46, -168,
	329, -177, -159, -109, 331, 5, 331, 5, -256, 307,
	114, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 205, -218,
	302, -218, -218, -202, 331, -202, -203, 331, -202, 308,
	312, 331, -95, -73, 335, 332, 335, 276, -131, 64,
	58, -149, 129, 58, -235, -65, 64, -236, 53, 287,
	207, 116, -131, 64, -131, 64, 64, -191, 33, -29,
	117, 33, -29, 117, 276, -76, -65, 276, 276, -191,
	-195, 313, -65, -195, 335, 117, 332, 335, -151, 304,
	-139, -29, 331, 86, 30, -139, -105, -106, -194, -107,
	-73, 331, -65, -65, -76, -77, -100, -101, -101, -17,
	-196, 100, -20, -29, -24, -38, -14, 332, 335, -94,
	29, -127, 331, 309, 168, 83, 127, 167, -128, 238,
	332, 335, 276, 117, 278, 332, -64, -63, -79, 211,
	253, 222, 241, 335, 8, 7, 7, -223, -272, -65,
	-73, -76, -73, -64, -63, -191, -82, -92, -83, -65,
	-150, -149, -237, -238, -235, 134, 287, 107, 30, 100,
	-62, 201, 30, 187, 177, -58, 268, 100, -136, -219,
	331, 323, -137, 232, 233, 335, -51, 31, 90, 331,
	332, -151, -193, -97, -189, 329, -191, -73, -46, -190,
	331, -216, -198, -215, 217, 218, 216, 220, 219, -198,
	-223, 273, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, 159, 131, 249, 36, 132, -159,
	276, -159, -159, -159, -159, 169, 177, 179, 281, 106,
	288, 91, 183, -281, 264, 32, -166, -46, 331, -181,
	27, 254, 22, -223, -173, 232, 331, -154, -159, -155,
	-102, 332, 332, 335, -102, -172, 330, -168, -180, -179,
	303, 332, -102, 300, 22, 91, 324, 7, -127, -257,
	109, 122, 331, 332, 332, -159, -159, -121, -217, -102,
	4, 309, 168, 83, 127, 167, 238, -121, -122, -159,
	-102, -123, -160, -161, 322, 323, 317, 331, 232, -124,
	-159, -102, -159, 43, 155, 277, -125, -159, 117, -102,
	-159, -159, -159, -102, -102, -102, 331, 7, 7, 273,
	273, 7, -151, 332, -182, -52, -73, -65, -65, 177,
	-149, 129, -57, 177, -198, -65, 331, 331, 150, 150,
	-65, -65, 129, -65, 129, -65, -65, -53, 221, -29,
	331, -29, 331, -65, 221, -65, -73, 221, -39, 128,
	183, -42, 306, -229, 259, 117, -73, -116, 227, -159,
	-116, -141, 187, -98, 298, -65, -116, -96, 335, 117,
	316, -98, -55, -55, -55, -191, -198, 329, 329, 7,
	276, 276, 276, 276, 331, -159, -272, -272, -63, 285,
	61, 211, -227, 335, -195, 332, 332, 335, -66, 134,
	-66, -29, -100, 5, -29, -73, 100, -59, 96, -280,
	316, -65, -137, -159, -187, -20, -113, 122, -195, 335,
	69, -120, 149, 172, 118, 157, 229, 137, 7, 103,
	-32, -156, 336, 331, -186, 312, -46, -190, -189, 310,
	-159, -159, 276, -281, 264, -166, -159, 169, 179, 281,
	106, 288, 91, 183, 117, 331, -160, -160, -102, -163,
	331, -102, 330, 339, 332, -159, 330, 330, 335, -178,
	-179, 95, -159, -89, 335, -88, -159, -102, -102, 332,
	332, -262, 195, 331, 331, -159, 30, 335, 332, 117,
	332, 332, -129, 202, 332, 10, 11, 322, 323, 324,
	325, 112, 326, 327, 320, 321, 319, 314, 315, 316,
	62, 165, 234, 13, 14, 15, 147, 132, -160, -160,
	-160, -102, 331, 332, -164, -165, 117, 114, 30, -125,
	-125, -125, 332, 117, -102, 335, 335, 335, 332, 332,
	332, 7, 332, 335, 332, 310, 310, 332, -113, 276,
	276, 100, 177, 295, -239, -236, -159, -91, -188, -65,
	-250, 331, -247, -248, -71, 331, 331, -50, 94, 245,
	-132, 100, -55, 100, -55, 276, -131, 64, -102, -102,
	276, 276, -42, 117, 265, 189, 259, -104, 178, -116,
	63, 332, -151, -106, -97, -182, 332, 330, 7, 7,
	332, 168, 127, 167, -128, 167, -128, -128, 7, -65,
	-84, 133, -150, 331, -66, 331, 331, -87, 331, -65,
	-60, 154, -280, -226, -253, 188, 332, 332, -167, 124,
	44, -189, 149, 149, -189, -120, 149, -118, 194, -118,
	-118, -268, 331, -17, 331, 330, -186, -223, 329, 337,
	-102, -185, -184, 30, -65, 192, 332, -159, -159, -160,
	-160, 117, 331, -159, -170, 26, 26, 332, -102, 332,
	335, -155, -159, 332, -168, 97, -159, 272, 332, 300,
	-89, -89, -89, 5, -263, -65, 331, 304, -88, 332,
	-216, -198, -159, -164, -159, -216, -198, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, 91, 177, 183, -160,
	335, -102, 332, -165, -164, -159, -159, -198, 332, 332,
	332, -102, -159, -159, -159, 332, 7, -167, -65, -65,
	-149, 100, -240, 64, -241, 56, 107, 68, 177, 179,
	287, 207, 53, 86, 215, 332, 332, 335, -72, -109,
	56, -72, -159, 331, -91, -92, 177, 86, 177, 86,
	79, 283, -65, -65, -73, -65, -65, 332, 332, -65,
	-73, -230, 273, 331, -140, 331, 187, -29, -116, 316,
	330, 330, 332, 132, -91, 331, -92, -82, 30, -91,
	187, -61, 153, -280, -226, -58, -259, 305, -159, -102,
	-189, -189, -119, 293, 187, 149, -189, 330, 332, -269,
	7, 330, -197, -186, -185, 7, -158, -157, 115, 175,
	332, -65, 331, -186, 26, 26, -159, -170, 332, -159,
	-159, 332, -159, 330, -159, 5, -159, 332, 332, 332,
	-264, -65, -159, 332, 332, 332, -165, 117, 91, 183,
	331, -159, 332, 332, 335, 332, 332, 332, -259, -149,
	-65, -223, -65, 107, 129, 179, 150, 331, -160, -73,
	-148, -277, 67, 262, -188, -51, -223, -51, 332, -102,
	332, 332, 179, 179, -159, -198, -55, -55, 276, 276,
	276, 276, -162, -71, -65, -41, -40, 5, 92, -92,
	64, -112, -46, 331, 198, 332, -91, 332, 332, -29,
	332, -73, -280, -226, -59, -260, -261, -65, -119, 331,
	-159, -189, -156, 332, 335, -186, 332, -185, 330, 335,
	338, 316, -186, 331, -92, -184, -159, -159, 332, 332,
	-89, -258, 200, 332, -160, 117, 331, -170, 332, -159,
	-241, -66, 177, -159, -67, 331, -84, 331, -72, -89,
	215, -54, 56, -65, -65, 331, 331, 331, 335, 332,
	-43, 316, 289, 178, 332, -65, -65, -148, 332, -84,
	-148, 331, -226, -60, 335, 30, -92, -186, 7, -185,
	-17, -157, -223, 329, -185, -92, 332, 332, -89, 44,
	-160, -170, 332, 332, 100, 332, -244, 166, -65, -92,
	-51, 332, -73, -49, 293, -223, -102, -102, -102, -40,
	5, 245, -151, 331, -84, -148, -84, -91, -61, -261,
	-263, 332, -184, 330, 7, 332, -265, 210, 233, -102,
	332, 107, -242, -245, -243, 187, 118, 199, 250, 332,
	332, -87, -159, 332, 332, -89, -105, -92, -84, 332,
	-186, 330, 332, -266, -267, 36, 284, 71, -159, -266,
	-65, -243, 187, -245, 187, 289, 89, -244, 332, -151,
	332, -148, -185, -267, 204, 113, 232, 204, 113, -246,
	174, 226, 47, 245, -246, -242, -56, 47, 226, -84,
	26, 20, 179, 86, -267,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 437, 0, 0, 0, 0, 0, 0,
	0, 409, -2, 0, 157, 0, 358, 0, 358, 358,
	362, 0, 0, 439, 324, 436, -2, 447, 0, 0,
	0, 445, 423, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 977, 906, 912, 913, 937, 938, 939,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	0, 0, 908, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 0, 236, 951,
	952, 953, 954, 955, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 121,
	128, 129, 1030, 131, 0, 138, 139, 140, 142, 143,
	144, 145, 146, 147, 148, 0, 351, 1055, 364, 152,
	1007, 1060, 965, 1133, 1078, 160, 170, 0, 1139, -2,
	174, 97, 203, 204, 0, 208, 209, 0, 211, 238,
	0, 0, 0, 0, 0, 218, 0, 221, 225, 0,
	0, 0, 232, 0, 0, 369, 357, 369, 354, 355,
	356, 359, 0, 350, 151, 0, 438, 0, 0, 0,
	0, 0, 323, -2, 419, 420, -2, 0, 442, 442,
	442, 0, 0, 420, 0, 428, 1035, 431, 919, 429,
	0, 0, 444, 443, 0, 424, 526, 0, 473, 0,
	2, 0, 1117, 526, 0, 1117, 911, 0, 0, 1117,
	0, 0, 136, 137, 916, 914, 915, 0, 0, 0,
	0, 909, 885, 883, 884, 0, 0, 0, 0, 532,
	87, 1117, 55, 1117, 904, 55, 1117, 95, 55, 1117,
	0, 116, 118, 947, 948, 949, 950, 1145, 0, 0,
	0, 0, 126, 0, 130, 132, 0, 0, 0, 363,
	153, 1106, 155, 0, 0, 159, 161, 162, 0, 0,
	0, 0, 0, 0, 173, 198, 199, 98, 0, 0,
	0, 219, 222, 0, 240, 0, 0, 0, 0, 0,
	0, 220, 223, 0, 226, 0, 228, 229, 0, 0,
	0, 0, 352, 365, 366, 353, 0, 361, 55, 530,
	296, 1117, 435, 296, 941, 435, 1117, -2, 0, 415,
	454, 455, 0, 0, 0, 0, 440, 441, 0, 0,
	0, 411, 412, 0, 430, 0, 0, 476, 896, 900,
	901, 630, 0, 0, 0, 0, 0, 0, 722, 724,
	1111, 1133, 0, 726, 727, 0, 729, 731, 732, 0,
	735, 736, 876, 908, 922, 923, 924, 925, 0, 0,
	928, 0, 930, 931, 932, 776, 745, -2, -2, 920,
	562, 563, 564, 565, -2, 1147, 749, 751, 753, 754,
	755, 756, 0, 1095, 1112, 1113, 1129, 1130, 1138, 1142,
	1143, 1117, 1126, 1118, 1107, 1115, 1124, 982, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 946,
	592, 593, 598, 599, 601, 476, 474, 527, 528, 0,
	0, 893, 891, 892, 32, 347, 34, 0, 347, 347,
	0, 0, 0, 0, 245, 0, 0, 247, 0, 0,
	0, 0, 0, 0, 517, 64, 65, 201, 202, 907,
	0, 881, 882, 517, 66, 77, 0, 0, 902, 886,
	536, 0, 386, 0, 0, 533, 0, 0, 89, 0,
	53, 54, 0, 91, 0, 0, 93, 0, 437, 0,
	0, 1117, 0, 437, 0, 834, 544, 545, 546, 547,
	548, 627, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 569, 570, 571, 572, 573, 574, 575,
	589, 0, 568, 568, 568, 581, 582, 590, 591, 596,
	597, 608, 609, 611, 613, 607, 607, 607, 604, 605,
	0, 832, 0, 141, 0, 0, 156, 0, 0, 0,
	0, 0, 165, 185, 186, 187, 166, 168, 175, 177,
	178, 179, 188, 189, 190, 191, 313, 0, 315, 933,
	0, 167, 169, 171, 172, 192, 193, 194, 195, 196,
	197, 0, 0, 99, 207, 205, 206, 210, 212, 0,
	237, 213, 214, 215, 216, 217, 224, 227, 230, 231,
	0, 0, 0, 0, 0, 360, 316, 0, 254, 0,
	0, 319, 434, 0, 0, 0, 1117, 940, 374, 0,
	418, 452, 453, 456, 460, 461, 464, 467, 468, 458,
	630, 425, 426, 427, 448, 449, 334, 432, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 811, 812, 813,
	814, 815, 816, 819, 820, 817, 818, 821, 822, 823,
	0, 0, 0, 824, 825, 826, 0, 0, 828, 0,
	830, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 899, 827, 635, 636, 637, 659, 660, 0, 723,
	887, 880, 725, 0, -2, 832, 0, 728, 733, 734,
	0, 0, 875, -2, 0, 927, 0, 627, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 595,
	606, 603, 602, 579, 0, 578, 576, 0, 580, 0,
	0, 0, 536, 0, 0, 895, 0, 0, 0, 0,
	346, 36, 1117, 0, 57, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 244, 0, 0, 0, 910, 0, 0, 0,
	69, 0, 917, 76, 0, 0, 0, 0, 398, 0,
	398, 388, 0, 0, 0, 398, 401, 402, 404, 405,
	0, 0, 534, 88, 905, 55, 96, 55, 55, 102,
	117, 0, 119, 122, 123, 124, 125, 120, 0, 537,
	539, 549, 0, 614, 615, 616, 617, 618, 619, 628,
	127, 0, 0, 0, 0, 158, 163, 164, 370, 0,
	182, 0, 184, 0, 314, 935, 934, 100, 239, 149,
	233, 234, 517, 367, 368, 531, 0, 0, 253, 916,
	255, 257, 258, 259, 260, 941, 0, 941, 0, 0,
	317, 0, 0, 0, 0, 376, 382, 0, 0, 462,
	0, 0, 459, 465, 466, 0, 451, 332, 333, 437,
	918, 470, 897, 517, 477, 0, 487, 526, 503, 492,
	0, 631, 540, 541, 583, 584, 585, 586, 587, 632,
	633, 0, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, -2, -2, -2, 651, 652, 653, -2, -2,
	-2, 657, 658, -2, 829, 831, 0, 890, 0, -2,
	0, -2, -2, -2, -2, 671, 0, 673, 676, 678,
	680, 0, 0, 0, 0, 889, 690, 867, 0, 0,
	808, 809, 810, 898, 675, 0, 0, 888, 879, 0,
	0, -2, 730, 0, 0, 0, 838, 839, 874, 870,
	0, 737, 447, 0, 0, 0, 0, 0, 936, 786,
	0, 0, 0, 750, 752, 0, 0, 0, 0, 842,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 832,
	852, 0, 0, 693, 0, 0, 0, 0, 1133, 0,
	832, 860, 0, 0, 0, 0, 0, 832, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 470, 529, 894, 35, 336, 0, 0, 0,
	38, 1117, 46, 0, 268, 0, 0, 0, 0, 0,
	349, 47, 1117, 55, 1117, 55, 48, 33, 347, 241,
	0, 242, 0, 340, 0, 335, 338, 0, 76, 0,
	0, 63, 0, 67, 78, 0, 903, 86, 0, 535,
	383, 398, 0, 0, 390, 387, 385, 536, 0, 0,
	0, 0, 90, 92, 94, 0, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 133, 134, 154, 180,
	181, 183, 176, 0, 235, 262, 295, 0, 0, 941,
	0, 251, 296, 318, 320, 0, 0, 378, 382, 0,
	381, 435, 0, 0, 450, 0, 472, 0, 475, 0,
	0, 0, 0, 0, 523, 523, 523, 521, 497, 437,
	0, 503, 0, 0, 515, 0, -2, 492, 0, 0,
	-2, -2, 0, 0, 0, 691, -2, 672, 674, 677,
	679, 681, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 0, 877, 880, -2, 833, 836, 837, 0, 0,
	871, 0, 0, 0, 0, 446, 447, 447, 447, 743,
	0, 744, 0, 0, 0, 0, 0, 0, 759, 0,
	760, 761, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 697,
	698, 0, 0, 763, 858, 859, 0, 0, 0, 0,
	0, 0, 768, 0, 865, 0, 0, 0, 772, 773,
	774, 0, 566, 0, 588, 610, 612, 600, 472, 0,
	0, 0, 0, 56, 266, 285, 0, 0, 325, 331,
	331, 0, 746, 747, 0, 0, 0, 40, 0, 0,
	0, 0, 44, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 79, 396, 397, 384,
	395, 0, 398, 403, 400, 406, 0, 542, 0, 0,
	550, 620, 621, 622, 623, 624, 625, 626, 0, 150,
	249, 0, 256, 0, 0, 0, 254, 0, 0, 0,
	380, 382, 0, 373, 374, 457, 463, 433, 780, 0,
	0, 478, 0, 0, 0, 0, 0, 518, 522, 519,
	520, 0, 0, 0, 0, 503, 515, 484, 0, 0,
	0, 491, 514, 0, 513, 502, -2, 634, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 868, 0, 803,
	0, 0, 879, -2, 840, 869, 873, 0, 738, 0,
	0, 0, 0, 929, 784, 785, 789, 0, 0, 748,
	0, 0, 841, 851, 853, 694, 695, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, -2, -2, -2,
	712, 713, 714, -2, -2, -2, 0, 0, 0, 854,
	0, 0, 806, 856, 857, 862, 863, 0, 765, 766,
	767, 864, 0, 0, 0, 594, 0, 780, 342, 344,
	37, 0, 267, 0, 270, 0, 0, 0, 0, 276,
	277, 0, 0, 0, 0, 287, 294, 0, 334, 921,
	0, 334, 0, 0, 0, 0, 0, 52, 0, 0,
	348, 0, 55, 55, 337, 0, 0, 0, 0, 341,
	339, 68, 0, 0, 0, 0, 0, 389, 399, 0,
	543, 538, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 382, 0, 375, 376, 421, 0, 471, 469,
	505, 0, 507, 0, 0, 0, 509, 487, 498, 0,
	500, 503, 0, 515, 489, 0, 0, 482, 0, 481,
	503, 511, 0, 0, 0, 0, -2, 0, 684, -2,
	-2, 802, 833, 878, 872, 926, 447, 739, 741, 742,
	791, 788, 0, 775, 757, 758, 850, 0, 0, 0,
	0, 833, 805, 764, 0, 770, 771, 567, 422, 39,
	0, 271, 272, 941, 0, 275, 278, 0, 280, 943,
	262, 0, 291, 292, 326, 327, 330, 328, 331, 447,
	289, 0, 41, 42, 51, 59, 43, 49, 0, 0,
	0, 0, 516, 0, 0, 0, 73, 71, 0, 0,
	0, 407, 408, 0, 0, 294, 0, 284, 262, 252,
	294, 0, 0, 377, 378, 779, 781, 0, 506, 0,
	525, 508, 503, 499, 0, 515, 437, 496, 485, 0,
	486, 0, 515, 0, 0, 493, -2, -2, 685, 804,
	0, 447, 0, 777, -2, 0, 0, 0, 807, 0,
	269, 273, 0, 0, 300, 0, 288, 0, 334, 0,
	0, 61, 0, 343, 345, 0, 0, 0, 0, 75,
	72, 0, 0, 392, 536, 394, 0, 262, 294, 250,
	262, 0, 379, 380, 0, 0, 0, 0, 501, 494,
	0, 483, 479, 0, 490, 0, 512, 740, 794, 0,
	-2, 0, 720, 769, 0, 279, 305, 0, 0, 0,
	329, 738, 296, 45, 0, 58, 0, 0, 447, 74,
	70, 0, 393, 0, 282, 262, 321, 0, 372, 782,
	783, 524, 488, 503, 0, 510, 0, 0, 0, 790,
	721, 0, 281, 301, 302, 0, 297, 298, 299, 942,
	293, 300, 60, 246, 248, 0, 536, 0, 283, 294,
	515, 480, 787, 792, 795, -2, 1081, 974, 0, 793,
	274, 303, 0, 304, 0, 0, 0, 305, 0, 391,
	265, 262, 495, 0, 797, 798, 799, 800, 801, 306,
	0, 309, 310, 0, 307, 290, 261, 263, 264, 322,
	0, 308, 311, 312, 796,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 320, 3, 326, 321, 3,
	331, 332, 324, 322, 335, 323, 333, 325, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 339, 334,
	314, 316, 315, 3, 336, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 329, 3, 330, 327, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 337, 319, 338, 317,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 318, 57657, 328, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex, "alter using")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex, "set local")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex, "set from current")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex, "set names")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1684
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1708
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1712
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1716
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1759
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1763
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1769
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1773
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1781
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = DropDefault
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex, "match full")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			return unimplemented(sqllex, "match partial")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex, "match simple")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2074
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return unimplemented(sqllex, "no action")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return unimplemented(sqllex, "action set null")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return unimplemented(sqllex, "action set default")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = true
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = false
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2207
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2211
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = Ascending
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = Descending
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2265
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2266
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = true
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = false
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2280
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.str = ""
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.str = ""
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.str = ""
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.str = ""
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.str = ""
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2446
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2510
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2522
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2781
		{
			return unimplemented(sqllex, "cte")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2785
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2789
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = true
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = false
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = false
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = true
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &From{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3022
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3067
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3084
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = nil
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = true
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = false
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.str = astFullJoin
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.str = astLeftJoin
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = astRightJoin
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.str = astInnerJoin
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3269
		{
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3355
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3368
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3383
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3464
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = nil
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3513
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3609
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = year
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = month
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = day
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = hour
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = minute
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = month
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = hour
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = minute
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = minute
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = nil
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = second
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3811
		{
			return unimplemented(sqllex, "at tz")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4045
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4271
		{
			return unimplemented(sqllex, "variadic")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4272
		{
			return unimplemented(sqllex, "variadic")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4295
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4311
		{
			return unimplemented(sqllex, "func_application")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4316
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			return unimplemented(sqllex, "current role")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			return unimplemented(sqllex, "current user")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			return unimplemented(sqllex, "session user")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			return unimplemented(sqllex, "user")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4365
		{
			return unimplemented(sqllex, "treat")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex, "within group")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4410
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = Window(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4445
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			return unimplemented(sqllex, "frame range")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4509
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4513
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4521
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4522
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = Any
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = Some
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = All
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = Plus
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = Minus
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = Mult
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = Div
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = FloorDiv
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = Mod
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = Bitand
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = Bitor
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Pow
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = Bitxor
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = LT
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = GT
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = EQ
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = LE
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = GE
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = NE
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = Like
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = NotLike
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = ILike
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = NotILike
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4888
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5050
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5086
		{
			return unimplemented(sqllex, "func const")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5095
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = DNull
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.str = ""
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
