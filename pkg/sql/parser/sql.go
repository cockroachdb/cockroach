// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INET = 57482
const INTERLEAVE = 57483
const INDEX = 57484
const INDEXES = 57485
const INITIALLY = 57486
const INNER = 57487
const INSERT = 57488
const INT = 57489
const INT2VECTOR = 57490
const INT2 = 57491
const INT4 = 57492
const INT8 = 57493
const INT64 = 57494
const INTEGER = 57495
const INTERSECT = 57496
const INTERVAL = 57497
const INTO = 57498
const IS = 57499
const ISOLATION = 57500
const JOB = 57501
const JOBS = 57502
const JOIN = 57503
const KEY = 57504
const KEYS = 57505
const KV = 57506
const LATERAL = 57507
const LC_CTYPE = 57508
const LC_COLLATE = 57509
const LEADING = 57510
const LEAST = 57511
const LEFT = 57512
const LEVEL = 57513
const LIKE = 57514
const LIMIT = 57515
const LOCAL = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const LOW = 57519
const LSHIFT = 57520
const MATCH = 57521
const MINUTE = 57522
const MONTH = 57523
const NAN = 57524
const NAME = 57525
const NAMES = 57526
const NATURAL = 57527
const NEXT = 57528
const NO = 57529
const NO_INDEX_JOIN = 57530
const NORMAL = 57531
const NOT = 57532
const NOTHING = 57533
const NULL = 57534
const NULLIF = 57535
const NULLS = 57536
const NUMERIC = 57537
const OF = 57538
const OFF = 57539
const OFFSET = 57540
const OID = 57541
const ON = 57542
const ONLY = 57543
const OPTIONS = 57544
const OR = 57545
const ORDER = 57546
const ORDINALITY = 57547
const OUT = 57548
const OUTER = 57549
const OVER = 57550
const OVERLAPS = 57551
const OVERLAY = 57552
const PARENT = 57553
const PARTIAL = 57554
const PARTITION = 57555
const PASSWORD = 57556
const PAUSE = 57557
const PLACING = 57558
const PLANS = 57559
const POSITION = 57560
const PRECEDING = 57561
const PRECISION = 57562
const PREPARE = 57563
const PRIMARY = 57564
const PRIORITY = 57565
const QUERIES = 57566
const QUERY = 57567
const RANGE = 57568
const READ = 57569
const REAL = 57570
const RECURSIVE = 57571
const REF = 57572
const REFERENCES = 57573
const REGCLASS = 57574
const REGPROC = 57575
const REGPROCEDURE = 57576
const REGNAMESPACE = 57577
const REGTYPE = 57578
const RENAME = 57579
const REPEATABLE = 57580
const RELEASE = 57581
const RESET = 57582
const RESTORE = 57583
const RESTRICT = 57584
const RESUME = 57585
const RETURNING = 57586
const REVOKE = 57587
const RIGHT = 57588
const ROLLBACK = 57589
const ROLLUP = 57590
const ROW = 57591
const ROWS = 57592
const RSHIFT = 57593
const SAVEPOINT = 57594
const SCATTER = 57595
const SEARCH = 57596
const SECOND = 57597
const SELECT = 57598
const SEQUENCES = 57599
const SERIAL = 57600
const SERIALIZABLE = 57601
const SESSION = 57602
const SESSIONS = 57603
const SESSION_USER = 57604
const SET = 57605
const SETTING = 57606
const SETTINGS = 57607
const SHOW = 57608
const SIMILAR = 57609
const SIMPLE = 57610
const SMALLINT = 57611
const SMALLSERIAL = 57612
const SNAPSHOT = 57613
const SOME = 57614
const SPLIT = 57615
const SQL = 57616
const START = 57617
const STATUS = 57618
const STDIN = 57619
const STRICT = 57620
const STRING = 57621
const STORE = 57622
const STORING = 57623
const SUBSTRING = 57624
const SYMMETRIC = 57625
const SYSTEM = 57626
const TABLE = 57627
const TABLES = 57628
const TEMP = 57629
const TEMPLATE = 57630
const TEMPORARY = 57631
const TESTING_RANGES = 57632
const TESTING_RELOCATE = 57633
const TEXT = 57634
const THEN = 57635
const TIME = 57636
const TIMESTAMP = 57637
const TIMESTAMPTZ = 57638
const TO = 57639
const TRAILING = 57640
const TRACE = 57641
const TRANSACTION = 57642
const TREAT = 57643
const TRIM = 57644
const TRUE = 57645
const TRUNCATE = 57646
const TYPE = 57647
const UNBOUNDED = 57648
const UNCOMMITTED = 57649
const UNION = 57650
const UNIQUE = 57651
const UNKNOWN = 57652
const UPDATE = 57653
const UPSERT = 57654
const USE = 57655
const USER = 57656
const USERS = 57657
const USING = 57658
const UUID = 57659
const VALID = 57660
const VALIDATE = 57661
const VALUE = 57662
const VALUES = 57663
const VARCHAR = 57664
const VARIADIC = 57665
const VIEW = 57666
const VARYING = 57667
const WHEN = 57668
const WHERE = 57669
const WINDOW = 57670
const WITH = 57671
const WITHIN = 57672
const WITHOUT = 57673
const WRITE = 57674
const YEAR = 57675
const ZONE = 57676
const NOT_LA = 57677
const WITH_LA = 57678
const AS_LA = 57679
const POSTFIXOP = 57680
const UMINUS = 57681
const HELPTOKEN = 57682

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6522

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	359, 53,
	-2, 672,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	142, 525,
	-2, 0,
	-1, 61,
	92, 672,
	146, 672,
	311, 672,
	312, 672,
	-2, 0,
	-1, 71,
	103, 647,
	112, 647,
	154, 647,
	173, 647,
	198, 647,
	204, 647,
	308, 647,
	-2, 636,
	-1, 103,
	4, 674,
	20, 674,
	21, 674,
	23, 674,
	28, 674,
	33, 674,
	34, 674,
	35, 674,
	36, 674,
	37, 674,
	38, 674,
	39, 674,
	40, 674,
	41, 674,
	42, 674,
	44, 674,
	45, 674,
	46, 674,
	47, 674,
	48, 674,
	51, 674,
	52, 674,
	53, 674,
	55, 674,
	56, 674,
	60, 674,
	61, 674,
	62, 674,
	64, 674,
	66, 674,
	67, 674,
	68, 674,
	71, 674,
	72, 674,
	73, 674,
	81, 674,
	82, 674,
	83, 674,
	84, 674,
	85, 674,
	86, 674,
	87, 674,
	88, 674,
	90, 674,
	92, 674,
	94, 674,
	97, 674,
	98, 674,
	100, 674,
	104, 674,
	105, 674,
	106, 674,
	107, 674,
	108, 674,
	109, 674,
	113, 674,
	114, 674,
	115, 674,
	116, 674,
	117, 674,
	119, 674,
	121, 674,
	126, 674,
	127, 674,
	129, 674,
	132, 674,
	133, 674,
	134, 674,
	135, 674,
	136, 674,
	137, 674,
	140, 674,
	141, 674,
	143, 674,
	146, 674,
	147, 674,
	148, 674,
	149, 674,
	150, 674,
	151, 674,
	152, 674,
	153, 674,
	155, 674,
	158, 674,
	159, 674,
	160, 674,
	162, 674,
	163, 674,
	164, 674,
	166, 674,
	167, 674,
	169, 674,
	171, 674,
	174, 674,
	177, 674,
	179, 674,
	180, 674,
	181, 674,
	182, 674,
	183, 674,
	184, 674,
	186, 674,
	187, 674,
	188, 674,
	189, 674,
	193, 674,
	194, 674,
	195, 674,
	196, 674,
	197, 674,
	199, 674,
	201, 674,
	202, 674,
	205, 674,
	206, 674,
	208, 674,
	210, 674,
	211, 674,
	212, 674,
	213, 674,
	214, 674,
	215, 674,
	217, 674,
	218, 674,
	219, 674,
	220, 674,
	221, 674,
	223, 674,
	224, 674,
	225, 674,
	226, 674,
	227, 674,
	228, 674,
	229, 674,
	230, 674,
	232, 674,
	233, 674,
	234, 674,
	235, 674,
	236, 674,
	237, 674,
	238, 674,
	239, 674,
	240, 674,
	241, 674,
	242, 674,
	243, 674,
	245, 674,
	247, 674,
	248, 674,
	249, 674,
	250, 674,
	252, 674,
	253, 674,
	254, 674,
	255, 674,
	257, 674,
	258, 674,
	259, 674,
	260, 674,
	261, 674,
	263, 674,
	264, 674,
	265, 674,
	266, 674,
	268, 674,
	269, 674,
	270, 674,
	271, 674,
	273, 674,
	274, 674,
	275, 674,
	276, 674,
	277, 674,
	278, 674,
	279, 674,
	280, 674,
	281, 674,
	282, 674,
	284, 674,
	286, 674,
	287, 674,
	288, 674,
	289, 674,
	290, 674,
	291, 674,
	292, 674,
	294, 674,
	295, 674,
	296, 674,
	299, 674,
	300, 674,
	301, 674,
	302, 674,
	304, 674,
	305, 674,
	306, 674,
	307, 674,
	310, 674,
	311, 674,
	312, 674,
	313, 674,
	315, 674,
	317, 674,
	318, 674,
	319, 674,
	320, 674,
	321, 674,
	322, 674,
	325, 674,
	330, 674,
	331, 674,
	332, 674,
	333, 674,
	334, 674,
	-2, 0,
	-1, 116,
	103, 646,
	112, 646,
	154, 646,
	173, 646,
	198, 646,
	204, 646,
	308, 646,
	-2, 639,
	-1, 121,
	1, 574,
	158, 574,
	223, 574,
	227, 574,
	358, 574,
	359, 574,
	-2, 0,
	-1, 123,
	1, 574,
	358, 574,
	359, 574,
	-2, 0,
	-1, 124,
	1, 574,
	358, 574,
	359, 574,
	-2, 0,
	-1, 125,
	1, 578,
	358, 578,
	359, 578,
	-2, 0,
	-1, 132,
	4, 680,
	5, 680,
	6, 680,
	7, 680,
	8, 680,
	9, 680,
	20, 680,
	21, 680,
	23, 680,
	28, 680,
	29, 680,
	33, 680,
	34, 680,
	35, 680,
	36, 680,
	37, 680,
	38, 680,
	39, 680,
	40, 680,
	41, 680,
	42, 680,
	44, 680,
	45, 680,
	46, 680,
	47, 680,
	48, 680,
	49, 680,
	50, 680,
	51, 680,
	52, 680,
	53, 680,
	55, 680,
	56, 680,
	58, 680,
	60, 680,
	61, 680,
	62, 680,
	64, 680,
	66, 680,
	67, 680,
	68, 680,
	70, 680,
	71, 680,
	72, 680,
	73, 680,
	75, 680,
	76, 680,
	77, 680,
	79, 680,
	80, 680,
	81, 680,
	82, 680,
	83, 680,
	84, 680,
	85, 680,
	86, 680,
	87, 680,
	88, 680,
	90, 680,
	92, 680,
	94, 680,
	97, 680,
	98, 680,
	100, 680,
	104, 680,
	105, 680,
	106, 680,
	107, 680,
	108, 680,
	109, 680,
	110, 680,
	113, 680,
	114, 680,
	115, 680,
	116, 680,
	117, 680,
	119, 680,
	121, 680,
	124, 680,
	126, 680,
	127, 680,
	129, 680,
	132, 680,
	133, 680,
	134, 680,
	135, 680,
	136, 680,
	137, 680,
	138, 680,
	140, 680,
	141, 680,
	143, 680,
	145, 680,
	146, 680,
	147, 680,
	148, 680,
	149, 680,
	150, 680,
	151, 680,
	152, 680,
	153, 680,
	155, 680,
	157, 680,
	158, 680,
	159, 680,
	160, 680,
	161, 680,
	162, 680,
	163, 680,
	164, 680,
	166, 680,
	167, 680,
	169, 680,
	170, 680,
	171, 680,
	172, 680,
	174, 680,
	177, 680,
	179, 680,
	180, 680,
	181, 680,
	182, 680,
	183, 680,
	184, 680,
	185, 680,
	186, 680,
	187, 680,
	188, 680,
	189, 680,
	190, 680,
	192, 680,
	193, 680,
	194, 680,
	195, 680,
	196, 680,
	197, 680,
	199, 680,
	202, 680,
	205, 680,
	206, 680,
	207, 680,
	208, 680,
	209, 680,
	210, 680,
	211, 680,
	212, 680,
	213, 680,
	214, 680,
	215, 680,
	217, 680,
	218, 680,
	219, 680,
	220, 680,
	221, 680,
	223, 680,
	224, 680,
	225, 680,
	226, 680,
	227, 680,
	228, 680,
	229, 680,
	230, 680,
	232, 680,
	233, 680,
	234, 680,
	235, 680,
	236, 680,
	237, 680,
	238, 680,
	239, 680,
	240, 680,
	241, 680,
	242, 680,
	243, 680,
	245, 680,
	246, 680,
	247, 680,
	248, 680,
	249, 680,
	250, 680,
	252, 680,
	253, 680,
	254, 680,
	255, 680,
	257, 680,
	258, 680,
	259, 680,
	260, 680,
	261, 680,
	262, 680,
	263, 680,
	264, 680,
	265, 680,
	266, 680,
	267, 680,
	268, 680,
	269, 680,
	270, 680,
	271, 680,
	273, 680,
	274, 680,
	275, 680,
	276, 680,
	277, 680,
	278, 680,
	279, 680,
	280, 680,
	281, 680,
	282, 680,
	284, 680,
	286, 680,
	287, 680,
	288, 680,
	289, 680,
	290, 680,
	291, 680,
	292, 680,
	294, 680,
	295, 680,
	296, 680,
	299, 680,
	300, 680,
	301, 680,
	302, 680,
	303, 680,
	304, 680,
	305, 680,
	306, 680,
	307, 680,
	310, 680,
	311, 680,
	312, 680,
	313, 680,
	314, 680,
	315, 680,
	317, 680,
	318, 680,
	319, 680,
	320, 680,
	321, 680,
	322, 680,
	325, 680,
	330, 680,
	331, 680,
	332, 680,
	333, 680,
	334, 680,
	335, 680,
	341, 680,
	346, 680,
	347, 680,
	348, 680,
	355, 680,
	361, 680,
	-2, 0,
	-1, 135,
	1, 53,
	359, 53,
	-2, 672,
	-1, 495,
	123, 1272,
	297, 1272,
	340, 1272,
	357, 1272,
	-2, 0,
	-1, 496,
	123, 1225,
	297, 1225,
	340, 1225,
	357, 1225,
	-2, 0,
	-1, 498,
	123, 1330,
	297, 1330,
	340, 1330,
	357, 1330,
	-2, 0,
	-1, 500,
	123, 1352,
	297, 1352,
	340, 1352,
	357, 1352,
	-2, 0,
	-1, 507,
	123, 1277,
	297, 1277,
	340, 1277,
	357, 1277,
	-2, 317,
	-1, 533,
	1, 394,
	354, 394,
	356, 394,
	358, 394,
	359, 394,
	-2, 0,
	-1, 534,
	1, 441,
	120, 441,
	354, 441,
	356, 441,
	358, 441,
	359, 441,
	-2, 0,
	-1, 540,
	1, 408,
	354, 408,
	356, 408,
	358, 408,
	359, 408,
	-2, 0,
	-1, 542,
	1, 412,
	354, 412,
	356, 412,
	358, 412,
	359, 412,
	-2, 0,
	-1, 545,
	1, 420,
	354, 420,
	356, 420,
	358, 420,
	359, 420,
	-2, 0,
	-1, 546,
	1, 425,
	354, 425,
	356, 425,
	358, 425,
	359, 425,
	-2, 0,
	-1, 549,
	1, 435,
	354, 435,
	356, 435,
	358, 435,
	359, 435,
	-2, 0,
	-1, 563,
	112, 682,
	173, 682,
	198, 682,
	-2, 642,
	-1, 566,
	112, 681,
	173, 681,
	198, 681,
	-2, 640,
	-1, 623,
	355, 1203,
	-2, 1196,
	-1, 624,
	355, 1204,
	-2, 1197,
	-1, 630,
	5, 858,
	355, 858,
	-2, 1404,
	-1, 655,
	5, 817,
	-2, 1373,
	-1, 656,
	5, 852,
	355, 852,
	-2, 1375,
	-1, 657,
	5, 827,
	-2, 1376,
	-1, 658,
	5, 826,
	-2, 1377,
	-1, 659,
	5, 852,
	355, 852,
	-2, 1380,
	-1, 660,
	5, 852,
	355, 852,
	-2, 1381,
	-1, 661,
	5, 853,
	-2, 1384,
	-1, 662,
	5, 809,
	-2, 1385,
	-1, 663,
	5, 809,
	-2, 1386,
	-1, 664,
	5, 834,
	-2, 1390,
	-1, 665,
	5, 819,
	-2, 1391,
	-1, 666,
	5, 820,
	-2, 1392,
	-1, 667,
	5, 810,
	-2, 1398,
	-1, 668,
	5, 811,
	-2, 1399,
	-1, 669,
	5, 812,
	-2, 1400,
	-1, 670,
	5, 813,
	-2, 1401,
	-1, 671,
	5, 814,
	-2, 1402,
	-1, 672,
	5, 815,
	-2, 1403,
	-1, 673,
	5, 809,
	-2, 1408,
	-1, 674,
	5, 818,
	-2, 1413,
	-1, 675,
	5, 816,
	-2, 1416,
	-1, 676,
	5, 850,
	355, 850,
	-2, 1418,
	-1, 677,
	5, 854,
	-2, 1421,
	-1, 678,
	5, 856,
	-2, 1422,
	-1, 679,
	5, 849,
	355, 849,
	-2, 1427,
	-1, 774,
	214, 670,
	-2, 518,
	-1, 778,
	200, 1200,
	-2, 0,
	-1, 813,
	1, 208,
	354, 208,
	356, 208,
	358, 208,
	359, 208,
	-2, 645,
	-1, 820,
	4, 1426,
	10, 1426,
	11, 1426,
	13, 1426,
	14, 1426,
	15, 1426,
	16, 1426,
	17, 1426,
	18, 1426,
	20, 1426,
	21, 1426,
	23, 1426,
	26, 1426,
	28, 1426,
	30, 1426,
	33, 1426,
	34, 1426,
	35, 1426,
	36, 1426,
	37, 1426,
	38, 1426,
	39, 1426,
	40, 1426,
	41, 1426,
	42, 1426,
	44, 1426,
	45, 1426,
	46, 1426,
	47, 1426,
	48, 1426,
	51, 1426,
	52, 1426,
	53, 1426,
	55, 1426,
	56, 1426,
	57, 1426,
	60, 1426,
	61, 1426,
	62, 1426,
	63, 1426,
	64, 1426,
	66, 1426,
	67, 1426,
	68, 1426,
	70, 1426,
	71, 1426,
	72, 1426,
	73, 1426,
	81, 1426,
	82, 1426,
	83, 1426,
	84, 1426,
	85, 1426,
	86, 1426,
	87, 1426,
	88, 1426,
	90, 1426,
	92, 1426,
	94, 1426,
	97, 1426,
	98, 1426,
	100, 1426,
	104, 1426,
	105, 1426,
	106, 1426,
	107, 1426,
	108, 1426,
	109, 1426,
	113, 1426,
	114, 1426,
	115, 1426,
	116, 1426,
	117, 1426,
	118, 1426,
	119, 1426,
	121, 1426,
	124, 1426,
	126, 1426,
	127, 1426,
	129, 1426,
	132, 1426,
	133, 1426,
	134, 1426,
	135, 1426,
	136, 1426,
	137, 1426,
	138, 1426,
	139, 1426,
	140, 1426,
	141, 1426,
	143, 1426,
	145, 1426,
	146, 1426,
	147, 1426,
	148, 1426,
	149, 1426,
	150, 1426,
	151, 1426,
	152, 1426,
	153, 1426,
	155, 1426,
	157, 1426,
	158, 1426,
	159, 1426,
	160, 1426,
	161, 1426,
	162, 1426,
	163, 1426,
	164, 1426,
	166, 1426,
	167, 1426,
	169, 1426,
	170, 1426,
	171, 1426,
	172, 1426,
	174, 1426,
	177, 1426,
	178, 1426,
	179, 1426,
	180, 1426,
	181, 1426,
	182, 1426,
	183, 1426,
	184, 1426,
	185, 1426,
	186, 1426,
	187, 1426,
	188, 1426,
	189, 1426,
	193, 1426,
	194, 1426,
	195, 1426,
	196, 1426,
	197, 1426,
	199, 1426,
	202, 1426,
	203, 1426,
	205, 1426,
	206, 1426,
	208, 1426,
	210, 1426,
	211, 1426,
	212, 1426,
	213, 1426,
	214, 1426,
	215, 1426,
	217, 1426,
	218, 1426,
	219, 1426,
	220, 1426,
	221, 1426,
	223, 1426,
	224, 1426,
	225, 1426,
	226, 1426,
	227, 1426,
	228, 1426,
	229, 1426,
	230, 1426,
	232, 1426,
	233, 1426,
	234, 1426,
	235, 1426,
	236, 1426,
	237, 1426,
	238, 1426,
	239, 1426,
	240, 1426,
	241, 1426,
	242, 1426,
	243, 1426,
	245, 1426,
	246, 1426,
	247, 1426,
	248, 1426,
	249, 1426,
	250, 1426,
	251, 1426,
	252, 1426,
	253, 1426,
	254, 1426,
	255, 1426,
	257, 1426,
	258, 1426,
	259, 1426,
	260, 1426,
	261, 1426,
	263, 1426,
	264, 1426,
	265, 1426,
	266, 1426,
	267, 1426,
	268, 1426,
	269, 1426,
	270, 1426,
	271, 1426,
	273, 1426,
	274, 1426,
	275, 1426,
	276, 1426,
	277, 1426,
	278, 1426,
	279, 1426,
	280, 1426,
	281, 1426,
	282, 1426,
	284, 1426,
	286, 1426,
	287, 1426,
	288, 1426,
	289, 1426,
	290, 1426,
	291, 1426,
	292, 1426,
	294, 1426,
	295, 1426,
	296, 1426,
	299, 1426,
	300, 1426,
	301, 1426,
	302, 1426,
	304, 1426,
	305, 1426,
	306, 1426,
	307, 1426,
	310, 1426,
	311, 1426,
	312, 1426,
	313, 1426,
	315, 1426,
	317, 1426,
	318, 1426,
	319, 1426,
	320, 1426,
	321, 1426,
	322, 1426,
	325, 1426,
	330, 1426,
	331, 1426,
	332, 1426,
	333, 1426,
	334, 1426,
	335, 1426,
	336, 1426,
	338, 1426,
	339, 1426,
	340, 1426,
	341, 1426,
	343, 1426,
	344, 1426,
	345, 1426,
	346, 1426,
	347, 1426,
	348, 1426,
	349, 1426,
	350, 1426,
	351, 1426,
	353, 1426,
	356, 1426,
	357, 1426,
	360, 1426,
	361, 1426,
	-2, 0,
	-1, 834,
	123, 1330,
	297, 1330,
	340, 1330,
	357, 1330,
	-2, 0,
	-1, 851,
	123, 1352,
	297, 1352,
	340, 1352,
	357, 1352,
	-2, 0,
	-1, 921,
	112, 681,
	173, 681,
	198, 681,
	-2, 643,
	-1, 990,
	103, 647,
	112, 647,
	154, 647,
	173, 647,
	198, 647,
	204, 647,
	308, 647,
	-2, 977,
	-1, 1000,
	355, 1180,
	-2, 1168,
	-1, 1018,
	356, 1120,
	-2, 0,
	-1, 1074,
	103, 647,
	112, 647,
	154, 647,
	173, 647,
	198, 647,
	204, 647,
	308, 647,
	-2, 743,
	-1, 1395,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 893,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 894,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 895,
	-1, 1401,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 899,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 900,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 901,
	-1, 1406,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 906,
	-1, 1412,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 908,
	-1, 1414,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 912,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 913,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 914,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 915,
	-1, 1443,
	209, 1062,
	-2, 1065,
	-1, 1487,
	123, 1102,
	355, 1203,
	-2, 1196,
	-1, 1488,
	123, 1103,
	-2, 1369,
	-1, 1489,
	123, 1104,
	-2, 1276,
	-1, 1490,
	123, 1105,
	-2, 1240,
	-1, 1491,
	123, 1106,
	-2, 1256,
	-1, 1492,
	123, 1107,
	-2, 1275,
	-1, 1493,
	123, 1108,
	-2, 1327,
	-1, 1569,
	1, 744,
	70, 744,
	103, 744,
	112, 744,
	124, 744,
	128, 744,
	130, 744,
	145, 744,
	154, 744,
	161, 744,
	170, 744,
	173, 744,
	185, 744,
	198, 744,
	200, 744,
	204, 744,
	244, 744,
	246, 744,
	308, 744,
	316, 744,
	327, 744,
	328, 744,
	337, 744,
	354, 744,
	356, 744,
	358, 744,
	359, 744,
	360, 744,
	-2, 743,
	-1, 1709,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 907,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 909,
	-1, 1715,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 910,
	-1, 1733,
	209, 1061,
	-2, 1064,
	-1, 1958,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 911,
	-1, 1963,
	157, 0,
	-2, 927,
	-1, 1973,
	209, 1063,
	-2, 1066,
	-1, 2015,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 954,
	-1, 2016,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 955,
	-1, 2017,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 956,
	-1, 2021,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 960,
	-1, 2022,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 961,
	-1, 2023,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 962,
	-1, 2148,
	157, 0,
	-2, 928,
	-1, 2151,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 931,
	-1, 2152,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 933,
	-1, 2268,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 932,
	-1, 2269,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 934,
	-1, 2276,
	157, 0,
	-2, 963,
	-1, 2353,
	157, 0,
	-2, 964,
	-1, 2430,
	36, 0,
	138, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 1372,
}

const sqlPrivate = 57344

const sqlLast = 41254

var sqlAct = [...]int{

	624, 2104, 2429, 2438, 2404, 2302, 2477, 2439, 1992, 1940,
	2440, 2358, 2249, 1632, 1612, 2428, 1640, 1198, 1291, 2202,
	567, 70, 2114, 583, 2216, 2136, 1292, 1205, 614, 1240,
	2075, 1703, 1906, 2138, 622, 872, 600, 1908, 2076, 726,
	173, 1629, 1103, 1611, 173, 768, 1847, 1799, 2282, 2130,
	1914, 1564, 173, 1068, 1072, 453, 25, 2182, 1826, 1615,
	1051, 173, 1641, 1201, 1573, 621, 173, 173, 1582, 1834,
	173, 1374, 1798, 173, 1565, 1467, 1441, 1605, 438, 2046,
	996, 173, 1369, 1744, 855, 575, 115, 1699, 924, 1194,
	1080, 1616, 1082, 1052, 599, 1451, 1318, 435, 1322, 1516,
	594, 1429, 587, 803, 506, 1426, 1613, 1032, 732, 1461,
	1687, 854, 1028, 874, 814, 1077, 800, 793, 1634, 1619,
	735, 1551, 1059, 1538, 985, 714, 593, 173, 173, 116,
	1483, 923, 925, 164, 1321, 173, 486, 464, 392, 616,
	572, 117, 503, 1042, 499, 1212, 1218, 115, 790, 169,
	712, 1041, 2217, 527, 929, 2060, 1732, 1220, 2061, 858,
	1220, 173, 173, 173, 173, 1633, 2473, 2454, 173, 173,
	1102, 2215, 2450, 571, 571, 1069, 1655, 2449, 1220, 940,
	941, 1655, 2446, 756, 2426, 2425, 1102, 1655, 1670, 1670,
	2399, 25, 2394, 2390, 1663, 2400, 2263, 1102, 1923, 1241,
	478, 566, 943, 2382, 2355, 2333, 2330, 2215, 1663, 2215,
	1102, 2328, 2313, 2312, 2290, 2215, 1102, 2215, 1102, 581,
	1956, 115, 1099, 2287, 859, 1924, 942, 1102, 860, 733,
	2270, 2237, 957, 2235, 1663, 1655, 2214, 1655, 2195, 2175,
	2215, 1606, 1102, 1655, 2153, 564, 1519, 2150, 1655, 1670,
	729, 1663, 2263, 617, 1540, 742, 746, 563, 752, 2129,
	38, 2124, 2056, 1610, 2049, 1610, 2057, 750, 1967, 740,
	744, 39, 1655, 576, 2049, 1934, 1895, 1850, 716, 1896,
	1102, 1655, 1823, 1539, 42, 1816, 1102, 948, 1814, 1817,
	1813, 1812, 1655, 1951, 1655, 1655, 940, 941, 1606, 960,
	961, 962, 970, 971, 972, 1736, 48, 1735, 1571, 2028,
	1733, 1737, 963, 1655, 1655, 718, 1674, 719, 1970, 943,
	1655, 1670, 974, 1102, 1896, 1702, 1685, 940, 941, 1655,
	1743, 1046, 1464, 1445, 754, 59, 1662, 1769, 1770, 836,
	1663, 1654, 60, 942, 61, 1655, 135, 958, 1609, 957,
	943, 1221, 1610, 1545, 1221, 760, 2218, 1544, 833, 940,
	941, 1299, 960, 961, 962, 970, 971, 972, 1319, 1233,
	832, 63, 1221, 1234, 942, 963, 831, 830, 829, 1465,
	828, 827, 943, 826, 132, 974, 825, 824, 823, 822,
	1784, 720, 717, 559, 558, 557, 525, 524, 523, 522,
	173, 521, 173, 173, 948, 173, 942, 520, 519, 518,
	173, 517, 957, 134, 516, 515, 173, 514, 513, 512,
	959, 511, 510, 509, 967, 975, 1466, 1463, 494, 173,
	173, 173, 173, 173, 493, 948, 492, 491, 817, 490,
	426, 425, 424, 973, 423, 1775, 422, 807, 407, 133,
	406, 398, 64, 397, 396, 395, 388, 387, 965, 572,
	173, 158, 1923, 132, 958, 157, 156, 948, 155, 1226,
	2472, 154, 1219, 173, 153, 152, 151, 119, 66, 150,
	67, 574, 149, 118, 148, 940, 941, 967, 975, 173,
	1353, 1539, 134, 132, 147, 958, 146, 1689, 145, 173,
	459, 1468, 144, 99, 772, 1785, 973, 776, 943, 143,
	746, 142, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 965, 134, 141, 792, 752, 140, 958, 133, 139,
	817, 138, 942, 796, 796, 137, 126, 959, 136, 1073,
	1842, 1325, 867, 127, 1637, 1480, 767, 797, 1478, 1476,
	2445, 815, 964, 968, 1474, 2427, 870, 2409, 133, 936,
	2350, 173, 118, 2256, 2331, 2181, 126, 2180, 959, 2176,
	2168, 2167, 2166, 127, 2162, 2161, 2160, 837, 1786, 1462,
	2159, 2135, 2043, 2038, 922, 2037, 2036, 1978, 1894, 1854,
	1821, 1898, 118, 948, 1818, 1806, 1797, 1768, 1765, 1764,
	959, 1668, 1938, 1762, 1749, 1748, 865, 1569, 936, 1437,
	1071, 1237, 727, 997, 935, 988, 968, 1070, 1004, 1204,
	572, 966, 1769, 1770, 954, 955, 956, 969, 765, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 1994, 2417,
	2385, 997, 2379, 849, 852, 2378, 2377, 921, 2369, 2367,
	2345, 2344, 2343, 958, 2361, 746, 760, 2299, 2278, 2264,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 920,
	1780, 1778, 1779, 1771, 1772, 1773, 1774, 1776, 1777, 2243,
	2221, 2173, 868, 2112, 966, 2110, 2109, 954, 955, 956,
	969, 2107, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 2084, 2083, 2064, 2262, 564, 2052, 1320, 1698, 2177,
	1962, 132, 173, 1885, 173, 1438, 1697, 563, 2255, 1880,
	1867, 1866, 1852, 1822, 932, 933, 959, 1796, 1758, 1757,
	1775, 937, 1754, 1729, 1724, 132, 1431, 173, 173, 1033,
	134, 1036, 1556, 1528, 1472, 940, 941, 1197, 728, 1049,
	1040, 1026, 1057, 1025, 817, 173, 1024, 1023, 572, 1050,
	1022, 1106, 1000, 1021, 134, 1020, 1019, 173, 943, 1018,
	1017, 1034, 1030, 1031, 1016, 1015, 133, 682, 1014, 173,
	1100, 1037, 1013, 1055, 126, 173, 1012, 173, 1011, 173,
	1785, 127, 942, 173, 1203, 1010, 1009, 1008, 1769, 1770,
	133, 1787, 1788, 1789, 1867, 1001, 989, 988, 126, 848,
	1636, 840, 811, 1196, 2147, 127, 2155, 115, 2134, 951,
	952, 944, 945, 946, 947, 949, 950, 940, 941, 1067,
	2059, 733, 1078, 1665, 118, 173, 173, 2055, 1557, 1769,
	1770, 1936, 817, 1209, 173, 992, 986, 173, 1045, 1071,
	943, 1784, 864, 1909, 1043, 1673, 2266, 1075, 2265, 2259,
	766, 1195, 2062, 1786, 1047, 1925, 1038, 1606, 1106, 1306,
	1073, 1039, 940, 941, 942, 1820, 2283, 173, 1819, 746,
	1090, 1213, 173, 1213, 1708, 918, 1006, 173, 173, 1840,
	173, 861, 173, 792, 173, 943, 173, 1238, 1672, 1479,
	1088, 1941, 1477, 1475, 1101, 1202, 1775, 173, 1473, 1633,
	1326, 1995, 1452, 173, 173, 1769, 1770, 1740, 1089, 942,
	1919, 1029, 2071, 2412, 1659, 2469, 2229, 904, 912, 2470,
	1675, 2389, 1948, 1211, 1214, 948, 1083, 2323, 1084, 173,
	1769, 1770, 570, 1106, 1223, 1790, 2322, 1225, 707, 1937,
	412, 1228, 1769, 1770, 2321, 1780, 1778, 1779, 1771, 1772,
	1773, 1774, 1776, 1777, 1300, 728, 1785, 913, 1003, 1235,
	2320, 2099, 2097, 2068, 1236, 1071, 1083, 1293, 1084, 849,
	948, 1327, 2067, 1753, 427, 1383, 705, 115, 709, 1294,
	1083, 1752, 1084, 569, 1751, 1297, 703, 700, 1323, 1341,
	1307, 1311, 1750, 1575, 413, 1711, 1658, 1602, 1598, 2095,
	572, 1596, 1413, 1085, 1356, 572, 1044, 681, 753, 2240,
	1334, 940, 941, 1775, 1331, 400, 862, 1532, 1531, 561,
	1335, 1364, 1336, 159, 1337, 1384, 1338, 1630, 1339, 1786,
	958, 1351, 2102, 571, 943, 173, 1196, 173, 1775, 1428,
	173, 2388, 2103, 1085, 1354, 1345, 1347, 1355, 1231, 564,
	1775, 173, 564, 564, 1537, 431, 1352, 1085, 942, 863,
	1106, 1365, 2304, 173, 1366, 1367, 1891, 173, 1449, 1350,
	173, 1373, 1501, 1785, 173, 1575, 950, 1192, 173, 1097,
	1428, 1574, 473, 173, 1247, 1295, 939, 2423, 572, 173,
	1106, 1330, 1468, 173, 847, 1096, 404, 1215, 1988, 1439,
	1436, 2485, 1559, 959, 162, 1315, 2461, 2086, 1700, 1701,
	1502, 1583, 1916, 1558, 430, 1094, 1781, 1782, 1783, 948,
	1887, 1780, 1778, 1779, 1771, 1772, 1773, 1774, 1776, 1777,
	1375, 1382, 1604, 1095, 1452, 1594, 1494, 568, 2469, 1587,
	1589, 1600, 1769, 1770, 1300, 733, 1786, 1666, 1310, 1309,
	1882, 1319, 1316, 944, 945, 946, 947, 949, 950, 415,
	414, 733, 1535, 163, 1570, 1576, 1548, 1947, 1093, 1543,
	1777, 1534, 746, 1468, 1549, 1553, 1554, 746, 1091, 1586,
	2372, 1220, 1878, 752, 1247, 1247, 1592, 1075, 173, 1435,
	2480, 1597, 1603, 1579, 1433, 173, 1081, 952, 944, 945,
	946, 947, 949, 950, 1721, 1678, 173, 917, 173, 1464,
	173, 911, 1349, 173, 903, 173, 1680, 173, 173, 1719,
	173, 173, 898, 858, 1086, 817, 1442, 1949, 389, 173,
	992, 2093, 1027, 1313, 1446, 1653, 701, 1681, 1454, 1778,
	1779, 1771, 1772, 1773, 1774, 1776, 1777, 1985, 1625, 1679,
	1775, 1486, 1486, 1499, 877, 1511, 1465, 429, 1635, 899,
	1635, 1523, 1524, 1526, 1086, 2274, 1771, 1772, 1773, 1774,
	1776, 1777, 2087, 711, 701, 2305, 710, 174, 1086, 1585,
	1773, 1774, 1776, 1777, 702, 701, 432, 2327, 859, 2442,
	1713, 1716, 860, 2210, 1986, 2486, 428, 983, 399, 1285,
	1644, 1717, 562, 1466, 1463, 1722, 160, 1562, 1661, 115,
	1785, 752, 752, 1572, 1647, 115, 1106, 796, 1314, 796,
	1650, 1656, 405, 1639, 173, 1058, 1756, 401, 2211, 2478,
	1648, 1427, 1649, 1552, 1651, 1660, 609, 402, 815, 1657,
	173, 173, 173, 1568, 173, 161, 2396, 1667, 938, 946,
	947, 949, 950, 571, 1329, 2142, 846, 2210, 1686, 1669,
	2203, 885, 2460, 173, 465, 472, 1584, 908, 2201, 1468,
	2397, 1034, 2205, 1037, 2441, 1221, 170, 2443, 1468, 1062,
	393, 2468, 1917, 1786, 2479, 390, 1410, 470, 408, 2466,
	1031, 1030, 2211, 466, 2248, 1627, 843, 433, 927, 1300,
	1065, 1676, 476, 170, 421, 2481, 484, 835, 928, 489,
	1890, 2171, 1718, 2024, 2204, 2315, 1060, 508, 115, 1720,
	467, 1062, 2314, 680, 416, 1063, 1916, 2491, 2297, 2206,
	1690, 2207, 909, 2444, 1691, 752, 1693, 2364, 746, 1434,
	1061, 469, 1065, 572, 1692, 1361, 2070, 1696, 1863, 1859,
	1628, 391, 1694, 1298, 1210, 1836, 1462, 1707, 1550, 926,
	2225, 2209, 2459, 715, 715, 1742, 1199, 1063, 1848, 1984,
	2212, 393, 483, 2405, 166, 1058, 878, 1779, 1771, 1772,
	1773, 1774, 1776, 1777, 928, 910, 1344, 2115, 1408, 1411,
	1320, 1317, 462, 2206, 1301, 2207, 770, 393, 393, 748,
	393, 1064, 853, 1714, 170, 757, 1712, 2250, 2025, 927,
	2298, 629, 2172, 879, 2026, 769, 876, 1362, 572, 1502,
	1502, 1837, 1407, 1728, 1869, 2209, 1868, 1706, 1547, 1062,
	2490, 173, 1106, 1546, 2212, 1849, 1739, 173, 173, 465,
	858, 173, 1824, 1064, 481, 789, 173, 1830, 2208, 173,
	1065, 468, 787, 869, 569, 552, 475, 173, 1831, 886,
	778, 2224, 470, 173, 173, 173, 1060, 2105, 466, 173,
	926, 1835, 173, 580, 1829, 1063, 1305, 2241, 173, 173,
	173, 173, 173, 1889, 2228, 2295, 3, 173, 2183, 173,
	1061, 2227, 2047, 173, 1471, 467, 1502, 1502, 1502, 907,
	1844, 173, 1843, 1803, 1804, 1805, 471, 896, 1279, 858,
	2296, 173, 2208, 173, 1853, 173, 469, 1409, 173, 417,
	1839, 1303, 173, 1825, 699, 733, 2277, 173, 2170, 173,
	894, 733, 733, 1304, 553, 733, 173, 2101, 1897, 1879,
	1899, 1800, 755, 458, 33, 1884, 1828, 1961, 572, 173,
	817, 1064, 1832, 1833, 1855, 892, 1838, 1856, 858, 418,
	1860, 817, 173, 1892, 457, 32, 890, 758, 1727, 1900,
	1763, 1723, 1903, 1877, 859, 1730, 1933, 888, 860, 1671,
	1921, 1881, 882, 1608, 940, 941, 759, 1942, 1601, 419,
	785, 420, 2226, 1746, 1747, 1893, 1595, 173, 684, 788,
	916, 480, 683, 456, 29, 915, 786, 943, 1279, 1279,
	841, 1912, 1904, 474, 1801, 818, 1918, 1470, 1342, 1901,
	906, 1195, 738, 859, 902, 1926, 468, 860, 895, 1333,
	1195, 942, 1007, 2437, 2402, 554, 508, 2199, 774, 508,
	2091, 779, 2089, 1795, 1964, 2069, 782, 173, 704, 706,
	1946, 893, 393, 1905, 1631, 1808, 1980, 1981, 1982, 1932,
	626, 1944, 1945, 1624, 1230, 508, 508, 393, 804, 757,
	1864, 1229, 1943, 1952, 1950, 1954, 891, 552, 1975, 33,
	1227, 471, 1224, 455, 76, 1927, 1928, 889, 1929, 1930,
	1222, 1955, 948, 454, 75, 580, 508, 1098, 887, 1971,
	32, 451, 21, 881, 1864, 1502, 1502, 818, 1974, 508,
	1092, 784, 1087, 555, 1907, 2338, 2470, 1987, 1989, 1990,
	1769, 1770, 1998, 2261, 1247, 844, 452, 22, 173, 2001,
	930, 2003, 1996, 2260, 173, 508, 2031, 1324, 2131, 29,
	2340, 1575, 901, 173, 173, 556, 1704, 1590, 1278, 1591,
	450, 27, 958, 1935, 449, 19, 553, 2065, 1247, 447,
	18, 819, 2032, 2123, 1502, 1502, 1502, 1502, 1502, 1502,
	1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
	1502, 1502, 1502, 2374, 1502, 2058, 2082, 173, 2100, 173,
	723, 2045, 2081, 2051, 2048, 2063, 173, 393, 115, 817,
	2050, 448, 17, 931, 2218, 442, 14, 1247, 1705, 2111,
	724, 443, 15, 880, 173, 173, 2108, 2352, 2066, 76,
	441, 13, 733, 2080, 2073, 959, 2125, 460, 1775, 75,
	446, 11, 173, 2094, 2117, 2116, 2184, 21, 1575, 2128,
	440, 9, 173, 2054, 1588, 934, 2106, 1106, 1278, 1278,
	1375, 1999, 2119, 819, 940, 941, 2120, 554, 1599, 1375,
	2004, 1593, 22, 2401, 2118, 2246, 1968, 2121, 1247, 1638,
	445, 7, 1626, 2127, 2132, 1623, 2126, 2144, 1536, 1296,
	444, 6, 2149, 725, 1239, 173, 27, 2476, 1785, 2145,
	19, 2489, 2035, 1769, 1770, 18, 482, 940, 941, 439,
	5, 942, 1683, 1682, 1247, 1247, 2289, 2189, 1644, 733,
	2090, 2133, 2092, 1247, 1247, 2044, 1991, 1683, 1939, 1845,
	944, 945, 946, 947, 949, 950, 1815, 1684, 1533, 1530,
	1828, 818, 1529, 2029, 1460, 555, 994, 17, 1107, 2169,
	173, 14, 2157, 173, 2039, 1983, 1247, 15, 489, 1902,
	715, 1004, 1002, 1106, 173, 173, 13, 2187, 173, 173,
	173, 1786, 914, 905, 940, 941, 11, 556, 900, 2194,
	897, 883, 845, 393, 393, 173, 9, 560, 2303, 463,
	173, 1332, 173, 884, 173, 173, 173, 943, 173, 2223,
	173, 170, 817, 2219, 1841, 2191, 1555, 2190, 2186, 2188,
	173, 173, 2082, 393, 2222, 2193, 7, 817, 2081, 2395,
	2239, 942, 2163, 1755, 2244, 1208, 6, 2096, 2357, 818,
	2273, 393, 2098, 393, 1469, 393, 2082, 1005, 2242, 1216,
	52, 2082, 2081, 2247, 733, 5, 2078, 2081, 603, 2080,
	2200, 2072, 2252, 2251, 2245, 1107, 1618, 1617, 1109, 1308,
	2253, 2198, 625, 1485, 1376, 2185, 1771, 1772, 1773, 1774,
	1776, 1777, 698, 2080, 627, 1244, 2258, 2267, 2080, 2272,
	2257, 508, 170, 628, 1245, 1035, 615, 819, 2232, 1242,
	170, 812, 2236, 508, 1108, 1642, 1312, 1432, 1450, 1738,
	173, 998, 173, 2279, 1106, 173, 595, 607, 606, 1447,
	1232, 839, 1846, 173, 1915, 2254, 1247, 1360, 1695, 1106,
	1357, 1911, 2088, 508, 403, 1766, 810, 1508, 508, 1500,
	1107, 1496, 919, 170, 508, 2286, 508, 1056, 508, 984,
	508, 1643, 508, 2288, 2082, 866, 2293, 1922, 2307, 173,
	2081, 2309, 817, 1343, 2306, 1664, 173, 1048, 1368, 508,
	508, 2308, 722, 1196, 173, 173, 817, 817, 721, 2325,
	2339, 1302, 2082, 1502, 2329, 819, 1677, 2324, 2081, 977,
	976, 2080, 708, 2366, 173, 508, 2337, 2336, 2335, 173,
	2347, 2291, 2348, 2349, 2351, 857, 173, 2346, 856, 2341,
	1200, 1108, 2332, 1862, 2368, 2484, 2373, 2301, 2354, 2080,
	2085, 2411, 2362, 131, 1502, 128, 130, 129, 1888, 79,
	31, 173, 173, 2363, 30, 98, 97, 96, 173, 95,
	94, 585, 2371, 2383, 2381, 2370, 817, 93, 92, 2384,
	2360, 173, 91, 2334, 90, 817, 817, 89, 88, 87,
	86, 85, 84, 83, 82, 81, 504, 1107, 1279, 501,
	2387, 78, 1246, 2392, 2393, 572, 77, 1057, 173, 28,
	173, 2386, 24, 173, 102, 1106, 1108, 2318, 2319, 23,
	1502, 74, 73, 2418, 2407, 26, 2420, 1107, 2419, 16,
	10, 489, 1279, 715, 20, 57, 757, 58, 56, 55,
	2422, 173, 2408, 54, 2424, 12, 50, 393, 49, 47,
	2436, 46, 2435, 2434, 2082, 45, 2421, 2413, 173, 1567,
	2081, 2453, 2380, 393, 173, 44, 393, 1247, 2447, 2317,
	1580, 2285, 2452, 2458, 393, 2456, 2457, 2451, 173, 393,
	2455, 1279, 8, 101, 41, 393, 40, 100, 2467, 1607,
	2465, 2080, 2471, 113, 110, 112, 109, 111, 114, 1424,
	2474, 106, 1246, 1246, 107, 108, 105, 2410, 2311, 2475,
	104, 37, 36, 35, 1422, 2483, 2487, 2482, 34, 2488,
	2, 1, 0, 1247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 1108, 0, 0, 0, 0, 0, 1725,
	1726, 0, 0, 0, 0, 0, 0, 0, 1644, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1247, 1108, 0, 0, 0, 0, 1279, 1279,
	0, 0, 0, 0, 1614, 0, 1418, 1279, 1279, 1281,
	0, 757, 0, 1280, 1419, 0, 1420, 0, 0, 0,
	1425, 0, 393, 0, 1646, 0, 508, 0, 0, 508,
	0, 508, 0, 393, 393, 0, 1652, 757, 0, 0,
	1279, 0, 0, 0, 0, 1580, 1792, 1793, 1794, 0,
	578, 0, 552, 0, 0, 0, 0, 0, 1278, 2398,
	0, 761, 763, 0, 0, 0, 0, 0, 0, 0,
	580, 1243, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2414, 2415, 2416, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 0, 0, 0, 1281,
	1281, 0, 0, 1280, 1280, 0, 0, 0, 0, 0,
	1769, 1770, 0, 1787, 1788, 1789, 0, 1421, 819, 0,
	0, 553, 0, 0, 1423, 604, 71, 0, 0, 0,
	1688, 1278, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 842, 0, 0, 461, 0, 393, 393, 393, 0,
	393, 0, 0, 0, 0, 1769, 1770, 0, 1787, 1788,
	1789, 1243, 1243, 1784, 462, 0, 0, 0, 585, 393,
	0, 0, 0, 0, 940, 941, 0, 0, 0, 0,
	970, 971, 972, 0, 0, 0, 0, 71, 0, 0,
	1279, 0, 1278, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 1784, 1108,
	0, 465, 0, 0, 0, 0, 0, 0, 1775, 0,
	0, 942, 554, 0, 0, 0, 0, 957, 1278, 1278,
	0, 0, 0, 0, 470, 0, 0, 1278, 1278, 1791,
	466, 565, 0, 0, 573, 1959, 1960, 0, 0, 978,
	979, 980, 981, 982, 0, 0, 0, 1790, 0, 991,
	734, 71, 0, 1775, 0, 0, 0, 467, 0, 999,
	1278, 0, 0, 0, 0, 0, 0, 0, 1785, 1107,
	0, 0, 948, 0, 0, 0, 0, 0, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	555, 0, 967, 975, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 1785, 2027, 0, 0, 0, 0, 0,
	0, 0, 556, 0, 0, 0, 965, 393, 0, 0,
	0, 0, 958, 393, 393, 0, 0, 393, 0, 0,
	0, 1786, 1567, 0, 0, 1567, 0, 0, 0, 0,
	0, 0, 0, 1851, 0, 0, 0, 0, 0, 393,
	1857, 1858, 0, 0, 0, 1580, 0, 0, 1865, 0,
	0, 0, 1053, 1053, 1870, 1871, 1873, 1875, 1876, 585,
	0, 0, 0, 393, 0, 1883, 1786, 818, 468, 1886,
	0, 1279, 0, 0, 0, 0, 0, 393, 818, 0,
	0, 0, 0, 0, 0, 959, 0, 1208, 0, 1208,
	0, 508, 0, 0, 393, 1108, 0, 0, 1910, 0,
	1278, 968, 0, 393, 0, 1920, 0, 0, 1781, 1782,
	1783, 0, 393, 1780, 1778, 1779, 1771, 1772, 1773, 1774,
	1776, 1777, 0, 471, 0, 1688, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1688, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1781, 1782, 1783, 0, 0, 1780, 1778,
	1779, 1771, 1772, 1773, 1774, 1776, 1777, 0, 0, 966,
	0, 0, 0, 393, 0, 969, 1279, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	0, 0, 0, 585, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 1246, 1993, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1246, 1358, 0, 1363,
	0, 0, 0, 0, 0, 1370, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 0, 1412, 0,
	1414, 1415, 1416, 1417, 393, 1246, 0, 0, 0, 0,
	1567, 1278, 0, 0, 0, 0, 818, 1440, 0, 757,
	1567, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2077, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 1498, 0, 1510,
	1512, 1517, 1520, 1521, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 1580, 1107, 1208, 1246, 1278, 0, 0,
	0, 565, 2113, 2276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 393, 987, 0, 990, 0, 0, 0, 0, 0,
	0, 995, 1246, 1246, 0, 0, 0, 0, 2139, 1281,
	0, 1246, 1246, 1280, 2300, 0, 1278, 0, 2141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 1281, 1246, 0, 0, 1280, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 2164, 819, 0, 0, 0, 0, 0, 0, 0,
	1107, 1243, 0, 0, 0, 48, 0, 0, 0, 0,
	2353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 0, 0, 0, 1280, 0, 0, 0,
	0, 0, 0, 0, 59, 1243, 0, 0, 0, 818,
	1108, 60, 0, 61, 0, 0, 393, 0, 0, 757,
	0, 0, 0, 0, 818, 0, 0, 71, 0, 0,
	1567, 757, 1074, 0, 2196, 2197, 1580, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2077, 757, 0, 1281, 1243, 0, 2230, 1280, 2231, 0,
	393, 2233, 2234, 0, 393, 0, 2238, 0, 0, 0,
	0, 0, 0, 0, 2077, 0, 757, 1614, 0, 2077,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 1281,
	1281, 0, 39, 1280, 1280, 0, 0, 0, 1281, 1281,
	0, 0, 1280, 1280, 1246, 42, 0, 0, 0, 0,
	0, 1107, 0, 0, 0, 1243, 1108, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 1107, 48, 0, 0,
	0, 1281, 0, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 66, 0, 67,
	0, 1243, 1243, 0, 0, 819, 59, 0, 0, 818,
	1243, 1243, 132, 60, 0, 61, 1580, 0, 2292, 459,
	819, 2294, 99, 818, 818, 0, 0, 0, 0, 393,
	0, 0, 2077, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 63, 1243, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2326, 0, 0,
	2077, 0, 0, 0, 0, 393, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 565, 0, 133, 565, 565,
	2139, 2139, 0, 0, 0, 126, 0, 0, 1709, 1710,
	0, 0, 127, 818, 1715, 0, 0, 0, 0, 0,
	2359, 0, 818, 818, 0, 1567, 0, 1108, 0, 0,
	0, 118, 1208, 0, 0, 0, 39, 0, 0, 0,
	0, 1430, 1108, 64, 0, 0, 1734, 0, 0, 42,
	0, 0, 1107, 1741, 573, 0, 1745, 2375, 2376, 990,
	0, 1281, 0, 0, 393, 1280, 0, 0, 119, 66,
	0, 67, 0, 1759, 0, 819, 0, 2391, 0, 0,
	0, 0, 0, 0, 132, 1246, 0, 0, 1340, 819,
	819, 459, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2406, 0, 757, 991, 0, 393,
	0, 0, 0, 134, 1517, 1517, 1517, 0, 0, 0,
	0, 0, 2077, 1243, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 2359, 0, 0,
	1053, 1246, 1074, 0, 0, 585, 0, 0, 0, 133,
	0, 0, 0, 0, 757, 71, 0, 126, 0, 819,
	393, 71, 0, 0, 127, 0, 0, 0, 819, 819,
	0, 0, 0, 0, 2464, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	1246, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 64, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 974, 1913, 0, 0, 0, 0, 0,
	0, 0, 119, 66, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 1066, 1931, 0, 132, 0,
	957, 0, 0, 0, 0, 459, 0, 0, 99, 0,
	0, 38, 1281, 585, 585, 0, 1280, 0, 71, 0,
	71, 0, 39, 0, 0, 0, 585, 134, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 1953, 71,
	0, 0, 0, 1370, 0, 71, 0, 0, 0, 1957,
	0, 0, 1958, 0, 0, 948, 0, 48, 0, 0,
	0, 0, 0, 133, 1963, 0, 0, 0, 1281, 0,
	0, 126, 1280, 1972, 1243, 967, 975, 0, 127, 0,
	0, 1976, 0, 0, 1931, 0, 59, 0, 0, 0,
	0, 0, 0, 60, 973, 61, 0, 118, 0, 0,
	0, 0, 0, 0, 2000, 0, 0, 0, 2002, 965,
	0, 0, 0, 0, 0, 958, 0, 1281, 0, 0,
	0, 1280, 63, 0, 0, 0, 0, 0, 0, 0,
	1243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 2033, 2034, 0, 0, 0, 0, 0, 71, 0,
	2040, 2041, 2042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 941, 0, 960,
	961, 962, 970, 971, 972, 0, 0, 2053, 0, 1243,
	0, 0, 963, 0, 0, 0, 0, 0, 959, 943,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 968, 0, 0, 2074, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 1430, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 66,
	0, 67, 0, 0, 0, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 459, 0, 0, 99, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 0, 966, 134, 948, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 967, 975, 0, 1811, 0, 0,
	0, 0, 2148, 0, 0, 0, 2151, 2152, 0, 133,
	0, 2154, 990, 973, 0, 0, 0, 126, 2156, 0,
	2158, 0, 0, 0, 127, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 958, 0, 2165, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 734, 0, 0, 0,
	0, 0, 734, 734, 0, 0, 734, 0, 436, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 42, 0, 71, 0, 959, 0, 0,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	2220, 0, 0, 968, 0, 48, 0, 963, 0, 71,
	0, 0, 71, 0, 943, 0, 0, 974, 0, 0,
	0, 0, 573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 942, 0,
	0, 60, 0, 61, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2268, 2269, 0,
	63, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 0, 0,
	0, 0, 0, 0, 0, 0, 1810, 0, 2281, 948,
	0, 0, 0, 0, 2284, 0, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 967,
	975, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 974, 0, 0, 0, 973, 0,
	0, 1769, 1770, 0, 1787, 1788, 1789, 0, 2316, 0,
	0, 64, 0, 965, 0, 942, 0, 2146, 0, 958,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 66, 0, 67,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 1784, 0, 0, 0, 0, 459,
	0, 0, 99, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	2365, 134, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 967, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 1775,
	0, 0, 0, 0, 0, 973, 0, 133, 1769, 1770,
	0, 1787, 1788, 1789, 585, 126, 0, 0, 38, 0,
	965, 0, 127, 0, 1966, 0, 958, 0, 0, 39,
	121, 0, 0, 0, 0, 0, 0, 0, 1790, 0,
	0, 437, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 123, 0, 0, 1785,
	734, 1784, 43, 0, 48, 0, 966, 2433, 2433, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 2448, 0, 51, 0, 0, 0, 53,
	0, 1809, 0, 59, 0, 0, 124, 0, 0, 959,
	60, 2433, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 1775, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 1786, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2433, 0, 0,
	0, 0, 0, 0, 0, 1790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1785, 0, 0, 0,
	0, 0, 0, 966, 0, 734, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 1761, 0,
	64, 0, 0, 0, 0, 0, 65, 0, 0, 1781,
	1782, 1783, 0, 0, 1780, 1778, 1779, 1771, 1772, 1773,
	1774, 1776, 1777, 0, 72, 119, 66, 0, 67, 0,
	68, 0, 125, 0, 0, 0, 0, 69, 0, 1786,
	0, 132, 0, 0, 0, 0, 0, 0, 80, 0,
	71, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 1781, 1782, 1783, 0,
	0, 1780, 1778, 1779, 1771, 1772, 1773, 1774, 1776, 1777,
	118, 0, 0, 4, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2342, 0, 175, 176, 1110,
	177, 1111, 1112, 1113, 1114, 330, 1115, 1116, 1117, 1118,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	1119, 182, 337, 338, 183, 184, 1120, 1121, 339, 340,
	341, 1122, 185, 342, 1123, 821, 1124, 186, 187, 188,
	0, 189, 1125, 190, 191, 192, 1126, 685, 193, 194,
	195, 1127, 1128, 1130, 1129, 1131, 1132, 1133, 196, 197,
	394, 198, 343, 199, 344, 345, 1134, 200, 1135, 201,
	1136, 202, 1137, 1138, 203, 204, 1139, 205, 1140, 990,
	1141, 346, 206, 207, 208, 347, 348, 1142, 1143, 1144,
	209, 210, 349, 350, 351, 0, 211, 1145, 212, 1146,
	1147, 686, 1148, 213, 352, 1149, 353, 1150, 0, 214,
	215, 216, 217, 354, 355, 688, 1151, 356, 221, 1152,
	218, 1153, 687, 219, 357, 220, 358, 359, 360, 361,
	362, 1154, 363, 1155, 689, 222, 223, 224, 690, 225,
	226, 227, 1156, 229, 228, 1157, 364, 691, 230, 692,
	1158, 231, 1159, 1160, 232, 0, 233, 234, 235, 237,
	365, 236, 693, 238, 239, 241, 240, 1161, 1162, 1163,
	366, 242, 367, 243, 244, 1164, 245, 1165, 1166, 246,
	1167, 1168, 247, 368, 694, 248, 695, 369, 249, 250,
	251, 252, 253, 1169, 254, 370, 255, 371, 256, 1170,
	257, 258, 259, 260, 261, 372, 262, 263, 1171, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 1172, 276, 696, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 1173, 288, 374, 287, 289, 290, 1174,
	291, 280, 281, 292, 697, 293, 375, 376, 294, 1175,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	1176, 302, 1177, 303, 304, 305, 306, 307, 308, 309,
	1178, 379, 380, 381, 1179, 1180, 310, 311, 382, 383,
	1181, 312, 313, 314, 315, 1182, 1183, 316, 317, 318,
	319, 1184, 320, 1185, 384, 321, 322, 323, 385, 386,
	1186, 1187, 324, 1188, 1189, 1190, 1191, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	1560, 0, 0, 0, 0, 0, 0, 0, 0, 1561,
	175, 176, 1110, 177, 1111, 1112, 1113, 1114, 330, 1115,
	1116, 1117, 1118, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 1119, 182, 337, 338, 183, 184, 1120,
	1121, 339, 340, 341, 1122, 185, 342, 1123, 821, 1124,
	186, 187, 188, 0, 189, 1125, 190, 191, 192, 1126,
	685, 193, 194, 195, 1127, 1128, 1130, 1129, 1131, 1132,
	1133, 196, 197, 394, 198, 343, 199, 344, 345, 1134,
	200, 1135, 201, 1136, 202, 1137, 1138, 203, 204, 1139,
	205, 1140, 0, 1141, 346, 206, 207, 208, 347, 348,
	1142, 1143, 1144, 209, 210, 349, 350, 351, 0, 211,
	1145, 212, 1146, 1147, 686, 1148, 213, 352, 1149, 353,
	1150, 0, 214, 215, 216, 217, 354, 355, 688, 1151,
	356, 221, 1152, 218, 1153, 687, 219, 357, 220, 358,
	359, 360, 361, 362, 1154, 363, 1155, 689, 222, 223,
	224, 690, 225, 226, 227, 1156, 229, 228, 1157, 364,
	691, 230, 692, 1158, 231, 1159, 1160, 232, 0, 233,
	234, 235, 237, 365, 236, 693, 238, 239, 241, 240,
	1161, 1162, 1163, 366, 242, 367, 243, 244, 1164, 245,
	1165, 1166, 246, 1167, 1168, 247, 368, 694, 248, 695,
	369, 249, 250, 251, 252, 253, 1169, 254, 370, 255,
	371, 256, 1170, 257, 258, 259, 260, 261, 372, 262,
	263, 1171, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 1172, 276, 696, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 1173, 288, 374, 287,
	289, 290, 1174, 291, 280, 281, 292, 697, 293, 375,
	376, 294, 1175, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 1176, 302, 1177, 303, 304, 305, 306,
	307, 308, 309, 1178, 379, 380, 381, 1179, 1180, 310,
	311, 382, 383, 1181, 312, 313, 314, 315, 1182, 1183,
	316, 317, 318, 319, 1184, 320, 1185, 384, 321, 322,
	323, 385, 386, 1186, 1187, 324, 1188, 1189, 1190, 1191,
	325, 326, 327, 328, 329, 0, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2192, 175, 176, 1110, 177, 1111, 1112,
	1113, 1114, 330, 1115, 1116, 1117, 1118, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 1119, 182, 337,
	338, 183, 184, 1120, 1121, 339, 340, 341, 1122, 185,
	342, 1123, 821, 1124, 186, 187, 188, 0, 189, 1125,
	190, 191, 192, 1126, 685, 193, 194, 195, 1127, 1128,
	1130, 1129, 1131, 1132, 1133, 196, 197, 394, 198, 343,
	199, 344, 345, 1134, 200, 1135, 201, 1136, 202, 1137,
	1138, 203, 204, 1139, 205, 1140, 0, 1141, 346, 206,
	207, 208, 347, 348, 1142, 1143, 1144, 209, 210, 349,
	350, 351, 0, 211, 1145, 212, 1146, 1147, 686, 1148,
	213, 352, 1149, 353, 1150, 0, 214, 215, 216, 217,
	354, 355, 688, 1151, 356, 221, 1152, 218, 1153, 687,
	219, 357, 220, 358, 359, 360, 361, 362, 1154, 363,
	1155, 689, 222, 223, 224, 690, 225, 226, 227, 1156,
	229, 228, 1157, 364, 691, 230, 692, 1158, 231, 1159,
	1160, 232, 0, 233, 234, 235, 237, 365, 236, 693,
	238, 239, 241, 240, 1161, 1162, 1163, 366, 242, 367,
	243, 244, 1164, 245, 1165, 1166, 246, 1167, 1168, 247,
	368, 694, 248, 695, 369, 249, 250, 251, 252, 253,
	1169, 254, 370, 255, 371, 256, 1170, 257, 258, 259,
	260, 261, 372, 262, 263, 1171, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 1172, 276,
	696, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	1173, 288, 374, 287, 289, 290, 1174, 291, 280, 281,
	292, 697, 293, 375, 376, 294, 1175, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 1176, 302, 1177,
	303, 304, 305, 306, 307, 308, 309, 1178, 379, 380,
	381, 1179, 1180, 310, 311, 382, 383, 1181, 312, 313,
	314, 315, 1182, 1183, 316, 317, 318, 319, 1184, 320,
	1185, 384, 321, 322, 323, 385, 386, 1186, 1187, 324,
	1188, 1189, 1190, 1191, 325, 326, 327, 328, 329, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 175, 176, 1110, 177, 1111,
	1112, 1113, 1114, 330, 1115, 1116, 1117, 1118, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 1119, 182,
	337, 338, 183, 184, 1120, 1121, 339, 340, 341, 1122,
	185, 342, 1123, 821, 1124, 186, 187, 188, 0, 189,
	1125, 190, 191, 192, 1126, 685, 193, 194, 195, 1127,
	1128, 1130, 1129, 1131, 1132, 1133, 196, 197, 394, 198,
	343, 199, 344, 345, 1134, 200, 1135, 201, 1136, 202,
	1137, 1138, 203, 204, 1139, 205, 1140, 0, 1141, 346,
	206, 207, 208, 347, 348, 1142, 1143, 1144, 209, 210,
	349, 350, 351, 0, 211, 1145, 212, 1146, 1147, 686,
	1148, 213, 352, 1149, 353, 1150, 0, 214, 215, 216,
	217, 354, 355, 688, 1151, 356, 221, 1152, 218, 1153,
	687, 219, 357, 220, 358, 359, 360, 361, 362, 1154,
	363, 1155, 689, 222, 223, 224, 690, 225, 226, 227,
	1156, 229, 228, 1157, 364, 691, 230, 692, 1158, 231,
	1159, 1160, 232, 0, 233, 234, 235, 237, 365, 236,
	693, 238, 239, 241, 240, 1161, 1162, 1163, 366, 242,
	367, 243, 244, 1164, 245, 1165, 1166, 246, 1167, 1168,
	247, 368, 694, 248, 695, 369, 249, 250, 251, 252,
	253, 1169, 254, 370, 255, 371, 256, 1170, 257, 258,
	259, 260, 261, 372, 262, 263, 1171, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 1172,
	276, 696, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 1173, 288, 374, 287, 289, 290, 1174, 291, 280,
	281, 292, 697, 293, 375, 376, 294, 1175, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 1176, 302,
	1177, 303, 304, 305, 306, 307, 308, 309, 1178, 379,
	380, 381, 1179, 1180, 310, 311, 382, 383, 1181, 312,
	313, 314, 315, 1182, 1183, 316, 317, 318, 319, 1184,
	320, 1185, 384, 321, 322, 323, 385, 386, 1186, 1187,
	324, 1188, 1189, 1190, 1191, 325, 326, 327, 328, 329,
	1459, 0, 623, 612, 613, 610, 611, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	1456, 177, 0, 0, 0, 0, 640, 605, 0, 0,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 0, 200, 0,
	201, 0, 202, 1457, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 0,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 686, 0, 213, 652, 0, 353, 0, 0,
	214, 215, 216, 217, 648, 650, 688, 0, 356, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 693, 238, 239, 241, 240, 591, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 694, 248, 695, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 696, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 697, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 1455, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 0, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 1458, 623, 612, 613,
	610, 611, 602, 598, 1453, 0, 0, 0, 0, 601,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 586, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 356, 221, 0, 218, 0, 687, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 653, 691, 230, 692, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 693, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	694, 248, 695, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 696,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 132,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	697, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 134, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 820, 679, 0, 0, 324, 0,
	0, 0, 126, 325, 326, 327, 328, 329, 592, 127,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 993, 0,
	0, 0, 0, 574, 601, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 356, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 693, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 694, 248,
	695, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 696, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 132, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 697, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 820, 679, 0, 0, 324, 0, 0, 0,
	126, 325, 326, 327, 328, 329, 592, 127, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 623,
	612, 613, 610, 611, 602, 0, 993, 0, 0, 0,
	0, 0, 601, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 356, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	693, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 694, 248, 695, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 696, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 132, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 697, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 820, 679, 0, 0,
	324, 0, 0, 0, 126, 325, 326, 327, 328, 329,
	592, 127, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 623, 612, 613, 610, 611, 602, 0,
	993, 0, 0, 0, 0, 0, 601, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 1513, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 1518, 686, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 356,
	221, 0, 218, 0, 687, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 1514, 653, 691,
	230, 692, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 693, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 694, 248, 695, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 696, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 697, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 1515, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 582,
	601, 623, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 586, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 356, 221, 0,
	218, 0, 687, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 653, 691, 230, 692,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 693, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 584, 0, 246,
	0, 0, 247, 368, 694, 248, 695, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 696, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 697, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 623, 612, 613, 610, 611,
	602, 0, 598, 0, 0, 0, 0, 0, 601, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 356, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 693, 238, 239, 241,
	240, 591, 2122, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 694, 248,
	695, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 696, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 697, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 1054,
	623, 612, 613, 610, 611, 602, 598, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	216, 217, 648, 650, 688, 0, 356, 221, 1372, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 693, 238, 239, 241, 240, 591, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 694, 248, 695, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 1371, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 696, 277, 278, 597, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 697, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 592, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 623, 612, 613, 610, 611, 602,
	0, 598, 0, 0, 0, 0, 0, 601, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 640, 605,
	0, 0, 0, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 586,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 686, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 216, 217, 648, 650, 688, 0,
	356, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 693, 238, 239, 241, 240,
	591, 0, 620, 649, 242, 673, 243, 244, 0, 245,
	584, 0, 246, 0, 0, 247, 368, 694, 248, 695,
	643, 249, 250, 251, 252, 253, 0, 254, 644, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 674, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 696, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 697, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 623, 612,
	613, 610, 611, 602, 0, 598, 0, 0, 0, 0,
	0, 601, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 640, 605, 0, 0, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 632,
	633, 635, 0, 634, 636, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 596, 206,
	207, 208, 641, 642, 619, 0, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 686, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 216, 217,
	648, 650, 688, 0, 356, 221, 0, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 653, 691, 230, 692, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 693,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 694, 248, 695, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	696, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 697, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	588, 589, 0, 0, 0, 0, 0, 997, 1448, 598,
	0, 0, 0, 0, 0, 601, 623, 612, 613, 610,
	611, 602, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	640, 605, 0, 0, 0, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 586, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 216, 217, 648, 650,
	688, 0, 356, 221, 0, 218, 0, 687, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 653, 691, 230, 692, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 693, 238, 239,
	241, 240, 591, 0, 620, 649, 242, 673, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 694,
	248, 695, 643, 249, 250, 251, 252, 253, 0, 254,
	644, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	674, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 696, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 697,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	623, 612, 613, 610, 611, 602, 0, 598, 0, 0,
	0, 0, 0, 601, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	216, 217, 648, 650, 688, 0, 356, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 693, 238, 239, 241, 240, 591, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 694, 248, 695, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 696, 277, 278, 597, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 697, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 592, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 623, 612, 613, 610, 611, 602,
	0, 598, 2030, 0, 0, 0, 0, 601, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 640, 605,
	0, 0, 0, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 0,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 686, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 216, 217, 648, 650, 688, 0,
	356, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 693, 238, 239, 241, 240,
	591, 0, 620, 649, 242, 673, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 694, 248, 695,
	643, 249, 250, 251, 252, 253, 0, 254, 644, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 674, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 696, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 697, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 1979, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 623, 612,
	613, 610, 611, 602, 0, 598, 0, 0, 0, 0,
	0, 601, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 640, 605, 0, 0, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 632,
	633, 635, 0, 634, 636, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 596, 206,
	207, 208, 641, 642, 619, 0, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 686, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 216, 217,
	648, 650, 688, 0, 356, 221, 0, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 653, 691, 230, 692, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 693,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 694, 248, 695, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	696, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 697, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	588, 589, 623, 612, 613, 610, 611, 602, 0, 598,
	1969, 0, 0, 0, 0, 601, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 640, 605, 0, 0,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 0, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 0,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 686, 0, 213, 652, 0, 353, 0, 0,
	214, 215, 216, 217, 648, 650, 688, 0, 356, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 693, 238, 239, 241, 240, 591, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 694, 248, 695, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 696, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 697, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 0, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 1054, 623, 612, 613,
	610, 611, 602, 598, 0, 0, 0, 0, 0, 601,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 1518, 686, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 356, 221, 0, 218, 0, 687, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 653, 691, 230, 692, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 693, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	694, 248, 695, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 696,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	697, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 1563, 601, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 356, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 693, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 694, 248,
	695, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 696, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 697, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 1527, 601, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 356,
	221, 0, 218, 0, 687, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 0, 653, 691,
	230, 692, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 693, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 694, 248, 695, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 696, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 697, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 1525,
	601, 623, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 356, 221, 0,
	218, 0, 687, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 653, 691, 230, 692,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 693, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 694, 248, 695, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 696, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 697, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 1509, 601, 623,
	612, 613, 610, 611, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 356, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	693, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 694, 248, 695, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 696, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 697, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 1497, 601, 623, 612, 613,
	610, 611, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 356, 221, 0, 218, 0, 687, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 653, 691, 230, 692, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 693, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	694, 248, 695, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 696,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	697, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 1495, 601, 1487, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 1490, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	353, 0, 0, 214, 1491, 216, 217, 648, 650, 688,
	0, 356, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 0, 0, 232, 0,
	233, 1492, 1489, 237, 365, 236, 693, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 694, 248,
	695, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 696, 277, 278,
	597, 279, 0, 283, 284, 285, 1493, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 697, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 1488, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 1484, 601, 1487, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 1490, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 353, 0,
	0, 214, 1491, 216, 217, 648, 650, 688, 0, 356,
	221, 0, 218, 0, 687, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 0, 653, 691,
	230, 692, 0, 231, 0, 0, 232, 0, 233, 1492,
	1489, 237, 365, 236, 693, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 694, 248, 695, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 696, 277, 278, 597, 279,
	0, 283, 284, 285, 1493, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 697, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 1488, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 623, 612, 613,
	610, 611, 602, 0, 598, 0, 0, 0, 0, 0,
	601, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 356, 221, 0, 218, 0, 687, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 653, 691, 230, 692, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 693, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	694, 248, 695, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 696,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	697, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 623, 612, 613, 610, 611, 602, 0, 598, 1443,
	0, 0, 0, 0, 601, 0, 0, 175, 176, 1359,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 356, 221, 0,
	218, 0, 687, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 653, 691, 230, 692,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 693, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 694, 248, 695, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 696, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 697, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 764, 601, 623,
	612, 613, 610, 611, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 356, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	693, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 694, 248, 695, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 696, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 697, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 762, 601, 623, 612, 613,
	610, 611, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 356, 221, 0, 218, 0, 687, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 653, 691, 230, 692, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 693, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	694, 248, 695, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 696,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	697, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 623, 612, 613, 610, 611, 602, 0, 598, 0,
	0, 0, 0, 0, 601, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	2432, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 356, 221, 0,
	218, 0, 687, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 653, 691, 230, 692,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 693, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 694, 248, 695, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 696, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 697, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 2431, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 623, 612, 613, 610, 611,
	602, 0, 598, 0, 0, 0, 0, 0, 601, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 356, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 693, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 694, 248,
	695, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 696, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 697, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 623,
	612, 613, 610, 611, 602, 0, 598, 0, 0, 0,
	0, 0, 601, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 2430, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 2432, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 356, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	693, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 694, 248, 695, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 696, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 697, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 2431, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 623, 612, 613, 610, 611, 602, 0,
	598, 0, 0, 0, 0, 0, 601, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 356,
	221, 0, 218, 0, 687, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 0, 653, 691,
	230, 692, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 693, 238, 239, 241, 240, 0,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 694, 248, 695, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 696, 277, 278, 1507, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 697, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 623, 612, 613, 610, 611, 602,
	1505, 0, 0, 0, 0, 1503, 1504, 0, 0, 0,
	175, 176, 0, 177, 1506, 0, 0, 0, 640, 605,
	601, 0, 0, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 0,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 0,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 641, 642,
	619, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 686, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 216, 217, 648, 650, 688, 0,
	356, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 693, 238, 239, 241, 240,
	0, 0, 620, 649, 242, 673, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 694, 248, 695,
	643, 249, 250, 251, 252, 253, 0, 254, 644, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 674, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 696, 277, 278, 1507,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 697, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 1506, 0, 0, 0, 640,
	605, 601, 0, 0, 178, 179, 180, 0, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 2432, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 0,
	0, 356, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 0, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 693, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 694, 248,
	695, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 696, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 0, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 2431, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 175, 176, 0, 177, 598, 0, 0, 0,
	640, 0, 601, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 639, 339, 340, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	641, 642, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 216, 217, 648, 650,
	688, 0, 356, 221, 0, 218, 0, 687, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 653, 691, 230, 692, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 693, 238, 239,
	241, 240, 0, 0, 0, 649, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 694,
	248, 695, 643, 249, 250, 251, 252, 253, 0, 254,
	644, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 696, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 697,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 646, 647, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 0, 324, 813, 0,
	816, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 2079, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 821, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 688, 0, 356, 221, 0, 218,
	0, 687, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 364, 691, 230, 692, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 693, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 694, 248, 695, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 696, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 132, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 697, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 134, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 820, 386, 0,
	0, 324, 574, 0, 172, 126, 325, 326, 327, 328,
	329, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 118, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 737, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 132, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 134, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 820, 386, 0, 0, 324, 0, 172, 0, 126,
	325, 326, 327, 328, 329, 0, 127, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 731, 0, 1076, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 737, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 132,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 134, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 820, 386, 0, 0, 324, 574,
	0, 172, 126, 325, 326, 327, 328, 329, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 731, 0, 1076, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 132, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 134, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 820, 386,
	0, 0, 324, 1827, 0, 172, 126, 325, 326, 327,
	328, 329, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 118, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 737, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 0, 324, 730, 0, 172,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 731, 0, 736, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 737, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 0,
	324, 0, 172, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 731, 0,
	736, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 737,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 0, 324, 0, 172, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 731, 0, 736, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 0, 324, 0, 0, 172,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 1193, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 0,
	324, 0, 172, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	1645, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 0, 324, 0, 172, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 1994, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 623, 612, 613, 610,
	611, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 1079, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 0, 0, 659, 660, 341, 0, 185, 342, 0,
	821, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 619, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	688, 0, 356, 221, 0, 218, 0, 687, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 364, 691, 230, 692, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 693, 238, 239,
	241, 240, 0, 0, 620, 366, 242, 673, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 694,
	248, 695, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	674, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 696, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 697,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 382, 383, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 871, 0, 816,
	875, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 821, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 688, 0, 356, 221, 0, 218, 0,
	687, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 364, 691, 230, 692, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	693, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 694, 248, 695, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 696, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 697, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 479,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 167, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 165, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 171, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 168, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 167, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 816, 875, 324, 0, 0, 873, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 171, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 821, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 686, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 688, 0, 356, 221,
	0, 218, 0, 687, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 364, 691, 230,
	692, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 693, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 694, 248, 695, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 696, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 697, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 167, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	816, 875, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 171, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 821, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 688, 0, 356, 221, 0, 218,
	0, 687, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 364, 691, 230, 692, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 693, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 694, 248, 695, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 696, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 697, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 816, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 171, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 821, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 686, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 688, 0, 356, 221, 0, 218, 0, 687,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 364, 691, 230, 692, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 693,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 694, 248, 695, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	696, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 697, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 1583, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 1581, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 1622, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 1586, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 1620, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 1585, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 1621, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 172, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 1583, 185, 342, 0,
	0, 1578, 186, 187, 188, 0, 189, 1581, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 1586, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 1577, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 1585, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 1584, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 791, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 737, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 743, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 745, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 737, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	739, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 741, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 737,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 411, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 410, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 409, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 1566,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 172, 2140, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 172, 2140, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 2137,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 737, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	1348, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 1346, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 1328, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 505, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 850, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 507, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 502, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 1207, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 1206,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 505, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 850, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 507,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 502,
	380, 381, 0, 0, 310, 851, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 505,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 496, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 507, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 834, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 502, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 809, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 808, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 806, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 805, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 802, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 801,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 799, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 798, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 795,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 794, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 783, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	781, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 780, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 777, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 775, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 771, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	773, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 749, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 751, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	747, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 505, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 496, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 495, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 507, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 497,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	498, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 502, 380, 381, 0, 0, 310,
	500, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 487, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 488, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 485, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 477, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	434, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 1874, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 1872, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	1861, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 488, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 172, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 1217, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 0, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	713, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 0, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 0, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	0, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 943, 0,
	0, 974, 0, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 942, 0, 0, 0, 943, 0, 957, 974,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	942, 0, 0, 0, 943, 0, 957, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 941, 0, 960,
	961, 962, 970, 971, 972, 0, 0, 0, 942, 0,
	0, 0, 963, 948, 957, 0, 0, 0, 0, 943,
	0, 0, 974, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 967, 975, 0, 0, 0, 0, 0,
	963, 948, 0, 942, 0, 0, 0, 943, 0, 957,
	974, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 0, 965, 0, 948,
	0, 942, 0, 958, 0, 0, 0, 957, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	975, 0, 0, 0, 0, 965, 0, 0, 964, 0,
	0, 958, 0, 0, 948, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 967, 975, 964, 0, 0, 958,
	0, 0, 948, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 959, 0, 0, 0,
	0, 0, 967, 975, 964, 0, 0, 0, 965, 0,
	0, 0, 968, 0, 958, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 964,
	968, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 954, 955, 956, 969, 959, 953, 951,
	952, 944, 945, 946, 947, 949, 950, 0, 0, 0,
	0, 2403, 0, 968, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 959, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 2356,
	0, 968, 0, 0, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 2310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 0, 0,
	0, 0, 2280, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 940, 941,
	2275, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 974, 0, 940, 941, 0, 960,
	961, 962, 970, 971, 972, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 942, 0, 0, 0, 943,
	0, 957, 974, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 942, 0, 0, 0, 943, 0, 957,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 942, 0, 0, 0, 963, 948, 957, 0, 0,
	0, 0, 943, 0, 0, 974, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 967, 975, 0, 0,
	0, 0, 0, 963, 948, 0, 942, 0, 0, 0,
	943, 0, 957, 974, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 975, 0, 0, 0, 0,
	965, 0, 948, 0, 942, 0, 958, 0, 0, 0,
	957, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 975, 0, 0, 0, 0, 965, 0,
	0, 964, 0, 0, 958, 0, 0, 948, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 967, 975, 964,
	0, 0, 958, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 959,
	0, 0, 0, 0, 0, 967, 975, 964, 0, 0,
	0, 965, 0, 0, 0, 968, 0, 958, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 964, 968, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	959, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 0, 2271, 0, 968, 0, 0, 0,
	0, 966, 0, 0, 954, 955, 956, 969, 959, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 0, 0,
	0, 0, 2213, 0, 968, 0, 0, 0, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	2179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 0, 0, 0, 2178, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 940, 941, 2143, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 942, 0,
	0, 0, 943, 0, 957, 974, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 942, 0, 0, 0,
	943, 0, 957, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 942, 0, 0, 0, 963, 948,
	957, 0, 0, 0, 0, 943, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	975, 0, 0, 0, 0, 0, 0, 948, 0, 942,
	0, 0, 0, 0, 0, 957, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 965, 0, 948, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	0, 965, 0, 0, 964, 0, 0, 958, 0, 0,
	948, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	967, 975, 964, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 965, 0, 0, 0, 968, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 959, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 1997, 0, 968,
	0, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 0, 0, 0, 1973, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	954, 955, 956, 969, 0, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 940, 941, 1731, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 942, 0, 0, 0, 943, 0, 957, 974, 0,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 942,
	0, 0, 1704, 0, 943, 957, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 0, 948, 2463, 957, 0, 0, 1542, 0, 0,
	0, 0, 0, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 967, 975, 0, 0, 0, 0, 0, 963,
	948, 0, 1801, 1541, 1705, 1800, 943, 0, 0, 974,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 0, 965, 0, 0, 948,
	942, 0, 958, 0, 0, 0, 957, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	975, 0, 0, 0, 965, 0, 0, 964, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 2462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 964, 0, 0, 0, 958,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 967, 975, 0, 964, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 968,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	954, 955, 956, 969, 959, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 943, 1769, 1770, 974, 1787, 1788, 1789, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 942, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 1784, 0, 0, 0, 0,
	943, 0, 0, 974, 0, 0, 0, 0, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 942, 963, 948, 0, 0, 0,
	957, 0, 943, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 975, 0, 0,
	1775, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 957, 0, 0, 973, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	965, 0, 0, 0, 963, 948, 958, 0, 1802, 1790,
	0, 943, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	1785, 964, 571, 0, 0, 942, 0, 948, 0, 0,
	0, 957, 1807, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 965,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 965, 0, 0, 0, 968, 948, 958, 0, 0,
	0, 0, 0, 1786, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 975, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 968, 0, 958, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	959, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	1977, 964, 0, 0, 0, 0, 968, 0, 0, 0,
	1781, 1782, 1783, 0, 0, 1780, 1778, 1779, 1771, 1772,
	1773, 1774, 1776, 1777, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 959,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 974,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	942, 0, 0, 0, 940, 941, 957, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 1760, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 942, 0, 0, 0, 963, 0, 957, 0, 0,
	0, 948, 943, 0, 0, 974, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 942, 0, 0, 0,
	943, 0, 957, 974, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 948, 0, 942, 965, 0, 0, 0, 0,
	957, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 948, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 1767,
	0, 0, 0, 0, 0, 0, 965, 967, 975, 0,
	0, 0, 958, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 959, 967, 975, 964, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 958, 0, 0,
	968, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 965,
	0, 0, 964, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 943, 0, 959, 974, 1769, 1770, 0,
	1787, 1788, 1789, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 1965, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 966, 0,
	959, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 968, 0, 0, 0,
	1784, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 948, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 967, 975,
	0, 0, 0, 0, 0, 1775, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 965, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 966, 0, 1790, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 1785, 1267, 1257, 1286, 1248,
	1277, 1276, 0, 0, 1250, 1249, 0, 0, 0, 0,
	1288, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 1282, 0, 1274, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 1272, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1786, 0,
	0, 0, 0, 0, 1271, 1269, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 1260, 1259, 1261, 1262,
	1263, 1264, 1265, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 1252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 1781, 1782, 1783, 1258, 0,
	1780, 1778, 1779, 1771, 1772, 1773, 1774, 1776, 1777, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1268, 0, 0,
	0, 1379, 1377, 1378, 1381, 1380, 0, 0, 0, 1267,
	1257, 1286, 1248, 1277, 1276, 0, 0, 1250, 1249, 0,
	0, 0, 0, 1288, 1287, 0, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 1254,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	526, 0, 552, 0, 0, 0, 0, 1282, 0, 1274,
	1273, 1251, 0, 0, 1283, 1284, 0, 0, 0, 1272,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 529, 0, 0, 0, 1255, 1271, 1269, 1270,
	0, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 532, 0,
	0, 0, 1256, 538, 539, 0, 0, 548, 0, 1260,
	1259, 1261, 1262, 1263, 1264, 1265, 0, 1285, 0, 0,
	0, 553, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 0, 0,
	0, 1258, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	535, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	1268, 0, 0, 0, 0, 0, 0, 0, 542, 0,
	0, 537, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 0, 0, 0, 0, 0, 0, 0,
	1253, 0, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 1254, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 0, 1283, 1284, 0,
	0, 0, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1255,
	0, 0, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 528, 545,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 546, 0, 0, 0, 550, 0,
	0, 0, 556, 0, 0, 0, 0, 543, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 549,
}
var sqlPact = [...]int{

	4535, -1000, -13, -1000, -1000, -1000, 180, -1000, -1000, -1000,
	177, 173, 171, -1000, 168, 165, 153, 151, 144, 140,
	138, 136, 126, 124, 121, -1000, 118, -1000, -1000, -1000,
	-1000, 117, 116, 113, 110, 108, 107, 103, 1031, 22609,
	99, 98, 1236, 35447, 97, 96, 95, 93, 1023, 92,
	90, 26130, 858, 1412, 88, 86, 84, 83, 82, 982,
	35128, 4226, 2692, 1090, 1564, 34806, 22287, 1552, 1480, 34484,
	-1000, -1000, 34162, 81, 79, 78, 76, 70, -1000, -1000,
	33840, 65, 64, 63, 61, 60, 59, 57, 56, 53,
	51, 50, 49, 43, 41, -1000, 40, 39, 38, 40938,
	37, 36, 35, 1027, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 128, -1000, 839, 479, 2588,
	8007, 995, 994, 984, 946, 986, 37361, 35447, 34, -43,
	33, -1000, 1898, 610, 19685, 4535, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25808, 25486, 33518, 33196, 721, -1000, -26, 23885, 35447, -1000,
	-2, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15373, 15015, 505, -2, -1000, -1000, -1000, -1000, -1000, 32874,
	-1000, 32552, 32230, 1428, 31908, -1000, -1000, -1000, -1000, 31586,
	-1000, -1000, 1698, 1560, 1553, 25164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31267, 30945,
	30623, 30301, 29979, 457, -1000, -1000, -1000, 18066, -1000, -1000,
	-1000, -1000, 31, -1000, 30, -1000, 29, 28, 25, 23,
	-1000, 22, 20, -1000, 19, 18, -1000, 12, 0, 29657,
	1217, -1000, -1000, -21, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35447, -1000, 16061, -1000, 456, -1000, 1597, -1000,
	16061, -1000, 1206, -1000, -1000, -1000, -1000, -1000, 35447, -1000,
	-1000, -1000, -1000, -1000, -1000, 2080, 1102, 454, 29335, -1000,
	1510, -1000, 557, 729, -1000, -1000, -1000, 9040, 185, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1561, 21965,
	1262, 1868, 1690, 2079, 1369, 1685, 1674, 1663, 1638, 1615,
	2078, 1008, 2076, 1732, 925, 2071, 1607, 1219, 643, 2070,
	1592, 1587, -1000, -1000, -1000, -1000, 883, -1000, -1000, -1000,
	27406, -1000, -1000, 839, -1000, -1000, -1000, 1296, 1818, 1818,
	1818, 1911, 258, 252, -1000, 128, -1000, 1783, -1000, 1094,
	-1000, -1000, -1000, -1000, -1000, 40309, -1000, -1000, 16061, 16061,
	16061, 16061, 16061, 1098, 493, -1000, 452, 451, 7305, -1000,
	-1000, 2039, -1000, -1000, -1000, 260, -1000, -1000, 16061, -2,
	-1000, -1000, -1000, -1000, 450, 2057, -1000, 613, -1000, -1000,
	-1000, 556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1622, 442, 441, 440, -1000, 433, -1000, -1000, 431,
	427, 423, 420, 419, 415, 414, 411, 410, 408, 405,
	402, 401, 398, 396, 1022, -1000, 596, -1000, -1000, 596,
	596, -1000, 384, 384, 386, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 384, -1000, -1000, -1000, 535, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, 1075,
	-1000, -1000, 1075, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	719, 36723, -29, 35447, -1000, 394, -29, -1000, -1000, 393,
	-1000, 11118, 11118, -1000, -1000, -1000, -1000, -1000, 9742, 1415,
	-1000, 3858, -186, 262, 534, -1000, 18713, 21301, -1000, -1000,
	969, 1718, 627, -1000, 951, 1716, 501, -1000, 941, -1000,
	852, 1703, -139, 22928, 23885, -26, -37, -1000, -1000, -1000,
	5594, 40309, -1000, 40309, -1000, 810, 20331, -2, -1000, -1000,
	-1000, -1000, 392, 1286, 576, -1000, 264, -1000, 29013, 576,
	1274, -1000, -1000, -1000, 27406, -1000, 35447, -1000, 35447, -1000,
	844, -1000, 37042, 112, 1696, -1000, -1000, 112, 1688, -1000,
	109, 1686, -1000, -1000, 1143, 1677, -1000, -37, 1670, -1000,
	-1000, 16061, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	610, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28691, 23247, 1305, 542, 40309, 1964,
	40862, 22928, 40309, 23247, -1000, -1000, 35447, -1000, 16061, -1000,
	1959, 1461, 1, -1000, -1000, -1000, -1000, -1000, 1333, 1454,
	668, 1154, 9040, 9040, 1774, -1000, 184, 5925, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28369, -1000, -1000, -1000,
	1099, 35447, -1000, -1000, 1619, -1000, 23247, 35447, -1000, 35447,
	-1000, 35447, -1000, 35447, -1000, 35447, -1000, -1000, -1000, -1000,
	-1000, 3438, -1000, 1608, -1000, -1000, 35447, -1000, 1325, -1000,
	-1000, -1000, 28050, 27728, -1000, 937, 756, -1000, -1000, 130,
	-1000, -1000, 1296, -1000, 1220, 1407, 14657, 1341, 16061, 128,
	-1000, -1000, 128, 128, 8696, -1000, -1000, -1000, 35447, -1000,
	40659, 40862, 5925, 741, 16061, 16061, 16061, 16061, 16061, 16061,
	16061, 16061, 16061, 16061, 16061, 16061, 16061, 16061, 16061, 16061,
	16061, 16061, 16061, 16061, 16061, 16061, 1360, 16061, 715, 16061,
	16061, 16061, 16061, 2364, 1058, 381, 1177, -1000, 1997, 1997,
	1997, 40337, 40337, 360, 493, -1000, 16061, -1000, 207, 14313,
	252, 38987, -27, 6961, -1000, -1000, -1000, 9384, 586, 40309,
	-2, 6258, -1000, 2037, 1133, 1614, 1476, 389, 552, 547,
	546, 543, 16061, 16061, 13969, 13611, 13253, 16749, 12895, 16061,
	7649, 16061, 16061, 16061, 16061, 12537, 12179, -1000, 388, -1000,
	-1000, -1000, -1000, 2035, -1000, -1000, 2032, -1000, 734, 733,
	2031, -1000, 1, -1000, 36723, -1000, 35447, -29, 1958, 35447,
	-1000, 131, -1000, 39483, -1000, 131, -3, -1000, 1382, 1377,
	20008, 1307, 1136, 1136, 1136, -1000, 387, 484, 534, 4917,
	11821, -1000, 26449, 1148, 203, 251, 18390, 1415, -1000, 35447,
	-52, 1026, -1000, 24842, 1889, 1792, 1794, 27406, 1938, 207,
	1583, 714, 27406, 711, 1935, 207, 1575, 710, 35447, 5925,
	530, -1000, 35447, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1570, -8, -1000, -1000, 24523, 1955, 1669,
	-1000, 1044, -1000, 1952, 35447, 1205, 1270, -1000, -1000, 749,
	1660, 582, 455, 1949, 455, 20655, -1000, 35447, -1000, 35447,
	-1000, -1000, 35447, -1000, 35447, -1000, 35447, 35447, -1000, 35447,
	35447, -15, 40309, 3286, 24204, 709, -1000, 608, 24523, 3612,
	-20, -1000, 804, -1000, -1000, -1000, -1000, 246, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 386, 1022, 384, 384, 384, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 535, -1000, -1000, 596, 596, 596, -1000,
	-1000, -39, -1000, 1566, 558, -40, 630, 1, -1000, 1075,
	-1000, 988, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2056, -1000, 2005, -1000, -1000,
	2030, -34, -1000, -34, -1000, 5925, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35447, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 237, -1000, -1000, -1000, -1000, -1000, -1000, 35447,
	35447, 35447, -1000, 27406, -1000, -1000, -1000, -1000, 40309, -1000,
	361, -1000, -1000, 40309, 869, 1410, -1000, 1410, -35, -1000,
	39421, 1375, 35447, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 550, 1011, 1011, 735, 735, 735,
	735, 2064, 862, 1684, 475, 2714, 2714, 2714, 317, 817,
	817, 2714, 2714, 2714, 40337, 286, 169, 16061, 16061, 708,
	1017, 381, 169, 16061, 169, 169, 169, 169, -1000, 1119,
	-1000, -1000, -1000, -1000, 1558, 379, 16749, 16749, -1000, -1000,
	-1000, 7305, 17080, -1000, -1000, -1000, -1000, 378, 16061, -1000,
	39022, -208, -46, -1000, -1000, 16061, -47, -49, -1000, -1000,
	818, -1000, 16061, -1000, -30, 16061, 16061, 16061, 249, -1000,
	248, -1000, 705, -1000, 697, 694, 686, -1000, 377, 1128,
	374, 373, 16061, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40274, 4388, 247, -1000, 1557, -173, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 243, -1000, 242, -1000, 40223, -173,
	241, 2650, -1000, 16749, 16749, 16749, 7305, 372, 240, -1000,
	39392, -173, 39928, 11463, 11463, 11463, 239, 39869, 16061, -173,
	4271, 4026, 3807, -65, -66, -1000, -68, -1000, 2029, -71,
	238, 544, 541, 234, -1000, -1000, 368, -74, 582, 11118,
	19361, 5925, -1000, 582, 9742, -1000, 20008, 20008, 1265, 1370,
	20008, -1000, -1000, -1000, -1000, 26449, 533, 534, 26449, -1000,
	2022, 1357, -79, -1000, -1000, -1000, 35447, 367, -1000, 534,
	233, 915, 35447, 35447, 35447, -1000, -1000, 1269, 36404, 1268,
	40862, 35447, -1000, 366, 365, 1374, 1372, 35447, 35447, 36085,
	35766, 35447, 955, 207, -1000, 364, 35447, 923, 35447, 207,
	-1000, 358, 35447, 893, -1000, 1458, 1224, -1000, 799, 1550,
	35447, 232, -80, -36, 40862, -1000, -1000, -1000, -1000, -1000,
	35447, 449, 35447, 207, 35447, 2054, 207, 35447, 1659, 1724,
	513, 35447, 1407, 16061, 1192, -1000, 19037, 599, 35447, 878,
	102, -1000, -1000, -1000, 525, 35447, -1000, -1000, 112, 112,
	-1000, 109, 1143, -37, -1000, 16061, -1000, -1000, 35447, 22928,
	-81, -1000, -1000, 40862, -1000, 488, 595, -1000, 2021, 572,
	22928, 35447, 9040, 9040, -1000, 1392, -1000, -1000, 870, -1000,
	1010, -1000, -1000, -1000, -1000, 9040, -1000, -67, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 869, -1000, 16061, 2020, -1000,
	-1000, -1000, 8696, -1000, -1000, -1000, 35447, -141, 16061, 169,
	169, 16061, 16749, 16749, -1000, 169, -1000, -1000, -1000, -1000,
	-1000, 1534, 355, 16061, 40862, 40517, 4538, -88, -1000, 10774,
	-42, -1000, 16061, -1000, 38959, -1000, -1000, 288, 1687, -1000,
	16061, 39837, 231, 10430, -1000, 39778, -31, -31, -1000, 2050,
	1298, 1124, 928, 847, 2019, -1000, 20978, 584, 1159, 38931,
	40659, 40862, -1000, 16061, -1000, -1000, 1528, 16061, -1000, 40659,
	40862, 16749, 16749, 16749, 16749, 16749, 16749, 16749, 16749, 16749,
	16749, 16749, 16749, 16749, 16749, 16749, 16749, 16749, 16749, 16749,
	1328, 16749, 1993, 1993, 1993, -51, 10086, -1000, 1604, 1528,
	16061, 16061, 40862, 230, 229, 227, -1000, 16061, -173, 16061,
	16061, 16061, -1000, -1000, -1000, 226, -1000, 2018, -1000, -1000,
	-1000, -1000, 3612, -1000, 1474, -1000, -96, -1000, 1415, -1000,
	1474, -1000, -1000, 1265, -1000, 351, 16061, 20008, -1000, 483,
	-1000, -94, -1000, 26449, -1000, 476, -205, -1000, 522, -1000,
	534, 348, 35447, 26449, -1000, -1000, -1000, 685, 676, 1651,
	-1000, 1266, -1000, 604, -1000, 1067, 16061, 17742, 347, 346,
	1019, -1000, 1648, 1143, 1646, 1143, -1000, -52, 944, -1000,
	16061, -1000, 675, -1000, -1000, 16061, -1000, 674, 572, 1524,
	758, -1000, 775, -1000, 1436, -1000, 24523, 336, 35447, 331,
	-1000, 330, -1000, -1000, 328, 35447, 1330, 513, 23566, -1000,
	576, 878, -1000, 40309, -1000, 878, 8351, 1809, -95, -1000,
	-1000, -1000, 582, 20655, 20008, 9742, -97, -1000, -1000, -1000,
	-1000, 40309, -67, 1777, 1777, -1000, 2014, -1000, 464, 225,
	-1000, 27087, -1000, -67, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35447, 1164, 38587, -1000, 1825, 5925, 1954, 169, 4421,
	788, 16061, 40862, 40490, -109, 16061, 16061, -1000, -112, -1000,
	16061, 462, 40309, -1000, -1000, -1000, 40309, 16061, 2047, 16061,
	224, 220, 219, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 218, -1000, -1000, 37680, 16061, 216, -1000, 215, 214,
	40309, 1604, 40309, -1000, -1000, 942, 942, 829, 829, 829,
	829, 1993, 1142, 1820, 905, 327, 327, 327, 612, 930,
	930, 327, 327, 327, 1515, 1326, 326, 39802, 16061, -117,
	-1000, -1000, -1000, 40309, 40309, 213, -1000, -1000, -1000, -173,
	349, 38559, 38524, -1000, 211, 209, 1468, 1902, -1000, 20008,
	1468, -1000, 35447, 40309, -1000, -186, -1000, 2010, -1000, -1000,
	1357, -1000, 5260, 26449, 35447, -118, -1000, 35447, 35447, 35447,
	1643, -1000, 1313, -1000, 38496, -120, -1000, 299, 1857, 16061,
	-1000, -1000, 325, 17742, 35447, -1000, 1381, 1512, 621, 35447,
	-1000, 35447, -1000, 35447, 35447, 35447, -123, 35447, -125, 35447,
	-1000, 22928, 725, -1000, -1000, 1448, -1000, 17742, 324, 35447,
	24523, 1945, 17742, 1204, 1351, 513, 23566, -1000, 749, -1000,
	-1000, -77, -1000, 363, 207, 878, -1000, -86, -1000, 519,
	1761, -1000, 1751, 350, -1000, -1000, -108, 304, -1000, 518,
	516, -1000, -1000, -1000, -1000, 1825, 16061, 16061, 40490, -126,
	-1000, 169, 169, -1000, 38468, -1000, 40309, -1000, 39778, -1000,
	-1000, -1000, -1000, 1062, -1000, 38124, -1000, -1000, -1000, -1000,
	16749, 1513, 303, 40862, 38096, -1000, -1000, 16061, -1000, -1000,
	-1000, -1000, 548, 16061, 16061, 1415, 548, -133, 534, -1000,
	-1000, -1000, 2009, -1000, -142, -1000, -1000, -1000, -1000, 35447,
	-1000, 35447, -1000, 5925, 35447, 1484, 1246, -1000, -1000, 1358,
	302, 16749, 35447, -1000, 1004, 17742, 1825, -2, 5925, 1825,
	38061, 6258, -143, -144, 1240, -1000, 1233, 16061, -1000, 40862,
	1143, 1143, -1000, 673, 657, 649, -1000, 640, -1000, -111,
	21632, 1086, -145, 17742, -150, 208, 207, -151, 35447, -1000,
	513, 23566, -1000, 1724, 1729, 35447, 1785, -1000, -1000, 297,
	296, 295, -1000, 26768, 26768, 22928, 22928, -1000, 169, 169,
	-1000, -1000, 204, 1159, 1883, -1000, 2695, 16749, 40862, -152,
	-1000, 38033, -1000, 35447, 40309, -173, -1000, -1000, 26449, 300,
	-1000, -1000, 1249, -1000, -1000, 35447, 1257, -1000, -1000, 16061,
	39802, 294, 1436, 293, -1000, -1000, -1000, -1000, -1000, -1000,
	1857, -30, -1000, 959, -1000, -1000, 40309, 1836, -1000, -1000,
	35447, 35447, 291, 290, -1000, 287, -2, 35447, 1004, -153,
	-1000, 1436, -1000, 1004, 285, 23566, -1000, 1330, 740, -163,
	35447, -1000, -1000, 6603, 22928, 22928, -1000, -164, -1000, -1000,
	-1000, 1130, 16061, 2695, -166, -1000, -1000, -165, -1000, 1943,
	-1000, -1000, -1000, -1000, 1640, 38005, 1304, 35447, -1000, 35447,
	1825, 201, 35447, 607, 5925, -1000, -1000, 16061, 16061, 16061,
	284, 1436, 1004, -1000, 1436, 17742, -1000, 1351, 834, -1000,
	582, -1000, -171, -172, -1000, 199, 16405, 16405, -173, -1000,
	35447, 283, 1632, -1000, 1184, 1175, 194, -174, -1000, -1000,
	264, -1000, 16061, -1000, -179, -184, -31, 35447, -1000, 1436,
	-1000, -189, -1000, 20655, -1000, 572, 572, -1000, -1000, -1000,
	17411, 1253, 867, 39364, -1000, -1000, -1000, 35447, -1000, 1199,
	1191, 837, -1000, -1000, -1000, -1000, -1000, 1304, 40309, -1000,
	-1000, 114, -190, -1000, 1004, -162, -1000, -1000, 1971, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1734, -1000, 614, 1152,
	1152, 1184, 2047, 1063, 1436, -1000, 15717, -1000, 1981, -1000,
	-1000, 1348, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 2481, 2480, 1596, 2009, 2478, 2473, 2472, 2471, 2470,
	2466, 2465, 2464, 2461, 2458, 2457, 2456, 2455, 2454, 2453,
	1990, 2447, 1980, 2446, 2444, 2443, 2442, 1950, 2425, 2415,
	2411, 2409, 2408, 2406, 1940, 2405, 1930, 2403, 2399, 2398,
	2397, 2395, 1921, 2394, 78, 97, 1915, 2390, 2389, 1911,
	1869, 1864, 2385, 1860, 2382, 2381, 1836, 1811, 2379, 55,
	2374, 2372, 2369, 1803, 1793, 2366, 2361, 2359, 144, 2356,
	1713, 2355, 2354, 2353, 2352, 2351, 2350, 2349, 2348, 2347,
	2344, 2342, 2338, 2337, 2330, 2329, 2327, 2326, 2325, 153,
	2324, 2320, 1674, 1653, 2319, 2318, 33, 25, 9, 49,
	21, 141, 2675, 129, 2317, 2316, 2315, 2313, 2311, 2310,
	31, 92, 90, 2306, 146, 2305, 2303, 41, 32, 22,
	12, 2300, 84, 2298, 2295, 1346, 27, 2283, 2282, 136,
	2280, 28, 24, 94, 149, 145, 103, 116, 2279, 2276,
	2271, 43, 106, 1, 2268, 2262, 17, 83, 20, 2258,
	30, 14, 2257, 2255, 123, 2247, 58, 89, 1484, 104,
	117, 246, 2245, 60, 16, 62, 2241, 2239, 152, 45,
	2237, 39, 79, 131, 2232, 50, 154, 121, 69, 122,
	130, 2231, 2229, 2227, 99, 2226, 109, 75, 2225, 2224,
	64, 2222, 88, 132, 2221, 2220, 2218, 87, 2217, 118,
	2215, 2214, 151, 143, 111, 5, 91, 59, 13, 1525,
	1506, 124, 76, 53, 46, 2212, 2210, 1082, 102, 36,
	100, 72, 47, 101, 57, 80, 139, 29, 2211, 2209,
	126, 2208, 2207, 2206, 2201, 2199, 95, 2198, 2197, 23,
	2196, 74, 51, 54, 82, 38, 115, 120, 108, 148,
	93, 2195, 77, 114, 2191, 199, 2189, 2186, 1770, 107,
	2185, 2184, 2183, 1712, 1708, 1521, 253, 2175, 2174, 1017,
	777, 2172, 2164, 71, 2163, 112, 96, 98, 134, 142,
	42, 2162, 113, 35, 2159, 26, 18, 0, 1433, 1287,
	2158, 119, 68, 2157, 2156, 2151, 2150, 19, 3, 10,
	4, 7, 6, 65, 34, 2148, 2146, 125, 85, 63,
	2140, 150, 2137, 2134, 2130, 48, 2128, 11, 2123, 8,
	2122, 2119, 15, 2, 2106, 2104, 133, 2093, 110, 2091,
	1937, 2089, 137, 2088, 2087, 1634, 37, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 285, 285, 286, 286, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 162, 162, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 254, 254, 253, 43, 43, 228, 228, 46,
	46, 185, 185, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 279, 277,
	277, 278, 278, 139, 139, 139, 139, 139, 140, 140,
	140, 284, 284, 284, 284, 284, 284, 283, 283, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	327, 327, 329, 329, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 207, 207, 207, 207, 143, 143,
	115, 115, 115, 206, 295, 295, 296, 296, 296, 296,
	296, 296, 297, 297, 297, 297, 297, 297, 297, 293,
	293, 294, 291, 291, 292, 292, 292, 292, 333, 333,
	205, 205, 146, 146, 300, 300, 300, 300, 298, 298,
	298, 298, 298, 301, 299, 302, 302, 302, 302, 302,
	240, 240, 240, 91, 91, 32, 32, 121, 121, 33,
	33, 29, 29, 29, 189, 189, 150, 150, 245, 245,
	245, 132, 132, 110, 110, 110, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 190, 190, 191,
	191, 52, 52, 56, 56, 61, 61, 90, 90, 90,
	90, 90, 90, 21, 21, 21, 21, 25, 25, 25,
	25, 60, 60, 335, 335, 128, 128, 128, 128, 129,
	129, 202, 202, 203, 203, 203, 204, 204, 204, 123,
	122, 124, 124, 28, 28, 28, 117, 117, 118, 118,
	119, 119, 120, 120, 336, 336, 49, 49, 49, 93,
	93, 135, 135, 199, 199, 199, 201, 201, 200, 200,
	200, 175, 175, 175, 92, 92, 155, 155, 164, 164,
	165, 165, 251, 166, 166, 59, 59, 102, 102, 100,
	100, 100, 100, 100, 100, 101, 101, 101, 103, 103,
	103, 103, 103, 103, 103, 106, 106, 106, 107, 107,
	107, 105, 105, 308, 308, 308, 311, 311, 307, 309,
	309, 310, 310, 334, 334, 176, 176, 176, 145, 144,
	144, 148, 148, 147, 149, 149, 244, 244, 244, 173,
	173, 173, 173, 194, 194, 192, 192, 193, 193, 195,
	195, 196, 196, 196, 197, 197, 198, 198, 172, 172,
	224, 224, 104, 104, 104, 154, 154, 154, 156, 156,
	214, 214, 214, 215, 215, 213, 213, 213, 213, 246,
	246, 246, 246, 246, 246, 246, 246, 324, 324, 324,
	325, 325, 243, 243, 247, 247, 247, 247, 247, 247,
	241, 241, 241, 241, 242, 242, 252, 252, 179, 179,
	179, 179, 177, 177, 178, 178, 248, 248, 248, 248,
	174, 174, 249, 249, 249, 208, 208, 255, 255, 255,
	273, 273, 153, 153, 153, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 257, 257, 257, 257, 259, 259, 259,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 272, 272,
	272, 272, 272, 260, 260, 267, 267, 268, 268, 269,
	270, 261, 261, 262, 262, 263, 264, 271, 271, 271,
	271, 275, 275, 265, 265, 265, 265, 265, 266, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 187, 187, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 218, 218, 218,
	218, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 303, 303, 303, 303, 303, 303, 303, 303,
	305, 305, 306, 306, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 312, 312, 313, 313, 315, 315,
	316, 316, 317, 318, 318, 318, 319, 320, 320, 314,
	314, 321, 321, 321, 322, 322, 323, 323, 323, 323,
	323, 230, 230, 230, 231, 231, 232, 238, 238, 238,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 130, 130, 130, 130,
	130, 161, 161, 227, 227, 225, 225, 225, 229, 229,
	180, 180, 274, 274, 274, 274, 274, 274, 274, 181,
	181, 181, 188, 182, 182, 183, 183, 183, 183, 183,
	183, 221, 222, 184, 184, 184, 223, 223, 233, 237,
	237, 236, 235, 235, 234, 234, 211, 211, 212, 212,
	210, 209, 169, 169, 168, 168, 167, 167, 337, 337,
	239, 239, 170, 170, 171, 163, 163, 250, 250, 250,
	250, 157, 157, 137, 137, 158, 158, 133, 133, 136,
	136, 134, 134, 134, 134, 151, 151, 152, 152, 131,
	131, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 276, 276, 276, 226, 125, 125, 125, 126,
	126, 127, 127, 281, 281, 281, 282, 282, 282, 282,
	280, 280, 280, 280, 280, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 2, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 1, 3, 3, 1, 1,
	6, 6, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 358, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 215, 221, 241, 243, 245, 252,
	-100, -102, 239, -54, -55, -63, -64, -65, -66, -94,
	263, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 266,
	-21, -25, -60, 304, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -103, -101, 355, 240,
	313, 35, 275, 61, 101, 247, 329, 336, -106, -104,
	-105, -107, 256, 321, 285, 359, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 2,
	285, 324, 83, 142, -326, 2, -158, 285, 83, -134,
	-125, 348, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 143, 146,
	148, 141, 158, 159, 160, 162, 163, 164, 167, 166,
	171, 174, 177, 179, 180, 181, 184, 182, 186, 187,
	189, 188, 194, 196, 197, 199, 202, 205, 208, 211,
	212, 213, 214, 215, 217, 219, 221, 223, 224, 225,
	226, 227, 229, 230, 232, 233, 234, 235, 236, 239,
	237, 238, 240, 241, 242, 243, 245, 247, 248, 250,
	264, 265, 276, 252, 253, 254, 255, 259, 257, 260,
	261, 263, 266, 268, 271, 274, 275, 277, 280, 281,
	278, 273, 284, 286, 287, 288, 289, 290, 291, 292,
	299, 300, 304, 305, 306, 307, 310, 311, 312, 313,
	315, 318, 319, 320, 325, 330, 331, 332, 333, 334,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 85, 87, 88, 104, 108, 109, 115,
	116, 117, 127, 129, 136, 137, 140, 147, 149, 150,
	151, 152, 153, 155, 169, 183, 193, 195, 206, 210,
	218, 220, 228, 249, 258, 269, 270, 279, 282, 294,
	295, 296, 301, 302, 317, 321, 322, 358, 358, 2,
	159, 225, -133, -125, 83, 358, 358, 358, 358, 285,
	2, 314, 324, -189, 83, 309, 358, 358, -125, 221,
	22, 2, 92, 146, 312, 311, 22, 217, 257, 287,
	289, 2, 358, 358, 358, 358, 358, 2, 324, 285,
	142, 83, 314, -125, 2, -45, 2, 355, -44, -4,
	-27, -36, -46, -42, -20, -22, -34, -50, -49, -51,
	-53, -57, -56, -59, -63, -64, -70, -92, -93, 263,
	-330, 2, 22, -331, -332, 69, 98, 125, 256, 146,
	92, 311, 285, 2, 159, 2, -125, 2, -326, 2,
	159, 2, -330, 2, -125, 2, -129, 2, 252, -125,
	358, 358, 358, 358, 358, 174, 55, 249, 260, -68,
	300, -67, 294, -279, -69, 2, -159, 184, -125, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 2, -89, 260, 34,
	55, 22, 60, 84, 126, 142, 143, 163, 65, 66,
	224, 174, 160, 299, 164, 261, 286, 300, 69, 315,
	290, 106, 4, 83, 184, 262, 294, 358, 358, 358,
	-334, 2, 285, -101, -103, -102, -147, -148, 308, 154,
	103, 204, -100, -102, 2, -308, -89, 260, 2, 55,
	22, -277, 2, -239, 200, -216, 89, -218, 346, 347,
	341, 190, 335, -230, -220, -233, 104, 249, 355, -133,
	-219, 361, 9, -305, -102, 29, -231, -232, 49, -125,
	7, 8, 5, 6, -131, -257, -226, -266, 303, 110,
	192, -303, -304, 4, -287, -281, -258, -268, -262, -265,
	155, 58, 75, 76, 79, 77, 80, 262, 314, 50,
	28, 108, 109, 210, 218, 282, 301, 302, 136, 193,
	137, 56, 127, 169, 97, 37, 39, 41, 42, 51,
	52, 85, 87, 88, 115, 116, 117, 147, 149, 150,
	151, 152, 153, 195, 228, 269, 279, 295, 296, 322,
	-288, -269, -270, -263, -264, 70, 124, 145, 138, 157,
	161, 170, 172, 185, 207, 209, 246, 267, -271, -335,
	2, 300, 300, 2, -335, 2, -335, 2, -128, 2,
	300, 297, -311, 229, -307, -125, -311, 358, 358, 360,
	358, -144, -145, 2, 22, 95, -171, 2, 355, -246,
	2, 353, -248, -133, -102, -247, 355, 201, -3, 2,
	-248, 136, -133, 2, -248, 136, -133, 2, -125, 2,
	-136, 136, -133, 297, 360, -158, -151, -125, -210, -209,
	357, -216, 2, -216, 2, 123, 355, -168, -169, -209,
	-210, 2, -159, 136, -125, 2, -159, 2, 142, -125,
	136, 2, -125, 22, 123, 2, 156, 2, 156, 2,
	-249, 2, -248, -160, 136, 2, -159, -160, 136, 2,
	-137, 136, 2, -136, -125, 136, 2, -151, 136, 2,
	-185, 355, -254, 2, -253, -282, 4, -287, -289, -288,
	321, 58, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 260, 200, 360, -159, -216, -228,
	355, 123, -216, 200, -125, 2, 264, 2, 355, -68,
	53, 300, -203, 2, -204, -122, -123, -124, 158, 223,
	227, 334, 297, 340, 123, -277, -162, 357, -89, 2,
	-285, 2, -283, 9, -282, 5, 264, 2, 224, 261,
	55, 123, 2, 2, -327, 2, 200, 123, 2, 123,
	2, 123, 2, 123, 2, 123, 2, 2, 224, 261,
	2, 120, 2, 299, 2, 2, 123, 2, 158, 223,
	276, 2, 285, 324, 2, 123, 123, 334, 2, -174,
	-248, -147, -148, -173, -192, -193, 173, 112, 198, -176,
	22, 95, -176, -176, 44, 356, 356, -89, 264, 2,
	10, 11, 57, 33, 346, 347, 348, 349, 118, 350,
	351, 344, 345, 343, 338, 339, 340, 63, 178, 251,
	13, 14, 15, 26, 203, 172, 335, 138, 267, 341,
	16, 17, 18, 157, 36, 139, -130, -138, -216, -216,
	-216, -216, -216, 209, -167, -211, 353, -102, 355, 355,
	-102, -216, -161, 355, 7, -102, -225, 353, -234, -216,
	-168, 355, 5, 355, 5, -312, 330, 120, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 220, -275, 325,
	-275, -275, -259, 355, -259, -260, 355, -259, 331, 336,
	355, -202, -203, -202, 297, -129, 360, -311, -152, 355,
	-171, -163, -250, -216, 348, -163, -170, -239, 70, -179,
	161, 185, 124, 170, 246, 145, 7, -45, -213, 361,
	355, 348, -243, 336, -102, -247, 355, -246, -133, 355,
	-112, 237, -111, 21, 23, 98, 319, 104, 273, 291,
	253, 237, 104, 237, 273, 291, 253, 237, 104, 361,
	-285, -134, 360, -280, 348, 4, -287, -289, -288, -290,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	49, 50, 54, 57, 59, 65, 69, 74, 75, 77,
	76, 78, 79, 80, 89, 91, 93, 95, 96, 99,
	101, 103, 110, 111, 112, 120, 122, 123, 125, 128,
	130, 139, 142, 144, 154, 156, 165, 168, 173, 175,
	176, 190, 191, 192, 198, 200, 201, 203, 204, 216,
	222, 231, 244, 256, 262, 272, 283, 285, 293, 297,
	298, 303, 308, 309, 314, 316, 323, 324, 326, 327,
	328, 329, 277, 356, -157, -133, -169, 355, -146, 190,
	-121, -309, 329, -146, 355, -126, 136, 2, -125, -309,
	190, -249, -135, -133, -135, 263, -125, 30, -114, 360,
	48, 242, 104, -114, 104, -114, 360, 104, -114, 104,
	104, -161, -216, 356, 360, -326, -332, 69, 355, 30,
	-227, -255, -256, -258, -267, -261, -265, -266, 40, 46,
	45, 292, 183, 258, 270, 317, 140, 38, 199, 148,
	147, 149, 150, 151, 152, 153, 269, 37, 228, 116,
	117, 115, 97, 88, 87, 195, 42, 41, -269, -270,
	-263, -264, 85, 295, 296, 155, 39, 52, 51, 322,
	279, -286, -285, -326, -279, -161, 30, -203, 2, 360,
	-204, 171, -140, 177, 189, 132, 201, 332, -284, 5,
	4, -226, -240, 89, 174, -266, 8, 347, -276, 7,
	346, -278, -277, -278, 73, 357, -280, -159, 22, 265,
	2, -279, -329, 120, -326, -279, -279, -279, -279, -279,
	260, -45, 120, -125, 171, -279, 2, -279, 2, 285,
	142, 285, -114, 360, -173, -193, -192, -195, -216, 22,
	-198, 114, 186, -216, -218, -101, -101, -101, -149, -244,
	-216, 222, 142, -279, -273, -255, -272, 233, 234, 232,
	236, 235, -255, -280, 294, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, 172, 138, 267,
	36, 139, -216, 297, -216, -216, -216, -216, 182, 190,
	192, 303, 110, 310, 95, 196, -337, 283, 32, -223,
	-102, 355, -238, 27, 272, 22, -230, 249, 355, -211,
	-216, -212, -161, 356, 356, 360, -161, -229, 354, -225,
	-237, -236, 326, 356, -161, 323, 22, 95, 348, 2,
	7, -186, 333, 181, 86, 133, 180, -187, 255, -313,
	113, 128, 355, 356, 2, 356, 2, 356, 2, 356,
	2, -216, -216, -180, 2, -274, -161, 4, 333, 181,
	86, 133, 180, 255, -180, 2, -181, 2, -216, -161,
	-182, -217, -218, 346, 347, 341, 355, 249, -183, 2,
	-216, -161, -216, 43, 168, 298, -184, -216, 123, -161,
	-216, -216, -216, -161, -161, 2, -161, 2, 355, 7,
	7, 294, 294, 7, -129, -307, 30, -151, -154, 360,
	123, 30, 4, -154, 360, 356, 161, 161, -246, -179,
	161, -177, 207, -177, -177, -324, 355, 354, -243, -280,
	353, 362, -161, 2, -242, -241, 30, -125, 205, 356,
	-133, 360, 297, -190, 65, 59, -206, 136, 59, -291,
	-125, 65, -292, 54, 309, 222, 122, -190, 65, -190,
	65, 65, -248, 33, -59, 123, 297, -248, 297, 33,
	-59, 123, 297, -136, -280, -252, 337, -125, 123, 356,
	360, -141, -151, -142, -125, -207, -206, -293, -294, -291,
	142, 309, 111, 30, 104, 214, 30, 200, 190, -117,
	288, 104, -208, 327, -199, -59, 355, 89, 30, -199,
	-164, -165, -251, -166, -133, 355, -125, -159, -160, -160,
	-136, -137, -125, -151, 356, 360, -45, -253, 297, 316,
	-142, -44, 356, 360, -153, 29, 353, -186, 355, -252,
	360, 123, 340, 297, 356, 300, -204, -139, 227, 271,
	238, 259, 8, 7, 7, 360, -280, -328, -125, 260,
	-45, -133, -136, -133, -248, -196, -276, 355, 347, -197,
	249, 250, 360, -110, 31, 93, 162, -133, 334, -216,
	-216, 297, -337, 283, -223, -216, 182, 192, 303, 110,
	310, 95, 196, 123, 355, -217, -217, -161, -220, 355,
	-161, 354, 364, 356, -216, 354, 354, 360, -235, -236,
	99, -216, -148, 360, -147, -216, -161, -161, 356, 356,
	297, 297, 297, 297, 355, -318, 208, 355, 355, -216,
	30, 360, 356, 123, 356, 356, -188, 216, 356, 10,
	11, 346, 347, 348, 349, 118, 350, 351, 344, 345,
	343, 338, 339, 340, 63, 178, 251, 13, 14, 15,
	157, 139, -217, -217, -217, -161, 355, 356, -221, -222,
	123, 120, 30, -184, -184, -184, 356, 123, -161, 360,
	360, 360, 356, 356, 356, 7, 356, 360, 356, 334,
	334, 356, 355, 356, -208, -250, -156, 2, -246, -280,
	-208, -239, -246, -246, -178, 316, 200, 161, -246, -241,
	356, -325, 7, -243, -242, 7, -215, -214, 121, 188,
	356, -125, 355, -243, 356, -111, -133, -125, -125, 190,
	-206, 136, -116, 190, -255, -125, 355, 355, 162, 162,
	-125, -125, 136, -125, 136, -125, -125, -112, 237, -59,
	355, -133, 237, -125, -59, 355, -125, 237, -95, 135,
	196, 277, 123, -133, 356, 356, 360, -126, 142, -126,
	-59, -159, 5, -59, -133, 104, -118, 100, -336, 340,
	-125, -194, -192, -216, -175, -201, 244, 200, -157, 321,
	-125, -175, -155, 360, 123, 340, -157, -114, -114, -114,
	-114, -216, -328, -285, 356, -255, 353, 354, 7, 7,
	-98, 329, -285, -328, -277, -277, -122, 307, 62, 227,
	-277, 360, -197, -216, -244, -133, 361, -216, -216, -217,
	-217, 123, 355, -216, -227, 26, 26, 356, -161, 356,
	360, -212, -216, 356, -225, 101, -216, 293, 356, 323,
	-148, -148, -148, 5, 181, 133, 180, -187, 180, -187,
	-187, 7, -319, -125, 355, 327, -147, 356, -273, -255,
	-216, -221, -216, -273, -255, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, 95, 190, 196, -217, 360, -161,
	356, -222, -221, -216, -216, -255, 356, 356, 356, -161,
	-216, -216, -216, 356, 7, -44, -172, 128, -252, 360,
	-172, -178, 355, -216, -246, 354, 356, 360, -242, 354,
	360, 363, 340, -243, 355, -151, -241, 297, 297, 104,
	190, 318, -295, -292, -216, -150, -245, -125, -306, 355,
	-303, -304, -131, 355, 355, -109, 98, 263, -191, 104,
	-114, 104, -114, 297, -190, 65, -161, 297, -161, 297,
	-98, 123, 284, 277, -143, 141, -207, 355, -126, 355,
	355, -146, 355, -125, -119, 167, -336, -283, -309, -175,
	-175, -163, 191, 64, 356, -208, -165, -156, -239, 356,
	-99, 71, -99, 7, 354, 356, -97, 202, -96, -125,
	5, -125, 201, 356, -110, -280, 26, 26, -216, -227,
	356, -216, -216, 356, -216, 354, -216, 5, -216, 356,
	356, 356, 356, -320, -125, -216, 356, 356, 356, -222,
	123, 95, 196, 355, -216, 356, 356, 360, 356, 356,
	356, 356, -224, 130, 44, -246, -224, -151, -213, 7,
	-214, -280, 353, -242, -151, 356, -125, -125, -206, 104,
	-296, 65, -297, 57, 111, 69, 190, 192, 309, 222,
	54, 89, 231, 356, 356, 360, -132, -168, 57, -132,
	-216, 355, -150, -151, 190, 89, 190, 89, 82, 305,
	-125, -125, -133, -125, -125, 356, -133, 356, -125, -286,
	294, 139, -150, 355, -151, -141, 30, -150, 200, -120,
	166, -336, -283, -117, -200, 355, 200, -59, -175, 340,
	82, 82, 354, 360, 355, 340, 340, -110, -216, -216,
	356, 356, -148, -314, 213, 356, -217, 123, 355, -227,
	356, -216, -315, 328, -216, -161, -315, 356, -243, 7,
	356, -206, -125, -280, -125, 111, 136, 192, 162, 355,
	-217, -133, -205, -333, 68, 281, -245, -110, -280, -110,
	356, -161, 356, 356, 192, 192, -216, -255, -114, -114,
	297, 297, 297, 297, -219, -131, -125, 211, 356, -150,
	356, 356, -59, 356, -133, -336, -283, -118, 96, -151,
	65, -171, -102, 355, 355, 355, -96, -97, -285, -285,
	356, -148, 44, -217, -227, 356, 356, -316, -317, -125,
	-242, 354, -297, -126, 190, -216, -127, 355, -143, 355,
	-132, -148, 231, -113, 57, -125, -125, 355, 355, 355,
	-133, -205, 356, -143, -205, 355, -283, -119, 311, 191,
	356, -125, -286, -286, 356, -321, 226, 250, -161, 356,
	360, 30, 104, 356, -300, 179, -125, -151, -110, 356,
	-133, -108, 316, -280, -161, -161, -161, 355, -143, -205,
	-143, -150, -120, 263, -208, 356, 356, 356, -322, -323,
	36, 306, 73, -216, -322, -317, -319, 111, -298, -301,
	-299, 200, 124, 212, 268, 356, 356, -146, -216, 356,
	356, -148, -151, -143, 356, -164, -98, -98, -323, 219,
	119, 249, 219, 119, -125, -299, 200, -301, 200, 311,
	92, -300, 356, 356, -205, -208, 26, -302, 187, 242,
	48, 263, -302, -298, -115, 48, 242, -143, -323, 20,
	192, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	635, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	557, 559, 561, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 671, -2, 682, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 648, 650,
	652, 654, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1238, 1165,
	1171, 1172, 1196, 1197, 1198, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 143, 145, 146,
	0, 0, 0, 1167, 1238, 152, 154, 156, 158, 0,
	164, 0, 0, 0, 0, 524, 161, 163, 253, 1297,
	255, 257, 0, 0, 0, 0, 167, 168, 169, 170,
	171, 172, 174, 176, 178, 180, 182, 183, 0, 0,
	0, 0, 0, 252, 250, 205, 206, 0, 235, 236,
	237, 238, 239, 241, 209, 211, 212, 214, 216, 218,
	220, 221, 223, 225, 226, 228, 230, 231, 233, 0,
	0, 259, 265, 266, 267, 269, 270, 271, 272, 273,
	274, 275, 0, 123, 0, 445, 248, 246, 0, 119,
	0, 554, 0, 261, 555, 556, 551, 552, 1324, 580,
	279, 281, 290, 292, 294, -2, -2, 1414, -2, 303,
	-2, 311, 1420, 0, 314, 315, 318, -2, 201, 340,
	342, 344, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 369, 371, 373, 374, 375, 0, 0,
	0, 379, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 378, 380, 381, 382, 0, 558, 560, 562,
	0, 514, 673, -2, 646, 647, -2, 0, 677, 677,
	677, 0, 0, 647, 645, 0, 282, 0, 284, 0,
	379, 287, 288, 319, 320, 1150, 1151, 875, 0, 0,
	0, 0, 0, 0, 967, 969, 1387, 1414, 0, 971,
	972, 0, 974, 976, 977, 0, 980, 981, 1135, 1167,
	1181, 1182, 1183, 1184, 0, 0, 1187, 0, 1189, 1190,
	1191, 1035, 991, -2, -2, 1179, 803, 804, 805, 806,
	-2, 1428, 995, 998, 1001, 1004, 1005, 1008, 1009, 0,
	1371, 1388, 1389, 1410, 1411, 1419, 1423, 1424, 1395, 1407,
	1396, 1383, 1393, 1405, 1244, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1205, 837, 838, 843, 844, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 846, 582,
	564, 573, 582, 566, 567, 568, 569, 570, 571, 572,
	575, 0, 663, 1303, 666, 1178, 664, 649, 651, 0,
	653, 0, 0, 657, 679, 678, 712, 713, 0, 661,
	662, 672, 728, 766, 743, 734, 0, 0, 2, 68,
	0, 1395, 766, 70, 0, 1395, 766, 72, 0, 77,
	0, 1395, 1170, 0, 0, 263, 264, 1175, 1173, 1174,
	0, 147, 148, 149, 150, 0, 0, 1168, 1144, 1142,
	1143, 159, 493, 1395, -2, 516, 493, 520, -2, 670,
	1395, 595, 254, 256, 0, 166, 0, 608, 0, 610,
	0, 625, 772, 109, 1395, 186, 199, 109, 1395, 189,
	109, 1395, 192, 1163, 109, 1395, 195, 196, 1395, 198,
	249, 0, 0, -2, 242, 244, 1206, 1207, 1208, 1209,
	-2, 1428, 240, 210, 213, 215, 217, 219, 222, 224,
	227, 229, 232, 234, -2, 0, 0, 0, 444, 0,
	0, 0, 553, 0, 579, 297, 0, 300, 0, 302,
	1382, -2, 305, 306, 583, 586, 587, 588, 0, 0,
	0, 0, 0, 0, 0, 316, 202, 0, 376, 377,
	385, 386, 124, 125, 337, 338, 0, 389, 410, 422,
	0, 0, 393, 395, 443, 397, 0, 0, 399, 0,
	401, 0, 403, 0, 405, 0, 407, 409, 411, 423,
	413, 672, 415, 0, 417, 421, 0, 426, 0, 428,
	429, 430, 0, 0, 436, 0, 0, 383, 384, 109,
	770, -2, 0, 641, 691, 692, 0, 0, 0, 0,
	675, 676, 0, 0, 0, 637, 638, 283, 0, 286,
	0, 0, 0, 0, 1070, 1071, 1072, 1073, 1074, 1075,
	1078, 1079, 1076, 1077, 1080, 1081, 1082, 0, 0, 0,
	1083, 1084, 1085, 0, 0, 1087, 0, 1089, 0, 0,
	0, 0, 0, 0, 1149, 0, 0, 1086, 880, 881,
	882, 904, 905, 0, 968, 1146, 1139, 970, 0, 0,
	-2, 1091, 0, 0, 973, 978, 979, 0, 0, 1134,
	-2, 0, 1186, 0, 872, 1037, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 840, 851,
	848, 847, 824, 0, 823, 821, 0, 825, 0, 0,
	0, 563, 581, 565, 0, 577, 0, 665, 0, 0,
	714, 717, 1155, 1159, 1160, 717, 0, 1152, 0, 0,
	0, 0, 763, 763, 763, 761, 737, 0, 743, 0,
	0, 767, 755, 0, -2, 734, 0, 0, 768, 0,
	78, 548, 88, 0, 548, 548, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	757, 1166, 0, 1140, 1141, 1210, 1211, 1212, 1213, 1214,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 139, 0, 0, 1161, 1145, 451, 0, 0,
	515, 0, 669, 0, 0, 0, 1395, 523, 1199, 597,
	0, 776, 0, 611, 0, 0, 773, 0, 184, 0,
	107, 108, 0, 187, 0, 190, 0, 0, 193, 0,
	0, 0, 1091, 672, 0, 0, 268, 0, 0, 672,
	0, 1093, 784, 785, 786, 787, 788, 872, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 834, 0, 809, 809, 809, 826, 827, 835, 836,
	841, 842, 853, 854, 856, 858, 852, 852, 852, 849,
	850, 757, 126, 0, 0, 0, 0, 307, 308, 0,
	585, 0, 589, 328, 329, 330, 591, 592, 312, 331,
	332, 333, 334, 335, 336, 0, 510, 0, 512, 1192,
	0, 309, 321, 310, 313, 0, 203, 387, 388, 390,
	391, 392, 396, 0, 440, 398, 400, 402, 404, 406,
	414, 418, 672, 424, 427, 431, 432, 433, 434, 0,
	0, 0, 513, 0, 644, 689, 690, 695, 699, 700,
	703, 706, 707, 697, 875, 658, 659, 660, 683, 684,
	535, 0, 0, 285, 876, 780, 781, 828, 829, 830,
	831, 832, 877, 878, 0, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, -2, -2, -2, 896, 897,
	898, -2, -2, -2, 902, 903, -2, 1088, 1090, 0,
	1149, 0, -2, 0, -2, -2, -2, -2, 916, 0,
	918, 921, 923, 925, 0, 0, 0, 0, 1148, 935,
	1126, 0, 0, 1067, 1068, 1069, 920, 0, 0, 1147,
	1138, 0, 0, -2, 975, 0, 0, 0, 1097, 1098,
	1133, 1129, 0, 982, 682, 0, 0, 0, 0, 989,
	0, 1195, 859, 860, 861, 862, 863, 864, 873, 1045,
	0, 0, 0, 996, 997, 999, 1000, 1002, 1003, 1006,
	1007, 0, 0, 0, 1013, 0, 1101, -2, -2, -2,
	-2, -2, -2, -2, 0, 1015, 0, 1017, 1091, 1111,
	0, 0, 938, 0, 0, 0, 0, 1414, 0, 1020,
	1091, 1119, 0, 0, 0, 0, 0, 1091, 0, 1125,
	0, 0, 0, 0, 0, 1031, 0, 1033, 0, 0,
	0, 0, 0, 0, 576, 667, 0, 0, 776, 0,
	0, 0, 1158, 776, 0, 1154, 0, 0, 0, 0,
	0, 758, 762, 759, 760, 0, 0, 743, 755, 725,
	0, 0, 0, 732, 733, 754, 0, 753, 742, -2,
	0, 0, 0, 0, 0, 547, 90, 1395, 0, 111,
	0, 0, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 1169, 129, 0, 1176, 0, 0,
	0, 0, 0, 450, 1175, 452, 454, 455, 456, 457,
	1200, 0, 1200, 0, 0, 0, 0, 0, 0, 599,
	605, 0, 694, 0, 623, 613, 0, 0, 0, 623,
	627, 628, 630, 631, 0, 0, 774, 200, 109, 109,
	1164, 109, 109, 197, 251, 0, 207, 243, 0, 0,
	0, 245, 247, 0, 777, 779, 0, 789, 0, 138,
	0, 0, 0, 0, 301, 0, 584, 590, 0, 325,
	0, 327, 511, 1194, 1193, 0, 204, 442, 276, 416,
	419, 437, 438, 439, 771, 0, 701, 0, 0, 698,
	704, 705, 0, 686, 533, 534, 0, 0, 0, -2,
	-2, 0, 0, 0, 936, -2, 917, 919, 922, 924,
	926, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 1136, 1139, -2, 1092, 1095, 1096, 0, 0, 1130,
	0, 0, 0, 0, 681, 682, 682, 682, 988, 0,
	0, 0, 0, 0, 0, 990, 0, 0, 0, 0,
	0, 0, 1012, 0, 1014, 1016, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 942, 943, 0, 0, 1019, 1117, 1118,
	0, 0, 0, 0, 0, 0, 1025, 0, 1124, 0,
	0, 0, 1029, 1030, 1032, 0, 807, 0, 833, 855,
	857, 845, 672, 1177, 709, 1156, 757, 716, 718, 1157,
	709, 1153, 745, 0, 747, 0, 0, 0, 749, 0,
	738, 0, 740, 755, 730, 0, 0, 723, 0, 722,
	743, 751, 0, 0, 769, 89, 537, 0, 0, 0,
	92, 1395, 100, 0, 465, 0, 0, 0, 0, 0,
	550, 101, 1395, 109, 1395, 109, 102, 79, 548, 80,
	0, 543, 0, 536, 81, 0, 545, 0, 138, 0,
	0, 140, 0, 1162, 459, 492, 0, 0, 1200, 0,
	448, 493, 517, 519, 0, 0, 601, 605, 0, 604,
	670, 623, 693, 775, 606, 623, 0, 0, 0, 615,
	612, 609, 776, 0, 0, 0, 0, 185, 188, 191,
	194, 1092, 258, 0, 0, 1094, 0, 782, 0, 0,
	118, 0, 127, 260, 298, 299, 304, 323, 324, 326,
	322, 0, 0, 0, 685, 535, 0, 879, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1127, 0, 1062,
	0, 0, 1138, -2, 1099, 1128, 1132, 0, 983, 0,
	0, 0, 0, 1188, 865, 866, 867, 868, 869, 870,
	871, 0, 1043, 1044, 1048, 0, 0, 994, 0, 0,
	1100, 1110, 1112, 939, 940, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, -2, -2, -2, 957, 958,
	959, -2, -2, -2, 0, 0, 0, 1113, 0, 0,
	1065, 1115, 1116, 1121, 1122, 0, 1022, 1023, 1024, 1123,
	0, 0, 0, 839, 0, 0, 711, 0, 715, 0,
	711, 746, 0, 765, 748, 728, 739, 0, 736, 726,
	0, 727, 0, 755, 0, 0, 735, 0, 0, 0,
	0, 110, 463, 482, 0, 0, 526, 532, 532, 0,
	992, 993, 0, 0, 0, 94, 0, 0, 0, 0,
	98, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 141, 446, 0, 453, 0, 0, 0,
	451, 0, 0, 0, 603, 605, 0, 596, 597, 165,
	607, 621, 622, 620, 0, 623, 629, 626, 632, 0,
	0, 120, 0, 0, 783, 790, 136, 1287, 134, 131,
	133, 277, 696, 702, 687, 535, 0, 0, -2, 0,
	929, -2, -2, 1061, 1092, 1137, 1131, 1185, 682, 984,
	986, 987, 874, 1050, 1047, 0, 1034, 1010, 1011, 1109,
	0, 0, 0, 0, 1092, 1064, 1021, 0, 1027, 1028,
	808, 668, 1039, 0, 0, 719, 1039, 0, 743, 741,
	724, 720, 0, 731, 0, 752, 539, 541, 91, 0,
	464, 0, 467, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 484, 491, 0, 535, 1180, 0, 535,
	0, 0, 0, 0, 0, 106, 0, 0, 549, 0,
	109, 109, 538, 0, 0, 0, 544, 0, 546, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	605, 0, 598, 599, 0, 0, 0, 614, 624, 0,
	0, 0, 778, 0, 0, 0, 0, 688, -2, -2,
	930, 1063, 0, 682, 0, 1036, -2, 0, 0, 0,
	1066, 0, 655, 0, 710, 708, 656, 764, 755, 0,
	750, 93, 0, 468, 469, 1200, 0, 472, 475, 0,
	477, 1202, 459, 0, 488, 489, 527, 528, 531, 529,
	532, 682, 486, 0, 95, 96, 105, 113, 97, 103,
	0, 0, 0, 0, 756, 0, 0, 0, 491, 0,
	481, 459, 449, 491, 0, 0, 600, 601, 0, 0,
	0, 633, 634, 0, 0, 0, 135, 0, 130, 132,
	985, 1053, 0, -2, 0, 965, 1026, 1038, 1040, 0,
	729, 721, 466, 470, 0, 0, 497, 0, 485, 0,
	535, 0, 0, 115, 0, 540, 542, 0, 0, 0,
	0, 459, 491, 447, 459, 0, 602, 603, 0, 617,
	776, 619, 0, 0, 137, 0, 0, 0, 1049, 966,
	0, 0, 0, 476, 502, 0, 0, 0, 530, 983,
	493, 99, 0, 112, 0, 0, 682, 0, 479, 459,
	521, 0, 594, 0, 618, 138, 138, 1046, 1051, 1054,
	-2, 1355, 1235, 0, 1052, 1041, 1042, 0, 478, 498,
	499, 0, 494, 495, 496, 1201, 490, 497, 114, 85,
	87, 0, 0, 480, 491, 776, 121, 122, 0, 1056,
	1057, 1058, 1059, 1060, 471, 500, 0, 501, 0, 0,
	0, 502, 0, 462, 459, 616, 0, 503, 0, 506,
	507, 0, 504, 487, 458, 460, 461, 522, 1055, 505,
	508, 509,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 344, 3, 350, 345, 3,
	355, 356, 348, 346, 360, 347, 357, 349, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 364, 359,
	338, 340, 339, 3, 361, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 353, 3, 354, 351, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 362, 343, 363, 341,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 342, 57681, 352, 57682, 358, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = ReadOnly
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = ReadWrite
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3253
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			return helpWith(sqllex, "INSERT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "SELECT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "VALUES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			return helpWith(sqllex, "TABLE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3588
		{
			return helpWith(sqllex, "SELECT")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			return helpWith(sqllex, "TABLE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex, "cte")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3656
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3660
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = true
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3688
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			return helpWith(sqllex, "VALUES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &From{}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3913
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3995
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = nil
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.str = astFullJoin
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.str = astLeftJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.str = astRightJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.str = astInnerJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4279
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4287
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4398
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = nil
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4559
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4591
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4631
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = year
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = month
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = day
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = hour
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = minute
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = month
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = hour
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = minute
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = minute
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = nil
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = second
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4726
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4761
		{
			return unimplemented(sqllex, "at tz")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4995
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5168
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5221
		{
			return unimplemented(sqllex, "variadic")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5222
		{
			return unimplemented(sqllex, "variadic")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5246
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5262
		{
			return unimplemented(sqllex, "func_application")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5267
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			return unimplemented(sqllex, "current role")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5345
		{
			return unimplemented(sqllex, "treat")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5391
		{
			return unimplemented(sqllex, "within group")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5392
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5427
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.str = ""
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5489
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5490
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5491
		{
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5494
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5495
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5504
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5505
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Any
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = Some
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = All
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = Plus
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = Minus
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = Mult
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = Div
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = Mod
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = Bitand
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = Bitor
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = Pow
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = Bitxor
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = LT
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = GT
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = EQ
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = LE
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = GE
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = NE
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = Like
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = NotLike
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = ILike
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = NotILike
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5869
		{
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5870
		{
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6032
		{
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6068
		{
			return unimplemented(sqllex, "func const")
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6077
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = DNull
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6104
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.str = ""
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
