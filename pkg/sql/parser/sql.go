// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5888

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 33,
	354, 33,
	-2, 507,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 66,
	1, 479,
	197, 479,
	241, 479,
	350, 479,
	352, 479,
	354, 479,
	-2, 489,
	-1, 112,
	1, 482,
	197, 482,
	241, 482,
	350, 482,
	352, 482,
	354, 482,
	-2, 488,
	-1, 130,
	1, 33,
	354, 33,
	-2, 507,
	-1, 511,
	122, 1088,
	293, 1088,
	336, 1088,
	353, 1088,
	-2, 0,
	-1, 522,
	1, 216,
	354, 216,
	-2, 1093,
	-1, 535,
	111, 517,
	170, 517,
	195, 517,
	-2, 485,
	-1, 543,
	111, 516,
	170, 516,
	195, 516,
	-2, 483,
	-1, 696,
	351, 1020,
	-2, 1013,
	-1, 697,
	351, 1021,
	-2, 1014,
	-1, 703,
	5, 687,
	351, 687,
	-2, 1218,
	-1, 728,
	5, 646,
	-2, 1188,
	-1, 729,
	5, 681,
	351, 681,
	-2, 1190,
	-1, 730,
	5, 656,
	-2, 1191,
	-1, 731,
	5, 655,
	-2, 1192,
	-1, 732,
	5, 681,
	351, 681,
	-2, 1195,
	-1, 733,
	5, 681,
	351, 681,
	-2, 1196,
	-1, 734,
	5, 682,
	-2, 1199,
	-1, 735,
	5, 638,
	-2, 1200,
	-1, 736,
	5, 638,
	-2, 1201,
	-1, 737,
	5, 663,
	-2, 1205,
	-1, 738,
	5, 648,
	-2, 1206,
	-1, 739,
	5, 649,
	-2, 1207,
	-1, 740,
	5, 639,
	-2, 1212,
	-1, 741,
	5, 640,
	-2, 1213,
	-1, 742,
	5, 641,
	-2, 1214,
	-1, 743,
	5, 642,
	-2, 1215,
	-1, 744,
	5, 643,
	-2, 1216,
	-1, 745,
	5, 644,
	-2, 1217,
	-1, 746,
	5, 638,
	-2, 1222,
	-1, 747,
	5, 647,
	-2, 1227,
	-1, 748,
	5, 645,
	-2, 1230,
	-1, 749,
	5, 679,
	351, 679,
	-2, 1232,
	-1, 750,
	5, 683,
	-2, 1235,
	-1, 751,
	5, 685,
	-2, 1236,
	-1, 752,
	5, 678,
	351, 678,
	-2, 1241,
	-1, 797,
	211, 505,
	-2, 379,
	-1, 802,
	111, 516,
	170, 516,
	195, 516,
	-2, 486,
	-1, 905,
	102, 489,
	111, 489,
	151, 489,
	170, 489,
	195, 489,
	201, 489,
	304, 489,
	-2, 573,
	-1, 982,
	102, 489,
	111, 489,
	151, 489,
	170, 489,
	195, 489,
	201, 489,
	304, 489,
	-2, 806,
	-1, 991,
	351, 997,
	-2, 985,
	-1, 1236,
	1, 574,
	70, 574,
	102, 574,
	111, 574,
	123, 574,
	127, 574,
	129, 574,
	142, 574,
	151, 574,
	158, 574,
	167, 574,
	170, 574,
	182, 574,
	195, 574,
	197, 574,
	201, 574,
	241, 574,
	243, 574,
	304, 574,
	312, 574,
	323, 574,
	324, 574,
	333, 574,
	350, 574,
	352, 574,
	354, 574,
	355, 574,
	-2, 573,
	-1, 1285,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 722,
	-1, 1286,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 723,
	-1, 1287,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 724,
	-1, 1291,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 728,
	-1, 1292,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 729,
	-1, 1293,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 730,
	-1, 1296,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1302,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1304,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 741,
	-1, 1305,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 742,
	-1, 1306,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 743,
	-1, 1307,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 744,
	-1, 1333,
	206, 879,
	-2, 882,
	-1, 1370,
	122, 919,
	351, 1020,
	-2, 1013,
	-1, 1371,
	122, 920,
	-2, 1184,
	-1, 1372,
	122, 921,
	-2, 1092,
	-1, 1373,
	122, 922,
	-2, 1056,
	-1, 1374,
	122, 923,
	-2, 1073,
	-1, 1375,
	122, 924,
	-2, 1091,
	-1, 1376,
	122, 925,
	-2, 1143,
	-1, 1572,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1573,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1578,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1596,
	206, 878,
	-2, 881,
	-1, 1796,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 740,
	-1, 1801,
	154, 0,
	-2, 756,
	-1, 1811,
	206, 880,
	-2, 883,
	-1, 1853,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 783,
	-1, 1854,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 784,
	-1, 1855,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 785,
	-1, 1859,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 789,
	-1, 1860,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 790,
	-1, 1861,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 791,
	-1, 1965,
	154, 0,
	-2, 757,
	-1, 1968,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 760,
	-1, 1969,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 762,
	-1, 2075,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 761,
	-1, 2076,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 763,
	-1, 2083,
	154, 0,
	-2, 792,
	-1, 2149,
	154, 0,
	-2, 793,
	-1, 2221,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1187,
}

const sqlPrivate = 57344

const sqlLast = 31394

var sqlAct = [...]int{

	697, 2228, 1887, 2265, 2197, 2220, 2105, 2230, 2229, 1119,
	2219, 1244, 1252, 2137, 544, 2032, 1910, 1830, 2018, 392,
	2090, 1126, 2003, 1231, 65, 1032, 1717, 640, 1399, 673,
	2057, 1719, 687, 1894, 1476, 618, 1540, 1082, 139, 1434,
	899, 139, 1662, 1457, 1439, 1447, 1893, 1554, 139, 1490,
	1435, 903, 695, 1941, 1607, 1438, 139, 1356, 987, 394,
	1264, 139, 139, 1122, 1661, 139, 1521, 1331, 139, 1520,
	886, 559, 879, 1253, 1527, 139, 1114, 1690, 1157, 1760,
	1232, 1184, 694, 1186, 1481, 551, 110, 1472, 368, 1083,
	1033, 1108, 775, 1341, 667, 1238, 1319, 622, 376, 24,
	1316, 880, 811, 917, 562, 1442, 809, 774, 1350, 978,
	366, 563, 666, 890, 1246, 654, 568, 1367, 1219, 804,
	1206, 610, 499, 818, 139, 139, 519, 819, 1018, 817,
	139, 1396, 521, 112, 139, 139, 131, 1106, 863, 549,
	113, 554, 110, 517, 689, 2019, 384, 921, 135, 625,
	648, 608, 862, 515, 1595, 503, 823, 933, 934, 1116,
	953, 954, 955, 963, 964, 965, 1774, 122, 543, 1775,
	1245, 2251, 2242, 956, 912, 1260, 2241, 548, 1116, 1260,
	936, 2239, 548, 967, 2017, 632, 2237, 900, 1729, 912,
	502, 1116, 1140, 1566, 2191, 1022, 620, 1414, 496, 1260,
	1249, 2182, 1565, 1421, 935, 2165, 1353, 552, 2017, 2154,
	950, 2151, 2153, 109, 1414, 2144, 110, 2120, 912, 122,
	2017, 2117, 2116, 2115, 912, 2017, 912, 1208, 1763, 24,
	37, 117, 2103, 1632, 1633, 2017, 1650, 1651, 1652, 2077,
	125, 111, 1414, 108, 536, 1207, 1488, 1730, 55, 1964,
	56, 535, 2065, 1354, 1866, 912, 2062, 119, 2054, 912,
	1808, 1260, 912, 40, 941, 109, 2053, 2016, 129, 1260,
	2017, 1701, 571, 1475, 58, 1992, 612, 1970, 1260, 1967,
	1260, 1431, 1414, 960, 968, 47, 1647, 1954, 1805, 49,
	912, 1260, 1794, 111, 1789, 1243, 120, 1243, 1355, 1352,
	55, 966, 56, 1770, 128, 1239, 1771, 1700, 1599, 1090,
	912, 140, 123, 1600, 1679, 1677, 958, 1680, 1260, 124,
	57, 1676, 951, 1335, 1260, 1675, 58, 1763, 1260, 1598,
	1596, 1260, 1543, 1260, 1260, 1260, 1606, 1239, 114, 875,
	1638, 933, 934, 1517, 630, 1423, 912, 957, 1260, 1413,
	1117, 1259, 1414, 1242, 1260, 139, 1243, 658, 1213, 1421,
	139, 1212, 617, 929, 936, 125, 930, 130, 568, 1117,
	395, 636, 1112, 1357, 2020, 125, 565, 1653, 1535, 904,
	789, 2243, 1117, 2235, 2218, 2204, 2146, 2118, 935, 1997,
	1993, 1985, 549, 129, 1984, 952, 1983, 125, 1648, 830,
	1979, 1483, 1978, 129, 1977, 1976, 1959, 116, 59, 1940,
	1885, 961, 1881, 1876, 60, 1875, 1874, 1816, 1699, 1684,
	933, 934, 1704, 637, 1681, 129, 1565, 569, 1669, 128,
	1660, 1631, 67, 68, 61, 1628, 62, 123, 63, 128,
	121, 1627, 1625, 936, 124, 64, 1612, 1611, 941, 125,
	1351, 1547, 1364, 1363, 1362, 830, 74, 649, 1236, 116,
	1207, 128, 988, 1248, 114, 995, 1138, 935, 118, 123,
	1327, 1649, 1419, 114, 2140, 829, 124, 129, 959, 655,
	1125, 947, 948, 949, 962, 1133, 946, 944, 945, 937,
	938, 939, 940, 942, 943, 114, 96, 639, 1115, 1832,
	902, 139, 1994, 2194, 2181, 115, 951, 901, 122, 2180,
	2173, 2167, 2163, 128, 2141, 139, 2100, 2085, 2074, 897,
	2023, 123, 2015, 568, 1999, 139, 1990, 941, 124, 1908,
	139, 139, 139, 1906, 139, 122, 1632, 1633, 1905, 139,
	139, 139, 139, 139, 1904, 1901, 1891, 114, 1800, 1778,
	803, 1766, 1753, 1751, 109, 1705, 1708, 1644, 1645, 1646,
	1958, 1659, 1643, 1641, 1642, 1634, 1635, 1636, 1637, 1639,
	1640, 1688, 1621, 1620, 568, 1328, 1617, 1592, 1587, 952,
	1321, 109, 111, 1545, 1516, 1023, 1026, 1406, 1361, 55,
	802, 56, 1224, 815, 1118, 1030, 1016, 1015, 753, 1014,
	1013, 1012, 933, 934, 139, 139, 139, 139, 139, 111,
	139, 1011, 1010, 1009, 785, 58, 55, 1008, 56, 1007,
	1006, 1005, 791, 1004, 1003, 936, 1002, 139, 139, 1001,
	568, 139, 1000, 999, 1705, 992, 981, 394, 114, 139,
	619, 878, 58, 1638, 769, 836, 139, 139, 139, 935,
	139, 549, 638, 884, 760, 773, 913, 396, 139, 807,
	765, 652, 795, 835, 798, 1998, 1972, 919, 770, 1884,
	636, 806, 806, 937, 938, 939, 940, 942, 943, 569,
	1773, 927, 1769, 1225, 988, 536, 1686, 883, 1416, 1632,
	1633, 979, 535, 907, 933, 934, 549, 902, 1194, 2156,
	984, 836, 867, 826, 827, 873, 782, 110, 870, 1720,
	1962, 566, 1471, 1776, 570, 1567, 1239, 936, 1192, 910,
	1470, 1353, 904, 1533, 933, 934, 866, 690, 834, 1683,
	1682, 784, 898, 1632, 1633, 1193, 1571, 781, 125, 766,
	997, 935, 1173, 649, 933, 934, 1123, 936, 116, 783,
	1096, 864, 937, 938, 939, 940, 942, 943, 1028, 1691,
	2058, 876, 568, 1029, 139, 125, 129, 936, 1354, 139,
	1245, 935, 1833, 1342, 1019, 116, 906, 950, 606, 911,
	858, 1603, 1561, 568, 568, 1924, 2210, 2143, 2257, 2047,
	394, 935, 902, 129, 931, 923, 920, 1424, 1087, 597,
	139, 941, 128, 603, 598, 932, 602, 2258, 1124, 1113,
	123, 994, 526, 1355, 1352, 853, 2135, 124, 2134, 859,
	1187, 1696, 1188, 2133, 2132, 1939, 1938, 1921, 991, 128,
	1920, 941, 1616, 836, 569, 605, 114, 123, 1615, 139,
	1638, 1614, 1613, 139, 124, 139, 139, 139, 139, 139,
	139, 941, 1574, 1514, 1513, 139, 1511, 1956, 1303, 139,
	139, 1020, 1021, 114, 1129, 541, 139, 1263, 1634, 1635,
	1636, 1637, 1639, 1640, 865, 629, 139, 1410, 527, 139,
	1097, 1132, 1458, 1409, 1135, 569, 1137, 1448, 1357, 951,
	1274, 1182, 139, 1492, 525, 1086, 1189, 1181, 1783, 1935,
	1084, 394, 782, 1318, 139, 1784, 2142, 1318, 533, 951,
	139, 1089, 1085, 139, 1687, 2107, 1551, 1187, 1492, 1188,
	1227, 1109, 540, 1102, 1491, 139, 1101, 139, 356, 1205,
	1230, 568, 1024, 1131, 915, 1163, 394, 768, 110, 943,
	2185, 569, 1027, 1144, 1357, 783, 1143, 1926, 395, 924,
	2248, 1226, 528, 855, 1450, 1273, 2268, 536, 1216, 360,
	536, 536, 952, 1174, 1153, 1351, 570, 1154, 1155, 1164,
	850, 1161, 1168, 1169, 1170, 1171, 1172, 604, 1325, 1555,
	357, 1167, 952, 1323, 1758, 1178, 1179, 547, 1183, 1755,
	1826, 1473, 1474, 1189, 1201, 2263, 1198, 1203, 1632, 1633,
	1200, 1650, 1651, 1652, 1211, 1342, 1217, 851, 1417, 660,
	1332, 2232, 1197, 1221, 1222, 110, 607, 1336, 856, 919,
	1247, 1344, 1247, 2257, 1265, 1272, 1640, 1697, 939, 940,
	942, 943, 1195, 1369, 1369, 1380, 546, 1391, 1251, 1180,
	1261, 1017, 655, 1403, 1404, 1405, 1262, 1339, 2188, 1196,
	682, 1647, 1449, 946, 944, 945, 937, 938, 939, 940,
	942, 943, 1695, 2170, 539, 1357, 2011, 1636, 1637, 1639,
	1640, 857, 2189, 569, 944, 945, 937, 938, 939, 940,
	942, 943, 2081, 1187, 1823, 1188, 548, 1329, 136, 1326,
	1453, 351, 2266, 542, 569, 569, 1116, 2233, 353, 2247,
	2012, 395, 2092, 538, 976, 1638, 365, 529, 1619, 1220,
	1927, 495, 136, 394, 1190, 501, 139, 110, 501, 139,
	1412, 570, 1559, 1377, 2108, 523, 139, 1933, 1235, 1824,
	1749, 534, 1432, 839, 139, 139, 530, 139, 1498, 139,
	139, 394, 139, 139, 359, 358, 531, 2267, 1418, 1382,
	1576, 361, 1489, 2234, 1317, 548, 1886, 1915, 1427, 1189,
	1465, 139, 2231, 1648, 2256, 2254, 1555, 139, 2269, 1429,
	840, 2031, 570, 838, 611, 611, 1455, 844, 1420, 763,
	351, 139, 139, 139, 136, 633, 2264, 657, 139, 545,
	1430, 362, 139, 1467, 778, 822, 821, 2246, 1425, 2007,
	139, 2008, 1428, 139, 1357, 1300, 1550, 1021, 1020, 139,
	394, 1190, 395, 1433, 1862, 139, 139, 2276, 1518, 139,
	363, 1988, 364, 1523, 139, 1324, 2127, 139, 570, 1522,
	505, 2010, 1493, 2126, 139, 396, 1649, 2043, 1499, 1501,
	2013, 1463, 569, 2098, 139, 2046, 1464, 395, 506, 139,
	1537, 139, 2045, 1469, 1461, 820, 1462, 2160, 139, 779,
	1024, 110, 1027, 780, 139, 1923, 1460, 806, 889, 806,
	1740, 1100, 1099, 549, 565, 560, 1736, 1536, 1456, 1130,
	822, 1525, 1526, 1524, 1486, 1531, 1484, 1117, 1546, 1504,
	1120, 1822, 1506, 1496, 1557, 1509, 1185, 1632, 1633, 1563,
	1515, 1314, 1512, 1149, 1532, 1298, 1301, 1863, 507, 1519,
	2198, 1632, 1633, 1864, 1541, 1177, 1312, 2009, 2275, 821,
	1989, 893, 1644, 1645, 1646, 1091, 1911, 1643, 1641, 1642,
	1634, 1635, 1636, 1637, 1639, 1640, 2042, 2033, 1297, 893,
	896, 2099, 1095, 1710, 1709, 1479, 549, 1530, 1570, 1215,
	1590, 2044, 1560, 1214, 778, 1103, 891, 1593, 896, 1605,
	570, 1568, 497, 546, 1647, 894, 494, 647, 382, 799,
	646, 1888, 2000, 1150, 1218, 1609, 1610, 1190, 820, 1542,
	892, 570, 570, 894, 2096, 1093, 1308, 642, 396, 1549,
	1942, 380, 32, 641, 1309, 1529, 1310, 1094, 1577, 132,
	1315, 1575, 1761, 1360, 1638, 643, 2084, 508, 2097, 1664,
	351, 3, 549, 379, 31, 385, 1658, 1591, 1638, 1076,
	1987, 1663, 568, 139, 395, 1799, 1782, 1671, 375, 28,
	378, 17, 568, 1299, 1602, 1626, 1586, 390, 1104, 372,
	13, 895, 1552, 386, 139, 1510, 139, 139, 374, 16,
	1507, 1422, 395, 139, 1241, 861, 139, 860, 854, 895,
	139, 849, 1648, 1584, 848, 1703, 847, 1706, 1813, 846,
	387, 845, 842, 761, 645, 1175, 1648, 1166, 1582, 998,
	139, 373, 14, 504, 852, 509, 1359, 2227, 1039, 389,
	139, 139, 139, 836, 2195, 2041, 139, 1931, 596, 396,
	139, 139, 139, 139, 139, 1685, 1311, 1693, 1929, 1105,
	1528, 1692, 139, 1313, 139, 139, 510, 1694, 371, 12,
	1922, 395, 32, 1698, 634, 1666, 1667, 1668, 1702, 570,
	635, 139, 1716, 631, 396, 1649, 1459, 139, 1722, 1723,
	1737, 1724, 628, 1452, 31, 755, 139, 139, 1579, 1649,
	1711, 764, 1202, 1714, 1727, 1199, 1725, 1191, 1580, 28,
	1772, 17, 1585, 1142, 1141, 523, 139, 139, 1139, 1136,
	13, 1134, 1732, 1718, 2069, 351, 1790, 2258, 824, 16,
	523, 797, 523, 1731, 800, 1712, 1748, 1111, 1702, 523,
	523, 351, 813, 633, 1492, 1777, 1779, 1768, 615, 388,
	1502, 1765, 110, 1764, 1750, 1759, 1787, 1752, 1477, 566,
	561, 2071, 14, 1802, 377, 10, 1762, 505, 599, 600,
	139, 1806, 1503, 1818, 1819, 1820, 1781, 1780, 1785, 1634,
	1635, 1636, 1637, 1639, 1640, 506, 1792, 754, 1793, 1791,
	1643, 1641, 1642, 1634, 1635, 1636, 1637, 1639, 1640, 12,
	825, 1788, 381, 391, 501, 351, 351, 872, 351, 1812,
	611, 1039, 1039, 1809, 370, 8, 369, 4, 1581, 1478,
	616, 2177, 1825, 1827, 1828, 1583, 1834, 351, 351, 1492,
	2020, 136, 841, 2148, 1836, 1500, 1943, 828, 1867, 351,
	1508, 702, 1505, 1841, 1839, 507, 351, 351, 351, 1877,
	925, 889, 139, 2183, 1869, 139, 2029, 385, 136, 1454,
	1451, 396, 933, 934, 1265, 1837, 498, 139, 1250, 1204,
	568, 1088, 1907, 1265, 1842, 1031, 1892, 1870, 2274, 390,
	394, 139, 2261, 569, 757, 386, 1632, 1633, 1900, 396,
	933, 934, 2064, 569, 1948, 10, 933, 934, 1883, 1918,
	1912, 1882, 756, 1902, 893, 1829, 1873, 1889, 1899, 935,
	832, 831, 387, 1917, 139, 699, 832, 139, 1689, 936,
	1678, 1538, 1411, 896, 1408, 1407, 1349, 394, 139, 139,
	1936, 389, 1937, 568, 985, 1914, 833, 1974, 1898, 891,
	2193, 1913, 2091, 935, 508, 8, 1950, 4, 894, 1934,
	1821, 1952, 1713, 995, 993, 767, 524, 2106, 396, 383,
	1947, 1949, 1165, 892, 136, 843, 1534, 1946, 1945, 523,
	1955, 1930, 1223, 1932, 2187, 1980, 1966, 1618, 2136, 1953,
	1944, 2080, 1152, 139, 1358, 996, 48, 1896, 1961, 676,
	2001, 1890, 1441, 1440, 397, 2011, 1098, 698, 2004, 553,
	1128, 1368, 1266, 758, 836, 700, 2002, 1036, 701, 1037,
	2006, 1025, 688, 1034, 653, 1254, 1322, 1340, 1601, 989,
	668, 680, 509, 679, 895, 1337, 759, 1539, 1558, 2012,
	1957, 1148, 1986, 1468, 1145, 1928, 532, 1629, 1960, 523,
	651, 388, 1389, 523, 928, 136, 523, 523, 523, 523,
	523, 2005, 139, 510, 1381, 1176, 139, 139, 1378, 523,
	523, 790, 885, 568, 977, 2021, 501, 1255, 788, 1564,
	1415, 139, 139, 139, 1900, 877, 611, 1156, 614, 633,
	139, 613, 139, 1436, 139, 139, 139, 1900, 2014, 139,
	139, 1900, 351, 2034, 1899, 391, 2028, 786, 1092, 1426,
	970, 2026, 2024, 2037, 1234, 2030, 2027, 1899, 2036, 139,
	351, 1899, 969, 1240, 601, 2162, 777, 2040, 776, 1121,
	1739, 2262, 2060, 2176, 1898, 351, 2061, 1258, 2007, 1925,
	2008, 2209, 127, 126, 2035, 2155, 2066, 1898, 2089, 2067,
	2079, 1898, 1548, 73, 30, 29, 92, 91, 2072, 2063,
	90, 89, 88, 139, 87, 394, 139, 86, 85, 2070,
	2010, 84, 83, 82, 139, 81, 2086, 1383, 80, 2013,
	570, 394, 79, 78, 2094, 77, 76, 75, 520, 72,
	570, 569, 139, 71, 70, 568, 69, 933, 934, 27,
	2111, 395, 139, 23, 95, 22, 20, 919, 1900, 21,
	1900, 2109, 2114, 2110, 26, 25, 2112, 18, 15, 139,
	936, 9, 2104, 2124, 139, 2122, 19, 53, 1899, 54,
	1899, 52, 139, 51, 50, 1632, 1633, 11, 46, 45,
	44, 43, 42, 672, 935, 41, 2125, 2139, 395, 7,
	94, 39, 38, 139, 569, 2147, 2009, 139, 1898, 549,
	1898, 6, 93, 5, 106, 103, 2123, 105, 2166, 102,
	2164, 2150, 104, 107, 99, 100, 2158, 101, 2159, 98,
	97, 2171, 36, 568, 350, 2130, 2131, 2172, 2119, 2169,
	35, 34, 2168, 139, 139, 33, 2, 1, 2129, 0,
	0, 2175, 1039, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2186, 0, 0, 0,
	0, 0, 0, 0, 139, 1039, 351, 2200, 139, 1437,
	2184, 139, 2201, 0, 2192, 2206, 633, 2190, 394, 0,
	0, 0, 1638, 139, 523, 523, 139, 523, 0, 351,
	351, 2208, 1466, 633, 2174, 139, 2214, 2211, 2217, 2216,
	2225, 2215, 951, 2203, 2236, 0, 1900, 0, 0, 2212,
	2213, 351, 0, 623, 0, 2238, 0, 1482, 2202, 0,
	2207, 0, 0, 0, 569, 1039, 1899, 2245, 139, 2244,
	0, 351, 351, 351, 0, 0, 0, 2253, 1497, 2255,
	1648, 0, 351, 2259, 0, 2226, 2260, 0, 0, 0,
	351, 0, 0, 351, 0, 0, 1898, 0, 0, 351,
	0, 2271, 2270, 2272, 0, 351, 351, 2273, 0, 351,
	0, 0, 0, 0, 1234, 952, 0, 1234, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 351,
	0, 1562, 0, 0, 0, 0, 1070, 0, 351, 0,
	0, 0, 0, 1649, 1482, 1039, 395, 0, 570, 0,
	0, 0, 0, 0, 0, 0, 1383, 1383, 396, 0,
	0, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	933, 934, 0, 0, 0, 0, 569, 0, 0, 0,
	0, 1039, 1039, 0, 0, 0, 0, 0, 0, 0,
	1039, 1039, 0, 936, 0, 0, 946, 944, 945, 937,
	938, 939, 940, 942, 943, 396, 0, 0, 0, 0,
	0, 570, 0, 0, 0, 0, 0, 935, 0, 659,
	0, 0, 762, 1039, 1383, 1383, 1383, 0, 1069, 0,
	0, 0, 0, 0, 1643, 1641, 1642, 1634, 1635, 1636,
	1637, 1639, 1640, 0, 677, 66, 0, 0, 0, 0,
	0, 792, 793, 794, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 0, 0, 0, 941, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1588, 1589, 0, 0,
	0, 66, 0, 1482, 0, 1632, 1633, 0, 0, 1070,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 1128, 1072, 1128, 1707, 0, 0,
	0, 0, 0, 523, 0, 951, 351, 0, 881, 881,
	1721, 570, 0, 1071, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 1035, 0, 1039, 550,
	351, 1632, 1633, 0, 1655, 1656, 1657, 0, 0, 0,
	351, 1734, 1735, 0, 624, 66, 1497, 0, 0, 0,
	1741, 1742, 1744, 1746, 1747, 0, 971, 972, 973, 974,
	975, 0, 1754, 0, 1756, 351, 983, 0, 0, 0,
	0, 1069, 1069, 0, 0, 0, 990, 0, 952, 0,
	0, 351, 1638, 0, 0, 1383, 1383, 1234, 1632, 1633,
	0, 1650, 1651, 1652, 0, 0, 633, 1234, 0, 0,
	0, 0, 0, 396, 1963, 0, 0, 0, 650, 0,
	0, 0, 0, 0, 0, 0, 351, 351, 0, 396,
	0, 0, 0, 0, 812, 1038, 1038, 0, 0, 0,
	0, 0, 0, 570, 0, 0, 0, 0, 1638, 0,
	1648, 1647, 0, 0, 1383, 1383, 1383, 1383, 1383, 1383,
	1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
	1383, 1383, 1383, 0, 1383, 0, 0, 0, 1072, 1072,
	1831, 945, 937, 938, 939, 940, 942, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 1071, 869, 812,
	0, 650, 0, 0, 0, 1638, 1648, 0, 0, 1035,
	1035, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	623, 908, 0, 1649, 0, 1146, 0, 1151, 1039, 0,
	0, 570, 918, 1158, 0, 1797, 1798, 0, 0, 650,
	922, 922, 1653, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 1648, 0, 1128, 1895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1909, 0, 1649,
	0, 0, 0, 0, 0, 1039, 396, 0, 0, 0,
	0, 1919, 550, 0, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 0, 1865, 1641, 1642, 1634, 1635, 1636,
	1637, 1639, 1640, 1039, 351, 0, 0, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 1649, 0, 1234, 633,
	0, 0, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 0, 1302, 0, 1304, 1305, 1306,
	1307, 0, 1642, 1634, 1635, 1636, 1637, 1639, 1640, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 1981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1365, 1366, 0,
	0, 1379, 0, 1390, 1392, 1397, 1400, 1401, 1402, 0,
	0, 0, 1644, 1645, 1646, 0, 0, 1643, 1641, 1642,
	1634, 1635, 1636, 1637, 1639, 1640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 1895, 633, 1437, 0, 1895,
	1070, 0, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 2038, 2039, 1497, 0, 623, 0, 0, 0, 0,
	2048, 0, 2049, 1070, 351, 2051, 2052, 0, 0, 2055,
	351, 0, 0, 1237, 0, 0, 0, 1383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2068, 1256, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 905, 0, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 2093, 0, 0, 2095, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 1895, 0, 1895, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 351, 0, 980, 0, 982, 0, 0, 0,
	0, 0, 1497, 986, 1383, 0, 0, 0, 0, 0,
	0, 0, 881, 0, 0, 0, 1038, 887, 0, 2138,
	0, 0, 0, 0, 1234, 0, 0, 0, 0, 0,
	0, 0, 2145, 0, 0, 0, 0, 0, 0, 1038,
	0, 0, 0, 1070, 0, 1069, 0, 2083, 0, 0,
	1556, 0, 0, 351, 0, 0, 0, 1128, 0, 1072,
	0, 0, 0, 0, 0, 1569, 0, 0, 0, 0,
	0, 0, 2101, 0, 0, 0, 0, 1071, 0, 1070,
	1070, 0, 1072, 0, 122, 0, 0, 0, 1070, 1070,
	1035, 0, 0, 2178, 2179, 0, 0, 0, 0, 1038,
	1071, 0, 1572, 1573, 0, 0, 0, 0, 1578, 650,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 122, 2199, 0, 0, 0, 633, 0,
	109, 351, 812, 812, 1895, 1069, 0, 0, 0, 0,
	1597, 0, 1072, 2138, 2149, 0, 351, 1604, 537, 0,
	1608, 537, 537, 0, 1480, 633, 0, 0, 111, 0,
	1071, 0, 0, 0, 0, 55, 1622, 56, 0, 109,
	0, 1069, 1069, 1035, 1485, 812, 1487, 66, 0, 0,
	1069, 1069, 0, 0, 0, 650, 0, 0, 2252, 1038,
	0, 58, 983, 812, 0, 0, 650, 111, 1397, 1397,
	1397, 0, 623, 0, 55, 0, 56, 0, 623, 623,
	0, 0, 623, 1069, 0, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 1038, 1038, 0, 0, 0,
	58, 0, 1072, 0, 1038, 1038, 0, 1553, 0, 0,
	0, 0, 918, 0, 0, 0, 66, 0, 66, 0,
	1071, 918, 0, 0, 66, 0, 1070, 0, 0, 0,
	0, 0, 0, 1035, 0, 0, 0, 1038, 1072, 1072,
	0, 0, 0, 0, 0, 1726, 0, 1072, 1072, 0,
	1158, 0, 0, 0, 0, 0, 1071, 1071, 0, 0,
	0, 0, 0, 1320, 0, 1071, 1071, 0, 0, 1035,
	1035, 0, 0, 0, 0, 0, 0, 0, 1035, 1035,
	1072, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 1767, 0, 0, 0, 0, 0,
	0, 1035, 129, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 125, 0, 0, 66, 0, 0, 0,
	881, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 1795, 0, 128, 1796,
	0, 129, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 1801, 0, 124, 0, 0, 0, 0, 0, 0,
	1810, 0, 1038, 0, 0, 0, 0, 0, 1814, 0,
	0, 1569, 114, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 1838, 124, 0, 0, 1840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 1070, 0, 0, 1715,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 1871, 1872,
	0, 0, 0, 1728, 0, 0, 1035, 1878, 1879, 1880,
	0, 0, 0, 1733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 1070, 0, 0, 0, 0, 1757, 0,
	0, 0, 0, 1903, 0, 0, 0, 0, 66, 0,
	0, 66, 0, 0, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 1069, 624,
	624, 1070, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	623, 0, 0, 933, 934, 0, 953, 954, 955, 963,
	964, 965, 0, 550, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 967,
	0, 0, 1038, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 1965, 0, 0, 0, 1968, 1969,
	935, 0, 0, 1971, 0, 0, 950, 0, 0, 0,
	1973, 0, 1975, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 1069, 0, 1072, 0, 0, 1982, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 1038,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1035, 0, 0, 0,
	941, 1991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1038, 0, 960,
	968, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2022, 0, 0, 0, 0, 966, 0, 0,
	1071, 0, 982, 933, 934, 0, 953, 954, 955, 963,
	964, 965, 958, 1035, 0, 0, 0, 0, 951, 956,
	1072, 0, 0, 0, 0, 0, 936, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 2059, 1071, 0,
	0, 0, 0, 957, 0, 0, 0, 623, 0, 0,
	935, 1035, 0, 0, 0, 0, 950, 0, 2075, 2076,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2088,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	941, 933, 934, 0, 953, 954, 955, 963, 964, 965,
	66, 0, 0, 66, 0, 0, 0, 956, 0, 960,
	968, 66, 0, 0, 936, 0, 0, 967, 0, 0,
	2128, 0, 0, 0, 0, 624, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 958, 0, 950, 0, 0, 0, 951, 887,
	0, 0, 0, 0, 959, 0, 0, 947, 948, 949,
	962, 624, 946, 944, 945, 937, 938, 939, 940, 942,
	943, 0, 0, 957, 0, 2161, 933, 934, 1674, 953,
	954, 955, 963, 964, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2050, 941, 936,
	0, 0, 967, 2056, 933, 934, 0, 953, 954, 955,
	963, 964, 965, 0, 0, 0, 0, 960, 968, 0,
	956, 952, 0, 935, 0, 0, 0, 936, 0, 950,
	967, 0, 0, 0, 0, 966, 0, 961, 0, 933,
	934, 0, 953, 954, 955, 963, 964, 965, 0, 0,
	958, 935, 0, 0, 0, 956, 951, 950, 0, 0,
	0, 0, 936, 2224, 2224, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2102, 0, 0,
	0, 957, 0, 941, 0, 2240, 935, 0, 0, 0,
	0, 0, 950, 0, 0, 2121, 2224, 0, 0, 0,
	0, 0, 960, 968, 959, 0, 0, 947, 948, 949,
	962, 941, 946, 944, 945, 937, 938, 939, 940, 942,
	943, 0, 0, 0, 0, 0, 0, 0, 1673, 952,
	960, 968, 0, 0, 0, 958, 2224, 0, 0, 0,
	0, 951, 0, 0, 0, 961, 941, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 2157, 0, 624, 0,
	0, 0, 0, 958, 0, 960, 968, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 952, 947, 948, 949, 962, 0,
	946, 944, 945, 937, 938, 939, 940, 942, 943, 957,
	961, 0, 0, 0, 2205, 0, 1672, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 959, 0, 0,
	947, 948, 949, 962, 0, 946, 944, 945, 937, 938,
	939, 940, 942, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 947, 948,
	949, 962, 0, 946, 944, 945, 937, 938, 939, 940,
	942, 943, 0, 0, 0, 0, 0, 0, 0, 1624,
	0, 0, 0, 0, 0, 0, 0, 2073, 0, 0,
	959, 0, 0, 947, 948, 949, 962, 0, 946, 944,
	945, 937, 938, 939, 940, 942, 943, 0, 0, 0,
	0, 2196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 141, 142, 412, 143,
	413, 414, 415, 416, 294, 417, 418, 419, 420, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 421,
	148, 301, 302, 149, 150, 422, 423, 303, 304, 305,
	424, 151, 306, 425, 398, 426, 152, 153, 154, 982,
	155, 427, 156, 157, 158, 428, 399, 159, 160, 429,
	430, 432, 431, 433, 434, 435, 161, 162, 352, 163,
	307, 164, 308, 309, 436, 165, 437, 166, 438, 167,
	439, 440, 168, 169, 441, 170, 442, 0, 443, 310,
	171, 172, 173, 311, 312, 444, 445, 446, 174, 175,
	313, 314, 315, 0, 176, 447, 177, 448, 449, 400,
	450, 178, 316, 451, 317, 452, 179, 180, 181, 182,
	318, 319, 402, 453, 186, 454, 183, 455, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 456, 326, 457,
	403, 187, 188, 189, 404, 190, 191, 192, 458, 194,
	193, 459, 327, 405, 195, 406, 460, 196, 461, 462,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 463, 464, 465, 329, 207, 330, 208,
	209, 466, 210, 467, 468, 211, 469, 470, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 471,
	219, 333, 220, 334, 221, 472, 222, 223, 224, 225,
	226, 335, 227, 228, 473, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 474, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 475,
	253, 337, 252, 254, 255, 476, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 477, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 478, 266, 479, 267, 268,
	269, 270, 271, 272, 273, 480, 342, 343, 344, 481,
	482, 274, 275, 345, 346, 483, 276, 277, 278, 279,
	484, 485, 280, 281, 282, 283, 486, 284, 487, 347,
	285, 286, 287, 348, 349, 488, 489, 288, 490, 491,
	492, 493, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 0, 0, 0, 0, 1228, 0, 0, 0, 0,
	0, 0, 0, 1229, 141, 142, 412, 143, 413, 414,
	415, 416, 294, 417, 418, 419, 420, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 421, 148, 301,
	302, 149, 150, 422, 423, 303, 304, 305, 424, 151,
	306, 425, 398, 426, 152, 153, 154, 0, 155, 427,
	156, 157, 158, 428, 399, 159, 160, 429, 430, 432,
	431, 433, 434, 435, 161, 162, 352, 163, 307, 164,
	308, 309, 436, 165, 437, 166, 438, 167, 439, 440,
	168, 169, 441, 170, 442, 0, 443, 310, 171, 172,
	173, 311, 312, 444, 445, 446, 174, 175, 313, 314,
	315, 0, 176, 447, 177, 448, 449, 400, 450, 178,
	316, 451, 317, 452, 179, 180, 181, 182, 318, 319,
	402, 453, 186, 454, 183, 455, 401, 184, 320, 185,
	321, 322, 323, 324, 325, 456, 326, 457, 403, 187,
	188, 189, 404, 190, 191, 192, 458, 194, 193, 459,
	327, 405, 195, 406, 460, 196, 461, 462, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 463, 464, 465, 329, 207, 330, 208, 209, 466,
	210, 467, 468, 211, 469, 470, 212, 331, 408, 213,
	409, 332, 214, 215, 216, 217, 218, 471, 219, 333,
	220, 334, 221, 472, 222, 223, 224, 225, 226, 335,
	227, 228, 473, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 474, 241, 410, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 475, 253, 337,
	252, 254, 255, 476, 256, 245, 246, 257, 411, 258,
	338, 339, 259, 477, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 478, 266, 479, 267, 268, 269, 270,
	271, 272, 273, 480, 342, 343, 344, 481, 482, 274,
	275, 345, 346, 483, 276, 277, 278, 279, 484, 485,
	280, 281, 282, 283, 486, 284, 487, 347, 285, 286,
	287, 348, 349, 488, 489, 288, 490, 491, 492, 493,
	289, 290, 291, 292, 293, 0, 0, 0, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1951, 141, 142, 412, 143, 413, 414,
	415, 416, 294, 417, 418, 419, 420, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 421, 148, 301,
	302, 149, 150, 422, 423, 303, 304, 305, 424, 151,
	306, 425, 398, 426, 152, 153, 154, 0, 155, 427,
	156, 157, 158, 428, 399, 159, 160, 429, 430, 432,
	431, 433, 434, 435, 161, 162, 352, 163, 307, 164,
	308, 309, 436, 165, 437, 166, 438, 167, 439, 440,
	168, 169, 441, 170, 442, 0, 443, 310, 171, 172,
	173, 311, 312, 444, 445, 446, 174, 175, 313, 314,
	315, 0, 176, 447, 177, 448, 449, 400, 450, 178,
	316, 451, 317, 452, 179, 180, 181, 182, 318, 319,
	402, 453, 186, 454, 183, 455, 401, 184, 320, 185,
	321, 322, 323, 324, 325, 456, 326, 457, 403, 187,
	188, 189, 404, 190, 191, 192, 458, 194, 193, 459,
	327, 405, 195, 406, 460, 196, 461, 462, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 463, 464, 465, 329, 207, 330, 208, 209, 466,
	210, 467, 468, 211, 469, 470, 212, 331, 408, 213,
	409, 332, 214, 215, 216, 217, 218, 471, 219, 333,
	220, 334, 221, 472, 222, 223, 224, 225, 226, 335,
	227, 228, 473, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 474, 241, 410, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 475, 253, 337,
	252, 254, 255, 476, 256, 245, 246, 257, 411, 258,
	338, 339, 259, 477, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 478, 266, 479, 267, 268, 269, 270,
	271, 272, 273, 480, 342, 343, 344, 481, 482, 274,
	275, 345, 346, 483, 276, 277, 278, 279, 484, 485,
	280, 281, 282, 283, 486, 284, 487, 347, 285, 286,
	287, 348, 349, 488, 489, 288, 490, 491, 492, 493,
	289, 290, 291, 292, 293, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 141, 142, 412, 143, 413, 414, 415, 416, 294,
	417, 418, 419, 420, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 421, 148, 301, 302, 149, 150,
	422, 423, 303, 304, 305, 424, 151, 306, 425, 398,
	426, 152, 153, 154, 0, 155, 427, 156, 157, 158,
	428, 399, 159, 160, 429, 430, 432, 431, 433, 434,
	435, 161, 162, 352, 163, 307, 164, 308, 309, 436,
	165, 437, 166, 438, 167, 439, 440, 168, 169, 441,
	170, 442, 0, 443, 310, 171, 172, 173, 311, 312,
	444, 445, 446, 174, 175, 313, 314, 315, 0, 176,
	447, 177, 448, 449, 400, 450, 178, 316, 451, 317,
	452, 179, 180, 181, 182, 318, 319, 402, 453, 186,
	454, 183, 455, 401, 184, 320, 185, 321, 322, 323,
	324, 325, 456, 326, 457, 403, 187, 188, 189, 404,
	190, 191, 192, 458, 194, 193, 459, 327, 405, 195,
	406, 460, 196, 461, 462, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 463, 464,
	465, 329, 207, 330, 208, 209, 466, 210, 467, 468,
	211, 469, 470, 212, 331, 408, 213, 409, 332, 214,
	215, 216, 217, 218, 471, 219, 333, 220, 334, 221,
	472, 222, 223, 224, 225, 226, 335, 227, 228, 473,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 474, 241, 410, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 475, 253, 337, 252, 254, 255,
	476, 256, 245, 246, 257, 411, 258, 338, 339, 259,
	477, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	478, 266, 479, 267, 268, 269, 270, 271, 272, 273,
	480, 342, 343, 344, 481, 482, 274, 275, 345, 346,
	483, 276, 277, 278, 279, 484, 485, 280, 281, 282,
	283, 486, 284, 487, 347, 285, 286, 287, 348, 349,
	488, 489, 288, 490, 491, 492, 493, 289, 290, 291,
	292, 293, 696, 685, 686, 683, 684, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 713, 678, 0, 0,
	0, 144, 145, 146, 295, 728, 297, 729, 147, 730,
	731, 0, 148, 301, 302, 149, 150, 681, 712, 732,
	733, 305, 0, 151, 724, 0, 704, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 705, 706, 708, 0, 707, 709, 161, 162,
	352, 163, 734, 164, 735, 736, 888, 165, 0, 166,
	0, 167, 0, 0, 727, 169, 0, 170, 0, 0,
	0, 669, 171, 172, 173, 714, 715, 692, 0, 0,
	174, 175, 737, 738, 739, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 725, 0, 317, 0, 179, 180,
	181, 182, 721, 723, 402, 0, 186, 0, 183, 0,
	401, 184, 740, 185, 741, 742, 743, 744, 745, 0,
	703, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 726, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 664, 0, 693, 722, 207,
	746, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 716, 214, 215, 216, 217,
	218, 0, 219, 717, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 747, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 670, 244, 0, 248, 249, 250,
	251, 125, 253, 337, 252, 254, 255, 710, 256, 245,
	246, 257, 411, 258, 748, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 749, 263, 718, 0, 266, 129,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 750,
	751, 0, 0, 274, 275, 719, 720, 691, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 711, 284,
	0, 347, 285, 286, 287, 656, 752, 0, 0, 288,
	0, 0, 0, 123, 289, 290, 291, 292, 293, 665,
	124, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	661, 662, 696, 685, 686, 683, 684, 675, 0, 671,
	0, 0, 0, 0, 674, 0, 0, 0, 141, 142,
	1346, 143, 0, 0, 0, 0, 713, 678, 0, 0,
	0, 144, 145, 146, 295, 728, 297, 729, 147, 730,
	731, 0, 148, 301, 302, 149, 150, 681, 712, 732,
	733, 305, 0, 151, 724, 0, 704, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 705, 706, 708, 0, 707, 709, 161, 162,
	352, 163, 734, 164, 735, 736, 0, 165, 0, 166,
	0, 167, 1347, 0, 727, 169, 0, 170, 0, 0,
	0, 669, 171, 172, 173, 714, 715, 692, 0, 0,
	174, 175, 737, 738, 739, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 725, 0, 317, 0, 179, 180,
	181, 182, 721, 723, 402, 0, 186, 0, 183, 0,
	401, 184, 740, 185, 741, 742, 743, 744, 745, 0,
	703, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 726, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 664, 0, 693, 722, 207,
	746, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 716, 214, 215, 216, 217,
	218, 0, 219, 717, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 747, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 670, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 710, 256, 245,
	246, 257, 411, 258, 748, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 749, 263, 718, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 750,
	751, 0, 0, 274, 275, 719, 720, 691, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 711, 284,
	0, 347, 285, 286, 287, 348, 752, 1345, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 665,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	661, 662, 1348, 696, 685, 686, 683, 684, 675, 671,
	1343, 0, 0, 0, 674, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 713, 678, 0,
	0, 0, 144, 145, 146, 295, 728, 297, 729, 147,
	730, 731, 0, 148, 301, 302, 149, 150, 681, 712,
	732, 733, 305, 0, 151, 724, 0, 704, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 705, 706, 708, 0, 707, 709, 161,
	162, 352, 163, 734, 164, 735, 736, 0, 165, 0,
	166, 0, 167, 0, 0, 727, 169, 0, 170, 0,
	0, 0, 669, 171, 172, 173, 714, 715, 692, 0,
	0, 174, 175, 737, 738, 739, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 725, 0, 317, 0, 179,
	180, 181, 182, 721, 723, 402, 0, 186, 0, 183,
	0, 401, 184, 740, 185, 741, 742, 743, 744, 745,
	0, 703, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 726, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 664, 0, 693, 722,
	207, 746, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 716, 214, 215, 216,
	217, 218, 0, 219, 717, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 747, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 670, 244, 0, 248, 249,
	250, 251, 125, 253, 337, 252, 254, 255, 710, 256,
	245, 246, 257, 411, 258, 748, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 749, 263, 718, 0, 266,
	129, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	750, 751, 0, 0, 274, 275, 719, 720, 691, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 711,
	284, 0, 347, 285, 286, 287, 656, 752, 0, 0,
	288, 0, 0, 0, 123, 289, 290, 291, 292, 293,
	665, 124, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 661, 662, 696, 685, 686, 683, 684, 675, 0,
	671, 0, 0, 0, 0, 674, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 713, 678, 0,
	0, 0, 144, 145, 146, 295, 728, 297, 729, 147,
	730, 731, 1393, 148, 301, 302, 149, 150, 681, 712,
	732, 733, 305, 0, 151, 724, 0, 704, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 705, 706, 708, 0, 707, 709, 161,
	162, 352, 163, 734, 164, 735, 736, 0, 165, 0,
	166, 0, 167, 0, 0, 727, 169, 0, 170, 0,
	0, 0, 669, 171, 172, 173, 714, 715, 692, 0,
	0, 174, 175, 737, 738, 739, 0, 176, 0, 177,
	0, 1398, 400, 0, 178, 725, 0, 317, 0, 179,
	180, 181, 182, 721, 723, 402, 0, 186, 0, 183,
	0, 401, 184, 740, 185, 741, 742, 743, 744, 745,
	0, 703, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 1394, 726, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 664, 0, 693, 722,
	207, 746, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 716, 214, 215, 216,
	217, 218, 0, 219, 717, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 747, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 670, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 710, 256,
	245, 246, 257, 411, 258, 748, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 749, 263, 718, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	750, 751, 0, 1395, 274, 275, 719, 720, 691, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 711,
	284, 0, 347, 285, 286, 287, 348, 752, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	665, 0, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 661, 662, 696, 685, 686, 683, 684, 675, 0,
	671, 0, 0, 0, 0, 674, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 713, 678, 0,
	0, 0, 144, 145, 146, 295, 728, 297, 729, 147,
	730, 731, 0, 148, 301, 302, 149, 150, 681, 712,
	732, 733, 305, 0, 151, 724, 0, 704, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 705, 706, 708, 0, 707, 709, 161,
	162, 352, 163, 734, 164, 735, 736, 0, 165, 0,
	166, 0, 167, 0, 0, 727, 169, 0, 170, 0,
	0, 0, 669, 171, 172, 173, 714, 715, 692, 0,
	0, 174, 175, 737, 738, 739, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 725, 0, 317, 0, 179,
	180, 181, 182, 721, 723, 402, 0, 186, 0, 183,
	0, 401, 184, 740, 185, 741, 742, 743, 744, 745,
	0, 703, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 726, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 664, 1786, 693, 722,
	207, 746, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 716, 214, 215, 216,
	217, 218, 0, 219, 717, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 747, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 670, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 710, 256,
	245, 246, 257, 411, 258, 748, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 749, 263, 718, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	750, 751, 0, 0, 274, 275, 719, 720, 691, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 711,
	284, 0, 347, 285, 286, 287, 348, 752, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	665, 0, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 661, 662, 882, 696, 685, 686, 683, 684, 675,
	671, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 713, 678,
	0, 0, 0, 144, 145, 146, 295, 728, 297, 729,
	147, 730, 731, 0, 148, 301, 302, 149, 150, 681,
	712, 732, 733, 305, 0, 151, 724, 0, 704, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 705, 706, 708, 0, 707, 709,
	161, 162, 352, 163, 734, 164, 735, 736, 0, 165,
	0, 166, 0, 167, 0, 0, 727, 169, 0, 170,
	0, 0, 0, 669, 171, 172, 173, 714, 715, 692,
	0, 0, 174, 175, 737, 738, 739, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 725, 0, 317, 0,
	179, 180, 181, 182, 721, 723, 402, 0, 186, 1160,
	183, 0, 401, 184, 740, 185, 741, 742, 743, 744,
	745, 0, 703, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 726, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 664, 0, 693,
	722, 207, 746, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 716, 214, 215,
	216, 217, 218, 0, 219, 717, 220, 334, 221, 1159,
	222, 223, 224, 225, 226, 747, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 670, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 710,
	256, 245, 246, 257, 411, 258, 748, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 749, 263, 718, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 750, 751, 0, 0, 274, 275, 719, 720, 691,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	711, 284, 0, 347, 285, 286, 287, 348, 752, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 665, 0, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 661, 662, 696, 685, 686, 683, 684, 675,
	0, 671, 0, 0, 0, 0, 674, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 713, 678,
	0, 0, 0, 144, 145, 146, 295, 728, 297, 729,
	147, 730, 731, 0, 148, 301, 302, 149, 150, 681,
	712, 732, 733, 305, 0, 151, 724, 0, 704, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 705, 706, 708, 0, 707, 709,
	161, 162, 352, 163, 734, 164, 735, 736, 0, 165,
	0, 166, 0, 167, 0, 0, 727, 169, 0, 170,
	0, 0, 0, 669, 171, 172, 173, 714, 715, 692,
	0, 0, 174, 175, 737, 738, 739, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 725, 0, 317, 0,
	179, 180, 181, 182, 721, 723, 402, 0, 186, 0,
	183, 0, 401, 184, 740, 185, 741, 742, 743, 744,
	745, 0, 703, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 726, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 664, 0, 693,
	722, 207, 746, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 716, 214, 215,
	216, 217, 218, 0, 219, 717, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 747, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 670, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 710,
	256, 245, 246, 257, 411, 258, 748, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 749, 263, 718, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 750, 751, 0, 0, 274, 275, 719, 720, 691,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	711, 284, 0, 347, 285, 286, 287, 348, 752, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 665, 0, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 661, 662, 0, 0, 0, 0, 0, 988,
	1338, 671, 0, 0, 0, 0, 674, 696, 685, 686,
	683, 684, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 696, 685, 686,
	683, 684, 675, 0, 671, 1868, 0, 0, 0, 674,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 1817, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 696, 685, 686,
	683, 684, 675, 0, 671, 0, 0, 0, 0, 674,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 696, 685, 686,
	683, 684, 675, 0, 671, 1807, 0, 0, 0, 674,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 888, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 696, 685, 686,
	683, 684, 675, 0, 671, 0, 0, 0, 0, 674,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 1398, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 696, 685, 686,
	683, 684, 675, 0, 671, 0, 0, 0, 0, 674,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 882, 696, 685,
	686, 683, 684, 675, 671, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 696, 685,
	686, 683, 684, 675, 0, 671, 1333, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 1147, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 696, 685,
	686, 683, 684, 675, 0, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 2223, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 2222, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 696, 685,
	686, 683, 684, 675, 0, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 696, 685,
	686, 683, 684, 675, 0, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	2221, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 2223, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 2222, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 1370, 685,
	686, 683, 684, 675, 0, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 1373,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 1374, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 1375, 1372, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 1376, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 1371, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 696, 685,
	686, 683, 684, 675, 0, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 0, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	1388, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 0, 0, 0, 0, 0,
	0, 1386, 0, 0, 0, 0, 1384, 1385, 696, 685,
	686, 683, 684, 675, 0, 1387, 0, 0, 0, 0,
	674, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 0, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 714, 715, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 0, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	1388, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 0, 0, 696, 685, 686,
	683, 684, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 1387, 143, 0, 0, 0,
	674, 713, 678, 0, 0, 0, 144, 145, 146, 0,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 2223, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 0,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 0, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 0, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 2222, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 662, 0, 0, 0,
	141, 142, 0, 143, 671, 0, 0, 0, 713, 674,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	712, 303, 304, 305, 0, 151, 724, 0, 704, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 705, 706, 708, 0, 707, 709,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 714, 715, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 725, 0, 317, 0,
	179, 180, 181, 182, 721, 723, 402, 0, 186, 0,
	183, 0, 401, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 726, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 0, 0, 0,
	722, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 716, 214, 215,
	216, 217, 218, 0, 219, 717, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 710,
	256, 245, 246, 257, 411, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 718, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 719, 720, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	711, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 567, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 1897, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 398, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 402, 0, 186, 0, 183,
	0, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 327, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 125, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	129, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 656, 349, 0, 0,
	288, 0, 0, 0, 123, 289, 290, 291, 292, 293,
	0, 124, 567, 564, 0, 565, 560, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	114, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 398, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 1110, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 557, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 402, 0, 186, 0, 183, 0,
	401, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 327, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 558, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 411, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 556, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 0, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 567,
	564, 0, 565, 560, 555, 0, 0, 0, 0, 0,
	566, 561, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 1107, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 557, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 558, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 556, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 567, 564, 0, 565,
	560, 555, 0, 0, 0, 0, 0, 566, 561, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	787, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 557, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 558,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 556, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 567, 564, 0, 565, 560, 555, 0,
	0, 0, 0, 0, 566, 561, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 398, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 557, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 402, 0, 186, 0, 183,
	0, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 327, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 558, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 556, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 138,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 566, 561, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 627, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 125, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 129, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 656, 349, 0, 0, 288, 0, 138, 0,
	123, 289, 290, 291, 292, 293, 0, 124, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 621, 0, 626, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 125, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 129, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 0, 284, 0, 347, 285, 286,
	287, 656, 349, 0, 0, 288, 0, 138, 0, 123,
	289, 290, 291, 292, 293, 0, 124, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 114, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 627, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 138, 0, 0, 289,
	290, 291, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 621, 0, 626, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 138, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 916, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 138, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 1257, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	0, 0, 288, 0, 138, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 1832, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 696, 685, 686, 683, 684, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 909, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 728, 297, 729, 147, 730, 731,
	0, 148, 301, 302, 149, 150, 0, 0, 732, 733,
	305, 0, 151, 306, 0, 398, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 734, 164, 735, 736, 0, 165, 0, 166, 0,
	167, 0, 0, 727, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 692, 0, 0, 174,
	175, 737, 738, 739, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 402, 0, 186, 0, 183, 0, 401,
	184, 740, 185, 741, 742, 743, 744, 745, 0, 703,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 327, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 693, 329, 207, 746,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 747, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 411, 258, 748, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 749, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 750, 751,
	0, 0, 274, 275, 345, 346, 691, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 752, 567, 564, 288, 0,
	0, 837, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 134,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 133, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 567, 564, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 137, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 567, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 137, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 1448, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 1446, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 1445, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 1450, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 1443, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 1449, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 1444, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 1448, 151, 306, 0,
	0, 1495, 152, 153, 154, 0, 155, 1446, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 1450, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 1494, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 1449, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 1498, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 1233, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	627, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 1162,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 874, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	627, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 868, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 627, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 644, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 355,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 354, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 1745, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 1743, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 1738, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 500, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 1127, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 926, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 0, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 871, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 816, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 814, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 810, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 808, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 805, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 801, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 796, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	771, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 522, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 518, 343, 344,
	0, 0, 274, 772, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 609, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 512, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 511, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 522, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 513, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 514, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 518, 343, 344,
	0, 0, 274, 516, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 138, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 0, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 0, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 0,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 933, 934, 0, 953, 954, 955, 963,
	964, 965, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 967,
	0, 933, 934, 0, 953, 954, 955, 963, 964, 965,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	935, 0, 0, 0, 936, 0, 950, 967, 0, 933,
	934, 0, 953, 954, 955, 963, 964, 965, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 935, 0,
	0, 0, 936, 0, 950, 967, 0, 0, 933, 934,
	0, 953, 954, 955, 963, 964, 965, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 935, 0, 0, 0,
	941, 936, 950, 0, 967, 0, 933, 934, 0, 953,
	954, 955, 963, 964, 965, 0, 0, 0, 0, 960,
	968, 0, 956, 0, 0, 935, 0, 0, 941, 936,
	0, 950, 967, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 968, 0,
	0, 0, 958, 935, 0, 0, 941, 0, 951, 950,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 968, 0, 0, 0,
	958, 0, 0, 957, 0, 941, 951, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 968, 0, 0, 958, 0,
	0, 957, 0, 941, 951, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 960, 968, 0, 0, 0, 958, 0, 957,
	0, 0, 0, 951, 0, 0, 0, 961, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 958, 0, 0, 957, 0,
	0, 951, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 952, 947, 948, 949,
	962, 0, 946, 944, 945, 937, 938, 939, 940, 942,
	943, 0, 961, 0, 0, 2152, 0, 0, 0, 0,
	0, 0, 959, 0, 952, 947, 948, 949, 962, 0,
	946, 944, 945, 937, 938, 939, 940, 942, 943, 0,
	961, 0, 0, 2113, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 947, 948, 949, 962, 0, 946, 944,
	945, 937, 938, 939, 940, 942, 943, 0, 0, 0,
	0, 2087, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 947, 948, 949, 962, 0, 946, 944, 945,
	937, 938, 939, 940, 942, 943, 0, 0, 0, 0,
	2082, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	947, 948, 949, 962, 0, 946, 944, 945, 937, 938,
	939, 940, 942, 943, 0, 0, 933, 934, 2078, 953,
	954, 955, 963, 964, 965, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 967, 0, 933, 934, 0, 953, 954, 955,
	963, 964, 965, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 935, 0, 0, 0, 936, 0, 950,
	967, 0, 933, 934, 0, 953, 954, 955, 963, 964,
	965, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 935, 0, 0, 0, 936, 0, 950, 967, 0,
	0, 933, 934, 0, 953, 954, 955, 963, 964, 965,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 935,
	0, 0, 0, 941, 936, 950, 0, 967, 0, 933,
	934, 0, 953, 954, 955, 963, 964, 965, 0, 0,
	0, 0, 960, 968, 0, 956, 0, 0, 935, 0,
	0, 941, 936, 0, 950, 967, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 968, 0, 0, 0, 958, 935, 0, 0, 941,
	0, 951, 950, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 968,
	0, 0, 0, 958, 0, 0, 957, 0, 941, 951,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 968, 0,
	0, 958, 0, 0, 957, 0, 941, 951, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 952, 960, 968, 0, 0, 0,
	958, 0, 957, 0, 0, 0, 951, 0, 0, 0,
	961, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 958, 0,
	0, 957, 0, 0, 951, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 952,
	947, 948, 949, 962, 0, 946, 944, 945, 937, 938,
	939, 940, 942, 943, 0, 961, 0, 0, 2025, 0,
	0, 0, 0, 0, 0, 959, 0, 952, 947, 948,
	949, 962, 0, 946, 944, 945, 937, 938, 939, 940,
	942, 943, 0, 961, 0, 0, 1996, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 947, 948, 949, 962,
	0, 946, 944, 945, 937, 938, 939, 940, 942, 943,
	0, 0, 0, 0, 1995, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 947, 948, 949, 962, 0,
	946, 944, 945, 937, 938, 939, 940, 942, 943, 0,
	0, 0, 0, 1916, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 947, 948, 949, 962, 0, 946, 944,
	945, 937, 938, 939, 940, 942, 943, 0, 0, 933,
	934, 1835, 953, 954, 955, 963, 964, 965, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 967, 0, 933, 934, 0,
	953, 954, 955, 963, 964, 965, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 935, 0, 0, 0,
	936, 0, 950, 967, 0, 933, 934, 0, 953, 954,
	955, 963, 964, 965, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 935, 0, 0, 0, 936, 0,
	950, 967, 0, 0, 0, 0, 0, 0, 0, 933,
	934, 0, 953, 954, 955, 963, 964, 965, 0, 0,
	0, 0, 935, 0, 0, 956, 941, 0, 950, 0,
	0, 0, 936, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 968, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 935, 0, 0, 0,
	0, 0, 950, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 968, 0, 0, 0, 958, 0,
	0, 0, 941, 0, 951, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 968, 0, 0, 0, 958, 0, 0, 957,
	0, 0, 951, 0, 0, 0, 941, 2250, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 960, 968, 957, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 958, 0,
	0, 0, 0, 961, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 2249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 947, 948, 949, 962, 952, 946, 944,
	945, 937, 938, 939, 940, 942, 943, 0, 0, 0,
	0, 1811, 0, 961, 0, 0, 0, 0, 959, 0,
	0, 947, 948, 949, 962, 0, 946, 944, 945, 937,
	938, 939, 940, 942, 943, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 947,
	948, 949, 962, 0, 946, 944, 945, 937, 938, 939,
	940, 942, 943, 0, 0, 1594, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 947, 948, 949, 962, 0, 946, 944,
	945, 937, 938, 939, 940, 942, 943, 933, 934, 0,
	953, 954, 955, 963, 964, 965, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 967, 0, 933, 934, 0, 953, 954,
	955, 963, 964, 965, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 935, 0, 1477, 0, 936, 0,
	950, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 1210, 0, 950, 0,
	0, 0, 933, 934, 0, 953, 954, 955, 963, 964,
	965, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 1209, 0, 941, 936, 1664, 1478, 967, 1663,
	933, 934, 0, 953, 954, 955, 963, 964, 965, 0,
	0, 0, 0, 960, 968, 0, 956, 0, 0, 935,
	0, 0, 941, 936, 0, 950, 967, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 968, 0, 0, 0, 958, 935, 0, 0,
	0, 0, 951, 950, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 957, 0, 941,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 968,
	0, 0, 0, 0, 0, 957, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 960, 968, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 951, 0, 0,
	0, 961, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 958,
	0, 0, 957, 0, 0, 951, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	952, 947, 948, 949, 962, 0, 946, 944, 945, 937,
	938, 939, 940, 942, 943, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 952, 947,
	948, 949, 962, 0, 946, 944, 945, 937, 938, 939,
	940, 942, 943, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 934, 0, 953, 954, 955, 963,
	964, 965, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 967,
	0, 0, 0, 959, 0, 0, 947, 948, 949, 962,
	0, 946, 944, 945, 937, 938, 939, 940, 942, 943,
	935, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 959, 0, 0, 947, 948, 949, 962, 0, 946,
	944, 945, 937, 938, 939, 940, 942, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 934,
	0, 953, 954, 955, 963, 964, 965, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	941, 936, 0, 0, 967, 0, 933, 934, 0, 953,
	954, 955, 963, 964, 965, 0, 0, 0, 0, 960,
	968, 0, 956, 0, 0, 935, 1665, 0, 0, 936,
	0, 950, 967, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 935, 0, 0, 0, 0, 951, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 957, 0, 941, 0, 0, 0, 0,
	1670, 1632, 1633, 0, 1650, 1651, 1652, 0, 0, 0,
	0, 0, 0, 0, 960, 968, 0, 1804, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 960, 968, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 951, 1647, 0, 0, 961, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 957, 0,
	0, 951, 1815, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 1638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 952, 947, 948, 949,
	962, 0, 946, 944, 945, 937, 938, 939, 940, 942,
	943, 0, 961, 0, 0, 1653, 0, 0, 0, 0,
	0, 0, 933, 934, 952, 953, 954, 955, 963, 964,
	965, 0, 0, 0, 0, 0, 1648, 0, 956, 0,
	961, 0, 0, 0, 0, 936, 0, 0, 967, 0,
	933, 934, 0, 953, 954, 955, 963, 964, 965, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 935,
	1623, 0, 0, 936, 0, 950, 967, 0, 0, 959,
	0, 0, 947, 948, 949, 962, 0, 946, 944, 945,
	937, 938, 939, 940, 942, 943, 0, 935, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 959, 0, 1649,
	947, 948, 949, 962, 0, 946, 944, 945, 937, 938,
	939, 940, 942, 943, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 933, 934, 0, 953, 954,
	955, 963, 964, 965, 0, 0, 0, 0, 960, 968,
	0, 956, 0, 0, 0, 0, 0, 941, 936, 0,
	0, 967, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 968, 0, 0,
	0, 958, 935, 0, 0, 0, 0, 951, 950, 0,
	0, 0, 0, 0, 966, 1644, 1645, 1646, 0, 0,
	1643, 1641, 1642, 1634, 1635, 1636, 1637, 1639, 1640, 958,
	0, 0, 957, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1632, 1633, 0, 1650, 1651, 1652, 0,
	952, 960, 968, 0, 0, 0, 0, 0, 0, 1803,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 966,
	0, 0, 0, 0, 0, 933, 934, 0, 952, 0,
	0, 963, 964, 965, 958, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 961, 0, 1647, 0, 936, 0,
	0, 967, 0, 0, 933, 934, 0, 953, 954, 955,
	963, 964, 965, 0, 0, 957, 0, 0, 0, 0,
	956, 0, 935, 0, 0, 0, 0, 936, 950, 0,
	967, 0, 0, 959, 0, 0, 947, 948, 949, 962,
	0, 946, 944, 945, 937, 938, 939, 940, 942, 943,
	1638, 935, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 959, 0, 952, 947, 948, 949, 962, 0, 946,
	944, 945, 937, 938, 939, 940, 942, 943, 0, 961,
	0, 0, 941, 0, 0, 0, 0, 1653, 0, 933,
	934, 0, 953, 954, 955, 963, 964, 965, 0, 0,
	0, 960, 968, 0, 0, 0, 0, 0, 1648, 0,
	0, 941, 936, 0, 0, 967, 0, 1632, 1633, 0,
	1650, 1651, 1652, 0, 0, 0, 0, 0, 0, 0,
	960, 968, 0, 0, 958, 0, 935, 0, 0, 0,
	951, 0, 950, 0, 0, 0, 959, 0, 966, 947,
	948, 949, 962, 0, 946, 944, 945, 937, 938, 939,
	940, 942, 943, 958, 0, 0, 0, 0, 0, 951,
	1647, 0, 0, 0, 0, 0, 0, 0, 0, 1632,
	1633, 1649, 1650, 1651, 1652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 960, 968, 0, 0, 0,
	0, 0, 0, 0, 1638, 0, 0, 0, 0, 961,
	0, 0, 1647, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 1654, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 961, 0,
	0, 1653, 0, 0, 0, 0, 0, 1644, 1645, 1646,
	0, 0, 1643, 1641, 1642, 1634, 1635, 1636, 1637, 1639,
	1640, 0, 1648, 0, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 962, 0, 946, 944, 945, 937, 938, 939,
	940, 942, 943, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1653, 0, 959, 0, 952, 947, 948,
	949, 962, 0, 946, 944, 945, 937, 938, 939, 940,
	942, 943, 0, 961, 1648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 1048, 1077, 1040, 1068, 1067, 0, 0, 1042, 1041,
	0, 0, 0, 0, 1079, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 947, 948, 949, 962, 1649, 946, 944,
	945, 937, 938, 939, 940, 942, 943, 1073, 0, 1065,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 1644, 1645, 1646, 0, 0, 1643, 1641, 1642, 1634,
	1635, 1636, 1637, 1639, 1640, 0, 0, 1062, 1060, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 1048, 1077, 1040, 1068, 1067, 0, 0, 1042, 1041,
	0, 0, 0, 0, 1079, 1078, 0, 1051, 1050, 1052,
	1053, 1054, 1055, 1056, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 1644, 1645, 1646, 0, 0, 1643, 1641,
	1642, 1634, 1635, 1636, 1637, 1639, 1640, 1073, 0, 1065,
	1064, 0, 0, 1044, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 0, 1062, 1060, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 1269, 1267, 1268, 1271, 1270, 1051, 1050, 1052,
	1053, 1054, 1055, 1056, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 505, 0, 0, 1057,
	1046, 0, 0, 1044, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 575, 1066, 0, 0, 0, 1049,
	0, 1043, 0, 0, 1074, 1075, 573, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 574, 1059, 0,
	0, 1080, 576, 0, 0, 0, 0, 582, 583, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 507, 577, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	1046, 0, 0, 0, 0, 0, 0, 595, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 1074, 1075, 0, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 580, 0, 0, 0, 1047, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 581, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	589, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 594, 0,
	0, 0, 510, 0, 0, 0, 0, 587, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593,
}
var sqlPact = [...]int{

	196, -1000, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18037, -1000, -1000,
	22132, -1000, -1000, -1000, -1000, -1000, -1000, 21817, 837, 937,
	-1000, -1000, -1000, -1000, -1000, 22132, 3190, 1346, 5421, 1210,
	22132, 18037, 1206, 1346, 23392, -1000, -1000, 23392, 1226, -1000,
	-1000, -1000, -1000, -1000, 27487, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 613, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 656, 826,
	122, 783, -1000, 885, -13, 14849, 31082, 503, 508, 503,
	503, 510, 696, 27172, 22132, 1576, 7, -1000, 289, 15803,
	196, 582, -11, 18667, 22132, -1000, 18, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	301, 18, -1000, -1000, 21502, -1000, 1352, 1217, 1214, 20242,
	-1000, -1000, -1000, -1000, -1000, 310, -1000, 13539, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 990, -1000, 2, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11204, 303, 1351, 11204, 982, -1000,
	22132, -1000, -1000, -1000, 1613, -1000, -1000, -1000, -1000, -1000,
	409, 1803, 676, 293, 26857, -1000, 1039, -1000, 407, 609,
	-1000, -1000, 14522, 27, 20242, -1000, 11204, 11204, 11204, 26542,
	22132, 22132, 1230, 26227, -1000, 885, -1000, -1000, 25912, 25597,
	25282, 24967, 24652, -1000, 1085, 1556, 1556, 1556, 1643, 123,
	103, 122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1753, -1000, -1000, -1000, -1000, 1779, -1000, -1000, -1000,
	-1000, -1000, 1613, 17722, 912, 1627, 1350, -1000, 980, 1349,
	1347, 1344, 1342, 1339, -1000, 749, -1000, 1365, 520, -1000,
	1336, 798, 499, -1000, 1335, 1333, 1039, -1000, 1039, -1000,
	-1000, -1000, 581, 23392, 21187, 24337, 22132, 20872, -16, 22132,
	-1000, 290, -16, 9843, 9843, -1000, -1000, 289, -1000, 9163,
	1631, 512, -169, 156, 390, -1000, 15165, 17080, -1000, 17722,
	18667, -11, -93, -1000, -1000, -1000, 5094, 660, 16122, 18,
	-1000, -1000, -1000, -1000, -1000, 20242, 22132, 22132, 689, 24022,
	353, -1000, 11204, 11, -1000, -1000, 289, 18037, 1638, 30295,
	-1000, 11204, 11204, 11204, 11204, 11204, 898, 342, -1000, 287,
	285, 6429, -1000, -1000, 1777, -1000, -1000, -1000, 113, -1000,
	-1000, 11204, 18, -1000, -1000, -1000, -1000, 284, 1799, -1000,
	460, -1000, -1000, -1000, 414, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1360, 282, 281, 278, -1000, -1000,
	-1000, -1000, 275, 273, 272, 270, 269, 268, 266, 262,
	261, 260, 250, 249, 248, 246, 245, 824, -1000, 453,
	-1000, -1000, 453, 453, -1000, 234, 234, 235, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 234, -1000, -1000, -1000,
	431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 244, 1695,
	30913, 17722, 30295, 18037, -1000, -1000, -1000, -1000, 22132, 11204,
	-1000, 1691, 1039, -46, -1000, -1000, -1000, -1000, 1157, 1211,
	552, 1267, 14195, 13868, 1515, -1000, -1000, -1000, 19, 5421,
	143, -1000, 30295, 30295, 30295, 243, 1103, 421, 129, 23707,
	421, 1092, -1000, 1085, 130, 1468, -1000, 130, 1466, 111,
	1465, -1000, -164, -1000, 1461, -93, 1460, -1000, 1000, 1208,
	10524, 1190, 11204, 122, -1000, -1000, 122, 122, 7450, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20557, -1000,
	-1000, 673, 22132, 1358, 18037, 22132, 22132, 22132, 22132, 22132,
	-1000, -1000, 485, 1356, 22132, 1147, -1000, -1000, 22132, 22132,
	758, 610, -1000, -46, -1000, 23392, -1000, 1062, 1454, 448,
	762, 1452, 766, 760, 1449, 22132, -16, 1689, 22132, 105,
	-1000, 29542, -1000, 105, -1000, 6, -1000, 30295, -1000, 1195,
	1191, 15803, 1216, 905, 905, 905, -1000, 241, 333, 390,
	4426, 11204, -1000, 19927, 926, 47, 106, 1631, -1000, 22132,
	383, -1000, 22132, -1000, -1000, -1000, 1332, 1, -1000, -1000,
	447, 112, 1688, 112, 16442, -1000, 22132, -1, 30295, 3151,
	18982, 574, -1000, 30823, 30913, 5421, 600, 11204, 11204, 11204,
	11204, 11204, 11204, 11204, 11204, 11204, 11204, 11204, 11204, 11204,
	11204, 11204, 11204, 11204, 11204, 11204, 11204, 11204, 11204, 1169,
	11204, 565, 11204, 11204, 11204, 11204, 1207, 875, 229, 956,
	-1000, 1730, 1730, 1730, 30559, 30559, 224, 342, -1000, 11204,
	-1000, 10184, 103, 29057, -32, -1000, -1000, -1000, 7790, 451,
	30295, 18, 6088, -1000, 1769, 636, 1374, 1276, 237, 102,
	101, 100, 11204, 11204, 11884, 11884, 11204, 12224, 11204, 11204,
	6769, 11204, 11204, 11204, 11204, 11204, 11204, -1000, 236, -1000,
	-1000, -1000, -1000, 1768, -1000, -1000, 1767, -1000, 593, 587,
	1765, -13, -3, -1000, 659, -1000, -1000, -1000, -1000, 121,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 235, 824, 234, 234, 234, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 431, -1000, -1000, 453, 453, 453,
	-1000, -1000, 4, -1000, 1329, -1000, 413, -7, 501, -46,
	1039, 934, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1798, -74, -1000, -1000, -74,
	-1000, -1000, 5421, -1000, -1000, 20242, -1000, -1000, 19297, 1680,
	1440, -1000, 879, -1000, 1679, 22132, 979, 1091, -1000, 598,
	1433, -1000, -1000, 22132, 22132, -1000, 22132, -1000, 22132, 22132,
	5421, 22132, 22132, -1000, -1000, -1000, 30295, -1000, 369, -1000,
	-1000, 30295, 745, 1212, -1000, 1212, -82, -1000, 29485, 1186,
	22132, -1000, -1000, -1000, -1000, -1000, 22132, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 144, -1000, -1000, -1000, -1000,
	22132, 22132, 22132, -1000, -109, 859, -1000, 19612, 1620, 1535,
	1557, 20242, 1659, -13, 1328, 1657, -13, 1323, 563, 22132,
	561, 560, 20242, -1000, 233, -9, 447, 9843, 15803, 5421,
	-1000, 447, 9163, -1000, 15803, 15803, 1198, 1189, 15803, -1000,
	-1000, -1000, -1000, 19927, 371, 390, 19927, -1000, 1764, 1194,
	-20, -1000, -1000, 22132, 232, -1000, 390, 99, 1256, 1013,
	-1000, 642, 1320, 22132, 738, 11204, 925, -1000, 15484, 465,
	22132, 738, 71, -1000, -1000, -1000, 379, 22132, -1000, -1000,
	11204, -1000, -1000, 22132, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 406, 684, 684, 592, 592, 592,
	592, 1736, 2330, 331, 734, 30445, 30445, 30445, 2027, 410,
	410, 30445, 30445, 30445, 30559, 30474, 714, 11204, 11204, 559,
	871, 229, 714, 11204, 714, 714, 714, 714, -1000, 1369,
	-1000, -1000, -1000, -1000, 1314, 227, 12224, 12224, -1000, -1000,
	-1000, 6429, 12564, -1000, -1000, -1000, -1000, 226, 11204, -1000,
	29085, -205, -22, -1000, -1000, 11204, -21, -42, -1000, -1000,
	683, -1000, 11204, -1000, -19, 11204, 11204, 11204, 95, 94,
	-1000, 549, -1000, 548, 545, 539, -1000, 225, 903, 222,
	221, 11204, -1000, -1000, -1000, 30210, 4014, 90, 1313, -156,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 89, 83, 30182,
	-156, 79, 30587, -1000, 12224, 12224, 12224, 6429, 210, 78,
	29457, -156, 29946, 9503, 9503, 9503, 76, 29918, 11204, -156,
	3901, 3793, 3643, -27, -31, -37, 1763, -38, 72, 400,
	399, 67, -1000, -1000, 30913, -1000, 337, 564, -1000, 1761,
	434, 17722, 22132, -1000, 1199, -1000, -1000, 759, -1000, 803,
	-1000, 14849, -1000, -1000, 66, -45, -84, 30913, -1000, -1000,
	-1000, -1000, -1000, 22132, 283, 22132, 22132, -1000, 205, 1185,
	1184, -13, 22132, 1797, -13, 22132, 1429, 1474, 373, 22132,
	-1000, 130, 130, -1000, 111, -1000, -1000, -93, 745, -1000,
	11204, 1759, -1000, -1000, -1000, 7450, -1000, -1000, -1000, 22132,
	-168, -108, -1000, -1000, -1000, -1000, -1000, 383, 799, 22132,
	22132, 22132, -1000, -1000, 1089, 23077, 1083, 30913, 204, 22132,
	22132, 22762, 22447, 22132, 896, -13, -1000, 202, -13, -1000,
	201, 22132, 755, 22132, 22132, 750, -13, -1000, 1275, -1000,
	-28, 1631, -1000, 1275, -1000, -1000, 1198, -1000, 200, 11204,
	15803, -1000, 332, -1000, -49, -1000, 19927, -1000, 330, -189,
	-1000, 377, -1000, 390, 198, 22132, 19927, -1000, 434, 1304,
	618, -1000, 631, -1000, -1000, 7109, 30295, -1000, 738, 1587,
	-58, -1000, -1000, -1000, 447, 16442, 15803, 9163, -60, 30295,
	-108, 11204, 714, 714, 11204, 12224, 12224, -1000, 714, -1000,
	-1000, -1000, -1000, -1000, 1303, 197, 11204, 30913, 30413, 30031,
	-64, -1000, 8823, -95, -1000, 11204, -1000, 29029, -1000, -1000,
	335, 1368, -1000, 11204, 29833, 65, 8483, -1000, 29570, -24,
	-24, -1000, 1795, 1113, 952, 813, 692, 1748, -1000, 16761,
	449, 954, 28689, 30823, 30913, -1000, 11204, -1000, -1000, 1299,
	11204, -1000, 30823, 30913, 12224, 12224, 12224, 12224, 12224, 12224,
	12224, 12224, 12224, 12224, 12224, 12224, 12224, 12224, 12224, 12224,
	12224, 12224, 12224, 1120, 12224, 1726, 1726, 1726, -101, 8143,
	-1000, 1290, 1299, 11204, 11204, 30913, 64, 63, 61, -1000,
	11204, -156, 11204, 11204, 11204, -1000, -1000, -1000, 60, -1000,
	1744, -1000, -1000, -1000, -1000, -1000, 1741, -1000, 319, 58,
	-1000, 957, -1000, -108, -1000, -1000, -1000, -1000, -1000, 1233,
	-1000, 19297, -1000, 195, 22132, 13220, 194, 833, 11204, 193,
	187, -1000, 182, -1000, -1000, 178, 22132, 1162, 373, 18352,
	-1000, 421, -1000, -1000, -1000, 959, 28661, -1000, 1577, 5421,
	22132, -1000, -1000, -1000, 537, 534, 1417, -1000, 1078, -1000,
	471, 850, -1000, 1405, 1048, 1394, 1048, -1000, -109, 834,
	-1000, 11204, -1000, 11204, -1000, 533, -1000, -1000, 532, 57,
	1261, 1642, -1000, 15803, 1261, -1000, 22132, 30295, -1000, -169,
	-1000, 1737, -1000, -1000, 1194, -1000, 4764, 19927, 22132, -65,
	-1000, -1000, 17722, 567, -1000, -110, -1000, -1000, 209, -13,
	738, -1000, -127, -1000, 374, 1702, 714, 2578, 223, 11204,
	30913, 3986, -73, 11204, 11204, -1000, -75, -1000, 11204, 316,
	30295, -1000, -1000, -1000, 30295, 11204, 1782, 11204, 53, 52,
	50, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48,
	-1000, -1000, 27802, 11204, 44, -1000, 42, 39, 30295, 1290,
	30295, -1000, -1000, 723, 723, 679, 679, 679, 679, 1726,
	2521, 1287, 2465, 1301, 1301, 1301, 2065, 526, 526, 1301,
	1301, 1301, 1298, 1127, 175, 30649, 11204, -77, -1000, -1000,
	-1000, 30295, 30295, 38, -1000, -1000, -1000, -156, 147, 28632,
	28604, -1000, 37, 315, -1000, -1000, 173, -1000, 1235, -1000,
	1791, 13220, 171, -85, -1000, 317, 1623, 11204, -1000, -1000,
	169, 22132, -1000, 28576, 13220, 22132, 19297, 1676, 13220, 974,
	1174, 373, 18352, -1000, 598, -1000, -1000, -1000, 1577, -1000,
	22132, 22132, 22132, 1392, -1000, -1000, 1149, 1164, 488, 22132,
	-1000, 22132, -1000, 22132, 22132, 22132, -86, -94, 22132, 22132,
	-1000, 436, 11204, 11204, 1631, 436, -96, 390, -1000, -1000,
	-1000, 1735, -1000, -100, -1000, -152, 17407, 1479, 22132, 1546,
	-1000, -1000, 167, 11204, 11204, 3986, -113, -1000, 714, 714,
	-1000, 28236, -1000, 30295, -1000, 29570, -1000, -1000, -1000, -1000,
	872, -1000, 28208, -1000, -1000, -1000, -1000, 12224, 1284, 166,
	30913, 28179, -1000, -1000, 11204, -1000, -1000, -1000, -1000, 1787,
	894, -1000, 22132, -1000, 5421, 22132, 1274, 1054, -1000, -1000,
	1182, 165, 12224, 22132, -120, 13220, 847, 13220, 1577, 18,
	5421, 1577, 28151, 6088, -129, -1000, -130, -131, 35, -13,
	-135, 22132, -1000, 373, 18352, -1000, 1474, -1000, -1000, -1000,
	-1000, 22132, 1044, -1000, 1037, 11204, -1000, 30913, 1048, 1048,
	-1000, 531, 530, 525, 523, -1000, -1000, -1000, 22132, 30295,
	-156, -1000, -1000, 19927, 124, -1000, -1000, 163, 18, 599,
	-137, 22132, -1000, -1000, 5748, 714, 714, -1000, -1000, 34,
	954, 1639, -1000, 988, 12224, 30913, -141, -1000, 28123, -143,
	-1000, 363, 22132, 1012, -1000, -1000, 22132, 1070, -1000, -1000,
	11204, 30649, 161, 847, -147, 1233, 160, -1000, -1000, -1000,
	-1000, -1000, -1000, 1623, -19, -1000, -1000, 835, 1233, -1000,
	847, 159, 18352, -1000, 1162, -1000, -1000, -1000, 30295, 1614,
	-1000, -1000, 22132, 22132, 158, 153, -154, -1000, 1673, -1000,
	-1000, 11204, 680, -1000, 447, -1000, -1000, 825, 11204, 988,
	-158, -1000, -1000, 1787, -1000, -1000, 1785, 152, -1000, -1000,
	1391, 4049, 1134, 22132, 1233, 847, -1000, 22132, 1577, 33,
	22132, -1000, 1233, 13220, -1000, 1174, 474, 5421, -1000, -1000,
	11204, 11204, 22132, 148, -24, 16442, -1000, 32, 11544, 11544,
	-156, -1000, -1000, -1000, 22132, 1377, -1000, 965, 888, 31,
	-1000, 1233, -166, -1000, -1000, 129, -1000, -171, -1000, -1000,
	11204, -1000, -176, -180, -1000, -1000, 29, -153, -1000, -1000,
	-1000, 12893, 981, 704, 29119, -1000, -181, 22132, -1000, 968,
	967, 716, -1000, -1000, -1000, -1000, -1000, -1000, 1134, 847,
	30295, -1000, -1000, 1782, -1000, 1706, -1000, -1000, -1000, -1000,
	-1000, 947, -1000, -1000, 1486, -1000, 481, 908, 908, 965,
	1233, 10864, -1000, -1000, -1000, -1000, 1708, -1000, -1000, 1129,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2137, 2136, 1411, 1666, 2135, 2131, 2130, 2122, 2120,
	2119, 2117, 2115, 2114, 2113, 2112, 2109, 2107, 2105, 2104,
	2103, 2102, 2101, 2092, 2091, 2090, 2089, 1664, 2085, 2082,
	2081, 2080, 2079, 2078, 1614, 2077, 1518, 2074, 2073, 2071,
	2069, 2067, 1481, 1448, 2066, 88, 110, 1439, 2061, 2058,
	1430, 2057, 2055, 2054, 2049, 2046, 2045, 98, 2044, 2043,
	2039, 2036, 2034, 2033, 2029, 143, 153, 2028, 1428, 2027,
	2026, 2025, 2023, 2022, 2018, 2015, 2013, 2012, 2011, 2008,
	2007, 2004, 2002, 2001, 2000, 1997, 1996, 155, 1995, 1994,
	1413, 1391, 1993, 1992, 20, 1988, 77, 1985, 24, 140,
	2414, 133, 1983, 1982, 1981, 1979, 34, 83, 81, 1973,
	76, 1971, 1970, 43, 26, 16, 15, 1969, 92, 1968,
	1966, 1050, 21, 1965, 1964, 122, 1962, 32, 18, 2083,
	148, 147, 102, 106, 1950, 1949, 1948, 1947, 39, 1933,
	2, 1931, 1928, 9, 54, 14, 1927, 46, 50, 1925,
	1920, 120, 1919, 69, 103, 1399, 132, 119, 28, 1918,
	72, 12, 73, 1917, 1914, 145, 27, 1912, 35, 79,
	129, 1911, 47, 156, 118, 74, 113, 117, 1908, 1904,
	1892, 131, 1890, 108, 57, 1887, 1886, 49, 1885, 123,
	127, 1884, 1883, 87, 1881, 114, 1880, 1878, 152, 138,
	107, 6, 44, 55, 11, 1393, 1387, 109, 67, 40,
	36, 1877, 1894, 1149, 1009, 29, 94, 64, 42, 96,
	53, 58, 144, 25, 1876, 1875, 112, 1873, 1871, 1870,
	1869, 1868, 93, 1867, 1866, 70, 141, 80, 23, 51,
	78, 33, 66, 149, 97, 150, 101, 1865, 95, 115,
	1864, 90, 1863, 1862, 1765, 195, 1861, 1859, 1858, 1752,
	1734, 1691, 727, 1857, 1855, 1637, 1545, 1853, 1852, 60,
	1851, 128, 104, 1849, 137, 126, 19, 1847, 111, 71,
	91, 1846, 89, 37, 0, 598, 311, 1844, 105, 45,
	1843, 1842, 1841, 1840, 22, 1, 7, 4, 8, 3,
	82, 52, 1839, 1837, 121, 85, 63, 1836, 151, 1835,
	1834, 1831, 30, 1828, 13, 1827, 17, 1825, 1824, 10,
	5, 1822, 1816, 136, 1815, 84, 1812, 1652, 1809, 146,
	1807, 1806, 1498, 31, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 7, 8, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 108,
	108, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 105, 105, 110, 110,
	110, 112, 112, 109, 109, 104, 104, 20, 55, 282,
	282, 283, 283, 93, 93, 97, 97, 94, 95, 95,
	96, 96, 26, 26, 26, 22, 22, 23, 24, 24,
	27, 27, 27, 27, 27, 27, 34, 35, 35, 35,
	35, 35, 36, 36, 36, 36, 36, 41, 41, 39,
	39, 38, 38, 37, 37, 40, 40, 157, 157, 156,
	156, 159, 159, 42, 42, 45, 45, 45, 45, 45,
	46, 46, 46, 46, 46, 46, 46, 46, 250, 250,
	249, 44, 224, 224, 47, 182, 182, 48, 48, 48,
	48, 49, 56, 323, 323, 323, 327, 327, 328, 328,
	329, 329, 329, 329, 329, 329, 329, 325, 325, 53,
	53, 92, 60, 60, 60, 60, 60, 60, 62, 64,
	61, 61, 61, 63, 63, 65, 65, 65, 65, 66,
	66, 66, 66, 67, 67, 137, 137, 275, 274, 274,
	280, 280, 280, 135, 135, 135, 135, 135, 136, 136,
	136, 273, 273, 273, 273, 281, 281, 281, 281, 281,
	281, 279, 279, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 80, 80, 87, 87, 87, 87, 87, 87, 69,
	74, 74, 74, 70, 75, 76, 77, 77, 77, 71,
	71, 79, 79, 79, 78, 84, 84, 84, 84, 81,
	81, 81, 82, 82, 85, 85, 85, 72, 73, 86,
	83, 83, 83, 43, 324, 324, 326, 326, 51, 30,
	30, 31, 31, 138, 138, 139, 139, 203, 203, 203,
	203, 140, 140, 111, 111, 111, 202, 292, 292, 293,
	293, 293, 293, 293, 293, 294, 294, 294, 294, 294,
	294, 294, 290, 290, 291, 288, 288, 289, 289, 289,
	289, 330, 330, 201, 201, 143, 143, 297, 297, 297,
	297, 295, 295, 295, 295, 295, 298, 296, 299, 299,
	299, 299, 299, 236, 236, 236, 89, 32, 117, 117,
	33, 29, 29, 186, 186, 147, 147, 241, 241, 241,
	128, 128, 106, 106, 106, 14, 11, 11, 11, 11,
	11, 11, 19, 19, 17, 17, 187, 187, 188, 188,
	52, 54, 59, 88, 88, 88, 21, 21, 25, 25,
	58, 332, 332, 124, 124, 124, 124, 125, 125, 198,
	198, 199, 199, 200, 200, 200, 119, 118, 120, 120,
	28, 28, 113, 113, 114, 114, 115, 115, 116, 116,
	333, 333, 50, 50, 91, 131, 131, 195, 195, 195,
	197, 197, 196, 196, 196, 172, 172, 172, 90, 152,
	152, 161, 161, 162, 162, 247, 163, 163, 57, 57,
	100, 100, 98, 98, 98, 98, 98, 98, 99, 99,
	101, 101, 101, 101, 101, 101, 101, 103, 305, 305,
	305, 308, 308, 304, 306, 306, 307, 307, 331, 331,
	173, 173, 173, 142, 141, 141, 145, 145, 144, 146,
	146, 240, 240, 240, 170, 170, 170, 170, 189, 189,
	190, 190, 191, 191, 192, 192, 192, 193, 193, 194,
	194, 169, 169, 220, 220, 102, 102, 151, 151, 153,
	153, 210, 210, 210, 211, 211, 209, 209, 209, 209,
	242, 242, 242, 242, 242, 242, 242, 321, 321, 321,
	322, 322, 239, 239, 243, 243, 243, 243, 243, 243,
	237, 237, 237, 237, 238, 238, 248, 248, 176, 176,
	176, 176, 174, 174, 175, 175, 244, 244, 244, 244,
	171, 171, 245, 245, 245, 204, 204, 251, 251, 251,
	269, 269, 150, 150, 150, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 253, 253, 253, 253, 255, 255, 255, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 268, 268, 268,
	268, 268, 256, 256, 263, 263, 264, 264, 265, 266,
	257, 257, 258, 258, 259, 260, 267, 267, 267, 267,
	271, 271, 261, 261, 261, 261, 261, 262, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 184, 184, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 214, 214, 214, 214,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 300, 300, 300, 300, 300, 300, 300, 302, 302,
	303, 303, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 309, 309, 310, 310, 312, 312, 313, 313, 314,
	315, 315, 315, 316, 317, 317, 311, 311, 318, 318,
	318, 319, 319, 320, 320, 320, 320, 320, 226, 226,
	226, 227, 227, 228, 234, 234, 234, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 126, 126, 126, 126, 126, 158, 158,
	223, 223, 221, 221, 221, 225, 225, 177, 177, 270,
	270, 270, 270, 270, 270, 270, 178, 178, 178, 185,
	179, 179, 180, 180, 180, 180, 180, 180, 217, 218,
	181, 181, 181, 219, 219, 229, 233, 233, 232, 231,
	231, 230, 230, 207, 207, 208, 208, 206, 205, 166,
	166, 165, 165, 164, 164, 334, 334, 235, 235, 167,
	167, 168, 160, 160, 246, 246, 246, 246, 154, 154,
	133, 133, 155, 155, 129, 129, 132, 132, 130, 130,
	130, 130, 148, 148, 149, 149, 127, 127, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 272,
	272, 272, 222, 121, 121, 121, 122, 122, 123, 123,
	277, 277, 277, 278, 278, 278, 278, 276, 276, 276,
	276, 276, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 6, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 4, 6, 4,
	6, 4, 6, 3, 5, 3, 5, 1, 3, 1,
	2, 2, 3, 2, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 5, 3, 0, 3, 3, 0, 2, 3, 2,
	3, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 2, 1, 1, 1, 1, 1, 3, 4, 5,
	3, 2, 6, 3, 4, 3, 3, 3, 3, 1,
	3, 3, 1, 2, 2, 1, 0, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 1, 1, 1, 1, 1, 2, 3,
	4, 4, 4, 4, 2, 4, 4, 4, 4, 4,
	4, 2, 3, 3, 2, 4, 5, 4, 5, 2,
	3, 3, 4, 2, 4, 3, 3, 4, 4, 2,
	5, 5, 6, 2, 2, 0, 2, 0, 3, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 4, 3, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 3, 2, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 1, 4, 4, 4, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 34, -23, -24,
	67, -28, -29, -30, -31, -32, -33, 89, -307, 93,
	-37, -38, -39, -41, -40, 104, 106, 124, 130, 212,
	218, 238, 240, 242, 249, -98, -100, 236, 237, -61,
	-62, -63, -64, -92, 260, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -21, -25, -58, 300, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, 47, 69,
	-305, 97, -101, -99, 351, 309, 263, 35, 272, 61,
	100, 244, 23, 325, 332, 253, -102, -103, 317, 281,
	354, -323, -155, 281, 82, -130, -121, 344, 4, -284,
	-286, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	-129, -121, 82, -121, 218, 22, 91, 143, 308, 307,
	22, 214, 254, 283, 285, -121, -46, 351, -45, -4,
	-27, -36, -47, -42, -43, -68, -57, -34, -50, -90,
	-91, -327, 22, -328, -329, 69, 97, 124, 253, 143,
	91, 307, -276, 4, -284, -286, -285, -287, 58, 70,
	123, 142, 136, 154, 158, 167, 169, 182, 204, 206,
	243, 264, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 73,
	74, 76, 75, 77, 78, 79, 88, 90, 92, 94,
	95, 98, 100, 102, 109, 110, 111, 119, 121, 122,
	124, 127, 129, 137, 139, 141, 151, 153, 162, 165,
	170, 172, 173, 187, 188, 189, 195, 197, 198, 200,
	201, 213, 219, 228, 241, 253, 259, 269, 279, 281,
	289, 293, 294, 299, 304, 305, 310, 312, 319, 320,
	322, 323, 324, 325, 156, -121, -323, 156, -327, -125,
	249, -121, -125, -87, 257, 4, 22, 82, 181, 259,
	290, 171, 55, 246, 257, -66, 296, -65, 290, -275,
	-67, -156, 181, -121, -331, 281, 156, 222, 296, 281,
	310, 320, -186, 82, 305, -99, -101, -100, 320, 281,
	139, 82, 310, -144, -145, 304, 151, 102, 201, -98,
	-100, -305, -280, -273, -236, 9, 299, 109, 197, -279,
	8, 343, -272, -278, 5, 7, 342, 4, -284, -286,
	-285, -87, 257, 34, 55, 22, 60, 83, 125, 139,
	140, 160, 65, 66, 221, 171, 157, 295, 161, 258,
	282, 296, 69, 311, 286, 105, -332, 296, 296, -332,
	-332, -124, 296, 293, 281, 139, 82, 320, -308, 226,
	-304, -121, -308, -141, -142, 22, 94, 355, -168, 351,
	-242, 349, -244, -129, -100, -243, 351, 198, -3, 293,
	355, -155, -148, -121, -206, -205, 353, 122, 351, -165,
	-166, -205, -206, -121, 22, 122, 153, 153, -245, -244,
	-129, -182, 351, -250, -249, -278, 317, 197, 355, -212,
	-214, 342, 343, 337, 187, 331, -226, -216, -229, 103,
	246, 351, -129, -215, 356, 9, -302, -100, 29, -227,
	-228, 49, -121, 7, 8, 5, 6, -127, -253, -222,
	-262, 299, 109, 189, -300, -301, 4, -284, -277, -254,
	-264, -258, -261, 152, 58, 74, 75, 78, 76, 79,
	259, 310, 50, 28, 107, 108, 207, 215, 278, 297,
	298, 134, 190, 135, 56, 126, 166, 96, 37, 39,
	41, 42, 51, 52, 84, 86, 87, 114, 115, 116,
	144, 146, 147, 148, 149, 150, 192, 225, 266, 276,
	291, 292, 318, -285, -265, -266, -259, -260, -267, -224,
	351, 122, -212, 197, -121, -87, 330, 2, 261, 351,
	-66, 53, 296, -199, -200, -118, -119, -120, 155, 220,
	224, 330, 293, 336, 122, -280, -137, 88, -159, 353,
	-171, -244, -212, -212, -212, -156, 134, -121, -156, 139,
	-121, 134, -144, -145, -157, 134, -156, -157, 134, -133,
	134, -132, -129, -121, 134, -148, 134, -170, -189, -190,
	170, 111, 195, -173, 22, 94, -173, -173, 44, 352,
	352, 8, 7, 7, -87, -282, -279, 9, 261, 221,
	258, 55, 122, -324, 197, 122, 122, 122, 122, 122,
	221, 258, 119, 295, 122, 155, 220, 273, 281, 320,
	122, 122, -198, -199, -198, 293, -125, -244, 134, -129,
	-132, 134, -121, -244, 134, 355, -308, -149, 351, -160,
	-246, -212, 344, -160, -168, -167, -235, -212, 88, 70,
	-176, 158, 182, 123, 167, 243, 142, 7, -46, -209,
	356, 351, 344, -239, 332, -100, -243, -242, -129, 351,
	-282, -130, 355, -276, 344, 274, 352, -154, -129, -166,
	-245, -131, -129, -131, 260, -121, 30, -158, -212, 352,
	355, -323, -329, 10, 11, 57, 33, 342, 343, 344,
	345, 117, 346, 347, 340, 341, 339, 334, 335, 336,
	63, 175, 248, 13, 14, 15, 26, 200, 169, 331,
	136, 264, 337, 16, 17, 18, 154, 36, 137, -126,
	-134, -212, -212, -212, -212, -212, 206, -164, -207, 349,
	-100, 351, -100, -212, -158, 7, -100, -221, 349, -230,
	-212, -165, 351, 5, 351, 5, -309, 326, 119, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 217, -271, 321,
	-271, -271, -255, 351, -255, -256, 351, -255, 327, 332,
	351, 30, -223, -251, -252, -254, -263, -257, -261, -262,
	40, 46, 45, 288, 180, 255, 267, 313, 38, 196,
	145, 144, 146, 147, 148, 149, 150, 266, 37, 225,
	115, 116, 114, 96, 87, 86, 192, 42, 41, -265,
	-266, -259, -260, 84, 291, 292, 152, 39, 52, 51,
	318, 276, -283, -282, -323, -65, -275, -158, 30, -199,
	355, 168, -136, 174, 186, 131, 198, 328, -281, 5,
	4, -222, -236, 88, 171, -262, -274, 88, -280, -274,
	88, 72, 353, -276, -110, 355, 48, 239, 351, -143,
	187, -117, -306, 325, -143, 351, -122, 134, -121, -306,
	187, -170, -110, 355, 103, -110, 103, -110, 355, 103,
	356, 103, 103, -190, -189, -191, -212, 22, -194, 113,
	183, -212, -214, -99, -99, -99, -146, -240, -212, 219,
	139, -156, 22, 262, -275, -326, 119, -323, -275, -275,
	-275, -275, -275, 257, -46, 119, -121, 168, -275, -275,
	281, 139, 281, -125, -108, 234, -107, 21, 23, 97,
	315, 103, 270, 287, 250, 270, 287, 250, 234, 103,
	234, 234, 103, -304, 30, -148, -151, 355, 122, 30,
	4, -151, 355, 352, 158, 158, -242, -176, 158, -174,
	204, -174, -174, -321, 351, 350, -239, -276, 349, 357,
	-158, -238, -237, 30, -121, 202, 352, -129, -248, 333,
	-121, 122, 352, 355, -204, 323, -195, -57, 351, 88,
	30, -195, -161, -162, -247, -163, -129, 351, -121, 352,
	355, -46, -249, 293, -269, -251, -268, 230, 231, 229,
	233, 232, -251, -276, 290, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, 169, 136, 264,
	36, 137, -212, 293, -212, -212, -212, -212, 179, 187,
	189, 299, 109, 306, 94, 193, -334, 279, 32, -219,
	-100, 351, -234, 27, 269, 22, -226, 246, 351, -207,
	-212, -208, -158, 352, 352, 355, -158, -225, 350, -221,
	-233, -232, 322, 352, -158, 319, 22, 94, 344, 7,
	-183, 329, 178, 85, 132, 177, -184, 252, -310, 112,
	127, 351, 352, 352, 352, -212, -212, -177, -270, -158,
	4, 329, 178, 85, 132, 177, 252, -177, -178, -212,
	-158, -179, -213, -214, 342, 343, 337, 351, 246, -180,
	-212, -158, -212, 43, 165, 294, -181, -212, 122, -158,
	-212, -212, -212, -158, -158, -158, 351, 7, 7, 290,
	290, 7, -45, 352, 355, -150, 29, 349, -183, 351,
	-248, 355, 122, 352, 296, -200, -135, 224, 268, 235,
	256, 355, -276, -244, -138, -148, -139, -121, -203, -202,
	-290, -291, -288, 139, 305, 110, 65, -289, 54, 219,
	121, 30, 103, 211, 30, 197, 187, -113, 284, 103,
	-156, -157, -157, -132, -133, -276, -121, -148, -192, -272,
	351, 343, -193, 246, 247, 355, -106, 31, 92, 159,
	-129, -325, -121, 257, -46, -129, -132, -129, 355, 293,
	-187, 65, 59, -202, 134, 59, -288, -121, 305, -187,
	65, -187, 65, 65, -244, 33, -57, 122, 33, -57,
	122, 293, -132, 293, 293, -244, 351, 352, -204, -246,
	-153, -242, -276, -204, -235, -242, -242, -175, 312, 197,
	158, -242, -237, 352, -322, 7, -239, -238, 7, -211,
	-210, 120, 185, 352, -121, 351, -239, 352, -93, 133,
	193, 274, 122, -129, -172, 241, -212, -172, -197, 197,
	-154, 317, -121, -172, -152, 355, 122, 336, -154, -212,
	-325, 330, -212, -212, 293, -334, 279, -219, -212, 179,
	189, 299, 109, 306, 94, 193, 122, 351, -213, -213,
	-158, -216, 351, -158, 350, 359, 352, -212, 350, 350,
	355, -231, -232, 98, -212, -145, 355, -144, -212, -158,
	-158, 352, 352, 293, 293, 293, 293, 351, -315, 205,
	351, 351, -212, 30, 355, 352, 122, 352, 352, -185,
	213, 352, 10, 11, 342, 343, 344, 345, 117, 346,
	347, 340, 341, 339, 334, 335, 336, 63, 175, 248,
	13, 14, 15, 154, 137, -213, -213, -213, -158, 351,
	352, -217, -218, 122, 119, 30, -181, -181, -181, 352,
	122, -158, 355, 355, 355, 352, 352, 352, 7, 352,
	355, 352, 330, 330, 352, -251, 349, 350, 7, 7,
	-96, 325, -282, -325, -118, 303, 62, 224, -280, 352,
	352, 355, -251, -122, 139, 351, -122, -121, 351, 159,
	159, -57, -156, 5, -57, -129, 103, -114, 99, -333,
	336, -121, -110, -110, -110, -193, -212, -240, -129, 356,
	355, -248, -107, -129, -121, -121, 187, -202, 134, -112,
	187, -121, -121, 134, -121, 134, -121, -121, -108, 234,
	-57, 351, -57, 351, -121, 234, -121, -129, 234, -45,
	-169, 127, -248, 355, -169, -175, 351, -212, -242, 350,
	352, 355, -238, 350, 355, 358, 336, -239, 351, -148,
	-237, -96, 122, 280, 274, -160, 188, -172, 64, 352,
	-204, -162, -153, -235, 352, -212, -212, -213, -213, 122,
	351, -212, -223, 26, 26, 352, -158, 352, 355, -208,
	-212, 352, -221, 100, -212, 289, 352, 319, -145, -145,
	-145, 5, 178, 132, 177, -184, 177, -184, -184, 7,
	-316, -121, 351, 323, -144, 352, -269, -251, -212, -217,
	-212, -269, -251, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, 94, 187, 193, -213, 355, -158, 352, -218,
	-217, -212, -212, -251, 352, 352, 352, -158, -212, -212,
	-212, 352, 7, 7, 350, 352, 199, -140, 138, -203,
	-292, 351, -122, -147, -241, -121, -303, 351, -300, -301,
	-127, 351, -289, -212, 351, 351, 351, -143, 351, -121,
	-115, 164, -333, -279, -306, 198, 352, -106, -276, -121,
	293, 293, 103, 187, 314, -105, 97, 260, -188, 103,
	-110, 103, -110, 293, -187, 65, -158, -158, 293, 293,
	352, -220, 129, 44, -242, -220, -148, -209, 7, -210,
	-276, 349, -238, -148, 352, -283, 290, -196, 351, 197,
	-57, -172, 336, 26, 26, -212, -223, 352, -212, -212,
	352, -212, 350, -212, 5, -212, 352, 352, 352, 352,
	-317, -121, -212, 352, 352, 352, -218, 122, 94, 193,
	351, -212, 352, 352, 355, 352, 352, 352, 350, 351,
	137, -293, 65, -294, 57, 110, 69, 187, 189, 305,
	219, 54, 88, 228, -147, 351, 352, 355, -128, -165,
	57, -128, -212, 351, -148, 352, -147, -148, -138, 30,
	-147, 197, -116, 163, -333, -279, -113, -106, -121, -121,
	-202, 103, 187, 88, 187, 88, 81, 301, -121, -121,
	-129, -121, -121, 352, 352, -121, -129, -312, 324, -212,
	-158, -312, 352, -239, 7, 352, -215, -127, -121, 95,
	-148, 65, -168, -100, 351, -212, -212, 352, 352, -145,
	-311, 210, 352, -213, 122, 351, -223, 352, -212, -95,
	-94, 5, 208, -121, -276, -121, 110, 134, 189, 159,
	351, -213, -129, 352, -147, -201, -330, 68, 277, -241,
	-106, -276, -106, 352, -158, 352, 352, 352, 352, -57,
	352, -129, -333, -279, -114, -202, 189, 189, -212, -251,
	-110, -110, 293, 293, 293, 293, -313, -314, -121, -238,
	350, 351, 307, 188, 352, -121, 352, -145, 44, -213,
	-223, 352, 352, 355, 352, -97, 336, -129, -294, -122,
	187, -212, -123, 351, -201, 352, -140, 351, -128, -145,
	228, -140, -201, 351, -279, -115, -109, 57, -121, -121,
	351, 351, 355, 30, -158, 260, -204, -318, 223, 247,
	-158, 352, -94, 5, 351, 103, 352, -297, 176, -121,
	-140, -201, -148, -106, 352, -129, -140, -147, -116, -104,
	312, -276, -158, -158, -314, -316, -145, -161, 352, -319,
	-320, 36, 302, 72, -212, -319, -148, 110, -295, -298,
	-296, 197, 123, 209, 265, 352, -140, 352, -143, 352,
	-212, 352, 352, 352, -204, -320, 216, 118, 246, 216,
	118, 352, -121, -296, 197, -298, 197, 307, 91, -297,
	-201, 26, -111, 48, 239, -299, 184, 239, 48, 260,
	-299, -295, -140, -320, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 34, 35, 36, 37, 0, 105, 106,
	0, 110, 111, 112, 113, 114, 115, 0, 0, 0,
	122, 123, 124, 125, 126, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 478, -2, 0, 0, 192,
	193, 194, 195, 196, 0, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 413, 414, 415, 509, 38, 39, 40,
	41, 42, 45, 46, 47, 48, 43, 44, 0, 384,
	506, 0, -2, 517, 0, 0, 0, 422, 0, 422,
	422, 426, 0, 0, 0, 515, 492, 493, 0, 0,
	-2, 0, 173, 0, 1054, 982, 988, 989, 1013, 1014,
	1015, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	0, 984, 1054, 167, 1113, 169, 0, 0, 0, 0,
	117, 118, 119, 120, 121, 166, 143, 0, 150, 151,
	152, 153, 154, 155, 156, 157, 145, 146, 147, 148,
	149, 0, 176, 177, 178, 180, 181, 182, 183, 184,
	185, 186, 303, 1027, 1028, 1029, 1030, 1031, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 0, 163, 0, 0, 0, 412,
	1140, 428, 410, 189, 0, 263, 264, 265, 266, 267,
	0, -2, 1042, 1228, 1146, 201, 1167, 209, 1234, 0,
	212, 217, -2, 139, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 383, -2, 488, 489, 0, 0,
	0, 0, 0, -2, 0, 512, 512, 512, 0, 0,
	489, 0, 191, 220, 221, 222, 231, 232, 233, 234,
	373, 0, 375, 241, 242, 1009, 0, 1023, 1024, 1025,
	1026, 261, 0, 0, 0, 264, 0, 274, 305, 0,
	0, 0, 0, 0, 281, 0, 284, 0, 0, 289,
	293, 0, 0, 299, 0, 0, 430, 421, 430, 418,
	419, 420, 423, 0, 0, 0, 0, 0, 498, 1119,
	501, 995, 499, 0, 0, 514, 513, 0, 545, 0,
	497, 507, 559, 596, 573, 564, 0, 0, 2, 0,
	0, 174, 175, 992, 990, 991, 0, 0, 0, 985,
	961, 959, 960, 168, 170, 0, 0, 0, 0, 602,
	596, 164, 0, 0, 158, 160, 1240, 0, 0, 308,
	704, 0, 0, 0, 0, 0, 0, 796, 798, 1202,
	1228, 0, 800, 801, 0, 803, 805, 806, 0, 809,
	810, 952, 984, 998, 999, 1000, 1001, 0, 0, 1004,
	0, 1006, 1007, 1008, 852, 819, -2, -2, 996, 632,
	633, 634, 635, -2, 1242, 823, 825, 827, 829, 830,
	831, 832, 0, 1186, 1203, 1204, 1224, 1225, 1233, 1237,
	1238, 1210, 1221, 1211, 1198, 1208, 1219, 1060, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1022, 666, 667, 672, 673, 675, 0,
	0, 0, 411, 0, 427, 190, 268, 197, 0, 0,
	200, 1197, 1167, 203, 431, 433, 434, 435, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 140, 0,
	80, 600, 107, 108, 109, 356, 1210, -2, 356, 1017,
	505, 1210, -2, 0, 80, 1210, 137, 80, 1210, 80,
	1210, 980, 987, 133, 1210, 135, 1210, 484, 526, 527,
	0, 0, 0, 0, 510, 511, 0, 0, 0, 480,
	481, 374, 1011, 1010, 262, 269, 89, 90, 0, 282,
	290, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	283, 291, 507, 0, 0, 0, 295, 296, 0, 0,
	0, 0, 416, 429, 417, 0, 425, 0, 1210, 596,
	0, 1210, 0, 0, 1210, 0, 500, 0, 0, 548,
	972, 976, 977, 548, 546, 0, 969, 967, 968, 0,
	0, 0, 0, 593, 593, 593, 591, 567, 0, 573,
	0, 0, 597, 585, 0, -2, 564, 0, 598, 0,
	587, 983, 0, 957, 958, 102, 0, 0, 978, 962,
	606, 0, 455, 0, 0, 603, 0, 0, 908, 507,
	0, 0, 179, 0, 0, 0, 0, 887, 888, 889,
	890, 891, 892, 895, 896, 893, 894, 897, 898, 899,
	0, 0, 0, 900, 901, 902, 0, 0, 904, 0,
	906, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	903, 709, 710, 711, 733, 734, 0, 797, 963, 956,
	799, 0, -2, 908, 0, 802, 807, 808, 0, 0,
	951, -2, 0, 1003, 0, 701, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 669, 680,
	677, 676, 653, 0, 652, 650, 0, 654, 0, 0,
	0, 507, 0, 910, 614, 615, 616, 617, 618, 701,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 663, 0, 638, 638, 638, 655, 656, 664,
	665, 670, 671, 682, 683, 685, 687, 681, 681, 681,
	678, 679, 587, 91, 0, 198, 0, 0, 0, 204,
	0, 0, 436, 228, 229, 230, 438, 439, 210, 235,
	236, 237, 238, 239, 240, 0, 205, 207, 218, 206,
	208, 211, 0, 141, 376, 0, 78, 79, 314, 0,
	0, 377, 0, 504, 0, 0, 0, 1210, 1016, 443,
	0, 487, 127, 0, 0, 129, 0, 131, 0, 0,
	0, 0, 0, 524, 525, 528, 532, 533, 536, 539,
	540, 530, 704, 494, 495, 496, 518, 519, 394, 0,
	0, 270, 271, 272, 273, 275, 0, 304, 276, 277,
	278, 279, 280, 285, 287, 507, 292, 294, 297, 298,
	0, 0, 0, 424, 49, 407, 59, 0, 407, 407,
	0, 0, 0, 0, 55, 0, 0, 57, 0, 0,
	0, 0, 0, 502, 0, 0, 606, 0, 0, 0,
	975, 606, 0, 971, 0, 0, 0, 0, 0, 588,
	592, 589, 590, 0, 0, 573, 585, 556, 0, 0,
	0, 563, 584, 0, 583, 572, -2, 0, 94, 0,
	993, 0, 0, 0, 467, 0, 467, 457, 0, 0,
	0, 467, 470, 471, 473, 474, 0, 0, 604, 165,
	0, 144, 159, 0, 705, 610, 611, 657, 658, 659,
	660, 661, 706, 707, 0, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, -2, -2, -2, 725, 726,
	727, -2, -2, -2, 731, 732, -2, 905, 907, 0,
	966, 0, -2, 0, -2, -2, -2, -2, 745, 0,
	747, 750, 752, 754, 0, 0, 0, 0, 965, 764,
	943, 0, 0, 884, 885, 886, 749, 0, 0, 964,
	955, 0, 0, -2, 804, 0, 0, 0, 914, 915,
	950, 946, 0, 811, 517, 0, 0, 0, 0, 0,
	1012, 688, 689, 690, 691, 692, 693, 702, 862, 0,
	0, 0, 824, 826, 828, 0, 0, 0, 0, 918,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 908,
	928, 0, 0, 767, 0, 0, 0, 0, 1228, 0,
	908, 936, 0, 0, 0, 0, 0, 908, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 0, 607, 609, 0, 619, 0,
	101, 0, 0, 199, 0, 432, 437, 0, 225, 0,
	227, 0, 142, 601, 0, 0, 313, 992, 315, 317,
	318, 319, 320, 1017, 0, 1017, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 445, 451, 0,
	138, 80, 80, 981, 80, 986, 134, 136, 0, 534,
	0, 0, 531, 537, 538, 0, 521, 392, 393, 0,
	0, 306, 187, 286, 288, 300, 301, 587, 0, 0,
	0, 0, 406, 61, 1210, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 507, 994, 542, 973,
	587, 549, 974, 542, 970, 575, 0, 577, 0, 0,
	0, 579, 0, 568, 0, 570, 585, 561, 0, 0,
	554, 0, 553, 573, 581, 0, 0, 599, 101, 0,
	0, 103, 0, 979, 116, 0, 605, 452, 467, 0,
	0, 459, 456, 454, 606, 0, 0, 0, 0, 909,
	171, 0, -2, -2, 0, 0, 0, 765, -2, 746,
	748, 751, 753, 755, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 0, 953, 956, -2, 909, 912, 913,
	0, 0, 947, 0, 0, 0, 0, 516, 517, 517,
	517, 817, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 0, 0, 835, 0, 836, 837, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 770, 771, 772, 0, 0,
	839, 934, 935, 0, 0, 0, 0, 0, 0, 844,
	0, 941, 0, 0, 0, 848, 849, 850, 0, 636,
	0, 662, 684, 686, 674, 911, 0, 612, 0, 0,
	88, 0, 92, 172, 202, 223, 224, 226, 219, 322,
	355, 0, 328, 0, 1017, 0, 0, 0, 0, 0,
	0, 311, 356, 378, 380, 0, 0, 447, 451, 0,
	450, 505, 128, 130, 132, 0, 0, 520, 394, 0,
	0, 302, 60, 396, 0, 0, 0, 63, 1210, 71,
	0, 409, 72, 1210, 80, 1210, 80, 73, 50, 407,
	51, 0, 52, 0, 404, 0, 395, 402, 0, 0,
	544, 0, 547, 0, 544, 576, 0, 595, 578, 559,
	569, 0, 566, 557, 0, 558, 0, 585, 0, 0,
	565, 87, 0, 0, 104, 465, 466, 453, 464, 0,
	467, 472, 469, 475, 0, 708, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 944, 0, 879, 0, 0,
	955, -2, 916, 945, 949, 0, 812, 0, 0, 0,
	0, 1005, 694, 695, 696, 697, 698, 699, 700, 0,
	860, 861, 865, 0, 0, 822, 0, 0, 917, 927,
	929, 768, 769, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, -2, -2, -2, 786, 787, 788, -2,
	-2, -2, 0, 0, 0, 930, 0, 0, 882, 932,
	933, 938, 939, 0, 841, 842, 843, 940, 0, 0,
	0, 668, 0, 0, 613, 620, 0, 309, 0, 316,
	326, 0, 0, 0, 385, 391, 391, 0, 820, 821,
	0, 0, 345, 0, 0, 0, 314, 0, 0, 0,
	449, 451, 0, 442, 443, 529, 535, 522, 394, 188,
	0, 0, 0, 0, 81, 65, 0, 0, 0, 0,
	69, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	503, 856, 0, 0, 550, 856, 0, 573, 571, 555,
	551, 0, 562, 0, 582, 93, 0, 0, 0, 0,
	458, 468, 0, 0, 0, -2, 0, 758, -2, -2,
	878, 909, 954, 948, 1002, 517, 813, 815, 816, 703,
	867, 864, 0, 851, 833, 834, 926, 0, 0, 0,
	0, 909, 881, 840, 0, 846, 847, 637, 608, 0,
	0, 327, 0, 330, 0, 0, 0, 0, 336, 337,
	0, 0, 0, 0, 0, 0, 354, 0, 394, 997,
	0, 394, 0, 0, 0, 347, 0, 0, 0, 0,
	0, 0, 440, 451, 0, 444, 445, 523, 398, 400,
	62, 0, 0, 77, 0, 0, 408, 0, 80, 80,
	397, 0, 0, 0, 0, 405, 403, 490, 0, 543,
	541, 491, 594, 585, 0, 580, 586, 0, 0, 0,
	0, 0, 476, 477, 0, -2, -2, 759, 880, 0,
	517, 0, 853, -2, 0, 0, 0, 883, 0, 0,
	98, 96, 0, 0, 331, 332, 1017, 0, 335, 338,
	0, 340, 1019, 354, 0, 322, 0, 351, 352, 386,
	387, 390, 388, 391, 517, 344, 349, 0, 322, 312,
	354, 0, 0, 446, 447, 64, 66, 67, 76, 84,
	68, 74, 0, 0, 0, 0, 855, 857, 0, 560,
	552, 0, 0, 461, 606, 463, 814, 870, 0, -2,
	0, 794, 845, 0, 100, 97, 0, 0, 329, 333,
	0, 0, 360, 0, 322, 354, 348, 0, 394, 0,
	0, 310, 322, 0, 448, 449, 86, 0, 399, 401,
	0, 0, 0, 0, 517, 0, 462, 0, 0, 0,
	866, 795, 99, 95, 0, 0, 339, 365, 0, 0,
	342, 322, 0, 389, 812, 356, 381, 0, 441, 70,
	0, 83, 0, 0, 858, 859, 0, 606, 863, 868,
	871, -2, 1170, 1051, 0, 869, 0, 0, 341, 361,
	362, 0, 357, 358, 359, 1018, 343, 353, 360, 354,
	85, 56, 58, 0, 460, 0, 873, 874, 875, 876,
	877, 325, 334, 363, 0, 364, 0, 0, 0, 365,
	322, 0, 321, 323, 324, 366, 0, 369, 370, 0,
	367, 350, 382, 872, 368, 371, 372,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1063
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = nil
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropCascade
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DropRestrict
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DropDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter using")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 87:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.str = ""
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1215
		{
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &CancelTransaction{ID: sqlDollar[3].union.expr()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{ /* SKIP DOC */
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1601
		{ /* SKIP DOC */
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			return unimplemented(sqllex, "set local")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			return unimplemented(sqllex, "set from current")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1687
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1689
		{
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = Low
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = Normal
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = High
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.str = "client_encoding"
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2005
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = DropDefault
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			return unimplemented(sqllex, "match full")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			return unimplemented(sqllex, "match partial")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			return unimplemented(sqllex, "match simple")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2332
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2338
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
			return unimplemented(sqllex, "no action")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			return unimplemented(sqllex, "action set null")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			return unimplemented(sqllex, "action set default")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = true
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = false
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = Ascending
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = Descending
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2509
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2511
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = true
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = false
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2594
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.str = ""
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.str = ""
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = ReadOnly
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = ReadWrite
		}
	case 440:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.str = ""
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = ""
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.str = ""
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.str = ""
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2825
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2837
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 468:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3096
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3099
		{
			return unimplemented(sqllex, "cte")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3111
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = true
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = true
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &From{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3349
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3367
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3394
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3411
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = nil
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = true
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = false
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.str = astFullJoin
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.str = astLeftJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = astRightJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.str = astInnerJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3594
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3680
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3693
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3791
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = nil
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3856
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3952
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4024
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = year
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = month
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = day
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = hour
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = minute
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = month
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = hour
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = minute
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = minute
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = nil
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = second
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4154
		{
			return unimplemented(sqllex, "at tz")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4388
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4614
		{
			return unimplemented(sqllex, "variadic")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4615
		{
			return unimplemented(sqllex, "variadic")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4638
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "func_application")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4659
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			return unimplemented(sqllex, "current role")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			return unimplemented(sqllex, "current user")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			return unimplemented(sqllex, "session user")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			return unimplemented(sqllex, "user")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4716
		{
			return unimplemented(sqllex, "treat")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4760
		{
			return unimplemented(sqllex, "within group")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4761
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = Window(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.str = ""
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			return unimplemented(sqllex, "frame range")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4859
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4860
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4864
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4871
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = Any
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = Some
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = All
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = Plus
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = Minus
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = Mult
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Div
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = FloorDiv
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = Mod
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = Bitand
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Bitor
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = Pow
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = Bitxor
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = LT
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = GT
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = EQ
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = LE
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = GE
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = NE
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = Like
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = NotLike
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = ILike
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = NotILike
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5238
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5239
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5357
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5401
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5437
		{
			return unimplemented(sqllex, "func const")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5446
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = DNull
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5473
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.str = ""
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
