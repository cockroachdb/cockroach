// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}

//line sql.y:314
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const STATUS = 57561
const SAVEPOINT = 57562
const SEARCH = 57563
const SECOND = 57564
const SELECT = 57565
const SERIAL = 57566
const SERIALIZABLE = 57567
const SESSION = 57568
const SESSION_USER = 57569
const SET = 57570
const SHOW = 57571
const SIMILAR = 57572
const SIMPLE = 57573
const SMALLINT = 57574
const SMALLSERIAL = 57575
const SNAPSHOT = 57576
const SOME = 57577
const SPLIT = 57578
const SQL = 57579
const START = 57580
const STDIN = 57581
const STRICT = 57582
const STRING = 57583
const STORING = 57584
const SUBSTRING = 57585
const SYMMETRIC = 57586
const SYSTEM = 57587
const TABLE = 57588
const TABLES = 57589
const TEMPLATE = 57590
const TEXT = 57591
const THEN = 57592
const TIME = 57593
const TIMESTAMP = 57594
const TIMESTAMPTZ = 57595
const TO = 57596
const TRAILING = 57597
const TRANSACTION = 57598
const TREAT = 57599
const TRIM = 57600
const TRUE = 57601
const TRUNCATE = 57602
const TYPE = 57603
const UNBOUNDED = 57604
const UNCOMMITTED = 57605
const UNION = 57606
const UNIQUE = 57607
const UNKNOWN = 57608
const UPDATE = 57609
const UPSERT = 57610
const USER = 57611
const USERS = 57612
const USING = 57613
const VALID = 57614
const VALIDATE = 57615
const VALUE = 57616
const VALUES = 57617
const VARCHAR = 57618
const VARIADIC = 57619
const VIEW = 57620
const VARYING = 57621
const WHEN = 57622
const WHERE = 57623
const WINDOW = 57624
const WITH = 57625
const WITHIN = 57626
const WITHOUT = 57627
const YEAR = 57628
const ZONE = 57629
const NOT_LA = 57630
const WITH_LA = 57631
const AS_LA = 57632
const POSTFIXOP = 57633
const UMINUS = 57634

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5085

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	311, 27,
	-2, 396,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 369,
	180, 369,
	211, 369,
	309, 369,
	311, 369,
	-2, 379,
	-1, 59,
	1, 372,
	180, 372,
	211, 372,
	309, 372,
	311, 372,
	-2, 378,
	-1, 68,
	1, 27,
	311, 27,
	-2, 396,
	-1, 398,
	1, 177,
	311, 177,
	-2, 936,
	-1, 434,
	155, 406,
	179, 406,
	-2, 375,
	-1, 437,
	155, 405,
	179, 405,
	-2, 373,
	-1, 562,
	155, 405,
	179, 405,
	-2, 376,
	-1, 619,
	308, 872,
	-2, 865,
	-1, 620,
	308, 873,
	-2, 866,
	-1, 626,
	5, 544,
	308, 544,
	-2, 1031,
	-1, 650,
	5, 510,
	-2, 1005,
	-1, 651,
	5, 538,
	308, 538,
	-2, 1007,
	-1, 652,
	5, 518,
	-2, 1008,
	-1, 653,
	5, 517,
	-2, 1009,
	-1, 654,
	5, 538,
	308, 538,
	-2, 1012,
	-1, 655,
	5, 538,
	308, 538,
	-2, 1013,
	-1, 656,
	5, 539,
	-2, 1016,
	-1, 657,
	5, 504,
	-2, 1017,
	-1, 658,
	5, 504,
	-2, 1018,
	-1, 659,
	5, 520,
	-2, 1022,
	-1, 660,
	5, 505,
	-2, 1027,
	-1, 661,
	5, 506,
	-2, 1028,
	-1, 662,
	5, 507,
	-2, 1029,
	-1, 663,
	5, 508,
	-2, 1030,
	-1, 664,
	5, 504,
	-2, 1034,
	-1, 665,
	5, 511,
	-2, 1039,
	-1, 666,
	5, 509,
	-2, 1042,
	-1, 667,
	5, 536,
	308, 536,
	-2, 1044,
	-1, 668,
	5, 540,
	-2, 1047,
	-1, 669,
	5, 542,
	-2, 1048,
	-1, 670,
	5, 535,
	308, 535,
	-2, 1052,
	-1, 925,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 659,
	-1, 934,
	308, 850,
	-2, 838,
	-1, 1140,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 579,
	-1, 1141,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 580,
	-1, 1142,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 581,
	-1, 1146,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 585,
	-1, 1147,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 586,
	-1, 1148,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 587,
	-1, 1151,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 592,
	-1, 1157,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 594,
	-1, 1160,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 599,
	-1, 1161,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 600,
	-1, 1162,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 601,
	-1, 1192,
	188, 732,
	-2, 735,
	-1, 1215,
	114, 772,
	308, 872,
	-2, 865,
	-1, 1216,
	114, 773,
	-2, 1001,
	-1, 1217,
	114, 774,
	-2, 934,
	-1, 1218,
	114, 775,
	-2, 905,
	-1, 1219,
	114, 776,
	-2, 920,
	-1, 1220,
	114, 777,
	-2, 933,
	-1, 1221,
	114, 778,
	-2, 969,
	-1, 1373,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 445,
	-1, 1377,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 593,
	-1, 1378,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 595,
	-1, 1383,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 596,
	-1, 1404,
	188, 731,
	-2, 734,
	-1, 1575,
	1, 446,
	67, 446,
	97, 446,
	115, 446,
	119, 446,
	121, 446,
	133, 446,
	139, 446,
	144, 446,
	152, 446,
	155, 446,
	166, 446,
	179, 446,
	180, 446,
	183, 446,
	211, 446,
	213, 446,
	264, 446,
	271, 446,
	281, 446,
	282, 446,
	290, 446,
	309, 446,
	311, 446,
	312, 446,
	-2, 445,
	-1, 1577,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 597,
	-1, 1582,
	142, 0,
	-2, 611,
	-1, 1591,
	188, 733,
	-2, 736,
	-1, 1625,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 639,
	-1, 1626,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 640,
	-1, 1627,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 641,
	-1, 1631,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 645,
	-1, 1632,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 646,
	-1, 1633,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 647,
	-1, 1745,
	142, 0,
	-2, 612,
	-1, 1748,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 615,
	-1, 1749,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 617,
	-1, 1842,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 616,
	-1, 1843,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 618,
	-1, 1850,
	142, 0,
	-2, 648,
	-1, 1901,
	142, 0,
	-2, 649,
	-1, 1957,
	35, 0,
	127, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 1004,
}

const sqlNprod = 1147
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25117

var sqlAct = [...]int{

	620, 1956, 1536, 1936, 1907, 1980, 438, 1937, 1955, 1938,
	1022, 845, 928, 1789, 1111, 1828, 1736, 1602, 1812, 593,
	1717, 1546, 269, 618, 1703, 1704, 1571, 1729, 735, 76,
	1014, 1570, 1662, 1347, 617, 459, 851, 1461, 1090, 271,
	76, 76, 76, 399, 77, 76, 1722, 1085, 76, 1104,
	1552, 1296, 1460, 931, 1371, 719, 76, 1407, 1562, 1349,
	847, 1089, 1119, 76, 76, 686, 1202, 76, 1054, 981,
	76, 76, 76, 76, 1361, 1023, 19, 990, 1120, 924,
	1173, 581, 1170, 272, 610, 474, 1355, 473, 1124, 868,
	1241, 26, 592, 683, 1038, 799, 736, 445, 58, 783,
	15, 7, 1047, 1080, 704, 1212, 548, 671, 708, 591,
	475, 688, 582, 549, 257, 476, 22, 780, 437, 810,
	874, 73, 962, 495, 612, 255, 1121, 1093, 966, 262,
	448, 489, 21, 486, 10, 58, 9, 8, 261, 263,
	6, 4, 565, 564, 488, 566, 273, 801, 779, 446,
	797, 377, 45, 1016, 266, 712, 482, 569, 389, 457,
	386, 1013, 464, 467, 59, 457, 58, 547, 721, 60,
	264, 1086, 265, 1835, 267, 259, 1836, 721, 258, 260,
	721, 442, 1971, 1369, 1019, 1115, 1015, 442, 1952, 1051,
	268, 1811, 1944, 456, 1934, 1115, 462, 1044, 1929, 469,
	268, 1115, 1057, 1928, 877, 878, 1115, 1903, 396, 1897,
	1044, 1887, 1115, 450, 443, 465, 425, 1307, 1881, 1871,
	1402, 1811, 1115, 435, 64, 1403, 1844, 880, 434, 1044,
	1308, 1822, 1052, 57, 1811, 1819, 1810, 1794, 1115, 1811,
	1115, 1793, 1771, 57, 1115, 1057, 1751, 66, 879, 1057,
	1814, 76, 76, 76, 76, 76, 876, 498, 698, 36,
	1747, 673, 1739, 1044, 1359, 1057, 875, 37, 1401, 36,
	1053, 1050, 1689, 1057, 1358, 1057, 67, 37, 1688, 1674,
	1586, 1057, 1115, 1057, 62, 1522, 1358, 1638, 1011, 38,
	63, 1516, 1244, 1478, 1011, 1590, 1479, 491, 491, 38,
	1334, 499, 1476, 885, 1475, 1057, 979, 1057, 1474, 61,
	1057, 1057, 877, 878, 1404, 1336, 1406, 1057, 1115, 1116,
	1337, 1066, 1115, 64, 1057, 1056, 1043, 1115, 1057, 1044,
	1055, 1010, 722, 978, 1011, 880, 977, 729, 1059, 1186,
	730, 722, 1110, 457, 722, 467, 66, 477, 1074, 577,
	576, 478, 840, 672, 895, 839, 879, 625, 791, 790,
	511, 455, 477, 68, 500, 1372, 478, 478, 824, 531,
	1991, 1954, 64, 76, 1950, 67, 496, 483, 877, 878,
	1943, 1898, 1820, 62, 1776, 576, 492, 1772, 76, 63,
	64, 76, 76, 1764, 1049, 66, 49, 1763, 1762, 1757,
	64, 880, 1756, 1755, 1701, 1653, 49, 1648, 1018, 443,
	1647, 885, 896, 66, 1695, 1646, 1048, 1182, 1593, 1575,
	1551, 1526, 879, 66, 67, 76, 1483, 76, 1307, 76,
	76, 76, 1480, 76, 725, 1468, 1459, 1430, 1427, 1426,
	850, 563, 67, 720, 1424, 1412, 843, 1411, 76, 1339,
	62, 679, 67, 1335, 875, 1258, 63, 61, 1370, 76,
	62, 1209, 895, 1208, 877, 878, 63, 932, 937, 61,
	471, 576, 555, 76, 558, 61, 1927, 885, 575, 271,
	76, 76, 76, 1604, 76, 256, 1917, 880, 1884, 1863,
	1861, 678, 562, 881, 882, 883, 884, 886, 1852, 906,
	519, 709, 477, 76, 76, 1839, 478, 520, 879, 1183,
	1832, 76, 1817, 76, 1808, 1786, 1769, 877, 878, 457,
	896, 1741, 1711, 272, 498, 498, 1581, 1544, 1542, 1541,
	1539, 1495, 271, 76, 677, 76, 76, 76, 76, 76,
	76, 76, 1694, 1524, 1494, 724, 76, 76, 727, 514,
	516, 680, 76, 554, 825, 1458, 1420, 1419, 1397, 706,
	76, 879, 1396, 1391, 1175, 705, 1323, 1285, 499, 499,
	849, 1284, 457, 713, 713, 1272, 272, 1271, 76, 1251,
	1207, 76, 1431, 1432, 1114, 552, 273, 550, 967, 970,
	877, 878, 974, 960, 959, 464, 467, 578, 572, 573,
	889, 881, 882, 883, 884, 886, 483, 906, 958, 842,
	435, 957, 956, 880, 955, 434, 954, 953, 934, 952,
	951, 854, 950, 949, 948, 947, 946, 1272, 945, 731,
	742, 500, 500, 944, 879, 935, 711, 714, 933, 273,
	61, 844, 460, 580, 517, 507, 505, 1700, 733, 1699,
	1512, 820, 675, 877, 878, 932, 1317, 1316, 694, 674,
	679, 787, 1837, 786, 472, 1350, 1698, 881, 882, 883,
	884, 886, 1309, 906, 821, 814, 972, 1372, 942, 1482,
	973, 1437, 76, 829, 1481, 1376, 541, 526, 848, 885,
	76, 1723, 1015, 525, 76, 1605, 1203, 1227, 76, 76,
	1415, 545, 76, 963, 1303, 1489, 1913, 856, 870, 858,
	251, 857, 841, 1967, 1968, 1330, 76, 1682, 76, 76,
	1051, 76, 1065, 679, 76, 418, 76, 76, 984, 76,
	983, 498, 247, 546, 435, 419, 1506, 435, 435, 864,
	71, 826, 865, 866, 830, 831, 832, 833, 834, 443,
	1802, 1801, 872, 1870, 837, 838, 1510, 1431, 1432, 906,
	995, 997, 252, 1052, 1509, 1486, 689, 765, 690, 1032,
	491, 938, 491, 1485, 976, 499, 1379, 964, 965, 248,
	1322, 1321, 76, 76, 1320, 1319, 457, 968, 1158, 1017,
	467, 1017, 70, 971, 457, 424, 1058, 423, 975, 1007,
	777, 1053, 1050, 1006, 1003, 689, 257, 690, 1026, 551,
	789, 1039, 906, 467, 1830, 1255, 467, 987, 1254, 1129,
	1000, 262, 1105, 503, 432, 271, 1041, 58, 1008, 76,
	261, 263, 58, 523, 427, 1040, 1042, 691, 500, 1726,
	1172, 585, 1004, 1523, 76, 76, 266, 1079, 1869, 1172,
	496, 76, 1511, 1791, 1036, 1035, 1437, 1031, 1033, 764,
	1034, 1055, 264, 741, 265, 1030, 267, 259, 1021, 272,
	258, 260, 524, 1435, 1436, 1438, 691, 76, 253, 1291,
	76, 883, 884, 886, 689, 906, 690, 1203, 968, 927,
	971, 702, 696, 605, 1967, 1062, 965, 964, 1068, 1060,
	1063, 1179, 695, 1497, 1067, 1117, 1177, 1915, 69, 441,
	254, 715, 250, 249, 1983, 271, 1055, 1977, 1940, 1329,
	983, 695, 74, 1128, 1297, 1049, 982, 1931, 1504, 1988,
	1431, 1432, 273, 369, 370, 371, 457, 1180, 388, 502,
	72, 400, 1301, 1932, 1514, 1531, 721, 1083, 906, 388,
	1305, 440, 1283, 1082, 1061, 691, 449, 449, 1290, 272,
	74, 1070, 991, 74, 74, 468, 74, 1072, 1287, 1122,
	1084, 1431, 1432, 1297, 1126, 1127, 819, 818, 622, 812,
	807, 76, 76, 76, 1073, 700, 1190, 76, 1118, 1155,
	76, 687, 428, 1071, 1941, 442, 76, 76, 76, 76,
	76, 542, 742, 742, 76, 1055, 1257, 76, 76, 699,
	1184, 433, 76, 1864, 706, 429, 1331, 1388, 692, 76,
	706, 76, 273, 994, 430, 1265, 1528, 521, 76, 1437,
	1792, 1386, 1181, 522, 1942, 961, 1981, 1100, 76, 1498,
	1199, 1976, 1670, 1108, 1109, 1848, 1433, 1434, 1435, 1436,
	1438, 1809, 1381, 922, 1418, 1222, 822, 692, 543, 76,
	76, 1171, 1563, 442, 1529, 76, 1282, 1939, 1299, 1168,
	1437, 1259, 1574, 1261, 1671, 498, 439, 544, 1982, 1966,
	1447, 1153, 1156, 1166, 522, 1269, 1964, 1311, 1364, 1312,
	1313, 1260, 1716, 1989, 1102, 76, 1984, 76, 534, 76,
	1289, 1384, 512, 76, 1293, 1389, 1367, 76, 1152, 993,
	722, 705, 771, 742, 1178, 510, 76, 1561, 980, 499,
	705, 1447, 1294, 1302, 1055, 1365, 76, 1975, 823, 1634,
	457, 1338, 1310, 1340, 568, 1556, 692, 1796, 1448, 765,
	765, 1315, 1342, 567, 74, 484, 74, 400, 400, 1795,
	1784, 1164, 1767, 1163, 1858, 1995, 796, 1169, 767, 1326,
	1678, 1666, 1325, 1667, 1314, 766, 1488, 568, 1327, 742,
	1332, 443, 1328, 1681, 1341, 992, 1268, 1264, 1344, 1448,
	1680, 1333, 500, 1103, 1154, 1269, 1366, 1385, 855, 1669,
	846, 1039, 794, 1527, 1387, 1345, 1672, 1737, 1908, 567,
	1352, 1405, 836, 795, 1375, 792, 1041, 1547, 1718, 1353,
	1785, 1635, 58, 742, 1374, 1040, 1042, 1636, 1122, 1433,
	1434, 1435, 1436, 1438, 1274, 1187, 1191, 1273, 1194, 481,
	1732, 764, 764, 1558, 1557, 741, 741, 1382, 1380, 1165,
	1768, 1214, 1214, 1225, 1994, 1236, 1167, 1677, 378, 521,
	765, 1248, 1249, 1250, 1738, 1668, 1442, 1439, 1440, 1441,
	1433, 1434, 1435, 1436, 1438, 1399, 508, 1679, 1414, 383,
	480, 813, 808, 76, 379, 440, 559, 1537, 443, 1702,
	1782, 513, 1553, 1356, 400, 400, 1206, 1851, 1766, 1462,
	1205, 1580, 1425, 1390, 1292, 1064, 1463, 1009, 380, 375,
	540, 1783, 539, 538, 537, 536, 765, 535, 76, 76,
	532, 479, 943, 828, 1935, 1905, 382, 1659, 388, 1502,
	74, 1500, 400, 557, 400, 1487, 560, 1346, 443, 1465,
	1466, 1467, 1106, 1098, 1501, 76, 1503, 1518, 76, 1037,
	76, 449, 764, 378, 1484, 728, 741, 76, 1491, 726,
	765, 723, 74, 1505, 1543, 718, 701, 697, 693, 76,
	1599, 1348, 1803, 76, 383, 1112, 74, 1968, 570, 379,
	271, 1520, 76, 74, 74, 74, 1540, 716, 816, 1513,
	1282, 453, 983, 1519, 528, 443, 1805, 1517, 998, 1530,
	1532, 1533, 1567, 380, 999, 1360, 74, 74, 764, 1538,
	1026, 1122, 741, 1521, 784, 381, 784, 1814, 1548, 1515,
	863, 382, 1550, 3, 272, 1595, 1596, 1597, 1866, 76,
	1583, 983, 1113, 1566, 1564, 1565, 400, 996, 784, 400,
	400, 400, 400, 400, 835, 571, 1900, 1555, 1560, 400,
	400, 1559, 764, 1364, 1493, 388, 741, 374, 454, 384,
	1554, 1122, 574, 853, 1002, 1122, 1001, 1592, 1888, 417,
	1714, 1367, 1101, 529, 1097, 1020, 871, 788, 1394, 734,
	1046, 449, 1362, 1992, 873, 1993, 1398, 273, 1606, 1654,
	1365, 1611, 461, 1534, 738, 1184, 76, 76, 76, 1409,
	1410, 385, 1431, 1432, 1363, 76, 76, 1525, 1641, 1477,
	381, 76, 1318, 76, 1256, 76, 76, 76, 1731, 1253,
	76, 76, 420, 421, 1642, 1252, 742, 877, 878, 1608,
	1609, 1076, 1075, 1200, 1077, 1457, 1658, 923, 1613, 1614,
	767, 767, 1753, 1885, 1825, 1655, 1470, 766, 766, 1720,
	1598, 1366, 76, 76, 384, 1343, 1078, 742, 742, 443,
	936, 1549, 426, 1790, 376, 827, 742, 742, 76, 76,
	533, 1645, 76, 1709, 1930, 1759, 1417, 76, 1709, 1715,
	1697, 1827, 1847, 76, 1708, 74, 1204, 1507, 1508, 1708,
	941, 35, 1706, 988, 598, 1660, 778, 74, 1490, 742,
	1713, 74, 1005, 1696, 1092, 74, 1692, 1685, 1734, 1730,
	1721, 1091, 274, 1691, 1360, 76, 817, 1719, 806, 74,
	1746, 1028, 1029, 621, 74, 800, 809, 74, 1213, 400,
	400, 676, 400, 623, 1710, 739, 624, 740, 969, 1710,
	1742, 611, 737, 494, 1357, 1024, 1727, 1728, 1176, 1201,
	1733, 767, 1413, 939, 597, 603, 602, 1188, 766, 1765,
	1122, 1122, 1364, 765, 1122, 504, 1735, 1368, 48, 518,
	76, 394, 76, 1569, 76, 76, 1675, 1676, 395, 1300,
	1367, 1693, 1107, 76, 859, 784, 873, 1499, 431, 1428,
	506, 1362, 1234, 1226, 765, 765, 1223, 553, 682, 1365,
	1588, 1025, 530, 765, 765, 76, 1306, 767, 1778, 1045,
	579, 867, 1777, 1363, 766, 452, 742, 1780, 451, 1087,
	527, 793, 1069, 1712, 916, 913, 422, 76, 1813, 1860,
	1099, 1267, 1081, 1987, 76, 1815, 765, 1865, 1496, 1912,
	65, 25, 23, 76, 1806, 1709, 1818, 74, 1088, 1799,
	1800, 767, 76, 76, 873, 764, 1708, 20, 766, 741,
	1366, 1639, 18, 17, 16, 1826, 1831, 24, 14, 13,
	12, 1846, 1649, 11, 34, 1788, 33, 32, 31, 1841,
	74, 30, 29, 400, 5, 2, 764, 764, 1824, 1798,
	741, 741, 1, 76, 0, 764, 764, 0, 0, 741,
	741, 1821, 1862, 1228, 1838, 0, 1710, 0, 1853, 0,
	0, 0, 76, 76, 0, 0, 76, 742, 0, 1823,
	76, 1834, 1856, 0, 0, 76, 0, 0, 764, 1857,
	0, 0, 741, 1882, 1874, 1122, 0, 1876, 0, 0,
	1878, 0, 0, 76, 0, 1709, 1883, 1875, 271, 76,
	76, 0, 0, 765, 0, 0, 1708, 1725, 1886, 0,
	1889, 0, 1893, 0, 1899, 0, 738, 738, 1877, 0,
	1894, 0, 76, 0, 76, 76, 1804, 76, 1392, 1393,
	1895, 0, 0, 0, 74, 1262, 1263, 1918, 0, 0,
	988, 1902, 272, 1270, 0, 0, 1922, 1920, 76, 1275,
	1276, 1278, 1280, 1281, 742, 1921, 1710, 1286, 1919, 706,
	1288, 74, 1916, 1925, 1813, 74, 1926, 1924, 1709, 1923,
	1914, 0, 74, 1840, 1304, 1890, 76, 0, 76, 1708,
	0, 74, 0, 1945, 1951, 0, 1947, 1454, 1455, 1456,
	0, 74, 0, 0, 1949, 764, 76, 0, 0, 741,
	0, 1961, 0, 0, 765, 273, 1965, 1963, 0, 0,
	1969, 0, 1081, 784, 1431, 1432, 0, 1911, 1081, 1974,
	1973, 443, 0, 0, 0, 0, 1972, 738, 0, 1710,
	0, 0, 0, 1986, 1985, 1990, 0, 742, 1970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	853, 0, 400, 0, 1996, 0, 74, 0, 0, 0,
	1351, 0, 0, 0, 1892, 0, 0, 0, 1026, 1354,
	0, 1896, 1228, 1228, 0, 0, 0, 1431, 1432, 74,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 0, 0, 1910, 764, 0, 583, 583,
	741, 0, 0, 0, 767, 0, 0, 684, 0, 0,
	0, 766, 0, 1437, 0, 0, 0, 0, 1431, 1432,
	0, 1449, 1450, 1451, 707, 0, 0, 738, 0, 0,
	0, 1228, 1228, 1228, 1744, 767, 767, 0, 1578, 1579,
	0, 0, 766, 766, 767, 767, 0, 0, 0, 1948,
	0, 766, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 1446, 0,
	1880, 0, 0, 0, 765, 0, 1437, 767, 0, 0,
	0, 0, 0, 764, 766, 0, 0, 741, 0, 0,
	0, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	0, 1637, 0, 0, 860, 862, 0, 1437, 0, 0,
	0, 869, 1448, 0, 0, 0, 873, 1447, 0, 0,
	0, 0, 0, 917, 918, 919, 920, 921, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 1933, 0, 0, 0, 0, 0, 0,
	0, 74, 74, 940, 0, 1670, 764, 1663, 1447, 0,
	741, 0, 0, 0, 0, 1661, 0, 0, 0, 1665,
	1953, 0, 1228, 1228, 0, 1448, 0, 0, 1535, 0,
	0, 988, 0, 853, 767, 0, 0, 1671, 0, 0,
	1545, 766, 1441, 1433, 1434, 1435, 1436, 1438, 0, 0,
	0, 0, 74, 0, 0, 0, 74, 1664, 0, 0,
	599, 46, 0, 0, 0, 1573, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 1228, 1228, 1228, 1228, 1228,
	1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
	1228, 1228, 1228, 1228, 0, 1228, 0, 0, 46, 0,
	0, 0, 0, 1439, 1440, 1441, 1433, 1434, 1435, 1436,
	1438, 0, 1603, 0, 0, 0, 0, 0, 0, 436,
	0, 0, 444, 0, 1666, 0, 1667, 0, 0, 46,
	0, 0, 0, 0, 0, 767, 0, 0, 0, 1443,
	1444, 1445, 766, 1442, 1439, 1440, 1441, 1433, 1434, 1435,
	1436, 1438, 1669, 0, 0, 0, 0, 0, 0, 1672,
	0, 0, 0, 0, 877, 878, 0, 0, 0, 1787,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 1656,
	1657, 988, 0, 0, 0, 0, 0, 880, 873, 873,
	0, 0, 0, 0, 1683, 0, 1684, 0, 74, 1686,
	1687, 738, 738, 1690, 74, 0, 0, 0, 879, 0,
	738, 738, 0, 0, 0, 0, 0, 0, 1668, 0,
	0, 0, 767, 0, 0, 0, 0, 0, 0, 766,
	0, 0, 0, 1705, 0, 873, 1088, 0, 1705, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 74, 74, 0, 0, 74, 0, 0, 0, 0,
	1573, 0, 583, 885, 1850, 0, 1740, 0, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	0, 1157, 0, 1159, 1160, 1161, 1162, 0, 1760, 0,
	0, 0, 0, 0, 0, 767, 0, 0, 0, 0,
	0, 0, 766, 1228, 895, 0, 0, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1210, 1211, 0, 0, 1224, 0, 1235,
	1237, 1242, 1245, 1246, 1247, 0, 0, 0, 0, 1901,
	0, 0, 0, 988, 0, 1779, 0, 400, 1781, 0,
	738, 0, 0, 0, 684, 0, 74, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 877, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 880, 1298, 0, 0, 1705, 0, 0, 1228, 0,
	74, 0, 0, 0, 0, 0, 0, 1829, 0, 0,
	0, 0, 879, 0, 877, 878, 74, 897, 898, 899,
	907, 908, 909, 0, 0, 873, 1573, 0, 0, 0,
	900, 0, 0, 0, 1324, 0, 0, 880, 0, 911,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 738, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 894, 0, 853, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1228, 0, 1867, 1868, 869, 0, 1872,
	0, 0, 0, 1873, 0, 1705, 436, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 1891, 0, 873, 0, 895, 0,
	0, 0, 1573, 873, 0, 0, 0, 0, 0, 1377,
	1378, 904, 912, 0, 0, 1383, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 1909, 910, 873, 74, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 1400, 895, 0, 0, 0, 1705, 0,
	0, 1829, 1408, 0, 0, 0, 896, 0, 0, 0,
	1416, 0, 0, 0, 1421, 0, 901, 0, 0, 0,
	0, 1431, 1432, 0, 1449, 1450, 1451, 0, 0, 74,
	0, 873, 0, 0, 0, 0, 0, 1743, 0, 926,
	0, 0, 0, 0, 0, 1242, 1242, 1242, 0, 1962,
	436, 738, 896, 436, 436, 1431, 1432, 0, 1449, 1450,
	1451, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 925, 1492, 0,
	0, 929, 930, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 1446, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 684, 0, 0, 0,
	1437, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 0, 877, 878, 1773, 897, 898, 899,
	907, 908, 909, 1452, 1437, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 880, 0, 911,
	0, 1447, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1576, 0, 0, 1577, 1452, 879, 0,
	0, 0, 0, 46, 894, 46, 0, 1582, 0, 0,
	0, 0, 0, 1587, 0, 1447, 0, 0, 0, 0,
	46, 0, 0, 1324, 0, 46, 0, 0, 0, 0,
	0, 0, 1600, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 1610, 877, 878, 0, 1612, 0, 0, 907,
	908, 909, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 911, 0,
	0, 904, 912, 1448, 0, 0, 0, 0, 0, 1643,
	1644, 0, 0, 0, 0, 0, 910, 879, 1650, 1651,
	1652, 0, 0, 894, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 1445, 0, 1442, 1439, 1440, 1441,
	1433, 1434, 1435, 1436, 1438, 0, 901, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 0, 0, 1443, 1444, 1445, 0,
	1442, 1439, 1440, 1441, 1433, 1434, 1435, 1436, 1438, 0,
	904, 912, 896, 0, 0, 0, 0, 1123, 0, 0,
	1724, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 1745, 0, 0,
	0, 1748, 1749, 1174, 0, 0, 0, 1752, 0, 0,
	0, 1754, 0, 0, 0, 0, 0, 0, 1758, 0,
	0, 0, 1761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 896, 1431, 1432, 0, 1770, 1473, 0, 0, 0,
	0, 0, 0, 905, 0, 0, 0, 0, 0, 877,
	878, 0, 897, 898, 899, 907, 908, 909, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 880, 0, 911, 0, 0, 1797, 0, 0,
	877, 878, 1446, 897, 898, 899, 907, 908, 909, 444,
	0, 0, 0, 879, 0, 0, 900, 0, 0, 894,
	0, 903, 0, 880, 1816, 911, 0, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 1833, 0,
	894, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	1842, 1843, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 912, 46, 0,
	1855, 0, 46, 0, 0, 402, 0, 0, 0, 885,
	0, 910, 1447, 1859, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 1373, 904, 912, 895,
	0, 0, 27, 0, 0, 684, 0, 0, 0, 0,
	404, 0, 910, 50, 0, 409, 410, 0, 0, 415,
	0, 901, 0, 0, 902, 0, 0, 1174, 0, 0,
	895, 403, 405, 0, 0, 0, 0, 52, 0, 0,
	1448, 0, 0, 28, 0, 57, 925, 1395, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 0, 0, 905,
	406, 36, 0, 0, 53, 0, 0, 0, 40, 37,
	0, 0, 0, 407, 408, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 411,
	905, 38, 0, 925, 0, 0, 0, 0, 0, 0,
	1946, 0, 0, 0, 0, 0, 0, 1442, 1439, 1440,
	1441, 1433, 1434, 1435, 1436, 1438, 0, 903, 1960, 1960,
	891, 892, 893, 0, 890, 887, 888, 889, 881, 882,
	883, 884, 886, 0, 906, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1960, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 39, 0, 1123,
	0, 0, 1471, 0, 0, 0, 0, 0, 55, 1960,
	0, 43, 0, 54, 0, 0, 0, 0, 0, 44,
	412, 0, 64, 0, 413, 0, 0, 47, 49, 414,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 416, 0, 66, 0, 0, 0, 1123,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 925, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 608,
	609, 606, 607, 595, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 635, 601, 0, 0, 0, 81, 82, 0,
	650, 200, 651, 83, 652, 653, 0, 84, 204, 205,
	85, 616, 634, 654, 655, 208, 0, 646, 0, 627,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 1959, 0, 628, 630, 0, 629, 631,
	95, 96, 97, 98, 656, 99, 657, 658, 0, 100,
	0, 101, 0, 0, 0, 649, 103, 0, 104, 0,
	0, 0, 600, 105, 106, 636, 637, 614, 0, 0,
	107, 108, 659, 0, 109, 0, 110, 46, 0, 277,
	0, 111, 647, 0, 218, 0, 112, 113, 114, 643,
	645, 0, 0, 117, 0, 115, 0, 278, 116, 660,
	661, 662, 663, 0, 626, 0, 0, 118, 281, 119,
	120, 0, 122, 121, 0, 648, 282, 123, 1123, 1123,
	124, 0, 1123, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 615, 644, 136,
	664, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 638, 141, 142, 143, 144, 0, 639,
	145, 232, 146, 0, 147, 148, 149, 665, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	604, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 632, 166, 167, 0, 168, 666, 237, 169, 0,
	175, 170, 171, 172, 174, 667, 173, 640, 0, 176,
	0, 177, 178, 179, 0, 240, 668, 669, 0, 0,
	180, 641, 642, 613, 181, 182, 1958, 184, 0, 0,
	185, 186, 187, 633, 188, 0, 189, 190, 191, 245,
	670, 0, 0, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 1807,
	0, 0, 0, 586, 587, 0, 0, 0, 0, 588,
	0, 0, 596, 0, 0, 46, 0, 594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 289, 80, 290, 291, 292, 293, 197, 294, 295,
	296, 297, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 298, 84, 204, 205, 85, 299, 300, 206, 207,
	208, 301, 209, 302, 275, 303, 86, 87, 88, 925,
	89, 304, 90, 91, 92, 305, 276, 93, 94, 306,
	307, 308, 309, 310, 311, 95, 96, 97, 98, 210,
	99, 211, 212, 312, 100, 313, 101, 314, 315, 316,
	102, 103, 317, 104, 318, 0, 319, 213, 105, 106,
	214, 215, 320, 321, 322, 107, 108, 216, 0, 109,
	323, 110, 324, 325, 277, 326, 111, 217, 327, 218,
	328, 112, 113, 114, 219, 220, 279, 329, 117, 330,
	115, 331, 278, 116, 221, 222, 223, 224, 332, 225,
	333, 280, 118, 281, 119, 120, 334, 122, 121, 335,
	226, 282, 123, 283, 336, 124, 337, 338, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	339, 134, 340, 227, 136, 228, 137, 138, 341, 342,
	343, 344, 345, 139, 229, 285, 140, 286, 230, 141,
	142, 143, 144, 346, 231, 145, 232, 146, 347, 147,
	148, 149, 233, 150, 151, 348, 153, 154, 152, 155,
	349, 156, 287, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 350, 235, 164, 165, 351, 166, 167, 288,
	168, 236, 237, 169, 352, 175, 170, 171, 172, 174,
	238, 173, 239, 353, 176, 354, 177, 178, 179, 355,
	240, 241, 242, 356, 357, 180, 243, 244, 358, 181,
	182, 183, 184, 359, 360, 185, 186, 187, 361, 188,
	362, 189, 190, 191, 245, 246, 363, 364, 192, 365,
	366, 367, 368, 193, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1568, 78, 79, 289, 80, 290, 291,
	292, 293, 197, 294, 295, 296, 297, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 298, 84, 204, 205,
	85, 299, 300, 206, 207, 208, 301, 209, 302, 275,
	303, 86, 87, 88, 0, 89, 304, 90, 91, 92,
	305, 276, 93, 94, 306, 307, 308, 309, 310, 311,
	95, 96, 97, 98, 210, 99, 211, 212, 312, 100,
	313, 101, 314, 315, 316, 102, 103, 317, 104, 318,
	0, 319, 213, 105, 106, 214, 215, 320, 321, 322,
	107, 108, 216, 0, 109, 323, 110, 324, 325, 277,
	326, 111, 217, 327, 218, 328, 112, 113, 114, 219,
	220, 279, 329, 117, 330, 115, 331, 278, 116, 221,
	222, 223, 224, 332, 225, 333, 280, 118, 281, 119,
	120, 334, 122, 121, 335, 226, 282, 123, 283, 336,
	124, 337, 338, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 339, 134, 340, 227, 136,
	228, 137, 138, 341, 342, 343, 344, 345, 139, 229,
	285, 140, 286, 230, 141, 142, 143, 144, 346, 231,
	145, 232, 146, 347, 147, 148, 149, 233, 150, 151,
	348, 153, 154, 152, 155, 349, 156, 287, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 350, 235, 164,
	165, 351, 166, 167, 288, 168, 236, 237, 169, 352,
	175, 170, 171, 172, 174, 238, 173, 239, 353, 176,
	354, 177, 178, 179, 355, 240, 241, 242, 356, 357,
	180, 243, 244, 358, 181, 182, 183, 184, 359, 360,
	185, 186, 187, 361, 188, 362, 189, 190, 191, 245,
	246, 363, 364, 192, 365, 366, 367, 368, 193, 194,
	195, 196, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 710, 0, 0, 78, 79,
	289, 80, 290, 291, 292, 293, 197, 294, 295, 296,
	297, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	298, 84, 204, 205, 85, 299, 300, 206, 207, 208,
	301, 209, 302, 275, 303, 86, 87, 88, 0, 89,
	304, 90, 91, 92, 305, 276, 93, 94, 306, 307,
	308, 309, 310, 311, 95, 96, 97, 98, 210, 99,
	211, 212, 312, 100, 313, 101, 314, 315, 316, 102,
	103, 317, 104, 318, 0, 319, 213, 105, 106, 214,
	215, 320, 321, 322, 107, 108, 216, 0, 109, 323,
	110, 324, 325, 277, 326, 111, 217, 327, 218, 328,
	112, 113, 114, 219, 220, 279, 329, 117, 330, 115,
	331, 278, 116, 221, 222, 223, 224, 332, 225, 333,
	280, 118, 281, 119, 120, 334, 122, 121, 335, 226,
	282, 123, 283, 336, 124, 337, 338, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 339,
	134, 340, 227, 136, 228, 137, 138, 341, 342, 343,
	344, 345, 139, 229, 285, 140, 286, 230, 141, 142,
	143, 144, 346, 231, 145, 232, 146, 347, 147, 148,
	149, 233, 150, 151, 348, 153, 154, 152, 155, 349,
	156, 287, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 350, 235, 164, 165, 351, 166, 167, 288, 168,
	236, 237, 169, 352, 175, 170, 171, 172, 174, 238,
	173, 239, 353, 176, 354, 177, 178, 179, 355, 240,
	241, 242, 356, 357, 180, 243, 244, 358, 181, 182,
	183, 184, 359, 360, 185, 186, 187, 361, 188, 362,
	189, 190, 191, 245, 246, 363, 364, 192, 365, 366,
	367, 368, 193, 194, 195, 196, 619, 608, 609, 606,
	607, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 1196, 80, 0, 0, 0, 0,
	635, 601, 0, 0, 0, 81, 82, 198, 650, 200,
	651, 83, 652, 653, 0, 84, 204, 205, 85, 616,
	634, 654, 655, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 656, 99, 657, 658, 0, 100, 0, 101,
	0, 1197, 0, 649, 103, 0, 104, 0, 0, 0,
	600, 105, 106, 636, 637, 614, 0, 0, 107, 108,
	659, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 660, 661, 662,
	663, 0, 626, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 589, 134, 615, 644, 136, 664, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 665, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 604, 159,
	0, 160, 161, 162, 163, 0, 235, 164, 165, 632,
	166, 167, 288, 168, 666, 237, 169, 0, 175, 170,
	171, 172, 174, 667, 173, 640, 0, 176, 0, 177,
	178, 179, 0, 240, 668, 669, 0, 0, 180, 641,
	642, 613, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 245, 670, 1195,
	0, 192, 0, 0, 0, 0, 193, 194, 195, 196,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 587, 1198, 0, 0, 0, 588, 0, 0,
	596, 1193, 0, 0, 0, 594, 619, 608, 609, 606,
	607, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	635, 601, 0, 0, 0, 81, 82, 198, 650, 200,
	651, 83, 652, 653, 0, 84, 204, 205, 85, 616,
	634, 654, 655, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 656, 99, 657, 658, 685, 100, 0, 101,
	0, 0, 0, 649, 103, 0, 104, 0, 0, 0,
	600, 105, 106, 636, 637, 614, 0, 0, 107, 108,
	659, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 660, 661, 662,
	663, 0, 626, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 589, 134, 615, 644, 136, 664, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 665, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 604, 159,
	0, 160, 161, 162, 163, 64, 235, 164, 165, 632,
	166, 167, 288, 168, 666, 237, 169, 0, 175, 170,
	171, 172, 174, 667, 173, 640, 0, 176, 66, 177,
	178, 179, 0, 240, 668, 669, 0, 0, 180, 641,
	642, 613, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 501, 670, 0,
	0, 192, 0, 0, 0, 62, 193, 194, 195, 196,
	590, 63, 619, 608, 609, 606, 607, 595, 0, 0,
	0, 586, 587, 0, 0, 0, 0, 588, 78, 79,
	596, 80, 0, 0, 0, 594, 635, 601, 0, 0,
	0, 81, 82, 198, 650, 200, 651, 83, 652, 653,
	0, 84, 204, 205, 85, 616, 634, 654, 655, 208,
	0, 646, 0, 627, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 628,
	630, 0, 629, 631, 95, 96, 97, 98, 656, 99,
	657, 658, 0, 100, 0, 101, 0, 0, 0, 649,
	103, 0, 104, 0, 0, 0, 600, 105, 106, 636,
	637, 614, 0, 0, 107, 108, 659, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 647, 0, 218, 0,
	112, 113, 114, 643, 645, 279, 0, 117, 0, 115,
	0, 278, 116, 660, 661, 662, 663, 0, 626, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 648,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 589,
	134, 615, 644, 136, 664, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 285, 140, 286, 638, 141, 142,
	143, 144, 0, 639, 145, 232, 146, 0, 147, 148,
	149, 665, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 604, 159, 0, 160, 161, 162,
	163, 64, 235, 164, 165, 632, 166, 167, 288, 168,
	666, 237, 169, 0, 175, 170, 171, 172, 174, 667,
	173, 640, 0, 176, 66, 177, 178, 179, 0, 240,
	668, 669, 0, 0, 180, 641, 642, 613, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 633, 188, 0,
	189, 190, 191, 501, 670, 0, 0, 192, 0, 0,
	0, 62, 193, 194, 195, 196, 590, 63, 619, 608,
	609, 606, 607, 595, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 588, 78, 79, 596, 80, 0, 0,
	0, 594, 635, 601, 0, 0, 0, 81, 82, 198,
	650, 200, 651, 83, 652, 653, 1238, 84, 204, 205,
	85, 616, 634, 654, 655, 208, 0, 646, 0, 627,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 628, 630, 0, 629, 631,
	95, 96, 97, 98, 656, 99, 657, 658, 0, 100,
	0, 101, 0, 0, 0, 649, 103, 0, 104, 0,
	0, 0, 600, 105, 106, 636, 637, 614, 0, 0,
	107, 108, 659, 0, 109, 0, 110, 0, 1243, 277,
	0, 111, 647, 0, 218, 0, 112, 113, 114, 643,
	645, 279, 0, 117, 0, 115, 0, 278, 116, 660,
	661, 662, 663, 0, 626, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 1239, 648, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 615, 644, 136,
	664, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 638, 141, 142, 143, 144, 0, 639,
	145, 232, 146, 0, 147, 148, 149, 665, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	604, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 632, 166, 167, 288, 168, 666, 237, 169, 0,
	175, 170, 171, 172, 174, 667, 173, 640, 0, 176,
	0, 177, 178, 179, 0, 240, 668, 669, 0, 1240,
	180, 641, 642, 613, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 633, 188, 0, 189, 190, 191, 245,
	670, 0, 0, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 590, 0, 619, 608, 609, 606, 607, 595,
	0, 0, 0, 586, 587, 0, 0, 0, 0, 588,
	78, 79, 596, 80, 0, 0, 0, 594, 635, 601,
	0, 0, 0, 81, 82, 198, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 616, 634, 654,
	655, 208, 0, 646, 0, 627, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 628, 630, 0, 629, 631, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 600, 105,
	106, 636, 637, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 647, 0,
	218, 0, 112, 113, 114, 643, 645, 279, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 648, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 589, 134, 615, 644, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 638,
	141, 142, 143, 144, 0, 639, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 604, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 632, 166, 167,
	288, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 640, 0, 176, 0, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 641, 642, 613,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 633,
	188, 0, 189, 190, 191, 245, 670, 0, 0, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 590, 0,
	0, 0, 0, 619, 608, 609, 606, 607, 595, 586,
	587, 0, 0, 0, 0, 588, 932, 1189, 596, 78,
	79, 0, 80, 594, 0, 0, 0, 635, 601, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 616, 634, 654, 655,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 656,
	99, 657, 658, 0, 100, 0, 101, 0, 0, 0,
	649, 103, 0, 104, 0, 0, 0, 600, 105, 106,
	636, 637, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 114, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 615, 644, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 604, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 632, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 640, 0, 176, 0, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 641, 642, 613, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 245, 670, 0, 0, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 590, 0, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 586, 587,
	584, 0, 0, 0, 588, 78, 79, 596, 80, 0,
	0, 0, 594, 635, 601, 0, 0, 0, 81, 82,
	198, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 604, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 0, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	245, 670, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 0, 0, 596, 1640, 0, 0, 0, 594, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 635, 601, 0, 0, 0, 81, 82,
	198, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 604, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 0, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	245, 670, 1594, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 619, 608, 609, 606, 607,
	595, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 78, 79, 596, 80, 0, 0, 0, 594, 635,
	601, 0, 0, 0, 81, 82, 198, 650, 200, 651,
	83, 652, 653, 0, 84, 204, 205, 85, 616, 634,
	654, 655, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 656, 99, 657, 658, 0, 100, 0, 101, 0,
	0, 0, 649, 103, 0, 104, 0, 0, 0, 600,
	105, 106, 636, 637, 614, 0, 0, 107, 108, 659,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 660, 661, 662, 663,
	0, 626, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 615, 644, 136, 664, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 665, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 604, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 666, 237, 169, 0, 175, 170, 171,
	172, 174, 667, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 668, 669, 0, 0, 180, 641, 642,
	613, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 670, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 0, 0, 596,
	1589, 0, 0, 0, 594, 619, 608, 609, 606, 607,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 635,
	601, 0, 0, 0, 81, 82, 198, 650, 200, 651,
	83, 652, 653, 0, 84, 204, 205, 85, 616, 634,
	654, 655, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 656, 99, 657, 658, 685, 100, 0, 101, 0,
	0, 0, 649, 103, 0, 104, 0, 0, 0, 600,
	105, 106, 636, 637, 614, 0, 0, 107, 108, 659,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 660, 661, 662, 663,
	0, 626, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 615, 644, 136, 664, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 665, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 604, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 666, 237, 169, 0, 175, 170, 171,
	172, 174, 667, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 668, 669, 0, 0, 180, 641, 642,
	613, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 670, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 619, 608, 609, 606, 607, 595, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 78, 79, 596,
	80, 0, 0, 0, 594, 635, 601, 0, 0, 0,
	81, 82, 198, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 616, 634, 654, 655, 208, 0,
	646, 0, 627, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 628, 630,
	0, 629, 631, 95, 96, 97, 98, 656, 99, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 600, 105, 106, 636, 637,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 1243, 277, 0, 111, 647, 0, 218, 0, 112,
	113, 114, 643, 645, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 648, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	615, 644, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 638, 141, 142, 143,
	144, 0, 639, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 604, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 632, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	640, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 641, 642, 613, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 633, 188, 0, 189,
	190, 191, 245, 670, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 619, 608, 609,
	606, 607, 595, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 78, 79, 596, 80, 0, 0, 0,
	594, 635, 601, 0, 0, 0, 81, 82, 198, 650,
	200, 651, 83, 652, 653, 0, 84, 204, 205, 85,
	616, 634, 654, 655, 208, 0, 646, 0, 627, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 628, 630, 0, 629, 631, 95,
	96, 97, 98, 656, 99, 657, 658, 0, 100, 0,
	101, 0, 0, 0, 649, 103, 0, 104, 0, 0,
	0, 600, 105, 106, 636, 637, 614, 0, 0, 107,
	108, 659, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 647, 0, 218, 0, 112, 113, 114, 643, 645,
	279, 0, 117, 0, 115, 0, 278, 116, 660, 661,
	662, 663, 0, 626, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 648, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 615, 644, 136, 664,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 638, 141, 142, 143, 144, 0, 639, 145,
	232, 146, 0, 147, 148, 149, 665, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 604,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	632, 166, 167, 288, 168, 666, 237, 169, 0, 175,
	170, 171, 172, 174, 667, 173, 640, 0, 176, 0,
	177, 178, 179, 0, 240, 668, 669, 0, 0, 180,
	641, 642, 613, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 633, 188, 0, 189, 190, 191, 245, 670,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 0,
	0, 596, 1192, 0, 0, 0, 594, 619, 608, 609,
	606, 607, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 861, 80, 0, 0, 0,
	0, 635, 601, 0, 0, 0, 81, 82, 198, 650,
	200, 651, 83, 652, 653, 0, 84, 204, 205, 85,
	616, 634, 654, 655, 208, 0, 646, 0, 627, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 628, 630, 0, 629, 631, 95,
	96, 97, 98, 656, 99, 657, 658, 0, 100, 0,
	101, 0, 0, 0, 649, 103, 0, 104, 0, 0,
	0, 600, 105, 106, 636, 637, 614, 0, 0, 107,
	108, 659, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 647, 0, 218, 0, 112, 113, 114, 643, 645,
	279, 0, 117, 0, 115, 0, 278, 116, 660, 661,
	662, 663, 0, 626, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 648, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 615, 644, 136, 664,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 638, 141, 142, 143, 144, 0, 639, 145,
	232, 146, 0, 147, 148, 149, 665, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 604,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	632, 166, 167, 288, 168, 666, 237, 169, 0, 175,
	170, 171, 172, 174, 667, 173, 640, 0, 176, 0,
	177, 178, 179, 0, 240, 668, 669, 0, 0, 180,
	641, 642, 613, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 633, 188, 0, 189, 190, 191, 245, 670,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 619, 608, 609, 606, 607, 595, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 78,
	79, 596, 80, 0, 0, 0, 594, 635, 601, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 616, 634, 654, 655,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 1959, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 656,
	99, 657, 658, 0, 100, 0, 101, 0, 0, 0,
	649, 103, 0, 104, 0, 0, 0, 600, 105, 106,
	636, 637, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 114, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 615, 644, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 604, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 632, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 640, 0, 176, 0, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 641, 642, 613, 181,
	182, 1958, 184, 0, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 245, 670, 0, 0, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 590, 0, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 588, 78, 79, 596, 80, 0,
	0, 0, 594, 635, 601, 0, 0, 0, 81, 82,
	1957, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 1959, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 604, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 0, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 1958, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	245, 670, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 619, 608, 609, 606, 607,
	595, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 78, 79, 596, 80, 0, 0, 0, 594, 635,
	601, 0, 0, 0, 81, 82, 198, 650, 200, 651,
	83, 652, 653, 0, 84, 204, 205, 85, 616, 634,
	654, 655, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 656, 99, 657, 658, 0, 100, 0, 101, 0,
	0, 0, 649, 103, 0, 104, 0, 0, 0, 600,
	105, 106, 636, 637, 614, 0, 0, 107, 108, 659,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 660, 661, 662, 663,
	0, 626, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 615, 644, 136, 664, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 665, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 604, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 666, 237, 169, 0, 175, 170, 171,
	172, 174, 667, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 668, 669, 0, 0, 180, 641, 642,
	613, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 670, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 1215, 608, 609, 606, 607, 595, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 78, 79, 596,
	80, 0, 0, 0, 594, 635, 601, 0, 0, 0,
	81, 82, 198, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 616, 634, 654, 655, 208, 0,
	646, 0, 627, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 628, 630,
	0, 629, 631, 95, 96, 97, 98, 656, 1218, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 600, 105, 106, 636, 637,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 647, 0, 218, 0, 112,
	113, 1219, 643, 645, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 648, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 1220,
	1217, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	615, 644, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 638, 141, 142, 143,
	144, 0, 639, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 604, 159, 0, 160, 161, 162, 1221,
	0, 235, 164, 165, 632, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	640, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 641, 642, 613, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 633, 188, 0, 189,
	190, 191, 245, 670, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 1216, 196, 590, 0, 619, 608, 609,
	606, 607, 595, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 78, 79, 596, 80, 0, 0, 0,
	594, 635, 601, 0, 0, 0, 81, 82, 198, 650,
	200, 651, 83, 652, 653, 0, 84, 204, 205, 85,
	616, 634, 654, 655, 208, 0, 646, 0, 627, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 628, 630, 0, 629, 631, 95,
	96, 97, 98, 656, 99, 657, 658, 0, 100, 0,
	101, 0, 0, 0, 649, 103, 0, 104, 0, 0,
	0, 600, 105, 106, 636, 637, 614, 0, 0, 107,
	108, 659, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 647, 0, 218, 0, 112, 113, 114, 643, 645,
	279, 0, 117, 0, 115, 0, 278, 116, 660, 661,
	662, 663, 0, 626, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 648, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 0, 134, 615, 644, 136, 664,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 638, 141, 142, 143, 144, 0, 639, 145,
	232, 146, 0, 147, 148, 149, 665, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 1233,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	632, 166, 167, 288, 168, 666, 237, 169, 0, 175,
	170, 171, 172, 174, 667, 173, 640, 0, 176, 0,
	177, 178, 179, 0, 240, 668, 669, 0, 0, 180,
	641, 642, 613, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 633, 188, 0, 189, 190, 191, 245, 670,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 1229, 1230, 0, 0, 0, 0, 1231, 78,
	79, 1232, 80, 0, 0, 0, 594, 635, 0, 0,
	0, 0, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 634, 206, 207,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	636, 637, 0, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 114, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 221, 222, 223, 224, 0, 225,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	0, 134, 0, 644, 136, 228, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 632, 166, 167, 288,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 640, 0, 176, 0, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 641, 642, 0, 181,
	182, 183, 184, 497, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 245, 246, 0, 0, 192, 78,
	79, 0, 80, 193, 194, 195, 196, 197, 0, 0,
	0, 0, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 1707, 206, 207,
	208, 0, 209, 0, 275, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 0, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 279, 0, 117, 0,
	115, 0, 278, 116, 221, 222, 223, 224, 0, 225,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	226, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	0, 134, 0, 227, 136, 228, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 64, 235, 164, 165, 0, 166, 167, 288,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 239, 0, 176, 66, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 243, 244, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 501, 246, 0, 0, 192, 0,
	0, 0, 62, 193, 194, 195, 196, 0, 63, 497,
	811, 0, 812, 807, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 61, 80, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	275, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 815,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 804, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 279, 0, 117, 0, 115, 0, 278, 116,
	221, 222, 223, 224, 0, 225, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 226, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 805, 0, 0, 0, 139,
	229, 285, 140, 286, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 288, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 803, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 497, 811, 192, 812, 807, 802, 0, 193,
	194, 195, 196, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 813, 808, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 275, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 798, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 804, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 279, 0, 117, 0, 115,
	0, 278, 116, 221, 222, 223, 224, 0, 225, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 226,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 805, 0,
	0, 0, 139, 229, 285, 140, 286, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 288, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 803, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 497, 811, 192, 812, 807,
	802, 0, 193, 194, 195, 196, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 813, 808, 197,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 0,
	206, 207, 208, 0, 209, 0, 275, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 804, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 279, 0,
	117, 0, 115, 0, 278, 116, 221, 222, 223, 224,
	0, 225, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 226, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 805, 0, 0, 0, 139, 229, 285, 140, 286,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 0, 166,
	167, 288, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	803, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 245, 246, 75, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	813, 808, 197, 0, 0, 0, 0, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 0, 84, 204, 205,
	85, 0, 0, 206, 207, 208, 0, 209, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 210, 99, 211, 212, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 213, 105, 106, 214, 215, 0, 0, 0,
	107, 108, 216, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 217, 0, 218, 0, 112, 113, 114, 219,
	220, 0, 0, 117, 0, 115, 0, 0, 116, 221,
	222, 223, 224, 0, 225, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 226, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 227, 136,
	228, 137, 138, 0, 0, 458, 0, 0, 139, 229,
	0, 140, 0, 230, 141, 142, 143, 144, 0, 231,
	145, 232, 146, 0, 147, 148, 149, 233, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 64, 235, 164,
	165, 0, 166, 167, 0, 168, 236, 237, 169, 0,
	175, 170, 171, 172, 174, 238, 173, 239, 0, 176,
	66, 177, 178, 179, 0, 240, 241, 242, 0, 0,
	180, 243, 244, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 501,
	246, 0, 0, 192, 75, 0, 0, 62, 193, 194,
	195, 196, 0, 63, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 197, 0,
	0, 0, 1125, 81, 82, 198, 199, 200, 201, 83,
	202, 203, 0, 84, 204, 205, 85, 0, 0, 206,
	207, 208, 0, 209, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	210, 99, 211, 212, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 213, 105,
	106, 214, 215, 0, 0, 0, 107, 108, 216, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 217, 0,
	218, 0, 112, 113, 114, 219, 220, 0, 0, 117,
	0, 115, 0, 0, 116, 221, 222, 223, 224, 0,
	225, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 226, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 227, 136, 228, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 0, 140, 0, 230,
	141, 142, 143, 144, 0, 231, 145, 232, 146, 0,
	147, 148, 149, 233, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 234, 159, 0, 160,
	161, 162, 163, 64, 235, 164, 165, 0, 166, 167,
	0, 168, 236, 237, 169, 0, 175, 170, 171, 172,
	174, 238, 173, 239, 0, 176, 66, 177, 178, 179,
	0, 240, 241, 242, 0, 0, 180, 243, 244, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 501, 246, 0, 0, 192,
	75, 0, 0, 62, 193, 194, 195, 196, 0, 63,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 197, 0, 0, 0, 61, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 0, 206, 207, 208, 0, 209,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 0,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 0, 0, 117, 0, 115, 0, 0,
	116, 221, 222, 223, 224, 0, 225, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 226, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 0, 458, 0, 0,
	139, 229, 0, 140, 0, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 0, 166, 167, 0, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 0, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 0, 181, 182, 183, 184,
	75, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 245, 246, 0, 0, 192, 78, 79, 0, 80,
	193, 194, 195, 196, 197, 0, 0, 0, 0, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 1125, 206, 207, 208, 0, 209,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 0,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 0, 0, 117, 0, 115, 0, 0,
	116, 221, 222, 223, 224, 0, 225, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 226, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 0, 140, 0, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 0, 166, 167, 0, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 0, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 245, 246, 0, 0, 192, 0, 75, 0, 0,
	193, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 197, 0, 0, 0, 703, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 1027, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 1604, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 619, 608, 609, 606, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 681, 0, 0, 0, 197, 0, 0, 0, 0,
	81, 82, 198, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 0, 0, 654, 655, 208, 0,
	209, 0, 275, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 656, 99, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 226, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 0, 134,
	615, 227, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 243, 244, 613, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 670, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 782, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 781, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 75, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 785, 197,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 0,
	206, 207, 208, 0, 209, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 0, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 0, 0,
	117, 0, 115, 0, 0, 116, 221, 222, 223, 224,
	0, 225, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 226, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 0, 140, 0,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 0, 166,
	167, 0, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 245, 246, 0, 497,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 785, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	275, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 279, 0, 117, 0, 115, 0, 278, 116,
	221, 222, 223, 224, 0, 225, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 226, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 288, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 991, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 989, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 1096,
	0, 107, 108, 216, 0, 109, 0, 110, 994, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 1094, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 993, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	1095, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 991, 209, 0,
	0, 986, 86, 87, 88, 0, 89, 989, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 994, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	985, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 993, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	992, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 1572, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 458, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	732, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 458, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 509, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	470, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 458, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	463, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 458, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 373, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 372, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	1279, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	1277, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	1266, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	852, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 387, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 717, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 0, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	561, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	556, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 515, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	398, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 397, 241, 242, 0,
	0, 393, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	398, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 397, 241, 242, 0,
	0, 393, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	493, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	490, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	487, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	485, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	466, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 447,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 390, 0, 0, 125, 0, 126, 127, 128, 129,
	398, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 392, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 391, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 397, 241, 242, 0,
	0, 393, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 0, 144, 0,
	231, 145, 232, 146, 0, 147, 0, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 0, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 877, 878, 0, 897, 898, 899, 907,
	908, 909, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 0, 880, 0, 911, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 0, 879, 900, 0,
	0, 0, 0, 894, 0, 880, 0, 911, 0, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 879, 0, 900, 0,
	0, 0, 894, 0, 0, 880, 0, 911, 0, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 885, 0, 0, 0, 879, 0, 900, 0,
	0, 0, 894, 0, 0, 880, 0, 911, 0, 0,
	904, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 910, 879, 0, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 902, 0, 904,
	912, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 902, 0, 0, 904,
	912, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 902, 0, 0, 904,
	912, 896, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 902, 0, 0, 0,
	896, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 905, 0, 891, 892, 893, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 0,
	896, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	903, 0, 905, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 0,
	0, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 0,
	0, 1904, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 877,
	878, 1879, 897, 898, 899, 907, 908, 909, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 880, 0, 911, 0, 0, 0, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 0, 0, 879, 900, 0, 0, 0, 0, 894,
	0, 880, 0, 911, 0, 0, 0, 0, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 0, 879, 0, 900, 0, 0, 0, 894, 0,
	0, 880, 0, 911, 0, 0, 0, 0, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 885, 0,
	0, 0, 879, 0, 900, 0, 0, 0, 894, 0,
	0, 880, 0, 911, 0, 0, 904, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 910, 879, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 902, 0, 904, 912, 0, 0, 895,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 902, 0, 0, 904, 912, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 902, 0, 0, 904, 912, 896, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 905,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 902, 0, 0, 0, 896, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 905, 0,
	891, 892, 893, 0, 890, 887, 888, 889, 881, 882,
	883, 884, 886, 0, 906, 0, 896, 0, 1854, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 905, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 0, 0, 1849, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 0, 0, 1845, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 877, 878, 1775, 897, 898,
	899, 907, 908, 909, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 880, 0,
	911, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 879,
	900, 0, 0, 0, 0, 894, 0, 880, 0, 911,
	0, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 879, 0,
	900, 0, 0, 0, 894, 0, 0, 880, 0, 911,
	0, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 885, 0, 0, 0, 879, 0,
	900, 0, 0, 0, 894, 0, 0, 880, 0, 911,
	0, 0, 904, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 910, 879, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 902,
	0, 904, 912, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 902, 0,
	0, 904, 912, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 902, 0,
	0, 904, 912, 896, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 902, 0,
	0, 0, 896, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 905, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 896, 0, 1774, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 905, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 1750, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 1673, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 877, 878, 1607, 897, 898, 899, 907, 908, 909,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 880, 0, 911, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 0, 879, 900, 0, 0, 0,
	0, 894, 0, 880, 0, 911, 0, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 879, 0, 900, 0, 0, 0,
	894, 0, 0, 880, 0, 911, 0, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	885, 0, 0, 0, 879, 0, 900, 0, 0, 0,
	894, 0, 0, 880, 0, 911, 0, 0, 904, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 910, 879, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 902, 0, 904, 912, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 902, 0, 0, 904, 912, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	1979, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 902, 0, 0, 904, 912, 896,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 902, 0, 0, 0, 896, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 1978, 0, 0, 903,
	905, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 896, 0,
	1591, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	905, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 0, 1185,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 0, 880,
	0, 911, 0, 0, 0, 0, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 877, 878, 0,
	879, 0, 900, 0, 0, 0, 894, 1112, 0, 880,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 894, 0, 0, 915,
	0, 879, 0, 0, 0, 877, 878, 894, 897, 898,
	899, 907, 908, 909, 0, 885, 0, 1463, 0, 0,
	1462, 900, 0, 0, 1113, 914, 0, 0, 880, 0,
	911, 0, 0, 904, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 910, 879,
	0, 0, 0, 0, 0, 894, 885, 0, 0, 0,
	902, 0, 0, 904, 912, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	902, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 904, 912, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 896, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 0, 896, 0, 1431, 1432, 0, 1449, 1450,
	1451, 0, 0, 0, 903, 905, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 0, 906, 0, 0, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 1446, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 880, 0,
	911, 0, 0, 903, 0, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 879,
	906, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 877, 878, 1437, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 880, 0, 911, 0, 0,
	0, 877, 878, 0, 897, 898, 899, 907, 908, 909,
	0, 0, 0, 0, 885, 0, 879, 900, 0, 0,
	0, 0, 894, 0, 880, 1447, 911, 0, 0, 0,
	0, 0, 904, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 910, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 901, 442, 904,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 910, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 904, 912,
	0, 0, 895, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 910, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 902, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 1443, 1444, 1445, 0,
	1442, 1439, 1440, 1441, 1433, 1434, 1435, 1436, 1438, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 903, 0, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 896,
	906, 0, 1601, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 1464, 0, 0, 880, 0, 911, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 879, 906, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 0, 0, 903,
	0, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 885, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 880, 0, 911, 0, 0, 0, 0, 0, 904,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 910, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 904, 912, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 896, 906, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 905, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 1422, 0,
	0, 880, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 885, 0, 0,
	900, 1431, 1432, 0, 1449, 1450, 1451, 880, 0, 911,
	0, 0, 0, 0, 0, 904, 912, 1585, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 879, 0,
	910, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 880, 902, 911, 0, 0, 0, 0, 895, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 894, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 904, 912, 0, 877, 878, 896, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 910, 885, 905, 0,
	900, 0, 0, 0, 0, 0, 0, 880, 902, 911,
	0, 0, 0, 1452, 895, 904, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	910, 1447, 0, 0, 894, 0, 901, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 896, 906, 0, 0, 1431, 1432, 0, 1449,
	1450, 1451, 0, 885, 905, 0, 0, 0, 0, 1448,
	0, 0, 1584, 0, 0, 0, 0, 0, 0, 0,
	0, 904, 912, 0, 0, 0, 896, 0, 1431, 1432,
	0, 1449, 1450, 1451, 0, 0, 910, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 902, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 1446, 906,
	0, 0, 1443, 1444, 1445, 0, 1442, 1439, 1440, 1441,
	1433, 1434, 1435, 1436, 1438, 1437, 903, 0, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 896, 906, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 905, 0, 0, 1437, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 911,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	1452, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 904, 912, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 1445,
	0, 1442, 1439, 1440, 1441, 1433, 1434, 1435, 1436, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 1445, 0, 1442, 1439, 1440, 1441, 1433, 1434, 1435,
	1436, 1438, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 755, 749, 772, 743,
	763, 762, 0, 0, 745, 744, 0, 0, 0, 774,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	768, 0, 760, 759, 0, 0, 0, 0, 0, 0,
	0, 758, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 757, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 751, 752, 753, 0,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 754, 748, 0, 0, 0, 0, 0, 0,
	0, 776, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 769, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 775,
}
var sqlPact = [...]int{

	3369, -1000, 52, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 662, 16785, -1000,
	-1000, -1000, -1000, -1000, -1000, 645, 632, 177, 4588, 16785,
	16785, 16525, 1277, 1277, 18085, -1000, -1000, 21205, -1000, 3343,
	469, 479, 469, 469, 541, 18085, 588, 746, 149, -1000,
	812, 1, 20945, 16785, 1359, 49, 15225, 334, 3369, 16265,
	20685, 16785, 16005, 356, 56, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1197, 1129, 1088,
	15225, 20425, 20165, 19905, 19645, -1000, 10379, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 693, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 338,
	337, -1000, 15745, -1000, 935, -1000, 48, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 922, -1000, 16785, -1000, -1000,
	19385, 19125, 336, 884, -1000, -1000, 579, 400, 1379, -1000,
	59, -1000, -1000, -1000, 1196, -1000, 918, 1193, 1191, 1190,
	1189, 1188, 1186, 399, 858, 455, -1000, 884, -1000, 884,
	-1000, -1000, -1000, 555, 18085, -1000, 15225, -1000, 18865, 16785,
	16785, 1146, 18605, -1000, 812, -1000, -1000, -1000, 988, 1346,
	1346, 1346, 1409, 169, 162, 149, 37, 16785, -1000, 335,
	37, 6329, 6329, -1000, -1000, 334, -1000, 359, 13093, -1000,
	7521, -1000, 784, 1260, 422, 685, 1259, -55, 802, 778,
	1258, 652, 12296, 56, -1000, -1000, -1000, 9261, 4304, 15225,
	16785, 16785, 683, 18345, -1000, 1257, 131, 1253, -1000, 122,
	1251, -1000, 122, 1247, 28, -1000, -1000, -1000, -1000, -1000,
	-1000, 334, 15485, 16785, 1439, 24840, -1000, 9261, -1000, -1000,
	13637, 1182, 13637, -1000, -1000, 1437, -1000, 9261, -1000, 47,
	46, 1052, 1033, 10938, 10665, 1309, 972, -1000, -1000, -1000,
	58, 4588, 16785, 1202, 13637, 16785, 16785, 16785, 16785, 16785,
	16785, -1000, 1049, -1000, -1000, 16785, 16785, -1000, 43, 40,
	-1000, 18085, -1000, 134, -1000, 333, 1019, 405, 132, 17825,
	405, 1017, -1000, 988, -1000, 955, 1044, 8403, 9261, 149,
	-1000, -1000, 149, 149, 9261, -1000, -1000, 16785, 37, 1436,
	16785, 142, -1000, 23375, -1000, -1000, 9261, 9261, 9261, 9261,
	9261, 865, -1000, -1000, 1520, -1000, 5468, -1000, -1000, 56,
	332, 161, -1000, -1000, 330, 56, -1000, -1000, -1000, -1000,
	327, 1545, 463, -1000, -1000, -1000, 9261, 394, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1201, 325, 320,
	-1000, -1000, -1000, -1000, 318, 317, 316, 315, 314, 312,
	311, 309, 308, 306, 304, 303, 300, 286, 285, 838,
	-1000, 424, -1000, -1000, 424, 424, -1000, 280, 280, 281,
	-1000, -1000, -1000, -1000, 280, -1000, -1000, -1000, 391, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 284, 142, -1000, -1000,
	-1000, 16785, 24, -1000, 24314, -1000, -6, 864, -1000, 14705,
	1365, 1326, 1332, 15225, 1423, 1421, 550, 16785, 16785, 549,
	545, 15225, -1000, 1183, 22, -1000, -1000, 22960, -155, -1000,
	-1000, 411, 100, 1435, 100, 12573, -1000, 16785, 16785, -1000,
	16785, -1000, -1000, 16785, -1000, 16785, 16785, -1000, 16785, 167,
	14185, 863, 1241, 666, 1, 17, -1000, 1441, -1000, -1000,
	-1000, -1000, 108, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 281, 838, 280,
	280, 280, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 391,
	-1000, -1000, 424, 424, 424, -1000, -1000, 16, 24314, 542,
	26, 13911, 16785, -1000, 57, -1000, -1000, 1181, 466, 12,
	833, 1106, 759, -1000, -1000, -1000, -1000, 36, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1514, -1000,
	-1000, -1000, -1000, 1517, 36, -1000, -1000, -1000, -1000, -1000,
	1541, -1000, -1000, -1000, 4588, -1000, -1000, -1000, 16785, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 833,
	1106, -1000, -1000, 15225, 14445, 1434, 1235, 844, -1000, 1432,
	16785, 914, 1012, -1000, 574, 1234, -1000, -1000, -1000, -1000,
	24314, -1000, 24314, 827, 1136, -1000, 1136, 30, -1000, 23316,
	-1000, 276, 10, -1000, 411, 6329, 12036, 24840, 24840, 16785,
	568, 9261, 9261, 9261, 9261, 9261, 9261, 9261, 9261, 9261,
	9261, 9261, 9261, 9261, 9261, 9261, 9261, 9261, 9261, 9261,
	9261, 9261, 9261, 954, 9261, 534, 9261, 9261, 9261, 9261,
	980, 817, 256, 879, 4588, -1000, -1000, 643, 643, 643,
	24348, 24348, 201, -1000, 56, 41, 22930, 27, 56, -1000,
	-1000, -1000, 6040, 8093, 56, 4872, -1000, 639, 1516, 416,
	24314, 1184, 1167, 272, 154, 152, 9261, 9261, 9547, 9547,
	9261, 9833, 9261, 9261, 5754, 9261, 9261, 9261, 9261, 9261,
	9261, -1000, 271, -1000, -1000, -1000, -1000, 1508, -1000, -1000,
	1502, -1000, 567, 564, 1497, 411, 146, 7521, -1000, 863,
	16785, 16785, 16785, -1000, -1000, 1006, 17565, 1005, 24840, 16785,
	-1000, 269, 267, 1082, 1079, 16785, 16785, 17305, 17045, 16785,
	745, 263, 259, 16785, 761, -1000, 16785, 16785, 751, 640,
	1180, 16785, -1000, 9261, 713, 9261, 762, -1000, 11760, 429,
	16785, 739, 116, -1000, -1000, -1000, 379, 16785, -1000, -1000,
	-1000, 131, -1000, 122, 122, -1000, -1000, 15225, -1000, -1000,
	-1000, -1000, -1000, -1000, 24840, 351, 350, -1000, 1495, 531,
	-1000, 530, 527, 526, -1000, 258, -1000, 9261, 16785, 13911,
	26, 15, -1000, -1000, 16785, 1106, -1000, -1000, -1000, -1000,
	656, -1000, 814, -1000, 11211, -1000, -1000, -1000, 639, -1000,
	-12, -1000, -1000, -1000, -1000, 144, 6, 8, 24840, -1000,
	-1000, -1000, -1000, -1000, 16785, 319, 16785, 1, 16785, -1000,
	1540, 1, 16785, 1229, 1267, 372, 16785, -1000, -1000, -1000,
	9261, -1000, -1000, -1000, 1, 16785, -1000, 1164, -1000, -26,
	1537, -130, 150, 388, -1000, 11484, -1000, -1000, -1000, 398,
	580, 580, 454, 454, 454, 454, 302, 302, 194, 2354,
	3003, 3003, 3003, 2568, 368, 368, 3003, 3003, 3003, 24348,
	24434, 23327, 9261, 9261, 522, 808, 256, 23327, 9261, 1507,
	23327, 23327, 23327, -1000, 928, -1000, -1000, -1000, 1179, 255,
	9833, 9833, -1000, -1000, -1000, 5468, 254, -1000, -1000, -1000,
	-1000, -1000, 250, 9261, -1000, -1000, 9261, -39, -87, -1000,
	-1000, 5, -1000, -1000, 4, 9261, 9261, 9261, 138, -1000,
	136, 607, -1000, 9261, 867, 249, 248, 9261, -1000, -1000,
	24228, 21743, 135, 1178, -110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 130, 129, 24018, -110, 128, 2825, -1000, 9833,
	9833, 9833, 5468, 247, 127, 23286, -110, 23932, 7807, 7807,
	7807, 126, 23711, 9261, -110, 3260, 3229, 2914, -1, -5,
	-7, 1492, -16, 123, 397, 392, 117, 1164, -1000, -1000,
	-1000, -1000, 519, 511, 1227, -1000, 995, -1000, 433, -1000,
	910, 9261, 16785, 236, 223, 811, -1000, 1223, 900, 1221,
	900, -1000, -6, 674, 9261, 9261, -1000, 510, -1000, -1000,
	502, -1000, 613, -1000, 343, 24314, -1000, 6329, 24314, -1000,
	733, 1348, -18, -1000, -1000, 6329, 411, 12573, 12036, 7521,
	-24, -1000, -1000, -1000, 863, -1000, 536, 1490, 112, 1030,
	902, 783, 694, 1476, 24314, -12, -1000, -12, -1000, -1000,
	-1000, -1000, -1000, -1000, 16785, 1148, -1000, 14445, 222, 16785,
	221, -1000, 220, -1000, -1000, 219, 16785, 1058, 372, 1547,
	-1000, 405, -1000, 111, -1000, 1161, 1407, -1000, 12036, 958,
	1090, 1089, 12036, 973, 876, 876, 876, -1000, 388, 4009,
	9261, 14965, 888, 76, 110, 1537, 9261, 23327, 23327, 9261,
	9833, 9833, -1000, 23327, -1000, -1000, -1000, -1000, 1177, 218,
	9261, 24840, 24526, 24331, -29, -1000, 5468, 7211, -17, 56,
	22901, -1000, -1000, 349, -1000, 109, 6925, -1000, 23625, -2,
	-2, -1000, 1535, 1265, -1000, 9261, 23682, -1000, 12833, 414,
	880, 22604, 24840, 24840, -1000, 9261, -1000, -1000, 1175, 9261,
	-1000, 24840, 24840, 9833, 9833, 9833, 9833, 9833, 9833, 9833,
	9833, 9833, 9833, 9833, 9833, 9833, 9833, 9833, 9833, 9833,
	9833, 9833, 1040, 9833, 1482, 1482, 1482, -25, 6615, -1000,
	1185, 1175, 9261, 9261, 24840, 106, 101, 98, -1000, 9261,
	-110, 9261, 9261, 9261, -1000, -1000, -1000, 96, -1000, 1472,
	-1000, -1000, -1000, -1000, 1161, 16785, 16785, 16785, 1219, -1000,
	2153, -1000, 22574, -30, 16785, 16785, -1000, 1076, 1096, 456,
	16785, -1000, 16785, -1000, 16785, 16785, 16785, -31, -37, 16785,
	16785, -1000, -1000, -46, 6329, 234, 1, -46, 713, -1000,
	-38, -1000, 373, -1000, 342, 340, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 95, -1000, -1000, 1151, -1000, 10119,
	214, 16785, 14445, 1430, 10119, 912, 1060, 372, 1534, -1000,
	574, -1000, 409, 9261, 9261, 1537, 594, 12036, 12036, 1328,
	1086, 12036, -1000, -1000, -1000, -1000, 14965, -1000, 1085, -47,
	-1000, -1000, 16785, 213, -1000, 388, 507, 23327, 2791, 2048,
	9261, 24840, 24644, -49, 9261, 9261, -1000, 22544, -63, -1000,
	9261, -1000, -1000, 1527, 9261, 94, 93, 90, -1000, -1000,
	24314, 9261, -1000, -1000, 21465, 9261, 89, -1000, 88, 84,
	24314, 1185, 24314, -1000, -1000, 572, 572, 1482, 1482, 1482,
	1482, 1944, 1944, 920, 2007, 3212, 3212, 3212, 961, 747,
	747, 3212, 3212, 3212, 1174, 1063, 208, 24558, 9261, -67,
	-1000, -1000, -1000, 24314, 24314, 78, -1000, -1000, -1000, -110,
	2614, 22515, 22218, -1000, 75, 409, -1000, -1000, -1000, 16785,
	-1000, 16785, -1000, 16785, 16785, 1176, 977, -1000, -1000, 1065,
	207, 9833, 16785, -1000, 788, -68, -72, 976, -1000, 964,
	9261, -1000, 24840, 900, 900, -1000, 497, 496, -1000, -1000,
	-1000, -1000, -46, 1272, 16785, 1324, -1000, -1000, 206, -1000,
	-1000, -1000, 861, -73, -1000, 196, 1353, 9261, -1000, -1000,
	204, 10119, -74, 73, 1, -78, 16785, -1000, 372, 1529,
	-1000, 1267, -1000, 16785, 24314, -110, 563, -1000, 1328, -1000,
	202, 9261, 12036, -1000, -1000, -139, -1000, 369, -1000, 388,
	197, 16785, 14965, 9261, 9261, 24644, -83, -1000, 23327, 23327,
	-1000, -1000, 22188, -1000, 23625, -1000, -1000, -1000, 24314, 853,
	-1000, 22158, -1000, -1000, -1000, -1000, 9833, 1173, 190, 24840,
	22129, -1000, -1000, 9261, -1000, -1000, -1000, -1000, -1000, 990,
	-1000, -1000, 16785, 983, -1000, -1000, 9261, 24558, 182, 1148,
	181, -1000, -1000, -1000, 807, -1000, -1000, 24314, 1364, -1000,
	-1000, 16785, 16785, 581, -90, 16785, -1000, -1000, 5182, 16785,
	788, 10119, 1334, 56, 16785, 1334, 21832, 4872, -91, -1000,
	1148, -1000, 788, 180, 1528, -1000, 1058, -101, -1000, 1428,
	13377, -1000, 16785, 24314, -1000, 1085, -1000, 4588, 14965, 16785,
	-100, -1000, 23327, 23327, -1000, -1000, 72, 880, 1393, -1000,
	23585, 9833, 24840, -102, -1000, 21802, -1000, -1000, 1217, 21772,
	1037, 16785, -1000, 16785, 16785, 435, 16785, -1000, -1000, 679,
	-1000, 411, -1000, 178, 1148, -1000, -1000, -1000, -1000, 1353,
	4, 788, -1000, 1148, 10119, -1000, 1060, 16785, 175, -1000,
	168, 56, -106, -1000, -1000, -1000, -111, -1000, -1000, 726,
	9261, 23585, -115, -1000, -1000, 1210, -1000, 887, 803, 71,
	-117, 132, -1000, 9261, -1000, 12573, -1000, 16785, -1000, 1334,
	65, 1148, -1000, -121, -1000, -1000, -1000, 9261, -1000, -1000,
	62, 8975, 8975, -110, -1000, 16785, -1000, 906, 899, 627,
	-1000, -1000, -1000, -1000, -1000, 1037, 24314, -95, -127, -1000,
	-1000, -1000, 788, -2, -1000, -1000, -1000, 3664, 931, 701,
	22990, -1000, -1000, -1000, 1280, -1000, 446, 868, 868, 887,
	-1000, 883, 1148, 61, 1447, -1000, -1000, -1000, -1000, -1000,
	-1000, 1455, -1000, -1000, 1071, -1000, -1000, -1000, -1000, -1000,
	-1000, 1527, 8689, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1782, 1775, 1413, 141, 1774, 140, 1772, 1771, 1768,
	1767, 1766, 1764, 101, 137, 136, 125, 134, 1763, 94,
	1760, 1759, 1758, 100, 1757, 1754, 1753, 76, 1752, 1747,
	132, 116, 1732, 1731, 91, 152, 169, 2260, 164, 1730,
	1729, 1728, 14, 111, 65, 1727, 55, 1723, 1721, 49,
	33, 21, 20, 1720, 106, 113, 893, 36, 1719, 1716,
	160, 1715, 84, 18, 92, 99, 155, 144, 133, 1714,
	1712, 1711, 1710, 47, 1709, 2, 1708, 1705, 11, 57,
	6, 1701, 24, 171, 1700, 1699, 120, 1696, 62, 104,
	117, 43, 131, 292, 1692, 81, 10, 75, 1691, 12,
	79, 1688, 35, 86, 143, 1687, 51, 157, 58, 27,
	74, 105, 1686, 1683, 1682, 90, 1680, 102, 68, 1679,
	1678, 69, 1677, 142, 145, 1674, 1672, 153, 1671, 1669,
	1668, 158, 1661, 1659, 167, 1658, 13, 38, 61, 30,
	115, 110, 85, 108, 1657, 16, 1656, 1586, 697, 841,
	19, 52, 37, 80, 50, 53, 28, 1655, 1647, 109,
	1646, 1645, 1644, 1643, 1642, 66, 1639, 1638, 93, 147,
	26, 31, 54, 89, 25, 78, 88, 126, 156, 112,
	1635, 1634, 123, 1633, 96, 1632, 1631, 978, 128, 1628,
	1627, 1626, 659, 652, 357, 124, 1625, 1623, 353, 261,
	1621, 1618, 122, 1616, 1615, 150, 208, 22, 1613, 119,
	1608, 95, 1606, 0, 107, 44, 1602, 127, 77, 1601,
	1594, 1588, 1585, 32, 3, 9, 4, 7, 5, 34,
	23, 1584, 1582, 130, 97, 60, 1581, 149, 1580, 1576,
	1572, 46, 1571, 15, 1566, 17, 1565, 1564, 8, 1,
	148, 1560, 103, 1555, 1447, 1554, 151, 1553, 1552, 1459,
	59, 82,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 92, 92, 91, 91,
	94, 94, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 183, 183, 182, 18, 157,
	157, 19, 19, 19, 19, 20, 116, 116, 21, 21,
	21, 21, 22, 26, 250, 250, 250, 254, 254, 255,
	255, 256, 256, 256, 256, 256, 256, 256, 252, 252,
	29, 29, 29, 29, 29, 135, 131, 131, 133, 133,
	133, 133, 55, 130, 130, 130, 130, 132, 132, 132,
	132, 206, 205, 205, 211, 211, 211, 70, 70, 70,
	70, 70, 71, 71, 71, 204, 204, 204, 204, 212,
	212, 212, 212, 212, 212, 72, 72, 72, 210, 210,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 251, 251, 253, 253, 31, 31, 9, 9, 10,
	10, 73, 73, 74, 74, 138, 138, 138, 138, 75,
	75, 47, 47, 47, 137, 221, 221, 222, 222, 222,
	222, 222, 222, 223, 223, 223, 223, 223, 223, 223,
	219, 219, 220, 217, 217, 218, 218, 218, 218, 257,
	257, 136, 136, 78, 78, 226, 226, 226, 226, 224,
	224, 224, 224, 224, 227, 225, 228, 228, 228, 228,
	228, 169, 169, 169, 33, 11, 53, 53, 12, 8,
	8, 120, 120, 82, 82, 174, 174, 174, 63, 63,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 121, 121, 122, 122, 24, 28,
	32, 32, 32, 32, 32, 259, 259, 59, 59, 59,
	59, 60, 60, 134, 134, 134, 134, 134, 54, 7,
	7, 49, 49, 50, 50, 51, 51, 52, 52, 260,
	260, 23, 23, 23, 23, 23, 66, 66, 127, 127,
	127, 129, 129, 128, 128, 128, 106, 106, 34, 87,
	87, 96, 96, 97, 97, 180, 98, 98, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 234, 234, 234,
	237, 237, 233, 235, 235, 236, 236, 258, 258, 107,
	107, 107, 77, 76, 76, 80, 80, 79, 81, 81,
	173, 104, 104, 104, 104, 123, 124, 124, 125, 125,
	126, 126, 103, 103, 154, 154, 39, 39, 86, 86,
	88, 88, 145, 145, 146, 146, 144, 144, 144, 175,
	175, 175, 175, 175, 172, 172, 176, 176, 176, 176,
	176, 176, 170, 170, 170, 170, 171, 171, 181, 181,
	110, 110, 110, 110, 108, 108, 109, 109, 177, 177,
	177, 177, 105, 105, 178, 178, 178, 139, 139, 184,
	184, 184, 85, 85, 85, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 186, 186,
	186, 186, 188, 188, 188, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 189,
	189, 196, 196, 197, 197, 198, 199, 190, 190, 191,
	191, 192, 193, 200, 200, 200, 200, 202, 202, 194,
	194, 194, 194, 194, 195, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 118,
	118, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 229, 229, 229, 229,
	229, 229, 229, 231, 231, 232, 232, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 238, 238, 239, 239, 241, 241,
	242, 242, 243, 244, 244, 244, 245, 246, 246, 240,
	240, 247, 247, 247, 248, 248, 249, 249, 249, 249,
	249, 159, 159, 159, 160, 160, 161, 167, 167, 167,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 61, 61, 61, 61,
	61, 93, 93, 156, 156, 155, 155, 155, 158, 158,
	111, 111, 201, 201, 201, 201, 201, 201, 201, 112,
	112, 112, 119, 113, 113, 114, 114, 114, 114, 114,
	114, 151, 152, 115, 115, 115, 153, 153, 162, 166,
	166, 165, 164, 164, 163, 163, 142, 142, 142, 142,
	143, 143, 141, 140, 99, 99, 100, 100, 261, 261,
	168, 168, 101, 101, 102, 95, 95, 179, 179, 179,
	179, 89, 89, 68, 68, 90, 90, 64, 64, 67,
	67, 65, 65, 65, 65, 83, 83, 84, 84, 62,
	62, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 203, 203, 203, 56, 56, 56, 57, 57,
	58, 58, 208, 208, 208, 209, 209, 209, 209, 207,
	207, 207, 207, 207, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	6, 3, 1, 5, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 6, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 2, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	1, 0, 2, 2, 1, 2, 0, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -236, 92, 100, 122, 198,
	99, 85, 116, 212, 220, -35, -37, 228, -135, 229,
	34, 238, 58, 95, 214, 209, 260, 66, -234, -38,
	-36, 308, 283, 289, 223, -39, 246, 275, 311, 246,
	130, 78, 278, -64, -56, 4, -213, -215, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 222, 225, 226, 228, 229, 231, 234,
	237, 238, 239, 242, 240, 236, 245, 247, 248, 249,
	256, 260, 261, 262, 263, 266, 267, 268, 270, 272,
	273, 274, 279, 284, 285, 286, 287, 28, 35, 36,
	37, 38, 40, 41, 44, 45, 49, 50, 51, 53,
	80, 82, 83, 98, 101, 102, 108, 118, 120, 125,
	126, 135, 136, 137, 138, 140, 151, 174, 176, 185,
	189, 195, 197, 203, 216, 224, 232, 233, 241, 243,
	251, 252, 253, 257, 258, 275, 276, 87, 134, 268,
	267, 78, 130, 246, 278, -16, 308, -27, -6, -14,
	-4, -23, -34, -13, -30, -17, -31, -15, 23, -207,
	4, -213, -215, -214, -216, 55, 67, 115, 133, 127,
	142, 144, 152, 154, 166, 186, 188, 213, 230, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	103, 104, 105, 111, 113, 114, 116, 119, 121, 128,
	130, 132, 139, 141, 147, 150, 155, 157, 158, 171,
	173, 179, 180, 181, 182, 183, 194, 199, 206, 211,
	223, 227, 235, 244, 246, 250, 254, 255, 259, 264,
	265, 269, 271, 277, 278, 280, 281, 282, 283, -56,
	-56, -56, 198, 22, -254, 22, -255, -256, 66, 92,
	116, 223, 134, 87, 267, -254, -60, 220, -56, -131,
	156, 226, 216, 256, -132, -130, -206, 251, 165, -91,
	-56, 4, 22, 78, 57, 79, 117, 130, 131, 62,
	63, 146, 247, 251, 256, 66, 270, -259, 256, 256,
	-259, -259, -59, 256, 254, -60, -258, 246, 246, 269,
	278, -120, 78, 265, -36, -38, -37, -79, -80, 264,
	139, 97, 183, -35, -37, -234, -237, 204, -233, -56,
	-237, -76, -77, 22, 89, 312, -177, -64, 181, -102,
	308, -3, -177, 125, -64, -67, 125, -64, -56, -177,
	125, 114, 308, -99, -142, -141, -140, 306, 310, 114,
	141, 141, -178, -177, -56, 125, -68, 125, -67, -92,
	125, -91, -92, 125, -183, -182, -209, 4, -213, -215,
	-214, 275, 246, 130, -157, 308, -116, 308, -56, 22,
	180, 312, 180, -56, -131, 51, -131, 308, -133, -54,
	-55, 143, 200, 254, 293, 114, 287, -72, 5, 84,
	-94, 310, 114, -251, 180, 114, 114, 114, 114, 114,
	114, 287, 143, 200, 219, 246, 278, -134, -54, -55,
	-134, 254, -60, -105, -177, -91, 125, -56, -91, 130,
	-56, 125, -79, -80, -104, -123, -124, 155, 179, -107,
	22, 89, -107, -107, 43, 309, 309, 312, -237, -84,
	308, -95, -179, -147, 301, -149, 299, 300, 305, 171,
	288, -159, -64, -150, 313, 9, 308, -162, -231, -37,
	98, 29, -160, -161, 216, -56, 7, 8, 5, 6,
	-62, -186, -195, 259, 103, 173, 47, -229, -230, 4,
	-213, -208, -187, -197, -191, -194, 140, 55, 71, 74,
	72, 75, 227, 269, 48, 28, 101, 102, 189, 195,
	243, 257, 258, 125, 174, 126, 53, 118, 151, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 108,
	135, 136, 137, 138, 176, 203, 232, 241, 252, 253,
	276, -214, -198, -199, -192, -193, -200, -95, -102, 301,
	-64, 308, -101, -168, -147, 84, -44, 207, -43, 21,
	23, 92, 273, 98, 236, 236, 207, 98, 313, 207,
	207, 98, 239, 309, -89, -64, -142, -147, -143, -207,
	301, -178, -66, -64, -66, 228, -56, 30, 98, -46,
	312, 46, 210, 98, -46, 312, 98, -46, 98, 309,
	312, -177, 125, -67, 30, -156, -184, -185, -187, -196,
	-190, -194, -195, 39, 45, 44, 249, 224, 233, 37,
	135, 136, 137, 138, 232, 36, 203, 108, 91, 83,
	82, 176, 41, 40, -198, -199, -192, -193, 80, 252,
	253, 140, 38, 50, 49, 276, 241, -93, -147, -250,
	-90, 246, 78, -65, -56, 301, -256, -250, 30, -93,
	312, 312, 153, -71, 159, 170, 123, -205, 84, -211,
	-204, -169, 9, 259, 103, 180, -210, 8, 300, -203,
	-209, 5, 7, 299, -205, 84, 69, -212, 5, 4,
	-195, -169, 84, 156, 310, -207, -206, -253, 111, -250,
	-206, -206, -206, -206, -206, -56, 153, -206, -206, 312,
	312, -60, -46, 312, 308, -78, 171, -235, 283, -78,
	308, -57, 125, -56, -235, 171, -104, -124, -123, -125,
	-147, 22, -147, -149, -36, -36, -36, -81, -173, -147,
	-233, 30, -83, -56, -86, 312, 114, 10, 11, 54,
	33, 299, 300, 301, 302, 109, 303, 296, 297, 298,
	295, 291, 292, 293, 60, 160, 218, 13, 14, 15,
	26, 182, 154, 288, 127, 230, 305, 16, 17, 18,
	142, 35, 128, -61, 30, 4, -69, -147, -147, -147,
	-147, -147, 188, 7, -100, -37, -147, -93, -99, -37,
	-37, -155, 306, 308, -99, 308, 5, 5, 308, -163,
	-147, -238, 284, 111, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 197, -202, 279, -202, -202, -188, 308, -188, -189,
	308, -188, 285, 289, 308, -86, -64, 312, 309, 312,
	254, -121, 62, 56, -137, 125, 56, -217, -56, 62,
	-218, 52, 265, 199, 113, -121, 62, -121, 62, 62,
	-177, 33, 33, 254, -67, -56, 254, 254, -177, 114,
	309, 312, 307, 316, -139, 281, -127, -27, 308, 84,
	30, -127, -96, -97, -180, -98, -64, 308, -56, -56,
	-67, -68, -91, -92, -92, -16, -182, 98, -19, -27,
	-23, -34, -13, 309, 312, -85, 29, -117, 308, 286,
	163, 81, 124, 162, -118, 222, 309, 312, 254, 312,
	-90, -83, -141, -140, 114, 256, 309, -55, -54, -70,
	202, 234, 208, 225, 312, 8, 7, 7, 5, -207,
	-252, -56, -55, -54, -177, -73, -83, -74, -56, -138,
	-137, -219, -220, -217, 130, 265, 104, 30, 98, -53,
	193, 30, 180, 171, -49, 248, 98, -126, 216, 217,
	312, -42, 31, 88, 308, 312, 309, -139, -179, -88,
	-175, -177, -64, -37, -176, 308, -184, -184, -91, 251,
	-147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
	-147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
	-147, -147, 154, 127, 230, 35, 128, -147, 254, -147,
	-147, -147, -147, 173, 171, 259, 103, 266, 89, 177,
	-261, 244, 32, -153, -37, 308, -167, 27, 235, 22,
	-207, -159, 216, 308, -142, 309, 312, -93, -158, 307,
	-155, -93, 309, 309, -93, 277, 22, 89, 301, -117,
	7, -166, -165, 280, -239, 106, 119, 308, 309, 309,
	-147, -147, -111, -201, -93, 4, 286, 163, 81, 124,
	162, 222, -111, -112, -147, -93, -113, -148, -149, 299,
	300, 305, 308, 216, -114, -147, -93, -147, 42, 150,
	255, -115, -147, 114, -93, -147, -147, -147, -93, -93,
	-93, 308, 7, 7, 251, 251, 7, -139, 309, -168,
	-43, -64, -56, -56, 171, -137, 125, -48, 171, -184,
	-56, 308, 308, 145, 145, -56, -56, 125, -56, 125,
	-56, -56, -44, 207, 308, 308, -56, 207, -56, -64,
	207, 239, 114, -64, -143, -147, -106, 211, -147, -106,
	-129, 180, -89, 275, -56, 211, -87, 312, 114, 293,
	-89, -46, -46, -46, -177, -184, 306, 306, 7, 254,
	254, 254, 254, 308, -147, -252, -65, -252, -54, 263,
	59, 202, -211, -117, 312, 309, 309, 312, -57, 130,
	-57, -27, -91, 5, -27, -64, 98, -50, 94, -260,
	293, -56, -173, -19, -56, -103, 119, -181, 312, 290,
	67, -110, 144, 166, 115, 152, 213, 133, -144, 313,
	308, -172, 289, -37, -176, -175, 287, -147, -147, 254,
	-261, 244, -153, -147, 173, 259, 103, 266, 89, 177,
	114, 308, -148, -148, -93, -37, 308, 308, -93, -100,
	-147, 307, 307, 312, 309, -80, 312, -79, -147, -93,
	-93, 309, 309, -164, -165, 93, -147, -244, 187, 308,
	308, -147, 30, 312, 309, 114, 309, 309, -119, 194,
	309, 10, 11, 299, 300, 301, 302, 109, 303, 296,
	297, 298, 295, 291, 292, 293, 60, 160, 218, 13,
	14, 15, 142, 128, -148, -148, -148, -93, 308, 309,
	-151, -152, 114, 111, 30, -115, -115, -115, 309, 114,
	-93, 312, 312, 312, 309, 309, 309, 7, 309, 312,
	309, 287, 287, 309, -103, 254, 254, 98, 171, 272,
	-221, -218, -147, -83, 308, 308, -41, 92, 228, -122,
	98, -46, 98, -46, 254, -121, 62, -93, -93, 254,
	254, 239, 307, -95, 211, 61, 309, -95, -139, -97,
	-88, -168, 309, 307, 7, 7, 309, 163, 124, 162,
	-118, 162, -118, -118, 7, -56, -75, 129, -138, 308,
	-57, 308, 308, -78, 308, -56, -51, 149, -260, 4,
	-235, 309, -154, 121, 43, -175, 177, 144, 144, -175,
	-110, 144, -108, 186, -108, -108, -172, -207, 314, -93,
	-171, -170, 30, -56, 184, 309, -147, -147, -148, -148,
	114, 308, -147, -156, 26, 26, 309, -147, -93, 309,
	312, 309, -155, 309, 277, -80, -80, -80, 5, 95,
	-147, 250, -245, -56, 308, 281, -79, 309, -184, -184,
	-147, -151, -147, -184, -184, -148, -148, -148, -148, -148,
	-148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
	-148, -148, -148, -148, 89, 171, 177, -148, 312, -93,
	309, -152, -151, -147, -147, -184, 309, 309, 309, -93,
	-147, -147, -147, 309, 7, -154, -56, -56, -137, 98,
	-222, 62, -223, 54, 104, 66, 171, 173, 265, 199,
	52, 84, 206, 309, 309, -83, -83, 171, 84, 171,
	84, 77, 261, -56, -56, -64, -56, -56, 309, 309,
	-56, -64, -95, -128, 308, 180, -27, -106, 293, 307,
	307, 309, 128, -82, -174, -56, -232, 308, -229, -230,
	-62, 308, -83, -73, 30, -82, 180, -52, 148, -260,
	5, -49, -241, 282, -147, -93, 245, -175, -175, -109,
	271, 180, 144, -175, -171, -146, -145, 112, 169, 309,
	-56, 308, -172, 26, 26, -147, -156, 309, -147, -147,
	309, 309, -147, 5, -147, 309, 309, 309, -147, -246,
	-56, -147, 309, 309, 309, -152, 114, 89, 177, 308,
	-147, 309, 309, 312, 309, 309, 309, -241, -137, -56,
	-91, -56, 104, 125, 173, 145, 308, -148, -64, -136,
	-257, 65, 242, 309, 309, 173, 173, -147, -184, -46,
	-46, 254, 254, 90, -83, 62, -102, -37, 308, 190,
	309, 312, -63, -99, 54, -63, -147, 308, -82, 309,
	309, -27, 309, -64, -260, 5, -50, -242, -243, -56,
	251, -109, 308, -147, -175, 312, 315, 293, -172, 308,
	-83, -170, -147, -147, 309, 309, -80, -240, 192, 309,
	-148, 114, 308, -156, 309, -147, -223, -57, 171, -147,
	-58, 308, -75, 308, 206, -45, 54, -56, -56, 267,
	172, 309, -56, -56, -136, -174, -42, -91, -42, 309,
	-93, 309, -75, -136, 308, 5, -51, 312, 30, -150,
	-62, -56, -83, -145, -207, -171, -83, 309, 309, -80,
	43, -148, -156, 309, 309, 98, 309, -226, 161, -56,
	-83, -64, -40, 271, -91, 228, -139, 308, -75, -63,
	-80, -136, -75, -82, -52, -243, -245, 308, 309, 309,
	-247, 201, 217, -93, 309, 104, -224, -227, -225, 180,
	115, 191, 231, 309, 309, -78, -147, -96, -83, -42,
	309, -75, 309, -93, 309, -248, -249, 35, 262, 69,
	-147, -248, -56, -225, 180, -227, 180, 267, 87, -226,
	-139, 309, -136, -80, -249, 196, 110, 216, 196, 110,
	-228, 168, 210, 46, 228, -228, -224, -47, 46, 210,
	-75, 309, 26, 20, 173, 84, -249,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 368, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 398, 282, 395, -2,
	406, 0, 0, 0, 404, 382, 0, 0, -2, 0,
	0, 0, 0, 0, 837, 865, 866, 867, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 0, 200,
	879, 880, 881, 882, 883, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 100,
	107, 108, 952, 110, 0, 117, 118, 119, 121, 122,
	123, 124, 125, 126, 127, 0, 309, 967, 322, 130,
	930, 971, 1040, 986, 137, 147, 0, 1046, -2, 151,
	78, 180, 181, 182, 0, 184, 202, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 199, 327, 315, 327,
	312, 313, 314, 317, 0, 308, 0, 397, 0, 0,
	0, 0, 0, 281, -2, 378, 379, -2, 0, 401,
	401, 401, 0, 0, 379, 0, 387, 956, 390, 848,
	388, 0, 0, 403, 402, 0, 383, 468, 0, 426,
	0, 2, 0, 1025, 468, 0, 1025, 840, 0, 0,
	1025, 0, 0, 838, 814, 806, 807, 811, 0, 0,
	0, 0, 0, 474, 68, 1025, 51, 1025, 833, 51,
	1025, 76, 51, 1025, 0, 95, 97, 875, 876, 877,
	878, 1051, 0, 0, 0, 0, 105, 0, 109, 111,
	0, 0, 0, 321, 131, 1014, 133, 0, 136, 138,
	139, 0, 0, 0, 0, 0, 0, 150, 175, 176,
	79, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 195, 196, 0, 0, 310, 323, 324,
	311, 0, 319, 51, 472, 254, 1025, 394, 254, 869,
	394, 1025, -2, 0, 374, 413, 414, 0, 0, 0,
	399, 400, 0, 0, 0, 370, 371, 0, 389, 0,
	0, 429, 825, 829, 830, 561, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 816, 0, 657, 658, 659,
	1019, 0, 664, 665, 1040, 837, 851, 852, 853, 854,
	0, 0, 0, 859, 860, 861, 805, 705, 674, -2,
	-2, 849, 498, 499, 500, 501, -2, 1053, 678, 680,
	682, 683, 684, 685, 0, 1003, 1020, 1021, 1036, 1037,
	1045, 1049, 1050, 1025, 1033, 1026, 1015, 1023, 1032, 908,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 874, 523, 524, 529, 530, 532, 429, 427, 469,
	470, 0, 0, 822, 820, 821, 28, 305, 30, 0,
	305, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 831, 815, 810, 0, 812,
	813, 478, 0, 346, 0, 0, 475, 0, 0, 70,
	0, 49, 50, 0, 72, 0, 0, 74, 0, 396,
	0, 0, 1025, 0, 396, 0, 763, 484, 485, 486,
	487, 488, 558, 491, 492, 493, 494, 495, 496, 497,
	505, 506, 507, 508, 509, 510, 511, 520, 0, 504,
	504, 504, 517, 518, 521, 522, 527, 528, 539, 540,
	542, 544, 538, 538, 538, 535, 536, 0, 761, 0,
	114, 0, 903, 835, 841, 842, 120, 0, 0, 0,
	0, 0, 0, 142, 162, 163, 164, 143, 145, 152,
	154, 155, 156, 165, 166, 167, 168, 271, 0, 273,
	178, 179, 862, 0, 144, 146, 148, 149, 169, 170,
	0, 172, 173, 174, 0, 80, 183, 185, 0, 201,
	186, 187, 188, 189, 190, 191, 194, 197, 198, 0,
	0, 318, 274, 0, 212, 0, 0, 277, 393, 0,
	0, 0, 1025, 868, 332, 0, 377, 411, 412, 415,
	418, 419, 416, 561, 384, 385, 386, 407, 408, 292,
	391, 0, 0, 845, 478, 0, 0, 0, 0, 0,
	0, 740, 741, 742, 743, 744, 745, 748, 749, 746,
	747, 750, 751, 752, 0, 0, 0, 753, 754, 755,
	0, 0, 757, 0, 759, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 828, 756, 566, 567, 568,
	590, 591, 0, 654, 655, -2, 761, 0, 660, 661,
	662, 663, 0, 0, -2, 0, 856, 558, 0, 0,
	804, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 784, 790, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 526, 537, 534, 533, 515, 0, 514, 512,
	0, 516, 0, 0, 0, 478, 0, 0, 824, 0,
	0, 0, 0, 304, 32, 1025, 0, 53, 0, 0,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 808, 811, 357, 0, 357, 348, 0, 0,
	0, 344, 360, 361, 363, 364, 0, 0, 476, 69,
	834, 51, 77, 51, 51, 83, 96, 0, 98, 101,
	102, 103, 104, 99, 0, 479, 481, 489, 0, 545,
	546, 547, 548, 549, 550, 559, 106, 0, 0, 0,
	115, 116, 843, 844, 0, 0, 135, 140, 141, 328,
	0, 159, 0, 161, 0, 272, 864, 863, 558, 81,
	203, 128, 325, 326, 473, 0, 0, 211, 845, 213,
	215, 216, 217, 218, 869, 0, 869, 0, 0, 275,
	0, 0, 0, 0, 334, 340, 0, 417, 420, 421,
	0, 410, 290, 291, 396, 0, 847, 423, 826, 459,
	430, 438, 468, 445, 442, 0, 562, 563, 564, 0,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	-2, -2, -2, 582, 583, 584, -2, -2, -2, 588,
	589, -2, 758, 760, 0, 819, 0, -2, 0, 598,
	-2, -2, -2, 602, 0, 605, 607, 609, 0, 0,
	0, 0, 818, 619, 796, 0, 0, 737, 738, 739,
	827, 604, 0, 0, 817, 816, 0, 0, 0, 767,
	768, 0, -2, 666, 406, 0, 0, 0, 0, 857,
	0, 803, 799, 0, 715, 0, 0, 0, 679, 681,
	0, 0, 0, 0, 771, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 761, 781, 0, 0, 623, 0,
	0, 0, 0, 1040, 0, 761, 789, 0, 0, 0,
	0, 0, 761, 0, 795, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 471, 823,
	31, 294, 0, 0, 0, 34, 1025, 42, 0, 226,
	0, 0, 0, 0, 0, 307, 43, 1025, 51, 1025,
	51, 44, 29, 305, 0, 0, 298, 0, 293, 296,
	0, 59, 0, 832, 0, 810, 67, 0, 477, 341,
	342, 0, 0, 350, 347, 0, 478, 0, 0, 0,
	0, 71, 73, 75, 0, 764, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 112, 836, 113, 132, 157,
	158, 160, 153, 171, 0, 220, 253, 0, 0, 869,
	0, 209, 254, 276, 278, 0, 0, 336, 340, 0,
	339, 394, 409, 0, 846, 425, 0, 428, 0, 0,
	0, 0, 0, 0, 465, 465, 465, 463, 445, 0,
	0, 457, 0, -2, 442, 0, 0, -2, -2, 0,
	0, 0, 620, -2, 603, 606, 608, 610, 0, 0,
	0, 0, 0, 0, 0, 621, 0, 0, 0, 656,
	762, 765, 766, 0, -2, 0, 0, 405, 406, 406,
	406, 672, 0, 0, 800, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 688, 0, 689, 690, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 627, 628, 0, 0, 692,
	787, 788, 0, 0, 0, 0, 0, 0, 697, 0,
	794, 0, 0, 0, 701, 702, 703, 0, 502, 0,
	519, 541, 543, 531, 425, 0, 0, 0, 0, 52,
	224, 243, 0, 0, 0, 0, 36, 0, 0, 0,
	0, 40, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 60, 809, 356, 0, 355, 0, 345, 357, 362,
	359, 365, 0, 482, 0, 0, 490, 551, 552, 553,
	554, 555, 556, 557, 0, 129, 207, 0, 214, 0,
	0, 0, 212, 0, 0, 0, 338, 340, 0, 331,
	332, 392, 709, 0, 0, 431, 0, 0, 0, 0,
	0, 0, 460, 464, 461, 462, 457, 436, 0, 0,
	441, 456, 0, 455, 444, -2, 565, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 797, 0, 0, 732,
	0, -2, 769, 667, 0, 0, 0, 0, 858, 798,
	802, 0, 713, 714, 718, 0, 0, 677, 0, 0,
	770, 780, 782, 624, 625, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, -2, -2, -2, 642, 643,
	644, -2, -2, -2, 0, 0, 0, 783, 0, 0,
	735, 785, 786, 791, 792, 0, 694, 695, 696, 793,
	0, 0, 0, 525, 0, 709, 300, 302, 33, 0,
	225, 0, 228, 0, 0, 0, 0, 234, 235, 0,
	0, 0, 0, 245, 252, 0, 0, 0, 48, 0,
	0, 306, 0, 51, 51, 295, 0, 0, 205, 206,
	299, 297, 343, 0, 0, 0, 349, 358, 0, 483,
	480, 560, 0, 0, 283, 289, 289, 0, 675, 676,
	0, 0, 0, 0, 0, 0, 0, 329, 340, 0,
	333, 334, 380, 0, 424, 422, 0, 447, 0, 449,
	0, 0, 0, 451, 439, 0, 434, 0, 433, 445,
	453, 0, 0, 0, 0, -2, 0, 613, -2, -2,
	622, 731, 762, 855, 406, 668, 670, 671, 801, 720,
	717, 0, 704, 686, 687, 779, 0, 0, 0, 0,
	762, 734, 693, 0, 699, 700, 503, 381, 35, 0,
	229, 230, 869, 0, 233, 236, 0, 238, 871, 220,
	0, 249, 250, 247, 0, 37, 38, 47, 55, 39,
	45, 0, 0, 0, 0, 0, 366, 367, 0, 0,
	252, 0, 292, 850, 0, 292, 0, 0, 0, 242,
	220, 210, 252, 0, 0, 335, 336, 708, 710, 0,
	0, 448, 0, 467, 450, 0, 437, 0, 457, 0,
	0, 443, -2, -2, 614, 733, 0, 406, 0, 706,
	-2, 0, 0, 0, 736, 0, 227, 231, 0, 0,
	258, 0, 246, 0, 0, 57, 0, 301, 303, 0,
	352, 478, 354, 0, 220, 284, 285, 288, 286, 289,
	406, 252, 208, 220, 0, 337, 338, 0, 0, 458,
	0, 0, 0, 435, 432, 440, 0, 454, 669, 723,
	0, -2, 0, 650, 698, 0, 237, 263, 0, 0,
	0, 254, 41, 0, 54, 0, 353, 0, 240, 292,
	0, 220, 279, 0, 330, 711, 712, 0, 466, 452,
	0, 0, 0, 719, 651, 0, 239, 259, 260, 0,
	255, 256, 257, 870, 251, 258, 56, 478, 0, 287,
	667, 241, 252, 406, 716, 721, 724, -2, 989, 900,
	0, 722, 232, 261, 0, 262, 0, 0, 0, 263,
	351, 223, 220, 0, 0, 726, 727, 728, 729, 730,
	264, 0, 267, 268, 0, 265, 248, 219, 221, 222,
	280, 0, 0, 266, 269, 270, 725,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 297, 3, 303, 298, 3,
	308, 309, 301, 299, 312, 300, 310, 302, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 316, 311,
	291, 293, 292, 3, 313, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 306, 3, 307, 296, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 314, 295, 315, 305,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 294, 57634, 304,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:731
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:835
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:858
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:931
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:935
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1065
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1324
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1442
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1860
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1871
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1991
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1995
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2049
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2050
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2230
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2249
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2256
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			return unimplemented(sqllex)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2564
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2568
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2572
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2576
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = false
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = true
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &From{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = true
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = false
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.str = astFullJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.str = astLeftJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.str = astRightJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.str = astInnerJoin
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2966
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2967
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3066
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3080
		{
			return unimplemented(sqllex)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3136
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = nil
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3257
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3289
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3329
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3367
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			return unimplemented(sqllex)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3377
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3412
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			return unimplemented(sqllex)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3638
		{
			op := sqlDollar[3].union.cmpOp()
			subOp, ok := sqlDollar[2].union.op().(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("op %s (array) requires operator to yield boolean", op))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			op := sqlDollar[3].union.cmpOp()
			subOp, ok := sqlDollar[2].union.op().(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("op %s (array) requires operator to yield boolean", op))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOp,
				Left:        sqlDollar[1].union.expr(),
				Right:       &ParenExpr{Expr: sqlDollar[5].union.expr()},
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3829
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3885
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3886
		{
			return unimplemented(sqllex)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3909
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			return unimplemented(sqllex)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			return unimplemented(sqllex)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3929
		{
			return unimplemented(sqllex)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
			return unimplemented(sqllex)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3948
		{
			return unimplemented(sqllex)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4022
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4023
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4026
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4027
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = Window(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.str = ""
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4115
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4120
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			return unimplemented(sqllex)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = Any
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = Some
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = All
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = Plus
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = Minus
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = Mult
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = Div
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = FloorDiv
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = Mod
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = Bitand
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = Bitor
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = Bitxor
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = Bitxor
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = LT
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = GT
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = EQ
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = LE
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = GE
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = NE
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = Like
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = NotLike
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = ILike
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = NotILike
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4493
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4653
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4689
		{
			return unimplemented(sqllex)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = DNull
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.str = ""
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
