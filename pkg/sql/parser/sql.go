// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:308
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const SAVEPOINT = 57561
const SEARCH = 57562
const SECOND = 57563
const SELECT = 57564
const SERIAL = 57565
const SERIALIZABLE = 57566
const SESSION = 57567
const SESSION_USER = 57568
const SET = 57569
const SHOW = 57570
const SIMILAR = 57571
const SIMPLE = 57572
const SMALLINT = 57573
const SMALLSERIAL = 57574
const SNAPSHOT = 57575
const SOME = 57576
const SPLIT = 57577
const SQL = 57578
const START = 57579
const STDIN = 57580
const STRICT = 57581
const STRING = 57582
const STORING = 57583
const SUBSTRING = 57584
const SYMMETRIC = 57585
const SYSTEM = 57586
const TABLE = 57587
const TABLES = 57588
const TEMPLATE = 57589
const TEXT = 57590
const THEN = 57591
const TIME = 57592
const TIMESTAMP = 57593
const TIMESTAMPTZ = 57594
const TO = 57595
const TRAILING = 57596
const TRANSACTION = 57597
const TREAT = 57598
const TRIM = 57599
const TRUE = 57600
const TRUNCATE = 57601
const TYPE = 57602
const UNBOUNDED = 57603
const UNCOMMITTED = 57604
const UNION = 57605
const UNIQUE = 57606
const UNKNOWN = 57607
const UPDATE = 57608
const UPSERT = 57609
const USER = 57610
const USERS = 57611
const USING = 57612
const VALID = 57613
const VALIDATE = 57614
const VALUE = 57615
const VALUES = 57616
const VARCHAR = 57617
const VARIADIC = 57618
const VIEW = 57619
const VARYING = 57620
const WHEN = 57621
const WHERE = 57622
const WINDOW = 57623
const WITH = 57624
const WITHIN = 57625
const WITHOUT = 57626
const YEAR = 57627
const ZONE = 57628
const NOT_LA = 57629
const WITH_LA = 57630
const AS_LA = 57631
const POSTFIXOP = 57632
const UMINUS = 57633

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4987

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	310, 27,
	-2, 395,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 368,
	180, 368,
	211, 368,
	308, 368,
	310, 368,
	-2, 378,
	-1, 59,
	1, 371,
	180, 371,
	211, 371,
	308, 371,
	310, 371,
	-2, 377,
	-1, 68,
	1, 27,
	310, 27,
	-2, 395,
	-1, 397,
	1, 177,
	310, 177,
	-2, 904,
	-1, 433,
	155, 405,
	179, 405,
	-2, 374,
	-1, 436,
	155, 404,
	179, 404,
	-2, 372,
	-1, 560,
	155, 404,
	179, 404,
	-2, 375,
	-1, 616,
	307, 840,
	-2, 833,
	-1, 617,
	307, 841,
	-2, 834,
	-1, 623,
	5, 540,
	307, 540,
	-2, 998,
	-1, 647,
	5, 506,
	-2, 972,
	-1, 648,
	5, 534,
	307, 534,
	-2, 974,
	-1, 649,
	5, 514,
	-2, 975,
	-1, 650,
	5, 513,
	-2, 976,
	-1, 651,
	5, 534,
	307, 534,
	-2, 979,
	-1, 652,
	5, 534,
	307, 534,
	-2, 980,
	-1, 653,
	5, 535,
	-2, 983,
	-1, 654,
	5, 500,
	-2, 984,
	-1, 655,
	5, 500,
	-2, 985,
	-1, 656,
	5, 516,
	-2, 989,
	-1, 657,
	5, 501,
	-2, 994,
	-1, 658,
	5, 502,
	-2, 995,
	-1, 659,
	5, 503,
	-2, 996,
	-1, 660,
	5, 504,
	-2, 997,
	-1, 661,
	5, 500,
	-2, 1001,
	-1, 662,
	5, 507,
	-2, 1006,
	-1, 663,
	5, 505,
	-2, 1009,
	-1, 664,
	5, 532,
	307, 532,
	-2, 1011,
	-1, 665,
	5, 536,
	-2, 1014,
	-1, 666,
	5, 538,
	-2, 1015,
	-1, 667,
	5, 531,
	307, 531,
	-2, 1019,
	-1, 919,
	97, 378,
	139, 378,
	155, 378,
	179, 378,
	183, 378,
	263, 378,
	-2, 652,
	-1, 927,
	307, 818,
	-2, 806,
	-1, 1132,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 575,
	-1, 1133,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 576,
	-1, 1134,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 577,
	-1, 1138,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 581,
	-1, 1139,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 582,
	-1, 1140,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 583,
	-1, 1143,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 588,
	-1, 1149,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 590,
	-1, 1152,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 595,
	-1, 1153,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 596,
	-1, 1154,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 597,
	-1, 1180,
	188, 724,
	-2, 727,
	-1, 1203,
	114, 740,
	307, 840,
	-2, 833,
	-1, 1204,
	114, 741,
	-2, 968,
	-1, 1205,
	114, 742,
	-2, 902,
	-1, 1206,
	114, 743,
	-2, 873,
	-1, 1207,
	114, 744,
	-2, 888,
	-1, 1208,
	114, 745,
	-2, 901,
	-1, 1209,
	114, 746,
	-2, 936,
	-1, 1362,
	97, 378,
	139, 378,
	155, 378,
	179, 378,
	183, 378,
	263, 378,
	-2, 453,
	-1, 1366,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 589,
	-1, 1367,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 591,
	-1, 1372,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 592,
	-1, 1391,
	188, 723,
	-2, 726,
	-1, 1560,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 593,
	-1, 1565,
	142, 0,
	-2, 607,
	-1, 1573,
	188, 725,
	-2, 728,
	-1, 1607,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 633,
	-1, 1608,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 634,
	-1, 1609,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 635,
	-1, 1613,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 639,
	-1, 1614,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 640,
	-1, 1615,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 641,
	-1, 1725,
	142, 0,
	-2, 608,
	-1, 1728,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 611,
	-1, 1729,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 613,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 612,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 614,
	-1, 1827,
	142, 0,
	-2, 642,
	-1, 1876,
	142, 0,
	-2, 643,
	-1, 1931,
	35, 0,
	127, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 971,
}

const sqlNprod = 1114
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25351

var sqlAct = [...]int{

	617, 1930, 1910, 1523, 1954, 1882, 1911, 1768, 1912, 1929,
	1007, 1015, 1104, 922, 1791, 437, 1807, 842, 591, 1079,
	1584, 1717, 1686, 607, 732, 1699, 1533, 1644, 609, 76,
	1711, 458, 1335, 615, 848, 268, 614, 1448, 1337, 270,
	76, 76, 76, 1083, 1685, 76, 1704, 1359, 76, 1078,
	1097, 1539, 579, 1358, 844, 45, 76, 1082, 924, 398,
	1447, 1394, 1349, 76, 76, 1284, 19, 76, 1047, 1113,
	76, 76, 76, 76, 1549, 473, 1112, 974, 680, 683,
	1190, 983, 918, 1343, 1016, 1165, 1116, 1162, 472, 444,
	58, 26, 15, 1229, 1031, 1040, 796, 77, 1073, 546,
	668, 865, 716, 7, 256, 701, 780, 705, 685, 589,
	474, 1200, 580, 475, 777, 807, 494, 442, 1232, 955,
	1009, 1086, 436, 488, 547, 22, 871, 58, 21, 261,
	260, 10, 9, 8, 6, 4, 271, 254, 487, 272,
	959, 262, 485, 447, 563, 562, 564, 385, 776, 798,
	794, 376, 445, 709, 1114, 567, 388, 481, 58, 1006,
	718, 1008, 545, 265, 59, 1814, 263, 441, 1815, 264,
	266, 258, 257, 259, 60, 874, 875, 718, 894, 895,
	896, 904, 905, 906, 1945, 1357, 1926, 1108, 1012, 1790,
	1918, 897, 1295, 1108, 1044, 695, 1908, 64, 877, 1037,
	908, 1903, 441, 424, 1108, 718, 1296, 1050, 1878, 464,
	733, 1037, 395, 873, 1872, 1858, 449, 1108, 1790, 876,
	66, 455, 1864, 434, 461, 891, 1848, 468, 1821, 1108,
	872, 1037, 1818, 433, 1346, 1108, 1801, 1045, 1798, 1790,
	1789, 1108, 1773, 1790, 1772, 1108, 267, 1108, 1620, 67,
	76, 76, 76, 76, 76, 1750, 497, 62, 1050, 1730,
	1572, 1727, 1050, 63, 1037, 1671, 1670, 1389, 1050, 1050,
	670, 1793, 1390, 1322, 882, 1046, 1043, 1656, 1569, 972,
	1108, 1050, 61, 1325, 1509, 1503, 1347, 1004, 1004, 57,
	1108, 1465, 901, 909, 1466, 1050, 1052, 1463, 874, 875,
	1050, 1462, 1461, 1391, 1050, 1050, 1050, 907, 1346, 1388,
	1174, 442, 490, 490, 1050, 36, 874, 875, 1103, 899,
	1067, 877, 575, 37, 719, 892, 64, 837, 1324, 1109,
	1393, 1108, 1108, 1059, 1048, 1049, 1050, 1036, 1050, 877,
	1037, 719, 876, 1003, 836, 38, 1004, 898, 891, 66,
	788, 971, 726, 498, 970, 727, 499, 787, 476, 510,
	876, 574, 477, 454, 476, 64, 68, 477, 477, 719,
	821, 495, 76, 530, 1965, 1418, 1419, 491, 67, 1928,
	1924, 1917, 1873, 893, 1799, 1755, 62, 76, 66, 1751,
	76, 76, 63, 1743, 902, 1742, 1741, 882, 1042, 1736,
	1677, 1735, 1734, 1295, 482, 1683, 1635, 470, 1630, 1629,
	872, 1011, 930, 1628, 1575, 882, 1558, 67, 1538, 1513,
	1041, 1511, 1682, 1470, 76, 722, 76, 1467, 76, 76,
	76, 1455, 76, 1446, 1417, 1414, 1413, 1411, 1399, 1681,
	1398, 1327, 717, 1323, 1246, 64, 1197, 76, 892, 561,
	61, 49, 900, 1196, 574, 888, 889, 890, 76, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 66, 903,
	840, 573, 76, 1170, 1424, 847, 1752, 1902, 270, 76,
	76, 76, 1586, 76, 1892, 1861, 675, 553, 1840, 556,
	1838, 1829, 518, 1811, 1796, 560, 1787, 67, 874, 875,
	1765, 1748, 76, 76, 674, 62, 893, 1720, 1693, 1564,
	76, 63, 76, 706, 1557, 1418, 1419, 519, 874, 875,
	1531, 877, 476, 497, 497, 1529, 477, 1676, 1528, 1526,
	61, 270, 76, 739, 76, 76, 76, 76, 76, 76,
	76, 877, 876, 1482, 76, 76, 513, 515, 703, 1481,
	76, 1445, 1407, 1406, 817, 1384, 1380, 1167, 76, 1311,
	1273, 1272, 876, 1260, 1171, 1259, 822, 1239, 1195, 1107,
	960, 550, 963, 967, 846, 271, 76, 953, 272, 76,
	552, 548, 887, 884, 885, 886, 878, 879, 880, 881,
	883, 721, 903, 952, 724, 570, 571, 882, 869, 576,
	471, 951, 583, 950, 878, 879, 880, 881, 883, 434,
	903, 874, 875, 851, 1424, 949, 927, 948, 1260, 433,
	498, 498, 947, 499, 499, 774, 946, 945, 271, 944,
	943, 272, 942, 482, 711, 786, 708, 669, 941, 940,
	939, 730, 938, 937, 928, 926, 61, 841, 892, 442,
	459, 578, 516, 506, 839, 876, 728, 504, 1499, 925,
	784, 1305, 783, 1420, 1421, 1422, 1423, 1425, 874, 875,
	676, 1304, 691, 1816, 811, 818, 524, 1338, 1680, 76,
	1297, 965, 826, 845, 1469, 966, 1468, 76, 1365, 540,
	525, 76, 935, 1705, 1191, 76, 76, 838, 1008, 76,
	1587, 250, 71, 1402, 956, 1291, 893, 853, 431, 855,
	854, 543, 921, 76, 931, 76, 76, 1476, 76, 867,
	1510, 76, 1888, 76, 76, 1941, 76, 1318, 497, 1942,
	977, 1664, 434, 1215, 1058, 434, 434, 676, 417, 423,
	1847, 422, 861, 544, 823, 862, 863, 827, 828, 829,
	830, 831, 418, 251, 70, 976, 834, 835, 686, 1652,
	687, 1493, 246, 1781, 1780, 988, 990, 686, 686, 687,
	687, 957, 958, 1497, 1496, 762, 1010, 1473, 1010, 76,
	76, 1472, 1025, 490, 1044, 490, 878, 879, 880, 881,
	883, 1653, 903, 256, 1368, 1310, 961, 1160, 1032, 1054,
	1309, 968, 964, 1308, 1307, 1422, 1423, 1425, 980, 247,
	1150, 1158, 903, 1051, 1000, 522, 58, 999, 261, 260,
	996, 58, 270, 1034, 1033, 498, 76, 1045, 499, 688,
	262, 976, 1014, 997, 1846, 1035, 549, 975, 688, 688,
	1809, 76, 76, 495, 1029, 993, 377, 1026, 76, 1027,
	1243, 1098, 265, 1001, 523, 263, 1023, 1072, 264, 266,
	258, 257, 259, 1024, 1028, 1046, 1043, 382, 252, 69,
	984, 1242, 378, 426, 76, 427, 1121, 76, 1648, 1156,
	1649, 1155, 1110, 1708, 502, 1161, 1164, 602, 1061, 1191,
	958, 957, 1055, 1053, 432, 1056, 379, 961, 428, 964,
	253, 72, 1164, 739, 739, 903, 1651, 429, 1941, 1498,
	1279, 270, 1060, 1654, 381, 1770, 74, 699, 692, 271,
	1484, 693, 272, 1890, 1048, 874, 875, 368, 369, 370,
	1317, 987, 387, 712, 1063, 399, 1120, 1076, 1048, 440,
	1065, 249, 248, 387, 1271, 1518, 1168, 1957, 877, 692,
	448, 448, 1491, 684, 74, 1951, 1066, 74, 74, 467,
	74, 1075, 903, 1914, 1285, 1064, 1157, 1962, 1515, 876,
	1501, 1650, 622, 1159, 76, 76, 76, 1101, 1102, 1245,
	76, 439, 1289, 76, 1178, 1111, 374, 1293, 1042, 76,
	76, 76, 76, 76, 1172, 1077, 718, 76, 703, 501,
	76, 76, 380, 703, 1048, 76, 1516, 267, 271, 689,
	739, 272, 76, 1285, 76, 1377, 1905, 986, 689, 689,
	1278, 76, 1841, 1253, 882, 441, 1187, 1169, 973, 1375,
	377, 76, 1906, 1275, 697, 1348, 696, 1319, 520, 1915,
	521, 1825, 954, 1147, 1175, 1179, 383, 1182, 1093, 1247,
	57, 382, 76, 76, 1210, 1485, 378, 1950, 76, 1788,
	1202, 1202, 1213, 917, 1224, 1048, 739, 442, 497, 1955,
	1236, 1237, 1238, 1270, 1405, 1287, 36, 1550, 1916, 441,
	379, 1248, 985, 1352, 37, 1118, 1119, 541, 76, 1913,
	76, 1771, 76, 1940, 1938, 521, 76, 1370, 381, 1373,
	76, 1355, 1698, 1378, 1095, 438, 38, 533, 565, 76,
	739, 1956, 1350, 1163, 1282, 511, 76, 1290, 76, 509,
	1353, 566, 1326, 1543, 1328, 1746, 1298, 1299, 1958, 1300,
	1301, 1963, 566, 1969, 1351, 1145, 1148, 74, 483, 74,
	399, 399, 761, 1949, 542, 762, 762, 1775, 1713, 1774,
	1313, 1330, 1418, 1419, 1616, 1763, 1315, 1329, 1316, 1314,
	719, 1332, 1144, 1663, 1320, 498, 1660, 1321, 499, 860,
	1662, 1835, 1475, 442, 1032, 1256, 1252, 1096, 793, 1514,
	852, 1354, 843, 1718, 1374, 1302, 380, 1364, 1883, 1352,
	565, 1376, 1257, 833, 789, 1534, 1348, 58, 1392, 1034,
	1033, 1700, 1341, 672, 1363, 1340, 64, 1355, 1764, 671,
	1714, 1035, 49, 1747, 791, 880, 881, 883, 1548, 903,
	1262, 1261, 1968, 442, 1545, 792, 1353, 1544, 520, 66,
	383, 480, 479, 439, 1371, 1369, 1617, 1146, 1712, 557,
	1719, 1524, 1618, 619, 1352, 874, 875, 1684, 1303, 1540,
	1761, 1424, 762, 1659, 1344, 1194, 1386, 1661, 67, 507,
	1193, 76, 1355, 1828, 1745, 1449, 62, 1563, 877, 1412,
	1401, 1762, 63, 1350, 512, 1379, 442, 399, 399, 1280,
	1480, 1353, 1057, 1002, 539, 538, 1383, 1354, 537, 876,
	1385, 255, 1257, 536, 535, 1351, 76, 76, 534, 531,
	478, 1450, 1434, 1396, 1397, 1505, 936, 825, 762, 1909,
	1880, 387, 1641, 74, 1489, 399, 555, 399, 1487, 558,
	1452, 1453, 1454, 76, 1474, 1334, 76, 1099, 76, 1471,
	1091, 1030, 725, 1581, 448, 76, 1418, 1419, 1500, 1444,
	1478, 723, 1354, 720, 882, 74, 1504, 76, 1530, 1492,
	1457, 76, 762, 715, 698, 694, 690, 76, 270, 74,
	1435, 76, 1527, 76, 1336, 1782, 74, 74, 74, 1488,
	713, 1490, 1942, 1507, 813, 1535, 1508, 1517, 1519, 1520,
	1506, 527, 1270, 1525, 568, 452, 1784, 3, 1502, 74,
	74, 1494, 1495, 1554, 1537, 892, 976, 781, 976, 781,
	1105, 992, 991, 1793, 989, 1566, 76, 1843, 1875, 739,
	1553, 1577, 1578, 1579, 1547, 373, 1542, 416, 1541, 399,
	1546, 781, 399, 399, 399, 399, 399, 832, 1551, 1552,
	572, 399, 399, 995, 994, 1424, 1865, 387, 739, 739,
	1420, 1421, 1422, 1423, 1425, 850, 1696, 739, 739, 1574,
	1094, 569, 453, 893, 1090, 271, 460, 1106, 272, 384,
	528, 1013, 1172, 448, 868, 785, 870, 731, 1039, 1588,
	419, 420, 1966, 76, 76, 76, 1593, 738, 1967, 1636,
	739, 1521, 76, 76, 1512, 1623, 1434, 1464, 76, 1306,
	76, 1244, 76, 76, 76, 1418, 1419, 76, 76, 874,
	875, 1657, 1658, 1570, 816, 815, 1241, 809, 804, 1624,
	1069, 1068, 761, 761, 1240, 1188, 1070, 1732, 1640, 1862,
	1804, 1702, 1580, 1637, 1331, 1071, 929, 1536, 425, 76,
	76, 1769, 886, 878, 879, 880, 881, 883, 375, 903,
	824, 532, 1904, 1738, 1435, 76, 76, 1216, 1694, 76,
	1692, 1404, 1806, 1824, 1674, 1692, 1192, 934, 76, 76,
	1691, 35, 1688, 1690, 1621, 1691, 74, 595, 1690, 1642,
	1678, 1679, 1477, 1701, 981, 1631, 1697, 1721, 74, 1695,
	1085, 1084, 74, 998, 819, 273, 74, 76, 1703, 1726,
	814, 803, 618, 739, 797, 806, 1201, 673, 620, 736,
	74, 621, 1021, 1022, 737, 74, 1722, 962, 74, 775,
	399, 399, 608, 399, 1709, 1710, 734, 493, 1715, 761,
	1590, 1591, 1345, 1428, 1420, 1421, 1422, 1423, 1425, 1595,
	1596, 1744, 1017, 1189, 1400, 932, 594, 600, 599, 1176,
	768, 503, 76, 1716, 76, 1356, 76, 76, 48, 517,
	393, 762, 394, 1288, 1675, 76, 820, 1100, 856, 1486,
	1707, 430, 1627, 1415, 505, 1222, 781, 870, 1214, 1211,
	551, 679, 1018, 529, 1294, 761, 1038, 76, 577, 864,
	762, 762, 451, 450, 1756, 1757, 1080, 526, 790, 762,
	762, 1062, 421, 739, 1837, 1092, 1783, 1255, 1961, 76,
	1842, 1792, 1483, 1794, 1887, 1759, 76, 65, 764, 25,
	23, 20, 1785, 1074, 763, 76, 18, 1692, 17, 761,
	16, 76, 762, 24, 14, 13, 12, 1691, 74, 1081,
	1690, 11, 34, 33, 32, 870, 1805, 31, 1797, 1803,
	1817, 1810, 30, 29, 5, 2, 1, 0, 735, 1823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 76, 1800, 399, 1216, 1216, 0, 1778, 1779,
	0, 0, 1839, 1830, 0, 0, 0, 739, 0, 0,
	0, 76, 76, 0, 1813, 76, 1833, 0, 0, 76,
	0, 0, 0, 0, 76, 0, 1834, 1851, 810, 805,
	0, 0, 0, 1859, 1853, 0, 0, 1855, 0, 1860,
	0, 0, 76, 1852, 1692, 0, 0, 270, 0, 0,
	1216, 1216, 1216, 0, 1691, 0, 0, 1690, 1866, 0,
	0, 1869, 1863, 1867, 0, 762, 1870, 0, 0, 76,
	1874, 76, 76, 442, 76, 0, 0, 738, 738, 0,
	1418, 1419, 1871, 1854, 1877, 1893, 0, 0, 739, 1891,
	1885, 74, 1250, 1251, 1897, 76, 1896, 981, 703, 0,
	1258, 1894, 0, 1895, 0, 1777, 1263, 1264, 1266, 1268,
	1269, 1900, 1792, 0, 1274, 1692, 1901, 1276, 74, 1899,
	0, 76, 74, 76, 0, 1691, 1381, 1382, 1690, 74,
	1925, 1292, 1921, 1889, 1919, 0, 1898, 1923, 74, 0,
	76, 0, 1922, 0, 271, 1857, 1935, 272, 74, 1939,
	1937, 0, 0, 0, 0, 1943, 0, 0, 0, 0,
	0, 0, 1944, 1948, 1946, 762, 0, 0, 0, 1074,
	781, 0, 0, 1947, 0, 1074, 1960, 1959, 0, 1424,
	1964, 1441, 1442, 1443, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1970, 0,
	0, 0, 1216, 1216, 0, 850, 0, 850, 0, 399,
	0, 1418, 1419, 74, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 1907, 0, 1342, 0, 0, 0,
	1434, 0, 0, 1361, 0, 74, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 761, 762,
	0, 1927, 0, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
	1216, 1216, 0, 1216, 0, 0, 0, 761, 761, 0,
	874, 875, 0, 0, 738, 0, 761, 761, 1435, 0,
	581, 581, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 877, 0, 0, 0, 0, 764, 764,
	1424, 0, 0, 0, 763, 763, 704, 0, 0, 761,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	762, 0, 0, 1561, 1562, 0, 0, 0, 0, 874,
	875, 0, 0, 0, 0, 0, 0, 0, 735, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 877, 0, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 0, 0, 0, 0, 0, 870, 882,
	0, 0, 0, 876, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 0, 1619, 857, 859, 0, 0, 0,
	0, 0, 866, 74, 74, 764, 0, 0, 0, 1435,
	0, 763, 0, 0, 912, 913, 914, 915, 916, 0,
	892, 0, 761, 920, 0, 0, 0, 590, 882, 0,
	1522, 0, 0, 981, 0, 850, 0, 0, 0, 0,
	0, 0, 1532, 933, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 73, 0, 74, 0,
	0, 764, 0, 0, 1361, 0, 0, 763, 1556, 0,
	1361, 0, 0, 0, 0, 0, 1216, 0, 893, 892,
	0, 0, 0, 0, 0, 0, 1426, 1427, 1428, 1420,
	1421, 1422, 1423, 1425, 456, 0, 0, 463, 466, 0,
	456, 735, 0, 0, 0, 764, 0, 0, 0, 0,
	0, 763, 0, 1585, 0, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 1216, 0,
	0, 596, 46, 738, 0, 0, 0, 0, 0, 0,
	1638, 1639, 981, 0, 0, 0, 0, 0, 0, 870,
	870, 0, 0, 0, 0, 1665, 0, 1666, 0, 74,
	1668, 1669, 738, 738, 1672, 74, 761, 1766, 0, 46,
	0, 738, 738, 0, 884, 885, 886, 878, 879, 880,
	881, 883, 0, 903, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 443, 1687, 0, 870, 1081, 0, 1687,
	46, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 1216, 74, 74, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 1361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 456, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 0, 0, 1739, 0, 0, 0, 0, 1827,
	0, 0, 581, 0, 0, 0, 0, 0, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	0, 1149, 0, 1151, 1152, 1153, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 1758, 0, 399, 1760, 0, 0, 738, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 1198,
	1199, 0, 0, 1212, 0, 1223, 1225, 1230, 1233, 1234,
	1235, 0, 1876, 0, 870, 0, 0, 0, 0, 0,
	0, 0, 0, 1652, 0, 1645, 0, 0, 0, 0,
	681, 1687, 0, 1643, 764, 0, 74, 1647, 0, 0,
	763, 0, 0, 1808, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 1653, 0, 443, 870, 0,
	0, 0, 0, 764, 764, 0, 1283, 0, 1286, 763,
	763, 0, 764, 764, 735, 1646, 0, 0, 763, 763,
	0, 0, 0, 456, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 735, 735, 764, 0, 0, 0, 0,
	1312, 763, 735, 735, 0, 677, 0, 0, 1844, 1845,
	0, 0, 1849, 0, 0, 0, 1850, 0, 1687, 702,
	0, 399, 0, 0, 0, 0, 456, 710, 710, 0,
	0, 0, 1648, 0, 1649, 735, 0, 1868, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 463,
	466, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	1651, 738, 0, 0, 0, 0, 1884, 1654, 870, 74,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1687,
	0, 0, 1808, 0, 1366, 1367, 0, 0, 0, 0,
	1372, 0, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 0, 763, 0, 0, 0, 74, 0,
	870, 0, 0, 0, 1387, 1650, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 0, 435, 1936, 0, 0,
	0, 1403, 738, 0, 0, 1408, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 874, 875, 0, 894,
	895, 896, 904, 905, 906, 0, 0, 0, 0, 0,
	920, 0, 897, 0, 0, 0, 1230, 1230, 1230, 877,
	0, 908, 0, 0, 0, 0, 0, 874, 875, 0,
	894, 895, 896, 904, 905, 906, 0, 0, 0, 0,
	876, 0, 0, 897, 0, 0, 891, 0, 764, 1479,
	877, 0, 908, 0, 763, 0, 0, 1418, 1419, 0,
	1436, 1437, 1438, 0, 0, 0, 969, 0, 0, 0,
	0, 876, 0, 1724, 0, 581, 0, 891, 456, 0,
	0, 0, 466, 581, 0, 0, 456, 681, 735, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 435,
	1019, 0, 435, 435, 0, 466, 0, 1433, 466, 0,
	0, 0, 0, 901, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 882, 0, 907, 923,
	0, 0, 764, 0, 0, 0, 0, 0, 763, 0,
	899, 0, 0, 0, 901, 909, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 1559, 1424, 0, 1560, 907,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 1565,
	0, 899, 735, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 1439,
	0, 0, 1582, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 1592, 0, 893, 0, 1594, 1434, 0, 0,
	0, 0, 0, 764, 0, 902, 0, 0, 0, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 1625,
	1626, 46, 0, 46, 0, 0, 902, 0, 1632, 1633,
	1634, 0, 0, 735, 0, 0, 0, 0, 46, 0,
	0, 456, 0, 46, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 900, 0, 0, 888, 889, 890, 0,
	887, 884, 885, 886, 878, 879, 880, 881, 883, 0,
	903, 581, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 888, 889, 890,
	0, 887, 884, 885, 886, 878, 879, 880, 881, 883,
	0, 903, 0, 0, 0, 0, 0, 0, 1459, 0,
	1706, 0, 0, 0, 0, 0, 0, 1430, 1431, 1432,
	0, 1429, 1426, 1427, 1428, 1420, 1421, 1422, 1423, 1425,
	0, 0, 0, 1725, 0, 0, 0, 1728, 1729, 0,
	0, 1249, 1731, 0, 0, 0, 1733, 0, 0, 0,
	0, 0, 0, 1737, 0, 874, 875, 1740, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 1277, 0,
	0, 897, 1281, 0, 0, 0, 0, 0, 877, 702,
	908, 0, 0, 0, 0, 1115, 0, 0, 702, 0,
	1749, 0, 0, 0, 0, 0, 0, 0, 456, 876,
	0, 0, 0, 0, 0, 891, 0, 0, 874, 875,
	0, 894, 895, 896, 904, 905, 906, 0, 0, 0,
	0, 1166, 0, 0, 897, 0, 0, 0, 0, 0,
	0, 877, 1776, 908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 882, 0, 0, 0, 891, 1795,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1812, 0, 456, 0, 907, 0, 0,
	0, 0, 0, 1819, 1820, 0, 0, 0, 0, 899,
	1418, 1419, 0, 0, 0, 892, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1832, 443, 0, 901, 909, 898, 0, 0,
	0, 0, 0, 0, 0, 1836, 0, 0, 0, 0,
	907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 899, 0, 0, 0, 0, 681, 892, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 46, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 1362,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	1434, 0, 0, 0, 400, 0, 1458, 0, 1920, 0,
	1166, 0, 0, 1019, 456, 0, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 1934, 1934, 0, 0, 919,
	0, 0, 0, 0, 0, 900, 0, 0, 888, 889,
	890, 0, 887, 884, 885, 886, 878, 879, 880, 881,
	883, 1934, 903, 0, 0, 0, 0, 403, 1435, 1410,
	0, 0, 408, 409, 456, 0, 414, 0, 456, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 402, 404,
	0, 0, 919, 0, 0, 897, 1934, 0, 0, 0,
	0, 0, 877, 0, 908, 0, 0, 0, 0, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 0, 0,
	0, 0, 0, 876, 0, 897, 0, 405, 0, 891,
	0, 0, 877, 0, 908, 0, 0, 0, 0, 0,
	406, 407, 0, 0, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 876, 0, 0, 410, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 1418, 1419, 0, 1436, 1437, 1438,
	0, 0, 0, 0, 0, 0, 901, 909, 0, 0,
	1723, 0, 1418, 1419, 0, 1436, 1437, 1438, 882, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 1115, 1667,
	0, 0, 1115, 899, 0, 1673, 901, 909, 0, 892,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 1433, 899, 0, 0, 411, 0, 0, 892,
	412, 0, 0, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 456, 456, 0, 0, 456, 0, 0, 415,
	0, 898, 0, 1424, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 1424, 0, 0, 0, 0, 0, 874, 875, 0,
	894, 895, 896, 904, 905, 906, 1439, 893, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 0, 902, 0,
	877, 0, 908, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 1434, 0, 0, 0, 900, 891, 0, 888,
	889, 890, 0, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 0, 903, 0, 46, 0, 1881, 0, 0,
	0, 0, 1767, 0, 0, 0, 900, 0, 0, 888,
	889, 890, 1435, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 0, 903, 0, 0, 882, 1879, 0, 0,
	1435, 0, 0, 0, 0, 0, 1115, 1115, 0, 0,
	1115, 0, 0, 0, 901, 909, 1802, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 1430, 1431, 1432, 0, 1429, 1426,
	1427, 1428, 1420, 1421, 1422, 1423, 1425, 0, 0, 898,
	0, 0, 1430, 1431, 1432, 0, 1429, 1426, 1427, 1428,
	1420, 1421, 1422, 1423, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1786, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 1886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 1115, 888, 889, 890,
	0, 887, 884, 885, 886, 878, 879, 880, 881, 883,
	0, 903, 0, 269, 0, 1856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 78,
	79, 288, 80, 289, 290, 291, 292, 196, 293, 294,
	295, 296, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 297, 84, 203, 204, 85, 298, 299, 205, 206,
	207, 300, 208, 301, 274, 302, 86, 87, 88, 919,
	89, 303, 90, 91, 92, 304, 275, 93, 94, 305,
	306, 307, 308, 309, 310, 95, 96, 97, 98, 209,
	99, 210, 211, 311, 100, 312, 101, 313, 314, 315,
	102, 103, 316, 104, 317, 0, 318, 212, 105, 106,
	213, 214, 319, 320, 321, 107, 108, 215, 0, 109,
	322, 110, 323, 324, 276, 325, 111, 216, 326, 217,
	327, 112, 113, 114, 218, 219, 278, 328, 117, 329,
	115, 330, 277, 116, 220, 221, 222, 223, 331, 224,
	332, 279, 118, 280, 119, 120, 333, 122, 121, 334,
	225, 281, 123, 282, 335, 124, 336, 337, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	338, 134, 339, 226, 136, 227, 137, 138, 340, 341,
	342, 343, 344, 139, 228, 284, 140, 285, 229, 141,
	142, 143, 144, 345, 230, 145, 231, 146, 346, 147,
	148, 149, 232, 150, 151, 347, 153, 154, 152, 155,
	348, 156, 286, 157, 158, 233, 159, 0, 160, 161,
	162, 349, 234, 163, 164, 350, 165, 166, 287, 167,
	235, 236, 168, 351, 174, 169, 170, 171, 173, 237,
	172, 238, 352, 175, 353, 176, 177, 178, 354, 239,
	240, 241, 355, 356, 179, 242, 243, 357, 180, 181,
	182, 183, 358, 359, 184, 185, 186, 360, 187, 361,
	188, 189, 190, 244, 245, 362, 363, 191, 364, 365,
	366, 367, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1555, 78, 79, 288, 80, 289, 290, 291,
	292, 196, 293, 294, 295, 296, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 297, 84, 203, 204, 85,
	298, 299, 205, 206, 207, 300, 208, 301, 274, 302,
	86, 87, 88, 0, 89, 303, 90, 91, 92, 304,
	275, 93, 94, 305, 306, 307, 308, 309, 310, 95,
	96, 97, 98, 209, 99, 210, 211, 311, 100, 312,
	101, 313, 314, 315, 102, 103, 316, 104, 317, 0,
	318, 212, 105, 106, 213, 214, 319, 320, 321, 107,
	108, 215, 0, 109, 322, 110, 323, 324, 276, 325,
	111, 216, 326, 217, 327, 112, 113, 114, 218, 219,
	278, 328, 117, 329, 115, 330, 277, 116, 220, 221,
	222, 223, 331, 224, 332, 279, 118, 280, 119, 120,
	333, 122, 121, 334, 225, 281, 123, 282, 335, 124,
	336, 337, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 338, 134, 339, 226, 136, 227,
	137, 138, 340, 341, 342, 343, 344, 139, 228, 284,
	140, 285, 229, 141, 142, 143, 144, 345, 230, 145,
	231, 146, 346, 147, 148, 149, 232, 150, 151, 347,
	153, 154, 152, 155, 348, 156, 286, 157, 158, 233,
	159, 0, 160, 161, 162, 349, 234, 163, 164, 350,
	165, 166, 287, 167, 235, 236, 168, 351, 174, 169,
	170, 171, 173, 237, 172, 238, 352, 175, 353, 176,
	177, 178, 354, 239, 240, 241, 355, 356, 179, 242,
	243, 357, 180, 181, 182, 183, 358, 359, 184, 185,
	186, 360, 187, 361, 188, 189, 190, 244, 245, 362,
	363, 191, 364, 365, 366, 367, 192, 193, 194, 195,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 78, 79, 288, 80,
	289, 290, 291, 292, 196, 293, 294, 295, 296, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 297, 84,
	203, 204, 85, 298, 299, 205, 206, 207, 300, 208,
	301, 274, 302, 86, 87, 88, 0, 89, 303, 90,
	91, 92, 304, 275, 93, 94, 305, 306, 307, 308,
	309, 310, 95, 96, 97, 98, 209, 99, 210, 211,
	311, 100, 312, 101, 313, 314, 315, 102, 103, 316,
	104, 317, 0, 318, 212, 105, 106, 213, 214, 319,
	320, 321, 107, 108, 215, 0, 109, 322, 110, 323,
	324, 276, 325, 111, 216, 326, 217, 327, 112, 113,
	114, 218, 219, 278, 328, 117, 329, 115, 330, 277,
	116, 220, 221, 222, 223, 331, 224, 332, 279, 118,
	280, 119, 120, 333, 122, 121, 334, 225, 281, 123,
	282, 335, 124, 336, 337, 125, 0, 126, 127, 128,
	129, 130, 283, 131, 132, 135, 133, 338, 134, 339,
	226, 136, 227, 137, 138, 340, 341, 342, 343, 344,
	139, 228, 284, 140, 285, 229, 141, 142, 143, 144,
	345, 230, 145, 231, 146, 346, 147, 148, 149, 232,
	150, 151, 347, 153, 154, 152, 155, 348, 156, 286,
	157, 158, 233, 159, 0, 160, 161, 162, 349, 234,
	163, 164, 350, 165, 166, 287, 167, 235, 236, 168,
	351, 174, 169, 170, 171, 173, 237, 172, 238, 352,
	175, 353, 176, 177, 178, 354, 239, 240, 241, 355,
	356, 179, 242, 243, 357, 180, 181, 182, 183, 358,
	359, 184, 185, 186, 360, 187, 361, 188, 189, 190,
	244, 245, 362, 363, 191, 364, 365, 366, 367, 192,
	193, 194, 195, 616, 605, 606, 603, 604, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 1184, 80, 0, 0, 0, 0, 632, 598, 0,
	0, 0, 81, 82, 197, 647, 199, 648, 83, 649,
	650, 0, 84, 203, 204, 85, 613, 631, 651, 652,
	207, 0, 643, 0, 624, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	625, 627, 0, 626, 628, 95, 96, 97, 98, 653,
	99, 654, 655, 0, 100, 0, 101, 0, 1185, 0,
	646, 103, 0, 104, 0, 0, 0, 597, 105, 106,
	633, 634, 611, 0, 0, 107, 108, 656, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 644, 0, 217,
	0, 112, 113, 114, 640, 642, 278, 0, 117, 0,
	115, 0, 277, 116, 657, 658, 659, 660, 0, 623,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	645, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 612, 641, 136, 661, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 635, 141,
	142, 143, 144, 0, 636, 145, 231, 146, 0, 147,
	148, 149, 662, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 601, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 629, 165, 166, 287, 167,
	663, 236, 168, 0, 174, 169, 170, 171, 173, 664,
	172, 637, 0, 175, 0, 176, 177, 178, 0, 239,
	665, 666, 0, 0, 179, 638, 639, 610, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 630, 187, 0,
	188, 189, 190, 244, 667, 1183, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 585, 1186,
	0, 0, 0, 586, 0, 0, 593, 1181, 616, 605,
	606, 603, 604, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 632, 598, 0, 0, 0, 81, 82, 197,
	647, 199, 648, 83, 649, 650, 0, 84, 203, 204,
	85, 613, 631, 651, 652, 207, 0, 643, 0, 624,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 625, 627, 0, 626, 628,
	95, 96, 97, 98, 653, 99, 654, 655, 682, 100,
	0, 101, 0, 0, 0, 646, 103, 0, 104, 0,
	0, 0, 597, 105, 106, 633, 634, 611, 0, 0,
	107, 108, 656, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 644, 0, 217, 0, 112, 113, 114, 640,
	642, 278, 0, 117, 0, 115, 0, 277, 116, 657,
	658, 659, 660, 0, 623, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 645, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 612, 641, 136,
	661, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 635, 141, 142, 143, 144, 0, 636,
	145, 231, 146, 0, 147, 148, 149, 662, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	601, 159, 0, 160, 161, 162, 64, 234, 163, 164,
	629, 165, 166, 287, 167, 663, 236, 168, 0, 174,
	169, 170, 171, 173, 664, 172, 637, 0, 175, 66,
	176, 177, 178, 0, 239, 665, 666, 0, 0, 179,
	638, 639, 610, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 630, 187, 0, 188, 189, 190, 500, 667,
	0, 0, 191, 0, 0, 0, 62, 192, 193, 194,
	195, 588, 63, 616, 605, 606, 603, 604, 592, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 593, 80, 0, 0, 0, 0, 632, 598, 0,
	0, 0, 81, 82, 197, 647, 199, 648, 83, 649,
	650, 0, 84, 203, 204, 85, 613, 631, 651, 652,
	207, 0, 643, 0, 624, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	625, 627, 0, 626, 628, 95, 96, 97, 98, 653,
	99, 654, 655, 0, 100, 0, 101, 0, 0, 0,
	646, 103, 0, 104, 0, 0, 0, 597, 105, 106,
	633, 634, 611, 0, 0, 107, 108, 656, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 644, 0, 217,
	0, 112, 113, 114, 640, 642, 278, 0, 117, 0,
	115, 0, 277, 116, 657, 658, 659, 660, 0, 623,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	645, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 612, 641, 136, 661, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 635, 141,
	142, 143, 144, 0, 636, 145, 231, 146, 0, 147,
	148, 149, 662, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 601, 159, 0, 160, 161,
	162, 64, 234, 163, 164, 629, 165, 166, 287, 167,
	663, 236, 168, 0, 174, 169, 170, 171, 173, 664,
	172, 637, 0, 175, 66, 176, 177, 178, 0, 239,
	665, 666, 0, 0, 179, 638, 639, 610, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 630, 187, 0,
	188, 189, 190, 500, 667, 0, 0, 191, 0, 0,
	0, 62, 192, 193, 194, 195, 588, 63, 616, 605,
	606, 603, 604, 592, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 78, 79, 593, 80, 0, 0,
	0, 0, 632, 598, 0, 0, 0, 81, 82, 197,
	647, 199, 648, 83, 649, 650, 1226, 84, 203, 204,
	85, 613, 631, 651, 652, 207, 0, 643, 0, 624,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 625, 627, 0, 626, 628,
	95, 96, 97, 98, 653, 99, 654, 655, 0, 100,
	0, 101, 0, 0, 0, 646, 103, 0, 104, 0,
	0, 0, 597, 105, 106, 633, 634, 611, 0, 0,
	107, 108, 656, 0, 109, 0, 110, 0, 1231, 276,
	0, 111, 644, 0, 217, 0, 112, 113, 114, 640,
	642, 278, 0, 117, 0, 115, 0, 277, 116, 657,
	658, 659, 660, 0, 623, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 1227, 645, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 612, 641, 136,
	661, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 635, 141, 142, 143, 144, 0, 636,
	145, 231, 146, 0, 147, 148, 149, 662, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	601, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	629, 165, 166, 287, 167, 663, 236, 168, 0, 174,
	169, 170, 171, 173, 664, 172, 637, 0, 175, 0,
	176, 177, 178, 0, 239, 665, 666, 0, 1228, 179,
	638, 639, 610, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 630, 187, 0, 188, 189, 190, 244, 667,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 616, 605, 606, 603, 604, 592, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 593, 80, 0, 0, 0, 0, 632, 598, 0,
	0, 0, 81, 82, 197, 647, 199, 648, 83, 649,
	650, 0, 84, 203, 204, 85, 613, 631, 651, 652,
	207, 0, 643, 0, 624, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	625, 627, 0, 626, 628, 95, 96, 97, 98, 653,
	99, 654, 655, 0, 100, 0, 101, 0, 0, 0,
	646, 103, 0, 104, 0, 0, 0, 597, 105, 106,
	633, 634, 611, 0, 0, 107, 108, 656, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 644, 0, 217,
	0, 112, 113, 114, 640, 642, 278, 0, 117, 0,
	115, 0, 277, 116, 657, 658, 659, 660, 0, 623,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	645, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 612, 641, 136, 661, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 635, 141,
	142, 143, 144, 0, 636, 145, 231, 146, 0, 147,
	148, 149, 662, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 601, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 629, 165, 166, 287, 167,
	663, 236, 168, 0, 174, 169, 170, 171, 173, 664,
	172, 637, 0, 175, 0, 176, 177, 178, 0, 239,
	665, 666, 0, 0, 179, 638, 639, 610, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 630, 187, 0,
	188, 189, 190, 244, 667, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 0, 0, 593, 1622, 616, 605,
	606, 603, 604, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 632, 598, 0, 0, 0, 81, 82, 197,
	647, 199, 648, 83, 649, 650, 0, 84, 203, 204,
	85, 613, 631, 651, 652, 207, 0, 643, 0, 624,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 625, 627, 0, 626, 628,
	95, 96, 97, 98, 653, 99, 654, 655, 0, 100,
	0, 101, 0, 0, 0, 646, 103, 0, 104, 0,
	0, 0, 597, 105, 106, 633, 634, 611, 0, 0,
	107, 108, 656, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 644, 0, 217, 0, 112, 113, 114, 640,
	642, 278, 0, 117, 0, 115, 0, 277, 116, 657,
	658, 659, 660, 0, 623, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 645, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 612, 641, 136,
	661, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 635, 141, 142, 143, 144, 0, 636,
	145, 231, 146, 0, 147, 148, 149, 662, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	601, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	629, 165, 166, 287, 167, 663, 236, 168, 0, 174,
	169, 170, 171, 173, 664, 172, 637, 0, 175, 0,
	176, 177, 178, 0, 239, 665, 666, 0, 0, 179,
	638, 639, 610, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 630, 187, 0, 188, 189, 190, 244, 667,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 0,
	0, 593, 1571, 616, 605, 606, 603, 604, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 632, 598, 0,
	0, 0, 81, 82, 197, 647, 199, 648, 83, 649,
	650, 0, 84, 203, 204, 85, 613, 631, 651, 652,
	207, 0, 643, 0, 624, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	625, 627, 0, 626, 628, 95, 96, 97, 98, 653,
	99, 654, 655, 0, 100, 0, 101, 0, 0, 0,
	646, 103, 0, 104, 0, 0, 0, 597, 105, 106,
	633, 634, 611, 0, 0, 107, 108, 656, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 644, 0, 217,
	0, 112, 113, 114, 640, 642, 278, 0, 117, 0,
	115, 0, 277, 116, 657, 658, 659, 660, 0, 623,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	645, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 612, 641, 136, 661, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 635, 141,
	142, 143, 144, 0, 636, 145, 231, 146, 0, 147,
	148, 149, 662, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 601, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 629, 165, 166, 287, 167,
	663, 236, 168, 0, 174, 169, 170, 171, 173, 664,
	172, 637, 0, 175, 0, 176, 177, 178, 0, 239,
	665, 666, 0, 0, 179, 638, 639, 610, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 630, 187, 0,
	188, 189, 190, 244, 667, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 0, 0, 593, 1180, 616, 605,
	606, 603, 604, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 632, 598, 0, 0, 0, 81, 82, 197,
	647, 199, 648, 83, 649, 650, 0, 84, 203, 204,
	85, 613, 631, 651, 652, 207, 0, 643, 0, 624,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 625, 627, 0, 626, 628,
	95, 96, 97, 98, 653, 99, 654, 655, 0, 100,
	0, 101, 0, 0, 0, 646, 103, 0, 104, 0,
	0, 0, 597, 105, 106, 633, 634, 611, 0, 0,
	107, 108, 656, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 644, 0, 217, 0, 112, 113, 114, 640,
	642, 278, 0, 117, 0, 115, 0, 277, 116, 657,
	658, 659, 660, 0, 623, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 645, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 612, 641, 136,
	661, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 635, 141, 142, 143, 144, 0, 636,
	145, 231, 146, 0, 147, 148, 149, 662, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	601, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	629, 165, 166, 287, 167, 663, 236, 168, 0, 174,
	169, 170, 171, 173, 664, 172, 637, 0, 175, 0,
	176, 177, 178, 0, 239, 665, 666, 0, 0, 179,
	638, 639, 610, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 630, 187, 0, 188, 189, 190, 244, 667,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 0, 0, 0, 616, 605, 606, 603,
	604, 592, 584, 585, 0, 0, 0, 0, 586, 925,
	1177, 593, 78, 79, 0, 80, 0, 0, 0, 0,
	632, 598, 0, 0, 0, 81, 82, 197, 647, 199,
	648, 83, 649, 650, 0, 84, 203, 204, 85, 613,
	631, 651, 652, 207, 0, 643, 0, 624, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 275,
	93, 94, 0, 625, 627, 0, 626, 628, 95, 96,
	97, 98, 653, 99, 654, 655, 0, 100, 0, 101,
	0, 0, 0, 646, 103, 0, 104, 0, 0, 0,
	597, 105, 106, 633, 634, 611, 0, 0, 107, 108,
	656, 0, 109, 0, 110, 0, 0, 276, 0, 111,
	644, 0, 217, 0, 112, 113, 114, 640, 642, 278,
	0, 117, 0, 115, 0, 277, 116, 657, 658, 659,
	660, 0, 623, 0, 279, 118, 280, 119, 120, 0,
	122, 121, 0, 645, 281, 123, 282, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 587, 134, 612, 641, 136, 661, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 284, 140,
	285, 635, 141, 142, 143, 144, 0, 636, 145, 231,
	146, 0, 147, 148, 149, 662, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 286, 157, 158, 601, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 629, 165,
	166, 287, 167, 663, 236, 168, 0, 174, 169, 170,
	171, 173, 664, 172, 637, 0, 175, 0, 176, 177,
	178, 0, 239, 665, 666, 0, 0, 179, 638, 639,
	610, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	630, 187, 0, 188, 189, 190, 244, 667, 0, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 588,
	0, 616, 605, 606, 603, 604, 592, 0, 0, 0,
	584, 585, 582, 0, 0, 0, 586, 78, 79, 593,
	80, 0, 0, 0, 0, 632, 598, 0, 0, 0,
	81, 82, 197, 647, 199, 648, 83, 649, 650, 0,
	84, 203, 204, 85, 613, 631, 651, 652, 207, 0,
	643, 0, 624, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 275, 93, 94, 0, 625, 627,
	0, 626, 628, 95, 96, 97, 98, 653, 99, 654,
	655, 0, 100, 0, 101, 0, 0, 0, 646, 103,
	0, 104, 0, 0, 0, 597, 105, 106, 633, 634,
	611, 0, 0, 107, 108, 656, 0, 109, 0, 110,
	0, 0, 276, 0, 111, 644, 0, 217, 0, 112,
	113, 114, 640, 642, 278, 0, 117, 0, 115, 0,
	277, 116, 657, 658, 659, 660, 0, 623, 0, 279,
	118, 280, 119, 120, 0, 122, 121, 0, 645, 281,
	123, 282, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 283, 131, 132, 135, 133, 587, 134,
	612, 641, 136, 661, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 284, 140, 285, 635, 141, 142, 143,
	144, 0, 636, 145, 231, 146, 0, 147, 148, 149,
	662, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	286, 157, 158, 601, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 629, 165, 166, 287, 167, 663, 236,
	168, 0, 174, 169, 170, 171, 173, 664, 172, 637,
	0, 175, 0, 176, 177, 178, 0, 239, 665, 666,
	0, 0, 179, 638, 639, 610, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 630, 187, 0, 188, 189,
	190, 244, 667, 1576, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 588, 0, 616, 605, 606, 603,
	604, 592, 0, 0, 0, 584, 585, 0, 0, 0,
	0, 586, 78, 79, 593, 80, 0, 0, 0, 0,
	632, 598, 0, 0, 0, 81, 82, 197, 647, 199,
	648, 83, 649, 650, 0, 84, 203, 204, 85, 613,
	631, 651, 652, 207, 0, 643, 0, 624, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 275,
	93, 94, 0, 625, 627, 0, 626, 628, 95, 96,
	97, 98, 653, 99, 654, 655, 682, 100, 0, 101,
	0, 0, 0, 646, 103, 0, 104, 0, 0, 0,
	597, 105, 106, 633, 634, 611, 0, 0, 107, 108,
	656, 0, 109, 0, 110, 0, 0, 276, 0, 111,
	644, 0, 217, 0, 112, 113, 114, 640, 642, 278,
	0, 117, 0, 115, 0, 277, 116, 657, 658, 659,
	660, 0, 623, 0, 279, 118, 280, 119, 120, 0,
	122, 121, 0, 645, 281, 123, 282, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 587, 134, 612, 641, 136, 661, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 284, 140,
	285, 635, 141, 142, 143, 144, 0, 636, 145, 231,
	146, 0, 147, 148, 149, 662, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 286, 157, 158, 601, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 629, 165,
	166, 287, 167, 663, 236, 168, 0, 174, 169, 170,
	171, 173, 664, 172, 637, 0, 175, 0, 176, 177,
	178, 0, 239, 665, 666, 0, 0, 179, 638, 639,
	610, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	630, 187, 0, 188, 189, 190, 244, 667, 0, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 588,
	0, 616, 605, 606, 603, 604, 592, 0, 0, 0,
	584, 585, 0, 0, 0, 0, 586, 78, 79, 593,
	80, 0, 0, 0, 0, 632, 598, 0, 0, 0,
	81, 82, 197, 647, 199, 648, 83, 649, 650, 0,
	84, 203, 204, 85, 613, 631, 651, 652, 207, 0,
	643, 0, 624, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 275, 93, 94, 0, 625, 627,
	0, 626, 628, 95, 96, 97, 98, 653, 99, 654,
	655, 0, 100, 0, 101, 0, 0, 0, 646, 103,
	0, 104, 0, 0, 0, 597, 105, 106, 633, 634,
	611, 0, 0, 107, 108, 656, 0, 109, 0, 110,
	0, 1231, 276, 0, 111, 644, 0, 217, 0, 112,
	113, 114, 640, 642, 278, 0, 117, 0, 115, 0,
	277, 116, 657, 658, 659, 660, 0, 623, 0, 279,
	118, 280, 119, 120, 0, 122, 121, 0, 645, 281,
	123, 282, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 283, 131, 132, 135, 133, 587, 134,
	612, 641, 136, 661, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 284, 140, 285, 635, 141, 142, 143,
	144, 0, 636, 145, 231, 146, 0, 147, 148, 149,
	662, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	286, 157, 158, 601, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 629, 165, 166, 287, 167, 663, 236,
	168, 0, 174, 169, 170, 171, 173, 664, 172, 637,
	0, 175, 0, 176, 177, 178, 0, 239, 665, 666,
	0, 0, 179, 638, 639, 610, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 630, 187, 0, 188, 189,
	190, 244, 667, 0, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 588, 0, 0, 0, 0, 616,
	605, 606, 603, 604, 592, 584, 585, 0, 0, 0,
	0, 586, 0, 0, 593, 78, 79, 858, 80, 0,
	0, 0, 0, 632, 598, 0, 0, 0, 81, 82,
	197, 647, 199, 648, 83, 649, 650, 0, 84, 203,
	204, 85, 613, 631, 651, 652, 207, 0, 643, 0,
	624, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 625, 627, 0, 626,
	628, 95, 96, 97, 98, 653, 99, 654, 655, 0,
	100, 0, 101, 0, 0, 0, 646, 103, 0, 104,
	0, 0, 0, 597, 105, 106, 633, 634, 611, 0,
	0, 107, 108, 656, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 644, 0, 217, 0, 112, 113, 114,
	640, 642, 278, 0, 117, 0, 115, 0, 277, 116,
	657, 658, 659, 660, 0, 623, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 645, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 612, 641,
	136, 661, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 635, 141, 142, 143, 144, 0,
	636, 145, 231, 146, 0, 147, 148, 149, 662, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 601, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 629, 165, 166, 287, 167, 663, 236, 168, 0,
	174, 169, 170, 171, 173, 664, 172, 637, 0, 175,
	0, 176, 177, 178, 0, 239, 665, 666, 0, 0,
	179, 638, 639, 610, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 630, 187, 0, 188, 189, 190, 244,
	667, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 588, 0, 616, 605, 606, 603, 604, 592,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	78, 79, 593, 80, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 81, 82, 197, 647, 199, 648, 83,
	649, 650, 0, 84, 203, 204, 85, 613, 631, 651,
	652, 207, 0, 643, 0, 624, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 1933,
	0, 625, 627, 0, 626, 628, 95, 96, 97, 98,
	653, 99, 654, 655, 0, 100, 0, 101, 0, 0,
	0, 646, 103, 0, 104, 0, 0, 0, 597, 105,
	106, 633, 634, 611, 0, 0, 107, 108, 656, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 644, 0,
	217, 0, 112, 113, 114, 640, 642, 278, 0, 117,
	0, 115, 0, 277, 116, 657, 658, 659, 660, 0,
	623, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 645, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 587, 134, 612, 641, 136, 661, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 635,
	141, 142, 143, 144, 0, 636, 145, 231, 146, 0,
	147, 148, 149, 662, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 601, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 629, 165, 166, 287,
	167, 663, 236, 168, 0, 174, 169, 170, 171, 173,
	664, 172, 637, 0, 175, 0, 176, 177, 178, 0,
	239, 665, 666, 0, 0, 179, 638, 639, 610, 180,
	181, 1932, 183, 0, 0, 184, 185, 186, 630, 187,
	0, 188, 189, 190, 244, 667, 0, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 588, 0, 616,
	605, 606, 603, 604, 592, 0, 0, 0, 584, 585,
	0, 0, 0, 0, 586, 78, 79, 593, 80, 0,
	0, 0, 0, 632, 598, 0, 0, 0, 81, 82,
	1931, 647, 199, 648, 83, 649, 650, 0, 84, 203,
	204, 85, 613, 631, 651, 652, 207, 0, 643, 0,
	624, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 1933, 0, 625, 627, 0, 626,
	628, 95, 96, 97, 98, 653, 99, 654, 655, 0,
	100, 0, 101, 0, 0, 0, 646, 103, 0, 104,
	0, 0, 0, 597, 105, 106, 633, 634, 611, 0,
	0, 107, 108, 656, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 644, 0, 217, 0, 112, 113, 114,
	640, 642, 278, 0, 117, 0, 115, 0, 277, 116,
	657, 658, 659, 660, 0, 623, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 645, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 612, 641,
	136, 661, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 635, 141, 142, 143, 144, 0,
	636, 145, 231, 146, 0, 147, 148, 149, 662, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 601, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 629, 165, 166, 287, 167, 663, 236, 168, 0,
	174, 169, 170, 171, 173, 664, 172, 637, 0, 175,
	0, 176, 177, 178, 0, 239, 665, 666, 0, 0,
	179, 638, 639, 610, 180, 181, 1932, 183, 0, 0,
	184, 185, 186, 630, 187, 0, 188, 189, 190, 244,
	667, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 588, 0, 616, 605, 606, 603, 604, 592,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	78, 79, 593, 80, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 81, 82, 197, 647, 199, 648, 83,
	649, 650, 0, 84, 203, 204, 85, 613, 631, 651,
	652, 207, 0, 643, 0, 624, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 625, 627, 0, 626, 628, 95, 96, 97, 98,
	653, 99, 654, 655, 0, 100, 0, 101, 0, 0,
	0, 646, 103, 0, 104, 0, 0, 0, 597, 105,
	106, 633, 634, 611, 0, 0, 107, 108, 656, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 644, 0,
	217, 0, 112, 113, 114, 640, 642, 278, 0, 117,
	0, 115, 0, 277, 116, 657, 658, 659, 660, 0,
	623, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 645, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 587, 134, 612, 641, 136, 661, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 635,
	141, 142, 143, 144, 0, 636, 145, 231, 146, 0,
	147, 148, 149, 662, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 601, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 629, 165, 166, 287,
	167, 663, 236, 168, 0, 174, 169, 170, 171, 173,
	664, 172, 637, 0, 175, 0, 176, 177, 178, 0,
	239, 665, 666, 0, 0, 179, 638, 639, 610, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 630, 187,
	0, 188, 189, 190, 244, 667, 0, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 588, 0, 1203,
	605, 606, 603, 604, 592, 0, 0, 0, 584, 585,
	0, 0, 0, 0, 586, 78, 79, 593, 80, 0,
	0, 0, 0, 632, 598, 0, 0, 0, 81, 82,
	197, 647, 199, 648, 83, 649, 650, 0, 84, 203,
	204, 85, 613, 631, 651, 652, 207, 0, 643, 0,
	624, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 625, 627, 0, 626,
	628, 95, 96, 97, 98, 653, 1206, 654, 655, 0,
	100, 0, 101, 0, 0, 0, 646, 103, 0, 104,
	0, 0, 0, 597, 105, 106, 633, 634, 611, 0,
	0, 107, 108, 656, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 644, 0, 217, 0, 112, 113, 1207,
	640, 642, 278, 0, 117, 0, 115, 0, 277, 116,
	657, 658, 659, 660, 0, 623, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 645, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 1208, 1205, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 612, 641,
	136, 661, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 635, 141, 142, 143, 144, 0,
	636, 145, 231, 146, 0, 147, 148, 149, 662, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 601, 159, 0, 160, 161, 1209, 0, 234, 163,
	164, 629, 165, 166, 287, 167, 663, 236, 168, 0,
	174, 169, 170, 171, 173, 664, 172, 637, 0, 175,
	0, 176, 177, 178, 0, 239, 665, 666, 0, 0,
	179, 638, 639, 610, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 630, 187, 0, 188, 189, 190, 244,
	667, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	1204, 195, 588, 0, 616, 605, 606, 603, 604, 592,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	78, 79, 593, 80, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 81, 82, 197, 647, 199, 648, 83,
	649, 650, 0, 84, 203, 204, 85, 613, 631, 651,
	652, 207, 0, 643, 0, 624, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 625, 627, 0, 626, 628, 95, 96, 97, 98,
	653, 99, 654, 655, 0, 100, 0, 101, 0, 0,
	0, 646, 103, 0, 104, 0, 0, 0, 597, 105,
	106, 633, 634, 611, 0, 0, 107, 108, 656, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 644, 0,
	217, 0, 112, 113, 114, 640, 642, 278, 0, 117,
	0, 115, 0, 277, 116, 657, 658, 659, 660, 0,
	623, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 645, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 0, 134, 612, 641, 136, 661, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 635,
	141, 142, 143, 144, 0, 636, 145, 231, 146, 0,
	147, 148, 149, 662, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 1221, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 629, 165, 166, 287,
	167, 663, 236, 168, 0, 174, 169, 170, 171, 173,
	664, 172, 637, 0, 175, 0, 176, 177, 178, 0,
	239, 665, 666, 0, 0, 179, 638, 639, 610, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 630, 187,
	0, 188, 189, 190, 244, 667, 0, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 616,
	605, 606, 603, 604, 592, 0, 0, 0, 1217, 1218,
	0, 0, 0, 0, 1219, 78, 79, 1220, 80, 0,
	0, 0, 0, 632, 598, 0, 0, 0, 81, 82,
	0, 647, 199, 648, 83, 649, 650, 0, 84, 203,
	204, 85, 613, 631, 651, 652, 207, 0, 643, 0,
	624, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 1933, 0, 625, 627, 0, 626,
	628, 95, 96, 97, 98, 653, 99, 654, 655, 0,
	100, 0, 101, 0, 0, 0, 646, 103, 0, 104,
	0, 0, 0, 597, 105, 106, 633, 634, 611, 0,
	0, 107, 108, 656, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 644, 0, 217, 0, 112, 113, 114,
	640, 642, 0, 0, 117, 0, 115, 0, 277, 116,
	657, 658, 659, 660, 0, 623, 0, 0, 118, 280,
	119, 120, 0, 122, 121, 0, 645, 281, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 612, 641,
	136, 661, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 635, 141, 142, 143, 144, 0,
	636, 145, 231, 146, 0, 147, 148, 149, 662, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 601, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 629, 165, 166, 0, 167, 663, 236, 168, 0,
	174, 169, 170, 171, 173, 664, 172, 637, 0, 175,
	0, 176, 177, 178, 0, 239, 665, 666, 0, 0,
	179, 638, 639, 610, 180, 181, 1932, 183, 0, 0,
	184, 185, 186, 630, 187, 0, 188, 189, 190, 244,
	667, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	78, 79, 593, 80, 0, 0, 0, 0, 632, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 631, 205,
	206, 207, 0, 643, 0, 624, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 625, 627, 0, 626, 628, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 633, 634, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 644, 0,
	217, 0, 112, 113, 114, 640, 642, 278, 0, 117,
	0, 115, 0, 277, 116, 220, 221, 222, 223, 0,
	224, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 645, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 0, 134, 0, 641, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 635,
	141, 142, 143, 144, 0, 636, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 629, 165, 166, 287,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 637, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 638, 639, 0, 180,
	181, 182, 183, 496, 0, 184, 185, 186, 630, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 1689, 205, 206,
	207, 0, 208, 0, 274, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 278, 0, 117, 0,
	115, 0, 277, 116, 220, 221, 222, 223, 0, 224,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	225, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 233, 159, 0, 160, 161,
	162, 64, 234, 163, 164, 0, 165, 166, 287, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 66, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 500, 245, 0, 0, 191, 0, 0,
	0, 62, 192, 193, 194, 195, 0, 63, 496, 808,
	0, 809, 804, 799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 61, 80, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 274,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 812, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 801, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 278, 0, 117, 0, 115, 0, 277, 116, 220,
	221, 222, 223, 0, 224, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 225, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 802, 0, 0, 0, 139, 228,
	284, 140, 285, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 287, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 800, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	496, 808, 191, 809, 804, 799, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 810, 805, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 274, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 275, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	795, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 801,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 276, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 278, 0, 117, 0, 115, 0, 277,
	116, 220, 221, 222, 223, 0, 224, 0, 279, 118,
	280, 119, 120, 0, 122, 121, 0, 225, 281, 123,
	282, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 283, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 802, 0, 0, 0,
	139, 228, 284, 140, 285, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 286,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 287, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 800, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 496, 808, 191, 809, 804, 799, 0, 192,
	193, 194, 195, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 810, 805, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 274, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 801, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 278, 0, 117, 0, 115,
	0, 277, 116, 220, 221, 222, 223, 0, 224, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 225,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 802, 0,
	0, 0, 139, 228, 284, 140, 285, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 287, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 800, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 75, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 810, 805, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 457, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 64, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 66, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 500, 245, 0, 0, 191, 75,
	0, 0, 62, 192, 193, 194, 195, 0, 63, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 196, 0, 0, 0, 1117, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 64, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	66, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 500,
	245, 0, 0, 191, 75, 0, 0, 62, 192, 193,
	194, 195, 0, 63, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 196, 0,
	1360, 0, 61, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 0,
	75, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 196, 0, 0, 0, 574, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 457, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 1117, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 0, 75, 0, 0, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 196,
	0, 0, 0, 700, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 1020, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 1586, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 616, 605, 606, 603,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 678, 0, 0, 0,
	196, 0, 0, 0, 0, 81, 82, 197, 647, 199,
	648, 83, 649, 650, 0, 84, 203, 204, 85, 0,
	0, 651, 652, 207, 0, 208, 0, 274, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 275,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 653, 99, 654, 655, 0, 100, 0, 101,
	0, 0, 0, 646, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 611, 0, 0, 107, 108,
	656, 0, 109, 0, 110, 0, 0, 276, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 278,
	0, 117, 0, 115, 0, 277, 116, 657, 658, 659,
	660, 0, 623, 0, 279, 118, 280, 119, 120, 0,
	122, 121, 0, 225, 281, 123, 282, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 0, 134, 612, 226, 136, 661, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 284, 140,
	285, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 662, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 286, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 287, 167, 663, 236, 168, 0, 174, 169, 170,
	171, 173, 664, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 665, 666, 0, 0, 179, 242, 243,
	610, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 667, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 779,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 778, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 75, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 782, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 496, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 0, 782, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 274, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 275, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 276, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 278, 0, 117, 0, 115, 0,
	277, 116, 220, 221, 222, 223, 0, 224, 0, 279,
	118, 280, 119, 120, 0, 122, 121, 0, 225, 281,
	123, 282, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 283, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 284, 140, 285, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	286, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 287, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 984, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 982, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	1089, 0, 107, 108, 215, 0, 109, 0, 110, 987,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 0, 0, 117, 1087, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 986, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	1088, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 984, 208, 0,
	0, 979, 86, 87, 88, 0, 89, 982, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 987, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	978, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 986, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 75, 985,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 1360, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 218, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 457, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 729, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 457, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 508, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 469, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 457, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 462, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	457, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	372, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 371, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 1267, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	1265, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 1254,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 849, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 386, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 714, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 0, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 559, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 554, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 514,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 397, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 396, 240,
	241, 0, 0, 392, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 397, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 396, 240, 241,
	0, 0, 392, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 492, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	489, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 486,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 484, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 465, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 446, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 389, 0, 0, 125,
	0, 126, 127, 128, 129, 397, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 391, 159, 0, 160,
	161, 162, 0, 234, 163, 390, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	396, 240, 241, 0, 0, 392, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 0, 144, 0, 230, 145, 231, 146, 0, 147,
	0, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 0, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 874, 875, 0, 894,
	895, 896, 904, 905, 906, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 877,
	0, 908, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 0,
	876, 897, 0, 0, 0, 0, 891, 0, 877, 0,
	908, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 876,
	0, 897, 0, 0, 0, 891, 0, 0, 877, 0,
	908, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 882, 0, 0, 0, 876,
	0, 897, 0, 0, 0, 891, 0, 0, 877, 0,
	908, 0, 0, 901, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 907, 876,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	899, 0, 901, 909, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 899,
	0, 0, 901, 909, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 899,
	0, 0, 901, 909, 893, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 899,
	0, 0, 0, 893, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 900, 902, 0, 888, 889, 890, 0,
	887, 884, 885, 886, 878, 879, 880, 881, 883, 0,
	903, 0, 0, 893, 1831, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 902, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 0, 0, 1826, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 0, 0, 1822, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 874, 875, 1754, 894, 895, 896, 904, 905, 906,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 0, 877, 0, 908, 0, 0, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 0, 876, 897, 0, 0, 0,
	0, 891, 0, 877, 0, 908, 0, 0, 0, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 876, 0, 897, 0, 0, 0,
	891, 0, 0, 877, 0, 908, 0, 0, 0, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	882, 0, 0, 0, 876, 0, 897, 0, 0, 0,
	891, 0, 0, 877, 0, 908, 0, 0, 901, 909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 907, 876, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 899, 0, 901, 909, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 899, 0, 0, 901, 909, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 899, 0, 0, 901, 909, 893,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 899, 0, 0, 0, 893, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 902,
	0, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 0, 903, 0, 0, 893, 1753,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 902,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 1655, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 1589, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 874, 875, 1573, 894,
	895, 896, 904, 905, 906, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 877,
	0, 908, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 0,
	876, 897, 0, 0, 0, 0, 891, 0, 877, 0,
	908, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 876,
	0, 897, 0, 0, 0, 891, 0, 0, 877, 0,
	908, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 882, 0, 0, 0, 876,
	0, 897, 0, 0, 0, 891, 0, 0, 877, 0,
	908, 0, 0, 901, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 907, 876,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	899, 0, 901, 909, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 882, 1953, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 899,
	0, 0, 901, 909, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 1450, 907, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 899,
	0, 0, 901, 909, 893, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 899,
	0, 0, 0, 893, 0, 892, 0, 0, 0, 0,
	0, 1952, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 900, 902, 0, 888, 889, 890, 0,
	887, 884, 885, 886, 878, 879, 880, 881, 883, 0,
	903, 0, 0, 893, 1173, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 902, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 1005, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 0, 0, 0, 0, 0, 1418, 1419, 0, 1436,
	1437, 1438, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 1105, 0, 877, 0, 908, 1433, 0, 0, 911,
	0, 0, 0, 0, 0, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 876, 0, 0, 0, 0, 0,
	891, 897, 0, 0, 0, 910, 0, 0, 877, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 1106, 876,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 909, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 907, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	892, 0, 901, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 1435, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 1430, 1431, 1432, 0,
	1429, 1426, 1427, 1428, 1420, 1421, 1422, 1423, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 877, 0, 908, 0, 0, 0, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 876, 0, 897, 0, 0, 0,
	891, 0, 0, 877, 0, 908, 0, 0, 0, 874,
	875, 0, 894, 895, 896, 904, 905, 906, 0, 0,
	0, 0, 0, 0, 876, 897, 0, 0, 0, 0,
	891, 0, 877, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 901, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 901, 909, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 907, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 441, 899, 0, 901, 909, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 899, 0, 0, 0, 0, 893, 892,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 902,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	1451, 898, 0, 877, 0, 908, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 893, 0, 1583,
	0, 0, 0, 0, 0, 0, 0, 900, 902, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 882,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 901, 909, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 888,
	889, 890, 907, 887, 884, 885, 886, 878, 879, 880,
	881, 883, 0, 903, 899, 0, 0, 0, 0, 0,
	892, 874, 875, 0, 894, 895, 896, 904, 905, 906,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 898, 0, 877, 0, 908, 0, 0, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 0,
	0, 0, 0, 0, 0, 876, 897, 0, 0, 0,
	1409, 891, 0, 877, 0, 908, 0, 0, 893, 0,
	874, 875, 0, 894, 895, 896, 904, 905, 906, 902,
	0, 0, 0, 0, 876, 0, 897, 0, 0, 0,
	891, 0, 0, 877, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 0, 901, 909,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 882,
	888, 889, 890, 907, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 899, 0, 901, 909, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 899, 0, 0, 901, 909, 0,
	892, 0, 0, 0, 0, 1416, 0, 0, 0, 0,
	0, 0, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 899, 0, 0, 0, 0, 893,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 902,
	0, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	888, 889, 890, 0, 887, 884, 885, 886, 878, 879,
	880, 881, 883, 0, 903, 874, 875, 0, 894, 895,
	896, 904, 905, 906, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 0, 877, 0,
	908, 0, 0, 874, 875, 0, 894, 895, 896, 904,
	905, 906, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 891, 877, 0, 908, 0,
	0, 874, 875, 0, 894, 895, 896, 904, 905, 906,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 891, 877, 0, 908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 876, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	901, 909, 0, 0, 0, 892, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 901, 909,
	0, 0, 27, 892, 874, 875, 0, 0, 0, 0,
	904, 905, 906, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 877, 0, 908,
	0, 892, 0, 893, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 28, 902, 57, 0, 0, 876, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 36, 902, 0, 53, 0, 0, 0, 40, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	902, 38, 900, 882, 0, 888, 889, 890, 0, 887,
	884, 885, 886, 878, 879, 880, 881, 883, 0, 903,
	0, 901, 909, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 888, 889, 890, 0, 887, 884, 885,
	886, 878, 879, 880, 881, 883, 0, 903, 899, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 900, 0,
	0, 888, 889, 890, 0, 887, 884, 885, 886, 878,
	879, 880, 881, 883, 0, 903, 0, 39, 1418, 1419,
	0, 1436, 1437, 1438, 0, 0, 0, 0, 55, 0,
	0, 43, 0, 54, 1568, 0, 0, 0, 44, 0,
	0, 64, 0, 0, 0, 0, 47, 49, 0, 0,
	1418, 1419, 893, 1436, 1437, 1438, 51, 0, 0, 0,
	0, 0, 0, 902, 66, 0, 1567, 0, 1433, 0,
	1418, 1419, 0, 1436, 1437, 1438, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	1433, 62, 0, 0, 0, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	1433, 900, 0, 0, 0, 0, 61, 0, 887, 884,
	885, 886, 878, 879, 880, 881, 883, 0, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 752, 746, 769, 740, 760, 759, 0, 1435, 742,
	741, 0, 0, 0, 771, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1430, 1431,
	1432, 0, 1429, 1426, 1427, 1428, 1420, 1421, 1422, 1423,
	1425, 0, 0, 0, 0, 765, 0, 757, 756, 0,
	0, 0, 0, 0, 0, 0, 755, 0, 0, 0,
	1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 754, 0, 0, 0, 0, 0, 0,
	1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 0, 0, 0, 0, 0, 0, 0,
	747, 748, 749, 750, 0, 768, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 751, 745, 0, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 766, 767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	772,
}
var sqlPact = [...]int{

	24659, -1000, 56, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 624, 17357, -1000,
	-1000, -1000, -1000, -1000, -1000, 675, 623, 984, 4656, 17357,
	17357, 17098, 964, 964, 18652, -1000, -1000, 21760, -1000, 3490,
	483, 497, 483, 483, 486, 18652, 628, 630, 143, -1000,
	842, -25, 21501, 17357, 1363, 52, 15803, 343, 24659, 16839,
	21242, 17357, 16580, 293, 59, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1186, 1091, 1090, 15803,
	20983, 20724, 20465, 20206, -1000, 10699, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 754, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 350, 346,
	-1000, 16321, -1000, 939, -1000, 48, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 935, -1000, 17357, -1000, -1000, 19947,
	19688, 345, 895, -1000, -1000, 562, 404, 1376, -1000, 64,
	-1000, -1000, -1000, 1185, -1000, 927, 1184, 1180, 1179, 1174,
	1171, 1170, 403, 944, 466, -1000, 895, -1000, 895, -1000,
	-1000, -1000, 583, 18652, -1000, 15803, -1000, 19429, 17357, 17357,
	1109, 19170, -1000, 842, -1000, -1000, -1000, 953, 1362, 1362,
	1362, 1387, 163, 146, 143, 11, 17357, -1000, 344, 11,
	7302, 7302, -1000, -1000, 343, -1000, 370, 13679, -1000, 7872,
	-1000, 746, 1258, 437, 714, 1257, -117, 829, 827, 1256,
	679, 12885, 59, -1000, -1000, -1000, 9300, 4373, 15803, 17357,
	17357, 706, 18911, -1000, 1255, 131, 1245, -1000, 114, 1243,
	-1000, 114, 1234, 44, -1000, -1000, -1000, -1000, -1000, -1000,
	343, 16062, 17357, 1437, 25075, -1000, 9300, -1000, -1000, 14221,
	780, 14221, -1000, -1000, 1435, -1000, 9300, -1000, 46, 39,
	1041, 1055, 11256, 10984, 1305, 1500, -1000, -1000, -1000, 61,
	4656, 17357, 1196, 14221, 17357, 17357, 17357, 17357, 17357, 17357,
	-1000, 1040, -1000, 17357, 17357, -1000, 33, 16, -1000, 18652,
	-1000, 159, -1000, 340, 1011, 401, 168, 18393, 401, 1009,
	-1000, 953, -1000, 942, 1035, 8445, 9300, 143, -1000, -1000,
	143, 143, 9300, -1000, -1000, 17357, 11, 1434, 17357, 99,
	-1000, 23485, -1000, -1000, 9300, 9300, 9300, 9300, 9300, 875,
	-1000, -1000, -1000, 5529, -1000, -1000, 59, 339, 354, -1000,
	-1000, 338, 59, -1000, -1000, -1000, -1000, 337, 1521, 407,
	-1000, -1000, -1000, 9300, 409, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1195, 336, 335, -1000, -1000, -1000,
	-1000, 333, 332, 331, 325, 323, 322, 320, 319, 315,
	310, 308, 296, 294, 286, 270, 845, -1000, 426, -1000,
	-1000, 426, 426, -1000, 263, 263, 265, -1000, -1000, -1000,
	-1000, 263, -1000, -1000, -1000, 397, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 266, 99, -1000, -1000, -1000, 17357, 43,
	-1000, 24200, -1000, -32, 775, -1000, 15285, 1342, 1340, 1339,
	15803, 1401, 1400, 567, 17357, 17357, 564, 561, 15803, -1000,
	1169, 35, -1000, -1000, 23095, -156, -1000, -1000, 418, 104,
	1431, 104, 13161, -1000, 17357, 17357, -1000, 17357, -1000, -1000,
	17357, -1000, 17357, 17357, -1000, 17357, 223, 14767, 747, 1233,
	683, -25, 29, -1000, 1439, -1000, -1000, -1000, -1000, 113,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 265, 845, 263, 263, 263, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 397, -1000, -1000, 426,
	426, 426, -1000, -1000, 27, 24200, 560, -15, 14494, 17357,
	-1000, 58, -1000, -1000, 1168, 479, 25, 840, 1085, 732,
	-1000, -1000, -1000, -1000, 9, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1503, -1000, -1000, -1000, -1000,
	1509, 9, -1000, -1000, -1000, -1000, -1000, 1520, -1000, -1000,
	-1000, 4656, -1000, -1000, -1000, 17357, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 840, 1085, -1000, -1000,
	15803, 15026, 1424, 1232, 855, -1000, 1420, 17357, 924, 1006,
	-1000, 604, 1229, -1000, -1000, -1000, -1000, 24200, -1000, 24200,
	761, 1094, -1000, 1094, 7, -1000, 23450, -1000, 262, 21,
	-1000, 418, 7302, 12626, 25075, 25075, 17357, 626, 9300, 9300,
	9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
	9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
	1008, 9300, 557, 9300, 9300, 9300, 9300, 708, 870, 250,
	4656, -1000, 658, 658, 658, 24523, 24523, 257, 59, 53,
	23066, -1, 59, -1000, -1000, 7014, 6709, 59, 4939, -1000,
	703, 1508, 415, 24200, 1154, 1136, 261, 145, 138, 9300,
	9300, 9585, 9585, 9300, 9870, 9300, 9300, 5814, 9300, 9300,
	9300, 9300, 9300, 9300, -1000, 260, -1000, -1000, -1000, -1000,
	1507, -1000, -1000, 1499, -1000, 621, 600, 1484, 418, 136,
	7872, -1000, 747, 17357, 17357, 17357, -1000, -1000, 1005, 18134,
	1004, 25075, 17357, -1000, 258, 256, 1076, 1075, 17357, 17357,
	17875, 17616, 17357, 737, 254, 253, 17357, 826, -1000, 17357,
	17357, 813, 672, 1165, 17357, -1000, 9300, 753, 9300, 802,
	-1000, 12075, 431, 17357, 776, 92, -1000, -1000, -1000, 388,
	17357, -1000, -1000, -1000, 131, -1000, 114, 114, -1000, -1000,
	15803, -1000, -1000, -1000, -1000, -1000, -1000, 25075, 366, 356,
	-1000, 1482, 551, -1000, 550, 547, 542, -1000, 252, -1000,
	9300, 17357, 14494, -15, -21, -1000, -1000, 17357, 1085, -1000,
	-1000, -1000, -1000, 668, -1000, 835, -1000, 11528, -1000, -1000,
	-1000, 703, -1000, -38, -1000, -1000, -1000, -1000, 135, 20,
	-28, 25075, -1000, -1000, -1000, -1000, -1000, 17357, 311, 17357,
	-25, 17357, -1000, 1519, -25, 17357, 1227, 1270, 385, 17357,
	-1000, -1000, -1000, 9300, -1000, -1000, -1000, -25, 17357, -1000,
	1135, -1000, -3, 1129, -127, 15544, -1000, 11800, -1000, -1000,
	-1000, 402, 915, 915, 508, 508, 508, 508, 1235, 1235,
	488, 2099, 24674, 24674, 24674, 2040, 306, 306, 24674, 24674,
	24674, 24523, 24495, 288, 9300, 9300, 541, 854, 250, 288,
	9300, 1489, 288, 288, 288, -1000, 926, -1000, -1000, -1000,
	1161, 249, 9870, 9870, -1000, -1000, -1000, 5529, -1000, -1000,
	248, 9300, -1000, -1000, 9300, 3, -39, -1000, -1000, -5,
	-1000, -1000, 19, 9300, 9300, 9300, 132, -1000, 130, 610,
	-1000, 9300, 887, 246, 245, 9300, -1000, -1000, 24170, 3238,
	129, 1155, -104, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	128, 127, 24141, -104, 126, 23426, -1000, 9870, 9870, 9870,
	5529, 244, 125, 23155, -104, 23990, 8157, 8157, 8157, 123,
	23839, 9300, -104, 3185, 2837, 2806, -6, -7, -11, 1480,
	-17, 119, 400, 398, 115, 1135, -1000, -1000, -1000, -1000,
	528, 524, 1226, -1000, 1001, -1000, 446, -1000, 818, 9300,
	17357, 242, 236, 828, -1000, 1220, 950, 1216, 950, -1000,
	-32, 699, 9300, 9300, -1000, 521, -1000, -1000, 520, -1000,
	671, -1000, 352, 24200, -1000, 7302, 24200, -1000, 759, 1327,
	-23, -1000, -1000, 7302, 418, 13161, 12626, 7872, -24, -1000,
	-1000, -1000, 747, -1000, 414, 1477, 111, 1016, 844, 783,
	717, 1474, 24200, -38, -1000, -38, -1000, -1000, -1000, -1000,
	-1000, -1000, 17357, 1112, -1000, 15026, 222, 17357, 221, -1000,
	218, -1000, -1000, 213, 17357, 1046, 385, 1523, -1000, 401,
	-1000, 110, -1000, 1128, 1375, -1000, 12626, 946, 1083, 1080,
	12626, 1074, 891, 891, 891, -1000, 15544, 4079, -1000, -1000,
	17357, 207, 12350, 108, 1129, 9300, 288, 288, 9300, 9870,
	9870, -1000, 288, -1000, -1000, -1000, -1000, 1153, 202, 9300,
	25075, 24880, 24848, -30, 6404, -51, 59, 22770, -1000, -1000,
	354, -1000, 106, 7587, -1000, 23780, -16, -16, -1000, 1517,
	1238, -1000, 9300, 23810, -1000, 13420, 420, 896, 22740, 25075,
	25075, -1000, 9300, -1000, -1000, 1151, 9300, -1000, 25075, 25075,
	9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870,
	9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870, 1065,
	9870, 1485, 1485, 1485, -63, 6099, -1000, 1190, 1151, 9300,
	9300, 25075, 105, 101, 100, -1000, 9300, -104, 9300, 9300,
	9300, -1000, -1000, -1000, 98, -1000, 1472, -1000, -1000, -1000,
	-1000, 1128, 17357, 17357, 17357, 1214, -1000, 2521, -1000, 22710,
	-31, 17357, 17357, -1000, 1082, 1086, 471, 17357, -1000, 17357,
	-1000, 17357, 17357, 17357, -42, -43, 17357, 17357, -1000, -1000,
	-81, 7302, 220, -25, -81, 753, -1000, -77, -1000, 386,
	-1000, 133, 116, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 97, -1000, -1000, 1119, -1000, 10440, 201, 17357, 15026,
	1416, 10440, 922, 1053, 385, 1516, -1000, 604, -1000, 412,
	9300, 9300, 1129, 639, 12626, 12626, 968, 1066, 12626, -1000,
	-1000, -1000, -1000, -1000, -1000, 1071, 200, 17357, 15544, 601,
	288, 3654, 2867, 9300, 25075, 24551, -47, 9300, 9300, -1000,
	-49, -1000, 9300, -1000, -1000, 1512, 9300, 94, 93, 91,
	-1000, -1000, 24200, 9300, -1000, -1000, 22019, 9300, 88, -1000,
	87, 85, 24200, 1190, 24200, -1000, -1000, 505, 505, 1485,
	1485, 1485, 1485, 1326, 1326, 1142, 1971, 3330, 3330, 3330,
	1840, 365, 365, 3330, 3330, 3330, 1150, 1036, 194, 24900,
	9300, -53, -1000, -1000, -1000, 24200, 24200, 81, -1000, -1000,
	-1000, -104, 165, 22681, 22385, -1000, 77, 412, -1000, -1000,
	-1000, 17357, -1000, 17357, -1000, 17357, 17357, 1146, 982, -1000,
	-1000, 1063, 193, 9870, 17357, -1000, 850, -64, -66, 976,
	-1000, 974, 9300, -1000, 25075, 950, 950, -1000, 511, 510,
	-1000, -1000, -1000, -1000, -81, 1275, 17357, 1324, -1000, -1000,
	189, -1000, -1000, -1000, 869, -68, -1000, 217, 1349, 9300,
	-1000, -1000, 187, 10440, -70, 76, -25, -72, 17357, -1000,
	385, 1515, -1000, 1270, -1000, 17357, 24200, -104, 590, -1000,
	968, -1000, 186, 9300, 12626, -1000, -146, -1000, 381, -1000,
	17357, -76, -1000, 9300, 9300, 24551, -80, -1000, 288, 288,
	-1000, 22355, -1000, 23780, -1000, -1000, -1000, 24200, 849, -1000,
	22325, -1000, -1000, -1000, -1000, 9870, 1149, 184, 25075, 22296,
	-1000, -1000, 9300, -1000, -1000, -1000, -1000, -1000, 707, -1000,
	-1000, 17357, 1000, -1000, -1000, 9300, 24900, 183, 1112, 181,
	-1000, -1000, -1000, 816, -1000, -1000, 24200, 1353, -1000, -1000,
	17357, 17357, 568, -82, 17357, -1000, -1000, 5244, 17357, 850,
	10440, 1369, 59, 17357, 1369, 3777, 4939, -93, -1000, 1112,
	-1000, 850, 178, 1514, -1000, 1046, -89, -1000, 1406, 13962,
	-1000, 17357, 24200, -1000, 1071, -1000, 4656, -94, -1000, 288,
	288, -1000, -1000, 74, 896, 1365, -1000, 3672, 9870, 25075,
	-100, -1000, 3579, -1000, -1000, 1212, 3549, 1027, 17357, -1000,
	17357, 17357, 452, 17357, -1000, -1000, 696, -1000, 418, -1000,
	177, 1112, -1000, -1000, -1000, -1000, 1349, 19, 850, -1000,
	1112, 10440, -1000, 1053, 17357, 175, -1000, 170, 59, -107,
	-1000, -1000, -1000, -1000, 815, 9300, 3672, -112, -1000, -1000,
	1205, -1000, 909, 848, 73, -118, 168, -1000, 9300, -1000,
	13161, -1000, 17357, -1000, 1369, 72, 1112, -1000, -122, -1000,
	-1000, -1000, 9300, -1000, 71, 9015, 9015, -104, -1000, 17357,
	-1000, 914, 913, 642, -1000, -1000, -1000, -1000, -1000, 1027,
	24200, -119, -124, -1000, -1000, -1000, 850, -16, -1000, -1000,
	-1000, 10155, 947, 739, 23125, -1000, -1000, -1000, 1285, -1000,
	459, 901, 901, 909, -1000, 921, 1112, 66, 1446, -1000,
	-1000, -1000, -1000, -1000, -1000, 1458, -1000, -1000, 1049, -1000,
	-1000, -1000, -1000, -1000, -1000, 1512, 8730, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1746, 1745, 1387, 135, 1744, 134, 1743, 1742, 1737,
	1734, 1733, 1732, 103, 133, 132, 137, 131, 1731, 94,
	1726, 1725, 1724, 92, 1723, 1720, 1718, 66, 1716, 1711,
	128, 125, 1710, 1709, 91, 55, 174, 2351, 164, 1707,
	1704, 1702, 12, 108, 79, 1700, 102, 1698, 1697, 50,
	32, 26, 25, 1695, 99, 124, 887, 34, 1694, 1692,
	147, 23, 14, 2207, 106, 153, 138, 142, 1691, 1688,
	1687, 49, 1686, 3, 1683, 1682, 17, 61, 15, 1679,
	44, 19, 1678, 1676, 126, 1674, 76, 105, 114, 59,
	123, 118, 1673, 52, 11, 84, 1672, 13, 82, 1671,
	31, 83, 145, 1670, 65, 155, 74, 30, 62, 111,
	1669, 1668, 1665, 93, 1664, 95, 68, 1663, 1661, 77,
	1659, 144, 146, 1658, 1657, 120, 1654, 1653, 1652, 156,
	1650, 1649, 162, 1648, 7, 43, 57, 10, 113, 110,
	75, 107, 1645, 21, 1643, 1609, 733, 602, 18, 60,
	37, 85, 51, 58, 24, 1641, 1639, 109, 1638, 1637,
	1636, 1635, 1634, 80, 1633, 78, 149, 47, 53, 101,
	22, 69, 86, 154, 157, 112, 1632, 1622, 116, 1617,
	210, 1616, 1612, 1243, 140, 1607, 1604, 1601, 1209, 1203,
	972, 28, 1599, 1598, 637, 270, 1597, 1596, 119, 1595,
	1594, 150, 212, 35, 1592, 115, 1591, 96, 1590, 0,
	100, 97, 1585, 121, 81, 1581, 1580, 1572, 1569, 27,
	2, 8, 5, 6, 4, 36, 33, 1567, 1562, 143,
	89, 54, 1561, 152, 1557, 1556, 1553, 46, 1552, 16,
	1551, 20, 1543, 1542, 9, 1, 148, 1541, 98, 1540,
	1415, 1538, 151, 1531, 1528, 1417, 38, 87,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 179, 179, 178, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 246, 246, 246, 250, 250, 251,
	251, 252, 252, 252, 252, 252, 252, 252, 248, 248,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 202, 201, 201, 207, 207, 207, 68, 68, 68,
	68, 68, 69, 69, 69, 200, 200, 200, 200, 208,
	208, 208, 208, 208, 208, 70, 70, 70, 206, 206,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 17,
	247, 247, 249, 249, 31, 31, 9, 9, 10, 10,
	71, 71, 72, 72, 136, 136, 136, 136, 73, 73,
	47, 47, 47, 135, 217, 217, 218, 218, 218, 218,
	218, 218, 219, 219, 219, 219, 219, 219, 219, 215,
	215, 216, 213, 213, 214, 214, 214, 214, 253, 253,
	134, 134, 76, 76, 222, 222, 222, 222, 220, 220,
	220, 220, 220, 223, 221, 224, 224, 224, 224, 224,
	166, 166, 166, 33, 11, 53, 53, 12, 8, 8,
	118, 118, 80, 80, 170, 170, 170, 62, 62, 42,
	42, 42, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 119, 119, 120, 120, 24, 28, 32,
	32, 32, 32, 32, 255, 255, 59, 59, 59, 59,
	60, 60, 132, 132, 132, 132, 132, 54, 7, 7,
	49, 49, 50, 50, 51, 51, 52, 52, 256, 256,
	23, 23, 23, 23, 23, 65, 65, 125, 125, 125,
	127, 127, 126, 126, 126, 104, 104, 34, 85, 85,
	94, 94, 95, 95, 176, 96, 96, 27, 27, 37,
	37, 35, 35, 35, 35, 35, 35, 36, 36, 38,
	38, 38, 38, 38, 38, 38, 230, 230, 230, 233,
	233, 229, 231, 231, 232, 232, 254, 254, 105, 105,
	105, 75, 74, 74, 78, 78, 77, 79, 79, 169,
	102, 102, 102, 102, 121, 122, 122, 123, 123, 124,
	124, 101, 101, 152, 152, 39, 39, 84, 84, 86,
	86, 143, 143, 144, 144, 142, 142, 142, 171, 171,
	171, 171, 172, 172, 172, 172, 172, 172, 167, 167,
	167, 167, 168, 168, 177, 177, 108, 108, 108, 108,
	106, 106, 107, 107, 173, 173, 173, 173, 103, 103,
	174, 174, 174, 137, 137, 180, 180, 180, 83, 83,
	83, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 182, 182, 182, 182, 184, 184,
	184, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 185, 185, 192, 192, 193,
	193, 194, 195, 186, 186, 187, 187, 188, 189, 196,
	196, 196, 196, 198, 198, 190, 190, 190, 190, 190,
	191, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 225, 225,
	225, 225, 225, 225, 225, 227, 227, 228, 228, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 234, 234, 235, 235,
	237, 237, 238, 238, 239, 240, 240, 240, 241, 242,
	242, 236, 236, 243, 243, 243, 244, 244, 245, 245,
	245, 245, 245, 157, 157, 157, 158, 158, 159, 91,
	91, 154, 154, 153, 153, 153, 156, 156, 109, 109,
	197, 197, 197, 197, 197, 197, 197, 110, 110, 110,
	117, 111, 111, 112, 112, 112, 112, 112, 112, 149,
	150, 113, 113, 113, 151, 151, 160, 164, 164, 163,
	162, 162, 161, 161, 140, 140, 140, 140, 141, 141,
	139, 138, 97, 97, 98, 98, 257, 257, 165, 165,
	99, 99, 100, 93, 93, 175, 175, 175, 175, 87,
	87, 67, 67, 88, 88, 63, 63, 66, 66, 64,
	64, 64, 64, 81, 81, 82, 82, 61, 61, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	199, 199, 199, 56, 56, 56, 57, 57, 58, 58,
	204, 204, 204, 205, 205, 205, 205, 203, 203, 203,
	203, 203, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 3, 2,
	1, 4, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 2, 4,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 1, 0,
	2, 2, 1, 2, 0, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -232, 92, 100, 122, 198,
	99, 85, 116, 212, 219, -35, -37, 227, -133, 228,
	34, 237, 58, 95, 214, 209, 259, 66, -230, -38,
	-36, 307, 282, 288, 222, -39, 245, 274, 310, 245,
	130, 78, 277, -63, -56, 4, -209, -211, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 224, 225, 227, 228, 230, 233, 236,
	237, 238, 241, 239, 235, 244, 246, 247, 248, 255,
	259, 260, 261, 262, 265, 266, 267, 269, 271, 272,
	273, 278, 283, 284, 285, 286, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 102, 108, 118, 120, 125, 126,
	135, 136, 137, 138, 140, 151, 174, 176, 185, 189,
	195, 197, 203, 216, 223, 231, 232, 240, 242, 250,
	251, 252, 256, 257, 274, 275, 87, 134, 267, 266,
	78, 130, 245, 277, -16, 307, -27, -6, -14, -4,
	-23, -34, -13, -30, -17, -31, -15, 23, -203, 4,
	-209, -211, -210, -212, 55, 67, 115, 133, 127, 142,
	144, 152, 154, 166, 186, 188, 213, 229, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 42, 47, 48,
	52, 54, 56, 62, 66, 70, 71, 72, 73, 74,
	75, 84, 86, 88, 89, 90, 93, 95, 97, 103,
	104, 105, 111, 113, 114, 116, 119, 121, 128, 130,
	132, 139, 141, 147, 150, 155, 157, 158, 171, 173,
	179, 180, 181, 182, 183, 194, 199, 206, 211, 222,
	226, 234, 243, 245, 249, 253, 254, 258, 263, 264,
	268, 270, 276, 277, 279, 280, 281, 282, -56, -56,
	-56, 198, 22, -250, 22, -251, -252, 66, 92, 116,
	222, 134, 87, 266, -250, -60, 219, -56, -129, 156,
	225, 216, 255, -130, -128, -202, 250, 165, -89, -56,
	4, 22, 78, 57, 79, 117, 130, 131, 62, 63,
	146, 246, 250, 255, 66, 269, -255, 255, 255, -255,
	-255, -59, 255, 253, -60, -254, 245, 245, 268, 277,
	-118, 78, 264, -36, -38, -37, -77, -78, 263, 139,
	97, 183, -35, -37, -230, -233, 204, -229, -56, -233,
	-74, -75, 22, 89, 311, -173, -63, 181, -100, 307,
	-3, -173, 125, -63, -66, 125, -63, -56, -173, 125,
	114, 307, -97, -140, -139, -138, 305, 309, 114, 141,
	141, -174, -173, -56, 125, -67, 125, -66, -90, 125,
	-89, -90, 125, -179, -178, -205, 4, -209, -211, -210,
	274, 245, 130, -155, 307, -114, 307, -56, 22, 180,
	311, 180, -56, -129, 51, -129, 307, -131, -54, -55,
	143, 200, 253, 292, 114, 286, -70, 5, 84, -92,
	309, 114, -247, 180, 114, 114, 114, 114, 114, 114,
	286, 143, 200, 245, 277, -132, -54, -55, -132, 253,
	-60, -103, -173, -89, 125, -56, -89, 130, -56, 125,
	-77, -78, -102, -121, -122, 155, 179, -105, 22, 89,
	-105, -105, 43, 308, 308, 311, -233, -82, 307, -93,
	-175, -145, 300, -147, 298, 299, 304, 171, 287, -157,
	-63, -148, 9, 307, -160, -227, -37, 98, 29, -158,
	-159, 216, -56, 7, 8, 5, 6, -61, -182, -191,
	258, 103, 173, 47, -225, -226, 4, -209, -204, -183,
	-193, -187, -190, 140, 55, 71, 74, 72, 75, 226,
	268, 48, 28, 101, 102, 189, 195, 242, 256, 257,
	125, 174, 126, 53, 118, 151, 91, 36, 38, 40,
	41, 49, 50, 80, 82, 83, 108, 135, 136, 137,
	138, 176, 203, 231, 240, 251, 252, 275, -210, -194,
	-195, -188, -189, -196, -93, -100, 300, -63, 307, -99,
	-165, -145, 84, -44, 207, -43, 21, 23, 92, 272,
	98, 235, 235, 207, 98, 312, 207, 207, 98, 238,
	308, -87, -63, -140, -145, -141, -203, 300, -174, -65,
	-63, -65, 227, -56, 30, 98, -46, 311, 46, 210,
	98, -46, 311, 98, -46, 98, 308, 311, -173, 125,
	-66, 30, -154, -180, -181, -183, -192, -186, -190, -191,
	39, 45, 44, 248, 223, 232, 37, 135, 136, 137,
	138, 231, 36, 203, 108, 91, 83, 82, 176, 41,
	40, -194, -195, -188, -189, 80, 251, 252, 140, 38,
	50, 49, 275, 240, -91, -145, -246, -88, 245, 78,
	-64, -56, 300, -252, -246, 30, -91, 311, 311, 153,
	-69, 159, 170, 123, -201, 84, -207, -200, -166, 9,
	258, 103, 180, -206, 8, 299, -199, -205, 5, 7,
	298, -201, 84, 69, -208, 5, 4, -191, -166, 84,
	156, 309, -203, -202, -249, 111, -246, -202, -202, -202,
	-202, -202, -56, 153, -202, -202, 311, 311, -60, -46,
	311, 307, -76, 171, -231, 282, -76, 307, -57, 125,
	-56, -231, 171, -102, -122, -121, -123, -145, 22, -145,
	-147, -36, -36, -36, -79, -169, -145, -229, 30, -81,
	-56, -84, 311, 114, 10, 11, 54, 33, 298, 299,
	300, 301, 109, 302, 295, 296, 297, 294, 290, 291,
	292, 60, 160, 218, 13, 14, 15, 26, 182, 154,
	287, 127, 229, 304, 16, 17, 18, 142, 35, 128,
	30, 4, -145, -145, -145, -145, -145, 188, -98, -37,
	-145, -91, -97, -37, -153, 305, 307, -97, 307, 5,
	5, 307, -161, -145, -234, 283, 111, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 197, -198, 278, -198, -198, -184,
	307, -184, -185, 307, -184, 284, 288, 307, -84, -63,
	311, 308, 311, 253, -119, 62, 56, -135, 125, 56,
	-213, -56, 62, -214, 52, 264, 199, 113, -119, 62,
	-119, 62, 62, -173, 33, 33, 253, -66, -56, 253,
	253, -173, 114, 308, 311, 306, 315, -137, 280, -125,
	-27, 307, 84, 30, -125, -94, -95, -176, -96, -63,
	307, -56, -56, -66, -67, -89, -90, -90, -16, -178,
	98, -19, -27, -23, -34, -13, 308, 311, -83, 29,
	-115, 307, 285, 163, 81, 124, 162, -116, 221, 308,
	311, 253, 311, -88, -81, -139, -138, 114, 255, 308,
	-55, -54, -68, 202, 233, 208, 224, 311, 8, 7,
	7, 5, -203, -248, -56, -55, -54, -173, -71, -81,
	-72, -56, -136, -135, -215, -216, -213, 130, 264, 104,
	30, 98, -53, 193, 30, 180, 171, -49, 247, 98,
	-124, 216, 217, 311, -42, 31, 88, 307, 311, 308,
	-137, -175, -86, -171, -173, -37, -172, 307, -180, -180,
	-89, 250, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, 154, 127, 229, 35, 128, -145,
	253, -145, -145, -145, -145, 173, 171, 258, 103, 265,
	89, 177, -257, 243, 32, -151, -37, 307, -203, -157,
	216, 307, -140, 308, 311, -91, -156, 306, -153, -91,
	308, 308, -91, 276, 22, 89, 300, -115, 7, -164,
	-163, 279, -235, 106, 119, 307, 308, 308, -145, -145,
	-109, -197, -91, 4, 285, 163, 81, 124, 162, 221,
	-109, -110, -145, -91, -111, -146, -147, 298, 299, 304,
	307, 216, -112, -145, -91, -145, 42, 150, 254, -113,
	-145, 114, -91, -145, -145, -145, -91, -91, -91, 307,
	7, 7, 250, 250, 7, -137, 308, -165, -43, -63,
	-56, -56, 171, -135, 125, -48, 171, -180, -56, 307,
	307, 145, 145, -56, -56, 125, -56, 125, -56, -56,
	-44, 207, 307, 307, -56, 207, -56, -63, 207, 238,
	114, -63, -141, -145, -104, 211, -145, -104, -127, 180,
	-87, 274, -56, 211, -85, 311, 114, 292, -87, -46,
	-46, -46, -173, -180, 305, 305, 7, 253, 253, 253,
	253, 307, -145, -248, -64, -248, -54, 262, 59, 202,
	-207, -115, 311, 308, 308, 311, -57, 130, -57, -27,
	-89, 5, -27, -63, 98, -50, 94, -256, 292, -56,
	-169, -19, -56, -101, 119, -177, 311, 289, 67, -108,
	144, 166, 115, 152, 213, 133, -142, 312, -168, -167,
	30, -56, -37, -172, -171, 286, -145, -145, 253, -257,
	243, -151, -145, 173, 258, 103, 265, 89, 177, 114,
	307, -146, -146, -91, 307, -91, -98, -145, 306, 306,
	311, 308, -78, 311, -77, -145, -91, -91, 308, 308,
	-162, -163, 93, -145, -240, 187, 307, 307, -145, 30,
	311, 308, 114, 308, 308, -117, 194, 308, 10, 11,
	298, 299, 300, 301, 109, 302, 295, 296, 297, 294,
	290, 291, 292, 60, 160, 218, 13, 14, 15, 142,
	128, -146, -146, -146, -91, 307, 308, -149, -150, 114,
	111, 30, -113, -113, -113, 308, 114, -91, 311, 311,
	311, 308, 308, 308, 7, 308, 311, 308, 286, 286,
	308, -101, 253, 253, 98, 171, 271, -217, -214, -145,
	-81, 307, 307, -41, 92, 227, -120, 98, -46, 98,
	-46, 253, -119, 62, -91, -91, 253, 253, 238, 306,
	-93, 211, 61, 308, -93, -137, -95, -86, -165, 308,
	306, 7, 7, 308, 163, 124, 162, -116, 162, -116,
	-116, 7, -56, -73, 129, -136, 307, -57, 307, 307,
	-76, 307, -56, -51, 149, -256, 4, -231, 308, -152,
	121, 43, -171, 177, 144, 144, -171, -108, 144, -106,
	186, -106, -106, -168, -203, 313, -56, 307, 308, -145,
	-145, -146, -146, 114, 307, -145, -154, 26, 26, 308,
	-91, 308, 311, 308, -153, 308, 276, -78, -78, -78,
	5, 95, -145, 249, -241, -56, 307, 280, -77, 308,
	-180, -180, -145, -149, -145, -180, -180, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, 89, 171, 177, -146,
	311, -91, 308, -150, -149, -145, -145, -180, 308, 308,
	308, -91, -145, -145, -145, 308, 7, -152, -56, -56,
	-135, 98, -218, 62, -219, 54, 104, 66, 171, 173,
	264, 199, 52, 84, 206, 308, 308, -81, -81, 171,
	84, 171, 84, 77, 260, -56, -56, -63, -56, -56,
	308, 308, -56, -63, -93, -126, 307, 180, -27, -104,
	292, 306, 306, 308, 128, -80, -170, -56, -228, 307,
	-225, -226, -61, 307, -81, -71, 30, -80, 180, -52,
	148, -256, 5, -49, -237, 281, -145, -91, 244, -171,
	-171, -107, 270, 180, 144, -171, -144, -143, 112, 169,
	307, -81, -167, 26, 26, -145, -154, 308, -145, -145,
	308, -145, 5, -145, 308, 308, 308, -145, -242, -56,
	-145, 308, 308, 308, -150, 114, 89, 177, 307, -145,
	308, 308, 311, 308, 308, 308, -237, -135, -56, -89,
	-56, 104, 125, 173, 145, 307, -146, -63, -134, -253,
	65, 241, 308, 308, 173, 173, -145, -180, -46, -46,
	253, 253, 90, -81, 62, -100, -37, 307, 190, 308,
	311, -62, -97, 54, -62, -145, 307, -80, 308, 308,
	-27, 308, -63, -256, 5, -50, -238, -239, -56, 250,
	-107, 307, -145, -171, 311, 314, 292, -81, 308, -145,
	-145, 308, 308, -78, -236, 192, 308, -146, 114, 307,
	-154, 308, -145, -219, -57, 171, -145, -58, 307, -73,
	307, 206, -45, 54, -56, -56, 266, 172, 308, -56,
	-56, -134, -170, -42, -89, -42, 308, -91, 308, -73,
	-134, 307, 5, -51, 311, 30, -148, -61, -56, -81,
	-143, -203, 308, 308, -78, 43, -146, -154, 308, 308,
	98, 308, -222, 161, -56, -81, -63, -40, 270, -89,
	227, -137, 307, -73, -62, -78, -134, -73, -80, -52,
	-239, -241, 307, 308, -243, 201, 217, -91, 308, 104,
	-220, -223, -221, 180, 115, 191, 230, 308, 308, -76,
	-145, -94, -81, -42, 308, -73, 308, -91, 308, -244,
	-245, 35, 261, 69, -145, -244, -56, -221, 180, -223,
	180, 266, 87, -222, -137, 308, -134, -78, -245, 196,
	110, 216, 196, 110, -224, 168, 210, 46, 227, -224,
	-220, -47, 46, 210, -73, 308, 26, 20, 173, 84,
	-245,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 367, -2, 0, 134, 0,
	315, 0, 315, 315, 319, 0, 397, 281, 394, -2,
	405, 0, 0, 0, 403, 381, 0, 0, -2, 0,
	0, 0, 0, 0, 805, 833, 834, 835, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 0, 199, 847,
	848, 849, 850, 851, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 100, 107,
	108, 920, 110, 0, 117, 118, 119, 121, 122, 123,
	124, 125, 126, 127, 0, 308, 934, 321, 130, 898,
	938, 1007, 953, 137, 147, 0, 1013, -2, 151, 78,
	180, 181, 182, 0, 184, 201, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 198, 326, 314, 326, 311,
	312, 313, 316, 0, 307, 0, 396, 0, 0, 0,
	0, 0, 280, -2, 377, 378, -2, 0, 400, 400,
	400, 0, 0, 378, 0, 386, 924, 389, 816, 387,
	0, 0, 402, 401, 0, 382, 464, 0, 425, 0,
	2, 0, 992, 464, 0, 992, 808, 0, 0, 992,
	0, 0, 806, 782, 774, 775, 779, 0, 0, 0,
	0, 0, 470, 68, 992, 51, 992, 801, 51, 992,
	76, 51, 992, 0, 95, 97, 843, 844, 845, 846,
	1018, 0, 0, 0, 0, 105, 0, 109, 111, 0,
	0, 0, 320, 131, 981, 133, 0, 136, 138, 139,
	0, 0, 0, 0, 0, 0, 150, 175, 176, 79,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 195, 0, 0, 309, 322, 323, 310, 0,
	318, 51, 468, 253, 992, 393, 253, 837, 393, 992,
	-2, 0, 373, 412, 413, 0, 0, 0, 398, 399,
	0, 0, 0, 369, 370, 0, 388, 0, 0, 428,
	793, 797, 798, 557, 0, 0, 0, 0, 0, 0,
	646, 647, 784, 0, 650, 651, 652, 986, 0, 656,
	657, 1007, 805, 819, 820, 821, 822, 0, 0, 0,
	827, 828, 829, 773, 697, 666, -2, -2, 817, 494,
	495, 496, 497, -2, 1020, 670, 672, 674, 675, 676,
	677, 0, 970, 987, 988, 1003, 1004, 1012, 1016, 1017,
	992, 1000, 993, 982, 990, 999, 876, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 842, 519,
	520, 525, 526, 528, 428, 426, 465, 466, 0, 0,
	790, 788, 789, 28, 304, 30, 0, 304, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 799, 783, 778, 0, 780, 781, 474, 0,
	345, 0, 0, 471, 0, 0, 70, 0, 49, 50,
	0, 72, 0, 0, 74, 0, 395, 0, 0, 992,
	0, 395, 0, 731, 480, 481, 482, 483, 484, 554,
	487, 488, 489, 490, 491, 492, 493, 501, 502, 503,
	504, 505, 506, 507, 516, 0, 500, 500, 500, 513,
	514, 517, 518, 523, 524, 535, 536, 538, 540, 534,
	534, 534, 531, 532, 0, 729, 0, 114, 0, 871,
	803, 809, 810, 120, 0, 0, 0, 0, 0, 0,
	142, 162, 163, 164, 143, 145, 152, 154, 155, 156,
	165, 166, 167, 168, 270, 0, 272, 178, 179, 830,
	0, 144, 146, 148, 149, 169, 170, 0, 172, 173,
	174, 0, 80, 183, 185, 0, 200, 186, 187, 188,
	189, 190, 191, 194, 196, 197, 0, 0, 317, 273,
	0, 211, 0, 0, 276, 392, 0, 0, 0, 992,
	836, 331, 0, 376, 410, 411, 414, 417, 418, 415,
	557, 383, 384, 385, 406, 407, 291, 390, 0, 0,
	813, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 787, 0,
	0, 796, 562, 563, 564, 586, 587, 0, 648, -2,
	729, 0, 653, 654, 655, 0, 0, -2, 0, 824,
	554, 0, 0, 772, 699, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 752, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 522, 533, 530, 529, 511,
	0, 510, 508, 0, 512, 0, 0, 0, 474, 0,
	0, 792, 0, 0, 0, 0, 303, 32, 992, 0,
	53, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 776, 779, 356, 0, 356,
	347, 0, 0, 0, 343, 359, 360, 362, 363, 0,
	0, 472, 69, 802, 51, 77, 51, 51, 83, 96,
	0, 98, 101, 102, 103, 104, 99, 0, 475, 477,
	485, 0, 541, 542, 543, 544, 545, 546, 555, 106,
	0, 0, 0, 115, 116, 811, 812, 0, 0, 135,
	140, 141, 327, 0, 159, 0, 161, 0, 271, 832,
	831, 554, 81, 202, 128, 324, 325, 469, 0, 0,
	210, 813, 212, 214, 215, 216, 217, 837, 0, 837,
	0, 0, 274, 0, 0, 0, 0, 333, 339, 0,
	416, 419, 420, 0, 409, 289, 290, 395, 0, 815,
	422, 794, 455, 429, 437, 453, 440, 0, 558, 559,
	560, 0, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, -2, -2, -2, 578, 579, 580, -2, -2,
	-2, 584, 585, -2, 0, 0, 0, 787, 0, -2,
	0, 594, -2, -2, -2, 598, 0, 601, 603, 605,
	0, 0, 0, 0, 786, 615, 764, 0, 795, 600,
	0, 0, 785, 784, 0, 0, 0, 735, 736, 0,
	-2, 658, 405, 0, 0, 0, 0, 825, 0, 771,
	767, 0, 707, 0, 0, 0, 671, 673, 0, 0,
	0, 0, 739, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 729, 749, 0, 0, 617, 0, 0, 0,
	0, 1007, 0, 729, 757, 0, 0, 0, 0, 0,
	729, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 422, 467, 791, 31, 293,
	0, 0, 0, 34, 992, 42, 0, 225, 0, 0,
	0, 0, 0, 306, 43, 992, 51, 992, 51, 44,
	29, 304, 0, 0, 297, 0, 292, 295, 0, 59,
	0, 800, 0, 778, 67, 0, 473, 340, 341, 0,
	0, 349, 346, 0, 474, 0, 0, 0, 0, 71,
	73, 75, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 112, 804, 113, 132, 157, 158, 160,
	153, 171, 0, 219, 252, 0, 0, 837, 0, 208,
	253, 275, 277, 0, 0, 335, 339, 0, 338, 393,
	408, 0, 814, 424, 0, 427, 0, 0, 0, 0,
	0, 0, 461, 461, 461, 459, 453, 0, 439, 452,
	0, 451, -2, 440, 0, 0, -2, -2, 0, 0,
	0, 616, -2, 599, 602, 604, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 649, 730, 733, 734,
	0, -2, 0, 0, 404, 405, 405, 405, 664, 0,
	0, 768, 0, 0, 665, 0, 0, 0, 0, 0,
	0, 680, 0, 681, 682, 0, 0, 683, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 621, 622, 0, 0, 684, 755, 756, 0,
	0, 0, 0, 0, 0, 689, 0, 762, 0, 0,
	0, 693, 694, 695, 0, 498, 0, 515, 537, 539,
	527, 424, 0, 0, 0, 0, 52, 223, 242, 0,
	0, 0, 0, 36, 0, 0, 0, 0, 40, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 60, 777,
	355, 0, 354, 0, 344, 356, 361, 358, 364, 0,
	478, 0, 0, 486, 547, 548, 549, 550, 551, 552,
	553, 0, 129, 206, 0, 213, 0, 0, 0, 211,
	0, 0, 0, 337, 339, 0, 330, 331, 391, 701,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 456,
	460, 457, 458, 438, 435, 0, 449, 0, 442, 561,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 765,
	0, 724, 0, -2, 737, 659, 0, 0, 0, 0,
	826, 766, 770, 0, 705, 706, 710, 0, 0, 669,
	0, 0, 738, 748, 750, 618, 619, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, -2, -2, -2,
	636, 637, 638, -2, -2, -2, 0, 0, 0, 751,
	0, 0, 727, 753, 754, 759, 760, 0, 686, 687,
	688, 761, 0, 0, 0, 521, 0, 701, 299, 301,
	33, 0, 224, 0, 227, 0, 0, 0, 0, 233,
	234, 0, 0, 0, 0, 244, 251, 0, 0, 0,
	48, 0, 0, 305, 0, 51, 51, 294, 0, 0,
	204, 205, 298, 296, 342, 0, 0, 0, 348, 357,
	0, 479, 476, 556, 0, 0, 282, 288, 288, 0,
	667, 668, 0, 0, 0, 0, 0, 0, 0, 328,
	339, 0, 332, 333, 379, 0, 423, 421, 0, 443,
	0, 445, 0, 0, 0, 447, 0, 433, 0, 432,
	0, 0, 441, 0, 0, -2, 0, 609, -2, -2,
	723, 730, 823, 405, 660, 662, 663, 769, 712, 709,
	0, 696, 678, 679, 747, 0, 0, 0, 0, 730,
	726, 685, 0, 691, 692, 499, 380, 35, 0, 228,
	229, 837, 0, 232, 235, 0, 237, 839, 219, 0,
	248, 249, 246, 0, 37, 38, 47, 55, 39, 45,
	0, 0, 0, 0, 0, 365, 366, 0, 0, 251,
	0, 291, 818, 0, 291, 0, 0, 0, 241, 219,
	209, 251, 0, 0, 334, 335, 700, 702, 0, 0,
	444, 0, 463, 446, 0, 436, 0, 0, 450, -2,
	-2, 610, 725, 0, 405, 0, 698, -2, 0, 0,
	0, 728, 0, 226, 230, 0, 0, 257, 0, 245,
	0, 0, 57, 0, 300, 302, 0, 351, 474, 353,
	0, 219, 283, 284, 287, 285, 288, 405, 251, 207,
	219, 0, 336, 337, 0, 0, 454, 0, 0, 0,
	434, 431, 448, 661, 715, 0, -2, 0, 644, 690,
	0, 236, 262, 0, 0, 0, 253, 41, 0, 54,
	0, 352, 0, 239, 291, 0, 219, 278, 0, 329,
	703, 704, 0, 462, 0, 0, 0, 711, 645, 0,
	238, 258, 259, 0, 254, 255, 256, 838, 250, 257,
	56, 474, 0, 286, 659, 240, 251, 405, 708, 713,
	716, -2, 956, 868, 0, 714, 231, 260, 0, 261,
	0, 0, 0, 262, 350, 222, 219, 0, 0, 718,
	719, 720, 721, 722, 263, 0, 266, 267, 0, 264,
	247, 218, 220, 221, 279, 0, 0, 265, 268, 269,
	717,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 296, 3, 302, 297, 3,
	307, 308, 300, 298, 311, 299, 309, 301, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 315, 310,
	290, 292, 291, 3, 312, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 305, 3, 306, 295, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 313, 294, 314, 304,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 293, 57633, 303, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:723
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:729
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:827
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:850
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:860
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:923
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:927
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1057
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = DropDefault
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return unimplemented(sqllex)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1848
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = true
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = false
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1983
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = Ascending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = Descending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2037
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2052
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2095
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.str = ""
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = ""
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2235
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2242
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			return unimplemented(sqllex)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2550
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2553
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = true
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = false
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = true
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2585
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2586
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &From{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.str = astFullJoin
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.str = astLeftJoin
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.str = astRightJoin
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.str = astInnerJoin
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2931
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3021
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3027
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3035
		{
			return unimplemented(sqllex)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3091
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = nil
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3212
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3244
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3284
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3328
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3332
		{
			return unimplemented(sqllex)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3367
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			return unimplemented(sqllex)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3743
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3797
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3798
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3841
		{
			return unimplemented(sqllex)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			return unimplemented(sqllex)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			return unimplemented(sqllex)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			return unimplemented(sqllex)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			return unimplemented(sqllex)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3890
		{
			return unimplemented(sqllex)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3934
		{
			return unimplemented(sqllex)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3935
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3939
		{
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Window(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.str = ""
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4028
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4032
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4040
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4556
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4592
		{
			return unimplemented(sqllex)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = DNull
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.str = ""
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
