// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOB = 57492
const JOIN = 57493
const KEY = 57494
const KEYS = 57495
const KV = 57496
const LATERAL = 57497
const LC_CTYPE = 57498
const LC_COLLATE = 57499
const LEADING = 57500
const LEAST = 57501
const LEFT = 57502
const LEVEL = 57503
const LIKE = 57504
const LIMIT = 57505
const LOCAL = 57506
const LOCALTIME = 57507
const LOCALTIMESTAMP = 57508
const LOW = 57509
const LSHIFT = 57510
const MATCH = 57511
const MINUTE = 57512
const MONTH = 57513
const NAN = 57514
const NAME = 57515
const NAMES = 57516
const NATURAL = 57517
const NEXT = 57518
const NO = 57519
const NO_INDEX_JOIN = 57520
const NORMAL = 57521
const NOT = 57522
const NOTHING = 57523
const NULL = 57524
const NULLIF = 57525
const NULLS = 57526
const NUMERIC = 57527
const OF = 57528
const OFF = 57529
const OFFSET = 57530
const OID = 57531
const ON = 57532
const ONLY = 57533
const OPTIONS = 57534
const OR = 57535
const ORDER = 57536
const ORDINALITY = 57537
const OUT = 57538
const OUTER = 57539
const OVER = 57540
const OVERLAPS = 57541
const OVERLAY = 57542
const PARENT = 57543
const PARTIAL = 57544
const PARTITION = 57545
const PASSWORD = 57546
const PAUSE = 57547
const PLACING = 57548
const POSITION = 57549
const PRECEDING = 57550
const PRECISION = 57551
const PREPARE = 57552
const PRIMARY = 57553
const PRIORITY = 57554
const QUERIES = 57555
const QUERY = 57556
const RANGE = 57557
const READ = 57558
const REAL = 57559
const RECURSIVE = 57560
const REF = 57561
const REFERENCES = 57562
const REGCLASS = 57563
const REGPROC = 57564
const REGPROCEDURE = 57565
const REGNAMESPACE = 57566
const REGTYPE = 57567
const RENAME = 57568
const REPEATABLE = 57569
const RELEASE = 57570
const RESET = 57571
const RESTORE = 57572
const RESTRICT = 57573
const RESUME = 57574
const RETURNING = 57575
const REVOKE = 57576
const RIGHT = 57577
const ROLLBACK = 57578
const ROLLUP = 57579
const ROW = 57580
const ROWS = 57581
const RSHIFT = 57582
const SAVEPOINT = 57583
const SCATTER = 57584
const SEARCH = 57585
const SECOND = 57586
const SELECT = 57587
const SERIAL = 57588
const SERIALIZABLE = 57589
const SESSION = 57590
const SESSIONS = 57591
const SESSION_USER = 57592
const SET = 57593
const SETTING = 57594
const SETTINGS = 57595
const SHOW = 57596
const SIMILAR = 57597
const SIMPLE = 57598
const SMALLINT = 57599
const SMALLSERIAL = 57600
const SNAPSHOT = 57601
const SOME = 57602
const SPLIT = 57603
const SQL = 57604
const START = 57605
const STATUS = 57606
const STDIN = 57607
const STRICT = 57608
const STRING = 57609
const STORING = 57610
const SUBSTRING = 57611
const SYMMETRIC = 57612
const SYSTEM = 57613
const TABLE = 57614
const TABLES = 57615
const TEMPLATE = 57616
const TESTING_RANGES = 57617
const TESTING_RELOCATE = 57618
const TEXT = 57619
const THEN = 57620
const TIME = 57621
const TIMESTAMP = 57622
const TIMESTAMPTZ = 57623
const TO = 57624
const TRAILING = 57625
const TRACE = 57626
const TRANSACTION = 57627
const TREAT = 57628
const TRIM = 57629
const TRUE = 57630
const TRUNCATE = 57631
const TYPE = 57632
const UNBOUNDED = 57633
const UNCOMMITTED = 57634
const UNION = 57635
const UNIQUE = 57636
const UNKNOWN = 57637
const UPDATE = 57638
const UPSERT = 57639
const USE = 57640
const USER = 57641
const USERS = 57642
const USING = 57643
const UUID = 57644
const VALID = 57645
const VALIDATE = 57646
const VALUE = 57647
const VALUES = 57648
const VARCHAR = 57649
const VARIADIC = 57650
const VIEW = 57651
const VARYING = 57652
const WHEN = 57653
const WHERE = 57654
const WINDOW = 57655
const WITH = 57656
const WITHIN = 57657
const WITHOUT = 57658
const WRITE = 57659
const YEAR = 57660
const ZONE = 57661
const NOT_LA = 57662
const WITH_LA = 57663
const AS_LA = 57664
const POSTFIXOP = 57665
const UMINUS = 57666

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5633

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	343, 35,
	-2, 455,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	1, 428,
	190, 428,
	233, 428,
	339, 428,
	341, 428,
	343, 428,
	-2, 438,
	-1, 74,
	1, 431,
	190, 431,
	233, 431,
	339, 431,
	341, 431,
	343, 431,
	-2, 437,
	-1, 83,
	1, 35,
	343, 35,
	-2, 455,
	-1, 463,
	1, 180,
	343, 180,
	-2, 1030,
	-1, 533,
	109, 465,
	163, 465,
	188, 465,
	-2, 434,
	-1, 536,
	109, 464,
	163, 464,
	188, 464,
	-2, 432,
	-1, 616,
	340, 959,
	-2, 952,
	-1, 617,
	340, 960,
	-2, 953,
	-1, 623,
	5, 628,
	340, 628,
	-2, 1147,
	-1, 647,
	5, 589,
	-2, 1121,
	-1, 648,
	5, 622,
	340, 622,
	-2, 1123,
	-1, 649,
	5, 597,
	-2, 1124,
	-1, 650,
	5, 596,
	-2, 1125,
	-1, 651,
	5, 622,
	340, 622,
	-2, 1128,
	-1, 652,
	5, 622,
	340, 622,
	-2, 1129,
	-1, 653,
	5, 623,
	-2, 1132,
	-1, 654,
	5, 583,
	-2, 1133,
	-1, 655,
	5, 583,
	-2, 1134,
	-1, 656,
	5, 604,
	-2, 1138,
	-1, 657,
	5, 584,
	-2, 1143,
	-1, 658,
	5, 585,
	-2, 1144,
	-1, 659,
	5, 586,
	-2, 1145,
	-1, 660,
	5, 587,
	-2, 1146,
	-1, 661,
	5, 583,
	-2, 1151,
	-1, 662,
	5, 590,
	-2, 1156,
	-1, 663,
	5, 588,
	-2, 1159,
	-1, 664,
	5, 620,
	340, 620,
	-2, 1161,
	-1, 665,
	5, 624,
	-2, 1164,
	-1, 666,
	5, 626,
	-2, 1165,
	-1, 667,
	5, 619,
	340, 619,
	-2, 1170,
	-1, 785,
	109, 464,
	163, 464,
	188, 464,
	-2, 435,
	-1, 894,
	100, 438,
	109, 438,
	145, 438,
	163, 438,
	188, 438,
	194, 438,
	293, 438,
	-2, 747,
	-1, 903,
	340, 936,
	-2, 924,
	-1, 1177,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 663,
	-1, 1178,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 664,
	-1, 1179,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 665,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 669,
	-1, 1184,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 670,
	-1, 1185,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 671,
	-1, 1188,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 676,
	-1, 1194,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 678,
	-1, 1196,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 682,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 683,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 684,
	-1, 1199,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 685,
	-1, 1225,
	199, 818,
	-2, 821,
	-1, 1261,
	118, 858,
	340, 959,
	-2, 952,
	-1, 1262,
	118, 859,
	-2, 1117,
	-1, 1263,
	118, 860,
	-2, 1029,
	-1, 1264,
	118, 861,
	-2, 995,
	-1, 1265,
	118, 862,
	-2, 1011,
	-1, 1266,
	118, 863,
	-2, 1028,
	-1, 1267,
	118, 864,
	-2, 1079,
	-1, 1449,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 677,
	-1, 1450,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 679,
	-1, 1455,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 680,
	-1, 1473,
	199, 817,
	-2, 820,
	-1, 1638,
	100, 438,
	109, 438,
	145, 438,
	163, 438,
	188, 438,
	194, 438,
	293, 438,
	-2, 519,
	-1, 1680,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 681,
	-1, 1685,
	148, 0,
	-2, 697,
	-1, 1695,
	199, 819,
	-2, 822,
	-1, 1737,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 724,
	-1, 1738,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 725,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 726,
	-1, 1743,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 730,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 731,
	-1, 1745,
	13, 0,
	14, 0,
	15, 0,
	323, 0,
	324, 0,
	325, 0,
	-2, 732,
	-1, 1825,
	1, 520,
	70, 520,
	100, 520,
	109, 520,
	119, 520,
	123, 520,
	125, 520,
	138, 520,
	145, 520,
	151, 520,
	160, 520,
	163, 520,
	175, 520,
	188, 520,
	190, 520,
	194, 520,
	233, 520,
	235, 520,
	293, 520,
	301, 520,
	312, 520,
	313, 520,
	322, 520,
	339, 520,
	341, 520,
	343, 520,
	344, 520,
	-2, 519,
	-1, 1875,
	148, 0,
	-2, 698,
	-1, 1878,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 701,
	-1, 1879,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 703,
	-1, 1994,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 702,
	-1, 1995,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 704,
	-1, 2002,
	148, 0,
	-2, 733,
	-1, 2069,
	148, 0,
	-2, 734,
	-1, 2150,
	36, 0,
	132, 0,
	162, 0,
	255, 0,
	320, 0,
	326, 0,
	-2, 1120,
}

const sqlPrivate = 57344

const sqlLast = 31380

var sqlAct = [...]int{

	617, 2133, 1781, 2149, 2178, 2098, 2134, 1314, 2135, 1306,
	1077, 2148, 1714, 1966, 1821, 1923, 1992, 1390, 2026, 1361,
	328, 1820, 607, 1791, 1847, 537, 1947, 1083, 1650, 678,
	58, 1833, 1934, 972, 1633, 593, 515, 96, 96, 615,
	96, 558, 955, 1651, 1928, 1610, 314, 23, 1565, 1379,
	330, 96, 96, 96, 1612, 1360, 1808, 1636, 96, 1539,
	843, 96, 1799, 1624, 1397, 1079, 1365, 1364, 815, 96,
	818, 805, 524, 1315, 614, 1538, 1484, 1248, 96, 96,
	1156, 899, 96, 1223, 1398, 96, 96, 96, 96, 1445,
	1119, 96, 96, 1619, 1128, 1103, 1403, 1151, 1386, 462,
	1037, 944, 1287, 1353, 723, 1233, 1400, 542, 587, 1211,
	844, 573, 1208, 820, 806, 518, 722, 1242, 519, 699,
	688, 544, 73, 1308, 312, 1290, 929, 690, 933, 691,
	23, 586, 1258, 890, 1368, 1108, 547, 788, 787, 789,
	88, 1035, 74, 510, 458, 448, 609, 437, 948, 75,
	92, 545, 536, 1848, 684, 793, 768, 769, 459, 2037,
	1472, 1307, 2038, 451, 1631, 957, 957, 1245, 2176, 1634,
	73, 840, 508, 957, 2158, 541, 2145, 1846, 297, 1340,
	327, 1311, 2144, 2141, 2131, 1340, 840, 840, 555, 2128,
	541, 561, 840, 1576, 568, 2117, 2095, 834, 1333, 840,
	1509, 1510, 1577, 2079, 2075, 73, 1846, 840, 1340, 2071,
	79, 1246, 1333, 564, 501, 1476, 534, 845, 846, 2063,
	1477, 2033, 2062, 533, 2034, 2020, 72, 1152, 1846, 2017,
	549, 2015, 840, 1996, 1846, 1977, 1333, 81, 840, 1976,
	848, 1950, 1846, 1902, 1340, 1880, 1340, 1877, 1340, 1622,
	1333, 1110, 47, 1247, 1244, 1867, 1866, 1845, 1340, 1340,
	1846, 48, 1777, 1772, 847, 1305, 1305, 1689, 845, 846,
	1340, 82, 1599, 1556, 1554, 840, 1557, 1340, 35, 77,
	1509, 1510, 327, 49, 1553, 1552, 78, 1340, 1340, 36,
	63, 848, 1475, 1473, 2085, 1394, 1340, 1340, 840, 1155,
	1622, 1344, 38, 1515, 1340, 76, 1109, 96, 96, 96,
	96, 96, 96, 1152, 524, 847, 65, 1596, 845, 846,
	853, 862, 39, 1339, 72, 1340, 1340, 1249, 72, 1332,
	1304, 696, 1333, 1305, 1116, 1155, 1750, 1115, 1692, 79,
	1483, 848, 1117, 52, 542, 1509, 1510, 1600, 958, 958,
	47, 840, 966, 66, 47, 967, 958, 51, 1525, 48,
	1389, 1351, 1227, 48, 801, 847, 81, 1509, 1510, 1027,
	571, 853, 711, 554, 1849, 53, 83, 577, 1049, 1637,
	79, 49, 1942, 1515, 737, 49, 2168, 2147, 2140, 2103,
	2066, 2018, 1907, 1903, 521, 1910, 1895, 1894, 1524, 800,
	82, 1243, 79, 1893, 1889, 1888, 1887, 81, 77, 693,
	693, 62, 1886, 685, 1825, 78, 1798, 1779, 1765, 1760,
	1759, 853, 1758, 1338, 811, 1602, 863, 1700, 1576, 81,
	1526, 1635, 700, 96, 1310, 1219, 1598, 1561, 1525, 1558,
	694, 82, 1546, 97, 1537, 1508, 1505, 1504, 1515, 1502,
	96, 1489, 1488, 96, 96, 677, 1407, 1255, 907, 1082,
	54, 961, 956, 82, 524, 50, 1335, 1254, 800, 1075,
	1515, 77, 524, 799, 1716, 76, 863, 1109, 78, 900,
	675, 76, 2120, 68, 69, 37, 2082, 55, 2061, 56,
	2060, 67, 2059, 331, 1509, 1510, 57, 76, 864, 2051,
	79, 96, 2049, 1525, 79, 2041, 60, 96, 741, 62,
	1526, 2029, 2013, 62, 2004, 525, 1963, 1952, 64, 1518,
	1519, 1511, 1512, 1513, 1514, 1516, 1517, 81, 96, 96,
	96, 81, 96, 1917, 1900, 1872, 1852, 1220, 849, 850,
	851, 852, 854, 855, 70, 1909, 1813, 96, 864, 1789,
	1787, 1786, 1784, 71, 327, 1684, 1659, 1658, 96, 786,
	1536, 82, 1498, 1497, 733, 82, 1494, 1469, 1464, 77,
	1213, 524, 96, 77, 1436, 1526, 78, 1434, 330, 524,
	78, 1421, 740, 1420, 668, 1393, 858, 856, 857, 849,
	850, 851, 852, 854, 855, 76, 810, 1515, 841, 76,
	72, 1511, 1512, 1513, 1514, 1516, 1517, 741, 845, 846,
	785, 934, 937, 774, 721, 741, 716, 718, 1297, 1253,
	1076, 559, 542, 809, 941, 927, 47, 778, 926, 781,
	1421, 848, 925, 924, 332, 48, 858, 856, 857, 849,
	850, 851, 852, 854, 855, 923, 772, 922, 811, 921,
	920, 919, 770, 918, 917, 847, 526, 49, 916, 577,
	915, 914, 913, 1520, 1518, 1519, 1511, 1512, 1513, 1514,
	1516, 1517, 912, 973, 911, 900, 904, 96, 845, 846,
	893, 838, 96, 96, 96, 76, 96, 534, 1511, 1512,
	1513, 1514, 1516, 1517, 533, 796, 797, 2159, 802, 804,
	720, 848, 676, 96, 96, 707, 705, 946, 2036, 1939,
	1914, 96, 845, 846, 1585, 96, 1940, 896, 522, 1385,
	96, 1882, 839, 1814, 1586, 847, 891, 1384, 731, 2065,
	524, 524, 2039, 1613, 960, 848, 828, 963, 330, 1509,
	1510, 1913, 1578, 729, 96, 1152, 1637, 96, 1560, 96,
	96, 96, 96, 96, 96, 826, 903, 525, 1050, 847,
	96, 1559, 939, 1448, 760, 96, 96, 940, 732, 1033,
	827, 909, 96, 1080, 1446, 1336, 79, 1929, 931, 932,
	531, 853, 1307, 96, 935, 62, 730, 1717, 685, 1234,
	938, 1480, 1081, 906, 1572, 930, 86, 2106, 1646, 821,
	307, 822, 96, 81, 2166, 96, 821, 764, 822, 968,
	2165, 1860, 1343, 494, 96, 853, 1074, 1513, 1514, 1516,
	1517, 757, 96, 495, 1107, 1593, 96, 811, 1064, 758,
	1987, 970, 950, 1018, 96, 96, 947, 82, 96, 500,
	1986, 96, 499, 1053, 765, 77, 1026, 1985, 330, 1086,
	85, 1020, 78, 1984, 308, 1022, 1674, 1673, 1643, 1021,
	73, 1642, 2074, 1051, 1024, 1493, 1492, 1491, 1165, 1490,
	863, 313, 1038, 823, 1140, 540, 1045, 1143, 1025, 1044,
	823, 1451, 1341, 1195, 1149, 1121, 1148, 1129, 1122, 1058,
	1145, 1670, 729, 771, 1121, 1034, 1509, 1510, 526, 303,
	1120, 670, 821, 570, 822, 1055, 1206, 525, 1059, 1060,
	1061, 1062, 1063, 1133, 1135, 525, 1871, 1073, 1301, 1300,
	539, 1204, 1166, 1068, 1069, 1088, 610, 1090, 1089, 1380,
	1245, 1072, 1138, 946, 855, 730, 534, 507, 1105, 534,
	534, 1154, 864, 1099, 1150, 1113, 1100, 1101, 304, 1677,
	1132, 756, 96, 1968, 96, 96, 1125, 96, 1071, 1767,
	96, 1146, 96, 96, 703, 96, 96, 1210, 524, 541,
	1210, 527, 1509, 1510, 1246, 1562, 823, 2073, 942, 1052,
	1043, 1042, 1231, 521, 516, 1327, 1200, 84, 719, 1661,
	2118, 309, 951, 532, 1201, 1309, 1202, 1309, 528, 1515,
	1207, 851, 852, 854, 855, 1249, 1234, 2172, 529, 1566,
	2165, 1432, 1387, 1388, 525, 2114, 1247, 1244, 311, 1224,
	1218, 331, 525, 1221, 87, 1441, 1228, 1438, 310, 836,
	1236, 856, 857, 849, 850, 851, 852, 854, 855, 2115,
	2187, 1260, 1260, 1271, 1131, 1282, 835, 831, 526, 1268,
	330, 1294, 1295, 1296, 1525, 1592, 526, 957, 96, 2054,
	1594, 1324, 693, 1046, 693, 1517, 829, 754, 538, 2137,
	1352, 96, 96, 96, 1313, 1515, 96, 96, 928, 298,
	1323, 830, 824, 96, 1322, 1461, 700, 1329, 73, 824,
	1249, 1328, 1325, 73, 1326, 1070, 1331, 1337, 832, 1217,
	1459, 702, 1203, 755, 1215, 306, 305, 819, 1668, 1205,
	2171, 96, 330, 761, 831, 744, 1707, 1118, 1395, 96,
	96, 96, 1012, 1406, 1570, 96, 1526, 1130, 96, 935,
	1525, 938, 1405, 829, 96, 96, 96, 96, 96, 1710,
	1047, 932, 931, 299, 1345, 1662, 96, 1375, 830, 96,
	96, 745, 2138, 1969, 743, 526, 524, 592, 1708, 2000,
	502, 1192, 332, 526, 1243, 1456, 2014, 1566, 1496, 1347,
	2181, 888, 1809, 525, 525, 1457, 762, 1824, 541, 1462,
	1349, 331, 1359, 1678, 1408, 824, 1433, 73, 1796, 1435,
	1355, 1414, 741, 2136, 2164, 2162, 1922, 300, 602, 1357,
	1350, 1841, 1526, 1377, 2170, 1453, 2139, 748, 1209, 1431,
	1383, 714, 1348, 1249, 1520, 1518, 1519, 1511, 1512, 1513,
	1514, 1516, 1517, 2188, 1396, 845, 846, 710, 763, 1273,
	792, 1409, 1249, 1627, 1842, 93, 93, 503, 301, 556,
	958, 1898, 563, 566, 542, 556, 791, 1444, 848, 429,
	430, 431, 1630, 2192, 1979, 1978, 450, 1190, 1193, 464,
	1961, 1859, 1482, 1856, 2046, 1807, 1447, 450, 1858, 1645,
	1417, 1413, 847, 1378, 1628, 1087, 548, 548, 1078, 1095,
	301, 1458, 1706, 301, 301, 567, 301, 1189, 1460, 93,
	574, 331, 1519, 1511, 1512, 1513, 1514, 1516, 1517, 2179,
	790, 1948, 1746, 1454, 2099, 1452, 96, 522, 517, 542,
	1792, 96, 1067, 96, 526, 526, 1028, 1924, 726, 1032,
	96, 1841, 332, 1468, 1834, 792, 1962, 1837, 853, 1838,
	505, 96, 1832, 446, 1423, 1899, 1836, 1216, 1479, 1467,
	791, 542, 96, 96, 1096, 435, 1470, 1422, 2191, 1629,
	1937, 1804, 524, 2180, 1842, 1803, 1855, 1568, 1840, 1030,
	726, 1857, 1574, 1949, 1486, 1487, 1580, 1843, 1581, 1582,
	96, 1031, 96, 2182, 96, 1835, 445, 683, 96, 682,
	1191, 727, 96, 863, 539, 728, 782, 1543, 1544, 1545,
	1747, 1782, 438, 1915, 790, 1959, 1748, 1601, 1443, 1603,
	1800, 1620, 1252, 2003, 1535, 96, 504, 1897, 1540, 1683,
	1676, 525, 1571, 443, 1563, 1548, 1503, 1960, 439, 1604,
	1463, 1579, 580, 1607, 1342, 1303, 1144, 1141, 845, 846,
	767, 766, 332, 759, 753, 542, 752, 1583, 751, 750,
	749, 1839, 746, 440, 1657, 1589, 1590, 1837, 1591, 1838,
	681, 848, 1595, 578, 1541, 864, 1597, 1065, 1057, 910,
	738, 1656, 442, 1251, 556, 438, 566, 2132, 2096, 1830,
	1665, 1666, 1667, 1605, 1664, 847, 1644, 1609, 1840, 1381,
	1373, 1615, 1330, 965, 964, 1617, 443, 1843, 962, 1640,
	959, 439, 954, 331, 837, 1621, 1655, 96, 1686, 833,
	1641, 1639, 825, 1697, 1611, 301, 686, 301, 464, 464,
	574, 1702, 1703, 1704, 1648, 73, 440, 680, 1618, 1157,
	1164, 73, 2008, 1669, 1632, 2166, 679, 1391, 319, 33,
	794, 853, 1675, 89, 552, 442, 1040, 325, 28, 2010,
	1137, 324, 27, 323, 26, 857, 849, 850, 851, 852,
	854, 855, 526, 1771, 2056, 331, 1693, 1121, 1121, 1696,
	1671, 1839, 1672, 1136, 1134, 739, 1849, 2068, 441, 1709,
	1711, 1712, 321, 25, 1801, 1718, 798, 96, 96, 318,
	17, 1720, 1723, 434, 1142, 1773, 863, 1392, 322, 12,
	1725, 1139, 326, 11, 2086, 1690, 1920, 96, 1753, 525,
	795, 96, 1376, 96, 553, 316, 10, 1006, 1372, 1312,
	96, 575, 33, 524, 1106, 1754, 1788, 1023, 1770, 444,
	576, 28, 3, 96, 572, 27, 96, 26, 320, 9,
	1785, 708, 979, 1623, 332, 330, 493, 96, 1768, 971,
	447, 441, 1775, 96, 96, 96, 2185, 1776, 715, 1794,
	1774, 464, 464, 2190, 1431, 1816, 25, 2130, 864, 1048,
	96, 2089, 1751, 17, 556, 96, 1793, 96, 1783, 96,
	96, 96, 12, 1761, 96, 96, 11, 524, 1850, 1854,
	1795, 1657, 1627, 315, 8, 1810, 1811, 1853, 1945, 10,
	1806, 1815, 444, 317, 4, 1778, 332, 1766, 1656, 450,
	1713, 1630, 496, 497, 1826, 301, 560, 1802, 776, 669,
	1805, 1829, 9, 741, 1625, 812, 1587, 96, 1876, 1555,
	622, 845, 846, 1628, 845, 846, 464, 780, 464, 1302,
	783, 1509, 1510, 1655, 1299, 672, 1298, 1870, 1626, 1241,
	526, 845, 846, 897, 848, 548, 777, 1006, 1006, 849,
	850, 851, 852, 854, 855, 506, 301, 776, 775, 671,
	1884, 1819, 2112, 1993, 1705, 1606, 907, 8, 847, 905,
	93, 847, 979, 979, 1967, 436, 1056, 4, 747, 1941,
	1812, 2113, 1890, 1896, 1495, 2025, 1999, 96, 96, 1250,
	908, 46, 1653, 596, 524, 525, 1831, 619, 1629, 1647,
	1418, 1367, 1019, 1366, 96, 96, 1918, 1657, 96, 333,
	1041, 618, 1657, 1916, 509, 1259, 96, 1158, 1921, 1911,
	673, 620, 1912, 96, 1656, 976, 621, 977, 936, 1656,
	1926, 96, 608, 96, 945, 330, 96, 1944, 974, 556,
	949, 949, 698, 1919, 96, 1927, 1316, 1925, 1214, 1232,
	330, 1478, 901, 588, 600, 1957, 599, 1229, 704, 1655,
	563, 566, 1946, 461, 1655, 1971, 61, 457, 1973, 1657,
	1972, 1954, 1943, 1569, 1908, 301, 1094, 1382, 946, 1091,
	301, 301, 301, 1953, 952, 1663, 1656, 530, 1932, 1933,
	1970, 1506, 1938, 706, 1989, 1280, 1272, 1955, 1269, 773,
	814, 301, 301, 889, 1982, 1983, 1317, 1988, 736, 93,
	96, 1998, 1575, 93, 1334, 803, 1102, 551, 464, 550,
	1362, 1655, 734, 96, 1029, 1346, 524, 1931, 882, 2009,
	96, 881, 498, 2048, 2005, 725, 526, 724, 96, 1374,
	1657, 1416, 464, 2186, 96, 464, 2016, 93, 464, 464,
	464, 464, 464, 96, 96, 2011, 2055, 1656, 1066, 1660,
	96, 2105, 2023, 464, 464, 2035, 2028, 2019, 2043, 2050,
	450, 1114, 2042, 2024, 2032, 80, 2064, 1991, 1975, 2022,
	1442, 1085, 34, 556, 32, 96, 96, 2045, 2044, 29,
	24, 566, 1655, 22, 21, 556, 20, 31, 19, 2052,
	548, 2053, 30, 574, 18, 16, 15, 1584, 2040, 14,
	13, 96, 301, 45, 44, 96, 43, 42, 41, 40,
	1126, 2080, 2031, 524, 301, 2067, 1623, 7, 1006, 2078,
	96, 6, 301, 1147, 2081, 5, 301, 1418, 2070, 1153,
	330, 96, 96, 2, 542, 1, 0, 0, 2084, 2087,
	96, 0, 96, 979, 0, 96, 525, 330, 0, 2083,
	2091, 2094, 2093, 0, 2090, 0, 0, 0, 0, 0,
	2102, 2101, 0, 0, 0, 1627, 0, 2107, 331, 2111,
	0, 2121, 0, 0, 2123, 2119, 96, 0, 0, 96,
	2088, 0, 0, 2122, 1630, 0, 0, 0, 0, 2127,
	2125, 579, 674, 2129, 2126, 1657, 0, 1625, 0, 1318,
	0, 2124, 0, 0, 566, 2142, 1628, 566, 0, 96,
	525, 96, 1656, 0, 0, 2157, 2155, 2154, 0, 0,
	0, 1626, 0, 96, 0, 0, 2146, 0, 0, 0,
	2156, 0, 2163, 2161, 0, 0, 1936, 0, 2167, 0,
	301, 0, 1320, 1321, 2169, 301, 0, 1655, 301, 0,
	464, 464, 0, 464, 574, 2175, 0, 0, 0, 2184,
	0, 2183, 2177, 0, 1157, 1721, 0, 0, 0, 0,
	2189, 0, 0, 1157, 1726, 2108, 2109, 2110, 0, 2193,
	0, 1629, 0, 0, 2116, 0, 0, 526, 0, 0,
	0, 1509, 1510, 0, 1527, 1528, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 1757, 1874, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 566,
	1358, 0, 0, 556, 0, 1006, 0, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 713,
	0, 0, 0, 0, 1524, 0, 1354, 1935, 0, 0,
	979, 526, 0, 0, 0, 1006, 0, 0, 1401, 301,
	301, 301, 0, 0, 301, 1363, 1410, 0, 331, 0,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 1440, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 301, 1411, 1412,
	0, 0, 0, 1126, 0, 0, 1419, 0, 0, 0,
	0, 0, 1424, 1425, 1427, 1429, 1430, 0, 0, 1530,
	0, 1274, 0, 0, 1437, 0, 0, 1439, 301, 0,
	0, 0, 0, 807, 807, 0, 0, 0, 0, 1525,
	0, 0, 816, 0, 0, 0, 1006, 0, 0, 525,
	0, 0, 0, 0, 597, 59, 0, 0, 526, 0,
	0, 0, 0, 0, 883, 884, 885, 886, 887, 0,
	0, 979, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 1006, 1006, 902, 0, 0, 0, 0, 0,
	0, 1006, 1006, 0, 0, 1005, 0, 0, 0, 332,
	0, 0, 0, 59, 0, 0, 978, 979, 979, 0,
	0, 1526, 0, 0, 332, 0, 979, 979, 1465, 1466,
	0, 1008, 0, 0, 1006, 0, 0, 0, 535, 0,
	0, 543, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 1564, 0, 1007, 525, 0, 945, 979,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 556, 0,
	0, 1509, 1510, 0, 1527, 1528, 1529, 0, 0, 0,
	331, 0, 0, 975, 301, 1532, 1533, 1534, 0, 301,
	526, 1573, 0, 0, 1521, 1522, 1523, 0, 301, 1520,
	1518, 1519, 1511, 1512, 1513, 1514, 1516, 1517, 0, 301,
	0, 0, 0, 0, 1981, 1608, 0, 0, 0, 0,
	1354, 1354, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1005, 1005, 0, 0, 0,
	0, 0, 1401, 0, 0, 0, 978, 978, 1085, 0,
	1085, 0, 464, 0, 0, 0, 301, 0, 0, 0,
	1614, 1008, 1008, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 1092, 1515, 1097, 0, 0, 0, 0,
	0, 1104, 0, 301, 0, 1007, 1007, 526, 0, 0,
	0, 979, 0, 0, 1531, 0, 0, 0, 0, 0,
	1652, 0, 0, 0, 332, 0, 0, 0, 0, 1530,
	0, 1274, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 975, 975, 0, 0, 0, 0, 1525,
	0, 0, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 0, 1194, 0, 1196, 1197, 1198,
	1199, 0, 1681, 1682, 0, 0, 0, 0, 543, 0,
	0, 0, 0, 0, 1222, 1715, 0, 0, 1274, 1274,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1256, 1257, 0, 0,
	1270, 1526, 1281, 1283, 1288, 1291, 1292, 1293, 0, 0,
	0, 0, 0, 0, 1318, 1401, 0, 0, 0, 0,
	0, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	0, 1749, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 301, 0, 0, 0,
	1401, 0, 0, 1401, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 1780, 0, 0, 0, 1126,
	0, 1085, 1006, 0, 1521, 1522, 1523, 0, 1790, 1520,
	1518, 1519, 1511, 1512, 1513, 1514, 1516, 1517, 0, 0,
	0, 301, 0, 0, 301, 0, 1863, 979, 0, 0,
	0, 0, 1869, 0, 0, 1823, 1005, 0, 0, 0,
	0, 1827, 1828, 1126, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1652, 574, 0,
	0, 0, 1008, 1861, 0, 1862, 0, 301, 1864, 1865,
	0, 0, 1868, 301, 0, 1274, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1007, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 807, 0, 0, 1891, 0, 0, 816, 535,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 1274, 1274, 1274, 1274, 1274, 1274,
	1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
	1274, 1274, 1274, 0, 1274, 0, 0, 0, 0, 0,
	0, 1401, 1401, 0, 892, 1401, 894, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1652, 0, 574, 1363, 0, 1652, 0,
	0, 0, 1449, 1450, 0, 0, 0, 0, 1455, 0,
	0, 1965, 301, 301, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 1823, 0, 0, 0, 0, 0,
	0, 1951, 0, 0, 0, 0, 0, 0, 0, 1126,
	1474, 1956, 0, 0, 1958, 0, 0, 1481, 0, 0,
	1485, 0, 301, 1005, 0, 1652, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	1990, 0, 1964, 1005, 0, 0, 0, 0, 0, 0,
	2021, 895, 0, 0, 978, 0, 0, 1288, 1288, 1288,
	0, 0, 0, 1007, 0, 1401, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 0,
	1567, 0, 0, 59, 0, 0, 1652, 0, 0, 0,
	0, 301, 0, 1007, 0, 0, 0, 2002, 2027, 0,
	0, 975, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 1823, 1588, 0, 0, 0, 0, 0, 0,
	0, 574, 1823, 0, 0, 0, 0, 0, 1085, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 535, 0,
	0, 535, 535, 0, 1005, 0, 0, 0, 0, 0,
	0, 0, 0, 2057, 2058, 978, 0, 1616, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 59, 0, 0, 59, 0, 0, 0, 2076,
	1005, 1005, 2104, 2077, 0, 0, 0, 0, 0, 1005,
	1005, 978, 978, 1649, 1007, 0, 0, 0, 574, 0,
	978, 978, 0, 2069, 0, 0, 1008, 1008, 0, 1823,
	574, 0, 0, 0, 0, 1008, 1008, 0, 2100, 0,
	574, 1679, 1005, 301, 1680, 1212, 0, 0, 0, 0,
	1007, 1007, 975, 978, 0, 1274, 1685, 0, 0, 1007,
	1007, 0, 0, 0, 0, 1694, 1318, 0, 1008, 0,
	0, 1652, 0, 1698, 2027, 0, 1588, 1823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 975,
	0, 0, 1007, 0, 0, 0, 1722, 975, 975, 0,
	1724, 0, 0, 0, 0, 0, 0, 301, 0, 574,
	1274, 0, 0, 59, 0, 59, 0, 0, 0, 0,
	0, 2160, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 59, 0, 1755, 1756, 0, 59, 0, 0, 0,
	0, 0, 1762, 1763, 1764, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1005, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 975, 0, 0, 1402, 1875, 868, 0, 0,
	1878, 1879, 0, 0, 848, 1881, 0, 879, 0, 0,
	0, 0, 1883, 0, 1885, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 59, 0, 0, 59, 847, 0,
	1892, 868, 1509, 1510, 862, 1527, 1528, 1529, 848, 0,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1510, 0, 1527, 1528,
	1529, 0, 847, 1901, 0, 0, 0, 0, 862, 0,
	0, 1873, 0, 0, 0, 0, 0, 0, 1212, 0,
	1005, 0, 0, 0, 853, 1524, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 872, 880, 0, 1008, 0, 1524, 0,
	0, 0, 0, 1930, 0, 0, 0, 0, 853, 878,
	1005, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1007, 978, 0, 870, 0, 1515, 0, 872, 880, 863,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 894, 869, 0, 0, 870, 975, 0,
	1007, 1980, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1994, 1995, 0, 0,
	1525, 0, 0, 1530, 0, 543, 0, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 864, 0, 1525, 0, 0, 0, 2007, 0, 0,
	0, 0, 0, 0, 1005, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 2030,
	1008, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	873, 59, 1526, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 1007, 0, 2047, 0, 59, 0,
	868, 0, 0, 0, 59, 1526, 0, 848, 0, 1638,
	879, 871, 0, 0, 859, 860, 861, 874, 0, 858,
	856, 857, 849, 850, 851, 852, 854, 855, 0, 0,
	0, 847, 975, 0, 0, 1904, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 871, 816, 0, 859, 860,
	861, 874, 0, 858, 856, 857, 849, 850, 851, 852,
	854, 855, 0, 0, 0, 1521, 1522, 1523, 0, 1551,
	1520, 1518, 1519, 1511, 1512, 1513, 1514, 1516, 1517, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 1521, 1522,
	1523, 0, 0, 1520, 1518, 1519, 1511, 1512, 1513, 1514,
	1516, 1517, 0, 0, 0, 0, 872, 880, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 878, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 879, 870, 0, 0, 2143,
	0, 0, 863, 0, 0, 0, 0, 2153, 2153, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 1402, 2153, 0, 0, 0, 0, 0, 868,
	1509, 1510, 0, 1527, 1528, 1529, 848, 0, 0, 879,
	0, 0, 0, 0, 0, 0, 1688, 0, 0, 0,
	0, 0, 853, 0, 864, 0, 0, 0, 2153, 0,
	847, 0, 0, 0, 0, 0, 862, 1402, 0, 873,
	1402, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1524, 0, 0, 0, 878, 1509, 1510,
	0, 1527, 1528, 1529, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 1687, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 1515, 871, 872, 880, 859, 860, 861,
	874, 1524, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 878, 0, 0, 0, 0, 0, 0, 1550, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 1530, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 1525, 0,
	0, 1515, 0, 0, 873, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 1525, 0, 1402, 1402,
	0, 0, 1402, 0, 0, 0, 0, 0, 873, 871,
	1526, 0, 859, 860, 861, 874, 0, 858, 856, 857,
	849, 850, 851, 852, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 1549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1526, 0,
	0, 0, 0, 871, 0, 0, 859, 860, 861, 874,
	0, 858, 856, 857, 849, 850, 851, 852, 854, 855,
	0, 0, 0, 1521, 1522, 1523, 0, 1501, 1520, 1518,
	1519, 1511, 1512, 1513, 1514, 1516, 1517, 0, 2012, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1402, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 1521, 1522, 1523, 0, 0, 1520, 1518, 1519, 1511,
	1512, 1513, 1514, 1516, 1517, 98, 99, 348, 100, 349,
	350, 351, 352, 245, 353, 354, 355, 356, 101, 102,
	103, 246, 247, 248, 249, 104, 250, 251, 357, 105,
	252, 253, 106, 107, 358, 359, 254, 255, 256, 360,
	108, 257, 361, 334, 362, 109, 110, 111, 894, 112,
	363, 113, 114, 115, 364, 335, 116, 117, 365, 366,
	367, 368, 369, 370, 118, 119, 302, 120, 258, 121,
	259, 260, 371, 122, 372, 123, 373, 374, 375, 124,
	125, 376, 126, 377, 0, 378, 261, 127, 128, 129,
	262, 263, 379, 380, 381, 130, 131, 264, 0, 132,
	382, 133, 383, 384, 336, 385, 134, 265, 386, 266,
	387, 135, 136, 137, 138, 267, 268, 338, 388, 142,
	389, 139, 390, 337, 140, 269, 141, 270, 271, 272,
	391, 273, 392, 339, 143, 144, 340, 145, 146, 147,
	393, 149, 148, 394, 274, 341, 150, 342, 395, 151,
	396, 397, 152, 0, 153, 154, 155, 157, 275, 156,
	343, 158, 159, 161, 160, 398, 399, 400, 276, 162,
	277, 163, 164, 401, 165, 402, 403, 166, 404, 405,
	167, 278, 344, 168, 345, 279, 169, 170, 171, 172,
	173, 406, 280, 174, 281, 175, 407, 176, 177, 178,
	179, 180, 282, 181, 182, 408, 183, 184, 185, 186,
	187, 189, 190, 188, 191, 192, 193, 194, 409, 195,
	346, 196, 197, 283, 198, 0, 202, 203, 204, 205,
	410, 284, 206, 207, 208, 411, 209, 199, 200, 210,
	347, 211, 285, 286, 212, 412, 218, 213, 214, 201,
	215, 217, 287, 216, 288, 413, 219, 414, 220, 221,
	222, 223, 224, 415, 289, 290, 291, 416, 417, 225,
	226, 292, 293, 418, 227, 228, 229, 230, 419, 420,
	231, 232, 233, 234, 421, 235, 422, 294, 236, 237,
	238, 295, 296, 423, 424, 239, 425, 426, 427, 428,
	240, 241, 242, 243, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 1817, 0, 0, 0, 0, 0, 0,
	0, 1818, 98, 99, 348, 100, 349, 350, 351, 352,
	245, 353, 354, 355, 356, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 357, 105, 252, 253, 106,
	107, 358, 359, 254, 255, 256, 360, 108, 257, 361,
	334, 362, 109, 110, 111, 0, 112, 363, 113, 114,
	115, 364, 335, 116, 117, 365, 366, 367, 368, 369,
	370, 118, 119, 302, 120, 258, 121, 259, 260, 371,
	122, 372, 123, 373, 374, 375, 124, 125, 376, 126,
	377, 0, 378, 261, 127, 128, 129, 262, 263, 379,
	380, 381, 130, 131, 264, 0, 132, 382, 133, 383,
	384, 336, 385, 134, 265, 386, 266, 387, 135, 136,
	137, 138, 267, 268, 338, 388, 142, 389, 139, 390,
	337, 140, 269, 141, 270, 271, 272, 391, 273, 392,
	339, 143, 144, 340, 145, 146, 147, 393, 149, 148,
	394, 274, 341, 150, 342, 395, 151, 396, 397, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 398, 399, 400, 276, 162, 277, 163, 164,
	401, 165, 402, 403, 166, 404, 405, 167, 278, 344,
	168, 345, 279, 169, 170, 171, 172, 173, 406, 280,
	174, 281, 175, 407, 176, 177, 178, 179, 180, 282,
	181, 182, 408, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 409, 195, 346, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 410, 284, 206,
	207, 208, 411, 209, 199, 200, 210, 347, 211, 285,
	286, 212, 412, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 413, 219, 414, 220, 221, 222, 223, 224,
	415, 289, 290, 291, 416, 417, 225, 226, 292, 293,
	418, 227, 228, 229, 230, 419, 420, 231, 232, 233,
	234, 421, 235, 422, 294, 236, 237, 238, 295, 296,
	423, 424, 239, 425, 426, 427, 428, 240, 241, 242,
	243, 244, 0, 0, 0, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2092, 98, 99, 348, 100, 349, 350, 351, 352, 245,
	353, 354, 355, 356, 101, 102, 103, 246, 247, 248,
	249, 104, 250, 251, 357, 105, 252, 253, 106, 107,
	358, 359, 254, 255, 256, 360, 108, 257, 361, 334,
	362, 109, 110, 111, 0, 112, 363, 113, 114, 115,
	364, 335, 116, 117, 365, 366, 367, 368, 369, 370,
	118, 119, 302, 120, 258, 121, 259, 260, 371, 122,
	372, 123, 373, 374, 375, 124, 125, 376, 126, 377,
	0, 378, 261, 127, 128, 129, 262, 263, 379, 380,
	381, 130, 131, 264, 0, 132, 382, 133, 383, 384,
	336, 385, 134, 265, 386, 266, 387, 135, 136, 137,
	138, 267, 268, 338, 388, 142, 389, 139, 390, 337,
	140, 269, 141, 270, 271, 272, 391, 273, 392, 339,
	143, 144, 340, 145, 146, 147, 393, 149, 148, 394,
	274, 341, 150, 342, 395, 151, 396, 397, 152, 0,
	153, 154, 155, 157, 275, 156, 343, 158, 159, 161,
	160, 398, 399, 400, 276, 162, 277, 163, 164, 401,
	165, 402, 403, 166, 404, 405, 167, 278, 344, 168,
	345, 279, 169, 170, 171, 172, 173, 406, 280, 174,
	281, 175, 407, 176, 177, 178, 179, 180, 282, 181,
	182, 408, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 409, 195, 346, 196, 197, 283,
	198, 0, 202, 203, 204, 205, 410, 284, 206, 207,
	208, 411, 209, 199, 200, 210, 347, 211, 285, 286,
	212, 412, 218, 213, 214, 201, 215, 217, 287, 216,
	288, 413, 219, 414, 220, 221, 222, 223, 224, 415,
	289, 290, 291, 416, 417, 225, 226, 292, 293, 418,
	227, 228, 229, 230, 419, 420, 231, 232, 233, 234,
	421, 235, 422, 294, 236, 237, 238, 295, 296, 423,
	424, 239, 425, 426, 427, 428, 240, 241, 242, 243,
	244, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 98, 99, 348,
	100, 349, 350, 351, 352, 245, 353, 354, 355, 356,
	101, 102, 103, 246, 247, 248, 249, 104, 250, 251,
	357, 105, 252, 253, 106, 107, 358, 359, 254, 255,
	256, 360, 108, 257, 361, 334, 362, 109, 110, 111,
	0, 112, 363, 113, 114, 115, 364, 335, 116, 117,
	365, 366, 367, 368, 369, 370, 118, 119, 302, 120,
	258, 121, 259, 260, 371, 122, 372, 123, 373, 374,
	375, 124, 125, 376, 126, 377, 0, 378, 261, 127,
	128, 129, 262, 263, 379, 380, 381, 130, 131, 264,
	0, 132, 382, 133, 383, 384, 336, 385, 134, 265,
	386, 266, 387, 135, 136, 137, 138, 267, 268, 338,
	388, 142, 389, 139, 390, 337, 140, 269, 141, 270,
	271, 272, 391, 273, 392, 339, 143, 144, 340, 145,
	146, 147, 393, 149, 148, 394, 274, 341, 150, 342,
	395, 151, 396, 397, 152, 0, 153, 154, 155, 157,
	275, 156, 343, 158, 159, 161, 160, 398, 399, 400,
	276, 162, 277, 163, 164, 401, 165, 402, 403, 166,
	404, 405, 167, 278, 344, 168, 345, 279, 169, 170,
	171, 172, 173, 406, 280, 174, 281, 175, 407, 176,
	177, 178, 179, 180, 282, 181, 182, 408, 183, 184,
	185, 186, 187, 189, 190, 188, 191, 192, 193, 194,
	409, 195, 346, 196, 197, 283, 198, 0, 202, 203,
	204, 205, 410, 284, 206, 207, 208, 411, 209, 199,
	200, 210, 347, 211, 285, 286, 212, 412, 218, 213,
	214, 201, 215, 217, 287, 216, 288, 413, 219, 414,
	220, 221, 222, 223, 224, 415, 289, 290, 291, 416,
	417, 225, 226, 292, 293, 418, 227, 228, 229, 230,
	419, 420, 231, 232, 233, 234, 421, 235, 422, 294,
	236, 237, 238, 295, 296, 423, 424, 239, 425, 426,
	427, 428, 240, 241, 242, 243, 244, 616, 605, 606,
	603, 604, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 632, 598, 0, 0, 0, 101, 102, 103, 246,
	647, 248, 648, 104, 649, 650, 0, 105, 252, 253,
	106, 107, 601, 631, 651, 652, 256, 0, 108, 643,
	0, 624, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 335, 116, 117, 0, 625, 627, 0,
	626, 628, 118, 119, 302, 120, 653, 121, 654, 655,
	817, 122, 0, 123, 0, 0, 0, 646, 125, 0,
	126, 0, 0, 0, 589, 127, 128, 129, 633, 634,
	612, 0, 0, 130, 131, 656, 0, 132, 0, 133,
	0, 0, 336, 0, 134, 644, 0, 266, 0, 135,
	136, 137, 138, 640, 642, 338, 0, 142, 0, 139,
	0, 337, 140, 657, 141, 658, 659, 660, 0, 623,
	0, 339, 143, 144, 340, 145, 146, 147, 0, 149,
	148, 0, 645, 341, 150, 342, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 275, 156, 343, 158,
	159, 161, 160, 584, 0, 613, 641, 162, 661, 163,
	164, 0, 165, 0, 0, 166, 0, 0, 167, 278,
	344, 168, 345, 635, 169, 170, 171, 172, 173, 0,
	636, 174, 281, 175, 0, 176, 177, 178, 179, 180,
	662, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 346, 196,
	197, 590, 198, 0, 202, 203, 204, 205, 79, 284,
	206, 207, 208, 629, 209, 199, 200, 210, 347, 211,
	663, 286, 212, 0, 218, 213, 214, 201, 215, 217,
	664, 216, 637, 0, 219, 81, 220, 221, 222, 223,
	224, 0, 289, 665, 666, 0, 0, 225, 226, 638,
	639, 611, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 630, 235, 0, 294, 236, 237, 238, 701,
	667, 0, 0, 239, 0, 0, 0, 77, 240, 241,
	242, 243, 244, 585, 78, 0, 0, 0, 0, 583,
	0, 0, 0, 0, 581, 582, 616, 605, 606, 603,
	604, 595, 0, 591, 0, 0, 0, 0, 594, 0,
	0, 0, 98, 99, 1238, 100, 0, 0, 0, 0,
	632, 598, 0, 0, 0, 101, 102, 103, 246, 647,
	248, 648, 104, 649, 650, 0, 105, 252, 253, 106,
	107, 601, 631, 651, 652, 256, 0, 108, 643, 0,
	624, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 625, 627, 0, 626,
	628, 118, 119, 302, 120, 653, 121, 654, 655, 0,
	122, 0, 123, 0, 1239, 0, 646, 125, 0, 126,
	0, 0, 0, 589, 127, 128, 129, 633, 634, 612,
	0, 0, 130, 131, 656, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 644, 0, 266, 0, 135, 136,
	137, 138, 640, 642, 338, 0, 142, 0, 139, 0,
	337, 140, 657, 141, 658, 659, 660, 0, 623, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 645, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 584, 0, 613, 641, 162, 661, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 635, 169, 170, 171, 172, 173, 0, 636,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 662,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	590, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 629, 209, 199, 200, 210, 347, 211, 663,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 664,
	216, 637, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 665, 666, 0, 0, 225, 226, 638, 639,
	611, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 630, 235, 0, 294, 236, 237, 238, 295, 667,
	1237, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 585, 0, 0, 0, 0, 0, 583, 0,
	0, 0, 0, 581, 582, 1240, 616, 605, 606, 603,
	604, 595, 591, 1235, 0, 0, 0, 594, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	632, 598, 0, 0, 0, 101, 102, 103, 246, 647,
	248, 648, 104, 649, 650, 0, 105, 252, 253, 106,
	107, 601, 631, 651, 652, 256, 0, 108, 643, 0,
	624, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 625, 627, 0, 626,
	628, 118, 119, 302, 120, 653, 121, 654, 655, 0,
	122, 0, 123, 0, 0, 0, 646, 125, 0, 126,
	0, 0, 0, 589, 127, 128, 129, 633, 634, 612,
	0, 0, 130, 131, 656, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 644, 0, 266, 0, 135, 136,
	137, 138, 640, 642, 338, 0, 142, 0, 139, 0,
	337, 140, 657, 141, 658, 659, 660, 0, 623, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 645, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 584, 0, 613, 641, 162, 661, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 635, 169, 170, 171, 172, 173, 0, 636,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 662,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	590, 198, 0, 202, 203, 204, 205, 79, 284, 206,
	207, 208, 629, 209, 199, 200, 210, 347, 211, 663,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 664,
	216, 637, 0, 219, 81, 220, 221, 222, 223, 224,
	0, 289, 665, 666, 0, 0, 225, 226, 638, 639,
	611, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 630, 235, 0, 294, 236, 237, 238, 701, 667,
	0, 0, 239, 0, 0, 0, 77, 240, 241, 242,
	243, 244, 585, 78, 0, 0, 0, 0, 583, 0,
	0, 0, 0, 581, 582, 616, 605, 606, 603, 604,
	595, 0, 591, 0, 0, 0, 0, 594, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 632,
	598, 0, 0, 0, 101, 102, 103, 246, 647, 248,
	648, 104, 649, 650, 1284, 105, 252, 253, 106, 107,
	601, 631, 651, 652, 256, 0, 108, 643, 0, 624,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 335, 116, 117, 0, 625, 627, 0, 626, 628,
	118, 119, 302, 120, 653, 121, 654, 655, 0, 122,
	0, 123, 0, 0, 0, 646, 125, 0, 126, 0,
	0, 0, 589, 127, 128, 129, 633, 634, 612, 0,
	0, 130, 131, 656, 0, 132, 0, 133, 0, 1289,
	336, 0, 134, 644, 0, 266, 0, 135, 136, 137,
	138, 640, 642, 338, 0, 142, 0, 139, 0, 337,
	140, 657, 141, 658, 659, 660, 0, 623, 0, 339,
	143, 144, 340, 145, 146, 147, 0, 149, 148, 1285,
	645, 341, 150, 342, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 275, 156, 343, 158, 159, 161,
	160, 584, 0, 613, 641, 162, 661, 163, 164, 0,
	165, 0, 0, 166, 0, 0, 167, 278, 344, 168,
	345, 635, 169, 170, 171, 172, 173, 0, 636, 174,
	281, 175, 0, 176, 177, 178, 179, 180, 662, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 346, 196, 197, 590,
	198, 0, 202, 203, 204, 205, 0, 284, 206, 207,
	208, 629, 209, 199, 200, 210, 347, 211, 663, 286,
	212, 0, 218, 213, 214, 201, 215, 217, 664, 216,
	637, 0, 219, 0, 220, 221, 222, 223, 224, 0,
	289, 665, 666, 0, 1286, 225, 226, 638, 639, 611,
	227, 228, 229, 230, 0, 0, 231, 232, 233, 234,
	630, 235, 0, 294, 236, 237, 238, 295, 667, 0,
	0, 239, 0, 0, 0, 0, 240, 241, 242, 243,
	244, 585, 0, 0, 0, 0, 0, 583, 0, 0,
	0, 0, 581, 582, 616, 605, 606, 603, 604, 595,
	0, 591, 0, 0, 0, 0, 594, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 101, 102, 103, 246, 647, 248, 648,
	104, 649, 650, 0, 105, 252, 253, 106, 107, 601,
	631, 651, 652, 256, 0, 108, 643, 0, 624, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	335, 116, 117, 0, 625, 627, 0, 626, 628, 118,
	119, 302, 120, 653, 121, 654, 655, 0, 122, 0,
	123, 0, 0, 0, 646, 125, 0, 126, 0, 0,
	0, 589, 127, 128, 129, 633, 634, 612, 0, 0,
	130, 131, 656, 0, 132, 0, 133, 0, 0, 336,
	0, 134, 644, 0, 266, 0, 135, 136, 137, 138,
	640, 642, 338, 0, 142, 0, 139, 0, 337, 140,
	657, 141, 658, 659, 660, 0, 623, 0, 339, 143,
	144, 340, 145, 146, 147, 0, 149, 148, 0, 645,
	341, 150, 342, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 343, 158, 159, 161, 160,
	584, 1769, 613, 641, 162, 661, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 344, 168, 345,
	635, 169, 170, 171, 172, 173, 0, 636, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 662, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 346, 196, 197, 590, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	629, 209, 199, 200, 210, 347, 211, 663, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 664, 216, 637,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	665, 666, 0, 0, 225, 226, 638, 639, 611, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 630,
	235, 0, 294, 236, 237, 238, 295, 667, 0, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	585, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 581, 582, 808, 616, 605, 606, 603, 604, 595,
	591, 0, 0, 0, 0, 594, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 101, 102, 103, 246, 647, 248, 648,
	104, 649, 650, 0, 105, 252, 253, 106, 107, 601,
	631, 651, 652, 256, 0, 108, 643, 0, 624, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	335, 116, 117, 0, 625, 627, 0, 626, 628, 118,
	119, 302, 120, 653, 121, 654, 655, 0, 122, 0,
	123, 0, 0, 0, 646, 125, 0, 126, 0, 0,
	0, 589, 127, 128, 129, 633, 634, 612, 0, 0,
	130, 131, 656, 0, 132, 0, 133, 0, 0, 336,
	0, 134, 644, 0, 266, 0, 135, 136, 137, 138,
	640, 642, 338, 0, 142, 0, 139, 0, 337, 140,
	657, 141, 658, 659, 660, 0, 623, 0, 339, 143,
	144, 340, 145, 146, 147, 0, 149, 148, 0, 645,
	341, 150, 342, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 343, 158, 159, 161, 160,
	584, 0, 613, 641, 162, 661, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 344, 168, 345,
	635, 169, 170, 171, 172, 173, 0, 636, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 662, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 346, 196, 197, 590, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	629, 209, 199, 200, 210, 347, 211, 663, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 664, 216, 637,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	665, 666, 0, 0, 225, 226, 638, 639, 611, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 630,
	235, 0, 294, 236, 237, 238, 295, 667, 0, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	585, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 0, 900, 1230,
	591, 0, 0, 0, 0, 594, 616, 605, 606, 603,
	604, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	632, 598, 0, 0, 0, 101, 102, 103, 246, 647,
	248, 648, 104, 649, 650, 0, 105, 252, 253, 106,
	107, 601, 631, 651, 652, 256, 0, 108, 643, 0,
	624, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 625, 627, 0, 626,
	628, 118, 119, 302, 120, 653, 121, 654, 655, 817,
	122, 0, 123, 0, 0, 0, 646, 125, 0, 126,
	0, 0, 0, 589, 127, 128, 129, 633, 634, 612,
	0, 0, 130, 131, 656, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 644, 0, 266, 0, 135, 136,
	137, 138, 640, 642, 338, 0, 142, 0, 139, 0,
	337, 140, 657, 141, 658, 659, 660, 0, 623, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 645, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 584, 0, 613, 641, 162, 661, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 635, 169, 170, 171, 172, 173, 0, 636,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 662,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	590, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 629, 209, 199, 200, 210, 347, 211, 663,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 664,
	216, 637, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 665, 666, 0, 0, 225, 226, 638, 639,
	611, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 630, 235, 0, 294, 236, 237, 238, 295, 667,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 585, 0, 0, 0, 0, 0, 583, 0,
	0, 0, 0, 581, 582, 616, 605, 606, 603, 604,
	595, 0, 591, 0, 0, 0, 0, 594, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 632,
	598, 0, 0, 0, 101, 102, 103, 246, 647, 248,
	648, 104, 649, 650, 0, 105, 252, 253, 106, 107,
	601, 631, 651, 652, 256, 0, 108, 643, 0, 624,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 335, 116, 117, 0, 625, 627, 0, 626, 628,
	118, 119, 302, 120, 653, 121, 654, 655, 0, 122,
	0, 123, 0, 0, 0, 646, 125, 0, 126, 0,
	0, 0, 589, 127, 128, 129, 633, 634, 612, 0,
	0, 130, 131, 656, 0, 132, 0, 133, 0, 0,
	336, 0, 134, 644, 0, 266, 0, 135, 136, 137,
	138, 640, 642, 338, 0, 142, 0, 139, 0, 337,
	140, 657, 141, 658, 659, 660, 0, 623, 0, 339,
	143, 144, 340, 145, 146, 147, 0, 149, 148, 0,
	645, 341, 150, 342, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 275, 156, 343, 158, 159, 161,
	160, 584, 0, 613, 641, 162, 661, 163, 164, 0,
	165, 0, 0, 166, 0, 0, 167, 278, 344, 168,
	345, 635, 169, 170, 171, 172, 173, 0, 636, 174,
	281, 175, 0, 176, 177, 178, 179, 180, 662, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 346, 196, 197, 590,
	198, 0, 202, 203, 204, 205, 0, 284, 206, 207,
	208, 629, 209, 199, 200, 210, 347, 211, 663, 286,
	212, 0, 218, 213, 214, 201, 215, 217, 664, 216,
	637, 0, 219, 0, 220, 221, 222, 223, 224, 0,
	289, 665, 666, 0, 0, 225, 226, 638, 639, 611,
	227, 228, 229, 230, 0, 0, 231, 232, 233, 234,
	630, 235, 0, 294, 236, 237, 238, 295, 667, 0,
	0, 239, 0, 0, 0, 0, 240, 241, 242, 243,
	244, 585, 0, 0, 0, 0, 0, 583, 0, 0,
	0, 0, 581, 582, 616, 605, 606, 603, 604, 595,
	0, 591, 1752, 0, 0, 0, 594, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 101, 102, 103, 246, 647, 248, 648,
	104, 649, 650, 0, 105, 252, 253, 106, 107, 601,
	631, 651, 652, 256, 0, 108, 643, 0, 624, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	335, 116, 117, 0, 625, 627, 0, 626, 628, 118,
	119, 302, 120, 653, 121, 654, 655, 0, 122, 0,
	123, 0, 0, 0, 646, 125, 0, 126, 0, 0,
	0, 589, 127, 128, 129, 633, 634, 612, 0, 0,
	130, 131, 656, 0, 132, 0, 133, 0, 0, 336,
	0, 134, 644, 0, 266, 0, 135, 136, 137, 138,
	640, 642, 338, 0, 142, 0, 139, 0, 337, 140,
	657, 141, 658, 659, 660, 0, 623, 0, 339, 143,
	144, 340, 145, 146, 147, 0, 149, 148, 0, 645,
	341, 150, 342, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 343, 158, 159, 161, 160,
	584, 0, 613, 641, 162, 661, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 344, 168, 345,
	635, 169, 170, 171, 172, 173, 0, 636, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 662, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 346, 196, 197, 590, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	629, 209, 199, 200, 210, 347, 211, 663, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 664, 216, 637,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	665, 666, 0, 0, 225, 226, 638, 639, 611, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 630,
	235, 0, 294, 236, 237, 238, 295, 667, 1701, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	585, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 581, 582, 616, 605, 606, 603, 604, 595, 0,
	591, 0, 0, 0, 0, 594, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 632, 598, 0,
	0, 0, 101, 102, 103, 246, 647, 248, 648, 104,
	649, 650, 0, 105, 252, 253, 106, 107, 601, 631,
	651, 652, 256, 0, 108, 643, 0, 624, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 335,
	116, 117, 0, 625, 627, 0, 626, 628, 118, 119,
	302, 120, 653, 121, 654, 655, 0, 122, 0, 123,
	0, 0, 0, 646, 125, 0, 126, 0, 0, 0,
	589, 127, 128, 129, 633, 634, 612, 0, 0, 130,
	131, 656, 0, 132, 0, 133, 0, 0, 336, 0,
	134, 644, 0, 266, 0, 135, 136, 137, 138, 640,
	642, 338, 0, 142, 0, 139, 0, 337, 140, 657,
	141, 658, 659, 660, 0, 623, 0, 339, 143, 144,
	340, 145, 146, 147, 0, 149, 148, 0, 645, 341,
	150, 342, 0, 151, 0, 0, 152, 0, 153, 154,
	155, 157, 275, 156, 343, 158, 159, 161, 160, 584,
	0, 613, 641, 162, 661, 163, 164, 0, 165, 0,
	0, 166, 0, 0, 167, 278, 344, 168, 345, 635,
	169, 170, 171, 172, 173, 0, 636, 174, 281, 175,
	0, 176, 177, 178, 179, 180, 662, 181, 182, 0,
	183, 184, 185, 186, 187, 189, 190, 188, 191, 192,
	193, 194, 0, 195, 346, 196, 197, 590, 198, 0,
	202, 203, 204, 205, 0, 284, 206, 207, 208, 629,
	209, 199, 200, 210, 347, 211, 663, 286, 212, 0,
	218, 213, 214, 201, 215, 217, 664, 216, 637, 0,
	219, 0, 220, 221, 222, 223, 224, 0, 289, 665,
	666, 0, 0, 225, 226, 638, 639, 611, 227, 228,
	229, 230, 0, 0, 231, 232, 233, 234, 630, 235,
	0, 294, 236, 237, 238, 295, 667, 0, 0, 239,
	0, 0, 0, 0, 240, 241, 242, 243, 244, 585,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 0,
	581, 582, 616, 605, 606, 603, 604, 595, 0, 591,
	1691, 0, 0, 0, 594, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 632, 598, 0, 0,
	0, 101, 102, 103, 246, 647, 248, 648, 104, 649,
	650, 0, 105, 252, 253, 106, 107, 601, 631, 651,
	652, 256, 0, 108, 643, 0, 624, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 335, 116,
	117, 0, 625, 627, 0, 626, 628, 118, 119, 302,
	120, 653, 121, 654, 655, 0, 122, 0, 123, 0,
	0, 0, 646, 125, 0, 126, 0, 0, 0, 589,
	127, 128, 129, 633, 634, 612, 0, 0, 130, 131,
	656, 0, 132, 0, 133, 0, 1289, 336, 0, 134,
	644, 0, 266, 0, 135, 136, 137, 138, 640, 642,
	338, 0, 142, 0, 139, 0, 337, 140, 657, 141,
	658, 659, 660, 0, 623, 0, 339, 143, 144, 340,
	145, 146, 147, 0, 149, 148, 0, 645, 341, 150,
	342, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 343, 158, 159, 161, 160, 584, 0,
	613, 641, 162, 661, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 344, 168, 345, 635, 169,
	170, 171, 172, 173, 0, 636, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 662, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 346, 196, 197, 590, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 629, 209,
	199, 200, 210, 347, 211, 663, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 664, 216, 637, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 665, 666,
	0, 0, 225, 226, 638, 639, 611, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 630, 235, 0,
	294, 236, 237, 238, 295, 667, 0, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 585, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 0, 581,
	582, 616, 605, 606, 603, 604, 595, 0, 591, 0,
	0, 0, 0, 594, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 632, 598, 0, 0, 0,
	101, 102, 103, 246, 647, 248, 648, 104, 649, 650,
	0, 105, 252, 253, 106, 107, 601, 631, 651, 652,
	256, 0, 108, 643, 0, 624, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 335, 116, 117,
	0, 625, 627, 0, 626, 628, 118, 119, 302, 120,
	653, 121, 654, 655, 0, 122, 0, 123, 0, 0,
	0, 646, 125, 0, 126, 0, 0, 0, 589, 127,
	128, 129, 633, 634, 612, 0, 0, 130, 131, 656,
	0, 132, 0, 133, 0, 0, 336, 0, 134, 644,
	0, 266, 0, 135, 136, 137, 138, 640, 642, 338,
	0, 142, 0, 139, 0, 337, 140, 657, 141, 658,
	659, 660, 0, 623, 0, 339, 143, 144, 340, 145,
	146, 147, 0, 149, 148, 0, 645, 341, 150, 342,
	0, 151, 0, 0, 152, 0, 153, 154, 155, 157,
	275, 156, 343, 158, 159, 161, 160, 584, 0, 613,
	641, 162, 661, 163, 164, 0, 165, 0, 0, 166,
	0, 0, 167, 278, 344, 168, 345, 635, 169, 170,
	171, 172, 173, 0, 636, 174, 281, 175, 0, 176,
	177, 178, 179, 180, 662, 181, 182, 0, 183, 184,
	185, 186, 187, 189, 190, 188, 191, 192, 193, 194,
	0, 195, 346, 196, 197, 590, 198, 0, 202, 203,
	204, 205, 0, 284, 206, 207, 208, 629, 209, 199,
	200, 210, 347, 211, 663, 286, 212, 0, 218, 213,
	214, 201, 215, 217, 664, 216, 637, 0, 219, 0,
	220, 221, 222, 223, 224, 0, 289, 665, 666, 0,
	0, 225, 226, 638, 639, 611, 227, 228, 229, 230,
	0, 0, 231, 232, 233, 234, 630, 235, 0, 294,
	236, 237, 238, 295, 667, 0, 0, 239, 0, 0,
	0, 0, 240, 241, 242, 243, 244, 585, 0, 0,
	0, 0, 0, 583, 0, 0, 0, 0, 581, 582,
	808, 616, 605, 606, 603, 604, 595, 591, 0, 0,
	0, 0, 594, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 632, 598, 0, 0, 0,
	101, 102, 103, 246, 647, 248, 648, 104, 649, 650,
	0, 105, 252, 253, 106, 107, 601, 631, 651, 652,
	256, 0, 108, 643, 0, 624, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 335, 116, 117,
	0, 625, 627, 0, 626, 628, 118, 119, 302, 120,
	653, 121, 654, 655, 0, 122, 0, 123, 0, 0,
	0, 646, 125, 0, 126, 0, 0, 0, 589, 127,
	128, 129, 633, 634, 612, 0, 0, 130, 131, 656,
	0, 132, 0, 133, 0, 0, 336, 0, 134, 644,
	0, 266, 0, 135, 136, 137, 138, 640, 642, 338,
	0, 142, 0, 139, 0, 337, 140, 657, 141, 658,
	659, 660, 0, 623, 0, 339, 143, 144, 340, 145,
	146, 147, 0, 149, 148, 0, 645, 341, 150, 342,
	0, 151, 0, 0, 152, 0, 153, 154, 155, 157,
	275, 156, 343, 158, 159, 161, 160, 584, 0, 613,
	641, 162, 661, 163, 164, 0, 165, 0, 0, 166,
	0, 0, 167, 278, 344, 168, 345, 635, 169, 170,
	171, 172, 173, 0, 636, 174, 281, 175, 0, 176,
	177, 178, 179, 180, 662, 181, 182, 0, 183, 184,
	185, 186, 187, 189, 190, 188, 191, 192, 193, 194,
	0, 195, 346, 196, 197, 590, 198, 0, 202, 203,
	204, 205, 0, 284, 206, 207, 208, 629, 209, 199,
	200, 210, 347, 211, 663, 286, 212, 0, 218, 213,
	214, 201, 215, 217, 664, 216, 637, 0, 219, 0,
	220, 221, 222, 223, 224, 0, 289, 665, 666, 0,
	0, 225, 226, 638, 639, 611, 227, 228, 229, 230,
	0, 0, 231, 232, 233, 234, 630, 235, 0, 294,
	236, 237, 238, 295, 667, 0, 0, 239, 0, 0,
	0, 0, 240, 241, 242, 243, 244, 585, 0, 0,
	0, 0, 0, 583, 0, 0, 0, 0, 581, 582,
	616, 605, 606, 603, 604, 595, 0, 591, 1225, 0,
	0, 0, 594, 0, 0, 0, 98, 99, 1093, 100,
	0, 0, 0, 0, 632, 598, 0, 0, 0, 101,
	102, 103, 246, 647, 248, 648, 104, 649, 650, 0,
	105, 252, 253, 106, 107, 601, 631, 651, 652, 256,
	0, 108, 643, 0, 624, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 335, 116, 117, 0,
	625, 627, 0, 626, 628, 118, 119, 302, 120, 653,
	121, 654, 655, 0, 122, 0, 123, 0, 0, 0,
	646, 125, 0, 126, 0, 0, 0, 589, 127, 128,
	129, 633, 634, 612, 0, 0, 130, 131, 656, 0,
	132, 0, 133, 0, 0, 336, 0, 134, 644, 0,
	266, 0, 135, 136, 137, 138, 640, 642, 338, 0,
	142, 0, 139, 0, 337, 140, 657, 141, 658, 659,
	660, 0, 623, 0, 339, 143, 144, 340, 145, 146,
	147, 0, 149, 148, 0, 645, 341, 150, 342, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 343, 158, 159, 161, 160, 584, 0, 613, 641,
	162, 661, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 344, 168, 345, 635, 169, 170, 171,
	172, 173, 0, 636, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 662, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 346, 196, 197, 590, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 629, 209, 199, 200,
	210, 347, 211, 663, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 664, 216, 637, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 665, 666, 0, 0,
	225, 226, 638, 639, 611, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 630, 235, 0, 294, 236,
	237, 238, 295, 667, 0, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 585, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 0, 581, 582, 616,
	605, 606, 603, 604, 595, 0, 591, 0, 0, 0,
	0, 594, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 632, 598, 0, 0, 0, 101, 102,
	103, 246, 647, 248, 648, 104, 649, 650, 0, 105,
	252, 253, 106, 107, 601, 631, 651, 652, 256, 0,
	108, 643, 0, 624, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 335, 116, 2152, 0, 625,
	627, 0, 626, 628, 118, 119, 302, 120, 653, 121,
	654, 655, 0, 122, 0, 123, 0, 0, 0, 646,
	125, 0, 126, 0, 0, 0, 589, 127, 128, 129,
	633, 634, 612, 0, 0, 130, 131, 656, 0, 132,
	0, 133, 0, 0, 336, 0, 134, 644, 0, 266,
	0, 135, 136, 137, 138, 640, 642, 338, 0, 142,
	0, 139, 0, 337, 140, 657, 141, 658, 659, 660,
	0, 623, 0, 339, 143, 144, 340, 145, 146, 147,
	0, 149, 148, 0, 645, 341, 150, 342, 0, 151,
	0, 0, 152, 0, 153, 154, 155, 157, 275, 156,
	343, 158, 159, 161, 160, 584, 0, 613, 641, 162,
	661, 163, 164, 0, 165, 0, 0, 166, 0, 0,
	167, 278, 344, 168, 345, 635, 169, 170, 171, 172,
	173, 0, 636, 174, 281, 175, 0, 176, 177, 178,
	179, 180, 662, 181, 182, 0, 183, 184, 185, 186,
	187, 189, 190, 188, 191, 192, 193, 194, 0, 195,
	346, 196, 197, 590, 198, 0, 202, 203, 204, 205,
	0, 284, 206, 207, 208, 629, 209, 199, 200, 210,
	347, 211, 663, 286, 212, 0, 218, 213, 214, 201,
	215, 217, 664, 216, 637, 0, 219, 0, 220, 221,
	222, 223, 224, 0, 289, 665, 666, 0, 0, 225,
	226, 638, 639, 611, 227, 228, 2151, 230, 0, 0,
	231, 232, 233, 234, 630, 235, 0, 294, 236, 237,
	238, 295, 667, 0, 0, 239, 0, 0, 0, 0,
	240, 241, 242, 243, 244, 585, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 581, 582, 616, 605,
	606, 603, 604, 595, 0, 591, 0, 0, 0, 0,
	594, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 632, 598, 0, 0, 0, 101, 102, 103,
	2150, 647, 248, 648, 104, 649, 650, 0, 105, 252,
	253, 106, 107, 601, 631, 651, 652, 256, 0, 108,
	643, 0, 624, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 335, 116, 2152, 0, 625, 627,
	0, 626, 628, 118, 119, 302, 120, 653, 121, 654,
	655, 0, 122, 0, 123, 0, 0, 0, 646, 125,
	0, 126, 0, 0, 0, 589, 127, 128, 129, 633,
	634, 612, 0, 0, 130, 131, 656, 0, 132, 0,
	133, 0, 0, 336, 0, 134, 644, 0, 266, 0,
	135, 136, 137, 138, 640, 642, 338, 0, 142, 0,
	139, 0, 337, 140, 657, 141, 658, 659, 660, 0,
	623, 0, 339, 143, 144, 340, 145, 146, 147, 0,
	149, 148, 0, 645, 341, 150, 342, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 343,
	158, 159, 161, 160, 584, 0, 613, 641, 162, 661,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 344, 168, 345, 635, 169, 170, 171, 172, 173,
	0, 636, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 662, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 346,
	196, 197, 590, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 629, 209, 199, 200, 210, 347,
	211, 663, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 664, 216, 637, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 665, 666, 0, 0, 225, 226,
	638, 639, 611, 227, 228, 2151, 230, 0, 0, 231,
	232, 233, 234, 630, 235, 0, 294, 236, 237, 238,
	295, 667, 0, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 585, 0, 0, 0, 0, 0,
	583, 0, 0, 0, 0, 581, 582, 616, 605, 606,
	603, 604, 595, 0, 591, 0, 0, 0, 0, 594,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 632, 598, 0, 0, 0, 101, 102, 103, 246,
	647, 248, 648, 104, 649, 650, 0, 105, 252, 253,
	106, 107, 601, 631, 651, 652, 256, 0, 108, 643,
	0, 624, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 335, 116, 117, 0, 625, 627, 0,
	626, 628, 118, 119, 302, 120, 653, 121, 654, 655,
	0, 122, 0, 123, 0, 0, 0, 646, 125, 0,
	126, 0, 0, 0, 589, 127, 128, 129, 633, 634,
	612, 0, 0, 130, 131, 656, 0, 132, 0, 133,
	0, 0, 336, 0, 134, 644, 0, 266, 0, 135,
	136, 137, 138, 640, 642, 338, 0, 142, 0, 139,
	0, 337, 140, 657, 141, 658, 659, 660, 0, 623,
	0, 339, 143, 144, 340, 145, 146, 147, 0, 149,
	148, 0, 645, 341, 150, 342, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 275, 156, 343, 158,
	159, 161, 160, 584, 0, 613, 641, 162, 661, 163,
	164, 0, 165, 0, 0, 166, 0, 0, 167, 278,
	344, 168, 345, 635, 169, 170, 171, 172, 173, 0,
	636, 174, 281, 175, 0, 176, 177, 178, 179, 180,
	662, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 346, 196,
	197, 590, 198, 0, 202, 203, 204, 205, 0, 284,
	206, 207, 208, 629, 209, 199, 200, 210, 347, 211,
	663, 286, 212, 0, 218, 213, 214, 201, 215, 217,
	664, 216, 637, 0, 219, 0, 220, 221, 222, 223,
	224, 0, 289, 665, 666, 0, 0, 225, 226, 638,
	639, 611, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 630, 235, 0, 294, 236, 237, 238, 295,
	667, 0, 0, 239, 0, 0, 0, 0, 240, 241,
	242, 243, 244, 585, 0, 0, 0, 0, 0, 583,
	0, 0, 0, 0, 581, 582, 1261, 605, 606, 603,
	604, 595, 0, 591, 0, 0, 0, 0, 594, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	632, 598, 0, 0, 0, 101, 102, 103, 246, 647,
	248, 648, 104, 649, 650, 0, 105, 252, 253, 106,
	107, 601, 631, 651, 652, 256, 0, 108, 643, 0,
	624, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 625, 627, 0, 626,
	628, 118, 119, 302, 120, 653, 1264, 654, 655, 0,
	122, 0, 123, 0, 0, 0, 646, 125, 0, 126,
	0, 0, 0, 589, 127, 128, 129, 633, 634, 612,
	0, 0, 130, 131, 656, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 644, 0, 266, 0, 135, 136,
	1265, 138, 640, 642, 338, 0, 142, 0, 139, 0,
	337, 140, 657, 141, 658, 659, 660, 0, 623, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 645, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 1266, 1263, 157, 275, 156, 343, 158, 159,
	161, 160, 584, 0, 613, 641, 162, 661, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 635, 169, 170, 171, 172, 173, 0, 636,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 662,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	590, 198, 0, 202, 203, 204, 1267, 0, 284, 206,
	207, 208, 629, 209, 199, 200, 210, 347, 211, 663,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 664,
	216, 637, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 665, 666, 0, 0, 225, 226, 638, 639,
	611, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 630, 235, 0, 294, 236, 237, 238, 295, 667,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	1262, 244, 585, 0, 0, 0, 0, 0, 583, 0,
	0, 0, 0, 581, 582, 616, 605, 606, 603, 604,
	595, 0, 591, 0, 0, 0, 0, 594, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 632,
	598, 0, 0, 0, 101, 102, 103, 246, 647, 248,
	648, 104, 649, 650, 0, 105, 252, 253, 106, 107,
	601, 631, 651, 652, 256, 0, 108, 643, 0, 624,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 335, 116, 117, 0, 625, 627, 0, 626, 628,
	118, 119, 302, 120, 653, 121, 654, 655, 0, 122,
	0, 123, 0, 0, 0, 646, 125, 0, 126, 0,
	0, 0, 589, 127, 128, 129, 633, 634, 612, 0,
	0, 130, 131, 656, 0, 132, 0, 133, 0, 0,
	336, 0, 134, 644, 0, 266, 0, 135, 136, 137,
	138, 640, 642, 338, 0, 142, 0, 139, 0, 337,
	140, 657, 141, 658, 659, 660, 0, 623, 0, 339,
	143, 144, 340, 145, 146, 147, 0, 149, 148, 0,
	645, 341, 150, 342, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 275, 156, 343, 158, 159, 161,
	160, 0, 0, 613, 641, 162, 661, 163, 164, 0,
	165, 0, 0, 166, 0, 0, 167, 278, 344, 168,
	345, 635, 169, 170, 171, 172, 173, 0, 636, 174,
	281, 175, 0, 176, 177, 178, 179, 180, 662, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 346, 196, 197, 1279,
	198, 0, 202, 203, 204, 205, 0, 284, 206, 207,
	208, 629, 209, 199, 200, 210, 347, 211, 663, 286,
	212, 0, 218, 213, 214, 201, 215, 217, 664, 216,
	637, 0, 219, 0, 220, 221, 222, 223, 224, 0,
	289, 665, 666, 0, 0, 225, 226, 638, 639, 611,
	227, 228, 229, 230, 0, 0, 231, 232, 233, 234,
	630, 235, 0, 294, 236, 237, 238, 295, 667, 0,
	0, 239, 0, 0, 0, 0, 240, 241, 242, 243,
	244, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 1275, 1276, 616, 605, 606, 603, 604, 595,
	0, 1278, 0, 0, 0, 0, 594, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 632, 598,
	0, 0, 0, 101, 102, 103, 246, 647, 248, 648,
	104, 649, 650, 0, 105, 252, 253, 106, 107, 0,
	631, 651, 652, 256, 0, 108, 643, 0, 624, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	335, 116, 117, 0, 625, 627, 0, 626, 628, 118,
	119, 302, 120, 653, 121, 654, 655, 0, 122, 0,
	123, 0, 0, 0, 646, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 633, 634, 612, 0, 0,
	130, 131, 656, 0, 132, 0, 133, 0, 0, 336,
	0, 134, 644, 0, 266, 0, 135, 136, 137, 138,
	640, 642, 338, 0, 142, 0, 139, 0, 337, 140,
	657, 141, 658, 659, 660, 0, 623, 0, 339, 143,
	144, 340, 145, 146, 147, 0, 149, 148, 0, 645,
	341, 150, 342, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 343, 158, 159, 161, 160,
	0, 0, 613, 641, 162, 661, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 344, 168, 345,
	635, 169, 170, 171, 172, 173, 0, 636, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 662, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 346, 196, 197, 1279, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	629, 209, 199, 200, 210, 347, 211, 663, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 664, 216, 637,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	665, 666, 0, 0, 225, 226, 638, 639, 611, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 630,
	235, 0, 294, 236, 237, 238, 295, 667, 0, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 616, 605, 606, 603, 604, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	1278, 100, 0, 0, 0, 594, 632, 598, 0, 0,
	0, 101, 102, 103, 0, 647, 248, 648, 104, 649,
	650, 0, 105, 252, 253, 106, 107, 601, 631, 651,
	652, 256, 0, 108, 643, 0, 624, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 335, 116,
	2152, 0, 625, 627, 0, 626, 628, 118, 119, 302,
	120, 653, 121, 654, 655, 0, 122, 0, 123, 0,
	0, 0, 646, 125, 0, 126, 0, 0, 0, 589,
	127, 128, 129, 633, 634, 612, 0, 0, 130, 131,
	656, 0, 132, 0, 133, 0, 0, 336, 0, 134,
	644, 0, 266, 0, 135, 136, 137, 138, 640, 642,
	0, 0, 142, 0, 139, 0, 337, 140, 657, 141,
	658, 659, 660, 0, 623, 0, 0, 143, 144, 340,
	145, 146, 147, 0, 149, 148, 0, 645, 341, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 343, 158, 159, 161, 160, 584, 0,
	613, 641, 162, 661, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 344, 168, 345, 635, 169,
	170, 171, 172, 173, 0, 636, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 662, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 346, 196, 197, 590, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 629, 209,
	199, 200, 210, 0, 211, 663, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 664, 216, 637, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 665, 666,
	0, 0, 225, 226, 638, 639, 611, 227, 228, 2151,
	230, 0, 0, 231, 232, 233, 234, 630, 235, 0,
	294, 236, 237, 238, 295, 667, 0, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	582, 0, 0, 0, 98, 99, 0, 100, 591, 0,
	0, 0, 632, 594, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 631, 254, 255, 256, 0, 108,
	643, 0, 624, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 335, 116, 117, 0, 625, 627,
	0, 626, 628, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 633,
	634, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 336, 0, 134, 644, 0, 266, 0,
	135, 136, 137, 138, 640, 642, 338, 0, 142, 0,
	139, 0, 337, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 339, 143, 144, 340, 145, 146, 147, 0,
	149, 148, 0, 645, 341, 150, 342, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 343,
	158, 159, 161, 160, 0, 0, 0, 641, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 344, 168, 345, 635, 169, 170, 171, 172, 173,
	0, 636, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 346,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 629, 209, 199, 200, 210, 347,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 637, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	638, 639, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 630, 235, 0, 294, 236, 237, 238,
	295, 296, 0, 0, 239, 0, 523, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 1654, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	334, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 338, 0, 142, 0, 139, 0,
	337, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 274, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 79, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 347, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 81, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 701, 296,
	0, 0, 239, 0, 0, 0, 77, 240, 241, 242,
	243, 244, 0, 78, 523, 520, 0, 521, 516, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 76, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 334, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	335, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 1039, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 513, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 336,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	267, 268, 338, 0, 142, 0, 139, 0, 337, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 339, 143,
	144, 340, 145, 146, 147, 0, 149, 148, 0, 274,
	341, 150, 342, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 343, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	514, 0, 166, 0, 0, 167, 278, 344, 168, 345,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 346, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 347, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 512, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 0, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	523, 520, 0, 521, 516, 511, 0, 0, 0, 0,
	0, 522, 517, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 334, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 335, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 1036, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 513, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 336, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 267, 268, 338, 0,
	142, 0, 139, 0, 337, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 339, 143, 144, 340, 145, 146,
	147, 0, 149, 148, 0, 274, 341, 150, 342, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 343, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 514, 0, 166, 0,
	0, 167, 278, 344, 168, 345, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 346, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 347, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 512, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 0, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 523, 520, 0, 521,
	516, 511, 0, 0, 0, 0, 0, 522, 517, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	334, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 735,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 513,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 338, 0, 142, 0, 139, 0,
	337, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 274, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 514, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 347, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	512, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 523, 520, 0, 521, 516, 511, 0, 0,
	0, 0, 0, 522, 517, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 334, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 335, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 513, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 336, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	338, 0, 142, 0, 139, 0, 337, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 339, 143, 144, 340,
	145, 146, 147, 0, 149, 148, 0, 274, 341, 150,
	342, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 343, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 514, 0,
	166, 0, 0, 167, 278, 344, 168, 345, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 346, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 347, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 512, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 0, 95, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 522,
	517, 245, 0, 0, 0, 0, 101, 102, 103, 246,
	247, 248, 249, 104, 250, 251, 0, 105, 252, 253,
	106, 107, 0, 0, 254, 255, 256, 0, 108, 257,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 302, 120, 258, 121, 259, 260,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 261, 127, 128, 129, 262, 263,
	0, 0, 0, 130, 131, 264, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 265, 0, 266, 0, 135,
	136, 137, 138, 267, 268, 0, 0, 142, 0, 139,
	0, 0, 140, 269, 141, 270, 271, 272, 0, 273,
	0, 0, 143, 144, 0, 145, 146, 147, 0, 149,
	148, 0, 274, 0, 150, 0, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 275, 156, 0, 158,
	159, 161, 160, 0, 0, 0, 276, 162, 277, 163,
	164, 0, 165, 0, 557, 166, 0, 0, 167, 278,
	0, 168, 0, 279, 169, 170, 171, 172, 173, 0,
	280, 174, 281, 175, 0, 176, 177, 178, 179, 180,
	282, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 0, 196,
	197, 283, 198, 0, 202, 203, 204, 205, 79, 284,
	206, 207, 208, 0, 209, 199, 200, 210, 0, 211,
	285, 286, 212, 0, 218, 213, 214, 201, 215, 217,
	287, 216, 288, 0, 219, 81, 220, 221, 222, 223,
	224, 0, 289, 290, 291, 0, 0, 225, 226, 292,
	293, 0, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 0, 235, 0, 294, 236, 237, 238, 701,
	296, 0, 0, 239, 0, 95, 0, 77, 240, 241,
	242, 243, 244, 0, 78, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 245,
	0, 1399, 0, 1404, 101, 102, 103, 246, 247, 248,
	249, 104, 250, 251, 0, 105, 252, 253, 106, 107,
	0, 0, 254, 255, 256, 0, 108, 257, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 302, 120, 258, 121, 259, 260, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 261, 127, 128, 129, 262, 263, 0, 0,
	0, 130, 131, 264, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 265, 0, 266, 0, 135, 136, 137,
	138, 267, 268, 0, 0, 142, 0, 139, 0, 0,
	140, 269, 141, 270, 271, 272, 0, 273, 0, 0,
	143, 144, 0, 145, 146, 147, 0, 149, 148, 0,
	274, 0, 150, 0, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 275, 156, 0, 158, 159, 161,
	160, 0, 0, 0, 276, 162, 277, 163, 164, 0,
	165, 0, 0, 166, 0, 0, 167, 278, 0, 168,
	0, 279, 169, 170, 171, 172, 173, 0, 280, 174,
	281, 175, 0, 176, 177, 178, 179, 180, 282, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 0, 196, 197, 283,
	198, 0, 202, 203, 204, 205, 79, 284, 206, 207,
	208, 0, 209, 199, 200, 210, 0, 211, 285, 286,
	212, 0, 218, 213, 214, 201, 215, 217, 287, 216,
	288, 0, 219, 81, 220, 221, 222, 223, 224, 0,
	289, 290, 291, 0, 0, 225, 226, 292, 293, 0,
	227, 228, 229, 230, 0, 0, 231, 232, 233, 234,
	0, 235, 0, 294, 236, 237, 238, 701, 296, 0,
	0, 239, 0, 95, 0, 77, 240, 241, 242, 243,
	244, 0, 78, 0, 0, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 245, 0, 0,
	0, 76, 101, 102, 103, 246, 247, 248, 249, 104,
	250, 251, 0, 105, 252, 253, 106, 107, 0, 0,
	254, 255, 256, 0, 108, 257, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	302, 120, 258, 121, 259, 260, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	261, 127, 128, 129, 262, 263, 0, 0, 0, 130,
	131, 264, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 265, 0, 266, 0, 135, 136, 137, 138, 267,
	268, 0, 0, 142, 0, 139, 0, 0, 140, 269,
	141, 270, 271, 272, 0, 273, 0, 0, 143, 144,
	0, 145, 146, 147, 0, 149, 148, 0, 274, 0,
	150, 0, 0, 151, 0, 0, 152, 0, 153, 154,
	155, 157, 275, 156, 0, 158, 159, 161, 160, 0,
	0, 0, 276, 162, 277, 163, 164, 0, 165, 0,
	557, 166, 0, 0, 167, 278, 0, 168, 0, 279,
	169, 170, 171, 172, 173, 0, 280, 174, 281, 175,
	0, 176, 177, 178, 179, 180, 282, 181, 182, 0,
	183, 184, 185, 186, 187, 189, 190, 188, 191, 192,
	193, 194, 0, 195, 0, 196, 197, 283, 198, 0,
	202, 203, 204, 205, 0, 284, 206, 207, 208, 0,
	209, 199, 200, 210, 0, 211, 285, 286, 212, 0,
	218, 213, 214, 201, 215, 217, 287, 216, 288, 0,
	219, 0, 220, 221, 222, 223, 224, 0, 289, 290,
	291, 0, 0, 225, 226, 292, 293, 0, 227, 228,
	229, 230, 0, 0, 231, 232, 233, 234, 0, 235,
	0, 294, 236, 237, 238, 295, 296, 0, 0, 239,
	0, 95, 0, 0, 240, 241, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 245, 0, 1399, 0, 1404,
	101, 102, 103, 246, 247, 248, 249, 104, 250, 251,
	0, 105, 252, 253, 106, 107, 0, 0, 254, 255,
	256, 0, 108, 257, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 302, 120,
	258, 121, 259, 260, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 261, 127,
	128, 129, 262, 263, 0, 0, 0, 130, 131, 264,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 265,
	0, 266, 0, 135, 136, 137, 138, 267, 268, 0,
	0, 142, 0, 139, 0, 0, 140, 269, 141, 270,
	271, 272, 0, 273, 0, 0, 143, 144, 0, 145,
	146, 147, 0, 149, 148, 0, 274, 0, 150, 0,
	0, 151, 0, 0, 152, 0, 153, 154, 155, 157,
	275, 156, 0, 158, 159, 161, 160, 0, 0, 0,
	276, 162, 277, 163, 164, 0, 165, 0, 0, 166,
	0, 0, 167, 278, 0, 168, 0, 279, 169, 170,
	171, 172, 173, 0, 280, 174, 281, 175, 0, 176,
	177, 178, 179, 180, 282, 181, 182, 0, 183, 184,
	185, 186, 187, 189, 190, 188, 191, 192, 193, 194,
	0, 195, 0, 196, 197, 283, 198, 0, 202, 203,
	204, 205, 0, 284, 206, 207, 208, 0, 209, 199,
	200, 210, 0, 211, 285, 286, 212, 0, 218, 213,
	214, 201, 215, 217, 287, 216, 288, 0, 219, 0,
	220, 221, 222, 223, 224, 0, 289, 290, 291, 0,
	0, 225, 226, 292, 293, 0, 227, 228, 229, 230,
	0, 0, 231, 232, 233, 234, 0, 235, 0, 294,
	236, 237, 238, 295, 296, 0, 0, 239, 0, 0,
	95, 0, 240, 241, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 943, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 267, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 0, 0, 239, 0, 95, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 1319, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 267, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 0, 0, 239, 0, 95, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 1716, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 0, 0, 142, 0, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 616, 605, 606, 603, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 100, 813, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 647, 248, 648, 104, 649,
	650, 0, 105, 252, 253, 106, 107, 0, 0, 651,
	652, 256, 0, 108, 257, 0, 334, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 335, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 653, 121, 654, 655, 0, 122, 0, 123, 0,
	0, 0, 646, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 612, 0, 0, 130, 131,
	656, 0, 132, 0, 133, 0, 0, 336, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	338, 0, 142, 0, 139, 0, 337, 140, 657, 141,
	658, 659, 660, 0, 623, 0, 339, 143, 144, 340,
	145, 146, 147, 0, 149, 148, 0, 274, 341, 150,
	342, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 343, 158, 159, 161, 160, 0, 0,
	613, 276, 162, 661, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 344, 168, 345, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 662, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 346, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 347, 211, 663, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 664, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 665, 666,
	0, 0, 225, 226, 292, 293, 611, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 667, 523, 520, 239, 0,
	0, 742, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	334, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 335, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 336, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 338, 0, 142, 0, 139, 0,
	337, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	339, 143, 144, 340, 145, 146, 147, 0, 149, 148,
	0, 274, 341, 150, 342, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 343, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 344,
	168, 345, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 346, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 347, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 91, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 267, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 90, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 523, 520, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 94,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 334, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	335, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 336,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	267, 268, 338, 0, 142, 0, 139, 0, 337, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 339, 143,
	144, 340, 145, 146, 147, 0, 149, 148, 0, 274,
	341, 150, 342, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 343, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 344, 168, 345,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 346, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 347, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 267, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 523, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 94, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 334, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 335, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 336, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	338, 0, 142, 0, 139, 0, 337, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 339, 143, 144, 340,
	145, 146, 147, 0, 149, 148, 0, 274, 341, 150,
	342, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 343, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 344, 168, 345, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 346, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 347, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 1129, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 1127, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	1371, 0, 130, 131, 264, 0, 132, 0, 133, 1132,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 0, 0, 142, 1369, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 1131, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 1370, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	1129, 108, 257, 0, 0, 1124, 109, 110, 111, 0,
	112, 1127, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 1132, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 1123, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 1131, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	1130, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	1822, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	267, 268, 0, 0, 142, 0, 139, 0, 0, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 274,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 0, 168, 0,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 267, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 557, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	1054, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	0, 0, 142, 0, 139, 0, 0, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 274, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 0, 168, 0, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 969, 268, 0, 0, 142, 0, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 557, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 709, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 267, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	569, 268, 0, 0, 142, 0, 139, 0, 0, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 274,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 557, 166, 0, 0, 167, 278, 0, 168, 0,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 562, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 557, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	433, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	0, 0, 142, 0, 139, 0, 0, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 274, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 0, 168, 0, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 432, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 0, 0, 142, 0, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 1428, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	1426, 268, 0, 0, 142, 0, 139, 0, 0, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 274,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 0, 168, 0,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 1415, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 1084, 268,
	0, 0, 142, 0, 139, 0, 0, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 274, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 0, 168, 0, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 0, 0, 142, 0, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 449, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 953, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 267, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 0, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	784, 268, 0, 0, 142, 0, 139, 0, 0, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 274,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 0, 168, 0,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 779, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 717, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	0, 0, 142, 0, 139, 0, 0, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 274, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 463, 0, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 0, 168, 0, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 460, 290, 291,
	0, 0, 225, 456, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 267, 268, 0, 0, 142, 0, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 463, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 460, 290, 291, 0, 0, 225, 456, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 697, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	695, 268, 0, 0, 142, 0, 139, 0, 0, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 274,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 0, 168, 0,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 692, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 283, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 289, 290, 291, 0, 0, 225, 226,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 689, 268,
	0, 0, 142, 0, 139, 0, 0, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 274, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 0, 168, 0, 279, 169,
	170, 171, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 179, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 283, 198, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 302, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 265, 0, 266, 0, 135, 136,
	137, 138, 687, 268, 0, 0, 142, 0, 139, 0,
	0, 140, 269, 141, 270, 271, 272, 0, 273, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 274, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 275, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 276, 162, 277, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 278, 0,
	168, 0, 279, 169, 170, 171, 172, 173, 0, 280,
	174, 281, 175, 0, 176, 177, 178, 179, 180, 282,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	283, 198, 0, 202, 203, 204, 205, 0, 284, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 285,
	286, 212, 0, 218, 213, 214, 201, 215, 217, 287,
	216, 288, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 289, 290, 291, 0, 0, 225, 226, 292, 293,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 294, 236, 237, 238, 295, 296,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 302, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 265, 0,
	266, 0, 135, 136, 137, 138, 565, 268, 0, 0,
	142, 0, 139, 0, 0, 140, 269, 141, 270, 271,
	272, 0, 273, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 274, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 275,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 276,
	162, 277, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 278, 0, 168, 0, 279, 169, 170, 171,
	172, 173, 0, 280, 174, 281, 175, 0, 176, 177,
	178, 179, 180, 282, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 283, 198, 0, 202, 203, 204,
	205, 0, 284, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 285, 286, 212, 0, 218, 213, 214,
	201, 215, 217, 287, 216, 288, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 289, 290, 291, 0, 0,
	225, 226, 292, 293, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 294, 236,
	237, 238, 295, 296, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 302, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 265, 0, 266, 0, 135, 136, 137, 138,
	267, 268, 0, 0, 142, 0, 139, 0, 0, 140,
	269, 141, 270, 271, 272, 0, 273, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 274,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 275, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 276, 162, 277, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 278, 0, 168, 0,
	279, 169, 170, 171, 172, 173, 0, 280, 174, 281,
	175, 0, 176, 177, 178, 179, 180, 282, 546, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 283, 198,
	0, 202, 203, 204, 205, 0, 284, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 285, 286, 212,
	0, 218, 213, 214, 201, 215, 217, 287, 216, 288,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 289,
	290, 291, 0, 0, 225, 226, 292, 293, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 294, 236, 237, 238, 295, 296, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 454,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 302, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 265, 0, 266, 0,
	135, 136, 137, 138, 267, 268, 0, 0, 142, 0,
	139, 0, 0, 140, 269, 141, 270, 271, 272, 0,
	273, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 274, 0, 150, 0, 0, 452, 0,
	0, 152, 0, 153, 154, 155, 157, 275, 463, 0,
	158, 159, 161, 160, 0, 0, 0, 276, 162, 277,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	278, 0, 168, 0, 279, 169, 170, 171, 172, 173,
	0, 280, 174, 281, 175, 0, 176, 177, 178, 179,
	180, 282, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 455, 198, 0, 202, 203, 204, 205, 0,
	284, 206, 453, 208, 0, 209, 199, 200, 210, 0,
	211, 285, 286, 212, 0, 218, 213, 214, 201, 215,
	217, 287, 216, 288, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 460, 290, 291, 0, 0, 225, 456,
	292, 293, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 294, 236, 237, 238,
	295, 296, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 302,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	265, 0, 266, 0, 135, 136, 137, 138, 267, 268,
	0, 0, 142, 0, 139, 0, 0, 140, 269, 141,
	270, 271, 272, 0, 273, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 274, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 275, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 276, 162, 277, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 278, 0, 168, 0, 279, 169,
	170, 0, 172, 173, 0, 280, 174, 281, 175, 0,
	176, 177, 178, 0, 180, 282, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 283, 0, 0, 202,
	203, 204, 205, 0, 284, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 285, 286, 212, 0, 218,
	213, 214, 201, 215, 217, 287, 216, 288, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 289, 290, 291,
	0, 0, 225, 226, 292, 293, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	294, 236, 237, 238, 295, 296, 0, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 879, 0, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 847, 0, 0, 0, 848,
	0, 862, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 847, 0, 0, 0, 0, 0, 862,
	868, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 0, 862, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	870, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 869, 0, 0, 863, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 873,
	0, 859, 860, 861, 874, 0, 858, 856, 857, 849,
	850, 851, 852, 854, 855, 0, 0, 0, 0, 2097,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 874, 0, 858, 856, 857, 849, 850, 851,
	852, 854, 855, 0, 0, 1509, 1510, 2072, 1527, 1528,
	1529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	874, 0, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 0, 0, 845, 846, 2006, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 1524, 868,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 879,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	847, 0, 0, 0, 848, 0, 862, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 847, 0,
	0, 0, 0, 0, 862, 868, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 862, 1525, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 870, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 869, 0, 0, 863,
	0, 872, 880, 0, 0, 1526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 1521, 1522,
	1523, 0, 0, 1520, 1518, 1519, 1511, 1512, 1513, 1514,
	1516, 1517, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 873, 0, 859, 860, 861, 874,
	0, 858, 856, 857, 849, 850, 851, 852, 854, 855,
	0, 0, 0, 0, 2001, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 874, 0, 858,
	856, 857, 849, 850, 851, 852, 854, 855, 0, 0,
	0, 0, 1997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 874, 0, 858, 856, 857,
	849, 850, 851, 852, 854, 855, 0, 0, 845, 846,
	1974, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 879, 0, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 847, 0, 0, 0, 848,
	0, 862, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 847, 0, 0, 0, 0, 0, 862,
	868, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 0, 862, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	870, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 869, 0, 0, 863, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 873,
	0, 859, 860, 861, 874, 0, 858, 856, 857, 849,
	850, 851, 852, 854, 855, 0, 0, 0, 0, 1906,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 874, 0, 858, 856, 857, 849, 850, 851,
	852, 854, 855, 0, 0, 0, 0, 1905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	874, 0, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 0, 0, 845, 846, 1844, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 879,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	847, 0, 0, 0, 848, 0, 862, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 847, 0,
	0, 0, 0, 0, 862, 868, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 862, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 870, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 869, 0, 0, 863,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 873, 0, 859, 860, 861, 874,
	0, 858, 856, 857, 849, 850, 851, 852, 854, 855,
	0, 0, 0, 0, 1797, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 874, 0, 858,
	856, 857, 849, 850, 851, 852, 854, 855, 0, 0,
	0, 0, 1719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 874, 0, 858, 856, 857,
	849, 850, 851, 852, 854, 855, 0, 0, 845, 846,
	1695, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 879, 0, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 847, 0, 0, 0, 848,
	0, 862, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 847, 0, 0, 0, 0, 0, 862,
	868, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 0, 862, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	870, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 853, 2174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 869, 0, 0, 863, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 2173, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 873,
	0, 859, 860, 861, 874, 0, 858, 856, 857, 849,
	850, 851, 852, 854, 855, 0, 0, 0, 0, 1226,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 874, 0, 858, 856, 857, 849, 850, 851,
	852, 854, 855, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	874, 0, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 879, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 847, 0,
	1391, 0, 848, 0, 862, 879, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 847, 0, 0, 0,
	0, 0, 862, 868, 0, 0, 0, 1111, 0, 0,
	848, 0, 0, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 1541, 0, 0, 1540,
	1392, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	862, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 880, 870, 0, 0, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 869, 0, 0, 863, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 873, 0, 859, 860, 861, 874, 0, 858,
	856, 857, 849, 850, 851, 852, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 874, 0, 858, 856, 857,
	849, 850, 851, 852, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	859, 860, 861, 874, 0, 858, 856, 857, 849, 850,
	851, 852, 854, 855, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	879, 0, 845, 846, 0, 865, 866, 867, 875, 876,
	877, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 847, 0, 0, 0, 848, 0, 862, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 0, 862, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 853, 0, 848,
	0, 0, 879, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 872, 880, 0, 0,
	868, 0, 0, 847, 1542, 853, 0, 848, 0, 862,
	879, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 880, 870, 0, 0, 0,
	0, 847, 863, 0, 0, 0, 0, 862, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 869, 541, 853,
	863, 0, 0, 0, 1547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 869, 0, 853, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 872, 880, 870, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 873,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 870, 0, 0, 869,
	0, 0, 863, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 0, 0,
	1699, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 864, 859, 860, 861,
	874, 0, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 864, 859, 860, 861, 874, 0,
	858, 856, 857, 849, 850, 851, 852, 854, 855, 873,
	0, 0, 0, 0, 0, 0, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 879, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 874, 0, 858, 856, 857, 849, 850, 851,
	852, 854, 855, 847, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	874, 0, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 1500, 853,
	0, 848, 0, 0, 879, 0, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 872, 880,
	0, 0, 868, 0, 0, 847, 0, 0, 0, 848,
	0, 862, 879, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 846, 0, 0, 870, 0,
	875, 876, 877, 847, 863, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 1507, 0, 0, 0, 0, 862, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 872, 880,
	870, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 873, 0, 0, 878, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 869, 0, 0, 863, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 871, 0, 864, 859,
	860, 861, 874, 0, 858, 856, 857, 849, 850, 851,
	852, 854, 855, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 846, 864, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 873, 0, 0, 0, 0, 0, 848, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 0, 862, 871, 873,
	0, 859, 860, 861, 874, 0, 858, 856, 857, 849,
	850, 851, 852, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 874, 0, 858, 856, 857, 849, 850, 851,
	852, 854, 855, 0, 0, 845, 846, 853, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 872, 880, 848, 0,
	874, 879, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 0, 878, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 847, 0, 0, 0, 870, 0, 862, 0,
	0, 0, 863, 0, 0, 0, 848, 0, 0, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 853, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 863, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	874, 0, 858, 856, 857, 849, 850, 851, 852, 854,
	855, 0, 0, 0, 0, 864, 0, 996, 988, 1013,
	980, 1004, 1003, 0, 0, 982, 981, 0, 0, 0,
	873, 1015, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 1001, 1000, 0, 873, 0,
	0, 0, 0, 0, 999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 871, 0, 0, 859, 860,
	861, 874, 0, 858, 856, 857, 849, 850, 851, 852,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 990, 992, 993, 994, 0, 1012, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 859, 860, 861, 874,
	0, 858, 856, 857, 849, 850, 851, 852, 854, 855,
	0, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 989,
	996, 988, 1013, 980, 1004, 1003, 0, 0, 982, 981,
	0, 0, 0, 0, 1015, 1014, 0, 0, 0, 0,
	0, 0, 0, 465, 0, 0, 0, 997, 0, 0,
	0, 1161, 1159, 1160, 1163, 1162, 0, 0, 0, 0,
	0, 470, 0, 0, 0, 0, 1009, 0, 1001, 1000,
	0, 0, 0, 471, 0, 0, 985, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 995, 986, 0,
	0, 0, 0, 0, 472, 998, 0, 1017, 0, 473,
	0, 0, 0, 0, 478, 479, 0, 983, 489, 0,
	1010, 1011, 0, 0, 0, 0, 0, 0, 0, 0,
	468, 474, 0, 991, 990, 992, 993, 994, 0, 1012,
	0, 0, 987, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 989, 0, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 484, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	995, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 1010, 1011, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 483, 485, 467,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 486, 0, 491, 0, 0, 0, 487, 0,
	0, 0, 0, 469, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 490,
}
var sqlPact = [...]int{

	255, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 715, 17156, 17156, 929, 21412,
	-1000, -1000, -1000, -1000, -1000, -1000, 809, 719, 531, 5287,
	21412, 21412, 21108, 1323, 1226, 1183, 1323, 22932, -1000, -1000,
	26884, -1000, 31079, 528, 538, 528, 528, 557, 22932, 1156,
	665, 14078, 699, 135, -1000, 775, -35, 26580, 21412, 1512,
	29, 19284, 281, 255, 20804, 26276, 21412, 20500, 621, 26,
	17764, 21412, -1000, 35, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1335, 10883, 10883,
	362, 35, -1000, 1332, 1232, 1230, 19284, 25972, 25668, 25364,
	25060, 24756, -1000, 12812, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 829, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 366,
	365, -1000, 20196, -1000, 1037, -1000, 28, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10883, 10883, 1021, -1000, 21412,
	-1000, -1000, 24452, 24148, 736, 360, 1169, -1000, -1000, 610,
	449, -1000, -1000, 13762, 42, -1000, -1000, -1000, -1000, 1345,
	1510, 16852, 902, 1324, -1000, 1017, 1322, 1321, 1320, 1318,
	1316, -1000, 854, 667, 545, -1000, 1315, 445, 964, 535,
	-1000, 1313, 1312, 1169, -1000, 1169, -1000, -1000, -1000, 611,
	22932, -1000, -1000, -1000, -1000, -1000, 19284, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1750, -1000, -1000,
	-1000, -1000, 1739, -1000, -1000, -1000, -1000, 23844, 21412, 21412,
	1251, 23540, -1000, 775, -1000, -1000, -1000, 1137, 1508, 1508,
	1508, 1532, 132, 127, 135, 20, 21412, -1000, 359, 20,
	9237, 9237, -1000, -1000, 281, -1000, 315, 16232, -1000, 7592,
	-1000, 881, 1401, 494, 872, 1398, -148, 820, 803, 1393,
	16852, 17764, 26, 7, -1000, -1000, -1000, 4971, 16852, 30336,
	-1000, 10883, 10883, 10883, 10883, 10883, 972, 388, -1000, 345,
	340, 6262, -1000, -1000, 1736, -1000, -1000, -1000, 141, -1000,
	-1000, 10883, 35, -1000, -1000, -1000, -1000, 336, 1764, -1000,
	453, -1000, -1000, -1000, 456, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1344, 334, 332, -1000, -1000, -1000,
	-1000, 322, 321, 320, 318, 314, 313, 311, 310, 309,
	307, 305, 293, 292, 288, 285, 869, -1000, 485, -1000,
	-1000, 485, 485, -1000, 271, 271, 272, -1000, -1000, -1000,
	-1000, 271, -1000, -1000, -1000, 446, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 284, 30336, 713, 15307, 35, -1000, -1000,
	-1000, 19284, 21412, 21412, 741, 23236, -1000, 1391, 118, 1389,
	-1000, 117, 1387, -1000, 117, 1383, 7, 1382, 11, -1000,
	-1000, 281, 19892, 21412, 1609, 31023, -1000, 10883, -1000, -1000,
	17156, 1396, 30336, 30336, 17156, -1000, -1000, 1587, -1000, 21412,
	10883, 25, -1000, -1000, -1000, -1000, 1155, 1192, 578, 13446,
	13130, 1464, 976, -1000, -1000, -1000, 36, 5287, 259, 726,
	-1000, -1000, -1000, 19588, -1000, -1000, 21412, 1343, 17156, 21412,
	21412, 21412, 21412, 21412, -1000, -1000, -1000, 544, 1342, 21412,
	-1000, 1151, -1000, -1000, 21412, 21412, 823, 659, -1000, 25,
	-1000, 22932, -1000, 125, -1000, -1000, -1000, -1000, 280, 1098,
	459, 119, 22628, 459, 1095, -1000, 1137, -1000, 1042, 1231,
	9896, 1168, 10883, 135, -1000, -1000, 135, 135, 10883, -1000,
	-1000, 21412, 20, 1584, 21412, 133, -1000, 29537, -1000, 133,
	-1000, -1000, -1000, 21412, -7, -1000, 30336, -1000, -2, 835,
	-1000, 18676, 1499, 1498, 1475, 19284, 1558, -35, 1309, 1551,
	-35, 1308, 608, 21412, 21412, 604, 602, 19284, 423, -1000,
	21412, -1000, -1000, -9, -1000, 30870, 31023, 5287, 643, 10883,
	10883, 10883, 10883, 10883, 10883, 10883, 10883, 10883, 10883, 10883,
	10883, 10883, 10883, 10883, 10883, 10883, 10883, 10883, 10883, 10883,
	10883, 1125, 10883, 601, 10883, 10883, 10883, 10883, 814, 938,
	230, 1077, -1000, 1731, 1731, 1731, 30665, 30665, 197, 388,
	-1000, 10883, -1000, 9567, 127, 29078, 18, -1000, -1000, -1000,
	7250, 478, 30336, 35, 5932, -1000, 1732, 846, 1353, 1279,
	279, 126, 116, 10883, 10883, 11212, 11212, 10883, 11541, 10883,
	10883, 6591, 10883, 10883, 10883, 10883, 10883, 10883, -1000, 278,
	-1000, -1000, -1000, -1000, 1729, -1000, -1000, 1727, -1000, 640,
	639, 1722, -1000, 1307, -11, -1000, -1000, 470, 94, 1579,
	94, 15616, -1000, 21412, 21412, -1000, 21412, -1000, -1000, 21412,
	-1000, 21412, 21412, -1000, 21412, 21412, 259, 18068, 778, 1381,
	805, 259, -12, -1000, 437, -1000, -1000, -1000, -1000, 83,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, 869,
	271, 271, 271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	446, -1000, -1000, 485, 485, 485, -1000, -1000, -18, 30336,
	600, -1000, 1306, 527, -1000, 461, -40, 1169, 953, -1000,
	-1000, -1000, -1000, -1000, -1000, 17, -1000, -1000, 17, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1761, 5287,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 21412, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 259, -1000, -1000, -1000, -1000,
	21412, 21412, 21412, -1000, -1000, 19284, 18372, 1578, 1379, 943,
	-1000, 1572, 21412, 1013, 1093, -1000, 655, 1378, -1000, -1000,
	-1000, -1000, 30336, -1000, 387, -1000, -1000, 30336, 774, 1239,
	-1000, 1239, 16, -1000, 29499, -1000, 245, -46, 470, 9237,
	14999, 5287, -1000, 470, 115, 7592, -1000, 778, 21412, 21412,
	21412, -1000, -1000, 1091, 22324, 1090, 31023, 21412, -1000, 243,
	241, 1195, 1182, 21412, 21412, 22020, 21716, 21412, 785, -35,
	-1000, 237, -35, -1000, 234, 21412, 801, -1000, 21412, 21412,
	799, 1269, 1061, -1000, 460, 16852, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 444, 668, 668, 598,
	598, 598, 598, 1711, 1215, 1418, 702, 30374, 30374, 30374,
	308, 207, 207, 30374, 30374, 30374, 30665, 30564, 258, 10883,
	10883, 599, 935, 230, 258, 10883, 258, 258, 258, 258,
	-1000, 993, -1000, -1000, -1000, -1000, 1302, 228, 11541, 11541,
	-1000, -1000, -1000, 6262, 11870, -1000, -1000, -1000, -1000, 227,
	10883, -1000, 29106, -188, -48, -1000, -1000, 10883, -47, -124,
	-1000, -1000, 695, -1000, 10883, -1000, -4, 10883, 10883, 10883,
	111, 110, -1000, 587, -1000, 585, 584, 583, -1000, 226,
	970, 223, 222, 10883, -1000, -1000, 30308, 3933, 108, 1298,
	-136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 106, 105,
	30226, -136, 104, 2481, -1000, 11541, 11541, 11541, 6262, 220,
	103, 29471, -136, 29974, 8908, 8908, 8908, 101, 29946, 10883,
	-136, 3869, 3744, 3495, -56, -57, -67, 1712, -68, 98,
	442, 429, 96, 710, 1296, 21412, 776, 10883, 934, -1000,
	14691, 488, 21412, 776, 84, -1000, -1000, -1000, 417, 21412,
	-1000, -1000, -1000, 118, -1000, 117, 117, 7, -1000, -1000,
	19284, -1000, -1000, 31023, -1000, 376, 385, -1000, 1709, -1000,
	10883, 21412, 21412, 1211, -1000, -1000, -1000, 763, -1000, 844,
	-1000, 14078, -1000, -27, -1000, -1000, -1000, -1000, 423, -1000,
	95, -69, 3, 31023, -1000, -1000, -1000, -1000, -1000, 21412,
	290, 21412, -35, 21412, -1000, 1760, -35, 21412, 1376, 1407,
	408, 21412, 774, -1000, 10883, 1701, -1000, -1000, -1000, 10883,
	-1000, -1000, -1000, 259, -1000, 1278, -1000, -95, 1563, 157,
	-176, 91, 425, -1000, 14383, -1000, 1278, -1000, -1000, -1000,
	-1000, 579, 576, 1375, -1000, 1089, -1000, 495, -1000, 833,
	10883, 12504, 217, 216, 894, -1000, 1373, 1009, 1370, 1009,
	-1000, -2, 826, -1000, 10883, -1000, 10883, -1000, 575, -1000,
	-1000, 574, 460, 1292, 678, -1000, 991, -1000, 10883, 258,
	258, 10883, 11541, 11541, -1000, 258, -1000, -1000, -1000, -1000,
	-1000, 1291, 215, 10883, 31023, 4008, 3950, -74, -1000, 8579,
	-6, -1000, 10883, -1000, 28749, -1000, -1000, 337, 1405, -1000,
	10883, 29892, 86, 8250, -1000, 29864, -19, -19, -1000, 1759,
	1111, 988, 969, 761, 1693, -1000, 15924, 475, 984, 28711,
	30870, 31023, -1000, 10883, -1000, -1000, 1290, 10883, -1000, 30870,
	31023, 11541, 11541, 11541, 11541, 11541, 11541, 11541, 11541, 11541,
	11541, 11541, 11541, 11541, 11541, 11541, 11541, 11541, 11541, 11541,
	1210, 11541, 1721, 1721, 1721, -8, 7921, -1000, 1339, 1290,
	10883, 10883, 31023, 81, 79, 78, -1000, 10883, -136, 10883,
	10883, 10883, -1000, -1000, -1000, 77, -1000, 1690, -1000, -1000,
	-1000, -1000, -1000, 694, -1000, -1000, 6920, 30336, -1000, 776,
	1489, -78, -1000, -1000, -1000, 470, 15616, 14999, 7592, -79,
	-1000, -1000, -1000, 778, -1000, 1688, -1000, 76, 30336, -27,
	-27, -1000, -1000, -1000, -1000, -1000, 21412, -1000, 1257, -1000,
	18372, 212, 21412, 211, -1000, 210, -1000, -1000, 209, 21412,
	1153, 408, 17460, -1000, 459, 997, 28683, -1000, 75, 1275,
	1530, -1000, 14999, 1204, 1200, 14999, 1114, 975, 975, 975,
	-1000, 206, 384, 425, 4325, 10883, 18980, 982, 58, 73,
	1563, 1275, 21412, 21412, 21412, 1368, -1000, 1267, -1000, 28354,
	-84, -1000, 317, 1509, 10883, -1000, -1000, 196, 12504, 21412,
	-1000, 1176, 1181, 521, 21412, -1000, 21412, -1000, 21412, 21412,
	21412, -85, -86, 21412, 21412, -1000, 16852, 637, 195, 1714,
	258, 3535, 2191, 10883, 31023, 30703, -94, 10883, 10883, -1000,
	-96, -1000, 10883, 382, 30336, -1000, -1000, -1000, 30336, 10883,
	1755, 10883, 71, 65, 64, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63, -1000, -1000, 27188, 10883, 62, -1000,
	56, 55, 30336, 1339, 30336, -1000, -1000, 484, 484, 729,
	729, 729, 729, 1721, 962, 270, 190, 335, 335, 335,
	886, 357, 357, 335, 335, 335, 1289, 1149, 194, 27855,
	10883, -98, -1000, -1000, -1000, 30336, 30336, 52, -1000, -1000,
	-1000, -136, 3461, 28316, 28288, -1000, 51, -1000, -38, -1000,
	-1000, 205, -35, 776, -1000, -44, -1000, 416, 371, -1000,
	-1000, -1000, 1260, -1000, 12504, 193, 21412, 18372, 1566, 12504,
	1006, 1161, 408, 17460, -1000, 655, -1000, -1000, -1000, 464,
	10883, 10883, 1563, 14999, 14999, 1956, 1199, 14999, -1000, -1000,
	-1000, -1000, 370, 375, 425, 18980, -1000, 1681, 1185, -100,
	-1000, -1000, 21412, 177, -1000, 425, 464, -1000, -1000, -1000,
	21412, -1000, 21412, -1000, 5287, 21412, 1287, 1078, -1000, -1000,
	1174, 176, 11541, 21412, -1000, 885, 12504, 1496, 35, 5287,
	1496, 27959, 5932, -102, -106, 1073, -1000, 1072, 10883, -1000,
	31023, 1009, 1009, -1000, 571, 565, 558, 548, -1000, -1000,
	-45, 16548, 1758, 10883, 10883, 30703, -108, -1000, 258, 258,
	-1000, 27921, -1000, 30336, -1000, 29864, -1000, -1000, -1000, -1000,
	956, -1000, 27893, -1000, -1000, -1000, -1000, 11541, 1285, 174,
	31023, 27564, -1000, -1000, 10883, -1000, -1000, -1000, 1429, 21412,
	1474, -1000, -1000, 172, -1000, 965, -110, 12504, -112, 50,
	-35, -116, 21412, -1000, 408, 17460, -1000, 1407, -1000, 21412,
	30336, -136, -1000, 1956, -1000, 171, 10883, 14999, -1000, -176,
	-1000, -120, -1000, 18980, -1000, 369, -185, -1000, 407, -1000,
	425, 165, 21412, 18980, -1000, -1000, 1147, -1000, -1000, 21412,
	1084, -1000, -1000, 10883, 27855, 162, 1257, 159, -1000, -1000,
	-1000, -1000, -1000, -1000, 1509, -4, -1000, 839, -1000, -1000,
	30336, 1497, -1000, -1000, 21412, 21412, 152, 150, -1000, 148,
	35, -122, -1000, 404, 258, 258, -1000, -1000, 49, 984,
	1523, -1000, 3512, 11541, 31023, -132, -1000, 27526, 681, -137,
	21412, -1000, -1000, 5603, 21412, 885, -138, -1000, 1257, -1000,
	885, 146, 17460, -1000, 1153, -50, -1000, 1564, -1000, 21412,
	30336, -1000, 425, -1000, 1654, -1000, -1000, 1185, -1000, 4652,
	18980, 21412, -145, -1000, -1000, -1000, 1367, 27498, 1135, 21412,
	-1000, 21412, 1496, 48, 21412, 496, 5287, -1000, -1000, 10883,
	10883, 10883, 1758, -1000, -1000, 1757, -1000, 800, 10883, 3512,
	-146, -1000, -1000, 739, -1000, 470, -1000, 142, 1257, 885,
	-1000, 1257, 12504, -1000, 1161, 21412, 134, -152, 18980, -1000,
	-1000, -1000, 1650, -1000, -157, -1000, 1359, -1000, 1003, 950,
	47, -158, -1000, -1000, 119, -1000, 10883, -1000, -159, -165,
	-19, -1000, -1000, 46, 10554, 10554, -136, -1000, 15616, -1000,
	21412, -1000, 1257, -1000, -167, -1000, -1000, -1000, -1000, -1000,
	358, -1000, 21412, -1000, 1005, 1004, 714, -1000, -1000, -1000,
	-1000, -1000, 1135, 30336, -1000, -1000, 45, -1000, -1000, -1000,
	12188, 996, 769, 29144, -1000, -151, -173, -1000, 885, -1000,
	-1000, -1000, 1435, -1000, 514, 1122, 1122, 1003, 1755, 1620,
	-1000, -1000, -1000, -1000, -1000, -1000, 992, 1257, -1000, 1633,
	-1000, -1000, 1166, -1000, -1000, 10225, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2045, 2043, 1622, 1693, 2035, 2031, 2027, 1683, 2019,
	2018, 2017, 2016, 2014, 2013, 1628, 1605, 1592, 1588, 2010,
	124, 2009, 2006, 2005, 1579, 2004, 2002, 1998, 1997, 1996,
	1994, 46, 1993, 1990, 1572, 1543, 1541, 1537, 1989, 1984,
	1528, 1982, 1980, 16, 1977, 89, 1976, 30, 149, 2374,
	142, 1975, 1961, 1959, 17, 113, 70, 1956, 42, 1943,
	1941, 49, 45, 23, 15, 1939, 104, 1937, 1935, 1198,
	27, 1933, 1932, 145, 1931, 22, 24, 1157, 150, 148,
	127, 120, 1928, 1925, 1924, 1922, 55, 1920, 2, 1919,
	1917, 10, 76, 25, 1916, 28, 19, 1915, 1914, 135,
	1912, 64, 101, 1533, 99, 129, 125, 1908, 71, 7,
	73, 1906, 1903, 153, 29, 1900, 41, 93, 138, 1899,
	48, 155, 56, 32, 63, 132, 1898, 1896, 1895, 102,
	1893, 117, 77, 1891, 1887, 90, 1885, 137, 139, 1879,
	1877, 98, 1876, 123, 1874, 1873, 144, 163, 1867, 156,
	1866, 1863, 157, 116, 13, 66, 67, 9, 1526, 1517,
	133, 83, 34, 26, 1862, 1802, 1229, 1422, 35, 108,
	75, 59, 109, 62, 81, 146, 33, 1858, 1857, 131,
	1856, 1854, 1853, 1852, 1851, 105, 1849, 1848, 68, 143,
	14, 21, 57, 95, 43, 84, 96, 106, 154, 114,
	1846, 97, 119, 1842, 673, 1838, 1832, 1797, 128, 1828,
	1827, 1826, 1759, 1735, 1720, 926, 1825, 1821, 1709, 901,
	1820, 1817, 80, 1815, 126, 115, 1814, 141, 158, 20,
	1811, 118, 36, 100, 1810, 110, 60, 0, 584, 443,
	1809, 134, 94, 1803, 1801, 1799, 1796, 31, 1, 8,
	5, 6, 4, 74, 39, 1793, 1792, 136, 121, 65,
	1791, 151, 1790, 1789, 1786, 44, 1785, 18, 1784, 12,
	1782, 1781, 11, 3, 1780, 1779, 140, 1778, 103, 1776,
	1583, 1775, 147, 1774, 1755, 1636, 54, 112,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 56, 56,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 53, 53, 58, 58, 58,
	60, 60, 57, 57, 52, 52, 5, 5, 235, 235,
	236, 236, 42, 42, 46, 46, 43, 44, 44, 45,
	45, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 105, 105, 104, 104, 107, 107, 17,
	17, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 203, 203, 202, 19, 177, 177,
	21, 130, 130, 22, 22, 22, 22, 23, 30, 276,
	276, 276, 280, 280, 281, 281, 282, 282, 282, 282,
	282, 282, 282, 278, 278, 28, 28, 28, 28, 41,
	33, 33, 33, 33, 33, 33, 150, 147, 147, 146,
	146, 146, 146, 148, 148, 148, 148, 151, 151, 85,
	85, 228, 227, 227, 233, 233, 233, 83, 83, 83,
	83, 83, 84, 84, 84, 226, 226, 226, 226, 234,
	234, 234, 234, 234, 234, 232, 232, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 18, 277, 277,
	279, 279, 25, 35, 35, 36, 36, 37, 37, 37,
	37, 11, 11, 12, 12, 86, 86, 87, 87, 156,
	156, 156, 156, 88, 88, 59, 59, 59, 155, 245,
	245, 246, 246, 246, 246, 246, 246, 247, 247, 247,
	247, 247, 247, 247, 243, 243, 244, 241, 241, 242,
	242, 242, 242, 283, 283, 154, 154, 91, 91, 250,
	250, 250, 250, 248, 248, 248, 248, 248, 251, 249,
	252, 252, 252, 252, 252, 189, 189, 189, 39, 13,
	65, 65, 14, 10, 10, 134, 134, 95, 95, 194,
	194, 194, 76, 76, 54, 54, 54, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 135, 135,
	136, 136, 26, 29, 32, 38, 38, 38, 38, 38,
	285, 285, 72, 72, 72, 72, 73, 73, 149, 149,
	152, 152, 153, 153, 153, 67, 66, 68, 68, 9,
	9, 61, 61, 62, 62, 63, 63, 64, 64, 286,
	286, 24, 24, 24, 79, 79, 143, 143, 143, 145,
	145, 144, 144, 144, 120, 120, 120, 40, 100, 100,
	109, 109, 110, 110, 200, 111, 111, 31, 31, 49,
	49, 47, 47, 47, 47, 47, 47, 48, 48, 50,
	50, 50, 50, 50, 50, 50, 258, 258, 258, 261,
	261, 257, 259, 259, 260, 260, 284, 284, 121, 121,
	121, 90, 89, 89, 93, 93, 92, 94, 94, 193,
	118, 118, 118, 118, 137, 137, 138, 138, 139, 139,
	140, 140, 140, 141, 141, 142, 142, 117, 117, 173,
	173, 51, 51, 99, 99, 101, 101, 163, 163, 163,
	164, 164, 162, 162, 162, 162, 195, 195, 195, 195,
	195, 195, 195, 274, 274, 274, 275, 275, 192, 192,
	196, 196, 196, 196, 196, 196, 190, 190, 190, 190,
	191, 191, 201, 201, 124, 124, 124, 124, 122, 122,
	123, 123, 197, 197, 197, 197, 119, 119, 198, 198,
	198, 157, 157, 204, 204, 204, 222, 222, 98, 98,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 206, 206, 206,
	206, 208, 208, 208, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 221, 221,
	221, 221, 221, 209, 209, 216, 216, 217, 217, 218,
	219, 210, 210, 211, 211, 212, 213, 220, 220, 220,
	220, 224, 224, 214, 214, 214, 214, 214, 215, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 167, 167, 167,
	167, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 253, 253, 253, 253, 253, 253, 253, 255,
	255, 256, 256, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	262, 262, 263, 263, 265, 265, 266, 266, 267, 268,
	268, 268, 269, 270, 270, 264, 264, 271, 271, 271,
	272, 272, 273, 273, 273, 273, 273, 179, 179, 179,
	180, 180, 181, 187, 187, 187, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 74, 74, 74, 74, 74, 106, 106, 176,
	176, 174, 174, 174, 178, 178, 125, 125, 223, 223,
	223, 223, 223, 223, 223, 126, 126, 126, 133, 127,
	127, 128, 128, 128, 128, 128, 128, 170, 171, 129,
	129, 129, 172, 172, 182, 186, 186, 185, 184, 184,
	183, 183, 160, 160, 161, 161, 159, 158, 114, 114,
	113, 113, 112, 112, 287, 287, 188, 188, 115, 115,
	116, 108, 108, 199, 199, 199, 199, 102, 102, 81,
	81, 103, 103, 77, 77, 80, 80, 78, 78, 78,
	78, 96, 96, 97, 97, 75, 75, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 225, 225,
	225, 175, 69, 69, 69, 70, 70, 71, 71, 230,
	230, 230, 231, 231, 231, 231, 229, 229, 229, 229,
	229, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 3, 5, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 3, 6, 3, 4, 1, 5, 2, 1, 3,
	3, 3, 3, 1, 3, 3, 1, 2, 2, 1,
	0, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 3, 4, 4, 4, 4, 2, 4,
	4, 4, 4, 4, 4, 2, 3, 3, 3, 4,
	4, 5, 2, 3, 3, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 5, 5, 6, 2, 2, 0,
	2, 0, 3, 6, 6, 5, 5, 4, 12, 4,
	12, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 3, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -21, -22, -23, -24, -25, -27,
	-29, -30, -32, -31, -33, -34, -35, -36, -37, -38,
	-26, -28, -39, -40, -41, 23, 34, 230, 47, 67,
	-9, -10, -11, -12, -13, -14, -260, 95, 104, 126,
	210, 102, 88, 120, 205, 232, 234, 241, -47, -49,
	251, -150, 254, 35, 263, 61, 98, 236, 228, 229,
	289, 298, 69, -258, -50, -48, 340, 314, 321, 245,
	-51, 272, 306, 343, 272, 135, 81, 309, -276, -103,
	272, 81, -78, -69, 333, 4, -237, -239, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 67, 68, 71, 72, 79, 80,
	82, 84, 88, 90, 94, 95, 97, 102, 103, 104,
	110, 111, 114, 116, 121, 126, 127, 128, 129, 136,
	139, 141, 134, 149, 150, 152, 153, 154, 157, 156,
	161, 164, 167, 169, 170, 171, 174, 172, 176, 177,
	179, 178, 184, 186, 187, 189, 192, 195, 198, 201,
	202, 203, 204, 205, 208, 210, 212, 213, 214, 215,
	216, 218, 219, 221, 222, 223, 224, 225, 228, 226,
	227, 229, 230, 231, 232, 234, 236, 237, 239, 252,
	253, 264, 241, 242, 243, 244, 247, 248, 249, 251,
	254, 256, 259, 262, 263, 265, 268, 266, 261, 271,
	273, 274, 275, 276, 277, 284, 285, 289, 290, 291,
	292, 295, 296, 297, 298, 300, 303, 304, 305, 310,
	315, 316, 317, 318, 319, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 51, 52, 53, 56, 83, 85,
	86, 101, 105, 106, 112, 122, 124, 130, 131, 140,
	142, 143, 144, 146, 159, 173, 183, 185, 196, 200,
	207, 209, 217, 238, 246, 257, 258, 267, 269, 279,
	280, 281, 286, 287, 302, 306, 307, -276, 150, 214,
	-77, -69, 81, 90, 139, 297, 296, 81, 135, 272,
	309, 299, -20, 340, -31, -8, -16, -4, -24, -40,
	-15, -34, -18, -35, -36, -37, -17, 23, -229, 4,
	-237, -239, -238, -240, 58, 70, 119, 138, 132, 148,
	151, 160, 162, 175, 197, 199, 235, 255, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 73, 74, 75, 76, 77,
	78, 87, 89, 91, 92, 93, 96, 98, 100, 107,
	108, 109, 115, 117, 118, 120, 123, 125, 133, 135,
	137, 145, 147, 155, 158, 163, 165, 166, 180, 181,
	182, 188, 190, 191, 193, 194, 206, 211, 220, 233,
	245, 250, 260, 270, 272, 278, 282, 283, 288, 293,
	294, 299, 301, 308, 309, 311, 312, 313, 314, -69,
	-69, -69, 210, 22, -280, 22, -281, -282, 69, 95,
	120, 245, 139, 90, 296, 150, 150, -280, -73, 241,
	-69, -147, 164, 248, 55, 238, 285, -148, -146, -228,
	279, -151, -104, 174, -69, 4, 174, 250, 81, 284,
	22, 34, 55, 60, 82, 121, 135, 136, 65, 66,
	153, 213, 164, 248, 154, 249, 273, 279, 285, 69,
	300, 275, 103, -285, 285, 285, -285, -285, -72, 285,
	282, -73, 4, 81, 250, 174, -284, 272, -233, -226,
	-189, 9, 288, 107, 190, -232, 8, 332, -225, -231,
	5, 7, 331, 4, -237, -239, -238, 272, 299, 309,
	-134, 81, 294, -48, -50, -49, -92, -93, 293, 145,
	100, 194, -47, -49, -258, -261, 218, -257, -69, -261,
	-89, -90, 22, 92, 344, -197, -77, 191, -116, 340,
	-3, -197, 130, -77, -80, 130, -77, -69, -197, 130,
	282, 344, -103, -96, -69, -159, -158, 342, 118, -165,
	-167, 331, 332, 326, 180, 320, -179, -169, -182, 101,
	238, 340, -77, -168, 345, 9, -255, -49, 29, -180,
	-181, 49, -69, 7, 8, 5, 6, -75, -206, -175,
	-215, 288, 107, 182, -253, -254, 4, -237, -230, -207,
	-217, -211, -214, 146, 58, 74, 77, 75, 78, 250,
	299, 50, 28, 105, 106, 200, 207, 269, 286, 287,
	130, 183, 131, 56, 122, 159, 94, 37, 39, 41,
	42, 51, 52, 83, 85, 86, 112, 140, 142, 143,
	144, 185, 217, 257, 267, 280, 281, 307, -238, -218,
	-219, -212, -213, -220, -165, 118, 340, -113, -114, -158,
	-159, 118, 147, 147, -198, -197, -69, 130, -81, 130,
	-80, -105, 130, -104, -105, 130, -96, 130, -203, -202,
	-231, 306, 272, 135, -177, 340, -130, 340, -69, 22,
	190, 344, -165, -165, 190, -69, -147, 53, -147, 252,
	340, -152, -153, -66, -67, -68, 149, 212, 216, 282,
	325, 118, 319, -233, -85, 87, -107, 342, 115, 55,
	-235, -232, 9, 252, 213, 249, 118, -277, 190, 118,
	118, 118, 118, 118, 213, 249, 284, 154, 284, 118,
	319, 149, 212, 264, 272, 309, 118, 118, -149, -152,
	-149, 282, -73, -119, -197, 8, 7, 7, -104, 130,
	-69, -104, 135, -69, 130, -92, -93, -118, -137, -138,
	163, 109, 188, -121, 22, 92, -121, -121, 44, 341,
	341, 344, -261, -97, 340, -108, -199, -165, 333, -108,
	-116, 333, -77, 340, -115, -188, -165, 87, -56, 226,
	-55, 21, 23, 95, 304, 101, 261, 276, 242, 261,
	276, 242, 226, 101, 345, 226, 226, 101, -235, -78,
	344, -229, 333, -236, -235, 10, 11, 57, 33, 331,
	332, 333, 334, 113, 335, 336, 329, 330, 328, 323,
	324, 325, 63, 168, 240, 13, 14, 15, 26, 193,
	162, 320, 132, 255, 326, 16, 17, 18, 148, 36,
	133, -74, -82, -165, -165, -165, -165, -165, 199, -112,
	-160, 338, -49, 340, -49, -165, -106, 7, -49, -174,
	338, -183, -165, -113, 340, 5, 340, 5, -262, 315,
	115, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 209, -224,
	310, -224, -224, -208, 340, -208, -209, 340, -208, 316,
	321, 340, 265, 341, -102, -77, -114, -198, -79, -77,
	-79, 251, -69, 30, 101, -58, 344, 48, 231, 101,
	-58, 344, 101, -58, 101, 101, 341, 344, -197, 130,
	-80, 30, -176, -204, -205, -207, -216, -210, -214, -215,
	40, 46, 45, 277, 173, 246, 258, 302, 38, 189,
	141, 140, 142, 143, 144, 257, 37, 217, 112, 94,
	86, 85, 185, 42, 41, -218, -219, -212, -213, 83,
	280, 281, 146, 39, 52, 51, 307, 267, -106, -165,
	-276, -282, -276, 30, -146, -228, -106, 344, 161, -84,
	167, 179, 127, 191, 317, -227, 87, -233, -227, 87,
	72, -234, 5, 4, -175, -189, 87, 164, -215, 342,
	-229, -20, 253, -104, 22, -228, -279, 115, -276, -228,
	-228, -228, -228, -228, 284, 115, -69, 161, -228, -228,
	272, 135, 272, -73, -58, 344, 340, -91, 180, -259,
	314, -91, 340, -70, 130, -69, -259, 180, -118, -138,
	-137, -139, -165, 22, -142, 111, 176, -165, -167, -48,
	-48, -48, -94, -193, -165, -257, 30, -96, -99, 344,
	118, 30, 4, -99, -77, 344, 341, 344, 282, -135,
	65, 59, -155, 130, 59, -241, -69, 65, -242, 54,
	294, 211, 117, -135, 65, -135, 65, 65, -197, 33,
	-31, 118, 33, -31, 118, 282, -80, -69, 282, 282,
	-197, -201, 322, -69, -201, 344, -222, -204, -221, 222,
	223, 221, 225, 224, -204, -229, 279, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, 162,
	132, 255, 36, 133, -165, 282, -165, -165, -165, -165,
	172, 180, 182, 288, 107, 295, 92, 186, -287, 270,
	32, -172, -49, 340, -187, 27, 260, 22, -179, 238,
	340, -160, -165, -161, -106, 341, 341, 344, -106, -178,
	339, -174, -186, -185, 311, 341, -106, 308, 22, 92,
	333, 7, -131, 318, 171, 84, 128, 170, -132, 244,
	-263, 110, 123, 340, 341, 341, -165, -165, -125, -223,
	-106, 4, 318, 171, 84, 128, 170, 244, -125, -126,
	-165, -106, -127, -166, -167, 331, 332, 326, 340, 238,
	-128, -165, -106, -165, 43, 158, 283, -129, -165, 118,
	-106, -165, -165, -165, -106, -106, -106, 340, 7, 7,
	279, 279, 7, 118, 341, 344, -157, 312, -143, -31,
	340, 87, 30, -143, -109, -110, -200, -111, -77, 340,
	-69, -69, -80, -81, -104, -105, -105, -96, -20, -202,
	101, -20, 341, 344, -98, 29, 338, -131, 340, 341,
	344, 282, 118, 285, 341, -153, -83, 216, 259, 227,
	247, 344, -229, -278, -69, -20, -77, -80, -77, -197,
	-86, -96, -87, -69, -156, -155, -243, -244, -241, 135,
	294, 108, 30, 101, -65, 204, 30, 190, 180, -61,
	274, 101, -140, -225, 340, 332, -141, 238, 239, 344,
	-54, 31, 91, 340, 341, -157, -199, -101, -195, 338,
	-197, -77, -49, -196, 340, -229, -157, 341, -188, -55,
	-77, -69, -69, 180, -155, 130, -60, 180, -204, -69,
	340, 340, 152, 152, -69, -69, 130, -69, 130, -69,
	-69, -56, 226, -31, 340, -31, 340, -69, 226, -69,
	-77, 226, -42, 129, 186, -45, 314, -235, 319, -165,
	-165, 282, -287, 270, -172, -165, 172, 182, 288, 107,
	295, 92, 186, 118, 340, -166, -166, -106, -169, 340,
	-106, 339, 348, 341, -165, 339, 339, 344, -184, -185,
	96, -165, -93, 344, -92, -165, -106, -106, 341, 341,
	282, 282, 282, 282, 340, -268, 198, 340, 340, -165,
	30, 344, 341, 118, 341, 341, -133, 206, 341, 10,
	11, 331, 332, 333, 334, 113, 335, 336, 329, 330,
	328, 323, 324, 325, 63, 168, 240, 13, 14, 15,
	148, 133, -166, -166, -166, -106, 340, 341, -170, -171,
	118, 115, 30, -129, -129, -129, 341, 118, -106, 344,
	344, 344, 341, 341, 341, 7, 341, 344, 341, 319,
	319, 341, 265, 118, -77, -120, 233, -165, -120, -145,
	190, -102, 306, -69, -120, -100, 344, 118, 325, -102,
	-58, -58, -58, -197, -204, 338, 339, 7, -165, -278,
	-278, -66, 292, 62, 216, -233, 344, -201, 341, 341,
	344, -70, 135, -70, -31, -104, 5, -31, -77, 101,
	-62, 97, -286, 325, -69, -141, -165, -193, -20, -117,
	123, -201, 344, 70, -124, 151, 175, 119, 160, 235,
	138, 7, -20, -162, 345, 340, -192, 321, -49, -196,
	-195, -117, 282, 282, 101, 180, 303, -245, -242, -165,
	-95, -194, -69, -256, 340, -253, -254, -75, 340, 340,
	-53, 95, 251, -136, 101, -58, 101, -58, 282, -135,
	65, -106, -106, 282, 282, -45, 118, 271, 192, -165,
	-165, -166, -166, 118, 340, -165, -176, 26, 26, 341,
	-106, 341, 344, -161, -165, 341, -174, 98, -165, 278,
	341, 308, -93, -93, -93, 5, 171, 128, 170, -132,
	170, -132, -132, 7, -269, -69, 340, 312, -92, 341,
	-222, -204, -165, -170, -165, -222, -204, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, 92, 180, 186, -166,
	344, -106, 341, -171, -170, -165, -165, -204, 341, 341,
	341, -106, -165, -165, -165, 341, 7, 265, -108, 181,
	-120, 64, 341, -157, -110, -101, -188, 341, 7, 341,
	-69, -88, 134, -156, 340, -70, 340, 340, -91, 340,
	-69, -63, 157, -286, -232, -259, 191, 341, 341, -173,
	125, 44, -195, 151, 151, -195, -124, 151, -122, 197,
	-122, -122, -274, 340, 339, -192, -229, 338, 346, -106,
	-191, -190, 30, -69, 195, 341, -173, -69, -69, -155,
	101, -246, 65, -247, 57, 108, 69, 180, 182, 294,
	211, 54, 87, 220, 341, 341, 344, -76, -113, 57,
	-76, -165, 340, -95, -96, 180, 87, 180, 87, 80,
	290, -69, -69, -77, -69, -69, 341, 341, -69, -77,
	-236, 279, 340, 26, 26, -165, -176, 341, -165, -165,
	341, -165, 339, -165, 5, -165, 341, 341, 341, 341,
	-270, -69, -165, 341, 341, 341, -171, 118, 92, 186,
	340, -165, 341, 341, 344, 341, 341, 341, -144, 340,
	190, -31, -120, 325, 339, 133, -95, 340, -96, -86,
	30, -95, 190, -64, 156, -286, -232, -61, -265, 313,
	-165, -106, -195, -195, -123, 301, 190, 151, -195, 339,
	341, -275, 7, -192, -191, 7, -164, -163, 116, 178,
	341, -69, 340, -192, -265, -155, -69, -229, -69, 108,
	130, 182, 152, 340, -166, -77, -154, -283, 68, 268,
	-194, -54, -229, -54, 341, -106, 341, 341, 182, 182,
	-165, -204, -58, -58, 282, 282, 282, 282, -168, -75,
	-69, -44, -43, 5, -165, -165, 341, 341, -93, -264,
	203, 341, -166, 118, 340, -176, 341, -165, 93, -96,
	65, -116, -49, 340, 201, 341, -95, 341, 341, -31,
	341, -77, -286, -232, -62, -266, -267, -69, -123, 340,
	-165, -195, -162, 341, 344, -191, 339, 344, 347, 325,
	-192, 340, -96, -190, -247, -70, 180, -165, -71, 340,
	-88, 340, -76, -93, 220, -57, 57, -69, -69, 340,
	340, 340, 344, 341, -46, 325, 341, -93, 44, -166,
	-176, 341, 341, 296, 181, 341, -69, -69, -154, 341,
	-88, -154, 340, -232, -63, 344, 30, -96, -192, 7,
	-163, -229, 338, -191, -96, 341, 101, 341, -250, 169,
	-69, -96, -54, 341, -77, -52, 301, -229, -106, -106,
	-106, -43, 5, -271, 215, 239, -106, 341, 251, -157,
	340, -88, -154, -88, -95, -64, -267, -269, 341, -190,
	7, 341, 108, -248, -251, -249, 190, 119, 202, 256,
	341, 341, -91, -165, 341, 341, -93, 341, -272, -273,
	36, 291, 72, -165, -272, -109, -96, -88, 341, 339,
	-69, -249, 190, -251, 190, 296, 90, -250, 341, -273,
	208, 114, 238, 208, 114, -157, 341, -154, -252, 177,
	231, 48, 251, -252, -248, 26, -59, 48, 231, -88,
	20, 182, 87, -273,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, -2,
	0, 165, 0, 371, 0, 371, 371, 375, 0, 0,
	457, 0, 336, 454, -2, 465, 0, 0, 0, 463,
	441, 0, 0, -2, 0, 0, 0, 0, 0, 139,
	0, 993, 921, 927, 928, 952, 953, 954, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 0, 0, 0,
	0, 923, 993, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 0, 247, 966,
	967, 968, 969, 970, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 129,
	132, 133, 1049, 135, 0, 142, 143, 144, 146, 147,
	148, 149, 150, 151, 152, 0, 0, 0, 364, 1076,
	377, 160, 1025, 1081, 981, 1157, 1100, 168, 173, 0,
	1163, 176, 181, -2, 105, 207, 208, 209, 210, 211,
	212, 0, 0, 0, 218, 249, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 232, 236, 0, 0, 0,
	243, 0, 0, 379, 370, 379, 367, 368, 369, 372,
	0, 362, 155, 156, 157, 158, 0, 456, 159, 184,
	185, 186, 195, 196, 197, 198, 325, 0, 327, 205,
	206, 948, 0, 962, 963, 964, 965, 0, 0, 0,
	0, 0, 335, -2, 437, 438, -2, 0, 460, 460,
	460, 0, 0, 438, 0, 446, 1055, 449, 934, 447,
	0, 0, 462, 461, 0, 442, 542, 0, 491, 0,
	2, 0, 1141, 542, 0, 1141, 926, 0, 0, 1141,
	0, 0, 140, 141, 931, 929, 930, 0, 0, 84,
	645, 0, 0, 0, 0, 0, 0, 737, 739, 1135,
	1157, 0, 741, 742, 0, 744, 746, 747, 0, 750,
	751, 891, 923, 937, 938, 939, 940, 0, 0, 943,
	0, 945, 946, 947, 791, 760, -2, -2, 935, 577,
	578, 579, 580, -2, 1171, 764, 766, 768, 769, 770,
	771, 0, 1119, 1136, 1137, 1153, 1154, 1162, 1166, 1167,
	1141, 1150, 1142, 1131, 1139, 1148, 998, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 961, 607,
	608, 613, 614, 616, 85, 0, 0, 924, 900, 898,
	899, 0, 0, 0, 0, 548, 93, 1141, 59, 1141,
	919, 59, 1141, 103, 59, 1141, 101, 1141, 0, 124,
	126, 1169, 0, 0, 0, 0, 130, 0, 134, 136,
	0, 0, 252, 363, 0, 376, 161, 1130, 163, 0,
	0, 167, 380, 382, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 179, 106, 0, 455, 0,
	213, 68, 69, 0, 226, 233, 0, 251, 0, 0,
	0, 0, 0, 0, 227, 234, 228, 0, 0, 0,
	237, 0, 239, 240, 0, 0, 0, 0, 365, 378,
	366, 0, 374, 59, 546, 326, 950, 949, 308, 1141,
	453, 308, 956, 453, 1141, -2, 0, 433, 472, 473,
	0, 0, 0, 0, 458, 459, 0, 0, 0, 429,
	430, 0, 448, 0, 0, 494, 911, 915, 916, 494,
	492, 543, 544, 0, 0, 908, 906, 907, 36, 359,
	38, 0, 359, 359, 0, 0, 0, 0, 257, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 533, 922,
	0, 896, 897, 533, 70, 0, 0, 0, 0, 826,
	827, 828, 829, 830, 831, 834, 835, 832, 833, 836,
	837, 838, 0, 0, 0, 839, 840, 841, 0, 0,
	843, 0, 845, 0, 0, 0, 0, 0, 0, 905,
	0, 0, 842, 650, 651, 652, 674, 675, 0, 738,
	902, 895, 740, 0, -2, 847, 0, 743, 748, 749,
	0, 0, 890, -2, 0, 942, 0, 642, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 610,
	621, 618, 617, 594, 0, 593, 591, 0, 595, 0,
	0, 0, 81, 0, 0, 917, 901, 552, 0, 404,
	0, 0, 549, 0, 0, 95, 0, 57, 58, 0,
	97, 0, 0, 99, 0, 0, 455, 0, 0, 1141,
	0, 455, 0, 849, 559, 560, 561, 562, 563, 642,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 584, 585, 586, 587, 588, 589, 590, 604, 0,
	583, 583, 583, 596, 597, 605, 606, 611, 612, 623,
	624, 626, 628, 622, 622, 622, 619, 620, 0, 847,
	0, 145, 0, 0, 164, 0, 0, 0, 0, 385,
	192, 193, 194, 387, 388, 169, 171, 182, 170, 172,
	174, 175, 199, 200, 201, 202, 203, 204, 0, 0,
	107, 230, 216, 214, 215, 217, 219, 0, 248, 220,
	221, 222, 223, 224, 229, 455, 235, 238, 241, 242,
	0, 0, 0, 373, 328, 0, 266, 0, 0, 331,
	452, 0, 0, 0, 1141, 955, 392, 0, 436, 470,
	471, 474, 478, 479, 482, 485, 486, 476, 645, 443,
	444, 445, 466, 467, 346, 450, 0, 0, 552, 0,
	0, 0, 914, 552, 0, 0, 910, 0, 0, 0,
	0, 358, 40, 1141, 0, 61, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 256, 0, 0, 0, 925, 0, 0,
	0, 73, 0, 932, 80, 0, 646, 556, 557, 598,
	599, 600, 601, 602, 647, 648, 0, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, -2, -2, -2,
	666, 667, 668, -2, -2, -2, 672, 673, -2, 844,
	846, 0, 905, 0, -2, 0, -2, -2, -2, -2,
	686, 0, 688, 691, 693, 695, 0, 0, 0, 0,
	904, 705, 882, 0, 0, 823, 824, 825, 690, 0,
	0, 903, 894, 0, 0, -2, 745, 0, 0, 0,
	853, 854, 889, 885, 0, 752, 465, 0, 0, 0,
	0, 0, 951, 629, 630, 631, 632, 633, 634, 643,
	801, 0, 0, 0, 765, 767, 0, 0, 0, 0,
	857, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	847, 867, 0, 0, 708, 0, 0, 0, 0, 1157,
	0, 847, 875, 0, 0, 0, 0, 0, 847, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 416, 406,
	0, 0, 0, 416, 419, 420, 422, 423, 0, 0,
	550, 94, 920, 59, 104, 59, 59, 102, 110, 125,
	0, 127, 128, 0, 553, 555, 0, 564, 0, 131,
	0, 0, 0, 0, 166, 381, 386, 0, 189, 0,
	191, 0, 108, 250, 153, 231, 244, 245, 533, 547,
	0, 0, 265, 931, 267, 269, 270, 271, 272, 956,
	0, 956, 0, 0, 329, 0, 0, 0, 0, 394,
	400, 0, 0, 480, 0, 0, 477, 483, 484, 0,
	469, 344, 345, 455, 933, 488, 912, 533, 495, 455,
	505, 542, 519, 510, 0, 913, 488, 545, 909, 39,
	348, 0, 0, 0, 42, 1141, 50, 0, 280, 0,
	0, 0, 0, 0, 361, 51, 1141, 59, 1141, 59,
	52, 37, 359, 253, 0, 254, 0, 352, 0, 347,
	350, 0, 80, 0, 0, 67, 0, 71, 0, -2,
	-2, 0, 0, 0, 706, -2, 687, 689, 692, 694,
	696, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 892, 895, -2, 848, 851, 852, 0, 0, 886,
	0, 0, 0, 0, 464, 465, 465, 465, 758, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 0, 0,
	0, 0, 774, 0, 775, 776, 0, 0, 777, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 712, 713, 0, 0, 778, 873, 874,
	0, 0, 0, 0, 0, 0, 783, 0, 880, 0,
	0, 0, 787, 788, 789, 0, 581, 0, 603, 625,
	627, 615, 82, 0, 918, 92, 0, 551, 401, 416,
	0, 0, 408, 405, 403, 552, 0, 0, 0, 0,
	96, 98, 100, 0, 850, 0, 558, 0, 848, 137,
	138, 162, 187, 188, 190, 183, 0, 246, 274, 307,
	0, 0, 956, 0, 263, 308, 330, 332, 0, 0,
	396, 400, 0, 399, 453, 0, 0, 468, 0, 490,
	0, 493, 0, 0, 0, 0, 0, 539, 539, 539,
	537, 513, 0, 519, 0, 0, 531, 0, -2, 510,
	0, 490, 0, 0, 0, 0, 60, 278, 297, 0,
	0, 337, 343, 343, 0, 761, 762, 0, 0, 0,
	44, 0, 0, 0, 0, 48, 0, 54, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 649,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 883,
	0, 818, 0, 0, 894, -2, 855, 884, 888, 0,
	753, 0, 0, 0, 0, 944, 635, 636, 637, 638,
	639, 640, 641, 0, 799, 800, 804, 0, 0, 763,
	0, 0, 856, 866, 868, 709, 710, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, -2, -2, -2,
	727, 728, 729, -2, -2, -2, 0, 0, 0, 869,
	0, 0, 821, 871, 872, 877, 878, 0, 780, 781,
	782, 879, 0, 0, 0, 609, 0, 83, 414, 415,
	402, 413, 0, 416, 421, 418, 424, 0, 0, 565,
	154, 261, 0, 268, 0, 0, 0, 266, 0, 0,
	0, 398, 400, 0, 391, 392, 475, 481, 451, 795,
	0, 0, 496, 0, 0, 0, 0, 0, 534, 538,
	535, 536, 0, 0, 519, 531, 502, 0, 0, 0,
	509, 530, 0, 529, 518, -2, 795, 354, 356, 41,
	0, 279, 0, 282, 0, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 299, 306, 0, 346, 936, 0,
	346, 0, 0, 0, 0, 0, 56, 0, 0, 360,
	0, 59, 59, 349, 0, 0, 0, 0, 353, 351,
	72, 0, 0, 0, 0, -2, 0, 699, -2, -2,
	817, 848, 893, 887, 941, 465, 754, 756, 757, 644,
	806, 803, 0, 790, 772, 773, 865, 0, 0, 0,
	0, 848, 820, 779, 0, 785, 786, 582, 0, 0,
	0, 407, 417, 0, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 389, 400, 0, 393, 394, 439, 0,
	489, 487, 521, 0, 523, 0, 0, 0, 525, 505,
	514, 0, 516, 531, 507, 0, 0, 500, 0, 499,
	519, 527, 0, 0, 440, 43, 0, 283, 284, 956,
	0, 287, 290, 0, 292, 958, 274, 0, 303, 304,
	338, 339, 342, 340, 343, 465, 301, 0, 45, 46,
	55, 63, 47, 53, 0, 0, 0, 0, 532, 0,
	0, 0, 77, 75, -2, -2, 700, 819, 0, 465,
	0, 792, -2, 0, 0, 0, 822, 0, 0, 0,
	0, 425, 426, 0, 0, 306, 0, 296, 274, 264,
	306, 0, 0, 395, 396, 794, 796, 0, 522, 0,
	541, 524, 519, 515, 0, 512, 503, 0, 504, 0,
	531, 0, 0, 511, 281, 285, 0, 0, 312, 0,
	300, 0, 346, 0, 0, 65, 0, 355, 357, 0,
	0, 0, 0, 79, 76, 0, 755, 809, 0, -2,
	0, 735, 784, 0, 410, 552, 412, 0, 274, 306,
	262, 274, 0, 397, 398, 0, 0, 0, 0, 517,
	501, 497, 0, 508, 0, 528, 0, 291, 317, 0,
	0, 0, 341, 753, 308, 49, 0, 62, 0, 0,
	465, 78, 74, 0, 0, 0, 805, 736, 0, 411,
	0, 294, 274, 333, 0, 390, 797, 798, 540, 506,
	0, 526, 0, 293, 313, 314, 0, 309, 310, 311,
	957, 305, 312, 64, 258, 260, 0, 802, 807, 810,
	-2, 1103, 990, 0, 808, 552, 0, 295, 306, 498,
	286, 315, 0, 316, 0, 0, 0, 317, 0, 0,
	812, 813, 814, 815, 816, 409, 277, 274, 318, 0,
	321, 322, 0, 319, 302, 0, 273, 275, 276, 334,
	320, 323, 324, 811,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 329, 3, 335, 330, 3,
	340, 341, 333, 331, 344, 332, 342, 334, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 348, 343,
	323, 325, 324, 3, 345, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 338, 3, 339, 336, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 346, 328, 347, 326,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 327, 57666, 337, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:906
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:929
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1079
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{ /* SKIP DOC */
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			return unimplemented(sqllex, "set local")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{ /* SKIP DOC */
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "set from current")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Low
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = Normal
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = High
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1773
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1781
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1831
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1835
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1841
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1845
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1853
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1928
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = DropDefault
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return unimplemented(sqllex, "match full")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return unimplemented(sqllex, "match partial")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return unimplemented(sqllex, "match simple")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2146
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2156
		{
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplemented(sqllex, "no action")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
			return unimplemented(sqllex, "action set null")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			return unimplemented(sqllex, "action set default")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = true
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = false
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2279
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2283
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = Ascending
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = Descending
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2337
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2338
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = true
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = false
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = ""
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = ReadOnly
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = ReadWrite
		}
	case 389:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.str = ""
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.str = ""
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.str = ""
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.str = ""
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 417:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2656
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2883
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2892
		{
			return unimplemented(sqllex, "cte")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = true
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = false
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = false
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = true
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3038
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &From{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3133
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3195
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = nil
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = true
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = false
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.str = astFullJoin
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.str = astLeftJoin
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.str = astRightJoin
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.str = astInnerJoin
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3470
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3567
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = nil
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3712
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3784
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = year
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = month
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = day
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = hour
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = minute
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = month
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = hour
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = minute
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = minute
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = nil
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = second
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3879
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3914
		{
			return unimplemented(sqllex, "at tz")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4148
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4374
		{
			return unimplemented(sqllex, "variadic")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4375
		{
			return unimplemented(sqllex, "variadic")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4398
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			return unimplemented(sqllex, "func_application")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4419
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			return unimplemented(sqllex, "current role")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			return unimplemented(sqllex, "current user")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			return unimplemented(sqllex, "session user")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			return unimplemented(sqllex, "user")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4468
		{
			return unimplemented(sqllex, "treat")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4512
		{
			return unimplemented(sqllex, "within group")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4513
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = Window(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4548
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4610
		{
			return unimplemented(sqllex, "frame range")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4611
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4616
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4622
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4623
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = Any
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = Some
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = All
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = Plus
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = Minus
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Mult
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Div
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = FloorDiv
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = Mod
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Bitand
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = Bitor
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = Pow
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Bitxor
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = LT
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = GT
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = EQ
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = LE
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = GE
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = NE
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Like
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = NotLike
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = ILike
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = NotILike
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4991
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5109
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5153
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5189
		{
			return unimplemented(sqllex, "func const")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5198
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = DNull
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.str = ""
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
