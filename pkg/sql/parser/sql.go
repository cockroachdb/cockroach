// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:503
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CACHE = 57390
const CANCEL = 57391
const CASCADE = 57392
const CASE = 57393
const CAST = 57394
const CHAR = 57395
const CHARACTER = 57396
const CHARACTERISTICS = 57397
const CHECK = 57398
const CLUSTER = 57399
const COALESCE = 57400
const COLLATE = 57401
const COLLATION = 57402
const COLUMN = 57403
const COLUMNS = 57404
const COMMIT = 57405
const COMMITTED = 57406
const CONCAT = 57407
const CONFIGURATION = 57408
const CONFIGURATIONS = 57409
const CONFIGURE = 57410
const CONFLICT = 57411
const CONSTRAINT = 57412
const CONSTRAINTS = 57413
const CONTAINS = 57414
const COPY = 57415
const COVERING = 57416
const CREATE = 57417
const CROSS = 57418
const CSV = 57419
const CUBE = 57420
const CURRENT = 57421
const CURRENT_CATALOG = 57422
const CURRENT_DATE = 57423
const CURRENT_SCHEMA = 57424
const CURRENT_ROLE = 57425
const CURRENT_TIME = 57426
const CURRENT_TIMESTAMP = 57427
const CURRENT_USER = 57428
const CYCLE = 57429
const DATA = 57430
const DATABASE = 57431
const DATABASES = 57432
const DATE = 57433
const DAY = 57434
const DEC = 57435
const DECIMAL = 57436
const DEFAULT = 57437
const DEALLOCATE = 57438
const DEFERRABLE = 57439
const DELETE = 57440
const DESC = 57441
const DISCARD = 57442
const DISTINCT = 57443
const DO = 57444
const DOUBLE = 57445
const DROP = 57446
const ELSE = 57447
const ENCODING = 57448
const END = 57449
const ESCAPE = 57450
const EXCEPT = 57451
const EXISTS = 57452
const EXECUTE = 57453
const EXPERIMENTAL_FINGERPRINTS = 57454
const EXPERIMENTAL = 57455
const EXPLAIN = 57456
const EXTRACT = 57457
const EXTRACT_DURATION = 57458
const FALSE = 57459
const FAMILY = 57460
const FETCH = 57461
const FETCHVAL = 57462
const FETCHTEXT = 57463
const FETCHVAL_PATH = 57464
const FETCHTEXT_PATH = 57465
const FILTER = 57466
const FIRST = 57467
const FLOAT = 57468
const FLOAT4 = 57469
const FLOAT8 = 57470
const FLOORDIV = 57471
const FOLLOWING = 57472
const FOR = 57473
const FORCE_INDEX = 57474
const FOREIGN = 57475
const FROM = 57476
const FULL = 57477
const GRANT = 57478
const GRANTS = 57479
const GREATEST = 57480
const GROUP = 57481
const GROUPING = 57482
const HAVING = 57483
const HELP = 57484
const HIGH = 57485
const HOUR = 57486
const IMPORT = 57487
const INCREMENT = 57488
const INCREMENTAL = 57489
const IF = 57490
const IFNULL = 57491
const ILIKE = 57492
const IN = 57493
const INET = 57494
const INTERLEAVE = 57495
const INDEX = 57496
const INDEXES = 57497
const INITIALLY = 57498
const INNER = 57499
const INSERT = 57500
const INT = 57501
const INT2VECTOR = 57502
const INT2 = 57503
const INT4 = 57504
const INT8 = 57505
const INT64 = 57506
const INTEGER = 57507
const INTERSECT = 57508
const INTERVAL = 57509
const INTO = 57510
const IS = 57511
const ISOLATION = 57512
const JOB = 57513
const JOBS = 57514
const JOIN = 57515
const JSON = 57516
const JSONB = 57517
const KEY = 57518
const KEYS = 57519
const KV = 57520
const LATERAL = 57521
const LC_CTYPE = 57522
const LC_COLLATE = 57523
const LEADING = 57524
const LEAST = 57525
const LEFT = 57526
const LESS = 57527
const LEVEL = 57528
const LIKE = 57529
const LIMIT = 57530
const LIST = 57531
const LOCAL = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const LOW = 57535
const LSHIFT = 57536
const MATCH = 57537
const MINVALUE = 57538
const MAXVALUE = 57539
const MINUTE = 57540
const MONTH = 57541
const NAN = 57542
const NAME = 57543
const NAMES = 57544
const NATURAL = 57545
const NEXT = 57546
const NO = 57547
const NO_INDEX_JOIN = 57548
const NORMAL = 57549
const NOT = 57550
const NOTHING = 57551
const NULL = 57552
const NULLIF = 57553
const NULLS = 57554
const NUMERIC = 57555
const OF = 57556
const OFF = 57557
const OFFSET = 57558
const OID = 57559
const ON = 57560
const ONLY = 57561
const OPTIONS = 57562
const OR = 57563
const ORDER = 57564
const ORDINALITY = 57565
const OUT = 57566
const OUTER = 57567
const OVER = 57568
const OVERLAPS = 57569
const OVERLAY = 57570
const OWNED = 57571
const PARENT = 57572
const PARTIAL = 57573
const PARTITION = 57574
const PASSWORD = 57575
const PAUSE = 57576
const PHYSICAL = 57577
const PLACING = 57578
const PLANS = 57579
const POSITION = 57580
const PRECEDING = 57581
const PRECISION = 57582
const PREPARE = 57583
const PRIMARY = 57584
const PRIORITY = 57585
const QUERIES = 57586
const QUERY = 57587
const RANGE = 57588
const READ = 57589
const REAL = 57590
const RECURSIVE = 57591
const REF = 57592
const REFERENCES = 57593
const REGCLASS = 57594
const REGPROC = 57595
const REGPROCEDURE = 57596
const REGNAMESPACE = 57597
const REGTYPE = 57598
const REMOVE_PATH = 57599
const RENAME = 57600
const REPEATABLE = 57601
const RELEASE = 57602
const RESET = 57603
const RESTORE = 57604
const RESTRICT = 57605
const RESUME = 57606
const RETURNING = 57607
const REVOKE = 57608
const RIGHT = 57609
const ROLLBACK = 57610
const ROLLUP = 57611
const ROW = 57612
const ROWS = 57613
const RSHIFT = 57614
const SAVEPOINT = 57615
const SCATTER = 57616
const SCRUB = 57617
const SEARCH = 57618
const SECOND = 57619
const SELECT = 57620
const SEQUENCE = 57621
const SEQUENCES = 57622
const SERIAL = 57623
const SERIALIZABLE = 57624
const SESSION = 57625
const SESSIONS = 57626
const SESSION_USER = 57627
const SET = 57628
const SETTING = 57629
const SETTINGS = 57630
const SHOW = 57631
const SIMILAR = 57632
const SIMPLE = 57633
const SMALLINT = 57634
const SMALLSERIAL = 57635
const SNAPSHOT = 57636
const SOME = 57637
const SOME_EXISTENCE = 57638
const SPLIT = 57639
const SQL = 57640
const START = 57641
const STATUS = 57642
const STDIN = 57643
const STRICT = 57644
const STRING = 57645
const STORE = 57646
const STORING = 57647
const SUBSTRING = 57648
const SYMMETRIC = 57649
const SYSTEM = 57650
const TABLE = 57651
const TABLES = 57652
const TEMP = 57653
const TEMPLATE = 57654
const TEMPORARY = 57655
const TESTING_RANGES = 57656
const TESTING_RELOCATE = 57657
const TEXT = 57658
const THAN = 57659
const THEN = 57660
const TIME = 57661
const TIMESTAMP = 57662
const TIMESTAMPTZ = 57663
const TO = 57664
const TRAILING = 57665
const TRACE = 57666
const TRANSACTION = 57667
const TREAT = 57668
const TRIM = 57669
const TRUE = 57670
const TRUNCATE = 57671
const TYPE = 57672
const UNBOUNDED = 57673
const UNCOMMITTED = 57674
const UNION = 57675
const UNIQUE = 57676
const UNKNOWN = 57677
const UPDATE = 57678
const UPSERT = 57679
const USE = 57680
const USER = 57681
const USERS = 57682
const USING = 57683
const UUID = 57684
const VALID = 57685
const VALIDATE = 57686
const VALUE = 57687
const VALUES = 57688
const VARCHAR = 57689
const VARIADIC = 57690
const VIEW = 57691
const VARYING = 57692
const WHEN = 57693
const WHERE = 57694
const WINDOW = 57695
const WITH = 57696
const WITHIN = 57697
const WITHOUT = 57698
const WRITE = 57699
const YEAR = 57700
const ZONE = 57701
const NOT_LA = 57702
const WITH_LA = 57703
const AS_LA = 57704
const CONTAINED_BY = 57705
const POSTFIXOP = 57706
const UMINUS = 57707
const HELPTOKEN = 57708

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7054

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 757,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	154, 606,
	-2, 0,
	-1, 54,
	98, 757,
	158, 757,
	336, 757,
	337, 757,
	-2, 0,
	-1, 64,
	1, 719,
	218, 719,
	265, 719,
	381, 719,
	383, 719,
	385, 719,
	386, 719,
	-2, 732,
	-1, 97,
	4, 759,
	20, 759,
	21, 759,
	24, 759,
	29, 759,
	34, 759,
	35, 759,
	36, 759,
	37, 759,
	38, 759,
	39, 759,
	40, 759,
	41, 759,
	42, 759,
	43, 759,
	45, 759,
	46, 759,
	47, 759,
	48, 759,
	49, 759,
	50, 759,
	53, 759,
	54, 759,
	55, 759,
	57, 759,
	58, 759,
	62, 759,
	63, 759,
	64, 759,
	66, 759,
	67, 759,
	68, 759,
	69, 759,
	71, 759,
	73, 759,
	74, 759,
	77, 759,
	78, 759,
	79, 759,
	87, 759,
	88, 759,
	89, 759,
	90, 759,
	91, 759,
	92, 759,
	93, 759,
	94, 759,
	96, 759,
	98, 759,
	100, 759,
	103, 759,
	104, 759,
	106, 759,
	110, 759,
	111, 759,
	112, 759,
	113, 759,
	114, 759,
	115, 759,
	116, 759,
	124, 759,
	125, 759,
	126, 759,
	127, 759,
	128, 759,
	130, 759,
	132, 759,
	137, 759,
	138, 759,
	140, 759,
	143, 759,
	144, 759,
	145, 759,
	146, 759,
	147, 759,
	148, 759,
	149, 759,
	152, 759,
	153, 759,
	155, 759,
	158, 759,
	159, 759,
	160, 759,
	161, 759,
	162, 759,
	163, 759,
	164, 759,
	165, 759,
	167, 759,
	170, 759,
	171, 759,
	172, 759,
	174, 759,
	175, 759,
	176, 759,
	177, 759,
	178, 759,
	180, 759,
	181, 759,
	183, 759,
	185, 759,
	186, 759,
	189, 759,
	190, 759,
	193, 759,
	195, 759,
	196, 759,
	198, 759,
	199, 759,
	200, 759,
	201, 759,
	202, 759,
	204, 759,
	205, 759,
	206, 759,
	207, 759,
	211, 759,
	212, 759,
	213, 759,
	214, 759,
	215, 759,
	217, 759,
	219, 759,
	220, 759,
	223, 759,
	224, 759,
	226, 759,
	228, 759,
	229, 759,
	230, 759,
	231, 759,
	232, 759,
	233, 759,
	234, 759,
	235, 759,
	237, 759,
	238, 759,
	239, 759,
	240, 759,
	241, 759,
	243, 759,
	244, 759,
	245, 759,
	246, 759,
	247, 759,
	248, 759,
	249, 759,
	250, 759,
	252, 759,
	253, 759,
	254, 759,
	255, 759,
	256, 759,
	258, 759,
	259, 759,
	260, 759,
	261, 759,
	262, 759,
	263, 759,
	264, 759,
	266, 759,
	268, 759,
	269, 759,
	270, 759,
	271, 759,
	273, 759,
	274, 759,
	275, 759,
	276, 759,
	277, 759,
	279, 759,
	280, 759,
	281, 759,
	282, 759,
	283, 759,
	284, 759,
	286, 759,
	287, 759,
	288, 759,
	289, 759,
	291, 759,
	292, 759,
	293, 759,
	294, 759,
	297, 759,
	298, 759,
	299, 759,
	300, 759,
	301, 759,
	302, 759,
	303, 759,
	304, 759,
	305, 759,
	306, 759,
	308, 759,
	310, 759,
	311, 759,
	312, 759,
	313, 759,
	314, 759,
	315, 759,
	316, 759,
	317, 759,
	319, 759,
	320, 759,
	321, 759,
	324, 759,
	325, 759,
	326, 759,
	327, 759,
	329, 759,
	330, 759,
	331, 759,
	332, 759,
	335, 759,
	336, 759,
	337, 759,
	338, 759,
	340, 759,
	342, 759,
	343, 759,
	344, 759,
	345, 759,
	346, 759,
	347, 759,
	350, 759,
	355, 759,
	356, 759,
	357, 759,
	358, 759,
	359, 759,
	-2, 0,
	-1, 116,
	1, 722,
	218, 722,
	265, 722,
	381, 722,
	383, 722,
	385, 722,
	386, 722,
	-2, 731,
	-1, 121,
	1, 657,
	170, 657,
	243, 657,
	247, 657,
	385, 657,
	386, 657,
	-2, 0,
	-1, 123,
	1, 657,
	385, 657,
	386, 657,
	-2, 0,
	-1, 124,
	1, 657,
	385, 657,
	386, 657,
	-2, 0,
	-1, 125,
	1, 661,
	385, 661,
	386, 661,
	-2, 0,
	-1, 147,
	4, 765,
	5, 765,
	6, 765,
	7, 765,
	8, 765,
	9, 765,
	20, 765,
	21, 765,
	24, 765,
	29, 765,
	30, 765,
	34, 765,
	35, 765,
	36, 765,
	37, 765,
	38, 765,
	39, 765,
	40, 765,
	41, 765,
	42, 765,
	43, 765,
	45, 765,
	46, 765,
	47, 765,
	48, 765,
	49, 765,
	50, 765,
	51, 765,
	52, 765,
	53, 765,
	54, 765,
	55, 765,
	57, 765,
	58, 765,
	60, 765,
	62, 765,
	63, 765,
	64, 765,
	66, 765,
	67, 765,
	68, 765,
	69, 765,
	71, 765,
	73, 765,
	74, 765,
	76, 765,
	77, 765,
	78, 765,
	79, 765,
	81, 765,
	82, 765,
	83, 765,
	85, 765,
	86, 765,
	87, 765,
	88, 765,
	89, 765,
	90, 765,
	91, 765,
	92, 765,
	93, 765,
	94, 765,
	95, 765,
	96, 765,
	98, 765,
	100, 765,
	103, 765,
	104, 765,
	106, 765,
	110, 765,
	111, 765,
	112, 765,
	113, 765,
	114, 765,
	115, 765,
	116, 765,
	117, 765,
	118, 765,
	124, 765,
	125, 765,
	126, 765,
	127, 765,
	128, 765,
	130, 765,
	132, 765,
	135, 765,
	137, 765,
	138, 765,
	140, 765,
	143, 765,
	144, 765,
	145, 765,
	146, 765,
	147, 765,
	148, 765,
	149, 765,
	150, 765,
	152, 765,
	153, 765,
	155, 765,
	157, 765,
	158, 765,
	159, 765,
	160, 765,
	161, 765,
	162, 765,
	163, 765,
	164, 765,
	165, 765,
	167, 765,
	169, 765,
	170, 765,
	171, 765,
	172, 765,
	173, 765,
	174, 765,
	175, 765,
	176, 765,
	177, 765,
	178, 765,
	180, 765,
	181, 765,
	183, 765,
	184, 765,
	185, 765,
	186, 765,
	187, 765,
	189, 765,
	190, 765,
	193, 765,
	195, 765,
	196, 765,
	197, 765,
	198, 765,
	199, 765,
	200, 765,
	201, 765,
	202, 765,
	203, 765,
	204, 765,
	205, 765,
	206, 765,
	207, 765,
	208, 765,
	210, 765,
	211, 765,
	212, 765,
	213, 765,
	214, 765,
	215, 765,
	217, 765,
	220, 765,
	223, 765,
	224, 765,
	225, 765,
	226, 765,
	227, 765,
	228, 765,
	229, 765,
	230, 765,
	231, 765,
	232, 765,
	233, 765,
	234, 765,
	235, 765,
	237, 765,
	238, 765,
	239, 765,
	240, 765,
	241, 765,
	243, 765,
	244, 765,
	245, 765,
	246, 765,
	247, 765,
	248, 765,
	249, 765,
	250, 765,
	252, 765,
	253, 765,
	254, 765,
	255, 765,
	256, 765,
	258, 765,
	259, 765,
	260, 765,
	261, 765,
	262, 765,
	263, 765,
	264, 765,
	266, 765,
	267, 765,
	268, 765,
	269, 765,
	270, 765,
	271, 765,
	273, 765,
	274, 765,
	275, 765,
	276, 765,
	277, 765,
	279, 765,
	280, 765,
	281, 765,
	282, 765,
	283, 765,
	284, 765,
	285, 765,
	286, 765,
	287, 765,
	288, 765,
	289, 765,
	290, 765,
	291, 765,
	292, 765,
	293, 765,
	294, 765,
	297, 765,
	298, 765,
	299, 765,
	300, 765,
	301, 765,
	302, 765,
	303, 765,
	304, 765,
	305, 765,
	306, 765,
	308, 765,
	310, 765,
	311, 765,
	312, 765,
	313, 765,
	314, 765,
	315, 765,
	316, 765,
	317, 765,
	319, 765,
	320, 765,
	321, 765,
	324, 765,
	325, 765,
	326, 765,
	327, 765,
	328, 765,
	329, 765,
	330, 765,
	331, 765,
	332, 765,
	335, 765,
	336, 765,
	337, 765,
	338, 765,
	339, 765,
	340, 765,
	342, 765,
	343, 765,
	344, 765,
	345, 765,
	346, 765,
	347, 765,
	350, 765,
	355, 765,
	356, 765,
	357, 765,
	358, 765,
	359, 765,
	360, 765,
	368, 765,
	373, 765,
	374, 765,
	375, 765,
	382, 765,
	388, 765,
	-2, 0,
	-1, 150,
	1, 54,
	386, 54,
	-2, 757,
	-1, 524,
	134, 1377,
	322, 1377,
	365, 1377,
	384, 1377,
	-2, 0,
	-1, 525,
	134, 1323,
	322, 1323,
	365, 1323,
	384, 1323,
	-2, 0,
	-1, 527,
	134, 1440,
	322, 1440,
	365, 1440,
	384, 1440,
	-2, 0,
	-1, 529,
	134, 1463,
	322, 1463,
	365, 1463,
	384, 1463,
	-2, 0,
	-1, 536,
	134, 1383,
	322, 1383,
	365, 1383,
	384, 1383,
	-2, 350,
	-1, 562,
	1, 428,
	381, 428,
	383, 428,
	385, 428,
	386, 428,
	-2, 0,
	-1, 563,
	1, 481,
	131, 481,
	381, 481,
	383, 481,
	385, 481,
	386, 481,
	-2, 0,
	-1, 569,
	1, 442,
	381, 442,
	383, 442,
	385, 442,
	386, 442,
	-2, 0,
	-1, 571,
	1, 446,
	381, 446,
	383, 446,
	385, 446,
	386, 446,
	-2, 0,
	-1, 574,
	1, 454,
	381, 454,
	383, 454,
	385, 454,
	386, 454,
	-2, 0,
	-1, 575,
	1, 459,
	381, 459,
	383, 459,
	385, 459,
	386, 459,
	-2, 0,
	-1, 578,
	1, 469,
	381, 469,
	383, 469,
	385, 469,
	386, 469,
	-2, 0,
	-1, 604,
	119, 767,
	131, 767,
	188, 767,
	216, 767,
	-2, 726,
	-1, 611,
	119, 766,
	131, 766,
	188, 766,
	216, 766,
	-2, 723,
	-1, 667,
	382, 1300,
	-2, 1293,
	-1, 668,
	382, 1301,
	-2, 1294,
	-1, 674,
	5, 951,
	382, 951,
	-2, 1515,
	-1, 699,
	5, 910,
	-2, 1484,
	-1, 700,
	5, 945,
	382, 945,
	-2, 1486,
	-1, 701,
	5, 920,
	-2, 1487,
	-1, 702,
	5, 919,
	-2, 1488,
	-1, 703,
	5, 945,
	382, 945,
	-2, 1491,
	-1, 704,
	5, 945,
	382, 945,
	-2, 1492,
	-1, 705,
	5, 946,
	-2, 1495,
	-1, 706,
	5, 902,
	-2, 1496,
	-1, 707,
	5, 902,
	-2, 1497,
	-1, 708,
	5, 927,
	-2, 1501,
	-1, 709,
	5, 912,
	-2, 1502,
	-1, 710,
	5, 913,
	-2, 1503,
	-1, 711,
	5, 903,
	-2, 1509,
	-1, 712,
	5, 904,
	-2, 1510,
	-1, 713,
	5, 905,
	-2, 1511,
	-1, 714,
	5, 906,
	-2, 1512,
	-1, 715,
	5, 907,
	-2, 1513,
	-1, 716,
	5, 908,
	-2, 1514,
	-1, 717,
	5, 902,
	-2, 1521,
	-1, 718,
	5, 911,
	-2, 1526,
	-1, 719,
	5, 909,
	-2, 1529,
	-1, 720,
	5, 943,
	382, 943,
	-2, 1531,
	-1, 721,
	5, 947,
	-2, 1534,
	-1, 722,
	5, 949,
	-2, 1535,
	-1, 723,
	5, 942,
	382, 942,
	-2, 1540,
	-1, 787,
	113, 505,
	-2, 856,
	-1, 921,
	233, 755,
	-2, 599,
	-1, 926,
	218, 1297,
	-2, 0,
	-1, 962,
	1, 227,
	381, 227,
	383, 227,
	385, 227,
	386, 227,
	-2, 730,
	-1, 965,
	4, 1539,
	10, 1539,
	11, 1539,
	13, 1539,
	14, 1539,
	15, 1539,
	16, 1539,
	17, 1539,
	18, 1539,
	20, 1539,
	21, 1539,
	23, 1539,
	24, 1539,
	27, 1539,
	29, 1539,
	31, 1539,
	34, 1539,
	35, 1539,
	36, 1539,
	37, 1539,
	38, 1539,
	39, 1539,
	40, 1539,
	41, 1539,
	42, 1539,
	43, 1539,
	45, 1539,
	46, 1539,
	47, 1539,
	48, 1539,
	49, 1539,
	50, 1539,
	53, 1539,
	54, 1539,
	55, 1539,
	57, 1539,
	58, 1539,
	59, 1539,
	62, 1539,
	63, 1539,
	64, 1539,
	65, 1539,
	66, 1539,
	67, 1539,
	68, 1539,
	69, 1539,
	71, 1539,
	72, 1539,
	73, 1539,
	74, 1539,
	76, 1539,
	77, 1539,
	78, 1539,
	79, 1539,
	87, 1539,
	88, 1539,
	89, 1539,
	90, 1539,
	91, 1539,
	92, 1539,
	93, 1539,
	94, 1539,
	96, 1539,
	98, 1539,
	100, 1539,
	103, 1539,
	104, 1539,
	106, 1539,
	110, 1539,
	111, 1539,
	112, 1539,
	113, 1539,
	114, 1539,
	115, 1539,
	116, 1539,
	120, 1539,
	121, 1539,
	122, 1539,
	123, 1539,
	124, 1539,
	125, 1539,
	126, 1539,
	127, 1539,
	128, 1539,
	129, 1539,
	130, 1539,
	132, 1539,
	135, 1539,
	137, 1539,
	138, 1539,
	140, 1539,
	143, 1539,
	144, 1539,
	145, 1539,
	146, 1539,
	147, 1539,
	148, 1539,
	149, 1539,
	150, 1539,
	151, 1539,
	152, 1539,
	153, 1539,
	155, 1539,
	157, 1539,
	158, 1539,
	159, 1539,
	160, 1539,
	161, 1539,
	162, 1539,
	163, 1539,
	164, 1539,
	165, 1539,
	167, 1539,
	169, 1539,
	170, 1539,
	171, 1539,
	172, 1539,
	173, 1539,
	174, 1539,
	175, 1539,
	176, 1539,
	177, 1539,
	178, 1539,
	180, 1539,
	181, 1539,
	183, 1539,
	184, 1539,
	185, 1539,
	186, 1539,
	187, 1539,
	189, 1539,
	190, 1539,
	193, 1539,
	194, 1539,
	195, 1539,
	196, 1539,
	198, 1539,
	199, 1539,
	200, 1539,
	201, 1539,
	202, 1539,
	203, 1539,
	204, 1539,
	205, 1539,
	206, 1539,
	207, 1539,
	211, 1539,
	212, 1539,
	213, 1539,
	214, 1539,
	215, 1539,
	217, 1539,
	220, 1539,
	221, 1539,
	223, 1539,
	224, 1539,
	226, 1539,
	228, 1539,
	229, 1539,
	230, 1539,
	231, 1539,
	232, 1539,
	233, 1539,
	234, 1539,
	235, 1539,
	237, 1539,
	238, 1539,
	239, 1539,
	240, 1539,
	241, 1539,
	243, 1539,
	244, 1539,
	245, 1539,
	246, 1539,
	247, 1539,
	248, 1539,
	249, 1539,
	250, 1539,
	252, 1539,
	253, 1539,
	254, 1539,
	255, 1539,
	256, 1539,
	257, 1539,
	258, 1539,
	259, 1539,
	260, 1539,
	261, 1539,
	262, 1539,
	263, 1539,
	264, 1539,
	266, 1539,
	267, 1539,
	268, 1539,
	269, 1539,
	270, 1539,
	271, 1539,
	272, 1539,
	273, 1539,
	274, 1539,
	275, 1539,
	276, 1539,
	277, 1539,
	279, 1539,
	280, 1539,
	281, 1539,
	282, 1539,
	283, 1539,
	284, 1539,
	286, 1539,
	287, 1539,
	288, 1539,
	289, 1539,
	290, 1539,
	291, 1539,
	292, 1539,
	293, 1539,
	294, 1539,
	296, 1539,
	297, 1539,
	298, 1539,
	299, 1539,
	300, 1539,
	301, 1539,
	302, 1539,
	303, 1539,
	304, 1539,
	305, 1539,
	306, 1539,
	308, 1539,
	310, 1539,
	311, 1539,
	312, 1539,
	313, 1539,
	314, 1539,
	315, 1539,
	316, 1539,
	317, 1539,
	319, 1539,
	320, 1539,
	321, 1539,
	324, 1539,
	325, 1539,
	326, 1539,
	327, 1539,
	329, 1539,
	330, 1539,
	331, 1539,
	332, 1539,
	335, 1539,
	336, 1539,
	337, 1539,
	338, 1539,
	340, 1539,
	342, 1539,
	343, 1539,
	344, 1539,
	345, 1539,
	346, 1539,
	347, 1539,
	350, 1539,
	355, 1539,
	356, 1539,
	357, 1539,
	358, 1539,
	359, 1539,
	360, 1539,
	361, 1539,
	363, 1539,
	364, 1539,
	365, 1539,
	366, 1539,
	367, 1539,
	368, 1539,
	370, 1539,
	371, 1539,
	372, 1539,
	373, 1539,
	374, 1539,
	375, 1539,
	376, 1539,
	377, 1539,
	378, 1539,
	380, 1539,
	383, 1539,
	384, 1539,
	387, 1539,
	388, 1539,
	-2, 0,
	-1, 981,
	134, 1440,
	322, 1440,
	365, 1440,
	384, 1440,
	-2, 0,
	-1, 998,
	134, 1463,
	322, 1463,
	365, 1463,
	384, 1463,
	-2, 0,
	-1, 999,
	170, 669,
	243, 669,
	247, 669,
	-2, 338,
	-1, 1067,
	119, 766,
	131, 766,
	188, 766,
	216, 766,
	-2, 727,
	-1, 1148,
	109, 732,
	119, 732,
	131, 732,
	166, 732,
	188, 732,
	216, 732,
	222, 732,
	333, 732,
	-2, 1081,
	-1, 1158,
	382, 1277,
	-2, 1265,
	-1, 1176,
	383, 1194,
	-2, 0,
	-1, 1200,
	170, 669,
	243, 669,
	247, 669,
	-2, 664,
	-1, 1228,
	383, 1194,
	-2, 0,
	-1, 1232,
	109, 732,
	119, 732,
	131, 732,
	166, 732,
	188, 732,
	216, 732,
	222, 732,
	333, 732,
	-2, 833,
	-1, 1392,
	170, 669,
	243, 669,
	247, 669,
	-2, 340,
	-1, 1500,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 986,
	-1, 1501,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 987,
	-1, 1502,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 988,
	-1, 1503,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 989,
	-1, 1504,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 990,
	-1, 1505,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 991,
	-1, 1506,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 992,
	-1, 1507,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 993,
	-1, 1516,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 1002,
	-1, 1517,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 1003,
	-1, 1518,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 1004,
	-1, 1521,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1009,
	-1, 1527,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1011,
	-1, 1529,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1015,
	-1, 1530,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1016,
	-1, 1531,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1017,
	-1, 1532,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1018,
	-1, 1601,
	134, 1205,
	382, 1300,
	-2, 1293,
	-1, 1602,
	134, 1206,
	-2, 1480,
	-1, 1603,
	134, 1207,
	-2, 1382,
	-1, 1604,
	134, 1208,
	-2, 1341,
	-1, 1605,
	134, 1209,
	-2, 1358,
	-1, 1606,
	134, 1210,
	-2, 1380,
	-1, 1607,
	134, 1211,
	-2, 1436,
	-1, 1684,
	1, 834,
	76, 834,
	109, 834,
	119, 834,
	131, 834,
	135, 834,
	139, 834,
	141, 834,
	157, 834,
	166, 834,
	173, 834,
	184, 834,
	188, 834,
	203, 834,
	216, 834,
	218, 834,
	222, 834,
	265, 834,
	267, 834,
	333, 834,
	341, 834,
	352, 834,
	353, 834,
	362, 834,
	381, 834,
	383, 834,
	385, 834,
	386, 834,
	387, 834,
	-2, 833,
	-1, 1854,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1010,
	-1, 1855,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1012,
	-1, 1860,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1013,
	-1, 1878,
	227, 1165,
	-2, 1167,
	-1, 2059,
	233, 755,
	-2, 599,
	-1, 2118,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1014,
	-1, 2123,
	169, 0,
	-2, 1030,
	-1, 2132,
	227, 1166,
	-2, 1168,
	-1, 2174,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1058,
	-1, 2175,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1059,
	-1, 2176,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1060,
	-1, 2180,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1064,
	-1, 2181,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1065,
	-1, 2182,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1066,
	-1, 2323,
	169, 0,
	-2, 1031,
	-1, 2326,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1034,
	-1, 2327,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1036,
	-1, 2455,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1035,
	-1, 2456,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1037,
	-1, 2463,
	169, 0,
	-2, 1067,
	-1, 2540,
	169, 0,
	-2, 1068,
	-1, 2622,
	37, 0,
	150, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1483,
	-1, 2705,
	382, 1551,
	-2, 518,
}

const sqlPrivate = 57344

const sqlLast = 44975

var sqlAct = [...]int{

	668, 1250, 2690, 2702, 2688, 2421, 2621, 2671, 2420, 2630,
	2269, 2703, 2631, 1771, 2594, 2632, 2489, 2096, 1734, 2431,
	1277, 1779, 2151, 2281, 2545, 2620, 2391, 2233, 955, 666,
	2377, 2303, 1544, 795, 1298, 2065, 2310, 1333, 1679, 187,
	912, 2305, 1738, 2063, 187, 1848, 958, 1230, 187, 2071,
	2234, 1733, 1768, 1248, 187, 1993, 2357, 644, 1944, 187,
	187, 2469, 951, 187, 2297, 1226, 187, 1972, 1209, 1293,
	1780, 1688, 1292, 658, 187, 1235, 1279, 1737, 665, 1697,
	1680, 612, 620, 111, 1980, 460, 1943, 1556, 2204, 1479,
	1889, 1474, 1154, 1238, 1727, 1844, 1002, 1417, 1210, 1240,
	1630, 1828, 1541, 1565, 1751, 457, 1457, 1186, 1001, 1455,
	1557, 1581, 1273, 777, 1190, 797, 1575, 948, 1735, 941,
	963, 1281, 1741, 1072, 1666, 1773, 780, 1653, 1311, 1217,
	760, 515, 1597, 63, 636, 1143, 532, 111, 1073, 660,
	1458, 1750, 187, 187, 1456, 1416, 178, 1200, 493, 1305,
	187, 116, 528, 183, 758, 938, 2392, 1199, 117, 1077,
	2218, 556, 1877, 2219, 1313, 2422, 2422, 2718, 1313, 1772,
	1313, 2711, 616, 187, 187, 800, 187, 187, 812, 616,
	2717, 2710, 187, 187, 2711, 2711, 535, 2667, 2666, 2665,
	2647, 1268, 1268, 1268, 2390, 2642, 2641, 1227, 2638, 1660,
	1660, 900, 1268, 2618, 2080, 2617, 507, 1323, 611, 1323,
	1728, 2589, 2584, 2583, 1334, 1805, 1268, 2445, 626, 2579,
	2571, 793, 2542, 1268, 2390, 774, 1805, 2520, 2517, 2116,
	2515, 2390, 1268, 111, 2390, 2207, 2500, 2499, 2477, 807,
	1268, 2390, 1268, 2474, 2457, 2416, 2411, 1268, 1805, 1660,
	1660, 2389, 617, 2370, 2325, 2390, 2296, 1268, 1805, 2081,
	1732, 478, 26, 605, 2291, 2214, 1264, 2127, 1732, 2215,
	604, 1660, 2090, 2047, 2723, 2709, 2048, 1268, 1088, 1089,
	1969, 621, 661, 1655, 1660, 1660, 785, 789, 1968, 37,
	810, 1961, 1268, 2590, 1959, 1962, 1323, 762, 1660, 1958,
	38, 121, 1091, 1660, 2449, 1088, 1089, 2445, 1118, 1119,
	1120, 1128, 1129, 1130, 41, 1957, 1728, 1881, 1106, 1660,
	2719, 2699, 1121, 1882, 2207, 1654, 1815, 1090, 123, 1091,
	1660, 1804, 1132, 2106, 1686, 1805, 1776, 1660, 43, 1794,
	46, 1323, 2187, 1660, 1888, 1731, 1088, 1089, 1659, 1732,
	2129, 1326, 1660, 2048, 1090, 1327, 764, 1847, 765, 1826,
	1110, 47, 1088, 1089, 1395, 49, 726, 1107, 1204, 52,
	1091, 1560, 124, 1268, 898, 983, 53, 1314, 104, 54,
	150, 1314, 147, 1314, 1414, 980, 1091, 979, 978, 977,
	976, 1578, 975, 974, 973, 1090, 972, 1096, 971, 970,
	969, 55, 968, 967, 966, 766, 2393, 763, 1558, 147,
	56, 1090, 26, 149, 610, 1113, 1114, 1115, 1116, 609,
	608, 607, 603, 602, 1096, 1088, 1089, 601, 187, 187,
	800, 187, 600, 187, 1914, 1915, 187, 599, 598, 595,
	149, 594, 187, 1579, 593, 1125, 1133, 592, 588, 1091,
	148, 187, 187, 187, 187, 800, 587, 586, 554, 553,
	800, 552, 1111, 551, 1131, 1096, 550, 549, 548, 547,
	546, 545, 544, 543, 1090, 542, 921, 148, 541, 1914,
	1915, 1096, 1123, 485, 540, 141, 118, 539, 187, 1111,
	538, 523, 142, 522, 38, 521, 520, 1580, 1577, 57,
	519, 1319, 187, 1914, 1915, 1312, 58, 1448, 41, 448,
	1988, 425, 2080, 118, 418, 417, 1122, 170, 187, 147,
	169, 168, 167, 166, 165, 65, 119, 59, 187, 60,
	1111, 61, 164, 125, 484, 163, 1654, 162, 62, 161,
	1112, 160, 159, 147, 1096, 158, 1111, 157, 156, 155,
	149, 73, 1117, 1920, 93, 940, 1914, 1915, 1929, 800,
	154, 153, 152, 486, 122, 151, 904, 1112, 1420, 1014,
	53, 945, 488, 54, 149, 964, 1582, 2694, 2692, 2637,
	911, 2619, 1251, 2605, 1231, 1126, 1594, 148, 2599, 1592,
	187, 1105, 2537, 617, 97, 141, 1914, 1915, 1920, 1932,
	1933, 1934, 142, 120, 56, 1017, 1084, 2518, 1112, 2438,
	2356, 148, 2450, 2322, 916, 918, 2355, 924, 1930, 141,
	1914, 1915, 1920, 1775, 1112, 619, 142, 1590, 1588, 2351,
	2350, 2343, 2342, 2341, 1012, 2337, 2336, 944, 944, 1099,
	1100, 1092, 1093, 1094, 1095, 1097, 1098, 118, 1330, 2335,
	4, 1929, 2334, 2328, 2302, 1124, 2201, 1576, 1102, 1103,
	1109, 1108, 1104, 1127, 2196, 1101, 1099, 1100, 1092, 1093,
	1094, 1095, 1097, 1098, 2195, 1920, 2194, 999, 1162, 2137,
	996, 1810, 2352, 2046, 2050, 2000, 1068, 1930, 984, 1996,
	1966, 1963, 1951, 57, 1942, 1067, 1931, 1913, 188, 1910,
	1909, 1907, 1894, 1063, 1893, 1878, 1101, 1099, 1100, 1092,
	1093, 1094, 1095, 1097, 1098, 1920, 1684, 1088, 1089, 1015,
	119, 59, 1084, 60, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 904, 2708, 1155, 773, 1146, 485, 147, 1552, 1920,
	1930, 1091, 1830, 1083, 2712, 487, 2697, 38, 93, 1229,
	1415, 1752, 909, 1069, 2679, 1935, 1228, 1070, 187, 1843,
	187, 41, 2678, 1215, 1297, 1931, 1090, 2153, 149, 2609,
	2608, 2607, 605, 2437, 1080, 1081, 617, 2574, 2566, 604,
	1930, 2564, 187, 187, 1085, 2556, 2554, 484, 1092, 1093,
	1094, 1095, 1097, 1098, 1925, 1923, 1924, 1916, 1917, 1918,
	1919, 1921, 1922, 2530, 2529, 148, 2094, 1546, 2486, 2465,
	1158, 1188, 1189, 141, 2446, 2425, 486, 2414, 1931, 2396,
	142, 2348, 1192, 53, 2279, 488, 54, 2275, 2274, 2272,
	2242, 2241, 1195, 2222, 2210, 2122, 1096, 1213, 2036, 2027,
	2013, 118, 1916, 1917, 1918, 1919, 1921, 1922, 2012, 1998,
	1553, 1807, 1967, 1941, 1903, 1902, 1899, 56, 1931, 111,
	1874, 1260, 1869, 1925, 1923, 1924, 1916, 1917, 1918, 1919,
	1921, 1922, 1191, 801, 1194, 2548, 813, 1671, 1642, 1586,
	1276, 1208, 1225, 1207, 628, 2444, 1986, 1198, 1184, 1203,
	1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 800, 187,
	1175, 147, 725, 1174, 1173, 812, 1201, 1172, 1233, 1171,
	1170, 187, 2013, 1169, 1205, 617, 1168, 1923, 1924, 1916,
	1917, 1918, 1919, 1921, 1922, 1167, 1166, 187, 2330, 1088,
	1089, 1159, 149, 187, 1147, 187, 1146, 187, 995, 987,
	960, 187, 2301, 2217, 1266, 1296, 57, 2213, 1880, 1926,
	1927, 1928, 1275, 1091, 1155, 1331, 1925, 1923, 1924, 1916,
	1917, 1918, 1919, 1921, 1922, 1728, 1672, 1593, 2092, 148,
	1591, 1144, 2451, 119, 59, 1229, 60, 141, 1090, 2066,
	1251, 1814, 187, 187, 142, 1918, 1919, 1921, 1922, 800,
	147, 187, 2448, 2447, 187, 1435, 1414, 1302, 487, 1011,
	910, 93, 2441, 2220, 2082, 118, 1914, 1915, 1589, 1587,
	1231, 1196, 2261, 1414, 1066, 812, 1197, 1387, 1164, 2254,
	187, 149, 1249, 1414, 1813, 187, 1061, 2039, 2032, 1965,
	187, 187, 1401, 187, 1964, 187, 1853, 187, 1452, 187,
	1008, 2097, 1294, 2031, 1836, 1246, 940, 1254, 2470, 1772,
	187, 1150, 1267, 2154, 1566, 1161, 187, 187, 148, 1187,
	1055, 1754, 1885, 1247, 2695, 187, 141, 2693, 1241, 2076,
	2229, 1242, 2602, 142, 1316, 1798, 454, 1318, 429, 174,
	2578, 1321, 1094, 1095, 1097, 1098, 1307, 187, 1304, 2663,
	453, 812, 175, 2662, 118, 1698, 1459, 2103, 1088, 1089,
	1056, 2404, 1816, 1539, 1047, 2511, 2509, 615, 2508, 2507,
	2263, 753, 2256, 1413, 772, 2226, 2225, 673, 438, 1537,
	1898, 2419, 1091, 1229, 1690, 1897, 1896, 111, 801, 1328,
	1389, 755, 1329, 2253, 996, 728, 751, 1388, 1801, 1895,
	1856, 1797, 1723, 1646, 1578, 1718, 1392, 1090, 1406, 38,
	1436, 1243, 1713, 801, 1528, 452, 1418, 176, 801, 1690,
	749, 1426, 746, 41, 614, 1202, 897, 1430, 1689, 1431,
	1402, 1432, 1701, 1433, 1645, 1434, 1429, 1489, 439, 2706,
	2093, 1214, 1914, 1915, 905, 907, 1769, 1009, 727, 1802,
	1446, 1447, 1440, 1442, 590, 1269, 1579, 1461, 1064, 1275,
	1445, 1808, 1533, 187, 502, 187, 1422, 2577, 187, 1453,
	1534, 1460, 1535, 1454, 2267, 1543, 1540, 1096, 1803, 187,
	616, 1543, 2491, 1478, 2268, 2043, 1651, 488, 812, 605,
	1010, 187, 605, 605, 1241, 187, 1470, 1242, 187, 1471,
	1472, 1271, 187, 1425, 597, 1087, 187, 670, 1563, 177,
	1580, 1577, 812, 994, 187, 1550, 800, 801, 426, 56,
	1819, 1548, 2615, 1308, 187, 812, 1561, 985, 2586, 187,
	1340, 1582, 1821, 989, 1673, 596, 1551, 187, 1554, 1041,
	617, 1700, 1111, 187, 1691, 617, 2073, 1625, 2244, 597,
	171, 1410, 2038, 2587, 1663, 1822, 2654, 1098, 187, 2029,
	628, 1920, 1716, 1480, 1487, 1421, 1608, 1820, 1566, 187,
	451, 187, 172, 187, 1702, 1704, 187, 1243, 187, 1042,
	187, 187, 1256, 187, 800, 800, 1724, 2662, 800, 1582,
	1536, 613, 187, 2147, 1648, 1649, 2109, 1538, 449, 1677,
	454, 1658, 174, 1761, 1252, 432, 1668, 1669, 57, 1664,
	450, 1065, 173, 1793, 1375, 1444, 441, 440, 2674, 1707,
	1112, 1233, 1415, 1752, 1694, 2102, 1930, 1714, 617, 1325,
	1792, 1340, 1340, 1699, 1922, 119, 59, 175, 60, 1415,
	1752, 1488, 1789, 1060, 432, 2251, 2104, 447, 2559, 1415,
	1752, 1244, 147, 1914, 1915, 1136, 1137, 1138, 1139, 1140,
	487, 2111, 1747, 93, 1390, 2074, 1149, 442, 2681, 111,
	1576, 1054, 1582, 1845, 1846, 111, 1157, 1313, 1800, 2634,
	1687, 812, 2257, 149, 1866, 453, 1046, 1753, 1755, 187,
	1759, 1760, 1795, 1778, 747, 1787, 1185, 1788, 1790, 1525,
	1864, 419, 176, 964, 1931, 187, 187, 187, 1796, 187,
	1799, 757, 2073, 2492, 756, 1375, 1375, 1809, 2311, 747,
	148, 1092, 1093, 1094, 1095, 1097, 1098, 1257, 141, 1748,
	2245, 2024, 1763, 1405, 1404, 142, 1414, 1411, 187, 2653,
	1393, 1715, 1811, 748, 1192, 747, 1195, 2144, 581, 1858,
	452, 1189, 1188, 2108, 630, 1542, 118, 1241, 1020, 1786,
	1242, 591, 944, 1817, 944, 512, 625, 1251, 1833, 1709,
	2461, 501, 1920, 2672, 2422, 2635, 2514, 1141, 1674, 1615,
	111, 1720, 1901, 1861, 1667, 491, 1683, 1216, 1549, 1424,
	1086, 1211, 1211, 1862, 177, 428, 1005, 1867, 993, 2312,
	616, 2145, 1712, 1831, 1924, 1916, 1917, 1918, 1919, 1921,
	1922, 2107, 1523, 1526, 2567, 1725, 2110, 1244, 1251, 1859,
	1150, 1840, 1835, 1839, 1408, 427, 2317, 1774, 1568, 1774,
	1842, 2673, 1028, 582, 428, 2636, 1220, 1930, 494, 1051,
	1243, 1600, 1600, 1613, 1262, 1076, 1220, 1633, 2652, 1522,
	433, 1637, 1638, 1640, 2675, 429, 801, 172, 1223, 2633,
	1261, 499, 2661, 813, 427, 430, 2659, 495, 1223, 1006,
	420, 2568, 2430, 1007, 1665, 1766, 990, 1652, 982, 2042,
	1582, 2682, 443, 1258, 1218, 1221, 1075, 174, 1857, 433,
	1314, 2346, 2502, 2687, 429, 1221, 1381, 173, 1071, 496,
	2501, 1259, 2484, 2551, 430, 451, 2228, 2143, 1005, 2595,
	1887, 1863, 1052, 490, 1219, 1931, 187, 812, 1865, 1409,
	2009, 498, 187, 187, 2005, 444, 187, 1970, 1884, 1982,
	1767, 187, 1976, 491, 187, 454, 1303, 2183, 2400, 1295,
	617, 1291, 187, 1278, 421, 450, 583, 801, 187, 187,
	187, 1466, 1524, 2698, 187, 1074, 445, 187, 446, 1075,
	1439, 1994, 1400, 187, 187, 187, 187, 187, 1222, 1053,
	2403, 1827, 1990, 813, 187, 1758, 800, 2402, 1222, 187,
	1989, 1006, 1396, 1076, 812, 1007, 494, 2282, 1948, 1949,
	1950, 1974, 1999, 187, 1239, 1075, 2006, 1978, 1979, 180,
	1021, 1984, 914, 187, 2347, 187, 913, 187, 2686, 499,
	187, 1985, 1398, 1971, 617, 495, 1916, 1917, 1918, 1919,
	1921, 1922, 2030, 187, 800, 800, 1399, 187, 1074, 584,
	1467, 187, 2432, 628, 628, 1995, 187, 2049, 187, 2051,
	1022, 497, 2485, 1019, 2184, 187, 2001, 496, 1029, 813,
	2185, 2399, 1981, 2015, 2014, 1851, 1076, 1983, 187, 800,
	1662, 2023, 1661, 585, 1074, 1005, 614, 510, 504, 498,
	2058, 2059, 926, 187, 2270, 2423, 937, 935, 483, 34,
	1244, 2041, 2358, 2482, 1756, 1757, 2205, 1585, 2078, 1050,
	2401, 2464, 1039, 2345, 1037, 482, 33, 2266, 1463, 500,
	1468, 1945, 1415, 1412, 2121, 2089, 1475, 2044, 1908, 1868,
	481, 30, 187, 2483, 480, 69, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 2075, 1527,
	1374, 1529, 1530, 1531, 1532, 2069, 2055, 2083, 1035, 2088,
	1000, 1812, 187, 2056, 479, 68, 3, 2124, 1555, 617,
	2010, 2099, 2100, 2101, 2098, 1149, 2084, 2085, 1730, 2086,
	2087, 899, 476, 22, 2105, 1722, 813, 902, 1711, 497,
	1059, 903, 1058, 2053, 1595, 1596, 2054, 2112, 1612, 2114,
	1624, 1626, 1631, 1634, 1635, 1636, 1033, 1975, 1045, 2057,
	813, 2010, 1031, 724, 801, 1872, 988, 477, 23, 1946,
	1071, 1049, 1875, 813, 1038, 2130, 1036, 1837, 1437, 34,
	2025, 1428, 2139, 2140, 2141, 2133, 509, 503, 1340, 1891,
	1892, 2034, 936, 934, 187, 2128, 33, 500, 475, 28,
	187, 1374, 1374, 1025, 2155, 2157, 474, 20, 2160, 187,
	187, 30, 2189, 933, 2162, 69, 1165, 2052, 2146, 2148,
	2149, 1584, 472, 19, 2037, 473, 18, 2223, 2629, 1340,
	2091, 1721, 801, 801, 464, 15, 801, 2060, 2216, 1940,
	1034, 2190, 465, 16, 471, 51, 1633, 1633, 1633, 463,
	50, 1953, 1710, 2239, 2221, 470, 12, 1265, 2592, 187,
	111, 187, 2188, 2203, 2134, 68, 2525, 783, 2265, 2212,
	643, 2374, 1375, 187, 2209, 2208, 800, 2206, 1005, 469,
	44, 2249, 2247, 22, 2276, 2227, 745, 1044, 1032, 2062,
	2224, 187, 187, 1770, 1030, 2273, 1764, 2240, 1340, 1762,
	2258, 2231, 2238, 2292, 462, 45, 2252, 2264, 187, 2284,
	2283, 2064, 1746, 1375, 422, 1339, 2259, 187, 23, 812,
	187, 187, 187, 2259, 1324, 1322, 1320, 812, 2286, 813,
	1480, 2158, 2287, 1377, 1317, 1024, 2271, 1315, 802, 1480,
	2163, 814, 2278, 1263, 2277, 932, 1255, 2285, 1253, 28,
	1245, 1006, 2288, 2663, 623, 1007, 581, 20, 2248, 2294,
	2250, 2293, 1340, 1078, 187, 2299, 2443, 1974, 1216, 2442,
	2324, 2319, 2193, 19, 625, 1419, 18, 2298, 1690, 2527,
	468, 7, 1375, 1849, 2316, 15, 1376, 1705, 467, 6,
	466, 36, 1690, 16, 1706, 51, 2290, 2035, 1340, 1340,
	50, 1703, 461, 35, 2026, 1726, 12, 1340, 1340, 624,
	750, 752, 1717, 1450, 1451, 1838, 1339, 1339, 187, 2561,
	778, 187, 2393, 1023, 2539, 2513, 2359, 1220, 489, 2344,
	44, 812, 187, 187, 1377, 1377, 187, 187, 187, 2362,
	1340, 582, 1079, 787, 791, 1336, 1375, 809, 1719, 1223,
	1850, 2369, 769, 187, 1749, 45, 1082, 1708, 187, 2385,
	187, 2591, 187, 187, 187, 1218, 2428, 187, 800, 1777,
	2368, 2398, 770, 2394, 812, 2361, 1221, 800, 1765, 2397,
	2373, 2239, 1375, 1375, 2365, 187, 187, 1376, 1376, 2363,
	511, 1375, 1375, 2360, 800, 1219, 1854, 1855, 2386, 1745,
	1088, 1089, 1860, 2426, 1650, 2418, 1391, 1332, 2670, 2685,
	2424, 2476, 2239, 2364, 2413, 1914, 1915, 2429, 653, 2239,
	2300, 1873, 2410, 2202, 1375, 2240, 2150, 2434, 2433, 2415,
	2238, 7, 1088, 1089, 1879, 1824, 1823, 2427, 2259, 6,
	1886, 36, 2095, 1890, 1824, 2259, 1336, 1336, 2435, 1090,
	1991, 771, 2440, 35, 583, 1960, 2240, 184, 1825, 1222,
	1904, 2238, 423, 2240, 1647, 813, 434, 1644, 2238, 1643,
	2332, 2197, 455, 1088, 1089, 1574, 2454, 505, 184, 2452,
	2453, 513, 1152, 2142, 518, 187, 1162, 187, 1160, 812,
	187, 1057, 537, 802, 1149, 1048, 2466, 1091, 187, 1043,
	1040, 1631, 1631, 1631, 812, 1026, 992, 1394, 589, 2313,
	2490, 2381, 492, 2382, 1427, 1340, 1027, 2320, 802, 1987,
	1670, 2475, 1090, 802, 801, 2459, 2585, 2478, 1211, 2338,
	2239, 1900, 813, 2473, 1977, 622, 2544, 584, 2460, 1583,
	1163, 187, 48, 1275, 800, 2384, 2255, 2494, 187, 2236,
	2496, 2493, 647, 2375, 2387, 2262, 187, 187, 800, 800,
	761, 761, 187, 2516, 2230, 2239, 2526, 1740, 423, 1739,
	815, 585, 801, 801, 2240, 1403, 669, 2523, 2522, 2238,
	2536, 187, 1599, 1481, 2528, 744, 187, 2512, 2532, 2524,
	671, 423, 423, 187, 805, 423, 2535, 2531, 1337, 1375,
	184, 901, 672, 2259, 2533, 2534, 1338, 801, 1193, 2240,
	2555, 659, 791, 2541, 2238, 1335, 961, 1781, 187, 187,
	2549, 2366, 802, 809, 2547, 187, 1407, 2550, 1547, 1564,
	1883, 1156, 639, 800, 2557, 651, 650, 2383, 187, 2572,
	800, 800, 2570, 1562, 2505, 2506, 2070, 2573, 986, 638,
	494, 1992, 2538, 2072, 2436, 1465, 1841, 1016, 2576, 581,
	1462, 2068, 2246, 2439, 2417, 187, 2575, 187, 2581, 2582,
	187, 431, 812, 499, 1911, 959, 1622, 625, 1614, 495,
	1610, 1469, 1280, 1062, 1142, 2597, 1782, 628, 628, 1013,
	2558, 2610, 2079, 1806, 2612, 1206, 1473, 768, 2611, 767,
	628, 187, 2565, 2616, 2696, 1397, 2614, 1818, 1374, 1135,
	1134, 496, 2613, 2598, 2239, 754, 2553, 2113, 187, 187,
	187, 1475, 1004, 2626, 2628, 2627, 187, 2117, 1003, 2504,
	2118, 2639, 2646, 498, 2008, 2680, 2643, 2644, 2645, 2651,
	187, 1340, 2123, 2560, 582, 2649, 2650, 2648, 2243, 1374,
	2601, 2131, 146, 143, 145, 2660, 144, 2658, 2240, 2135,
	791, 2040, 1977, 2238, 2664, 72, 32, 31, 92, 91,
	90, 89, 2669, 88, 2668, 87, 86, 85, 84, 2480,
	1616, 2676, 2159, 83, 2677, 82, 2161, 2684, 81, 2683,
	2689, 2691, 80, 79, 2495, 78, 77, 1340, 76, 75,
	2519, 74, 533, 530, 71, 70, 29, 25, 96, 24,
	67, 2689, 2700, 66, 2707, 2701, 27, 17, 1374, 2191,
	2192, 2689, 2713, 1282, 2714, 1375, 2716, 11, 2198, 2199,
	2200, 2691, 2722, 2715, 2720, 2691, 2724, 2721, 21, 115,
	1284, 114, 113, 112, 14, 13, 537, 537, 110, 537,
	109, 927, 108, 497, 930, 107, 2211, 583, 1340, 106,
	423, 105, 10, 9, 95, 2309, 42, 8, 40, 537,
	537, 423, 952, 39, 801, 94, 137, 136, 2472, 1290,
	133, 1375, 1374, 135, 132, 134, 2232, 103, 139, 138,
	130, 128, 129, 131, 127, 126, 140, 102, 101, 100,
	99, 98, 5, 2, 1, 0, 537, 0, 0, 0,
	0, 500, 0, 0, 0, 2498, 0, 813, 1374, 1374,
	537, 0, 0, 1339, 0, 813, 0, 1374, 1374, 0,
	0, 0, 0, 2510, 0, 0, 991, 0, 1285, 0,
	584, 1377, 1375, 0, 0, 0, 537, 1211, 0, 0,
	0, 0, 778, 1236, 0, 0, 2295, 0, 0, 0,
	1374, 802, 2603, 0, 1339, 0, 0, 0, 814, 0,
	0, 0, 2385, 0, 585, 2378, 0, 0, 0, 0,
	0, 0, 1377, 0, 0, 0, 2376, 0, 1286, 1288,
	0, 2380, 0, 0, 1376, 2323, 0, 1287, 0, 2326,
	2327, 0, 0, 2329, 0, 0, 0, 0, 423, 0,
	2331, 2386, 2333, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 2340, 813,
	0, 0, 1224, 1339, 2379, 1376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 485,
	0, 1377, 802, 1336, 0, 0, 0, 0, 2588, 0,
	38, 2349, 0, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 813, 0, 41, 801, 0, 0, 814, 0,
	0, 1274, 0, 2604, 0, 2606, 0, 0, 0, 0,
	0, 1289, 801, 0, 1336, 0, 0, 1339, 0, 0,
	484, 0, 0, 791, 1376, 1306, 0, 1306, 0, 0,
	0, 2395, 0, 0, 0, 1377, 0, 0, 0, 0,
	0, 0, 0, 0, 2381, 0, 2382, 0, 0, 486,
	0, 0, 0, 1339, 1339, 1374, 53, 0, 488, 54,
	0, 0, 1339, 1339, 0, 0, 1616, 1616, 0, 0,
	0, 1377, 1377, 0, 814, 0, 0, 0, 2384, 0,
	1377, 1377, 0, 1336, 0, 0, 0, 2387, 1376, 0,
	56, 1870, 1871, 0, 0, 1339, 518, 0, 761, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 1377, 0, 2455, 2456, 0, 0, 0,
	423, 423, 813, 0, 1376, 1376, 0, 0, 0, 0,
	0, 0, 0, 1376, 1376, 0, 0, 0, 0, 0,
	0, 0, 1616, 1616, 1616, 0, 2468, 1336, 0, 0,
	0, 0, 2471, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 1376, 1937, 1938, 1939,
	2383, 0, 0, 0, 0, 0, 801, 801, 0, 57,
	0, 0, 0, 1336, 1336, 0, 0, 0, 0, 0,
	0, 0, 1336, 1336, 0, 0, 2503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 59, 0, 60,
	0, 814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 1336, 0, 0, 0, 0,
	0, 487, 0, 0, 93, 814, 0, 184, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 814, 423,
	0, 801, 0, 0, 149, 0, 0, 0, 801, 801,
	0, 0, 0, 0, 0, 1301, 0, 0, 0, 0,
	1339, 423, 0, 423, 0, 423, 0, 0, 0, 1309,
	2552, 1374, 0, 0, 0, 0, 0, 0, 1377, 0,
	813, 148, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 142, 802, 802, 778,
	0, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 184, 0, 0, 0, 778, 0, 118, 1685, 184,
	0, 0, 537, 0, 0, 0, 791, 1374, 0, 0,
	0, 1376, 0, 0, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 0, 537, 0,
	0, 0, 0, 537, 0, 0, 0, 0, 184, 537,
	0, 537, 0, 537, 0, 537, 0, 537, 0, 0,
	2625, 2625, 1616, 1616, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 537, 537, 2640, 0, 1374, 1783,
	1336, 0, 0, 423, 814, 0, 0, 2119, 2120, 0,
	809, 809, 0, 0, 0, 0, 2625, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
	1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
	0, 1616, 0, 0, 2625, 0, 2164, 2165, 2166, 2167,
	2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
	2178, 2179, 2180, 2181, 2182, 0, 2186, 0, 0, 0,
	0, 2704, 648, 64, 0, 0, 1339, 0, 0, 0,
	0, 0, 2704, 0, 0, 2704, 2704, 0, 0, 0,
	0, 0, 0, 0, 1377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1914, 1915, 0, 1932,
	1933, 1934, 0, 0, 0, 1832, 809, 1834, 0, 791,
	0, 518, 0, 761, 0, 0, 901, 64, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 0, 0, 0, 458, 0, 1376, 1852, 1682,
	1377, 0, 0, 423, 0, 0, 423, 0, 0, 0,
	1695, 1929, 0, 0, 423, 0, 0, 485, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 423, 0, 606, 0, 0, 1729, 0, 0,
	0, 618, 41, 1339, 0, 1736, 0, 0, 0, 0,
	0, 537, 0, 1376, 0, 0, 1336, 0, 0, 0,
	0, 1377, 0, 0, 0, 0, 901, 0, 484, 0,
	814, 0, 779, 64, 0, 1920, 0, 423, 0, 1785,
	0, 537, 0, 0, 537, 0, 537, 0, 423, 423,
	0, 1791, 0, 0, 0, 0, 0, 486, 0, 0,
	1695, 0, 0, 0, 53, 0, 488, 54, 0, 0,
	0, 0, 1336, 0, 1376, 1935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 814, 56, 0,
	1930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 778, 802, 802, 0,
	0, 0, 778, 778, 0, 0, 778, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2002, 0,
	0, 0, 802, 423, 423, 423, 0, 423, 1931, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 2028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1914, 1915, 423, 1932, 1933, 1934,
	0, 0, 0, 2045, 119, 59, 0, 60, 0, 0,
	0, 2321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 487,
	0, 0, 93, 0, 0, 0, 0, 2061, 0, 0,
	0, 0, 0, 0, 0, 0, 1274, 0, 0, 1929,
	1616, 0, 149, 0, 0, 1274, 0, 0, 0, 1926,
	1927, 1928, 0, 0, 0, 0, 1925, 1923, 1924, 1916,
	1917, 1918, 1919, 1921, 1922, 2463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 1616, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 1914, 1915, 0,
	1932, 1933, 1934, 1920, 0, 0, 2487, 0, 0, 0,
	0, 0, 2115, 0, 2126, 459, 0, 0, 0, 0,
	0, 0, 618, 1088, 1089, 0, 1118, 1119, 1120, 1128,
	1129, 1130, 0, 0, 0, 0, 1106, 0, 0, 0,
	1121, 0, 0, 1935, 0, 0, 0, 1091, 0, 0,
	1132, 0, 1929, 0, 0, 0, 0, 0, 0, 1616,
	0, 0, 0, 0, 423, 0, 0, 0, 1930, 0,
	423, 423, 1090, 0, 423, 0, 0, 0, 1110, 1682,
	0, 0, 1682, 0, 2540, 1107, 0, 0, 0, 0,
	1997, 0, 0, 0, 0, 0, 423, 2003, 2004, 0,
	0, 0, 1695, 0, 0, 2011, 0, 0, 0, 0,
	0, 2016, 2017, 2019, 2021, 2022, 1920, 0, 0, 802,
	0, 0, 423, 0, 0, 0, 0, 2033, 0, 0,
	0, 0, 0, 1113, 1114, 1115, 1116, 0, 0, 0,
	0, 423, 1096, 0, 778, 0, 1931, 0, 0, 0,
	0, 1301, 0, 1301, 0, 537, 1935, 0, 537, 0,
	0, 0, 814, 1125, 1133, 0, 0, 0, 0, 0,
	814, 537, 0, 0, 0, 423, 0, 0, 0, 2067,
	0, 1930, 1131, 606, 423, 0, 2077, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 1145, 0, 1148, 1829, 1111, 0, 0,
	0, 0, 1153, 0, 0, 485, 0, 0, 0, 0,
	0, 1829, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 1926, 1927, 1928,
	41, 1783, 778, 0, 1925, 1923, 1924, 1916, 1917, 1918,
	1919, 1921, 1922, 0, 0, 0, 0, 0, 0, 1931,
	423, 0, 0, 0, 0, 0, 484, 0, 0, 0,
	1117, 2315, 809, 0, 814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	0, 0, 53, 1126, 488, 54, 0, 0, 0, 1105,
	2152, 802, 0, 0, 0, 0, 0, 814, 0, 0,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 802, 0, 64,
	0, 0, 0, 0, 1232, 0, 0, 0, 0, 0,
	1926, 1927, 1928, 0, 0, 0, 0, 1925, 1923, 1924,
	1916, 1917, 1918, 1919, 1921, 1922, 0, 0, 778, 0,
	0, 0, 0, 1124, 0, 0, 1102, 1103, 1109, 1108,
	1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095,
	1097, 1098, 423, 0, 0, 0, 0, 0, 1682, 0,
	1956, 0, 0, 0, 0, 0, 0, 901, 1682, 0,
	0, 0, 2407, 0, 0, 0, 0, 2412, 0, 0,
	0, 0, 2235, 0, 0, 57, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 0, 0, 0,
	0, 2260, 0, 0, 0, 0, 0, 814, 2260, 0,
	0, 0, 119, 59, 0, 60, 0, 1695, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 2280, 0, 0, 0, 0, 0, 487, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 802, 0, 423,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 802, 802, 0, 0, 0, 2306, 0, 0, 0,
	0, 0, 0, 0, 0, 2308, 0, 0, 2314, 423,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 2488, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 802, 0, 0, 0,
	0, 0, 0, 802, 802, 0, 0, 0, 0, 0,
	0, 2521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 814, 423, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1682, 901, 0, 0, 2371, 2372, 1695, 0, 0, 0,
	606, 0, 0, 606, 606, 0, 0, 0, 0, 0,
	2235, 901, 0, 0, 0, 0, 2405, 0, 2406, 0,
	423, 2408, 2409, 2260, 0, 423, 0, 0, 0, 0,
	2260, 0, 0, 0, 0, 2569, 0, 0, 0, 0,
	0, 2235, 0, 901, 1736, 0, 0, 0, 2235, 0,
	0, 0, 0, 0, 0, 0, 1545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	2600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1783, 0, 0, 0,
	0, 779, 0, 1695, 0, 2479, 0, 0, 2481, 1090,
	0, 0, 0, 0, 0, 1110, 423, 1232, 0, 2235,
	0, 0, 0, 0, 0, 0, 0, 0, 1914, 1915,
	64, 1932, 1933, 1934, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 2125, 0, 0, 2260, 0,
	0, 0, 0, 0, 2235, 0, 0, 0, 0, 423,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	1113, 1114, 1115, 1116, 2306, 2306, 0, 0, 0, 1096,
	901, 0, 0, 1929, 0, 0, 0, 0, 64, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 2546,
	0, 0, 0, 0, 1682, 0, 0, 0, 0, 64,
	0, 1301, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 2562, 2563, 0, 1121,
	0, 0, 0, 423, 1111, 0, 1091, 1920, 0, 1132,
	1914, 1915, 0, 1932, 1933, 1934, 2580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 1088, 1089, 0, 0, 0, 1110, 1128, 1129,
	1130, 0, 0, 2596, 1107, 901, 0, 1935, 423, 0,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 2235, 0, 1929, 0, 1117, 0, 0,
	0, 0, 1930, 0, 0, 0, 0, 0, 0, 2546,
	64, 1090, 1112, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 901, 901, 901, 0,
	0, 1096, 0, 0, 423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2657, 0,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 1920,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1131, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	1931, 1096, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 1545,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 1148,
	0, 0, 0, 1122, 1930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1926, 1927, 1928, 1112, 0, 0, 0, 1925, 1923,
	1924, 1916, 1917, 1918, 1919, 1921, 1922, 0, 0, 0,
	0, 0, 1126, 1148, 0, 0, 0, 0, 1105, 0,
	0, 0, 1931, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 779, 0,
	0, 0, 0, 0, 779, 779, 0, 0, 779, 0,
	0, 0, 1126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 64, 0, 0, 0, 0, 0, 0, 0, 1955,
	0, 0, 64, 1926, 1927, 1928, 0, 0, 0, 0,
	1925, 1923, 1924, 1916, 1917, 1918, 1919, 1921, 1922, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 64, 0,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 619, 0, 186, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	64, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	782, 269, 0, 0, 270, 398, 779, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 147,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	149, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 779, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 965, 416, 0,
	0, 352, 0, 0, 0, 141, 353, 354, 355, 356,
	357, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 776, 0, 1234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	779, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 816, 0, 191, 817, 818, 819,
	820, 358, 821, 822, 823, 824, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 825, 196, 365, 366,
	197, 198, 199, 826, 827, 367, 368, 369, 828, 200,
	370, 829, 803, 830, 201, 202, 203, 0, 205, 206,
	207, 204, 831, 208, 0, 209, 210, 832, 729, 211,
	212, 213, 833, 834, 836, 835, 837, 838, 839, 214,
	215, 424, 216, 371, 217, 372, 373, 840, 218, 841,
	219, 842, 220, 843, 844, 221, 222, 845, 223, 846,
	0, 847, 374, 224, 226, 225, 227, 375, 376, 848,
	730, 849, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 64, 230, 850, 231, 851, 852, 731, 853, 232,
	380, 854, 381, 855, 1545, 233, 234, 235, 236, 237,
	382, 383, 733, 856, 384, 241, 857, 238, 858, 732,
	239, 385, 240, 386, 387, 388, 389, 390, 859, 391,
	860, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 861, 249, 248, 862, 394, 736, 250, 251, 737,
	863, 252, 253, 864, 865, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	866, 867, 868, 396, 265, 397, 266, 267, 869, 268,
	870, 871, 269, 872, 873, 270, 398, 740, 271, 741,
	399, 272, 273, 274, 275, 276, 277, 278, 874, 279,
	400, 280, 401, 281, 875, 282, 283, 284, 285, 286,
	402, 287, 288, 876, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 877, 301, 742,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	878, 314, 315, 404, 313, 316, 317, 879, 318, 305,
	306, 319, 743, 320, 405, 406, 321, 880, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 881,
	329, 882, 330, 331, 332, 333, 334, 335, 336, 337,
	883, 409, 410, 411, 884, 885, 338, 339, 412, 413,
	886, 340, 341, 342, 343, 887, 888, 344, 345, 346,
	347, 889, 348, 890, 414, 349, 350, 351, 415, 416,
	891, 892, 352, 893, 894, 895, 896, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1675, 0, 0, 0, 0, 0, 189, 190,
	816, 1676, 191, 817, 818, 819, 820, 358, 821, 822,
	823, 824, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 825, 196, 365, 366, 197, 198, 199, 826,
	827, 367, 368, 369, 828, 200, 370, 829, 803, 830,
	201, 202, 203, 0, 205, 206, 207, 204, 831, 208,
	0, 209, 210, 832, 729, 211, 212, 213, 833, 834,
	836, 835, 837, 838, 839, 214, 215, 424, 216, 371,
	217, 372, 373, 840, 218, 841, 219, 842, 220, 843,
	844, 221, 222, 845, 223, 846, 0, 847, 374, 224,
	226, 225, 227, 375, 376, 848, 730, 849, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 850,
	231, 851, 852, 731, 853, 232, 380, 854, 381, 855,
	0, 233, 234, 235, 236, 237, 382, 383, 733, 856,
	384, 241, 857, 238, 858, 732, 239, 385, 240, 386,
	387, 388, 389, 390, 859, 391, 860, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 861, 249, 248,
	862, 394, 736, 250, 251, 737, 863, 252, 253, 864,
	865, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 866, 867, 868, 396,
	265, 397, 266, 267, 869, 268, 870, 871, 269, 872,
	873, 270, 398, 740, 271, 741, 399, 272, 273, 274,
	275, 276, 277, 278, 874, 279, 400, 280, 401, 281,
	875, 282, 283, 284, 285, 286, 402, 287, 288, 876,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 877, 301, 742, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 878, 314, 315, 404,
	313, 316, 317, 879, 318, 305, 306, 319, 743, 320,
	405, 406, 321, 880, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 881, 329, 882, 330, 331,
	332, 333, 334, 335, 336, 337, 883, 409, 410, 411,
	884, 885, 338, 339, 412, 413, 886, 340, 341, 342,
	343, 887, 888, 344, 345, 346, 347, 889, 348, 890,
	414, 349, 350, 351, 415, 416, 891, 892, 352, 893,
	894, 895, 896, 353, 354, 355, 356, 357, 0, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 816, 2367, 191,
	817, 818, 819, 820, 358, 821, 822, 823, 824, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 825,
	196, 365, 366, 197, 198, 199, 826, 827, 367, 368,
	369, 828, 200, 370, 829, 803, 830, 201, 202, 203,
	0, 205, 206, 207, 204, 831, 208, 0, 209, 210,
	832, 729, 211, 212, 213, 833, 834, 836, 835, 837,
	838, 839, 214, 215, 424, 216, 371, 217, 372, 373,
	840, 218, 841, 219, 842, 220, 843, 844, 221, 222,
	845, 223, 846, 0, 847, 374, 224, 226, 225, 227,
	375, 376, 848, 730, 849, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 850, 231, 851, 852,
	731, 853, 232, 380, 854, 381, 855, 0, 233, 234,
	235, 236, 237, 382, 383, 733, 856, 384, 241, 857,
	238, 858, 732, 239, 385, 240, 386, 387, 388, 389,
	390, 859, 391, 860, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 861, 249, 248, 862, 394, 736,
	250, 251, 737, 863, 252, 253, 864, 865, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 866, 867, 868, 396, 265, 397, 266,
	267, 869, 268, 870, 871, 269, 872, 873, 270, 398,
	740, 271, 741, 399, 272, 273, 274, 275, 276, 277,
	278, 874, 279, 400, 280, 401, 281, 875, 282, 283,
	284, 285, 286, 402, 287, 288, 876, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	877, 301, 742, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 878, 314, 315, 404, 313, 316, 317,
	879, 318, 305, 306, 319, 743, 320, 405, 406, 321,
	880, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 881, 329, 882, 330, 331, 332, 333, 334,
	335, 336, 337, 883, 409, 410, 411, 884, 885, 338,
	339, 412, 413, 886, 340, 341, 342, 343, 887, 888,
	344, 345, 346, 347, 889, 348, 890, 414, 349, 350,
	351, 415, 416, 891, 892, 352, 893, 894, 895, 896,
	353, 354, 355, 356, 357, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 189, 190, 816, 0, 191, 817, 818, 819, 820,
	358, 821, 822, 823, 824, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 825, 196, 365, 366, 197,
	198, 199, 826, 827, 367, 368, 369, 828, 200, 370,
	829, 803, 830, 201, 202, 203, 0, 205, 206, 207,
	204, 831, 208, 0, 209, 210, 832, 729, 211, 212,
	213, 833, 834, 836, 835, 837, 838, 839, 214, 215,
	424, 216, 371, 217, 372, 373, 840, 218, 841, 219,
	842, 220, 843, 844, 221, 222, 845, 223, 846, 0,
	847, 374, 224, 226, 225, 227, 375, 376, 848, 730,
	849, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 850, 231, 851, 852, 731, 853, 232, 380,
	854, 381, 855, 0, 233, 234, 235, 236, 237, 382,
	383, 733, 856, 384, 241, 857, 238, 858, 732, 239,
	385, 240, 386, 387, 388, 389, 390, 859, 391, 860,
	734, 242, 243, 244, 735, 392, 393, 245, 246, 247,
	861, 249, 248, 862, 394, 736, 250, 251, 737, 863,
	252, 253, 864, 865, 254, 0, 255, 257, 738, 256,
	258, 260, 395, 259, 739, 261, 262, 264, 263, 866,
	867, 868, 396, 265, 397, 266, 267, 869, 268, 870,
	871, 269, 872, 873, 270, 398, 740, 271, 741, 399,
	272, 273, 274, 275, 276, 277, 278, 874, 279, 400,
	280, 401, 281, 875, 282, 283, 284, 285, 286, 402,
	287, 288, 876, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 877, 301, 742, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 878,
	314, 315, 404, 313, 316, 317, 879, 318, 305, 306,
	319, 743, 320, 405, 406, 321, 880, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 881, 329,
	882, 330, 331, 332, 333, 334, 335, 336, 337, 883,
	409, 410, 411, 884, 885, 338, 339, 412, 413, 886,
	340, 341, 342, 343, 887, 888, 344, 345, 346, 347,
	889, 348, 890, 414, 349, 350, 351, 415, 416, 891,
	892, 352, 893, 894, 895, 896, 353, 354, 355, 356,
	357, 1573, 0, 667, 656, 657, 654, 655, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 1570, 0, 191, 0, 0, 0, 0, 684, 649,
	0, 0, 0, 192, 193, 194, 359, 699, 361, 700,
	195, 701, 702, 0, 196, 365, 366, 197, 198, 199,
	652, 683, 703, 704, 369, 0, 200, 695, 0, 675,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	676, 677, 679, 0, 678, 680, 214, 215, 424, 216,
	705, 217, 706, 707, 637, 218, 0, 219, 0, 220,
	1571, 0, 698, 222, 0, 223, 0, 0, 0, 640,
	224, 226, 225, 227, 685, 686, 663, 730, 0, 0,
	0, 0, 0, 228, 229, 708, 709, 710, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 696, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 692, 694, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 711, 240,
	712, 713, 714, 715, 716, 0, 674, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 697, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 738, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 634, 0, 664,
	693, 265, 717, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 687, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 688, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 718, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 641,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 681, 318, 305, 306, 319, 743,
	320, 719, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 720, 325, 326, 689, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 721,
	722, 0, 0, 338, 339, 690, 691, 662, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 682, 348,
	0, 414, 349, 350, 351, 415, 723, 1569, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 635,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 631, 632, 1572, 0, 0, 0, 0, 0,
	0, 642, 1567, 0, 0, 0, 619, 645, 667, 656,
	657, 654, 655, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 684, 649, 0, 0, 0, 192, 193,
	194, 359, 699, 361, 700, 195, 701, 702, 0, 196,
	365, 366, 197, 198, 199, 652, 683, 703, 704, 369,
	0, 200, 695, 0, 675, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 676, 677, 679, 0, 678,
	680, 214, 215, 424, 216, 705, 217, 706, 707, 637,
	218, 0, 219, 0, 220, 0, 0, 698, 222, 0,
	223, 0, 0, 0, 640, 224, 226, 225, 227, 685,
	686, 663, 730, 0, 0, 0, 0, 0, 228, 229,
	708, 709, 710, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 696, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 692, 694, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 711, 240, 712, 713, 714, 715, 716,
	0, 674, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 697, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 738, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 634, 0, 664, 693, 265, 717, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 687, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 688, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 718, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 641, 304, 0, 308, 309, 310,
	311, 312, 147, 314, 315, 404, 313, 316, 317, 681,
	318, 305, 306, 319, 743, 320, 719, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 720, 325, 326,
	689, 0, 329, 149, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 721, 722, 0, 0, 338, 339,
	690, 691, 662, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 682, 348, 0, 414, 349, 350, 351,
	965, 723, 0, 0, 352, 0, 0, 0, 141, 353,
	354, 355, 356, 357, 635, 142, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 631, 632, 667,
	656, 657, 654, 655, 646, 0, 1151, 0, 0, 0,
	0, 0, 645, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 684, 649, 0, 0, 0, 192,
	193, 194, 359, 699, 361, 700, 195, 701, 702, 0,
	196, 365, 366, 197, 198, 199, 652, 683, 703, 704,
	369, 0, 200, 695, 0, 675, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 729, 211, 212, 213, 0, 676, 677, 679, 0,
	678, 680, 214, 215, 424, 216, 705, 217, 706, 707,
	637, 218, 0, 219, 0, 220, 0, 0, 698, 222,
	0, 223, 0, 0, 0, 640, 224, 226, 225, 227,
	685, 686, 663, 730, 0, 0, 0, 0, 0, 228,
	229, 708, 709, 710, 0, 230, 0, 231, 0, 0,
	731, 0, 232, 696, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 692, 694, 733, 0, 384, 241, 0,
	238, 0, 732, 239, 711, 240, 712, 713, 714, 715,
	716, 0, 674, 0, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 697, 736,
	250, 251, 737, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 634, 0, 664, 693, 265, 717, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	740, 271, 741, 687, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 688, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 718, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 742, 302, 303, 641, 304, 0, 308, 309,
	310, 311, 312, 147, 314, 315, 404, 313, 316, 317,
	681, 318, 305, 306, 319, 743, 320, 719, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 720, 325,
	326, 689, 0, 329, 149, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 721, 722, 0, 0, 338,
	339, 690, 691, 662, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 682, 348, 0, 414, 349, 350,
	351, 965, 723, 0, 0, 352, 0, 0, 0, 141,
	353, 354, 355, 356, 357, 635, 142, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 631, 632,
	667, 656, 657, 654, 655, 646, 0, 1151, 0, 0,
	0, 0, 0, 645, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 684, 649, 0, 0, 0,
	192, 193, 194, 359, 699, 361, 700, 195, 701, 702,
	1627, 196, 365, 366, 197, 198, 199, 652, 683, 703,
	704, 369, 0, 200, 695, 0, 675, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 729, 211, 212, 213, 0, 676, 677, 679,
	0, 678, 680, 214, 215, 424, 216, 705, 217, 706,
	707, 637, 218, 0, 219, 0, 220, 0, 0, 698,
	222, 0, 223, 0, 0, 0, 640, 224, 226, 225,
	227, 685, 686, 663, 730, 0, 0, 0, 0, 0,
	228, 229, 708, 709, 710, 0, 230, 0, 231, 0,
	1632, 731, 0, 232, 696, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 692, 694, 733, 0, 384, 241,
	0, 238, 0, 732, 239, 711, 240, 712, 713, 714,
	715, 716, 0, 674, 0, 734, 242, 243, 244, 735,
	392, 393, 245, 246, 247, 0, 249, 248, 1628, 697,
	736, 250, 251, 737, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 738, 256, 258, 260, 395, 259, 739,
	261, 262, 264, 263, 634, 0, 664, 693, 265, 717,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 740, 271, 741, 687, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 688, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 718, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 742, 302, 303, 641, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 681, 318, 305, 306, 319, 743, 320, 719, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 720,
	325, 326, 689, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 721, 722, 0, 1629,
	338, 339, 690, 691, 662, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 682, 348, 0, 414, 349,
	350, 351, 415, 723, 0, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 635, 667, 656, 657,
	654, 655, 646, 0, 633, 0, 0, 0, 0, 631,
	632, 0, 0, 189, 190, 0, 0, 191, 642, 0,
	0, 0, 684, 649, 645, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 2289, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 667, 656, 657, 654, 655, 646,
	0, 633, 0, 0, 0, 0, 631, 632, 1212, 0,
	189, 190, 0, 0, 191, 642, 0, 0, 0, 684,
	649, 645, 0, 0, 192, 193, 194, 359, 699, 361,
	700, 195, 701, 702, 0, 196, 365, 366, 197, 198,
	199, 652, 683, 703, 704, 369, 0, 200, 695, 0,
	675, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 729, 211, 212, 213,
	0, 676, 677, 679, 0, 678, 680, 214, 215, 424,
	216, 705, 217, 706, 707, 637, 218, 0, 219, 0,
	220, 0, 0, 698, 222, 0, 223, 0, 0, 0,
	640, 224, 226, 225, 227, 685, 686, 663, 730, 0,
	0, 0, 0, 0, 228, 229, 708, 709, 710, 0,
	230, 0, 231, 0, 0, 731, 0, 232, 696, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 692, 694,
	733, 0, 384, 241, 1477, 238, 0, 732, 239, 711,
	240, 712, 713, 714, 715, 716, 0, 674, 0, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 697, 736, 250, 251, 737, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 634, 0,
	664, 693, 265, 717, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 740, 271, 741, 687, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 688, 280,
	401, 281, 1476, 282, 283, 284, 285, 286, 718, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 742, 302, 303,
	641, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 681, 318, 305, 306, 319,
	743, 320, 719, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 720, 325, 326, 689, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	721, 722, 0, 0, 338, 339, 690, 691, 662, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 682,
	348, 0, 414, 349, 350, 351, 415, 723, 0, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	635, 0, 0, 0, 0, 0, 0, 0, 633, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 0,
	0, 0, 642, 0, 0, 0, 0, 627, 645, 667,
	656, 657, 654, 655, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 684, 649, 0, 0, 0, 192,
	193, 194, 359, 699, 361, 700, 195, 701, 702, 0,
	196, 365, 366, 197, 198, 199, 652, 683, 703, 704,
	369, 0, 200, 695, 0, 675, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 729, 211, 212, 213, 0, 676, 677, 679, 0,
	678, 680, 214, 215, 424, 216, 705, 217, 706, 707,
	637, 218, 0, 219, 0, 220, 0, 0, 698, 222,
	0, 223, 0, 0, 0, 640, 224, 226, 225, 227,
	685, 686, 663, 730, 0, 0, 0, 0, 0, 228,
	229, 708, 709, 710, 0, 230, 0, 231, 0, 0,
	731, 0, 232, 696, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 692, 694, 733, 0, 384, 241, 0,
	238, 0, 732, 239, 711, 240, 712, 713, 714, 715,
	716, 0, 674, 0, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 697, 736,
	250, 251, 737, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 634, 0, 664, 693, 265, 717, 266,
	267, 0, 268, 629, 0, 269, 0, 0, 270, 398,
	740, 271, 741, 687, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 688, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 718, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 742, 302, 303, 641, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	681, 318, 305, 306, 319, 743, 320, 719, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 720, 325,
	326, 689, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 721, 722, 0, 0, 338,
	339, 690, 691, 662, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 682, 348, 0, 414, 349, 350,
	351, 415, 723, 0, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 635, 667, 656, 657, 654,
	655, 646, 0, 633, 0, 0, 0, 0, 631, 632,
	0, 0, 189, 190, 0, 0, 191, 642, 0, 0,
	0, 684, 649, 645, 0, 0, 192, 193, 194, 359,
	699, 361, 700, 195, 701, 702, 0, 196, 365, 366,
	197, 198, 199, 652, 683, 703, 704, 369, 0, 200,
	695, 0, 675, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 676, 677, 679, 0, 678, 680, 214,
	215, 424, 216, 705, 217, 706, 707, 637, 218, 0,
	219, 0, 220, 0, 0, 698, 222, 0, 223, 0,
	0, 0, 640, 224, 226, 225, 227, 685, 686, 663,
	730, 0, 0, 0, 0, 0, 228, 229, 708, 709,
	710, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	696, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	692, 694, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 711, 240, 712, 713, 714, 715, 716, 0, 674,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 697, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	634, 0, 664, 693, 265, 717, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	687, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	688, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	718, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 641, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 681, 318, 305,
	306, 319, 743, 320, 719, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 720, 325, 326, 689, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 721, 722, 0, 0, 338, 339, 690, 691,
	662, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 682, 348, 0, 414, 349, 350, 351, 415, 723,
	2138, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 635, 667, 656, 657, 654, 655, 646, 0,
	633, 0, 0, 0, 0, 631, 632, 0, 0, 189,
	190, 0, 0, 191, 642, 0, 0, 0, 684, 649,
	645, 0, 0, 192, 193, 194, 359, 699, 361, 700,
	195, 701, 702, 0, 196, 365, 366, 197, 198, 199,
	652, 683, 703, 704, 369, 0, 200, 695, 0, 675,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	676, 677, 679, 0, 678, 680, 214, 215, 424, 216,
	705, 217, 706, 707, 637, 218, 0, 219, 0, 220,
	0, 0, 698, 222, 0, 223, 0, 0, 0, 640,
	224, 226, 225, 227, 685, 686, 663, 730, 0, 0,
	0, 0, 0, 228, 229, 708, 709, 710, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 696, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 692, 694, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 711, 240,
	712, 713, 714, 715, 716, 0, 674, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 697, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 738, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 634, 0, 664,
	693, 265, 717, 266, 267, 0, 268, 629, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 687, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 688, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 718, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 641,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 681, 318, 305, 306, 319, 743,
	320, 719, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 720, 325, 326, 689, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 721,
	722, 0, 0, 338, 339, 690, 691, 662, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 682, 348,
	0, 414, 349, 350, 351, 415, 723, 0, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 635,
	667, 656, 657, 654, 655, 646, 0, 633, 0, 0,
	0, 0, 631, 632, 0, 0, 189, 190, 0, 0,
	191, 642, 0, 0, 0, 684, 649, 645, 0, 0,
	192, 193, 194, 359, 699, 361, 700, 195, 701, 702,
	0, 196, 365, 366, 197, 198, 199, 652, 683, 703,
	704, 369, 0, 200, 695, 0, 675, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 729, 211, 212, 213, 0, 676, 677, 679,
	0, 678, 680, 214, 215, 424, 216, 705, 217, 706,
	707, 637, 218, 0, 219, 0, 220, 0, 0, 698,
	222, 0, 223, 0, 0, 0, 640, 224, 226, 225,
	227, 685, 686, 663, 730, 0, 0, 0, 0, 0,
	228, 229, 708, 709, 710, 0, 230, 0, 231, 0,
	0, 731, 0, 232, 696, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 692, 694, 733, 0, 384, 241,
	0, 238, 0, 732, 239, 711, 240, 712, 713, 714,
	715, 716, 0, 674, 0, 734, 242, 243, 244, 735,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 697,
	736, 250, 251, 737, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 738, 256, 258, 260, 395, 259, 739,
	261, 262, 264, 263, 634, 0, 664, 693, 265, 717,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 740, 271, 741, 687, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 688, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 718, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 742, 302, 303, 641, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 681, 318, 305, 306, 319, 743, 320, 719, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 720,
	325, 326, 689, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 721, 722, 0, 0,
	338, 339, 690, 691, 662, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 682, 348, 0, 414, 349,
	350, 351, 415, 723, 0, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 635, 667, 656, 657,
	654, 655, 646, 0, 633, 0, 0, 0, 0, 631,
	632, 1212, 0, 189, 190, 0, 0, 191, 642, 0,
	0, 0, 684, 649, 645, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 1632, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1678, 645, 667, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1641, 645, 667, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1639, 645, 667, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1623, 645, 667, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1611, 645, 667, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1609, 645, 1601, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 1604, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 1605, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 1606, 1603, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	1607, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 1602, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1598, 645, 1601, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	1604, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 1605, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 1606, 1603, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 1607, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 1602, 357, 635, 667,
	656, 657, 654, 655, 646, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 189, 190, 0, 0, 191,
	642, 0, 0, 0, 684, 649, 645, 0, 0, 192,
	193, 194, 359, 699, 361, 700, 195, 701, 702, 0,
	196, 365, 366, 197, 198, 199, 652, 683, 703, 704,
	369, 0, 200, 695, 0, 675, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 729, 211, 212, 213, 0, 676, 677, 679, 0,
	678, 680, 214, 215, 424, 216, 705, 217, 706, 707,
	637, 218, 0, 219, 0, 220, 0, 0, 698, 222,
	0, 223, 0, 0, 0, 640, 224, 226, 225, 227,
	685, 686, 663, 730, 0, 0, 0, 0, 0, 228,
	229, 708, 709, 710, 0, 230, 0, 231, 0, 0,
	731, 0, 232, 696, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 692, 694, 733, 0, 384, 241, 0,
	238, 0, 732, 239, 711, 240, 712, 713, 714, 715,
	716, 0, 674, 0, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 697, 736,
	250, 251, 737, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 634, 0, 664, 693, 265, 717, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	740, 271, 741, 687, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 688, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 718, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 742, 302, 303, 641, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	681, 318, 305, 306, 319, 743, 320, 719, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 720, 325,
	326, 689, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 721, 722, 0, 0, 338,
	339, 690, 691, 662, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 682, 348, 0, 414, 349, 350,
	351, 415, 723, 0, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 635, 667, 656, 657, 654,
	655, 646, 0, 633, 0, 0, 0, 0, 631, 632,
	0, 0, 189, 190, 1464, 1155, 191, 642, 0, 0,
	0, 684, 649, 645, 0, 0, 192, 193, 194, 359,
	699, 361, 700, 195, 701, 702, 0, 196, 365, 366,
	197, 198, 199, 652, 683, 703, 704, 369, 0, 200,
	695, 0, 675, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 676, 677, 679, 0, 678, 680, 214,
	215, 424, 216, 705, 217, 706, 707, 637, 218, 0,
	219, 0, 220, 0, 0, 698, 222, 0, 223, 0,
	0, 0, 640, 224, 226, 225, 227, 685, 686, 663,
	730, 0, 0, 0, 0, 0, 228, 229, 708, 709,
	710, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	696, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	692, 694, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 711, 240, 712, 713, 714, 715, 716, 0, 674,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 697, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	634, 0, 664, 693, 265, 717, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	687, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	688, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	718, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 641, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 681, 318, 305,
	306, 319, 743, 320, 719, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 720, 325, 326, 689, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 721, 722, 0, 0, 338, 339, 690, 691,
	662, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 682, 348, 0, 414, 349, 350, 351, 415, 723,
	0, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 635, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 0, 0, 0, 631, 632, 0, 0, 0,
	0, 0, 0, 0, 642, 0, 0, 0, 0, 908,
	645, 667, 656, 657, 654, 655, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 684, 649, 0, 0,
	0, 192, 193, 194, 359, 699, 361, 700, 195, 701,
	702, 0, 196, 365, 366, 197, 198, 199, 652, 683,
	703, 704, 369, 0, 200, 695, 0, 675, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 676, 677,
	679, 0, 678, 680, 214, 215, 424, 216, 705, 217,
	706, 707, 637, 218, 0, 219, 0, 220, 0, 0,
	698, 222, 0, 223, 0, 0, 0, 640, 224, 226,
	225, 227, 685, 686, 663, 730, 0, 0, 0, 0,
	0, 228, 229, 708, 709, 710, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 696, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 692, 694, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 711, 240, 712, 713,
	714, 715, 716, 0, 674, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	697, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 634, 0, 664, 693, 265,
	717, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 687, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 688, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 718, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 641, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 681, 318, 305, 306, 319, 743, 320, 719,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	720, 325, 326, 689, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 721, 722, 0,
	0, 338, 339, 690, 691, 662, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 682, 348, 0, 414,
	349, 350, 351, 415, 723, 0, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 635, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 0, 0,
	631, 632, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 0, 0, 0, 906, 645, 667, 656, 657, 654,
	655, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 684, 649, 0, 0, 0, 192, 193, 194, 359,
	699, 361, 700, 195, 701, 702, 0, 196, 365, 366,
	197, 198, 199, 652, 683, 703, 704, 369, 0, 200,
	695, 0, 675, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 676, 677, 679, 0, 678, 680, 214,
	215, 424, 216, 705, 217, 706, 707, 637, 218, 0,
	219, 0, 220, 0, 0, 698, 222, 0, 223, 0,
	0, 0, 640, 224, 226, 225, 227, 685, 686, 663,
	730, 0, 0, 0, 0, 0, 228, 229, 708, 709,
	710, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	696, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	692, 694, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 711, 240, 712, 713, 714, 715, 716, 0, 674,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 697, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	634, 0, 664, 693, 265, 717, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	687, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	688, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	718, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 641, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 681, 318, 305,
	306, 319, 743, 320, 719, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 720, 325, 326, 689, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 721, 722, 0, 0, 338, 339, 690, 691,
	662, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 682, 348, 0, 414, 349, 350, 351, 415, 723,
	0, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 635, 667, 656, 657, 654, 655, 646, 0,
	633, 0, 0, 0, 0, 631, 632, 0, 0, 189,
	190, 0, 0, 191, 642, 0, 0, 0, 684, 649,
	645, 0, 0, 192, 193, 194, 359, 699, 361, 700,
	195, 701, 702, 0, 196, 365, 366, 197, 198, 199,
	652, 683, 703, 704, 369, 0, 200, 695, 0, 675,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	676, 677, 679, 0, 678, 680, 214, 215, 424, 216,
	705, 217, 706, 707, 637, 218, 0, 219, 0, 220,
	0, 0, 698, 222, 0, 223, 0, 0, 0, 640,
	224, 226, 225, 227, 685, 686, 663, 730, 0, 0,
	0, 0, 0, 228, 229, 708, 709, 710, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 696, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 692, 694, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 711, 240,
	712, 713, 714, 715, 716, 0, 674, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 697, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 2705, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 634, 0, 664,
	693, 265, 717, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 687, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 688, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 718, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 641,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 681, 318, 305, 306, 319, 743,
	320, 719, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 720, 325, 326, 689, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 721,
	722, 0, 0, 338, 339, 690, 691, 662, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 682, 348,
	0, 414, 349, 350, 351, 415, 723, 0, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 635,
	667, 656, 657, 654, 655, 646, 0, 633, 0, 0,
	0, 0, 631, 632, 0, 0, 189, 190, 0, 0,
	191, 642, 0, 0, 0, 684, 649, 645, 0, 0,
	192, 193, 194, 359, 699, 361, 700, 195, 701, 702,
	0, 196, 365, 366, 197, 198, 199, 652, 683, 703,
	704, 369, 0, 200, 695, 0, 675, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 729, 211, 212, 2624, 0, 676, 677, 679,
	0, 678, 680, 214, 215, 424, 216, 705, 217, 706,
	707, 637, 218, 0, 219, 0, 220, 0, 0, 698,
	222, 0, 223, 0, 0, 0, 640, 224, 226, 225,
	227, 685, 686, 663, 730, 0, 0, 0, 0, 0,
	228, 229, 708, 709, 710, 0, 230, 0, 231, 0,
	0, 731, 0, 232, 696, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 692, 694, 733, 0, 384, 241,
	0, 238, 0, 732, 239, 711, 240, 712, 713, 714,
	715, 716, 0, 674, 0, 734, 242, 243, 244, 735,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 697,
	736, 250, 251, 737, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 738, 256, 258, 260, 395, 259, 739,
	261, 262, 264, 263, 634, 0, 664, 693, 265, 717,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 740, 271, 741, 687, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 688, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 718, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 742, 302, 303, 641, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 681, 318, 305, 306, 319, 743, 320, 719, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 720,
	325, 326, 689, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 721, 722, 0, 0,
	338, 339, 690, 691, 662, 340, 341, 2623, 343, 0,
	0, 344, 345, 346, 347, 682, 348, 0, 414, 349,
	350, 351, 415, 723, 0, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 635, 667, 656, 657,
	654, 655, 646, 0, 633, 0, 0, 0, 0, 631,
	632, 0, 0, 189, 190, 0, 0, 191, 642, 0,
	0, 0, 684, 649, 645, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 667, 656, 657, 654, 655, 646,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	189, 190, 0, 0, 191, 642, 0, 0, 0, 684,
	649, 645, 0, 0, 192, 193, 194, 2622, 699, 361,
	700, 195, 701, 702, 0, 196, 365, 366, 197, 198,
	199, 652, 683, 703, 704, 369, 0, 200, 695, 0,
	675, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 729, 211, 212, 2624,
	0, 676, 677, 679, 0, 678, 680, 214, 215, 424,
	216, 705, 217, 706, 707, 637, 218, 0, 219, 0,
	220, 0, 0, 698, 222, 0, 223, 0, 0, 0,
	640, 224, 226, 225, 227, 685, 686, 663, 730, 0,
	0, 0, 0, 0, 228, 229, 708, 709, 710, 0,
	230, 0, 231, 0, 0, 731, 0, 232, 696, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 692, 694,
	733, 0, 384, 241, 0, 238, 0, 732, 239, 711,
	240, 712, 713, 714, 715, 716, 0, 674, 0, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 697, 736, 250, 251, 737, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 634, 0,
	664, 693, 265, 717, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 740, 271, 741, 687, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 688, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 718, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 742, 302, 303,
	641, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 681, 318, 305, 306, 319,
	743, 320, 719, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 720, 325, 326, 689, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	721, 722, 0, 0, 338, 339, 690, 691, 662, 340,
	341, 2623, 343, 0, 0, 344, 345, 346, 347, 682,
	348, 0, 414, 349, 350, 351, 415, 723, 0, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	635, 667, 656, 657, 654, 655, 646, 0, 633, 0,
	0, 0, 0, 631, 632, 0, 0, 189, 190, 0,
	0, 191, 642, 0, 0, 0, 684, 649, 645, 0,
	0, 192, 193, 194, 359, 699, 361, 700, 195, 701,
	702, 0, 196, 365, 366, 197, 198, 199, 652, 683,
	703, 704, 369, 0, 200, 695, 0, 675, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 676, 677,
	679, 0, 678, 680, 214, 215, 424, 216, 705, 217,
	706, 707, 0, 218, 0, 219, 0, 220, 0, 0,
	698, 222, 0, 223, 0, 0, 0, 640, 224, 226,
	225, 227, 685, 686, 663, 730, 0, 0, 0, 0,
	0, 228, 229, 708, 709, 710, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 696, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 692, 694, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 711, 240, 712, 713,
	714, 715, 716, 0, 674, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	697, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 0, 0, 664, 693, 265,
	717, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 687, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 688, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 718, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 1621, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 681, 318, 305, 306, 319, 743, 320, 719,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	720, 325, 326, 689, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 721, 722, 0,
	0, 338, 339, 690, 691, 662, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 682, 348, 0, 414,
	349, 350, 351, 415, 723, 0, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 667, 656, 657,
	654, 655, 646, 0, 0, 1619, 0, 0, 0, 0,
	1617, 1618, 0, 189, 190, 0, 0, 191, 0, 1620,
	0, 0, 684, 649, 0, 645, 0, 192, 193, 194,
	0, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 2624, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 0, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 0, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 0, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 2623, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 632, 0, 189,
	190, 0, 0, 191, 0, 642, 0, 0, 684, 0,
	0, 645, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 683, 367, 368, 369, 0, 200, 695, 0, 675,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	676, 677, 679, 0, 678, 680, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 685, 686, 0, 730, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 696, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 692, 694, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 697, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 738, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 0, 0, 0,
	693, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 687, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 688, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 681, 318, 305, 306, 319, 743,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 689, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 690, 691, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 682, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 0, 352,
	962, 0, 799, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 2237, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 803, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 730, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 147, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 743, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 149, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 965, 416, 0, 0, 352, 0,
	0, 186, 141, 353, 354, 355, 356, 357, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	118, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 782, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 147, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 149, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 965, 416, 0, 0, 352, 619, 0,
	186, 141, 353, 354, 355, 356, 357, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 776, 0, 1234,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 147, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 149, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 965, 416, 0, 0, 352, 1973, 0, 186,
	141, 353, 354, 355, 356, 357, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 118, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 782, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 0, 352, 775, 0, 186, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 776, 0, 781, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 782, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 0, 352, 0, 0, 186, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 776, 0, 781, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 782, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 0, 0, 352, 0, 0, 186, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 776, 0, 781, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 0, 352, 0, 0, 0, 186, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 1272, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 0, 352, 0, 0, 186, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 1784, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	0, 352, 0, 0, 186, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 2153, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	667, 656, 657, 654, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 1237, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 699, 361, 700, 195, 701, 702,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 703,
	704, 369, 0, 200, 370, 0, 803, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 729, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 705, 217, 706,
	707, 0, 218, 0, 219, 0, 220, 0, 0, 698,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 663, 730, 0, 0, 0, 0, 0,
	228, 229, 708, 709, 710, 0, 230, 0, 231, 0,
	0, 731, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 733, 0, 384, 241,
	0, 238, 0, 732, 239, 711, 240, 712, 713, 714,
	715, 716, 0, 674, 0, 734, 242, 243, 244, 735,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	736, 250, 251, 737, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 738, 256, 258, 260, 395, 259, 739,
	261, 262, 264, 263, 0, 0, 664, 396, 265, 717,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 740, 271, 741, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 718, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 742, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 743, 320, 719, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 720,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 721, 722, 0, 0,
	338, 339, 412, 413, 662, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 723, 0, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 1018, 0, 799, 798,
	0, 0, 0, 796, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 803, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 730, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 738, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 743, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 957, 0, 799, 798, 0, 0,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 803, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	730, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	956, 383, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 743, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 923, 0, 799, 798, 0, 0, 0, 796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	803, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 729, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 730, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 731, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 922, 383,
	733, 0, 384, 241, 0, 238, 0, 732, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 736, 250, 251, 737, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 740, 271, 741, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 742, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	743, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	792, 0, 799, 798, 0, 0, 0, 796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 803, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 730, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 794, 383, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 743, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 0, 508, 352, 186,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 182, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 181, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 179, 352, 186, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	185, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 182, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 181, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	799, 798, 352, 0, 0, 796, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 185, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 803, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 729, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 730, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 731, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 733, 0, 384, 241,
	0, 238, 0, 732, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 734, 242, 243, 244, 735,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	736, 250, 251, 737, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 738, 256, 258, 260, 395, 259, 739,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 740, 271, 741, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 742, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 743, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 186, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 182,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 181,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 799, 798,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 185, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 803, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 730, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 738, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 743, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 186, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 799, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 185, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 803, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	730, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 743, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	186, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 1698, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 1696, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 1744, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 1701,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	1742, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 1700, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	1743, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 186, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 1698, 200, 370, 0,
	0, 1693, 201, 202, 203, 0, 205, 206, 207, 204,
	1696, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 1701, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 1692, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 1700, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 1699, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 939,
	352, 186, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 782, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 788, 352, 186, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 790, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 782, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 784, 352, 186, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 786,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	782, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	437, 352, 186, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	436, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 435,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 186, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 1681, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	186, 2307, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 186, 2307, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	2304, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 186, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 782, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 1443, 352, 186, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	1441, 352, 186, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 186, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 189, 190, 1423, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 534, 352, 186, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 997, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 536, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 531, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 1300, 352,
	186, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 1299, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 534, 352, 186, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 997, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 536, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 531, 410, 411, 0, 0, 338, 998, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 0, 534, 352, 186, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 525, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 536, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 981, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 531,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 954,
	352, 186, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 953, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 950, 352, 186, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 949, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 947, 352, 186, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 946,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	943, 352, 186, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 942, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 186, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 189, 190, 931, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 929, 352, 186, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 928, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 925, 352,
	186, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 920, 352, 186, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 919, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 0, 915, 352, 186, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 917, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 806,
	352, 186, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 808, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 804, 352, 186, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 534, 352, 186, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 525, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 524, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 536, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 526, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 527, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	531, 410, 411, 0, 0, 338, 529, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	516, 352, 186, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 517, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 0, 514, 352, 186,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 506, 352, 186, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 456, 352, 186, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 186, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 186, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 2020, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 186, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 2018,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 186,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 2007, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 186, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 517, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 186, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 1310, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 0,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 186, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 759, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 186, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 0, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 0, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 0, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129, 1130,
	0, 0, 0, 0, 1106, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 1132, 0,
	0, 0, 0, 1914, 1915, 0, 1932, 1933, 1934, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 1088, 1089, 1110, 1118, 1119, 1120,
	1128, 1129, 1130, 1107, 0, 0, 0, 1106, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 1132, 0, 0, 0, 0, 0, 0, 1929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 1110,
	0, 1113, 1114, 1115, 1116, 0, 1107, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1125, 1133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1920, 0, 0, 0, 0, 0, 0, 0,
	1131, 0, 0, 0, 1113, 1114, 1115, 1116, 0, 0,
	0, 0, 0, 1096, 1936, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1935, 0, 1125, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 1131, 0, 0, 0, 1930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 1931, 0, 0, 0, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1126, 1106, 0, 0, 0, 1121,
	1105, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127,
	0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098,
	0, 1090, 0, 0, 0, 0, 0, 1110, 1954, 0,
	0, 0, 0, 0, 1107, 0, 1926, 1927, 1928, 0,
	0, 0, 0, 1925, 1923, 1924, 1916, 1917, 1918, 1919,
	1921, 1922, 0, 0, 1124, 0, 0, 1102, 1103, 1109,
	1108, 1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094,
	1095, 1097, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 1906, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 2593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	2543, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 2497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	2467, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 2462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	2458, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 2388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	2354, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 2353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	2318, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 2156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	2132, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 1559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 2656, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 1125, 1133, 1121, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1123,
	0, 0, 1110, 0, 0, 0, 1111, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 1876, 0,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2655, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 1946, 1117,
	0, 1945, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1131, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 1123, 1106, 0, 0, 0, 1121,
	0, 1111, 0, 0, 1849, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1090, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 1850, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 1126, 0, 0,
	0, 1096, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 1111, 1124, 0, 0,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1657, 0, 0, 0, 0,
	0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129, 1130,
	0, 0, 0, 0, 1106, 0, 0, 0, 1121, 1117,
	0, 0, 1656, 0, 0, 1091, 0, 0, 1132, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 1126, 0, 0, 0, 1110, 0, 1105, 0,
	0, 1088, 1089, 1107, 1118, 1119, 1120, 1128, 1129, 1130,
	0, 0, 0, 0, 1106, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 1113, 1114, 1115, 1116, 0, 1110, 0, 0, 0,
	1096, 0, 1124, 1107, 0, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 1125, 1133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 1114, 1115, 1116, 0, 0, 0, 1123, 0,
	1096, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1125, 1133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	1131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 1117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 616, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 1105, 0, 0,
	1088, 1089, 0, 1118, 1119, 1120, 1128, 1129, 1130, 0,
	0, 0, 0, 1106, 0, 0, 0, 1121, 1117, 0,
	0, 0, 0, 0, 1091, 0, 0, 1132, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 1126, 0, 0, 0, 1110, 0, 1105, 0, 0,
	0, 1124, 1107, 0, 1102, 1103, 1109, 1108, 1104, 1127,
	0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1114, 1115, 1116, 0, 0, 0, 0, 0, 1096,
	0, 1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127,
	0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098,
	1125, 1133, 0, 0, 0, 0, 0, 0, 1088, 1089,
	0, 1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 1131,
	0, 1106, 0, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 1132, 0, 1123, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	1107, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 1114,
	1115, 1116, 1112, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 1952, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 1105, 0, 1125, 1133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1131, 2136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 1122,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0,
	1106, 0, 0, 0, 1121, 1117, 0, 0, 1947, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 1126, 0,
	0, 0, 1110, 0, 1105, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 1124, 0,
	0, 1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099,
	1100, 1092, 1093, 1094, 1095, 1097, 1098, 1125, 1133, 0,
	0, 0, 0, 0, 0, 1088, 1089, 0, 1118, 1119,
	1120, 1128, 1129, 1130, 0, 0, 1131, 0, 1106, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 1132, 0, 1123, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 1107, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 1114, 1115, 1116, 1112,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 1105, 0, 1125, 1133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
	1102, 1103, 1109, 1108, 1104, 1127, 1122, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0,
	0, 1912, 0, 0, 1088, 1089, 0, 1118, 1119, 1120,
	1128, 1129, 1130, 0, 0, 0, 0, 1106, 0, 0,
	0, 1121, 1117, 0, 0, 1905, 0, 0, 1091, 0,
	0, 1132, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 1126, 0, 0, 0, 1110,
	0, 1105, 0, 0, 1088, 1089, 1107, 1118, 1119, 1120,
	1128, 1129, 1130, 0, 0, 0, 0, 1106, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 1132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 1113, 1114, 1115, 1116, 0, 1110,
	0, 0, 0, 1096, 0, 1124, 1107, 0, 1102, 1103,
	1109, 1108, 1104, 1127, 0, 1101, 1099, 1100, 1092, 1093,
	1094, 1095, 1097, 1098, 1125, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 1114, 1115, 1116, 0, 0,
	0, 1123, 0, 1096, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1125, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	1105, 0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128,
	1129, 1130, 0, 0, 0, 0, 1106, 0, 0, 0,
	1121, 1117, 0, 0, 0, 0, 0, 1091, 0, 0,
	1132, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 1126, 0, 0, 0, 1110, 0,
	1105, 0, 0, 0, 1124, 1107, 0, 1102, 1103, 1109,
	1108, 1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094,
	1095, 1097, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 1114, 1115, 1116, 0, 0, 0,
	0, 0, 1096, 0, 1124, 0, 0, 1102, 1103, 1109,
	1108, 1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094,
	1095, 1097, 1098, 1125, 1133, 1088, 1089, 0, 1118, 1119,
	1120, 1128, 1129, 1130, 0, 0, 0, 0, 1106, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 1132, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 1088, 1089,
	1110, 1118, 1119, 1120, 1128, 1129, 1130, 1107, 0, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1117, 0, 0, 1110, 0, 1113, 1114, 1115, 1116, 0,
	1107, 0, 0, 0, 1096, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1126, 0, 1125, 1133, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 0, 0, 0, 1113, 1114,
	1115, 1116, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 0, 0, 1125, 1133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1124, 0, 0, 1102, 1103, 1109, 1108,
	1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095,
	1097, 1098, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1126, 0,
	1355, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 0, 0, 1102, 1103,
	1109, 1108, 1104, 1127, 0, 1101, 1099, 1100, 1092, 1093,
	1094, 1095, 1097, 1098, 1363, 1352, 1382, 1341, 1373, 1372,
	0, 0, 1343, 1342, 0, 0, 0, 0, 0, 1384,
	1383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 0,
	0, 1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099,
	1100, 1092, 1093, 1094, 1095, 1097, 1098, 1378, 0, 1370,
	1369, 0, 0, 0, 0, 0, 0, 0, 0, 1368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1367, 1365, 1366, 0, 0, 0, 0, 0,
	0, 0, 555, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 0,
	0, 0, 560, 0, 0, 1356, 1354, 1357, 1358, 1359,
	1360, 1361, 0, 1381, 0, 558, 0, 0, 0, 0,
	1345, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 0, 0,
	0, 1355, 561, 0, 0, 0, 0, 1347, 0, 0,
	567, 568, 0, 0, 0, 577, 0, 0, 0, 1371,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 582,
	562, 0, 0, 0, 0, 1363, 1352, 1382, 1341, 1373,
	1372, 0, 0, 1343, 1342, 0, 0, 0, 0, 0,
	1384, 1383, 580, 0, 1364, 0, 0, 0, 1484, 1482,
	1483, 1486, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1378, 0,
	1370, 1369, 0, 0, 564, 565, 0, 0, 1362, 1349,
	1368, 0, 0, 0, 0, 0, 0, 0, 0, 1386,
	0, 0, 571, 0, 0, 0, 0, 566, 573, 0,
	0, 0, 1346, 1367, 1365, 1366, 1379, 1380, 0, 0,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 0, 0, 1350, 1351,
	0, 0, 0, 1385, 0, 0, 1356, 1354, 1357, 1358,
	1359, 1360, 1361, 0, 1381, 0, 0, 0, 0, 0,
	0, 1345, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1371, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 574, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1364, 0, 0, 0, 0,
	575, 0, 0, 0, 579, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 572, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 1362,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1386, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 1379, 1380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	0, 0, 0, 0, 1385,
}
var sqlPact = [...]int{

	265, -1000, -6, -1000, -1000, -1000, 180, -1000, -1000, -1000,
	-1000, 177, 176, 175, -1000, 164, 163, 162, 160, 157,
	156, 154, 152, 150, 147, 139, -1000, 138, -1000, -1000,
	-1000, -1000, 137, 136, 135, -1000, 132, 1288, 23502, 130,
	129, 1439, -1000, 36993, 126, -1000, 1256, 27298, 1020, 1385,
	-1000, 124, 1336, 36649, 3533, 1651, 1202, 1806, 36302, 23155,
	1805, 1503, 35955, -1000, -1000, 35608, 115, 111, 110, 108,
	106, -1000, -1000, 35261, 105, 102, 99, 93, 90, 88,
	87, 86, 85, 84, 83, 82, 81, 78, -1000, 76,
	74, 73, -1000, 44570, 72, 71, 63, 1192, 62, 59,
	56, 54, -1000, -1000, 1000, 53, 52, 47, 42, 38,
	37, 104, 36, 35, 34, 29, -1000, 998, 623, 2142,
	9425, 1160, 1158, 1134, 1109, 1129, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39057, 36993, 22, -29, 20, -1000, 2240, 732, 19274,
	265, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26951, 26604, 22808, 34914, 34567, 6841, 844, -1000,
	-13, 24878, 36993, -1000, 182, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15032, 14647, 618, 182, -1000, -1000, -1000, 34220, 33873, 22450,
	33526, 1658, 33179, -1000, -1000, 32832, -1000, -1000, 2001, 1815,
	1814, 26257, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	32488, 32141, 31794, 31447, 22092, 558, -1000, -1000, -1000, 17878,
	-1000, -1000, -1000, -1000, 19, -1000, 18, 17, -1000, 15,
	14, 13, 11, 9, 8, -1000, 7, 5, -1000, 4,
	3, -1000, 2, 0, 1295, 1003, 1001, 31100, 955, 1400,
	-1000, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 36993, -1000, 16103, -1000, 557, -1000, 1822, -1000, 16103,
	-1000, 1398, -1000, -1000, -1000, -1000, -1000, 36993, -1000, -1000,
	-1000, -1000, -1000, -1000, 2394, 1251, 556, 30753, -1000, 1898,
	-1000, 681, 865, -1000, -1000, -1000, 10139, 185, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2545, 21734, 1496,
	2156, 1991, 2393, 1570, 1950, 1944, 1896, 1832, 1830, 2388,
	1035, 2387, 1946, 1102, 2383, 1827, 1409, 751, 2379, 1798,
	1796, -1000, -1000, -1000, -1000, 1024, -1000, -1000, -1000, 28674,
	-1000, -1000, -1000, -1000, -1000, -1000, 889, 992, -1000, -1000,
	-1000, -1000, -1000, -1000, 998, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1507, 2131, 2131, 2131, 2201, 360, 339, -1000,
	104, -1000, 1484, -1000, 1243, -1000, -1000, -1000, 43724, -1000,
	-1000, 16103, 16103, 16103, 16103, 16103, 1290, -1000, 591, -1000,
	554, 552, 7955, -1000, -1000, 2365, -1000, -1000, -1000, 353,
	-1000, -1000, 16103, 182, -1000, -1000, -1000, -1000, 549, 2373,
	-1000, 673, -1000, -1000, -1000, 663, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1875, 544, 543, 534, -1000,
	531, -1000, -1000, 528, 527, 525, 522, 521, 518, 515,
	514, 513, 512, 511, 510, 509, 508, 506, 1196, -1000,
	709, -1000, -1000, 709, 709, -1000, 490, 490, 492, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 490, -1000, -1000,
	-1000, 655, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 505, 1366, -1000, -1000, 1366, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 843, 38369, -19, 36993,
	-1000, 501, -19, -1000, -1000, 499, -1000, 10496, 10496, -1000,
	-1000, -1000, 16103, -1000, 2082, -1000, 2915, -191, 374, 649,
	-1000, 18227, 21020, -1000, -1000, 1476, 2030, 748, -1000, 1086,
	2028, 600, -1000, 693, 2026, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1209, -1000, 1326, 2023, -122,
	1934, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 23846, 24878, -13,
	-14, -1000, -1000, -1000, 6485, 43724, -1000, 43724, -1000, 940,
	19972, 182, -1000, -1000, -1000, -1000, 498, 1475, 2682, 1473,
	-1000, 688, 1471, -1000, 382, -1000, 30406, 688, 1468, -1000,
	-1000, -1000, 28674, -1000, 36993, -1000, 36993, -1000, 977, -1000,
	38713, 118, 2017, -1000, -1000, 118, 2014, -1000, 114, 2006,
	-1000, -1000, 1367, 2005, -1000, -91, 2004, -1000, -1000, -1000,
	16103, -32, -1000, -1000, -1000, 732, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 30059, 24190, 2465, 573, 43724, 2266, 44627, 23846, 43724,
	24190, -1000, -1000, 36993, -1000, 16103, -1000, 2265, 1478, -23,
	-1000, -1000, -1000, -1000, -1000, 1536, 1559, 813, 1469, 10139,
	10139, 2086, -1000, 184, 6841, -1000, -1000, -1000, -1000, 29712,
	-1000, -1000, -1000, 1241, 36993, -1000, -1000, 1840, -1000, 24190,
	36993, -1000, 36993, -1000, 36993, -1000, 36993, -1000, 36993, -1000,
	-1000, -1000, -1000, -1000, 712, -1000, 1837, -1000, -1000, 36993,
	-1000, 1514, -1000, -1000, -1000, 29368, 29021, -1000, 1046, 881,
	-1000, -1000, 120, -1000, 36993, 2137, 679, -1000, 1507, 1580,
	1829, 760, 1369, 1616, 14262, 1566, 16103, 104, -1000, -1000,
	104, 104, 9040, -1000, -1000, -1000, 36993, -1000, 44436, 44627,
	6841, 858, 16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103,
	16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103,
	16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103, 16103,
	16103, 16103, 16103, 16103, 1402, 16103, 832, 16103, 16103, 16103,
	16103, 1002, 1188, 425, 1233, -1000, 2312, 2312, 2312, 44095,
	44095, 468, 591, -1000, 16103, -1000, 131, 16103, 339, 41812,
	-16, 7584, -1000, -1000, -1000, 13905, 703, 43724, 182, 7199,
	-1000, 2358, 1052, 1887, 1688, 497, 626, 625, 587, 584,
	16103, 16103, 13548, 13163, 12778, 16817, 12393, 16103, 8326, 16103,
	16103, 16103, 16103, 12008, 11623, -1000, 496, -1000, -1000, -1000,
	-1000, 2352, -1000, -1000, 2350, -1000, 855, 824, 2347, -1000,
	-23, -1000, 38369, -1000, 36993, -19, 2263, 36993, 16103, 149,
	-1000, 42621, -1000, 149, -35, 43724, 1629, 1627, 19623, 1441,
	1299, 1299, 1299, -1000, 495, 585, 649, 5762, 11238, -1000,
	27642, 1303, 223, 333, 5221, 2082, -1000, 36993, -53, 1098,
	-1000, 25910, 2121, 2107, 2114, 28674, 2213, 131, 1929, 1794,
	-1000, 6841, 830, 28674, 1248, 23846, 2134, 823, 2204, 131,
	1908, 1791, 820, 36993, 6841, 2127, 603, -1000, 36993, -1000,
	-1000, -1000, 1784, -38, -1000, -1000, 25566, 2258, 1992, -1000,
	2682, -1000, 36993, 2199, 1006, 1016, 1006, 1628, 1006, 989,
	-1000, 1979, -1000, 1239, -1000, 1976, 2237, 36993, 1397, 1462,
	-1000, -1000, 874, 1973, 697, 241, 2228, 241, 20322, -1000,
	36993, -1000, 36993, -1000, -1000, 36993, -1000, 36993, -1000, 36993,
	36993, -1000, 36993, 23846, 23846, -44, 4091, 25222, 819, -1000,
	734, 25566, 1114, -52, -1000, 821, -1000, -1000, -1000, -1000,
	299, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 492, 1196, 490,
	490, 490, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 655,
	-1000, -1000, 709, 709, 709, -1000, -1000, -46, 1767, 659,
	-57, 777, -23, -1000, 1366, -1000, 1013, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2371, -1000, 2318, -1000, -1000, 2341, -28, -1000, -28, -1000,
	6841, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36993, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, 36993, 36993, 36993, -1000, 28674, 690,
	1836, -1000, 2138, 1580, 1829, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 43724, -1000, 377, -1000, -1000, 43724, 1143,
	1640, -1000, 1640, -30, -1000, 42392, 1619, 36993, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 677,
	707, 707, 919, 919, 919, 919, 2353, 352, 1088, 268,
	4842, 4842, 4842, 4842, 4842, 4842, 4842, 4842, 336, 415,
	415, 336, 336, 336, 336, 336, 4842, 4842, 4842, 44095,
	43953, 4630, 16103, 16103, 818, 1182, 425, 4630, 16103, 4630,
	4630, 4630, 4630, -1000, 1323, -1000, -1000, -1000, -1000, 1715,
	480, 16817, 16817, -1000, -1000, -1000, 7955, 16103, -1000, -1000,
	-1000, -1000, 478, 16103, -1000, 41937, -229, 322, -102, -1000,
	16103, 567, -64, -1000, 957, -1000, 16103, -1000, -43, 16103,
	16103, 16103, 321, -1000, 319, -1000, 817, -1000, 804, 803,
	798, -1000, 474, 1296, 473, 472, 16103, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43664, 39804, 318, -1000, 1714,
	-102, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 317, -1000,
	316, -1000, 43435, -102, 314, 39783, -1000, 16817, 16817, 16817,
	7955, 471, 311, -1000, 42227, -1000, 43287, 10853, 10853, 10853,
	309, 43058, 16103, -102, 39751, 4792, 3913, -68, -84, -1000,
	-89, -1000, 2338, -92, 308, 675, 670, 307, -1000, -1000,
	470, -95, -103, 697, 10496, 18925, 6841, -1000, 697, -1000,
	16103, 19623, 19623, 1451, 1624, 19623, -1000, -1000, -1000, -1000,
	27642, 503, 649, 27642, -1000, 2333, 1569, 306, -1000, -1000,
	-1000, 36993, 467, -1000, 649, 302, 1047, 36993, 36993, 36993,
	-1000, -1000, 1456, 38025, 1452, 44627, 36993, -1000, 466, 458,
	1618, 1617, 36993, 36993, 37681, 37337, 36993, 1213, 131, -1000,
	2126, 457, -1000, 36993, 1041, 23846, 689, 669, 36993, 131,
	-1000, 2119, 456, 6841, 1034, -1000, 668, 1674, 1405, -1000,
	924, 1713, 36993, 300, -110, -34, 44627, -1000, -1000, -1000,
	-1000, -1000, 36993, 530, 36993, 131, 36993, -1000, -1000, 36993,
	-1000, -1000, 2327, -1000, 1006, -1000, -1000, -1000, -1000, -1000,
	-1000, 1006, 36993, 23846, 23846, 131, 36993, 1969, 1995, 614,
	36993, 1616, 16103, 1187, -1000, 18576, 723, 36993, 1021, 125,
	-1000, -1000, -1000, 639, 36993, -1000, -1000, 118, 118, -1000,
	114, 1367, -1000, -91, -1000, -1000, -1000, 36993, 23846, -111,
	-1000, 740, 739, 737, -1000, 44627, -1000, 588, 799, -1000,
	2325, 687, 36993, 10139, 10139, -1000, 1635, -1000, -1000, 1033,
	-1000, 1139, -1000, -1000, -1000, -1000, 10139, -1000, -54, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1331, 1247, -1000, -1000,
	-1000, 1143, -1000, 16103, -1000, -1000, -1000, 9040, -1000, -1000,
	-1000, 36993, -159, 16103, 4630, 4630, 16103, 16817, 16817, -1000,
	4630, -1000, -1000, -1000, -1000, -1000, 1710, 453, 16103, 44627,
	4698, 3887, -116, 336, 16103, -37, -1000, 16103, -1000, 41647,
	-1000, -1000, 574, 1947, -1000, 16103, 42910, 296, 9782, -1000,
	42681, -50, -50, -1000, 2368, 1448, 1343, 1135, 994, 2309,
	-1000, 20671, 701, 1318, 41522, 44436, 44627, -1000, 16103, -1000,
	-1000, 1707, 16103, -1000, 44436, 44627, 16817, 16817, 16817, 16817,
	16817, 16817, 16817, 16817, 16817, 16817, 16817, 16817, 16817, 16817,
	16817, 16817, 16817, 16817, 16817, 1576, 16817, 2295, 2295, 2295,
	-45, 16103, -1000, 1828, 1707, 16103, 16103, 44627, 293, 291,
	281, -1000, 16103, -102, 16103, 16103, 16103, -1000, -1000, -1000,
	273, -1000, 2306, -1000, -1000, -1000, -1000, 1114, -1000, -1000,
	1687, -1000, -152, -1000, 2082, -1000, 1687, 43724, -1000, 1451,
	-1000, 452, 16103, 19623, -1000, 566, -1000, -118, -1000, 27642,
	-1000, 562, -227, -1000, 638, -1000, 649, 451, 36993, 27642,
	-1000, -1000, -1000, 794, 793, 1965, -1000, 1438, -1000, 727,
	-1000, 1039, 16103, 17529, 449, 448, 1184, -1000, 1962, 1367,
	1961, 1367, -1000, -53, 1063, -1000, 660, 16103, -1000, 790,
	-1000, 1189, 21376, -1000, -1000, 653, 16103, -1000, 788, 21376,
	687, 1703, 906, -1000, 923, -1000, 1661, -1000, 25566, 447,
	36993, 446, -1000, 445, -1000, -1000, -1000, 2682, -1000, 688,
	-1000, 442, 36993, 1546, 614, 24534, -1000, 688, 1021, -1000,
	43724, -1000, 1021, 8683, 2117, -119, -1000, -1000, -1000, 697,
	20322, 19623, 16103, -127, -1000, -1000, -1000, -1000, -54, 2090,
	2090, -1000, 2303, -1000, 561, 271, -1000, 28330, -54, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36993, 1304, 6841, 36993,
	36993, 36993, 1347, 41357, -1000, 2141, 6841, 2280, 4630, 3774,
	586, 16103, 44627, 44148, -129, 16103, 16103, -1000, 270, 16103,
	547, 43724, -1000, -1000, -1000, 43724, 16103, 2355, 16103, 269,
	266, 253, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	252, -1000, -1000, 39401, 16103, 250, -1000, 249, 248, 43724,
	1828, 43724, -1000, -1000, 610, 610, 996, 996, 996, 996,
	2295, 1172, 1383, 546, 493, 493, 493, 424, 469, 469,
	493, 493, 493, 1699, 1530, 439, 3486, 16103, 247, -1000,
	-1000, 43724, 43724, 246, -1000, -1000, -1000, -102, 295, 41232,
	41067, -1000, 233, 227, 1681, 2171, -1000, 19623, 1681, -1000,
	36993, 43724, -1000, -191, -1000, 2296, -1000, -1000, 1569, -1000,
	6128, 27642, 36993, -130, -1000, 36993, 36993, 36993, 1951, -1000,
	2806, -1000, 40942, -132, -1000, 347, 2153, 16103, -1000, -1000,
	437, 17529, 36993, -1000, 1583, 1622, 771, 36993, -1000, 36993,
	-1000, 36993, 36993, 36993, 21376, -137, 36993, 23846, -1000, 435,
	182, 21376, -138, 6841, -1000, -1000, 23846, 802, -1000, 1282,
	1664, -1000, 17529, 433, 36993, 25566, 2225, -1000, -1000, 17529,
	1394, 1592, 614, 24534, -1000, 874, -1000, -1000, -62, -1000,
	391, 131, 1021, -1000, -63, 43724, 637, 2071, -1000, 2068,
	504, -1000, -1000, -80, 432, -1000, 628, 627, -1000, -83,
	-1000, 590, -1000, -1000, -1000, 1275, 1275, -1000, -1000, -1000,
	2141, 16103, 16103, 44148, -139, -1000, 4630, 4630, -1000, 40777,
	-1000, 43724, -1000, 42681, -1000, -1000, -1000, -1000, 1278, -1000,
	40652, -1000, -1000, -1000, -1000, 16817, 1697, 427, 44627, 40487,
	-1000, -1000, 16103, -1000, -1000, -1000, -1000, 695, 16103, 16103,
	2082, 695, -140, 649, -1000, -1000, -1000, 2294, -1000, -145,
	-1000, -1000, -1000, -1000, 36993, -1000, 36993, -1000, 6841, 36993,
	1705, 1432, -1000, -1000, 1606, 426, 16817, 36993, -1000, 1148,
	17529, 2141, 182, 6841, 2141, 40362, 7199, -146, -147, 1430,
	-1000, 1422, 16103, -1000, 44627, 1367, 1367, -1000, 787, 786,
	-1000, 784, -1000, -1000, 16103, -1000, 783, -1000, -91, 21376,
	-1000, -1000, 2170, 1286, -153, 17529, -155, 224, 131, -156,
	36993, -1000, 614, 24534, -1000, 1995, 1954, 36993, 2099, -1000,
	-1000, 425, 422, 421, -1000, 27986, 27986, 23846, 23846, 1304,
	-1000, 36993, -1000, -1000, -1000, 4630, 4630, -1000, -1000, 209,
	1318, 2169, -1000, 4820, 16817, 44627, -161, -1000, 40197, -1000,
	36993, 43724, -102, -1000, -1000, 27642, 494, -1000, -1000, 2193,
	-1000, -1000, 36993, 1435, -1000, -1000, 16103, 3486, 404, 1661,
	403, -1000, -1000, -1000, -1000, -1000, -1000, 2153, -43, -1000,
	1137, -1000, -1000, 43724, 2150, -1000, -1000, 36993, 36993, 399,
	-50, 396, -1000, 1365, 36993, 1148, -163, -1000, 1661, -1000,
	1148, 395, 24534, -1000, 1546, 871, -164, 36993, -1000, 23846,
	23846, -1000, -170, -1000, -1000, -1000, -171, -1000, 1022, 16103,
	4820, -172, -1000, -1000, -94, -1000, 2220, -1000, -1000, -1000,
	-1000, 1938, 40072, 1454, 36993, -1000, 36993, 2141, 205, 36993,
	731, 6841, -1000, -1000, 16103, 200, 16103, 389, 388, 387,
	1661, 1148, -1000, 1661, 17529, -1000, 1592, 976, -1000, 697,
	-1000, -178, -180, -1000, -1000, 198, 16460, 16460, -102, -1000,
	36993, 385, 1900, -1000, 1381, 1284, 196, -185, -1000, -1000,
	382, -1000, 16103, -1000, -187, 2355, -188, 36993, 36993, 36993,
	-1000, 1661, -1000, -193, -1000, 20322, -1000, 687, 687, -1000,
	-1000, -1000, 17173, 1349, 1026, 42102, -1000, -1000, -1000, 36993,
	-1000, 1388, 1384, 991, -1000, -1000, -1000, -1000, -1000, 1454,
	43724, -1000, -1000, -194, -195, -196, -1000, 1148, -183, -1000,
	-1000, 2271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2045,
	-1000, 757, 1308, 1308, 1381, 380, 372, 1358, 1661, -1000,
	15746, -1000, 2279, -1000, -1000, 1538, -1000, -1000, 1275, 1275,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 195, 721,
	194, 718, -1000, 364, -1000, 1508, -66, 15389, 862, 350,
	-112, -1000, -202, -1000, 43724, -1000, 362, -1000, 15389, 1275,
	-1000, 15389, 15389, -203, -1000, -1000, -216, -1000, -67, 1275,
	-113, -1000, -1000, 1275, -1000,
}
var sqlPgo = [...]int{

	0, 2794, 2793, 1906, 2792, 2192, 2791, 2790, 2789, 2788,
	2180, 2787, 2786, 2785, 2784, 2783, 2782, 2781, 2780, 2779,
	2778, 2777, 2775, 2774, 2773, 2770, 2767, 2766, 2178, 2765,
	2170, 2763, 2758, 2757, 2756, 2755, 36, 2754, 2753, 2752,
	2094, 2751, 2749, 2745, 2742, 2069, 2740, 2738, 2045, 2735,
	2734, 2039, 2733, 2732, 2731, 2034, 2729, 2032, 2728, 85,
	105, 2024, 2717, 2707, 2015, 2012, 1996, 2706, 1988, 2703,
	2700, 1957, 1922, 2699, 261, 2698, 2697, 2696, 1904, 1854,
	2695, 2694, 2693, 152, 2692, 1850, 2691, 2689, 2688, 2686,
	2685, 2683, 2682, 2678, 2675, 2673, 2668, 2667, 2666, 2665,
	2663, 2661, 2660, 2659, 2658, 161, 2657, 2656, 1835, 1818,
	2655, 2651, 41, 31, 17, 64, 133, 158, 3462, 151,
	2646, 2644, 2643, 2642, 2640, 2638, 45, 99, 93, 2633,
	128, 2625, 2624, 52, 43, 23, 19, 72, 96, 2618,
	2612, 2308, 34, 2606, 2605, 131, 2600, 73, 26, 2060,
	153, 149, 62, 117, 2599, 2597, 2595, 51, 118, 10,
	8, 5, 1, 53, 4, 2, 2594, 3, 11, 2589,
	2587, 20, 90, 81, 2586, 27, 18, 2585, 2583, 127,
	2582, 67, 112, 1739, 186, 119, 408, 110, 2579, 68,
	21, 70, 2576, 2574, 156, 40, 88, 144, 109, 2573,
	49, 2572, 76, 121, 141, 159, 124, 84, 129, 132,
	2570, 2568, 2566, 100, 2565, 116, 111, 2564, 2561, 71,
	2552, 123, 138, 2551, 140, 106, 2550, 2546, 95, 2545,
	125, 2544, 2543, 157, 147, 108, 16, 42, 77, 13,
	1746, 1742, 135, 87, 65, 55, 2541, 763, 1519, 1494,
	57, 2539, 86, 58, 32, 56, 92, 139, 37, 2538,
	2533, 134, 2526, 2525, 2522, 2521, 2520, 103, 2519, 2518,
	2516, 80, 38, 47, 91, 50, 75, 126, 113, 155,
	98, 2507, 94, 120, 2506, 214, 2505, 2501, 1247, 114,
	2498, 2496, 2492, 1188, 1135, 1117, 282, 2488, 2480, 902,
	366, 2475, 2473, 89, 2472, 107, 104, 97, 145, 136,
	290, 2466, 115, 33, 2465, 46, 28, 0, 1953, 698,
	2460, 122, 79, 2459, 2457, 2454, 2443, 30, 14, 9,
	7, 15, 12, 78, 29, 2442, 2439, 130, 82, 69,
	2432, 154, 2430, 2429, 2428, 61, 2426, 24, 2421, 22,
	2419, 2416, 25, 6, 2410, 2409, 146, 2406, 101, 2404,
	2218, 2402, 148, 2400, 2398, 2076, 2397, 35, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 128, 128, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	125, 125, 130, 130, 130, 132, 132, 129, 129, 124,
	124, 28, 28, 72, 72, 115, 65, 65, 65, 315,
	315, 316, 316, 111, 111, 112, 112, 112, 112, 113,
	113, 114, 114, 114, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 48, 48, 49, 49, 49, 49, 49,
	49, 50, 50, 50, 50, 51, 51, 51, 51, 51,
	51, 51, 51, 56, 56, 56, 54, 54, 54, 53,
	53, 53, 52, 52, 52, 55, 55, 55, 185, 185,
	184, 184, 188, 188, 57, 57, 57, 57, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	60, 60, 60, 60, 60, 60, 60, 284, 284, 283,
	58, 58, 259, 259, 61, 61, 214, 214, 62, 62,
	62, 62, 62, 63, 63, 73, 73, 356, 356, 356,
	360, 360, 361, 361, 362, 362, 362, 362, 362, 362,
	362, 358, 358, 68, 68, 68, 68, 69, 69, 69,
	70, 70, 110, 110, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 33, 34, 34, 35, 35, 36, 36,
	36, 79, 79, 79, 81, 78, 78, 78, 80, 80,
	80, 80, 82, 82, 83, 83, 83, 83, 83, 84,
	84, 309, 307, 307, 308, 308, 155, 155, 155, 155,
	155, 156, 156, 156, 314, 314, 314, 314, 314, 314,
	313, 313, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 97,
	97, 97, 105, 105, 105, 105, 105, 105, 105, 86,
	86, 91, 91, 91, 91, 91, 87, 87, 92, 92,
	93, 93, 94, 94, 94, 94, 94, 94, 88, 88,
	88, 88, 96, 96, 96, 96, 95, 95, 101, 101,
	101, 101, 101, 101, 98, 98, 98, 98, 99, 99,
	99, 102, 102, 102, 102, 89, 89, 90, 90, 103,
	103, 104, 104, 104, 104, 104, 104, 100, 100, 100,
	357, 357, 359, 359, 66, 66, 43, 43, 44, 44,
	157, 157, 158, 158, 238, 238, 238, 238, 159, 159,
	131, 131, 131, 162, 163, 163, 160, 160, 161, 161,
	164, 164, 164, 166, 166, 167, 167, 168, 168, 165,
	165, 165, 237, 325, 325, 326, 326, 326, 326, 326,
	326, 327, 327, 327, 327, 327, 327, 327, 323, 323,
	324, 321, 321, 322, 322, 322, 322, 363, 363, 236,
	236, 171, 171, 328, 328, 328, 328, 329, 329, 329,
	329, 329, 332, 331, 330, 330, 330, 330, 330, 270,
	270, 270, 47, 47, 47, 202, 202, 201, 201, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 204, 107, 107, 45, 45, 45, 137, 137,
	46, 46, 42, 42, 42, 218, 218, 175, 175, 275,
	275, 275, 148, 148, 126, 126, 126, 19, 21, 21,
	15, 15, 15, 15, 15, 15, 27, 27, 24, 24,
	219, 219, 220, 220, 67, 67, 71, 71, 76, 76,
	106, 106, 106, 106, 106, 106, 29, 29, 29, 29,
	37, 37, 37, 37, 75, 75, 365, 365, 144, 144,
	144, 144, 145, 145, 233, 233, 234, 234, 366, 366,
	235, 235, 235, 139, 138, 140, 140, 41, 41, 41,
	133, 133, 134, 134, 135, 135, 136, 136, 367, 367,
	64, 64, 64, 109, 109, 151, 151, 230, 230, 230,
	232, 232, 231, 231, 231, 200, 200, 200, 108, 108,
	180, 180, 190, 190, 191, 191, 281, 192, 74, 74,
	118, 118, 116, 116, 116, 116, 116, 116, 116, 116,
	117, 117, 117, 119, 119, 119, 119, 119, 119, 119,
	122, 122, 122, 123, 123, 123, 121, 121, 338, 338,
	338, 341, 341, 337, 339, 339, 340, 340, 364, 364,
	205, 205, 205, 170, 169, 169, 173, 173, 172, 174,
	174, 274, 274, 274, 198, 198, 197, 197, 197, 197,
	223, 223, 221, 221, 222, 222, 226, 226, 227, 227,
	227, 228, 228, 229, 229, 196, 196, 255, 255, 225,
	225, 224, 120, 120, 120, 179, 179, 179, 181, 181,
	245, 245, 245, 246, 246, 244, 244, 244, 244, 276,
	276, 276, 276, 276, 276, 276, 276, 354, 354, 354,
	355, 355, 273, 273, 277, 277, 277, 277, 277, 277,
	271, 271, 271, 271, 272, 272, 282, 282, 208, 208,
	208, 208, 206, 206, 207, 207, 278, 278, 278, 278,
	199, 199, 279, 279, 279, 239, 239, 285, 285, 285,
	303, 303, 178, 178, 178, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 287, 287, 287, 287,
	289, 289, 289, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 302, 302, 302, 302, 302, 290, 290, 297, 297,
	298, 298, 299, 300, 291, 291, 292, 292, 293, 294,
	301, 301, 301, 301, 305, 305, 295, 295, 295, 295,
	295, 296, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 216, 216, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 249, 249, 249, 249, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 333, 333, 333, 333,
	333, 333, 333, 333, 335, 335, 336, 336, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 342, 342,
	343, 343, 345, 345, 346, 346, 347, 348, 348, 348,
	349, 350, 350, 344, 344, 351, 351, 351, 352, 352,
	353, 353, 353, 353, 353, 261, 261, 262, 263, 269,
	269, 269, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 146, 146,
	146, 146, 146, 187, 187, 186, 186, 258, 258, 256,
	256, 260, 260, 209, 209, 304, 304, 304, 304, 304,
	304, 304, 210, 210, 210, 217, 211, 211, 212, 212,
	212, 212, 212, 252, 253, 213, 213, 213, 254, 254,
	264, 268, 268, 267, 266, 266, 265, 265, 242, 242,
	243, 243, 241, 240, 195, 195, 194, 194, 193, 193,
	368, 368, 189, 189, 280, 280, 280, 280, 182, 182,
	153, 153, 183, 183, 149, 149, 152, 152, 150, 150,
	150, 150, 176, 176, 177, 177, 147, 147, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 306,
	306, 306, 257, 141, 141, 141, 142, 142, 143, 143,
	311, 311, 311, 312, 312, 312, 312, 310, 310, 310,
	310, 310, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 1, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 1,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 2, 6, 2, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 1, 4, 7, 1, 3, 2, 4,
	1, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 7, 7, 8, 8, 4, 5, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	5, 6, 4, 3, 5, 1, 3, 1, 1, 9,
	10, 8, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 2, 1, 4, 2, 4, 7, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 1, 1,
	3, 3, 1, 2, 4, 4, 2, 3, 5, 5,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 1, 0, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 1,
	0, 2, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 1,
	3, 3, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 5, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -28, -30, -33, -38,
	-39, -62, -48, -49, -50, -61, -57, -63, -64, -65,
	-66, -58, -72, -71, -73, -76, -74, -67, -68, -77,
	-85, -106, -107, -108, -109, -5, -10, 24, 35, -31,
	-32, 49, -34, 73, -45, -40, 75, 96, -340, 100,
	-51, -55, 104, 111, 114, 136, 145, 234, 241, 262,
	264, 266, 273, -116, -118, 260, -69, -70, -78, -79,
	-80, -81, -110, 286, -86, -87, -88, -89, -90, -91,
	-92, -93, -94, -95, -96, -97, -98, -99, -100, -101,
	-102, -103, -104, 289, -29, -37, -75, 329, -6, -7,
	-8, -9, -11, -21, 113, -41, -42, -43, -44, -46,
	-47, -338, -52, -53, -54, -56, -119, -117, 382, 261,
	338, 36, 299, 63, 107, 268, -13, -14, -17, -16,
	-18, -15, -23, -25, -22, -24, -26, -27, -19, -20,
	-12, 354, 361, -122, -120, -121, -123, 278, 346, 309,
	386, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 2, 309, 349, 339, 89, 154, 246, -356, 2,
	-183, 309, 89, -150, -141, 375, 4, -317, -319, 20,
	21, 24, 34, 35, 36, 41, 45, 48, 49, 50,
	57, 62, 63, 64, 69, 66, 67, 68, 71, 73,
	74, 77, 78, 79, 87, 88, 90, 92, 96, 98,
	100, 103, 104, 106, 111, 113, 112, 114, 124, 125,
	130, 132, 137, 143, 144, 145, 146, 147, 155, 158,
	160, 153, 170, 171, 172, 176, 177, 178, 181, 180,
	185, 186, 189, 190, 193, 195, 198, 196, 199, 202,
	200, 204, 205, 207, 206, 212, 214, 215, 217, 220,
	223, 226, 229, 230, 231, 232, 233, 234, 235, 237,
	239, 241, 243, 244, 245, 246, 247, 249, 250, 252,
	253, 254, 255, 256, 260, 258, 259, 261, 262, 263,
	264, 266, 268, 269, 271, 287, 288, 300, 273, 274,
	275, 276, 277, 282, 279, 280, 283, 284, 286, 289,
	291, 294, 298, 299, 301, 304, 305, 302, 297, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 324, 325,
	329, 330, 331, 332, 335, 336, 337, 338, 340, 343,
	344, 345, 350, 355, 356, 357, 358, 359, 29, 37,
	38, 39, 40, 42, 43, 46, 47, 53, 54, 55,
	58, 91, 93, 94, 110, 115, 116, 126, 127, 128,
	138, 140, 148, 149, 152, 159, 161, 162, 163, 164,
	165, 167, 174, 175, 183, 201, 211, 213, 224, 228,
	238, 240, 248, 270, 281, 292, 293, 303, 306, 319,
	320, 321, 326, 327, 342, 346, 347, 385, 385, 2,
	171, 245, -149, -141, 89, 385, 2, 309, 279, 339,
	349, -218, 89, 334, -141, 241, 22, 2, 98, 158,
	337, 336, 22, 237, 280, 311, 313, 2, 385, 2,
	349, 309, 154, 89, 339, -141, 2, -60, 2, 382,
	-59, -5, -40, -51, -61, -57, -10, -28, -30, -45,
	-48, -55, -65, -64, -66, -68, -72, -71, -74, -78,
	-79, -85, -108, -109, 75, 24, 104, 286, 113, -360,
	2, 22, -361, -362, 75, 104, 136, 278, 158, 98,
	336, 309, 2, 171, 2, -141, 2, -356, 2, 171,
	2, -360, 2, -141, 2, -145, 2, 273, -141, 385,
	385, 385, 385, 385, 190, 57, 270, 283, -83, 325,
	-82, 319, -309, -84, 2, -184, 202, -141, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 2, -105, 283, 35, 57,
	22, 62, 90, 137, 154, 155, 177, 70, 71, 244,
	190, 172, 324, 178, 284, 310, 325, 75, 340, 314,
	112, 4, 89, 202, 285, 319, 385, 385, 385, -364,
	2, 309, 385, 385, 385, 385, 275, 289, 385, 385,
	385, 385, 385, 385, -117, -119, -118, 385, 385, 385,
	385, -172, -173, 333, 166, 109, 222, -116, -118, 2,
	-338, -105, 283, 2, 57, 22, -307, 2, -247, 218,
	-249, 373, 374, 368, 208, 360, -261, 95, -251, -264,
	110, 270, 382, -149, -250, 388, 9, -335, -118, 30,
	-262, -263, 51, -141, 7, 8, 5, 6, -147, -287,
	-257, -296, 328, 117, 210, -333, -334, 4, -317, -311,
	-288, -298, -292, -295, 167, 60, 81, 82, 85, 83,
	86, 285, 339, 52, 29, 115, 116, 228, 238, 306,
	326, 327, 148, 211, 149, 58, 138, 183, 103, 38,
	40, 42, 43, 53, 54, 91, 93, 94, 126, 127,
	128, 159, 161, 162, 163, 164, 165, 213, 248, 292,
	303, 320, 321, 347, -318, -299, -300, -293, -294, 76,
	118, 135, 157, 150, 169, 173, 184, 187, 197, 203,
	225, 227, 267, 290, -301, -365, 2, 325, 325, 2,
	-365, 2, -365, 2, -144, 2, 325, 322, -341, 249,
	-337, -141, -341, 385, 385, 387, 385, -169, -170, 2,
	22, 101, 382, 2, -276, 2, 380, -278, -149, -118,
	-277, 382, 219, -3, 2, -278, 148, -149, 2, -278,
	148, -149, 2, -315, 148, -313, 9, -312, 5, 4,
	-317, -319, -318, 60, 2, -141, 2, -152, 148, -149,
	-310, 4, -317, -319, -318, -320, 22, 25, 26, 27,
	28, 30, 31, 32, 33, 44, 51, 52, 56, 59,
	61, 70, 75, 80, 81, 83, 82, 84, 85, 86,
	95, 97, 99, 101, 102, 105, 107, 109, 117, 119,
	131, 133, 134, 136, 139, 141, 151, 154, 156, 166,
	168, 179, 182, 188, 191, 192, 208, 209, 210, 216,
	218, 219, 221, 222, 236, 242, 251, 265, 278, 285,
	295, 307, 309, 318, 322, 323, 328, 333, 334, 339,
	341, 348, 349, 351, 352, 353, 354, 322, 387, -183,
	-176, -141, -241, -240, 384, -247, 2, -247, 2, 134,
	382, -194, -195, -240, -241, 2, -184, 148, -184, 148,
	2, -315, 148, 2, -184, 2, 154, -141, 148, 2,
	-141, 22, 134, 2, 168, 2, 168, 2, -279, 2,
	-278, -185, 148, 2, -184, -185, 148, 2, -153, 148,
	2, -152, -141, 148, 2, -316, 148, 2, -315, -214,
	382, -284, 2, -283, -312, 346, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 283, 218, 387, -184, -247, -259, 382, 134, -247,
	218, -141, 2, 287, 2, 382, -83, 55, 325, -234,
	2, -235, -138, -139, -140, 170, 243, 247, 359, 322,
	365, 134, -307, -188, 384, -105, 2, -315, 2, 287,
	2, 244, 284, 57, 134, 2, 2, -357, 2, 218,
	134, 2, 134, 2, 134, 2, 134, 2, 134, 2,
	2, 244, 284, 2, 131, 2, 324, 2, 2, 134,
	2, 170, 243, 300, 2, 309, 349, 2, 134, 134,
	359, 2, -199, -278, 309, 359, 22, -172, -173, -224,
	-197, 131, -221, -222, 188, 119, 216, -205, 22, 101,
	-205, -205, 45, 383, 383, -105, 287, 2, 10, 11,
	59, 34, 373, 374, 375, 376, 129, 377, 378, 371,
	372, 370, 363, 364, 367, 296, 23, 72, 366, 365,
	65, 194, 272, 120, 121, 122, 123, 257, 13, 14,
	15, 27, 221, 187, 360, 150, 290, 368, 16, 17,
	18, 169, 37, 151, -146, -154, -247, -247, -247, -247,
	-247, 227, -193, -242, 380, -118, 382, 382, -118, -247,
	-186, 382, 7, -118, -256, 380, -265, -247, -194, 382,
	5, 382, 5, -342, 355, 131, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 240, -305, 350, -305, -305,
	-289, 382, -289, -290, 382, -289, 356, 361, 382, -233,
	-234, -233, 322, -145, 387, -341, -177, 382, 382, -189,
	-280, -247, 375, -189, -186, -247, 76, -208, 173, 203,
	135, 184, 267, 157, 7, -60, -244, 388, 382, 375,
	-273, 361, -118, -277, 382, -276, -149, 382, -128, 258,
	-127, 21, 24, 104, 344, 110, 297, 315, -163, 274,
	-162, 232, 258, 110, 354, 110, 113, 258, 297, 315,
	-163, 274, 258, 110, 388, 113, -315, -150, 387, -310,
	375, 301, 383, -182, -149, -195, 382, -171, 208, -202,
	-201, -203, 31, 229, 48, 146, 196, 205, 197, 299,
	87, 208, -137, -339, 354, 208, -171, 382, -142, 148,
	2, -141, -339, 208, -279, -151, -149, -151, 286, -141,
	31, -130, 387, 50, 263, 110, -130, 110, -130, 387,
	110, -130, 110, 387, 110, -186, 383, 387, -356, -362,
	75, 382, 31, -258, -285, -286, -288, -297, -291, -295,
	-296, 41, 47, 46, 175, 174, 316, 201, 281, 293,
	342, 152, 39, 217, 160, 4, 159, 161, 162, 163,
	164, 165, 292, 38, 248, 127, 128, 126, 103, 94,
	93, 213, 43, 42, -299, -300, -293, -294, 91, 320,
	321, 167, 40, 54, 53, 347, 303, -316, -356, -309,
	-186, 31, -234, 2, -366, 387, 186, -156, 193, 207,
	143, 219, 357, -314, 5, 4, -257, -270, 95, 190,
	-296, 8, 374, -306, 7, 373, -308, -307, -308, 79,
	384, -310, -184, 22, 288, 2, -309, -359, 131, -356,
	-309, -309, -309, -309, -309, 283, -60, 131, -141, 186,
	-309, 2, -309, 2, 309, 154, 309, -130, 387, -149,
	66, 67, 359, -224, -197, -198, -197, -225, -224, 336,
	-222, -221, -226, -247, 22, -229, 125, 204, -247, -249,
	-117, -117, -117, -174, -274, -247, 242, 154, -309, -303,
	-285, -302, 253, 254, 252, 256, 255, -285, -310, 319,
	-247, -247, -247, -247, -247, -247, -247, -247, -247, -247,
	-247, -247, -247, -247, -247, -247, -247, -247, -247, -247,
	-247, -247, -247, -247, -247, -247, -247, -247, -247, -247,
	-247, -247, 187, 150, 290, 37, 151, -247, 322, -247,
	-247, -247, -247, 200, 208, 210, 328, 117, 335, 101,
	214, -368, 307, 33, -254, -118, 382, -269, 28, 295,
	22, -261, 270, 382, -242, -247, -243, -187, -186, 383,
	387, -187, -260, -256, -268, -267, 351, 383, -186, 348,
	22, 101, 375, 2, 7, -215, 358, 199, 92, 144,
	198, -216, 277, -343, 124, 139, 382, 383, 2, 383,
	2, 383, 2, 383, 2, -247, -247, -209, 2, -304,
	-186, 4, 358, 199, 92, 144, 198, 277, -209, 2,
	-210, 2, -247, -186, -211, -248, -249, 373, 374, 368,
	382, 270, -212, 2, -247, -187, -247, 44, 182, 323,
	-213, -247, 134, -186, -247, -247, -247, -186, -186, 2,
	-186, 2, 382, 7, 7, 319, 319, 7, -145, -337,
	31, -176, -186, -179, 387, 134, 31, 4, -179, 383,
	387, 173, 173, -276, -208, 173, -206, 225, -206, -206,
	-354, 382, 381, -273, -310, 380, 389, -187, 2, -272,
	-271, 31, -141, 223, 383, -149, 387, 322, -219, 70,
	61, -237, 148, 61, -321, -141, 70, -322, 56, 334,
	242, 133, -219, 70, -219, 70, 70, -278, 34, -74,
	113, 134, -310, 322, -278, 233, -315, 68, 322, 34,
	-74, 113, 134, 322, -152, -310, 68, -282, 362, -141,
	134, 383, 387, -157, -176, -158, -141, -238, -237, -323,
	-324, -321, 154, 334, 118, 31, 110, -203, -184, 45,
	-204, -306, 374, -204, 45, -204, 196, 197, 87, -204,
	-204, 354, 110, 233, 110, 31, 218, 208, -133, 312,
	110, -239, 352, -230, -74, 382, 95, 31, -230, -190,
	-191, -281, -192, -149, 382, -141, -184, -185, -185, -152,
	-153, -141, -315, -316, 383, -60, -283, 322, 341, -158,
	-59, 24, 75, 104, 383, 387, -178, 30, 380, -215,
	382, -282, 134, 365, 322, 383, 325, -235, -155, 247,
	294, 259, 282, 8, 7, 7, 387, -310, -358, -141,
	283, -60, -149, -152, -149, -278, 354, 131, 67, -198,
	-225, -227, -306, 382, -228, 270, 271, 387, -126, 32,
	99, 176, -149, 359, -247, -247, 322, -368, 307, -254,
	-247, 200, 210, 328, 117, 335, 101, 214, 134, 382,
	-248, -248, -186, -247, 382, -186, 381, 391, 383, -247,
	381, 381, 387, -266, -267, 105, -247, -173, 387, -172,
	-247, -186, -186, 383, 383, 322, 322, 322, 322, 382,
	-348, 226, 382, 382, -247, 31, 387, 383, 134, 383,
	383, -217, 236, 383, 10, 11, 373, 374, 375, 376,
	129, 377, 378, 371, 372, 370, 363, 364, 365, 65,
	194, 272, 13, 14, 15, 169, 151, -248, -248, -248,
	-186, 382, 383, -252, -253, 134, 131, 31, -213, -213,
	-213, 383, 134, -186, 387, 387, 387, 383, 383, 383,
	7, 383, 387, 383, 359, 359, 383, 382, 383, 383,
	-239, -280, -181, 2, -276, -310, -239, -247, -276, -276,
	-207, 341, 218, 173, -276, -271, 383, -355, 7, -273,
	-272, 7, -246, -245, 132, 206, 383, -141, 382, -273,
	383, -127, -149, -141, -141, 208, -237, 148, -132, 208,
	-285, -141, 382, 382, 176, 176, -141, -141, 148, -141,
	148, -141, -141, -128, 258, -74, 68, 382, -149, 258,
	-315, 354, 359, -141, -74, 68, 382, -310, 258, 359,
	-111, 147, 214, 301, 134, -149, 383, 383, 387, -142,
	154, -142, -74, -184, -184, -204, -204, -184, -315, -315,
	-74, -149, 110, -134, 106, -367, 365, -141, -223, -221,
	-247, -200, -232, 265, 218, -182, 346, -141, -200, -180,
	387, 134, 365, -182, -130, -130, -130, -130, -358, -315,
	383, -285, 380, 381, 7, 7, -114, 354, -358, -307,
	-307, -138, 332, 64, 247, -307, 387, 220, 246, 89,
	309, 154, -228, -247, -274, -149, 388, -247, -247, -248,
	-248, 134, 382, -247, -258, 27, 27, 383, -187, 387,
	-243, -247, 383, -256, 107, -247, 318, 383, 348, -173,
	-173, -173, 5, 199, 144, 198, -216, 198, -216, -216,
	7, -349, -141, 382, 352, -172, 383, -303, -285, -247,
	-252, -247, -303, -285, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, 101, 208, 214, -248, 387, -187, -253,
	-252, -247, -247, -285, 383, 383, 383, -186, -247, -247,
	-247, 383, 7, -59, -196, 139, -282, 387, -196, -207,
	382, -247, -276, 381, 383, 387, -272, 381, 387, 390,
	365, -273, 382, -176, -271, 322, 322, 110, 208, 343,
	-325, -322, -247, -175, -275, -141, -336, 382, -333, -334,
	-147, 382, 382, -125, 104, 286, -220, 110, -130, 110,
	-130, 322, -219, 70, 359, -186, 322, 233, -250, -147,
	-141, 359, -186, 322, -250, -114, 134, 308, 301, -159,
	153, -238, 382, -142, 382, 382, -171, -202, -137, 382,
	-141, -135, 181, -367, -313, -339, -200, -200, -189, 209,
	69, 383, -239, -191, -181, -247, 383, -115, 77, -115,
	7, 381, 383, -113, 220, -112, -141, 5, -141, -35,
	-36, 154, 235, -310, -141, -149, -152, 219, 383, -126,
	-310, 27, 27, -247, -258, 383, -247, -247, 383, -247,
	381, -247, 5, -247, 383, 383, 383, 383, -350, -141,
	-247, 383, 383, 383, -253, 134, 101, 214, 382, -247,
	383, 383, 387, 383, 383, 383, 383, -255, 141, 45,
	-276, -255, -176, -244, 7, -245, -310, 380, -272, -176,
	383, -141, -141, -237, 110, -326, 70, -327, 59, 118,
	75, 208, 210, 334, 242, 56, 95, 251, 383, 383,
	387, -148, -194, 59, -148, -247, 382, -175, -176, 208,
	95, 208, 95, 88, 330, -141, -141, -149, -141, -141,
	-250, 383, -149, -315, 382, -250, 383, -310, -316, 319,
	-160, -161, 232, 151, -175, 382, -176, -157, 31, -175,
	218, -136, 180, -367, -313, -133, -231, 382, 218, -74,
	-200, 365, 88, 88, 381, 387, 382, 365, 365, 387,
	22, 382, -163, -163, -126, -247, -247, 383, 383, -173,
	-344, 232, 383, -248, 134, 382, -258, 383, -247, -345,
	353, -247, -186, -345, 383, -273, 7, 383, -237, -141,
	-310, -141, 118, 148, 210, 176, 382, -248, -149, -236,
	-363, 74, 305, -275, -126, -310, -126, 383, -186, 383,
	383, 210, 210, -247, -285, -130, -130, 322, 322, 322,
	-186, 322, -250, 45, 230, 383, -175, 383, 383, -74,
	383, -149, -367, -313, -134, 102, -176, 70, -254, 382,
	382, -112, -113, -315, -315, -36, -176, 383, -173, 45,
	-248, -258, 383, 383, -346, -347, -141, -272, 381, -327,
	-142, 208, -247, -143, 382, -159, 382, -148, -173, 251,
	-129, 59, -141, -141, 382, -173, 382, 189, 246, -149,
	-236, 383, -159, -236, 382, -313, -135, 336, 209, 383,
	-141, -316, -316, 383, 383, -351, 246, 271, -186, 383,
	387, 31, 110, 383, -328, 195, -141, -176, -126, 383,
	-149, -124, 341, -310, -186, 383, -186, 382, 382, 382,
	-159, -236, -159, -175, -136, 286, -239, 383, 383, 383,
	-352, -353, 37, 331, 79, -247, -352, -347, -349, 118,
	-329, -332, -331, 218, 135, 231, 291, 383, 383, -171,
	-247, 383, 383, -176, -176, -176, -159, 383, -190, -114,
	-114, -353, 239, 130, 270, 239, 130, -141, -331, 218,
	-332, 218, 336, 98, -328, 383, 383, 383, -236, -239,
	27, -330, 205, 263, 50, 286, -330, -329, 382, 382,
	-131, 50, 263, -159, -353, 20, 210, 95, -164, -162,
	-165, -162, 383, 346, 383, 346, -166, 382, 185, 387,
	-161, -160, -167, -168, -247, 197, 317, -164, 382, 387,
	383, 387, 382, -167, -164, -168, -167, 383, 383, 387,
	-161, -160, -165, 387, -165,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 323, 0, 166, 168, -2, 0, 0, 0,
	191, 192, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 718, -2, 0, 303, 305, 314, 316,
	318, 320, 321, 0, 372, 374, 376, 378, 380, 382,
	384, 386, 388, 390, 392, 394, 396, 398, 400, 401,
	403, 405, 407, 0, 640, 642, 644, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	181, 756, 195, 197, 199, 201, -2, 767, 0, 0,
	0, -2, 0, -2, -2, -2, 68, 69, 70, 71,
	72, 73, 83, 84, 85, 86, 87, 75, 79, 80,
	82, 0, 0, 733, 735, 737, 739, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 43, 49, 51, 53,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 132,
	287, 0, 1339, 1262, 1268, 1269, 1293, 1294, 1295, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 158, 160, 161,
	0, 0, 0, 1264, 1339, 167, 169, 0, 0, 0,
	0, 0, 0, 605, 278, 1405, 280, 282, 0, 0,
	0, 0, 185, 186, 187, 188, 189, 190, 193, 194,
	0, 0, 0, 0, 0, 277, 275, 224, 225, 0,
	260, 261, 262, 263, 264, 266, 228, 230, 232, 233,
	235, 237, 239, 241, 243, 245, 246, 248, 250, 251,
	253, 255, 256, 258, 606, 0, 0, 0, 0, 0,
	284, 290, 291, 292, 294, 295, 296, 297, 298, 299,
	300, 0, 138, 0, 485, 273, 271, 0, 134, 0,
	637, 0, 286, 638, 639, 634, 635, 1432, 663, 304,
	306, 315, 317, 319, -2, -2, 1527, -2, 336, -2,
	344, 1533, 0, 347, 348, 351, -2, 220, 373, 375,
	377, 379, 381, 383, 385, 387, 389, 391, 393, 395,
	397, 399, 402, 404, 406, 408, 409, 0, 0, 0,
	413, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, 0, -2, -2, 0, 0, -2, 0,
	0, 412, 414, 415, 416, 0, 641, 643, 645, 0,
	594, 758, 60, 62, 64, 66, 0, 0, 171, 173,
	175, 177, 180, 182, -2, 731, 732, 196, 198, 200,
	202, -2, 0, 762, 762, 762, 0, 0, 732, 730,
	0, 307, 0, 309, 0, 413, 312, 313, 352, 353,
	968, 0, 0, 0, 0, 0, 0, 1041, 1071, 1073,
	1498, 1527, 0, 1075, 1076, 0, 1078, 1080, 1081, 0,
	1084, 1085, 1237, 1264, 1278, 1279, 1280, 1281, 0, 0,
	1284, 0, 1286, 1287, 1288, 1139, 1095, -2, -2, 1276,
	896, 897, 898, 899, -2, 1541, 1099, 1102, 1105, 1108,
	1109, 1112, 1113, 0, 1482, 1499, 1500, 1523, 1524, 1532,
	1536, 1537, 1506, 1520, 1507, 1494, 1504, 1518, 1345, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1302, 930, 931, 936, 937, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 939, 665, 647, 656, 665, 649,
	650, 651, 652, 653, 654, 655, 658, 0, 748, 1411,
	751, 1275, 749, 734, 736, 0, 738, 0, 0, 742,
	764, 763, 0, 803, 746, 747, 757, 818, 856, 833,
	824, 0, 0, 2, 74, 0, 1506, -2, 76, 0,
	1506, 856, 78, 0, 1506, 139, 140, 370, 371, 1303,
	1304, 1305, 1306, 1541, 81, 0, 88, 505, 1506, 1267,
	0, 1307, 1308, 1309, 1310, 1311, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 0, 0, 288,
	289, 1272, 1270, 1271, 0, 162, 163, 164, 165, 0,
	0, 1265, 1246, 1244, 1245, 178, 552, 1506, 576, 1506,
	574, -2, 1506, 597, 552, 601, -2, 755, 1506, 679,
	279, 281, 0, 184, 0, 692, 0, 694, 0, 709,
	862, 124, 1506, 205, 218, 124, 1506, 208, 124, 1506,
	211, 1260, 124, 1506, 214, 215, 1506, 217, 141, 274,
	0, 0, -2, 267, 269, -2, 265, 229, 231, 234,
	236, 238, 240, 242, 244, 247, 249, 252, 254, 257,
	259, -2, 0, 0, 0, 484, 0, 0, 0, 636,
	0, 662, 322, 0, 333, 0, 335, 1493, -2, -2,
	339, 666, 670, 671, 672, 0, 0, 0, 0, 0,
	0, 0, 349, 221, 0, 410, 411, 419, 420, 0,
	423, 444, 456, 0, 0, 427, 429, 483, 431, 0,
	0, 433, 0, 435, 0, 437, 0, 439, 0, 441,
	443, 445, 457, 447, 757, 449, 0, 451, 455, 0,
	460, 0, 462, 463, 464, 0, 0, 470, 0, 0,
	417, 418, 124, 860, 0, 0, 0, -2, 0, 775,
	800, 0, 778, 779, 0, 0, 0, 0, 760, 761,
	0, 0, 0, 720, 721, 308, 0, 311, 0, 0,
	0, 0, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181,
	1178, 1179, 1182, 1183, 0, 0, 0, 0, 0, 1184,
	0, 0, 0, 0, 0, 0, 0, 0, 1185, 1186,
	1187, 0, 0, 1189, 0, 1191, 0, 0, 0, 0,
	0, 0, 1251, 0, 0, 1188, 973, 974, 975, 1007,
	1008, 0, 1072, 1248, 1241, 1074, 0, 1194, -2, 1195,
	0, 0, 1077, 1082, 1083, 1194, 0, 1236, -2, 0,
	1283, 0, 965, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1217, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 915, 933, 944, 941, 940,
	917, 0, 916, 914, 0, 918, 0, 0, 0, 646,
	-2, 648, 0, 660, 0, 750, 0, 0, 0, 807,
	1252, 1256, 1257, 807, 0, 1195, 0, 0, 0, 0,
	853, 853, 853, 851, 827, 0, 833, 0, -2, 857,
	845, 0, -2, 824, 0, 0, 858, 0, 89, 631,
	103, 0, 631, 631, 0, 0, 0, 0, 0, 99,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 847, 1263, 0, 1242,
	1243, 154, 0, 0, 1258, 1247, 491, 0, 0, 572,
	575, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 595, 0, 754, 0, 0, 0, 0, 1506,
	604, 1296, 681, 0, 866, 0, 695, 0, 0, 863,
	0, 203, 0, 122, 123, 0, 206, 0, 209, 0,
	0, 212, 0, 0, 0, 0, 757, 0, 0, 293,
	0, 0, 757, 0, 1197, 874, 875, 876, 877, 878,
	965, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 927, 0, 902,
	902, 902, 919, 920, 928, 929, 934, 935, 946, 947,
	949, 951, 945, 945, 945, 942, 943, 847, 0, 0,
	0, 0, -2, 341, 0, 668, 0, 673, 361, 362,
	363, 675, 676, 345, 364, 365, 366, 367, 368, 369,
	0, 569, 0, 571, 1289, 0, 342, 354, 343, 346,
	0, 222, 421, 422, 424, 425, 426, 430, 0, 480,
	432, 434, 436, 438, 440, 448, 452, 757, 458, 461,
	465, 466, 467, 468, 0, 0, 0, 593, 0, 324,
	0, 475, 0, 775, 800, 724, 774, 725, 799, 801,
	776, 777, 782, 786, 787, 790, 793, 794, 784, 968,
	743, 744, 745, 768, 769, 616, 0, 0, 310, 969,
	870, 871, 921, 922, 923, 924, 925, 970, 971, 0,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	-2, -2, -2, -2, -2, -2, -2, -2, 994, 995,
	996, 997, 998, 999, 1000, 1001, -2, -2, -2, 1005,
	1006, -2, 1190, 1192, 0, 1251, 0, -2, 0, -2,
	-2, -2, -2, 1019, 0, 1021, 1024, 1026, 1028, 0,
	0, 0, 0, 1250, 1038, 1228, 0, 0, 1169, 1170,
	1171, 1023, 0, 0, 1249, 1240, 0, 0, 1193, 1079,
	0, 0, 0, 1201, 1235, 1231, 0, 1086, 767, 0,
	0, 0, 0, 1093, 0, 1292, 952, 953, 954, 955,
	956, 957, 966, 1149, 0, 0, 0, 1100, 1101, 1103,
	1104, 1106, 1107, 1110, 1111, 0, 0, 0, 1117, 0,
	1204, -2, -2, -2, -2, -2, -2, -2, 0, 1119,
	0, 1121, 1195, 1214, 0, 0, 1042, 0, 0, 0,
	0, 1527, 0, 1124, 1195, 1222, 0, 0, 0, 0,
	0, 1195, 0, 1227, 0, 0, 0, 0, 0, 1135,
	0, 1137, 0, 0, 0, 0, 0, 0, 659, 752,
	0, 0, 0, 866, 0, 0, 0, 1255, 866, 802,
	0, 0, 0, 0, 0, 0, 848, 852, 849, 850,
	0, 0, 833, 845, 815, 0, 0, 0, 822, 823,
	844, 0, 843, 832, -2, 0, 0, 0, 0, 0,
	630, 105, 1506, 0, 126, 0, 0, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 1266, 0, 144, 0, 1273,
	0, 0, 0, 0, 0, 490, 1272, 492, 494, 495,
	496, 497, 1297, 0, 1297, 0, 0, 578, 579, 0,
	581, 592, 0, 582, 0, 584, 585, 587, 591, 586,
	588, 0, 0, 0, 0, 0, 0, 0, 683, 689,
	0, 781, 0, 707, 697, 0, 0, 0, 707, 711,
	712, 714, 715, 0, 0, 864, 219, 124, 124, 1261,
	124, 124, 142, 216, 276, 226, 268, 0, 0, 0,
	270, 0, 0, 0, 272, 0, 867, 869, 0, 879,
	0, 153, 0, 0, 0, 334, 0, 667, 674, 0,
	358, 0, 360, 570, 1291, 1290, 0, 223, 482, 301,
	450, 453, 477, 478, 479, 861, 0, 0, 476, 728,
	729, 0, 788, 0, 785, 791, 792, 0, 771, 614,
	615, 0, 0, 0, -2, -2, 0, 0, 0, 1039,
	-2, 1020, 1022, 1025, 1027, 1029, 0, 0, 0, 0,
	0, 0, 0, 1040, 1194, 0, 1238, 1241, -2, 1196,
	1199, 1200, 0, 0, 1232, 0, 0, 0, 0, 766,
	767, 767, 767, 1092, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 1116, 0, 1118,
	1120, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 1046, 1047,
	0, 1194, 1123, 1220, 1221, 0, 0, 0, 0, 0,
	0, 1129, 0, 1226, 0, 0, 0, 1133, 1134, 1136,
	0, 900, 0, 926, 948, 950, 938, 757, 1274, 804,
	796, 1253, 847, 806, 808, 1254, 796, 1196, 835, 0,
	837, 0, 0, 0, 839, 0, 828, 0, 830, 845,
	820, 0, 0, 813, 0, 812, 833, 841, 0, 0,
	859, 104, 620, 0, 0, 0, 107, 1506, 115, 0,
	524, 0, 0, 0, 0, 0, 633, 116, 1506, 124,
	1506, 124, 117, 90, 631, 91, 0, 0, 626, 0,
	618, 0, 0, 617, 92, 0, 0, 628, 0, 0,
	153, 0, 0, 155, 0, 1259, 499, 551, 0, 0,
	1297, 0, 488, 552, 580, 583, 589, 576, 598, -2,
	600, 0, 0, 685, 689, 0, 688, 755, 707, 780,
	865, 690, 707, 0, 0, 0, 699, 696, 693, 866,
	0, 0, 0, 0, 204, 207, 210, 213, 283, 0,
	0, 1198, 0, 872, 0, 0, 133, 0, 285, 331,
	332, 337, 356, 357, 359, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 770, 616, 0, 972, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1229, 0, 0,
	0, 1240, -2, 1202, 1230, 1234, 0, 1087, 0, 0,
	0, 0, 1285, 958, 959, 960, 961, 962, 963, 964,
	0, 1147, 1148, 1152, 0, 0, 1098, 0, 0, 1203,
	1213, 1215, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, -2, -2, -2, 1061, 1062, 1063,
	-2, -2, -2, 0, 0, 0, 1216, 0, 0, 1218,
	1219, 1223, 1224, 0, 1126, 1127, 1128, 1225, 0, 0,
	0, 932, 0, 0, 798, 0, 805, 0, 798, 836,
	0, 855, 838, 818, 829, 0, 826, 816, 0, 817,
	0, 845, 0, 0, 825, 0, 0, 0, 0, 125,
	522, 541, 0, 0, 607, 613, 613, 0, 1096, 1097,
	0, 0, 0, 109, 0, 0, 0, 0, 113, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 95, 131, 0, 0, 156, 507,
	0, 493, 0, 0, 0, 491, 0, 573, 596, 0,
	0, 687, 689, 0, 680, 681, 183, 691, 705, 706,
	704, 0, 707, 713, 710, 716, 0, 0, 135, 0,
	0, 873, 880, 151, 1393, 149, 146, 148, 302, 325,
	326, 0, 330, 471, 472, 505, 505, 783, 789, 772,
	616, 0, 0, -2, 0, 1032, -2, -2, 1165, 1196,
	1239, 1233, 1282, 767, 1088, 1090, 1091, 967, 1154, 1151,
	0, 1138, 1114, 1115, 1212, 0, 0, 0, 0, 1196,
	1167, 1125, 0, 1131, 1132, 901, 753, 1143, 0, 0,
	809, 1143, 0, 833, 831, 814, 810, 0, 821, 0,
	842, 622, 624, 106, 0, 523, 0, 526, 0, 0,
	0, 0, 532, 533, 0, 0, 0, 0, 543, 550,
	0, 616, 1277, 0, 616, 0, 0, 0, 0, 0,
	121, 0, 0, 632, 0, 124, 124, 621, 0, 0,
	97, 0, 627, 619, 0, 98, 0, 629, 143, 0,
	486, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 677, 689, 0, 682, 683, 0, 0, 0, 698,
	708, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	328, 0, 473, 474, 773, -2, -2, 1033, 1166, 0,
	767, 0, 1140, -2, 0, 0, 0, 1168, 0, 740,
	0, 797, 795, 741, 854, 845, 0, 840, 108, 0,
	527, 528, 1297, 0, 531, 534, 0, 536, 1299, 499,
	0, 547, 548, 608, 609, 612, 610, 613, 767, 545,
	0, 110, 111, 120, 128, 112, 118, 0, 0, 0,
	767, 0, 846, 0, 0, 550, 0, 540, 499, 489,
	550, 0, 0, 684, 685, 0, 0, 0, 717, 0,
	0, 150, 0, 145, 147, 327, 0, 1089, 1157, 0,
	-2, 0, 1069, 1130, 1142, 1144, 0, 819, 811, 525,
	529, 0, 0, 556, 0, 544, 0, 616, 0, 0,
	130, 0, 623, 625, 0, 0, 0, 0, 0, 0,
	499, 550, 487, 499, 0, 686, 687, 0, 701, 866,
	703, 0, 0, 152, 329, 0, 0, 0, 1153, 1070,
	0, 0, 0, 535, 561, 0, 0, 0, 611, 1087,
	552, 114, 0, 127, 0, 0, 0, 0, 0, 0,
	538, 499, 602, 0, 678, 0, 702, 153, 153, 1150,
	1155, 1158, -2, 1466, 1336, 0, 1156, 1145, 1146, 0,
	537, 557, 558, 0, 553, 554, 555, 1298, 549, 556,
	129, 100, 102, 0, 0, 0, 539, 550, 866, 136,
	137, 0, 1160, 1161, 1162, 1163, 1164, 530, 559, 0,
	560, 0, 0, 0, 561, 0, 0, 502, 499, 700,
	0, 562, 0, 565, 566, 0, 563, 546, 0, 0,
	498, 500, 501, 603, 1159, 564, 567, 568, 0, 0,
	0, 0, 508, 0, 509, 0, 507, 0, 0, 0,
	506, 512, 0, 515, 517, -2, 0, 510, 0, 0,
	513, 0, 0, 0, 511, 516, 0, 514, 507, 0,
	506, 521, 519, 0, 520,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	363, 365, 364, 367, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 366, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:945
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:998
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1124
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1130
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1136
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1145
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1154
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1166
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1238
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1261
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1334
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1338
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1498
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DELETE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			return helpWith(sqllex, "DROP")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1605
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "DELETE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "INSERT")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1789
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1790
		{ /* SKIP DOC */
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			return helpWith(sqllex, "GRANT")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return helpWith(sqllex, "RESET")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{ /* SKIP DOC */
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{ /* SKIP DOC */
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex, "set local")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex, "set from current")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = Low
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = Normal
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = High
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.str = "client_encoding"
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2565
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2580
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2584
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2588
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2595
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2602
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2606
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2616
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2620
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = DropDefault
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.str = ""
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2888
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			return unimplemented(sqllex, "match full")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			return unimplemented(sqllex, "match partial")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			return unimplemented(sqllex, "match simple")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = NoAction
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = Restrict
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = Cascade
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = SetNull
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = SetDefault
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3188
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3196
		{
			node := &CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = []SequenceOption(nil)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			return unimplemented(sqllex, "create sequence CACHE option")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[2].union.intVal()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: nil}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: nil}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[2].union.intVal()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: false}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = nil
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3329
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = true
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = false
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3360
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3364
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = Ascending
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = Descending
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3415
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3417
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = true
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = false
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3451
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3513
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3531
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.str = ""
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3611
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = ReadOnly
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = ReadWrite
		}
	case 677:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.str = ""
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.str = ""
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.str = ""
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.str = ""
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3719
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			return helpWith(sqllex, "INSERT")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3802
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			return helpWith(sqllex, "SELECT")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			return helpWith(sqllex, "VALUES")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4006
		{
			return helpWith(sqllex, "TABLE")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			return helpWith(sqllex, "SELECT")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			return helpWith(sqllex, "TABLE")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4108
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4113
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4117
		{
			return unimplemented(sqllex, "cte")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4121
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4125
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4129
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = false
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = false
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = false
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = true
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4359
		{
			return helpWith(sqllex, "VALUES")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4361
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4376
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &From{}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4398
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4416
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4480
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = nil
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4552
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = true
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = false
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.str = astFullJoin
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.str = astLeftJoin
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.str = astRightJoin
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.str = astInnerJoin
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4664
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4750
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4764
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4772
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4807
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = jsonbColType
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = jsonColType
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4896
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4905
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = nil
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4970
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5066
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5098
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5137
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5138
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = year
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = month
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = day
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = hour
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = minute
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = month
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = hour
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = minute
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = minute
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = nil
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = second
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5268
		{
			return unimplemented(sqllex, "at tz")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5542
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5719
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5772
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5773
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5786
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5797
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5814
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5818
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5827
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5836
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5845
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			return unimplemented(sqllex, "current role")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5855
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5876
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5881
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5886
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5895
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5896
		{
			return unimplemented(sqllex, "treat")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5933
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5942
		{
			return unimplemented(sqllex, "within group")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5943
		{
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.str = ""
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6040
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6041
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6042
		{
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6045
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6046
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6052
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6053
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6054
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6055
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6056
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = Any
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = Some
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = All
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = Plus
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = Minus
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = Mult
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = Div
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = Mod
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = Bitand
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = Bitor
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = Pow
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = Bitxor
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = LT
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = GT
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = EQ
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = LE
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = GE
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = NE
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = Like
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = NotLike
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = ILike
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = NotILike
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6336
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6370
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6411
		{
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6412
		{
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6439
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6496
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6500
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6513
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6541
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6544
		{
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6554
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6565
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6569
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6573
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6577
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6580
		{
			return unimplemented(sqllex, "func const")
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6582
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6586
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6589
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6591
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6595
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6599
		{
			sqlVAL.union.val = DNull
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6606
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6610
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6616
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6651
		{
			sqlVAL.str = ""
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6657
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6661
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
