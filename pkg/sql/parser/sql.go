// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SETTINGS = 57586
const SHOW = 57587
const SIMILAR = 57588
const SIMPLE = 57589
const SMALLINT = 57590
const SMALLSERIAL = 57591
const SNAPSHOT = 57592
const SOME = 57593
const SPLIT = 57594
const SQL = 57595
const START = 57596
const STATUS = 57597
const STDIN = 57598
const STRICT = 57599
const STRING = 57600
const STORING = 57601
const SUBSTRING = 57602
const SYMMETRIC = 57603
const SYSTEM = 57604
const TABLE = 57605
const TABLES = 57606
const TEMPLATE = 57607
const TESTING_RANGES = 57608
const TESTING_RELOCATE = 57609
const TEXT = 57610
const THEN = 57611
const TIME = 57612
const TIMESTAMP = 57613
const TIMESTAMPTZ = 57614
const TO = 57615
const TRAILING = 57616
const TRANSACTION = 57617
const TREAT = 57618
const TRIM = 57619
const TRUE = 57620
const TRUNCATE = 57621
const TYPE = 57622
const UNBOUNDED = 57623
const UNCOMMITTED = 57624
const UNION = 57625
const UNIQUE = 57626
const UNKNOWN = 57627
const UPDATE = 57628
const UPSERT = 57629
const USER = 57630
const USERS = 57631
const USING = 57632
const VALID = 57633
const VALIDATE = 57634
const VALUE = 57635
const VALUES = 57636
const VARCHAR = 57637
const VARIADIC = 57638
const VIEW = 57639
const VARYING = 57640
const WHEN = 57641
const WHERE = 57642
const WINDOW = 57643
const WITH = 57644
const WITHIN = 57645
const WITHOUT = 57646
const YEAR = 57647
const ZONE = 57648
const NOT_LA = 57649
const WITH_LA = 57650
const AS_LA = 57651
const POSTFIXOP = 57652
const UMINUS = 57653

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5474

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	330, 31,
	-2, 430,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 413,
	143, 413,
	159, 413,
	184, 413,
	190, 413,
	283, 413,
	-2, 403,
	-1, 66,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 406,
	-1, 75,
	1, 31,
	330, 31,
	-2, 430,
	-1, 435,
	1, 200,
	330, 200,
	-2, 997,
	-1, 475,
	159, 440,
	184, 440,
	-2, 409,
	-1, 478,
	159, 439,
	184, 439,
	-2, 407,
	-1, 614,
	159, 439,
	184, 439,
	-2, 410,
	-1, 673,
	327, 930,
	-2, 923,
	-1, 674,
	327, 931,
	-2, 924,
	-1, 680,
	5, 599,
	327, 599,
	-2, 1106,
	-1, 704,
	5, 560,
	-2, 1080,
	-1, 705,
	5, 593,
	327, 593,
	-2, 1082,
	-1, 706,
	5, 568,
	-2, 1083,
	-1, 707,
	5, 567,
	-2, 1084,
	-1, 708,
	5, 593,
	327, 593,
	-2, 1087,
	-1, 709,
	5, 593,
	327, 593,
	-2, 1088,
	-1, 710,
	5, 594,
	-2, 1091,
	-1, 711,
	5, 554,
	-2, 1092,
	-1, 712,
	5, 554,
	-2, 1093,
	-1, 713,
	5, 575,
	-2, 1097,
	-1, 714,
	5, 555,
	-2, 1102,
	-1, 715,
	5, 556,
	-2, 1103,
	-1, 716,
	5, 557,
	-2, 1104,
	-1, 717,
	5, 558,
	-2, 1105,
	-1, 718,
	5, 554,
	-2, 1110,
	-1, 719,
	5, 561,
	-2, 1115,
	-1, 720,
	5, 559,
	-2, 1118,
	-1, 721,
	5, 591,
	327, 591,
	-2, 1120,
	-1, 722,
	5, 595,
	-2, 1123,
	-1, 723,
	5, 597,
	-2, 1124,
	-1, 724,
	5, 590,
	327, 590,
	-2, 1128,
	-1, 995,
	99, 413,
	143, 413,
	159, 413,
	184, 413,
	190, 413,
	283, 413,
	-2, 718,
	-1, 1004,
	327, 907,
	-2, 895,
	-1, 1218,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 634,
	-1, 1219,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 635,
	-1, 1220,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 636,
	-1, 1224,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 640,
	-1, 1225,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 641,
	-1, 1226,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 642,
	-1, 1229,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 647,
	-1, 1235,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 649,
	-1, 1237,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 653,
	-1, 1238,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 654,
	-1, 1239,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 655,
	-1, 1240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 656,
	-1, 1267,
	195, 789,
	-2, 792,
	-1, 1296,
	116, 829,
	327, 930,
	-2, 923,
	-1, 1297,
	116, 830,
	-2, 1076,
	-1, 1298,
	116, 831,
	-2, 996,
	-1, 1299,
	116, 832,
	-2, 965,
	-1, 1300,
	116, 833,
	-2, 980,
	-1, 1301,
	116, 834,
	-2, 995,
	-1, 1302,
	116, 835,
	-2, 1042,
	-1, 1459,
	99, 413,
	143, 413,
	159, 413,
	184, 413,
	190, 413,
	283, 413,
	-2, 490,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 648,
	-1, 1464,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 650,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 651,
	-1, 1487,
	195, 788,
	-2, 791,
	-1, 1677,
	1, 491,
	69, 491,
	99, 491,
	117, 491,
	121, 491,
	123, 491,
	136, 491,
	143, 491,
	148, 491,
	156, 491,
	159, 491,
	171, 491,
	184, 491,
	186, 491,
	190, 491,
	225, 491,
	227, 491,
	283, 491,
	290, 491,
	300, 491,
	301, 491,
	309, 491,
	326, 491,
	328, 491,
	330, 491,
	331, 491,
	-2, 490,
	-1, 1679,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 652,
	-1, 1684,
	146, 0,
	-2, 668,
	-1, 1694,
	195, 790,
	-2, 793,
	-1, 1728,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 695,
	-1, 1729,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 696,
	-1, 1730,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 697,
	-1, 1734,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 701,
	-1, 1735,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 702,
	-1, 1736,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 703,
	-1, 1857,
	146, 0,
	-2, 669,
	-1, 1860,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 672,
	-1, 1861,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 674,
	-1, 1967,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 673,
	-1, 1968,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 675,
	-1, 1975,
	146, 0,
	-2, 704,
	-1, 2031,
	146, 0,
	-2, 705,
	-1, 2096,
	36, 0,
	130, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 1079,
}

const sqlPrivate = 57344

const sqlLast = 29985

var sqlAct = [...]int{

	674, 2095, 2073, 1633, 2120, 2037, 2074, 2094, 1901, 2075,
	1097, 1927, 913, 1454, 1673, 1672, 1947, 1705, 1089, 1182,
	1822, 1581, 1457, 1848, 1643, 288, 479, 1765, 486, 65,
	1779, 1157, 919, 88, 88, 88, 664, 1432, 1833, 672,
	500, 763, 650, 524, 1827, 306, 88, 88, 88, 1161,
	542, 88, 769, 671, 88, 1580, 290, 20, 1548, 1649,
	800, 1156, 88, 88, 1175, 1265, 1383, 1547, 51, 1000,
	88, 88, 65, 1434, 88, 1197, 1160, 88, 88, 88,
	88, 1658, 1444, 88, 88, 737, 1129, 915, 1498, 1098,
	740, 633, 1189, 1058, 1377, 304, 1049, 1439, 801, 1275,
	761, 644, 1252, 1195, 65, 1249, 784, 1322, 1081, 297,
	22, 295, 30, 1113, 936, 515, 294, 16, 296, 8,
	1293, 863, 770, 436, 600, 773, 991, 1149, 742, 643,
	1122, 634, 20, 1192, 1030, 1034, 543, 484, 601, 534,
	1091, 537, 1164, 1190, 941, 536, 489, 1780, 618, 66,
	617, 865, 616, 666, 422, 80, 478, 861, 432, 413,
	777, 530, 487, 84, 599, 1960, 621, 1486, 1961, 1090,
	786, 786, 425, 67, 1126, 1518, 1519, 786, 1536, 1537,
	1538, 483, 483, 2111, 1094, 22, 766, 30, 1455, 276,
	2090, 1856, 16, 1778, 8, 756, 1490, 1489, 944, 945,
	1394, 1491, 1132, 1132, 974, 975, 976, 497, 2085, 2084,
	503, 1132, 1132, 510, 1082, 476, 465, 1127, 1395, 2081,
	943, 947, 766, 506, 978, 2071, 2066, 1533, 1119, 766,
	2015, 2062, 2033, 491, 766, 1119, 1442, 944, 945, 475,
	2027, 1085, 2009, 766, 946, 1778, 2005, 1442, 2000, 766,
	961, 1999, 1969, 1957, 942, 1119, 795, 1128, 1125, 1954,
	947, 1741, 1955, 1941, 667, 1938, 1778, 1936, 766, 71,
	1778, 1912, 1911, 433, 766, 1778, 1524, 1883, 1862, 1859,
	1132, 1132, 1119, 946, 88, 88, 88, 88, 88, 961,
	546, 1851, 1691, 1799, 1132, 73, 1132, 944, 945, 952,
	1798, 1777, 1688, 1132, 1778, 1132, 1619, 1614, 1419, 1088,
	1088, 1539, 1565, 1563, 1562, 1566, 1132, 1132, 971, 979,
	947, 1561, 1132, 1497, 1132, 1487, 74, 1130, 1132, 1534,
	1421, 544, 1047, 766, 69, 71, 466, 1422, 952, 1186,
	70, 1269, 766, 946, 944, 945, 969, 787, 787, 1082,
	1136, 1181, 962, 1132, 787, 1144, 629, 1131, 484, 68,
	1132, 73, 1118, 1087, 908, 1119, 1088, 947, 907, 1046,
	794, 1085, 1045, 795, 855, 854, 766, 513, 559, 496,
	75, 519, 1841, 1458, 887, 1781, 580, 2109, 2093, 71,
	946, 962, 74, 2080, 2042, 2028, 1124, 1535, 952, 1939,
	69, 1888, 1884, 628, 1876, 1875, 70, 1874, 1870, 88,
	539, 539, 1869, 1868, 1813, 73, 1807, 531, 1123, 1424,
	963, 1756, 1751, 1750, 88, 1093, 523, 88, 88, 540,
	1261, 1749, 1008, 1394, 972, 942, 1699, 1677, 1648, 1518,
	1519, 1623, 1570, 1567, 1555, 952, 74, 1546, 1517, 1514,
	1513, 962, 2092, 1511, 790, 785, 1503, 1502, 521, 963,
	733, 911, 1420, 1339, 1290, 88, 1289, 1456, 88, 628,
	88, 88, 88, 627, 88, 1530, 1531, 1532, 918, 68,
	1529, 1527, 1528, 1520, 1521, 1522, 1523, 1525, 1526, 88,
	1707, 1001, 1621, 68, 2054, 970, 2012, 1998, 1997, 1996,
	88, 973, 615, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 1988, 546, 88, 2002, 1986, 1977, 1964, 963,
	306, 546, 1950, 88, 1934, 1898, 1881, 1262, 88, 88,
	88, 1853, 88, 1816, 1804, 1784, 1683, 732, 1663, 1641,
	1524, 1639, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 88, 88, 1638, 2064, 568, 1636, 1806, 1589, 88,
	1588, 88, 1545, 1507, 614, 1506, 88, 775, 1483, 569,
	1478, 1254, 1410, 546, 546, 1368, 1366, 1353, 1352, 944,
	945, 306, 1332, 88, 88, 731, 88, 88, 88, 88,
	88, 88, 88, 607, 1288, 610, 1185, 88, 88, 562,
	564, 606, 947, 1035, 88, 948, 949, 950, 951, 953,
	954, 1038, 88, 1353, 1959, 767, 944, 945, 1042, 604,
	1028, 1027, 1026, 917, 602, 946, 1025, 1024, 1023, 1022,
	88, 1021, 1020, 88, 727, 760, 476, 1019, 1018, 947,
	1017, 1016, 1518, 1519, 789, 1015, 1014, 792, 624, 625,
	1013, 630, 948, 949, 950, 951, 953, 954, 519, 1012,
	475, 531, 946, 303, 940, 1005, 89, 994, 68, 522,
	912, 501, 632, 870, 870, 566, 888, 765, 555, 553,
	952, 1864, 1842, 725, 796, 1838, 1812, 1811, 1666, 776,
	779, 1001, 1325, 1404, 1403, 992, 733, 798, 572, 1962,
	922, 1518, 1519, 1839, 1518, 1519, 890, 1435, 64, 574,
	1810, 307, 910, 1396, 847, 1082, 849, 484, 1040, 848,
	1458, 1569, 1041, 1568, 851, 1462, 592, 883, 308, 882,
	575, 876, 1828, 1010, 42, 916, 88, 573, 1378, 1090,
	1708, 895, 43, 1524, 88, 750, 1276, 284, 88, 1522,
	1523, 1525, 1526, 1533, 1007, 649, 88, 88, 909, 1031,
	88, 1390, 473, 748, 44, 1494, 925, 88, 924, 926,
	596, 476, 1576, 2045, 476, 476, 938, 280, 749, 2106,
	1792, 88, 1416, 88, 88, 2004, 88, 2107, 1135, 88,
	277, 88, 88, 1052, 88, 932, 546, 458, 933, 934,
	285, 743, 1524, 744, 597, 459, 1070, 1004, 464, 1073,
	463, 1620, 1922, 1051, 78, 1126, 1921, 1920, 807, 1600,
	1110, 1919, 1604, 65, 743, 281, 744, 1603, 65, 498,
	1573, 733, 505, 508, 1092, 498, 1092, 544, 1059, 852,
	886, 1063, 1065, 1032, 1033, 1572, 1465, 1409, 1036, 743,
	1408, 744, 482, 1407, 1039, 1534, 1114, 892, 1127, 1406,
	896, 897, 898, 899, 900, 1236, 572, 77, 1133, 1051,
	903, 904, 1079, 1078, 745, 1050, 1043, 71, 1084, 881,
	880, 1068, 874, 871, 1075, 55, 1055, 603, 306, 950,
	951, 953, 954, 1080, 2003, 88, 481, 745, 1128, 1125,
	1062, 1076, 512, 73, 1803, 573, 88, 88, 1336, 1335,
	1176, 1116, 88, 88, 1107, 539, 1115, 539, 1117, 88,
	1096, 1207, 745, 1535, 1518, 1519, 906, 468, 1106, 954,
	286, 1105, 1111, 1108, 74, 1109, 1607, 1609, 1773, 1380,
	551, 771, 69, 483, 88, 469, 889, 306, 70, 1591,
	1520, 1521, 1522, 1523, 1525, 1526, 547, 754, 1903, 303,
	1187, 884, 1251, 1036, 287, 1039, 474, 68, 1130, 1276,
	470, 1774, 753, 548, 283, 282, 1033, 1032, 2077, 471,
	1138, 2052, 306, 1148, 2106, 582, 1451, 565, 1251, 780,
	751, 1061, 1130, 1137, 2117, 2068, 1384, 76, 2128, 1364,
	1518, 1519, 1373, 1415, 64, 752, 1529, 1527, 1528, 1520,
	1521, 1522, 1523, 1525, 1526, 1628, 1370, 1526, 2069, 839,
	758, 1258, 741, 757, 786, 1524, 1256, 1991, 1598, 1417,
	42, 79, 571, 1154, 1388, 885, 480, 1124, 43, 498,
	593, 508, 1206, 1198, 1205, 1155, 1153, 1625, 775, 88,
	88, 88, 1152, 2116, 1443, 88, 905, 753, 88, 2078,
	44, 1769, 1338, 1770, 88, 88, 88, 88, 88, 1060,
	550, 1273, 746, 1384, 1188, 751, 88, 1259, 1534, 88,
	88, 1452, 1140, 1171, 1048, 1130, 546, 1626, 1029, 88,
	752, 1772, 570, 1142, 88, 746, 88, 1592, 1775, 1973,
	594, 1524, 1447, 88, 1346, 1935, 303, 989, 2079, 1179,
	1180, 414, 1143, 88, 1505, 1659, 1676, 1263, 483, 1260,
	746, 1450, 1608, 1141, 2076, 2105, 1365, 620, 2103, 1367,
	1821, 1340, 419, 1445, 88, 88, 1173, 415, 1303, 1284,
	585, 1448, 619, 560, 2115, 546, 1535, 558, 595, 1376,
	1904, 64, 571, 2123, 1534, 1350, 1446, 1130, 1386, 1363,
	1879, 416, 484, 1392, 1914, 1913, 88, 620, 88, 1771,
	88, 1835, 637, 71, 88, 2129, 1341, 42, 88, 547,
	418, 55, 2134, 1896, 1983, 43, 307, 547, 833, 1575,
	1349, 1467, 1345, 875, 872, 1791, 548, 88, 1423, 73,
	1425, 787, 1790, 308, 548, 1788, 1174, 44, 1379, 807,
	807, 923, 1449, 1398, 65, 1399, 1400, 1250, 1402, 1389,
	1233, 914, 1535, 498, 55, 1426, 1849, 1624, 1397, 1429,
	74, 1528, 1520, 1521, 1522, 1523, 1525, 1526, 69, 547,
	547, 1737, 1114, 2038, 70, 870, 1401, 307, 845, 1308,
	1257, 1880, 619, 860, 902, 734, 548, 548, 1350, 853,
	1414, 1412, 1413, 1665, 308, 484, 1418, 856, 1443, 1836,
	1644, 1897, 1823, 1247, 2133, 1834, 1475, 1654, 774, 2121,
	417, 1355, 1354, 498, 778, 778, 1850, 1245, 1653, 570,
	1473, 858, 1789, 1427, 529, 1787, 1437, 1116, 1441, 1438,
	1460, 1453, 1115, 859, 1117, 1496, 505, 508, 1520, 1521,
	1522, 1523, 1525, 1526, 1231, 1234, 1447, 528, 481, 611,
	71, 807, 1634, 484, 1814, 1375, 1738, 1650, 55, 420,
	2122, 1440, 1739, 1287, 1894, 1450, 1976, 1468, 1878, 1466,
	1461, 997, 1230, 1549, 1550, 1682, 73, 1445, 2124, 1447,
	1241, 1606, 1512, 1470, 1477, 1448, 1895, 1482, 1242, 1381,
	1243, 1134, 1086, 1471, 1248, 1074, 1071, 1476, 1450, 598,
	1446, 591, 590, 589, 1493, 588, 587, 74, 586, 583,
	1657, 527, 484, 520, 807, 69, 1011, 894, 1448, 1773,
	1587, 70, 1766, 1586, 1286, 88, 88, 2072, 2035, 1762,
	1764, 1596, 1594, 1574, 1768, 1431, 1177, 1585, 1169, 1112,
	289, 793, 1615, 791, 788, 783, 759, 755, 747, 1696,
	88, 1433, 1774, 88, 807, 88, 1449, 1552, 1553, 1554,
	1232, 1929, 88, 2107, 878, 546, 1571, 1931, 1183, 659,
	1640, 1067, 1767, 88, 577, 1578, 88, 526, 525, 81,
	1613, 622, 494, 1993, 1612, 1781, 306, 1637, 88, 1449,
	1244, 1599, 547, 1472, 301, 25, 1595, 1246, 1597, 1605,
	1474, 581, 85, 85, 278, 2030, 1610, 1667, 1664, 548,
	1651, 65, 1618, 1051, 1616, 405, 406, 407, 1617, 1066,
	424, 1044, 1363, 437, 1627, 1629, 1630, 1184, 1051, 1635,
	3, 424, 437, 498, 1064, 410, 88, 1645, 626, 490,
	490, 508, 1769, 278, 1770, 498, 278, 278, 509, 278,
	623, 495, 85, 516, 1647, 578, 1701, 1702, 1703, 1656,
	1660, 1661, 514, 517, 518, 1646, 1101, 1072, 1069, 1685,
	25, 508, 1772, 457, 508, 2016, 300, 24, 1819, 1775,
	1172, 1668, 1692, 1168, 307, 421, 299, 23, 298, 11,
	1095, 1695, 302, 10, 939, 292, 9, 291, 7, 293,
	4, 308, 850, 88, 88, 88, 502, 944, 945, 833,
	833, 799, 1121, 1714, 2131, 1711, 1652, 944, 945, 1655,
	88, 2132, 1518, 1519, 1716, 88, 1709, 88, 726, 88,
	88, 88, 460, 461, 88, 88, 1744, 546, 1198, 1712,
	947, 944, 945, 307, 1782, 2065, 1745, 1198, 1717, 2019,
	1771, 1786, 24, 946, 1761, 1587, 1146, 1145, 1586, 1846,
	308, 1758, 23, 946, 11, 1757, 1631, 1622, 10, 88,
	88, 9, 1585, 7, 1785, 4, 546, 1564, 307, 1405,
	1748, 1337, 1334, 1333, 88, 88, 1283, 1147, 88, 1802,
	998, 1151, 508, 1866, 2051, 308, 546, 498, 88, 1928,
	1817, 1808, 1704, 1587, 1428, 88, 1586, 1008, 1587, 1006,
	467, 1586, 1809, 1845, 1902, 412, 893, 1266, 584, 1844,
	1585, 833, 1815, 1840, 1270, 1585, 1662, 1820, 1278, 1193,
	1854, 1818, 2067, 679, 1871, 1504, 1946, 544, 88, 1295,
	1295, 1306, 1826, 1317, 1972, 1285, 1843, 1009, 1824, 1329,
	1330, 1331, 41, 278, 532, 278, 437, 437, 1583, 653,
	1763, 1577, 1163, 1162, 484, 309, 879, 675, 864, 873,
	1294, 1199, 730, 807, 1858, 677, 1825, 804, 678, 805,
	1037, 665, 547, 802, 833, 1099, 1255, 1274, 1492, 1002,
	645, 657, 656, 88, 1271, 88, 552, 306, 88, 548,
	1847, 54, 567, 1877, 807, 807, 88, 431, 1387, 1805,
	1178, 729, 306, 807, 807, 927, 1593, 472, 1515, 554,
	1315, 1307, 1304, 931, 833, 605, 736, 1831, 1832, 1906,
	1905, 1837, 1908, 1889, 1342, 990, 1100, 88, 579, 1393,
	1120, 547, 1890, 631, 935, 1587, 807, 493, 1586, 492,
	1158, 576, 88, 857, 775, 546, 1139, 983, 548, 88,
	980, 462, 1585, 1985, 1170, 1372, 1348, 88, 1930, 2127,
	1924, 1992, 1590, 2044, 1382, 88, 1923, 72, 556, 774,
	2001, 1932, 1953, 1587, 88, 88, 1586, 1926, 774, 1374,
	1958, 29, 1892, 561, 1945, 1956, 437, 437, 498, 1966,
	1585, 1949, 1937, 26, 1963, 21, 1940, 1907, 19, 18,
	28, 17, 27, 15, 14, 1965, 13, 728, 12, 40,
	39, 1916, 38, 37, 1971, 88, 36, 1943, 35, 6,
	1917, 1918, 5, 2, 424, 1987, 1, 278, 0, 437,
	609, 437, 0, 612, 0, 0, 0, 0, 0, 1981,
	88, 88, 676, 0, 0, 1944, 0, 1982, 490, 1430,
	0, 0, 88, 0, 0, 0, 88, 1990, 0, 278,
	1989, 0, 1978, 2010, 546, 2008, 0, 1481, 807, 0,
	2011, 88, 1193, 85, 0, 1484, 0, 88, 0, 846,
	0, 0, 278, 306, 88, 88, 0, 278, 278, 278,
	2014, 781, 2020, 1500, 1501, 411, 2018, 0, 0, 2025,
	1952, 0, 2017, 2021, 2022, 0, 65, 88, 0, 88,
	278, 278, 88, 0, 306, 0, 2026, 0, 85, 2029,
	85, 0, 0, 484, 0, 437, 1544, 0, 0, 2041,
	0, 2050, 2055, 0, 0, 2057, 88, 1557, 2056, 88,
	2040, 414, 437, 437, 2053, 85, 437, 437, 437, 437,
	437, 901, 2060, 2063, 2061, 2059, 437, 437, 2032, 0,
	0, 0, 419, 424, 2013, 0, 0, 415, 0, 1587,
	0, 921, 1586, 88, 0, 88, 2082, 807, 2023, 1601,
	2089, 1602, 0, 2087, 0, 0, 1585, 0, 2058, 490,
	0, 416, 516, 88, 0, 0, 2086, 2100, 0, 0,
	944, 945, 2104, 0, 2102, 0, 2088, 2091, 2108, 2046,
	418, 0, 88, 1518, 1519, 0, 0, 0, 2114, 2112,
	0, 547, 0, 947, 0, 0, 2110, 2113, 1518, 1519,
	0, 2126, 2125, 833, 0, 0, 2130, 0, 548, 0,
	0, 0, 307, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 0, 2135, 0, 0, 0, 0, 0, 308,
	0, 0, 0, 0, 833, 833, 807, 944, 945, 1671,
	1101, 1193, 832, 833, 833, 0, 0, 0, 0, 0,
	0, 0, 1518, 1519, 0, 1536, 1537, 1538, 0, 0,
	947, 0, 0, 0, 0, 278, 1689, 0, 1855, 0,
	0, 952, 0, 1056, 0, 0, 833, 278, 0, 0,
	417, 0, 1309, 946, 1524, 278, 1077, 0, 1193, 278,
	0, 1193, 0, 0, 0, 0, 1083, 0, 0, 1524,
	0, 0, 0, 0, 1533, 0, 0, 0, 0, 0,
	278, 0, 1103, 1104, 0, 278, 0, 0, 278, 0,
	437, 437, 0, 437, 962, 0, 0, 0, 1742, 420,
	0, 0, 807, 0, 0, 0, 0, 1534, 952, 1752,
	0, 0, 0, 0, 0, 0, 0, 806, 944, 945,
	0, 0, 1534, 1524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 0, 0, 0, 0, 0, 0, 0, 1539, 0,
	0, 962, 963, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 547, 0, 0, 1535, 1534, 0, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	1535, 0, 547, 0, 1150, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 1830, 278, 278, 0, 0, 548,
	0, 278, 1159, 0, 1795, 0, 0, 0, 516, 952,
	1801, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 1535, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 1529, 1527,
	1528, 1520, 1521, 1522, 1523, 1525, 1526, 0, 0, 1193,
	1193, 0, 962, 1193, 1527, 1528, 1520, 1521, 1522, 1523,
	1525, 1526, 1309, 1309, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 0, 307, 0,
	308, 0, 635, 635, 956, 948, 949, 950, 951, 953,
	954, 738, 1530, 1531, 1532, 308, 0, 1529, 1527, 1528,
	1520, 1521, 1522, 1523, 1525, 1526, 803, 1910, 0, 0,
	963, 0, 0, 1309, 1309, 1309, 0, 0, 278, 1343,
	1344, 547, 0, 0, 1056, 0, 0, 1351, 0, 1479,
	1480, 0, 0, 1356, 1357, 1359, 1361, 1362, 548, 654,
	52, 0, 0, 0, 0, 1369, 833, 0, 1371, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 1900, 0, 278, 0, 1391, 0, 0, 0, 0,
	0, 0, 278, 832, 832, 0, 0, 0, 0, 0,
	0, 0, 278, 52, 0, 0, 0, 0, 0, 0,
	1541, 1542, 1543, 0, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 1150, 1150, 477, 0, 1942, 485, 928,
	930, 0, 0, 0, 0, 52, 937, 0, 0, 0,
	0, 0, 1193, 0, 0, 0, 0, 0, 984, 985,
	986, 987, 988, 0, 0, 921, 0, 921, 996, 437,
	547, 0, 833, 278, 0, 0, 0, 1436, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 0, 307,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 1309,
	1309, 0, 0, 0, 0, 0, 308, 0, 806, 806,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2047,
	2048, 2049, 0, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
	1309, 1309, 0, 1309, 0, 0, 1680, 1681, 832, 0,
	0, 0, 0, 2070, 0, 0, 835, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 0,
	1740, 0, 0, 1582, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 834, 278, 278, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1632,
	0, 0, 1056, 806, 921, 0, 0, 803, 803, 0,
	0, 1642, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1675, 0, 0,
	0, 835, 635, 0, 0, 0, 0, 0, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	0, 1235, 0, 1237, 1238, 1239, 1240, 0, 0, 0,
	0, 835, 0, 0, 834, 1706, 0, 1309, 0, 0,
	0, 0, 1264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 1292, 0, 0, 1305, 803,
	1316, 1318, 1323, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 834, 0, 0,
	0, 0, 1759, 1760, 1056, 1518, 1519, 0, 1536, 1537,
	1538, 0, 0, 0, 1899, 0, 0, 0, 1582, 516,
	0, 1687, 0, 0, 1793, 0, 1794, 0, 278, 1796,
	1797, 0, 803, 1800, 278, 0, 0, 834, 0, 0,
	1385, 1309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1533, 0, 0,
	0, 0, 0, 0, 0, 0, 1582, 832, 516, 1159,
	0, 1582, 803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 278, 278, 0, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1675, 832, 832,
	0, 0, 0, 0, 1852, 0, 1524, 832, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1975, 0,
	0, 477, 0, 0, 477, 477, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 1872, 0, 1309,
	832, 1539, 0, 0, 0, 0, 993, 0, 995, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 0, 1534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	1463, 1464, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 1056, 0, 1891, 0, 0, 1893, 0, 0,
	0, 0, 0, 806, 806, 278, 0, 0, 1582, 0,
	0, 0, 806, 806, 0, 0, 2031, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 1495, 1535, 0, 1499,
	0, 0, 0, 1925, 0, 0, 516, 0, 1508, 0,
	0, 0, 0, 0, 0, 806, 1582, 0, 0, 52,
	835, 278, 52, 0, 0, 0, 0, 0, 1948, 0,
	0, 0, 0, 996, 0, 0, 278, 0, 0, 1323,
	1323, 1323, 832, 0, 1675, 0, 0, 52, 0, 52,
	0, 835, 835, 516, 1675, 0, 0, 0, 0, 0,
	835, 835, 0, 0, 52, 0, 0, 0, 0, 52,
	0, 0, 1579, 0, 0, 1530, 1531, 1532, 0, 0,
	1529, 1527, 1528, 1520, 1521, 1522, 1523, 1525, 1526, 0,
	0, 0, 0, 835, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 1994,
	1995, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 2006, 0, 0, 0, 2007, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	516, 832, 0, 0, 0, 0, 1675, 834, 834, 0,
	0, 803, 0, 1675, 516, 0, 834, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1678, 0, 0, 1679, 2039, 0, 516, 0,
	0, 278, 803, 803, 0, 0, 0, 1684, 438, 834,
	0, 803, 803, 0, 0, 0, 1693, 0, 0, 0,
	0, 0, 1582, 1194, 1697, 1948, 439, 1411, 1675, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 0, 1713, 0, 803, 0, 1715, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 440, 1253,
	0, 0, 278, 443, 516, 0, 806, 0, 448, 449,
	944, 945, 454, 964, 965, 966, 974, 975, 976, 1746,
	1747, 0, 2101, 0, 442, 444, 967, 0, 1753, 1754,
	1755, 0, 0, 947, 0, 0, 978, 0, 0, 0,
	0, 1675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1783, 0, 946, 0, 0, 0,
	0, 0, 961, 445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 447, 0,
	0, 834, 0, 0, 835, 0, 832, 0, 0, 52,
	0, 0, 52, 0, 450, 806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 485, 0, 0, 803, 0, 0, 0,
	1829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 1857, 0, 0, 0, 1860, 1861, 969, 0,
	0, 1863, 0, 0, 962, 0, 0, 0, 1865, 0,
	1867, 0, 0, 835, 0, 0, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 52, 968,
	834, 806, 52, 0, 0, 0, 1518, 1519, 0, 1536,
	1537, 1538, 0, 0, 0, 52, 0, 0, 451, 0,
	456, 1882, 1686, 0, 452, 0, 1459, 0, 0, 453,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 0, 963, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 1533, 0,
	0, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	1915, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1524, 0, 0,
	0, 0, 0, 0, 0, 1951, 0, 970, 0, 0,
	958, 959, 960, 973, 803, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 1967, 1968, 0, 0, 0,
	0, 1885, 1539, 995, 0, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 0, 0, 0, 0, 0, 0,
	1534, 967, 0, 0, 0, 1980, 0, 0, 947, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 1984, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 961, 0, 1518,
	1519, 0, 1536, 1537, 1538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 0, 1194, 0, 0, 1535, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 952, 0, 0, 0,
	0, 1533, 0, 967, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 978, 0, 971, 979, 0, 0, 0,
	0, 0, 1194, 0, 0, 1194, 0, 0, 0, 0,
	0, 977, 52, 946, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 962,
	1524, 0, 0, 0, 0, 0, 1530, 1531, 1532, 0,
	0, 1529, 1527, 1528, 1520, 1521, 1522, 1523, 1525, 1526,
	1540, 0, 0, 0, 968, 2083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1539, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2099, 2099,
	0, 0, 0, 1534, 0, 0, 0, 971, 979, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 977, 0, 0, 2099, 0, 0, 0,
	0, 972, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 31, 1518, 1519, 0,
	1536, 1537, 1538, 0, 0, 0, 0, 32, 56, 0,
	0, 2099, 0, 0, 0, 0, 968, 0, 0, 1518,
	1519, 1535, 1536, 1537, 1538, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 34,
	0, 64, 970, 0, 52, 958, 959, 960, 973, 1533,
	957, 955, 956, 948, 949, 950, 951, 953, 954, 963,
	47, 0, 0, 0, 0, 0, 1560, 42, 0, 0,
	59, 1533, 0, 972, 46, 43, 0, 0, 0, 0,
	0, 0, 0, 1194, 1194, 0, 0, 1194, 0, 0,
	0, 48, 0, 0, 0, 485, 0, 44, 1524, 1530,
	1531, 1532, 0, 0, 1529, 1527, 1528, 1520, 1521, 1522,
	1523, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	1524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 970, 0, 0, 958, 959, 960,
	973, 0, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 1534, 0, 0, 0, 0, 0, 0, 1559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 62, 33, 0, 0, 49,
	0, 60, 0, 0, 0, 0, 50, 0, 0, 0,
	71, 0, 0, 0, 0, 53, 0, 0, 55, 1535,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	1933, 1535, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1194, 74, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 1531, 1532,
	68, 0, 1529, 1527, 1528, 1520, 1521, 1522, 1523, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	1531, 1532, 0, 0, 1529, 1527, 1528, 1520, 1521, 1522,
	1523, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 90, 91,
	324, 92, 325, 326, 327, 328, 225, 329, 330, 331,
	332, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 333, 97, 232, 233, 98, 334, 335, 234, 235,
	236, 336, 99, 237, 337, 310, 338, 100, 101, 102,
	0, 103, 339, 104, 105, 106, 340, 311, 107, 108,
	341, 342, 343, 344, 345, 346, 109, 110, 279, 111,
	238, 112, 239, 240, 347, 113, 348, 114, 349, 350,
	351, 115, 116, 352, 117, 353, 0, 354, 241, 118,
	119, 242, 243, 355, 356, 357, 120, 121, 244, 0,
	122, 358, 123, 359, 360, 312, 361, 124, 245, 362,
	246, 363, 125, 126, 127, 128, 247, 248, 314, 364,
	132, 365, 129, 366, 313, 130, 249, 131, 250, 251,
	252, 367, 253, 368, 315, 133, 316, 134, 135, 369,
	137, 136, 370, 254, 317, 138, 318, 371, 139, 372,
	373, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 374, 375, 376, 256, 150, 257,
	151, 152, 377, 153, 378, 379, 154, 380, 381, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 382,
	260, 161, 261, 162, 383, 163, 164, 165, 262, 166,
	167, 384, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 385, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 386, 264, 190, 191, 387,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 388,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 389,
	202, 390, 203, 204, 205, 206, 207, 391, 269, 270,
	271, 392, 393, 208, 272, 273, 394, 209, 210, 211,
	212, 395, 396, 213, 214, 215, 397, 216, 398, 217,
	218, 219, 274, 275, 399, 400, 220, 401, 402, 403,
	404, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 1669, 0, 0, 0, 0, 0, 0,
	0, 1670, 90, 91, 324, 92, 325, 326, 327, 328,
	225, 329, 330, 331, 332, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 333, 97, 232, 233, 98,
	334, 335, 234, 235, 236, 336, 99, 237, 337, 310,
	338, 100, 101, 102, 0, 103, 339, 104, 105, 106,
	340, 311, 107, 108, 341, 342, 343, 344, 345, 346,
	109, 110, 279, 111, 238, 112, 239, 240, 347, 113,
	348, 114, 349, 350, 351, 115, 116, 352, 117, 353,
	0, 354, 241, 118, 119, 242, 243, 355, 356, 357,
	120, 121, 244, 0, 122, 358, 123, 359, 360, 312,
	361, 124, 245, 362, 246, 363, 125, 126, 127, 128,
	247, 248, 314, 364, 132, 365, 129, 366, 313, 130,
	249, 131, 250, 251, 252, 367, 253, 368, 315, 133,
	316, 134, 135, 369, 137, 136, 370, 254, 317, 138,
	318, 371, 139, 372, 373, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 374, 375,
	376, 256, 150, 257, 151, 152, 377, 153, 378, 379,
	154, 380, 381, 155, 258, 320, 156, 321, 259, 157,
	158, 159, 160, 382, 260, 161, 261, 162, 383, 163,
	164, 165, 262, 166, 167, 384, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 385, 179, 322,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 386,
	264, 190, 191, 387, 192, 183, 184, 193, 323, 194,
	265, 266, 195, 388, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 389, 202, 390, 203, 204, 205, 206,
	207, 391, 269, 270, 271, 392, 393, 208, 272, 273,
	394, 209, 210, 211, 212, 395, 396, 213, 214, 215,
	397, 216, 398, 217, 218, 219, 274, 275, 399, 400,
	220, 401, 402, 403, 404, 221, 222, 223, 224, 0,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2024, 90, 91,
	324, 92, 325, 326, 327, 328, 225, 329, 330, 331,
	332, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 333, 97, 232, 233, 98, 334, 335, 234, 235,
	236, 336, 99, 237, 337, 310, 338, 100, 101, 102,
	0, 103, 339, 104, 105, 106, 340, 311, 107, 108,
	341, 342, 343, 344, 345, 346, 109, 110, 279, 111,
	238, 112, 239, 240, 347, 113, 348, 114, 349, 350,
	351, 115, 116, 352, 117, 353, 0, 354, 241, 118,
	119, 242, 243, 355, 356, 357, 120, 121, 244, 0,
	122, 358, 123, 359, 360, 312, 361, 124, 245, 362,
	246, 363, 125, 126, 127, 128, 247, 248, 314, 364,
	132, 365, 129, 366, 313, 130, 249, 131, 250, 251,
	252, 367, 253, 368, 315, 133, 316, 134, 135, 369,
	137, 136, 370, 254, 317, 138, 318, 371, 139, 372,
	373, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 374, 375, 376, 256, 150, 257,
	151, 152, 377, 153, 378, 379, 154, 380, 381, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 382,
	260, 161, 261, 162, 383, 163, 164, 165, 262, 166,
	167, 384, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 385, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 386, 264, 190, 191, 387,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 388,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 389,
	202, 390, 203, 204, 205, 206, 207, 391, 269, 270,
	271, 392, 393, 208, 272, 273, 394, 209, 210, 211,
	212, 395, 396, 213, 214, 215, 397, 216, 398, 217,
	218, 219, 274, 275, 399, 400, 220, 401, 402, 403,
	404, 221, 222, 223, 224, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 90, 91, 324, 92, 325, 326, 327, 328, 225,
	329, 330, 331, 332, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 333, 97, 232, 233, 98, 334,
	335, 234, 235, 236, 336, 99, 237, 337, 310, 338,
	100, 101, 102, 0, 103, 339, 104, 105, 106, 340,
	311, 107, 108, 341, 342, 343, 344, 345, 346, 109,
	110, 279, 111, 238, 112, 239, 240, 347, 113, 348,
	114, 349, 350, 351, 115, 116, 352, 117, 353, 0,
	354, 241, 118, 119, 242, 243, 355, 356, 357, 120,
	121, 244, 0, 122, 358, 123, 359, 360, 312, 361,
	124, 245, 362, 246, 363, 125, 126, 127, 128, 247,
	248, 314, 364, 132, 365, 129, 366, 313, 130, 249,
	131, 250, 251, 252, 367, 253, 368, 315, 133, 316,
	134, 135, 369, 137, 136, 370, 254, 317, 138, 318,
	371, 139, 372, 373, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 374, 375, 376,
	256, 150, 257, 151, 152, 377, 153, 378, 379, 154,
	380, 381, 155, 258, 320, 156, 321, 259, 157, 158,
	159, 160, 382, 260, 161, 261, 162, 383, 163, 164,
	165, 262, 166, 167, 384, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 385, 179, 322, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 386, 264,
	190, 191, 387, 192, 183, 184, 193, 323, 194, 265,
	266, 195, 388, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 389, 202, 390, 203, 204, 205, 206, 207,
	391, 269, 270, 271, 392, 393, 208, 272, 273, 394,
	209, 210, 211, 212, 395, 396, 213, 214, 215, 397,
	216, 398, 217, 218, 219, 274, 275, 399, 400, 220,
	401, 402, 403, 404, 221, 222, 223, 224, 673, 662,
	663, 660, 661, 652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 689, 655, 0, 0, 0, 93, 94, 95,
	226, 704, 228, 705, 96, 706, 707, 0, 97, 232,
	233, 98, 658, 688, 708, 709, 236, 0, 99, 700,
	0, 681, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 682, 684, 0,
	683, 685, 109, 110, 279, 111, 710, 112, 711, 712,
	739, 113, 0, 114, 0, 0, 0, 703, 116, 0,
	117, 0, 0, 0, 646, 118, 119, 690, 691, 669,
	0, 0, 120, 121, 713, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 701, 0, 246, 0, 125, 126,
	127, 128, 697, 699, 314, 0, 132, 0, 129, 0,
	313, 130, 714, 131, 715, 716, 717, 0, 680, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 702,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	641, 0, 670, 698, 150, 718, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	692, 157, 158, 159, 160, 0, 693, 161, 261, 162,
	0, 163, 164, 165, 719, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 647, 182, 0, 186, 187, 188,
	189, 71, 264, 190, 191, 686, 192, 183, 184, 193,
	323, 194, 720, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 721, 199, 694, 0, 202, 73, 203, 204,
	205, 206, 207, 0, 269, 722, 723, 0, 0, 208,
	695, 696, 668, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 687, 216, 0, 217, 218, 219, 549, 724,
	0, 0, 220, 0, 0, 0, 69, 221, 222, 223,
	224, 642, 70, 0, 0, 0, 0, 640, 0, 0,
	0, 0, 638, 639, 673, 662, 663, 660, 661, 652,
	0, 648, 0, 0, 0, 0, 651, 0, 0, 0,
	90, 91, 1280, 92, 0, 0, 0, 0, 689, 655,
	0, 0, 0, 93, 94, 95, 226, 704, 228, 705,
	96, 706, 707, 0, 97, 232, 233, 98, 658, 688,
	708, 709, 236, 0, 99, 700, 0, 681, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 682, 684, 0, 683, 685, 109, 110,
	279, 111, 710, 112, 711, 712, 0, 113, 0, 114,
	0, 1281, 0, 703, 116, 0, 117, 0, 0, 0,
	646, 118, 119, 690, 691, 669, 0, 0, 120, 121,
	713, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	701, 0, 246, 0, 125, 126, 127, 128, 697, 699,
	314, 0, 132, 0, 129, 0, 313, 130, 714, 131,
	715, 716, 717, 0, 680, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 702, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 641, 0, 670, 698,
	150, 718, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 692, 157, 158, 159,
	160, 0, 693, 161, 261, 162, 0, 163, 164, 165,
	719, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	647, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 686, 192, 183, 184, 193, 323, 194, 720, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 721, 199,
	694, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 722, 723, 0, 0, 208, 695, 696, 668, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 687, 216,
	0, 217, 218, 219, 274, 724, 1279, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 642, 0, 0,
	0, 0, 0, 640, 0, 0, 0, 0, 638, 639,
	1282, 673, 662, 663, 660, 661, 652, 648, 1277, 0,
	0, 0, 651, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 689, 655, 0, 0, 0,
	93, 94, 95, 226, 704, 228, 705, 96, 706, 707,
	0, 97, 232, 233, 98, 658, 688, 708, 709, 236,
	0, 99, 700, 0, 681, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	682, 684, 0, 683, 685, 109, 110, 279, 111, 710,
	112, 711, 712, 0, 113, 0, 114, 0, 0, 0,
	703, 116, 0, 117, 0, 0, 0, 646, 118, 119,
	690, 691, 669, 0, 0, 120, 121, 713, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 701, 0, 246,
	0, 125, 126, 127, 128, 697, 699, 314, 0, 132,
	0, 129, 0, 313, 130, 714, 131, 715, 716, 717,
	0, 680, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 702, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 641, 0, 670, 698, 150, 718, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 692, 157, 158, 159, 160, 0, 693,
	161, 261, 162, 0, 163, 164, 165, 719, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 647, 182, 0,
	186, 187, 188, 189, 71, 264, 190, 191, 686, 192,
	183, 184, 193, 323, 194, 720, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 721, 199, 694, 0, 202,
	73, 203, 204, 205, 206, 207, 0, 269, 722, 723,
	0, 0, 208, 695, 696, 668, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 687, 216, 0, 217, 218,
	219, 549, 724, 0, 0, 220, 0, 0, 0, 69,
	221, 222, 223, 224, 642, 70, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 638, 639, 673, 662, 663,
	660, 661, 652, 0, 648, 0, 0, 0, 0, 651,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 689, 655, 0, 0, 0, 93, 94, 95, 226,
	704, 228, 705, 96, 706, 707, 1319, 97, 232, 233,
	98, 658, 688, 708, 709, 236, 0, 99, 700, 0,
	681, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 682, 684, 0, 683,
	685, 109, 110, 279, 111, 710, 112, 711, 712, 0,
	113, 0, 114, 0, 0, 0, 703, 116, 0, 117,
	0, 0, 0, 646, 118, 119, 690, 691, 669, 0,
	0, 120, 121, 713, 0, 122, 0, 123, 0, 1324,
	312, 0, 124, 701, 0, 246, 0, 125, 126, 127,
	128, 697, 699, 314, 0, 132, 0, 129, 0, 313,
	130, 714, 131, 715, 716, 717, 0, 680, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 1320, 702, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 641,
	0, 670, 698, 150, 718, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 692,
	157, 158, 159, 160, 0, 693, 161, 261, 162, 0,
	163, 164, 165, 719, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 647, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 686, 192, 183, 184, 193, 323,
	194, 720, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 721, 199, 694, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 722, 723, 0, 1321, 208, 695,
	696, 668, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 687, 216, 0, 217, 218, 219, 274, 724, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	642, 0, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 638, 639, 673, 662, 663, 660, 661, 652, 0,
	648, 0, 0, 0, 0, 651, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 689, 655, 0,
	0, 0, 93, 94, 95, 226, 704, 228, 705, 96,
	706, 707, 0, 97, 232, 233, 98, 658, 688, 708,
	709, 236, 0, 99, 700, 0, 681, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 682, 684, 0, 683, 685, 109, 110, 279,
	111, 710, 112, 711, 712, 0, 113, 0, 114, 0,
	0, 0, 703, 116, 0, 117, 0, 0, 0, 646,
	118, 119, 690, 691, 669, 0, 0, 120, 121, 713,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 701,
	0, 246, 0, 125, 126, 127, 128, 697, 699, 314,
	0, 132, 0, 129, 0, 313, 130, 714, 131, 715,
	716, 717, 0, 680, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 702, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 641, 1611, 670, 698, 150,
	718, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 692, 157, 158, 159, 160,
	0, 693, 161, 261, 162, 0, 163, 164, 165, 719,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 647,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	686, 192, 183, 184, 193, 323, 194, 720, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 721, 199, 694,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	722, 723, 0, 0, 208, 695, 696, 668, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 687, 216, 0,
	217, 218, 219, 274, 724, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 642, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 638, 639, 636,
	673, 662, 663, 660, 661, 652, 648, 0, 0, 0,
	0, 651, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 689, 655, 0, 0, 0, 93,
	94, 95, 226, 704, 228, 705, 96, 706, 707, 0,
	97, 232, 233, 98, 658, 688, 708, 709, 236, 0,
	99, 700, 0, 681, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 682,
	684, 0, 683, 685, 109, 110, 279, 111, 710, 112,
	711, 712, 0, 113, 0, 114, 0, 0, 0, 703,
	116, 0, 117, 0, 0, 0, 646, 118, 119, 690,
	691, 669, 0, 0, 120, 121, 713, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 701, 0, 246, 0,
	125, 126, 127, 128, 697, 699, 314, 0, 132, 0,
	129, 0, 313, 130, 714, 131, 715, 716, 717, 0,
	680, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 702, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 641, 0, 670, 698, 150, 718, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 692, 157, 158, 159, 160, 0, 693, 161,
	261, 162, 0, 163, 164, 165, 719, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 647, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 686, 192, 183,
	184, 193, 323, 194, 720, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 721, 199, 694, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 722, 723, 0,
	0, 208, 695, 696, 668, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 687, 216, 0, 217, 218, 219,
	274, 724, 0, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 642, 0, 0, 0, 0, 0, 640,
	0, 0, 0, 0, 638, 639, 0, 0, 0, 0,
	0, 1001, 1272, 648, 0, 0, 0, 0, 651, 673,
	662, 663, 660, 661, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 689, 655, 0, 0, 0, 93, 94,
	95, 226, 704, 228, 705, 96, 706, 707, 0, 97,
	232, 233, 98, 658, 688, 708, 709, 236, 0, 99,
	700, 0, 681, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 682, 684,
	0, 683, 685, 109, 110, 279, 111, 710, 112, 711,
	712, 0, 113, 0, 114, 0, 0, 0, 703, 116,
	0, 117, 0, 0, 0, 646, 118, 119, 690, 691,
	669, 0, 0, 120, 121, 713, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 701, 0, 246, 0, 125,
	126, 127, 128, 697, 699, 314, 0, 132, 0, 129,
	0, 313, 130, 714, 131, 715, 716, 717, 0, 680,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	702, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 641, 0, 670, 698, 150, 718, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 692, 157, 158, 159, 160, 0, 693, 161, 261,
	162, 0, 163, 164, 165, 719, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 647, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 686, 192, 183, 184,
	193, 323, 194, 720, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 721, 199, 694, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 722, 723, 0, 0,
	208, 695, 696, 668, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 687, 216, 0, 217, 218, 219, 274,
	724, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 642, 0, 0, 0, 0, 0, 640, 0,
	0, 0, 0, 638, 639, 673, 662, 663, 660, 661,
	652, 0, 648, 1743, 0, 0, 0, 651, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 689,
	655, 0, 0, 0, 93, 94, 95, 226, 704, 228,
	705, 96, 706, 707, 0, 97, 232, 233, 98, 658,
	688, 708, 709, 236, 0, 99, 700, 0, 681, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 682, 684, 0, 683, 685, 109,
	110, 279, 111, 710, 112, 711, 712, 0, 113, 0,
	114, 0, 0, 0, 703, 116, 0, 117, 0, 0,
	0, 646, 118, 119, 690, 691, 669, 0, 0, 120,
	121, 713, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 701, 0, 246, 0, 125, 126, 127, 128, 697,
	699, 314, 0, 132, 0, 129, 0, 313, 130, 714,
	131, 715, 716, 717, 0, 680, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 702, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 641, 0, 670,
	698, 150, 718, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 692, 157, 158,
	159, 160, 0, 693, 161, 261, 162, 0, 163, 164,
	165, 719, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 647, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 686, 192, 183, 184, 193, 323, 194, 720,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 721,
	199, 694, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 722, 723, 0, 0, 208, 695, 696, 668,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 687,
	216, 0, 217, 218, 219, 274, 724, 1700, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 642, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 638,
	639, 673, 662, 663, 660, 661, 652, 0, 648, 0,
	0, 0, 0, 651, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 689, 655, 0, 0, 0,
	93, 94, 95, 226, 704, 228, 705, 96, 706, 707,
	0, 97, 232, 233, 98, 658, 688, 708, 709, 236,
	0, 99, 700, 0, 681, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	682, 684, 0, 683, 685, 109, 110, 279, 111, 710,
	112, 711, 712, 0, 113, 0, 114, 0, 0, 0,
	703, 116, 0, 117, 0, 0, 0, 646, 118, 119,
	690, 691, 669, 0, 0, 120, 121, 713, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 701, 0, 246,
	0, 125, 126, 127, 128, 697, 699, 314, 0, 132,
	0, 129, 0, 313, 130, 714, 131, 715, 716, 717,
	0, 680, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 702, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 641, 0, 670, 698, 150, 718, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 692, 157, 158, 159, 160, 0, 693,
	161, 261, 162, 0, 163, 164, 165, 719, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 647, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 686, 192,
	183, 184, 193, 323, 194, 720, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 721, 199, 694, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 722, 723,
	0, 0, 208, 695, 696, 668, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 687, 216, 0, 217, 218,
	219, 274, 724, 0, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 642, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 638, 639, 673, 662, 663,
	660, 661, 652, 0, 648, 1690, 0, 0, 0, 651,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 689, 655, 0, 0, 0, 93, 94, 95, 226,
	704, 228, 705, 96, 706, 707, 0, 97, 232, 233,
	98, 658, 688, 708, 709, 236, 0, 99, 700, 0,
	681, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 682, 684, 0, 683,
	685, 109, 110, 279, 111, 710, 112, 711, 712, 739,
	113, 0, 114, 0, 0, 0, 703, 116, 0, 117,
	0, 0, 0, 646, 118, 119, 690, 691, 669, 0,
	0, 120, 121, 713, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 701, 0, 246, 0, 125, 126, 127,
	128, 697, 699, 314, 0, 132, 0, 129, 0, 313,
	130, 714, 131, 715, 716, 717, 0, 680, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 702, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 641,
	0, 670, 698, 150, 718, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 692,
	157, 158, 159, 160, 0, 693, 161, 261, 162, 0,
	163, 164, 165, 719, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 647, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 686, 192, 183, 184, 193, 323,
	194, 720, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 721, 199, 694, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 722, 723, 0, 0, 208, 695,
	696, 668, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 687, 216, 0, 217, 218, 219, 274, 724, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	642, 0, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 638, 639, 673, 662, 663, 660, 661, 652, 0,
	648, 0, 0, 0, 0, 651, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 689, 655, 0,
	0, 0, 93, 94, 95, 226, 704, 228, 705, 96,
	706, 707, 0, 97, 232, 233, 98, 658, 688, 708,
	709, 236, 0, 99, 700, 0, 681, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 682, 684, 0, 683, 685, 109, 110, 279,
	111, 710, 112, 711, 712, 0, 113, 0, 114, 0,
	0, 0, 703, 116, 0, 117, 0, 0, 0, 646,
	118, 119, 690, 691, 669, 0, 0, 120, 121, 713,
	0, 122, 0, 123, 0, 1324, 312, 0, 124, 701,
	0, 246, 0, 125, 126, 127, 128, 697, 699, 314,
	0, 132, 0, 129, 0, 313, 130, 714, 131, 715,
	716, 717, 0, 680, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 702, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 641, 0, 670, 698, 150,
	718, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 692, 157, 158, 159, 160,
	0, 693, 161, 261, 162, 0, 163, 164, 165, 719,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 647,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	686, 192, 183, 184, 193, 323, 194, 720, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 721, 199, 694,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	722, 723, 0, 0, 208, 695, 696, 668, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 687, 216, 0,
	217, 218, 219, 274, 724, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 642, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 638, 639, 673,
	662, 663, 660, 661, 652, 0, 648, 0, 0, 0,
	0, 651, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 689, 655, 0, 0, 0, 93, 94,
	95, 226, 704, 228, 705, 96, 706, 707, 0, 97,
	232, 233, 98, 658, 688, 708, 709, 236, 0, 99,
	700, 0, 681, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 682, 684,
	0, 683, 685, 109, 110, 279, 111, 710, 112, 711,
	712, 0, 113, 0, 114, 0, 0, 0, 703, 116,
	0, 117, 0, 0, 0, 646, 118, 119, 690, 691,
	669, 0, 0, 120, 121, 713, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 701, 0, 246, 0, 125,
	126, 127, 128, 697, 699, 314, 0, 132, 0, 129,
	0, 313, 130, 714, 131, 715, 716, 717, 0, 680,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	702, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 641, 0, 670, 698, 150, 718, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 692, 157, 158, 159, 160, 0, 693, 161, 261,
	162, 0, 163, 164, 165, 719, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 647, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 686, 192, 183, 184,
	193, 323, 194, 720, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 721, 199, 694, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 722, 723, 0, 0,
	208, 695, 696, 668, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 687, 216, 0, 217, 218, 219, 274,
	724, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 642, 0, 0, 0, 0, 0, 640, 0,
	0, 0, 0, 638, 639, 673, 662, 663, 660, 661,
	652, 0, 648, 1267, 0, 0, 0, 651, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 689,
	655, 0, 0, 0, 93, 94, 95, 226, 704, 228,
	705, 96, 706, 707, 0, 97, 232, 233, 98, 658,
	688, 708, 709, 236, 0, 99, 700, 0, 681, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 682, 684, 0, 683, 685, 109,
	110, 279, 111, 710, 112, 711, 712, 0, 113, 0,
	114, 0, 0, 0, 703, 116, 0, 117, 0, 0,
	0, 646, 118, 119, 690, 691, 669, 0, 0, 120,
	121, 713, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 701, 0, 246, 0, 125, 126, 127, 128, 697,
	699, 314, 0, 132, 0, 129, 0, 313, 130, 714,
	131, 715, 716, 717, 0, 680, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 702, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 641, 0, 670,
	698, 150, 718, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 692, 157, 158,
	159, 160, 0, 693, 161, 261, 162, 0, 163, 164,
	165, 719, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 647, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 686, 192, 183, 184, 193, 323, 194, 720,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 721,
	199, 694, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 722, 723, 0, 0, 208, 695, 696, 668,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 687,
	216, 0, 217, 218, 219, 274, 724, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 642, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 638,
	639, 636, 673, 662, 663, 660, 661, 652, 648, 0,
	0, 0, 0, 651, 0, 0, 0, 0, 90, 91,
	929, 92, 0, 0, 0, 0, 689, 655, 0, 0,
	0, 93, 94, 95, 226, 704, 228, 705, 96, 706,
	707, 0, 97, 232, 233, 98, 658, 688, 708, 709,
	236, 0, 99, 700, 0, 681, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 682, 684, 0, 683, 685, 109, 110, 279, 111,
	710, 112, 711, 712, 0, 113, 0, 114, 0, 0,
	0, 703, 116, 0, 117, 0, 0, 0, 646, 118,
	119, 690, 691, 669, 0, 0, 120, 121, 713, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 701, 0,
	246, 0, 125, 126, 127, 128, 697, 699, 314, 0,
	132, 0, 129, 0, 313, 130, 714, 131, 715, 716,
	717, 0, 680, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 702, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 641, 0, 670, 698, 150, 718,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 692, 157, 158, 159, 160, 0,
	693, 161, 261, 162, 0, 163, 164, 165, 719, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 647, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 686,
	192, 183, 184, 193, 323, 194, 720, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 721, 199, 694, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 722,
	723, 0, 0, 208, 695, 696, 668, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 687, 216, 0, 217,
	218, 219, 274, 724, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 642, 0, 0, 0, 0,
	0, 640, 0, 0, 0, 0, 638, 639, 673, 662,
	663, 660, 661, 652, 0, 648, 0, 0, 0, 0,
	651, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 689, 655, 0, 0, 0, 93, 94, 95,
	226, 704, 228, 705, 96, 706, 707, 0, 97, 232,
	233, 98, 658, 688, 708, 709, 236, 0, 99, 700,
	0, 681, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 2098, 0, 682, 684, 0,
	683, 685, 109, 110, 279, 111, 710, 112, 711, 712,
	0, 113, 0, 114, 0, 0, 0, 703, 116, 0,
	117, 0, 0, 0, 646, 118, 119, 690, 691, 669,
	0, 0, 120, 121, 713, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 701, 0, 246, 0, 125, 126,
	127, 128, 697, 699, 314, 0, 132, 0, 129, 0,
	313, 130, 714, 131, 715, 716, 717, 0, 680, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 702,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	641, 0, 670, 698, 150, 718, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	692, 157, 158, 159, 160, 0, 693, 161, 261, 162,
	0, 163, 164, 165, 719, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 647, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 686, 192, 183, 184, 193,
	323, 194, 720, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 721, 199, 694, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 722, 723, 0, 0, 208,
	695, 696, 668, 209, 210, 2097, 212, 0, 0, 213,
	214, 215, 687, 216, 0, 217, 218, 219, 274, 724,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 642, 0, 0, 0, 0, 0, 640, 0, 0,
	0, 0, 638, 639, 673, 662, 663, 660, 661, 652,
	0, 648, 0, 0, 0, 0, 651, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 689, 655,
	0, 0, 0, 93, 94, 95, 2096, 704, 228, 705,
	96, 706, 707, 0, 97, 232, 233, 98, 658, 688,
	708, 709, 236, 0, 99, 700, 0, 681, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 2098, 0, 682, 684, 0, 683, 685, 109, 110,
	279, 111, 710, 112, 711, 712, 0, 113, 0, 114,
	0, 0, 0, 703, 116, 0, 117, 0, 0, 0,
	646, 118, 119, 690, 691, 669, 0, 0, 120, 121,
	713, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	701, 0, 246, 0, 125, 126, 127, 128, 697, 699,
	314, 0, 132, 0, 129, 0, 313, 130, 714, 131,
	715, 716, 717, 0, 680, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 702, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 641, 0, 670, 698,
	150, 718, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 692, 157, 158, 159,
	160, 0, 693, 161, 261, 162, 0, 163, 164, 165,
	719, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	647, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 686, 192, 183, 184, 193, 323, 194, 720, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 721, 199,
	694, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 722, 723, 0, 0, 208, 695, 696, 668, 209,
	210, 2097, 212, 0, 0, 213, 214, 215, 687, 216,
	0, 217, 218, 219, 274, 724, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 642, 0, 0,
	0, 0, 0, 640, 0, 0, 0, 0, 638, 639,
	673, 662, 663, 660, 661, 652, 0, 648, 0, 0,
	0, 0, 651, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 689, 655, 0, 0, 0, 93,
	94, 95, 226, 704, 228, 705, 96, 706, 707, 0,
	97, 232, 233, 98, 658, 688, 708, 709, 236, 0,
	99, 700, 0, 681, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 682,
	684, 0, 683, 685, 109, 110, 279, 111, 710, 112,
	711, 712, 0, 113, 0, 114, 0, 0, 0, 703,
	116, 0, 117, 0, 0, 0, 646, 118, 119, 690,
	691, 669, 0, 0, 120, 121, 713, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 701, 0, 246, 0,
	125, 126, 127, 128, 697, 699, 314, 0, 132, 0,
	129, 0, 313, 130, 714, 131, 715, 716, 717, 0,
	680, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 702, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 641, 0, 670, 698, 150, 718, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 692, 157, 158, 159, 160, 0, 693, 161,
	261, 162, 0, 163, 164, 165, 719, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 647, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 686, 192, 183,
	184, 193, 323, 194, 720, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 721, 199, 694, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 722, 723, 0,
	0, 208, 695, 696, 668, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 687, 216, 0, 217, 218, 219,
	274, 724, 0, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 642, 0, 0, 0, 0, 0, 640,
	0, 0, 0, 0, 638, 639, 1296, 662, 663, 660,
	661, 652, 0, 648, 0, 0, 0, 0, 651, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	689, 655, 0, 0, 0, 93, 94, 95, 226, 704,
	228, 705, 96, 706, 707, 0, 97, 232, 233, 98,
	658, 688, 708, 709, 236, 0, 99, 700, 0, 681,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 682, 684, 0, 683, 685,
	109, 110, 279, 111, 710, 1299, 711, 712, 0, 113,
	0, 114, 0, 0, 0, 703, 116, 0, 117, 0,
	0, 0, 646, 118, 119, 690, 691, 669, 0, 0,
	120, 121, 713, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 701, 0, 246, 0, 125, 126, 1300, 128,
	697, 699, 314, 0, 132, 0, 129, 0, 313, 130,
	714, 131, 715, 716, 717, 0, 680, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 702, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 1301, 1298,
	145, 255, 144, 319, 146, 147, 149, 148, 641, 0,
	670, 698, 150, 718, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 692, 157,
	158, 159, 160, 0, 693, 161, 261, 162, 0, 163,
	164, 165, 719, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 647, 182, 0, 186, 187, 188, 1302, 0,
	264, 190, 191, 686, 192, 183, 184, 193, 323, 194,
	720, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	721, 199, 694, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 722, 723, 0, 0, 208, 695, 696,
	668, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	687, 216, 0, 217, 218, 219, 274, 724, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 1297, 224, 642,
	0, 0, 0, 0, 0, 640, 0, 0, 0, 0,
	638, 639, 673, 662, 663, 660, 661, 652, 0, 648,
	0, 0, 0, 0, 651, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 689, 655, 0, 0,
	0, 93, 94, 95, 226, 704, 228, 705, 96, 706,
	707, 0, 97, 232, 233, 98, 658, 688, 708, 709,
	236, 0, 99, 700, 0, 681, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 682, 684, 0, 683, 685, 109, 110, 279, 111,
	710, 112, 711, 712, 0, 113, 0, 114, 0, 0,
	0, 703, 116, 0, 117, 0, 0, 0, 646, 118,
	119, 690, 691, 669, 0, 0, 120, 121, 713, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 701, 0,
	246, 0, 125, 126, 127, 128, 697, 699, 314, 0,
	132, 0, 129, 0, 313, 130, 714, 131, 715, 716,
	717, 0, 680, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 702, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 670, 698, 150, 718,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 692, 157, 158, 159, 160, 0,
	693, 161, 261, 162, 0, 163, 164, 165, 719, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 1314, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 686,
	192, 183, 184, 193, 323, 194, 720, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 721, 199, 694, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 722,
	723, 0, 0, 208, 695, 696, 668, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 687, 216, 0, 217,
	218, 219, 274, 724, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1310, 1311, 673, 662,
	663, 660, 661, 652, 0, 1313, 0, 0, 0, 0,
	651, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 689, 655, 0, 0, 0, 93, 94, 95,
	226, 704, 228, 705, 96, 706, 707, 0, 97, 232,
	233, 98, 0, 688, 708, 709, 236, 0, 99, 700,
	0, 681, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 682, 684, 0,
	683, 685, 109, 110, 279, 111, 710, 112, 711, 712,
	0, 113, 0, 114, 0, 0, 0, 703, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 690, 691, 669,
	0, 0, 120, 121, 713, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 701, 0, 246, 0, 125, 126,
	127, 128, 697, 699, 314, 0, 132, 0, 129, 0,
	313, 130, 714, 131, 715, 716, 717, 0, 680, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 702,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	0, 0, 670, 698, 150, 718, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	692, 157, 158, 159, 160, 0, 693, 161, 261, 162,
	0, 163, 164, 165, 719, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 1314, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 686, 192, 183, 184, 193,
	323, 194, 720, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 721, 199, 694, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 722, 723, 0, 0, 208,
	695, 696, 668, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 687, 216, 0, 217, 218, 219, 274, 724,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 0, 0, 673, 662, 663, 660, 661, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 1313, 92, 0, 0, 0, 651, 689, 655, 0,
	0, 0, 93, 94, 95, 0, 704, 228, 705, 96,
	706, 707, 0, 97, 232, 233, 98, 658, 688, 708,
	709, 236, 0, 99, 700, 0, 681, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	2098, 0, 682, 684, 0, 683, 685, 109, 110, 279,
	111, 710, 112, 711, 712, 0, 113, 0, 114, 0,
	0, 0, 703, 116, 0, 117, 0, 0, 0, 646,
	118, 119, 690, 691, 669, 0, 0, 120, 121, 713,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 701,
	0, 246, 0, 125, 126, 127, 128, 697, 699, 0,
	0, 132, 0, 129, 0, 313, 130, 714, 131, 715,
	716, 717, 0, 680, 0, 0, 133, 316, 134, 135,
	0, 137, 136, 0, 702, 317, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 641, 0, 670, 698, 150,
	718, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 692, 157, 158, 159, 160,
	0, 693, 161, 261, 162, 0, 163, 164, 165, 719,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 647,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	686, 192, 183, 184, 193, 0, 194, 720, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 721, 199, 694,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	722, 723, 0, 0, 208, 695, 696, 668, 209, 210,
	2097, 212, 0, 0, 213, 214, 215, 687, 216, 0,
	217, 218, 219, 274, 724, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 638, 639, 0,
	0, 0, 90, 91, 0, 92, 648, 0, 0, 0,
	689, 651, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 688, 234, 235, 236, 0, 99, 700, 0, 681,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 682, 684, 0, 683, 685,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 690, 691, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 701, 0, 246, 0, 125, 126, 127, 128,
	697, 699, 314, 0, 132, 0, 129, 0, 313, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 702, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 0, 0,
	0, 698, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 692, 157,
	158, 159, 160, 0, 693, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 686, 192, 183, 184, 193, 323, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 694, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 695, 696,
	0, 209, 210, 211, 212, 545, 0, 213, 214, 215,
	687, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 1584,
	0, 234, 235, 236, 0, 99, 237, 0, 310, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 314, 0, 132, 0, 129, 0, 313, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 254, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 71, 264,
	190, 191, 0, 192, 183, 184, 193, 323, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 73, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 549, 275, 0, 0, 220,
	0, 0, 0, 69, 221, 222, 223, 224, 0, 70,
	545, 764, 0, 874, 871, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 68, 92,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 310, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 877, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 868, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 314, 0, 132, 0,
	129, 0, 313, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 254, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 869, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 867, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 545, 764, 220, 874, 871, 866, 0, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 875, 872, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 310, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 862, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 868, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 314, 0,
	132, 0, 129, 0, 313, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 254, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 869, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 867, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 545, 764, 220, 874, 871, 866,
	0, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 875, 872, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 310, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 868, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	314, 0, 132, 0, 129, 0, 313, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 254, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 869, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 867, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 875, 872,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 499,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 71,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 73, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 549, 275, 0, 0,
	220, 87, 0, 0, 69, 221, 222, 223, 224, 0,
	70, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 225, 0, 1191, 0, 1196,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 71, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	73, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 549, 275, 0, 0, 220, 87, 0, 0, 69,
	221, 222, 223, 224, 0, 70, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	225, 0, 0, 0, 68, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 499,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 87, 0, 0, 0, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 225, 0, 1191, 0, 1196,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 772, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 1102, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 1707, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 673, 662, 663, 660, 661, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 735, 0, 0, 0, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 704, 228, 705, 96, 706, 707,
	0, 97, 232, 233, 98, 0, 0, 708, 709, 236,
	0, 99, 237, 0, 310, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 710,
	112, 711, 712, 0, 113, 0, 114, 0, 0, 0,
	703, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 669, 0, 0, 120, 121, 713, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 314, 0, 132,
	0, 129, 0, 313, 130, 714, 131, 715, 716, 717,
	0, 680, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 254, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 0, 0, 670, 256, 150, 718, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 719, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 323, 194, 720, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 721, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 722, 723,
	0, 0, 208, 272, 273, 668, 209, 210, 211, 212,
	545, 764, 213, 214, 215, 762, 216, 0, 217, 218,
	219, 274, 724, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 310, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 314, 0, 132, 0,
	129, 0, 313, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 254, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 83, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 82, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 545, 764, 0, 0, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 86, 0, 0, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 310, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	314, 0, 132, 0, 129, 0, 313, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 254, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 545, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 86,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 310,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 314, 0, 132, 0, 129, 0, 313, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 254, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 323, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 1059, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 1057, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 1167, 0, 120,
	121, 244, 0, 122, 0, 123, 1062, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 1165, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 1061, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 1166, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 1059, 99, 237, 0, 0, 1054, 100,
	101, 102, 0, 103, 1057, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 1062, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 1053, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 1061, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 1060, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 1674,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 499, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 891,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 797, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 499, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 557, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 511, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 499, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 504, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	499, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 409, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 408, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 1360, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 1358, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 1347, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 920, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 423,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 782, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 0, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 613, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 608, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 563, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 435, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 434, 270, 271, 0, 0, 430, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 435, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 434, 270, 271, 0, 0, 430, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 541, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 538, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 535, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 533, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 507, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 488, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 428, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 426, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 435, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 429, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 427, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 434, 270, 271, 0, 0, 430,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 0, 160, 0, 260, 161, 261, 162, 0,
	163, 0, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 0, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 978, 0, 0, 0,
	0, 0, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 946, 0, 967, 0,
	0, 0, 961, 0, 0, 947, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 952, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 978, 0,
	971, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 977, 0, 946, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 969, 0,
	0, 0, 971, 979, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	969, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 971, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 963, 0, 0, 0, 0, 0,
	0, 1558, 0, 0, 0, 0, 0, 0, 972, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 0, 0, 0, 0,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 978, 0, 0, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 946, 0, 0, 0,
	2036, 0, 961, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 952, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 962, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 2034, 0,
	0, 0, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 978, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 946, 0,
	0, 0, 1979, 0, 961, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 952, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 962, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	1974, 0, 0, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	978, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	946, 0, 0, 0, 1970, 0, 961, 0, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 952, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 979,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 1909, 0, 0, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	0, 0, 978, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 946, 0, 0, 0, 1887, 0, 961, 0,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 952, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	962, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 1886, 0, 0, 0, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 978, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 946, 0, 0, 0, 1776, 0,
	961, 0, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 952,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 962, 952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 979, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 1710, 0, 0, 0,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 978, 0, 0, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 946, 0, 0, 0,
	1694, 0, 961, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 952, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 962, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 1268, 0,
	0, 0, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 978, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 946, 0,
	1485, 0, 0, 0, 961, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 952, 2119, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 962, 952, 0, 1550,
	0, 0, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 2118, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 1183, 0, 947, 963, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 970,
	946, 0, 958, 959, 960, 973, 961, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 952, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	977, 944, 945, 0, 964, 965, 966, 974, 975, 976,
	0, 0, 969, 0, 0, 0, 0, 967, 962, 0,
	0, 981, 0, 0, 947, 0, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 944, 945, 0, 964, 965, 966, 974, 975, 976,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 947, 0, 963, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 952, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 971, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 970, 952, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	968, 971, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 969,
	0, 0, 0, 0, 967, 962, 0, 0, 0, 0,
	0, 947, 0, 963, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	968, 483, 0, 0, 946, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 970, 952,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 971, 979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 970, 0,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	963, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 1698, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 952, 958, 959,
	960, 973, 1556, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 971, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 0, 0, 969, 0, 0, 0, 0, 967,
	962, 0, 0, 1551, 0, 0, 947, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 947, 0, 963, 978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 952, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 971, 979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 970, 952, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 968, 971, 979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 969, 0, 0, 0, 0, 967, 962, 0, 0,
	1509, 0, 0, 947, 0, 963, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 968, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 961, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	970, 952, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 0,
	971, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	970, 0, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	978, 0, 963, 0, 0, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 972, 0, 0, 0,
	946, 0, 967, 0, 0, 0, 961, 0, 0, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 971, 979, 0, 0, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 952, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 947, 969, 0, 978, 0, 971, 979, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 946, 0, 0, 0, 0, 0,
	961, 0, 0, 968, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 952,
	0, 944, 945, 0, 964, 965, 966, 974, 975, 976,
	972, 0, 0, 0, 0, 0, 0, 0, 971, 979,
	0, 0, 0, 0, 947, 0, 0, 978, 963, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 969, 946, 0, 0,
	0, 0, 962, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	963, 971, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 823, 815, 840, 808, 831, 830, 0,
	0, 810, 809, 0, 0, 0, 842, 841, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 0, 0, 836, 0,
	828, 827, 0, 963, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 817, 819, 820, 821, 0,
	839, 0, 0, 0, 0, 0, 823, 815, 840, 808,
	831, 830, 0, 0, 810, 809, 0, 0, 970, 842,
	841, 958, 959, 960, 973, 812, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 829, 0, 0,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 828, 827, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 824, 0, 0, 0,
	1202, 1200, 1201, 1204, 1203, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 814, 0, 818, 817, 819,
	820, 821, 0, 839, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 837, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 843, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	837, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 843,
}
var sqlPact = [...]int{

	4053, -1000, 50, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 734, 16345, 16345, 20281, -1000, -1000, -1000, -1000, -1000,
	-1000, 688, 667, 1083, 5371, 20281, 20281, 20002, 1953, 1953,
	21676, -1000, -1000, 25024, -1000, 3434, 522, 530, 522, 522,
	535, 21676, 20281, 664, 682, 152, -1000, 753, 32, 24745,
	20281, 1430, 48, 18328, 344, 4053, 19723, 24466, 20281, 19444,
	629, 46, 16919, 20281, -1000, 52, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1267, 342, 52, -1000,
	1265, 1172, 1149, 18328, 24187, 23908, 23629, 23350, -1000, 12581,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 807, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 352, 351, -1000, 19165, -1000,
	961, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 957, -1000, 20281, -1000, -1000, 23071, 22792, 744, 348,
	945, -1000, -1000, 593, 424, 1439, -1000, 57, -1000, 1417,
	742, -1000, -1000, 1263, -1000, 954, 1262, 1260, 1259, 1257,
	1256, 1255, 420, 893, 507, -1000, 1253, 945, -1000, 945,
	-1000, -1000, -1000, 614, 21676, -1000, -1000, 18328, -1000, 22513,
	20281, 20281, 1186, 22234, -1000, 753, -1000, -1000, -1000, 983,
	1429, 1429, 1429, 1464, 145, 141, 152, 25, 20281, -1000,
	345, 25, 9481, 9481, -1000, -1000, 344, -1000, 376, 15484,
	-1000, 8533, -1000, 803, 1318, 511, 738, 1317, -137, 804,
	801, 1316, 16066, 16919, 46, 45, -1000, -1000, -1000, 5068,
	16066, 685, 14647, 52, -1000, -1000, -1000, 18328, 20281, 20281,
	747, 21955, -1000, 1315, 124, 1314, -1000, 123, 1313, -1000,
	123, 1311, 42, -1000, -1000, -1000, -1000, -1000, -1000, 344,
	18886, 20281, 1551, 29689, -1000, 10746, -1000, -1000, 16345, 1043,
	16345, -1000, -1000, 1542, -1000, 20281, 10746, -1000, 44, 43,
	1110, 1128, 13178, 12886, 1363, 875, -1000, -1000, -1000, 55,
	5371, 702, 18607, 20281, 1274, 16345, 20281, 20281, 20281, 20281,
	20281, 20281, -1000, 1097, -1000, -1000, 20281, 20281, 793, -1000,
	37, 33, -1000, 21676, -1000, 130, -1000, 343, 1045, 433,
	151, 21397, 433, 1035, -1000, 983, -1000, 943, 1093, 9798,
	10746, 152, -1000, -1000, 152, 152, 10746, -1000, -1000, 20281,
	25, 1534, 20281, 104, -1000, 28281, -1000, -1000, 10746, 10746,
	10746, 10746, 10746, 912, 370, -1000, 341, 340, 6307, -1000,
	-1000, 1653, -1000, -1000, -1000, 166, -1000, -1000, 10746, 52,
	-1000, -1000, -1000, -1000, 338, 1674, -1000, 427, -1000, -1000,
	-1000, 430, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1273, 332, 323, -1000, -1000, -1000, -1000, 319, 318,
	314, 313, 311, 310, 305, 304, 302, 301, 300, 299,
	295, 294, 293, 884, -1000, 461, -1000, -1000, 461, 461,
	-1000, 276, 276, 284, -1000, -1000, -1000, -1000, 276, -1000,
	-1000, -1000, 414, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	291, 104, -1000, -1000, -1000, 20281, 41, -1000, 29204, -1000,
	1, 811, -1000, 17770, 1440, 1425, 1377, 18328, 1505, 32,
	1250, 1504, 32, 1249, 611, 20281, 20281, 600, 599, 18328,
	406, -1000, -1000, -1000, -1000, -1000, 20281, -1000, -1000, 40,
	-1000, -1000, 1246, 35, -1000, -1000, 439, 98, 1530, 98,
	14926, -1000, 20281, 20281, -1000, 20281, -1000, -1000, 20281, -1000,
	20281, 20281, -1000, 20281, 640, 17212, 828, 1309, 823, 32,
	34, -1000, 1553, -1000, -1000, -1000, -1000, 91, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 284, 884, 276, 276, 276,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 414, -1000, -1000,
	461, 461, 461, -1000, -1000, 29, 29204, 595, -1000, 1245,
	513, -1000, 425, 22, 825, 1142, 873, -1000, -1000, -1000,
	-1000, 24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1619, -1000, -1000, 1650, 24, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1672, 5371, -1000, -1000,
	-1000, -1000, -1000, -1000, 20281, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20281, 20281, 825, 1142, -1000,
	-1000, 18328, 17491, 1523, 1308, 883, -1000, 1520, 20281, 950,
	1030, -1000, 645, 1306, -1000, -1000, -1000, -1000, 29204, -1000,
	29204, 879, 1175, -1000, 1175, 20, -1000, 28144, -1000, 269,
	11, 439, 9481, 14352, 29576, 29689, 5371, 651, 10746, 10746,
	10746, 10746, 10746, 10746, 10746, 10746, 10746, 10746, 10746, 10746,
	10746, 10746, 10746, 10746, 10746, 10746, 10746, 10746, 10746, 10746,
	1184, 10746, 592, 10746, 10746, 10746, 10746, 1182, 956, 244,
	999, 5371, -1000, -1000, 1601, 1601, 1601, 29328, 29328, 200,
	370, -1000, 10746, -1000, 9165, 141, 27570, 10, -1000, -1000,
	-1000, 7256, 447, 29204, 52, 5990, -1000, 1649, 732, 1286,
	1212, 267, 138, 136, 10746, 10746, 11062, 11062, 10746, 11378,
	10746, 10746, 6623, 10746, 10746, 10746, 10746, 10746, 10746, -1000,
	255, -1000, -1000, -1000, -1000, 1646, -1000, -1000, 1645, -1000,
	639, 638, 1644, 439, 135, 8533, -1000, 828, 20281, 20281,
	20281, -1000, -1000, 1016, 21118, 1014, 29689, 20281, -1000, 251,
	250, 1133, 1132, 20281, 20281, 20839, 20560, 20281, 780, 32,
	-1000, 249, 32, -1000, 248, 20281, 797, -1000, 20281, 20281,
	783, 1198, 967, -1000, 436, 16066, 683, 1243, 20281, 771,
	10746, 848, -1000, 14057, 467, 20281, 771, 102, -1000, -1000,
	-1000, 401, 20281, -1000, -1000, -1000, 124, -1000, 123, 123,
	-1000, -1000, 18328, -1000, -1000, -1000, -1000, -1000, -1000, 29689,
	369, 368, -1000, 1642, 586, -1000, 580, 577, 574, -1000,
	245, -1000, 10746, 20281, 20281, 1142, -1000, -1000, -1000, -1000,
	721, -1000, 820, -1000, 13470, -1000, -1000, -1000, -1000, -23,
	-1000, -1000, -1000, -1000, -1000, -1000, 134, 2, 6, 29689,
	-1000, -1000, -1000, -1000, -1000, 20281, 286, 20281, 32, 20281,
	-1000, 1669, 32, 20281, 1305, 1325, 395, 20281, -1000, -1000,
	-1000, 10746, -1000, -1000, -1000, 32, -1000, 1210, -1000, -95,
	1199, 979, -144, 140, 412, -1000, 13762, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, 569, 569,
	606, 606, 606, 606, 1577, 2137, 287, 2248, 188, 188,
	188, 2070, 334, 334, 188, 188, 188, 29328, 29236, 227,
	10746, 10746, 573, 930, 244, 227, 10746, 227, 227, 227,
	227, -1000, 1185, -1000, -1000, -1000, -1000, 1238, 243, 11378,
	11378, -1000, -1000, -1000, 6307, 11694, -1000, -1000, -1000, -1000,
	-1000, 241, 10746, -1000, 27624, -168, -3, -1000, -1000, 10746,
	-129, -130, -1000, -1000, 670, -1000, 10746, -1000, -8, 10746,
	10746, 10746, 129, 128, -1000, 920, 238, 236, 10746, -1000,
	-1000, 29010, 25632, 125, 1236, -128, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 122, 121, 28873, -128, 120, 3869, -1000,
	11378, 11378, 11378, 6307, 235, 119, 27946, -128, 28813, 8849,
	8849, 8849, 116, 28676, 10746, -128, 25600, 3907, 3815, -7,
	-14, -15, 1640, -16, 115, 417, 415, 114, 1210, -1000,
	-1000, -1000, -1000, 572, 557, 1303, -1000, 1013, -1000, 481,
	-1000, 785, 10746, 12302, 233, 231, 855, -1000, 1302, 977,
	1301, 977, -1000, 1, 755, -1000, 10746, -1000, 10746, -1000,
	554, -1000, -1000, 549, 436, 1235, 674, -1000, 934, -1000,
	-1000, 681, -1000, -1000, 6939, 29204, -1000, 771, 1387, -21,
	-1000, -1000, -1000, 439, 14926, 14352, 8533, -22, -1000, -1000,
	-1000, 828, -1000, 485, 1630, 113, 1060, 921, 849, 756,
	1629, 29204, -23, -23, -1000, -1000, -1000, -1000, -1000, 20281,
	1190, -1000, 17491, 229, 20281, 226, -1000, 214, -1000, -1000,
	212, 20281, 1117, 395, 16640, -1000, 433, -1000, 110, 1204,
	1436, -1000, 14352, 1140, 1129, 14352, 1232, 922, 922, 922,
	-1000, 211, 936, 362, 412, 4448, 10746, 18049, 925, 75,
	109, 1199, 10746, 227, 227, 10746, 11378, 11378, -1000, 227,
	-1000, -1000, -1000, -1000, -1000, 1229, 209, 10746, 29689, 3676,
	3005, -26, -1000, 8217, -39, -1000, 10746, -1000, 27302, -1000,
	-1000, 366, 1322, -1000, 10746, 28478, 108, 7901, -1000, 28341,
	-9, -9, -1000, 1667, -1000, 15205, 440, 928, 27248, 29576,
	29689, -1000, 10746, -1000, -1000, 1227, 10746, -1000, 29576, 29689,
	11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378,
	11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 1150,
	11378, 1582, 1582, 1582, -70, 7585, -1000, 1231, 1227, 10746,
	10746, 29689, 103, 95, 94, -1000, 10746, -128, 10746, 10746,
	10746, -1000, -1000, -1000, 93, -1000, 1628, -1000, -1000, -1000,
	-1000, 1204, 20281, 20281, 20281, 1299, -1000, 1336, -1000, 26980,
	-27, -1000, 329, 1399, 10746, -1000, -1000, 208, 12302, 20281,
	-1000, 1119, 1116, 500, 20281, -1000, 20281, -1000, 20281, 20281,
	20281, -28, -35, 20281, 20281, -1000, 16066, 634, 207, -1000,
	-77, -1000, -1000, 230, 32, 771, -1000, -84, -1000, 398,
	-1000, 361, 360, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 86, -1000, -1000, 1193, -1000, 12302, 206, 20281, 17491,
	1518, 12302, 944, 1120, 395, 16640, -1000, 645, -1000, 431,
	10746, 10746, 1199, 14352, 14352, 985, 1121, 14352, -1000, -1000,
	-1000, -1000, 359, 375, 356, 12581, 412, 18049, -1000, 1622,
	1112, -37, -1000, -1000, 20281, 204, -1000, 412, 1567, 227,
	2152, 165, 10746, 29689, 29431, -49, 10746, 10746, -1000, -50,
	-1000, 10746, 355, 29204, -1000, -1000, -1000, 29204, 10746, 1658,
	10746, 85, 84, 80, -1000, -1000, -1000, 25303, 10746, 79,
	-1000, 77, 76, 29204, 1231, 29204, -1000, -1000, 429, 429,
	694, 694, 694, 694, 1582, 914, 990, 2098, 691, 691,
	691, 2083, 632, 632, 691, 691, 691, 1222, 1069, 199,
	4067, 10746, -51, -1000, -1000, -1000, 29204, 29204, 74, -1000,
	-1000, -1000, -128, 3490, 26926, 26658, -1000, 73, 431, -1000,
	-1000, -1000, 20281, -1000, 20281, -1000, 5371, 20281, 1228, 1005,
	-1000, -1000, 1122, 198, 11378, 20281, -1000, 891, 12302, 1407,
	52, 5371, 1407, 26604, 5990, -56, -57, 987, -1000, 986,
	10746, -1000, 29689, 977, 977, -1000, 548, 544, 543, 539,
	-1000, -1000, -90, 15787, 1664, 1339, 20281, 1373, -1000, -1000,
	197, -1000, -1000, -1000, 908, -61, 12302, -63, 71, 32,
	-65, 20281, -1000, 395, 16640, -1000, 1325, -1000, 20281, 29204,
	-128, -1000, 985, -1000, 195, 10746, 14352, -1000, -144, -1000,
	-69, -1000, 412, -75, 18049, -1000, 288, -166, -1000, 387,
	-1000, 412, 191, 20281, 18049, 10746, 10746, 29431, -76, -1000,
	227, 227, -1000, 26336, -1000, 29204, -1000, 28341, -1000, -1000,
	-1000, 900, -1000, 26282, -1000, -1000, -1000, -1000, 11378, 1220,
	190, 29689, 26014, -1000, -1000, 10746, -1000, -1000, -1000, -1000,
	-1000, 885, -1000, -1000, 20281, 1008, -1000, -1000, 10746, 4067,
	189, 1190, 185, -1000, -1000, -1000, -1000, -1000, -1000, 1399,
	-8, -1000, 814, -1000, -1000, 29204, 1397, -1000, -1000, 20281,
	20281, 172, 171, -1000, 170, 52, -80, -1000, 203, 608,
	-82, 20281, -1000, -1000, 5674, 20281, 891, -86, -1000, 1190,
	-1000, 891, 169, 16640, -1000, 1117, -101, -1000, 1515, -1000,
	20281, 29204, -1000, 412, -1000, 1612, 18049, 640, -1000, -1000,
	1112, -1000, 4762, 18049, 20281, -88, -1000, 227, 227, -1000,
	-1000, 67, 928, 1431, -1000, 4089, 11378, 29689, -96, -1000,
	25960, -1000, -1000, 1298, 25692, 1078, 20281, -1000, 20281, 1407,
	66, 20281, 483, 5371, -1000, -1000, 10746, 10746, 10746, 1664,
	-1000, -1000, 1659, 739, -1000, 439, -1000, 167, 1190, 891,
	-1000, 1190, 12302, -1000, 1120, 20281, 163, -97, 18049, -1000,
	-1000, 228, -1000, -1000, 1608, -1000, -102, -1000, -1000, 787,
	10746, 4089, -103, -1000, -1000, 1291, -1000, 938, 861, 65,
	-109, -1000, -1000, 151, -1000, 10746, -1000, -119, -120, -9,
	-1000, -1000, 14926, -1000, 20281, -1000, 1190, -1000, -138, -1000,
	-1000, -1000, -1000, -1000, 412, 126, -1000, 60, 10430, 10430,
	-128, -1000, 20281, -1000, 942, 939, 698, -1000, -1000, -1000,
	-1000, -1000, 1078, 29204, -1000, -1000, 59, -131, -145, -1000,
	891, 18049, -1000, -1000, -1000, -1000, 11999, 941, 764, 27892,
	-1000, -1000, -1000, 1344, -1000, 493, 1106, 1106, 938, 1658,
	-1000, 951, 1190, -1000, 1558, -1000, -1000, -1000, -1000, -1000,
	-1000, 1571, -1000, -1000, 1096, -1000, -1000, -1000, -1000, -1000,
	-1000, 10114, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1906, 1903, 1500, 1569, 1902, 1899, 1567, 1898, 1896,
	1893, 1892, 1890, 1889, 118, 1565, 1562, 25, 1558, 1888,
	113, 1886, 1884, 1883, 116, 1882, 1881, 1880, 1879, 56,
	1878, 1875, 109, 1556, 1546, 1464, 1873, 1861, 111, 1859,
	11, 1857, 94, 1850, 68, 173, 2509, 149, 1847, 1843,
	1842, 19, 128, 90, 1841, 106, 1839, 1836, 64, 37,
	24, 20, 1834, 124, 138, 1439, 32, 1833, 1831, 154,
	1830, 36, 30, 755, 163, 160, 145, 139, 1827, 1826,
	1823, 1821, 61, 1820, 3, 1819, 1817, 12, 88, 26,
	1814, 55, 31, 1813, 1810, 144, 1809, 92, 125, 1449,
	123, 141, 692, 1808, 91, 10, 89, 1806, 1805, 147,
	43, 1796, 40, 97, 152, 1795, 66, 166, 81, 38,
	82, 120, 1792, 1791, 1790, 107, 1789, 130, 86, 1788,
	1787, 96, 1786, 150, 148, 1785, 1780, 140, 1779, 1778,
	158, 172, 1777, 1772, 164, 1771, 8, 49, 76, 18,
	1448, 1447, 126, 65, 13, 23, 1770, 1959, 1249, 1172,
	42, 101, 67, 58, 102, 59, 69, 153, 60, 1766,
	1764, 129, 1762, 1761, 1760, 1759, 1758, 99, 1757, 1756,
	85, 151, 14, 15, 22, 114, 21, 143, 103, 133,
	161, 131, 1755, 108, 136, 50, 98, 1753, 1751, 1922,
	135, 1750, 1749, 1748, 1887, 1781, 1703, 264, 1747, 1745,
	1598, 634, 1742, 1741, 75, 1740, 134, 1739, 1738, 157,
	273, 95, 1737, 41, 100, 121, 1736, 122, 52, 0,
	683, 666, 1735, 142, 93, 1733, 1732, 1731, 1730, 27,
	2, 9, 5, 6, 4, 53, 39, 1729, 1728, 146,
	28, 87, 1722, 162, 1717, 1715, 1714, 44, 1706, 16,
	1705, 17, 1704, 1702, 7, 1, 1696, 1693, 155, 1688,
	127, 1686, 1505, 1685, 159, 1684, 1680, 1543, 73, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 18,
	269, 269, 271, 271, 33, 33, 34, 34, 35, 35,
	35, 35, 10, 10, 11, 11, 82, 82, 83, 83,
	148, 148, 148, 148, 84, 84, 56, 56, 56, 147,
	237, 237, 238, 238, 238, 238, 238, 238, 239, 239,
	239, 239, 239, 239, 239, 235, 235, 236, 233, 233,
	234, 234, 234, 234, 275, 275, 146, 146, 87, 87,
	242, 242, 242, 242, 240, 240, 240, 240, 240, 243,
	241, 244, 244, 244, 244, 244, 181, 181, 181, 37,
	12, 62, 62, 13, 9, 9, 130, 130, 91, 91,
	186, 186, 186, 72, 72, 51, 51, 51, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 131,
	131, 132, 132, 25, 30, 36, 36, 36, 36, 36,
	277, 277, 68, 68, 68, 68, 69, 69, 144, 144,
	144, 144, 144, 63, 8, 8, 58, 58, 59, 59,
	60, 60, 61, 61, 278, 278, 24, 24, 24, 75,
	75, 137, 137, 137, 139, 139, 138, 138, 138, 116,
	116, 116, 38, 96, 96, 105, 105, 106, 106, 192,
	107, 107, 29, 29, 46, 46, 44, 44, 44, 44,
	44, 44, 45, 45, 47, 47, 47, 47, 47, 47,
	47, 250, 250, 250, 253, 253, 249, 251, 251, 252,
	252, 276, 276, 117, 117, 117, 86, 85, 85, 89,
	89, 88, 90, 90, 185, 114, 114, 114, 114, 133,
	134, 134, 135, 135, 136, 136, 113, 113, 165, 165,
	48, 48, 95, 95, 97, 97, 155, 155, 155, 156,
	156, 154, 154, 154, 154, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 266, 266, 266, 267, 267, 184,
	184, 188, 188, 188, 188, 188, 188, 182, 182, 182,
	182, 183, 183, 193, 193, 120, 120, 120, 120, 118,
	118, 119, 119, 189, 189, 189, 189, 115, 115, 190,
	190, 190, 149, 149, 196, 196, 196, 214, 214, 94,
	94, 94, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 198, 198,
	198, 198, 200, 200, 200, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 213,
	213, 213, 213, 213, 201, 201, 208, 208, 209, 209,
	210, 211, 202, 202, 203, 203, 204, 205, 212, 212,
	212, 212, 216, 216, 206, 206, 206, 206, 206, 207,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 128, 128, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 159, 159,
	159, 159, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 245, 245, 245, 245, 245, 245, 245,
	247, 247, 248, 248, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 254, 254, 255, 255, 257, 257, 258, 258, 259,
	260, 260, 260, 261, 262, 262, 256, 256, 263, 263,
	263, 264, 264, 265, 265, 265, 265, 265, 171, 171,
	171, 172, 172, 173, 179, 179, 179, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 70, 70, 70, 70, 70, 102, 102,
	168, 168, 166, 166, 166, 170, 170, 121, 121, 215,
	215, 215, 215, 215, 215, 215, 122, 122, 122, 129,
	123, 123, 124, 124, 124, 124, 124, 124, 162, 163,
	125, 125, 125, 164, 164, 174, 178, 178, 177, 176,
	176, 175, 175, 152, 152, 153, 153, 151, 150, 110,
	110, 109, 109, 108, 108, 279, 279, 180, 180, 111,
	111, 112, 104, 104, 191, 191, 191, 191, 98, 98,
	77, 77, 99, 99, 73, 73, 76, 76, 74, 74,
	74, 74, 92, 92, 93, 93, 71, 71, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 217,
	217, 217, 167, 65, 65, 65, 66, 66, 67, 67,
	222, 222, 222, 223, 223, 223, 223, 221, 221, 221,
	221, 221, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 2,
	2, 0, 2, 0, 6, 6, 5, 5, 4, 12,
	4, 12, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 6, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 7, 4, 6, 3, 1,
	5, 6, 9, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 245, 35, 254, 60, 97,
	228, 221, 222, 279, 68, -250, -47, -45, 327, 302,
	308, 237, -48, 263, 294, 330, 263, 133, 80, 297,
	-268, -99, 263, 80, -74, -65, 320, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 244, 255, 233, 234, 235, 236,
	239, 240, 242, 245, 247, 250, 253, 254, 256, 259,
	257, 252, 262, 264, 265, 266, 267, 268, 275, 279,
	280, 281, 282, 285, 286, 287, 289, 291, 292, 293,
	298, 303, 304, 305, 306, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 50, 51, 52, 55, 82, 84,
	85, 100, 103, 104, 110, 120, 122, 128, 129, 138,
	140, 141, 142, 144, 155, 169, 179, 181, 192, 196,
	202, 204, 210, 230, 238, 248, 249, 258, 260, 270,
	271, 272, 276, 277, 294, 295, -268, -73, -65, 80,
	89, 137, 287, 286, 80, 133, 263, 297, -17, 327,
	-29, -7, -15, -4, -24, -38, -14, -32, -18, -33,
	-34, -35, -16, 23, -221, 4, -229, -231, -230, -232,
	57, 69, 117, 136, 130, 146, 148, 156, 158, 171,
	193, 195, 227, 246, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 56, 58, 64,
	68, 72, 73, 74, 75, 76, 77, 86, 88, 90,
	91, 92, 95, 97, 99, 105, 106, 107, 113, 115,
	116, 118, 121, 123, 131, 133, 135, 143, 145, 151,
	154, 159, 161, 162, 176, 177, 178, 184, 186, 187,
	189, 190, 201, 206, 213, 225, 237, 241, 251, 261,
	263, 269, 273, 274, 278, 283, 284, 288, 290, 296,
	297, 299, 300, 301, 302, -65, -65, -65, 205, 22,
	-272, 22, -273, -274, 68, 94, 118, 237, 137, 89,
	286, -272, -69, 233, -65, -141, 160, 240, 54, 230,
	275, -142, -140, -220, 270, 170, -100, -65, 4, 22,
	54, 241, 80, 59, 81, 119, 133, 134, 64, 65,
	150, 264, 270, 275, 68, 289, 266, -277, 275, 275,
	-277, -277, -68, 275, 273, -69, -220, -276, 263, 263,
	288, 297, -130, 80, 284, -45, -47, -46, -88, -89,
	283, 143, 99, 190, -44, -46, -250, -253, 211, -249,
	-65, -253, -85, -86, 22, 91, 331, -189, -73, 187,
	-112, 327, -3, -189, 128, -73, -76, 128, -73, -65,
	-189, 128, 273, 331, -99, -92, -65, -151, -150, 329,
	116, 116, 327, -109, -110, -150, -151, 116, 145, 145,
	-190, -189, -65, 128, -77, 128, -76, -101, 128, -100,
	-101, 128, -195, -194, -223, 4, -229, -231, -230, 294,
	263, 133, -169, 327, -126, 327, -65, 22, 186, 331,
	186, -65, -141, 52, -141, 243, 327, -143, -63, -64,
	147, 207, 273, 312, 116, 306, -81, 5, 86, -103,
	329, 54, 243, 116, -269, 186, 116, 116, 116, 116,
	116, 116, 306, 147, 207, 255, 263, 297, 116, -144,
	-63, -64, -144, 273, -69, -115, -189, -100, 128, -65,
	-100, 133, -65, 128, -88, -89, -114, -133, -134, 159,
	184, -117, 22, 91, -117, -117, 44, 328, 328, 331,
	-253, -93, 327, -104, -191, -157, 320, -159, 318, 319,
	313, 176, 307, -171, -161, -174, 100, 230, 327, -73,
	-160, 332, 9, -247, -46, 29, -172, -173, 48, -65,
	7, 8, 5, 6, -71, -198, -167, -207, 278, 105,
	178, -245, -246, 4, -229, -222, -199, -209, -203, -206,
	144, 57, 73, 76, 74, 77, 241, 288, 49, 28,
	103, 104, 196, 202, 260, 276, 277, 128, 179, 129,
	55, 120, 155, 93, 37, 39, 41, 42, 50, 51,
	82, 84, 85, 110, 138, 140, 141, 142, 181, 210,
	248, 258, 271, 272, 295, -230, -210, -211, -204, -205,
	-212, -104, -112, 320, -73, 327, -111, -180, -157, 86,
	-53, 219, -52, 21, 23, 94, 292, 100, 252, 267,
	234, 252, 267, 234, 219, 100, 332, 219, 219, 100,
	-227, -224, 9, -223, 5, -74, 331, -221, 320, -228,
	-227, 256, 328, -98, -73, -110, -190, -75, -73, -75,
	242, -65, 30, 100, -55, 331, 47, 224, 100, -55,
	331, 100, -55, 100, 328, 331, -189, 128, -76, 30,
	-168, -196, -197, -199, -208, -202, -206, -207, 40, 46,
	45, 268, 169, 238, 249, 38, 185, 139, 138, 140,
	141, 142, 248, 37, 210, 110, 93, 85, 84, 181,
	42, 41, -210, -211, -204, -205, 82, 271, 272, 144,
	39, 51, 50, 295, 258, -102, -157, -268, -274, -268,
	30, -140, -220, -102, 331, 331, 157, -80, 163, 175,
	125, -219, 86, -225, -218, -181, 9, 278, 105, 186,
	-224, 8, 319, -217, 7, 318, -219, 86, 71, -226,
	5, 4, -167, -181, 86, 160, -207, 329, -221, 244,
	-100, 22, -220, -271, 113, -268, -220, -220, -220, -220,
	-220, -65, 157, -220, -220, 263, 133, 331, 331, -69,
	-55, 331, 327, -87, 176, -251, 302, -87, 327, -66,
	128, -65, -251, 176, -114, -134, -133, -135, -157, 22,
	-157, -159, -45, -45, -45, -90, -185, -157, -249, 30,
	-92, -95, 331, 116, 10, 11, 56, 33, 318, 319,
	320, 321, 111, 322, 323, 316, 317, 315, 310, 311,
	312, 62, 164, 232, 13, 14, 15, 26, 189, 158,
	307, 130, 246, 313, 16, 17, 18, 146, 36, 131,
	-70, 30, 4, -78, -157, -157, -157, -157, -157, 195,
	-108, -152, 325, -46, 327, -46, -157, -102, 7, -46,
	-166, 325, -175, -157, -109, 327, 5, 327, 5, -254,
	303, 113, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 204,
	-216, 298, -216, -216, -200, 327, -200, -201, 327, -200,
	304, 308, 327, -95, -73, 331, 328, 331, 273, -131,
	64, 58, -147, 128, 58, -233, -65, 64, -234, 53,
	284, 206, 115, -131, 64, -131, 64, 64, -189, 33,
	-29, 116, 33, -29, 116, 273, -76, -65, 273, 273,
	-189, -193, 309, -65, -193, 331, 116, 328, 331, -149,
	300, -137, -29, 327, 86, 30, -137, -105, -106, -192,
	-107, -73, 327, -65, -65, -76, -77, -100, -101, -101,
	-17, -194, 100, -20, -29, -24, -38, -14, 328, 331,
	-94, 29, -127, 327, 305, 167, 83, 126, 166, -128,
	236, 328, 331, 273, 116, 275, 328, -64, -63, -79,
	209, 250, 220, 239, 331, 8, 7, 7, -221, -270,
	-65, -73, -76, -64, -63, -189, -82, -92, -83, -65,
	-148, -147, -235, -236, -233, 133, 284, 106, 30, 100,
	-62, 200, 30, 186, 176, -58, 265, 100, -136, 230,
	231, 331, -51, 31, 90, 327, 328, -149, -191, -97,
	-187, 325, -189, -73, -46, -188, 327, -214, -196, -213,
	215, 216, 214, 218, 217, -196, -221, 270, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	158, 130, 246, 36, 131, -157, 273, -157, -157, -157,
	-157, 168, 176, 178, 278, 105, 285, 91, 182, -279,
	261, 32, -164, -46, 327, -179, 27, 251, 22, -221,
	-171, 230, 327, -152, -157, -153, -102, 328, 328, 331,
	-102, -170, 326, -166, -178, -177, 299, 328, -102, 296,
	22, 91, 320, 7, -127, -255, 108, 121, 327, 328,
	328, -157, -157, -121, -215, -102, 4, 305, 167, 83,
	126, 166, 236, -121, -122, -157, -102, -123, -158, -159,
	318, 319, 313, 327, 230, -124, -157, -102, -157, 43,
	154, 274, -125, -157, 116, -102, -157, -157, -157, -102,
	-102, -102, 327, 7, 7, 270, 270, 7, -149, 328,
	-180, -52, -73, -65, -65, 176, -147, 128, -57, 176,
	-196, -65, 327, 327, 149, 149, -65, -65, 128, -65,
	128, -65, -65, -53, 219, -29, 327, -29, 327, -65,
	219, -65, -73, 219, -39, 127, 182, -42, 302, -227,
	256, 116, -73, -116, 225, -157, -116, -139, 186, -98,
	294, -65, -116, -96, 331, 116, 312, -98, -55, -55,
	-55, -189, -196, 325, 325, 7, 273, 273, 273, 273,
	327, -157, -270, -270, -63, 282, 61, 209, -225, 331,
	328, 328, 331, -66, 133, -66, -29, -100, 5, -29,
	-73, 100, -59, 96, -278, 312, -65, -185, -20, -113,
	121, -193, 331, 69, -120, 148, 171, 117, 156, 227,
	136, 7, 102, -32, -154, 332, 327, -184, 308, -46,
	-188, -187, 306, -157, -157, 273, -279, 261, -164, -157,
	168, 178, 278, 105, 285, 91, 182, 116, 327, -158,
	-158, -102, -161, 327, -102, 326, 335, 328, -157, 326,
	326, 331, -176, -177, 95, -157, -89, 331, -88, -157,
	-102, -102, 328, 328, -260, 194, 327, 327, -157, 30,
	331, 328, 116, 328, 328, -129, 201, 328, 10, 11,
	318, 319, 320, 321, 111, 322, 323, 316, 317, 315,
	310, 311, 312, 62, 164, 232, 13, 14, 15, 146,
	131, -158, -158, -158, -102, 327, 328, -162, -163, 116,
	113, 30, -125, -125, -125, 328, 116, -102, 331, 331,
	331, 328, 328, 328, 7, 328, 331, 328, 306, 306,
	328, -113, 273, 273, 100, 176, 291, -237, -234, -157,
	-91, -186, -65, -248, 327, -245, -246, -71, 327, 327,
	-50, 94, 242, -132, 100, -55, 100, -55, 273, -131,
	64, -102, -102, 273, 273, -42, 116, 262, 188, 256,
	-104, 177, -116, 63, 328, -149, -106, -97, -180, 328,
	326, 7, 7, 328, 167, 126, 166, -128, 166, -128,
	-128, 7, -65, -84, 132, -148, 327, -66, 327, 327,
	-87, 327, -65, -60, 153, -278, -224, -251, 328, -165,
	123, 44, -187, 148, 148, -187, -120, 148, -118, 193,
	-118, -118, -266, 327, -17, 327, 326, -184, -221, 325,
	333, -102, -183, -182, 30, -65, 191, 328, -157, -157,
	-158, -158, 116, 327, -157, -168, 26, 26, 328, -102,
	328, 331, -153, -157, 328, -166, 97, -157, 269, 328,
	296, -89, -89, -89, 5, -261, -65, 327, 300, -88,
	328, -214, -196, -157, -162, -157, -214, -196, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, 91, 176, 182,
	-158, 331, -102, 328, -163, -162, -157, -157, -196, 328,
	328, 328, -102, -157, -157, -157, 328, 7, -165, -65,
	-65, -147, 100, -238, 64, -239, 56, 106, 68, 176,
	178, 284, 206, 53, 86, 213, 328, 328, 331, -72,
	-109, 56, -72, -157, 327, -91, -92, 176, 86, 176,
	86, 79, 280, -65, -65, -73, -65, -65, 328, 328,
	-65, -73, -228, 270, 327, -138, 327, 186, -29, -116,
	312, 326, 326, 328, 131, -91, 327, -92, -82, 30,
	-91, 186, -61, 152, -278, -224, -58, -257, 301, -157,
	-102, -187, -187, -119, 290, 186, 148, -187, 326, 328,
	-267, 7, 326, -195, -184, -183, 7, -156, -155, 114,
	174, 328, -65, 327, -184, 26, 26, -157, -168, 328,
	-157, -157, 328, -157, 326, -157, 5, -157, 328, 328,
	328, -262, -65, -157, 328, 328, 328, -163, 116, 91,
	182, 327, -157, 328, 328, 331, 328, 328, 328, -257,
	-147, -65, -221, -65, 106, 128, 178, 149, 327, -158,
	-73, -146, -275, 67, 259, -186, -51, -221, -51, 328,
	-102, 328, 328, 178, 178, -157, -196, -55, -55, 273,
	273, 273, 273, -160, -71, -65, -41, -40, 5, 92,
	-92, 64, -112, -46, 327, 197, 328, -91, 328, 328,
	-29, 328, -73, -278, -224, -59, -258, -259, -65, -119,
	327, -157, -187, -154, 328, 331, -184, 328, -183, 326,
	331, 334, 312, -184, 327, -92, -182, -157, -157, 328,
	328, -89, -256, 199, 328, -158, 116, 327, -168, 328,
	-157, -239, -66, 176, -157, -67, 327, -84, 327, -72,
	-89, 213, -54, 56, -65, -65, 327, 327, 327, 331,
	328, -43, 312, 286, 177, 328, -65, -65, -146, 328,
	-84, -146, 327, -224, -60, 331, 30, -92, -184, 7,
	-183, -17, -155, -221, 325, -183, -92, 328, 328, -89,
	44, -158, -168, 328, 328, 100, 328, -242, 165, -65,
	-92, -51, 328, -73, -49, 290, -221, -102, -102, -102,
	-40, 5, 242, -149, 327, -84, -146, -84, -91, -61,
	-259, -261, 328, -182, 326, 7, 328, -263, 208, 231,
	-102, 328, 106, -240, -243, -241, 186, 117, 198, 247,
	328, 328, -87, -157, 328, 328, -89, -105, -92, -84,
	328, -184, 326, 328, -264, -265, 36, 281, 71, -157,
	-264, -65, -241, 186, -243, 186, 286, 89, -242, 328,
	-149, 328, -146, -183, -265, 203, 112, 230, 203, 112,
	-244, 173, 224, 47, 242, -244, -240, -56, 47, 224,
	-84, 26, 20, 178, 86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 430, 0, 0, 0, 0, 0, 0,
	0, 402, -2, 0, 157, 0, 351, 0, 351, 351,
	355, 0, 0, 432, 317, 429, -2, 440, 0, 0,
	0, 438, 416, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 963, 892, 898, 899, 923, 924, 925,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 0, 0, 894, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 229, 937, 938, 939, 940, 941,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 121, 128, 129, 1015, 131,
	0, 138, 139, 140, 142, 143, 144, 145, 146, 147,
	148, 0, 344, 1039, 357, 152, 992, 1044, 951, 1116,
	1061, 160, 170, 0, 1122, -2, 174, 97, 203, 204,
	0, 208, 209, 0, 211, 231, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 226, 0, 362, 350, 362,
	347, 348, 349, 352, 0, 343, 151, 0, 431, 0,
	0, 0, 0, 0, 316, -2, 412, 413, -2, 0,
	435, 435, 435, 0, 0, 413, 0, 421, 1019, 424,
	905, 422, 0, 0, 437, 436, 0, 417, 513, 0,
	460, 0, 2, 0, 1100, 513, 0, 1100, 897, 0,
	0, 1100, 0, 0, 136, 137, 902, 900, 901, 0,
	0, 0, 0, 895, 871, 869, 870, 0, 0, 0,
	0, 519, 87, 1100, 55, 1100, 890, 55, 1100, 95,
	55, 1100, 0, 116, 118, 933, 934, 935, 936, 1127,
	0, 0, 0, 0, 126, 0, 130, 132, 0, 0,
	0, 356, 153, 1089, 155, 0, 0, 159, 161, 162,
	0, 0, 0, 0, 0, 0, 173, 198, 199, 98,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 222, 223, 0, 0, 0, 345,
	358, 359, 346, 0, 354, 55, 517, 289, 1100, 428,
	289, 927, 428, 1100, -2, 0, 408, 447, 448, 0,
	0, 0, 433, 434, 0, 0, 0, 404, 405, 0,
	423, 0, 0, 463, 882, 886, 887, 616, 0, 0,
	0, 0, 0, 0, 708, 710, 1094, 1116, 0, 712,
	713, 0, 715, 717, 718, 0, 721, 722, 862, 894,
	908, 909, 910, 911, 0, 0, 914, 0, 916, 917,
	918, 762, 731, -2, -2, 906, 548, 549, 550, 551,
	-2, 1129, 735, 737, 739, 740, 741, 742, 0, 1078,
	1095, 1096, 1112, 1113, 1121, 1125, 1126, 1100, 1109, 1101,
	1090, 1098, 1107, 968, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 932, 578, 579, 584, 585,
	587, 463, 461, 514, 515, 0, 0, 879, 877, 878,
	32, 340, 34, 0, 340, 340, 0, 0, 0, 0,
	238, 0, 0, 240, 0, 0, 0, 0, 0, 0,
	504, 64, 65, 201, 202, 893, 0, 867, 868, 504,
	66, 77, 0, 0, 888, 872, 523, 0, 379, 0,
	0, 520, 0, 0, 89, 0, 53, 54, 0, 91,
	0, 0, 93, 0, 430, 0, 0, 1100, 0, 430,
	0, 820, 531, 532, 533, 534, 535, 613, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 555, 556,
	557, 558, 559, 560, 561, 575, 0, 554, 554, 554,
	567, 568, 576, 577, 582, 583, 594, 595, 597, 599,
	593, 593, 593, 590, 591, 0, 818, 0, 141, 0,
	0, 156, 0, 0, 0, 0, 0, 165, 185, 186,
	187, 166, 168, 175, 177, 178, 179, 188, 189, 190,
	191, 306, 0, 308, 919, 0, 167, 169, 171, 172,
	192, 193, 194, 195, 196, 197, 0, 0, 99, 207,
	205, 206, 210, 212, 0, 230, 213, 214, 215, 216,
	217, 218, 221, 224, 225, 0, 0, 0, 0, 353,
	309, 0, 247, 0, 0, 312, 427, 0, 0, 0,
	1100, 926, 367, 0, 411, 445, 446, 449, 452, 453,
	450, 616, 418, 419, 420, 441, 442, 327, 425, 0,
	0, 523, 0, 0, 0, 0, 0, 0, 797, 798,
	799, 800, 801, 802, 805, 806, 803, 804, 807, 808,
	809, 0, 0, 0, 810, 811, 812, 0, 0, 814,
	0, 816, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 885, 813, 621, 622, 623, 645, 646, 0,
	709, 873, 866, 711, 0, -2, 818, 0, 714, 719,
	720, 0, 0, 861, -2, 0, 913, 0, 613, 764,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	581, 592, 589, 588, 565, 0, 564, 562, 0, 566,
	0, 0, 0, 523, 0, 0, 881, 0, 0, 0,
	0, 339, 36, 1100, 0, 57, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 237, 0, 0, 0, 896, 0, 0,
	0, 69, 0, 903, 76, 0, 0, 0, 0, 391,
	0, 391, 381, 0, 0, 0, 391, 394, 395, 397,
	398, 0, 0, 521, 88, 891, 55, 96, 55, 55,
	102, 117, 0, 119, 122, 123, 124, 125, 120, 0,
	524, 526, 536, 0, 600, 601, 602, 603, 604, 605,
	614, 127, 0, 0, 0, 0, 158, 163, 164, 363,
	0, 182, 0, 184, 0, 307, 921, 920, 100, 232,
	149, 227, 228, 360, 361, 518, 0, 0, 246, 902,
	248, 250, 251, 252, 253, 927, 0, 927, 0, 0,
	310, 0, 0, 0, 0, 369, 375, 0, 451, 454,
	455, 0, 444, 325, 326, 430, 904, 457, 883, 504,
	464, 0, 474, 513, 490, 479, 0, 617, 527, 528,
	569, 570, 571, 572, 573, 618, 619, 0, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, -2, -2,
	-2, 637, 638, 639, -2, -2, -2, 643, 644, -2,
	815, 817, 0, 876, 0, -2, 0, -2, -2, -2,
	-2, 657, 0, 659, 662, 664, 666, 0, 0, 0,
	0, 875, 676, 853, 0, 0, 794, 795, 796, 884,
	661, 0, 0, 874, 865, 0, 0, -2, 716, 0,
	0, 0, 824, 825, 860, 856, 0, 723, 440, 0,
	0, 0, 0, 0, 922, 772, 0, 0, 0, 736,
	738, 0, 0, 0, 0, 828, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 818, 838, 0, 0, 679,
	0, 0, 0, 0, 1116, 0, 818, 846, 0, 0,
	0, 0, 0, 818, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 457, 516,
	880, 35, 329, 0, 0, 0, 38, 1100, 46, 0,
	261, 0, 0, 0, 0, 0, 342, 47, 1100, 55,
	1100, 55, 48, 33, 340, 234, 0, 235, 0, 333,
	0, 328, 331, 0, 76, 0, 0, 63, 0, 67,
	78, 0, 889, 86, 0, 522, 376, 391, 0, 0,
	383, 380, 378, 523, 0, 0, 0, 0, 90, 92,
	94, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 133, 134, 154, 180, 181, 183, 176, 0,
	255, 288, 0, 0, 927, 0, 244, 289, 311, 313,
	0, 0, 371, 375, 0, 374, 428, 443, 0, 459,
	0, 462, 0, 0, 0, 0, 0, 510, 510, 510,
	508, 484, 430, 0, 490, 0, 0, 502, 0, -2,
	479, 0, 0, -2, -2, 0, 0, 0, 677, -2,
	658, 660, 663, 665, 667, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 0, 863, 866, -2, 819, 822,
	823, 0, 0, 857, 0, 0, 0, 0, 439, 440,
	440, 440, 729, 0, 730, 0, 0, 0, 0, 0,
	0, 745, 0, 746, 747, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 683, 684, 0, 0, 749, 844, 845, 0,
	0, 0, 0, 0, 0, 754, 0, 851, 0, 0,
	0, 758, 759, 760, 0, 552, 0, 574, 596, 598,
	586, 459, 0, 0, 0, 0, 56, 259, 278, 0,
	0, 318, 324, 324, 0, 732, 733, 0, 0, 0,
	40, 0, 0, 0, 0, 44, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 79,
	389, 390, 377, 388, 0, 391, 396, 393, 399, 0,
	529, 0, 0, 537, 606, 607, 608, 609, 610, 611,
	612, 0, 150, 242, 0, 249, 0, 0, 0, 247,
	0, 0, 0, 373, 375, 0, 366, 367, 426, 766,
	0, 0, 465, 0, 0, 0, 0, 0, 505, 509,
	506, 507, 0, 0, 0, 0, 490, 502, 471, 0,
	0, 0, 478, 501, 0, 500, 489, -2, 620, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 854, 0,
	789, 0, 0, 865, -2, 826, 855, 859, 0, 724,
	0, 0, 0, 0, 915, 770, 771, 775, 0, 0,
	734, 0, 0, 827, 837, 839, 680, 681, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, -2, -2,
	-2, 698, 699, 700, -2, -2, -2, 0, 0, 0,
	840, 0, 0, 792, 842, 843, 848, 849, 0, 751,
	752, 753, 850, 0, 0, 0, 580, 0, 766, 335,
	337, 37, 0, 260, 0, 263, 0, 0, 0, 0,
	269, 270, 0, 0, 0, 0, 280, 287, 0, 327,
	907, 0, 327, 0, 0, 0, 0, 0, 52, 0,
	0, 341, 0, 55, 55, 330, 0, 0, 0, 0,
	334, 332, 68, 0, 0, 0, 0, 0, 382, 392,
	0, 530, 525, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 375, 0, 368, 369, 414, 0, 458,
	456, 492, 0, 494, 0, 0, 0, 496, 474, 485,
	0, 487, 490, 0, 502, 476, 0, 0, 469, 0,
	468, 490, 498, 0, 0, 0, 0, -2, 0, 670,
	-2, -2, 788, 819, 864, 858, 912, 440, 725, 727,
	728, 777, 774, 0, 761, 743, 744, 836, 0, 0,
	0, 0, 819, 791, 750, 0, 756, 757, 553, 415,
	39, 0, 264, 265, 927, 0, 268, 271, 0, 273,
	929, 255, 0, 284, 285, 319, 320, 323, 321, 324,
	440, 282, 0, 41, 42, 51, 59, 43, 49, 0,
	0, 0, 0, 503, 0, 0, 0, 73, 71, 0,
	0, 0, 400, 401, 0, 0, 287, 0, 277, 255,
	245, 287, 0, 0, 370, 371, 765, 767, 0, 493,
	0, 512, 495, 490, 486, 0, 502, 430, 483, 472,
	0, 473, 0, 502, 0, 0, 480, -2, -2, 671,
	790, 0, 440, 0, 763, -2, 0, 0, 0, 793,
	0, 262, 266, 0, 0, 293, 0, 281, 0, 327,
	0, 0, 61, 0, 336, 338, 0, 0, 0, 0,
	75, 72, 0, 0, 385, 523, 387, 0, 255, 287,
	243, 255, 0, 372, 373, 0, 0, 0, 0, 488,
	481, 0, 470, 466, 0, 477, 0, 499, 726, 780,
	0, -2, 0, 706, 755, 0, 272, 298, 0, 0,
	0, 322, 724, 289, 45, 0, 58, 0, 0, 440,
	74, 70, 0, 386, 0, 275, 255, 314, 0, 365,
	768, 769, 511, 475, 490, 0, 497, 0, 0, 0,
	776, 707, 0, 274, 294, 295, 0, 290, 291, 292,
	928, 286, 293, 60, 239, 241, 0, 523, 0, 276,
	287, 502, 467, 773, 778, 781, -2, 1064, 960, 0,
	779, 267, 296, 0, 297, 0, 0, 0, 298, 0,
	384, 258, 255, 482, 0, 783, 784, 785, 786, 787,
	299, 0, 302, 303, 0, 300, 283, 254, 256, 257,
	315, 0, 301, 304, 305, 782,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 316, 3, 322, 317, 3,
	327, 328, 320, 318, 331, 319, 329, 321, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 335, 330,
	310, 312, 311, 3, 332, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 323, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 333, 315, 334, 313,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 314, 57653, 324, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1731
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1741
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1745
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = DropDefault
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2059
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = true
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = false
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = Ascending
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = Descending
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2238
		{
			return unimplemented(sqllex)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = true
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = false
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.str = ""
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.str = ""
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.str = ""
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.str = ""
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2482
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 392:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2516
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2753
		{
			return unimplemented(sqllex)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
			return unimplemented(sqllex)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = true
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = false
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = false
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = true
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2789
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &From{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3028
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3045
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = nil
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = true
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = false
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.str = astFullJoin
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.str = astLeftJoin
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.str = astRightJoin
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.str = astInnerJoin
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3230
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3353
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = nil
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3566
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3598
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3638
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = year
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = month
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = day
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = hour
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = minute
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = month
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = hour
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = minute
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = minute
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = nil
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = second
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3733
		{
			return unimplemented(sqllex)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3768
		{
			return unimplemented(sqllex)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4002
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4228
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4229
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4252
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4273
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4366
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4367
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = Window(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4464
		{
			return unimplemented(sqllex)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4465
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4466
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4470
		{
			return unimplemented(sqllex)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4478
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			return unimplemented(sqllex)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			return unimplemented(sqllex)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = Any
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = Some
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = All
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Plus
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Minus
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = Mult
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = Div
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = FloorDiv
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = Mod
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = Bitand
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Bitor
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Pow
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = Bitxor
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = LT
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = GT
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = EQ
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = LE
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = GE
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = NE
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = Like
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = NotLike
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = ILike
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = NotILike
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4845
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5007
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5043
		{
			return unimplemented(sqllex)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5052
		{
			return unimplemented(sqllex)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = DNull
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.str = ""
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
