// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LESS = 57524
const LEVEL = 57525
const LIKE = 57526
const LIMIT = 57527
const LIST = 57528
const LOCAL = 57529
const LOCALTIME = 57530
const LOCALTIMESTAMP = 57531
const LOW = 57532
const LSHIFT = 57533
const MATCH = 57534
const MINUTE = 57535
const MONTH = 57536
const NAN = 57537
const NAME = 57538
const NAMES = 57539
const NATURAL = 57540
const NEXT = 57541
const NO = 57542
const NO_INDEX_JOIN = 57543
const NORMAL = 57544
const NOT = 57545
const NOTHING = 57546
const NULL = 57547
const NULLIF = 57548
const NULLS = 57549
const NUMERIC = 57550
const OF = 57551
const OFF = 57552
const OFFSET = 57553
const OID = 57554
const ON = 57555
const ONLY = 57556
const OPTIONS = 57557
const OR = 57558
const ORDER = 57559
const ORDINALITY = 57560
const OUT = 57561
const OUTER = 57562
const OVER = 57563
const OVERLAPS = 57564
const OVERLAY = 57565
const PARENT = 57566
const PARTIAL = 57567
const PARTITION = 57568
const PASSWORD = 57569
const PAUSE = 57570
const PLACING = 57571
const PLANS = 57572
const POSITION = 57573
const PRECEDING = 57574
const PRECISION = 57575
const PREPARE = 57576
const PRIMARY = 57577
const PRIORITY = 57578
const QUERIES = 57579
const QUERY = 57580
const RANGE = 57581
const READ = 57582
const REAL = 57583
const RECURSIVE = 57584
const REF = 57585
const REFERENCES = 57586
const REGCLASS = 57587
const REGPROC = 57588
const REGPROCEDURE = 57589
const REGNAMESPACE = 57590
const REGTYPE = 57591
const REMOVE_PATH = 57592
const RENAME = 57593
const REPEATABLE = 57594
const RELEASE = 57595
const RESET = 57596
const RESTORE = 57597
const RESTRICT = 57598
const RESUME = 57599
const RETURNING = 57600
const REVOKE = 57601
const RIGHT = 57602
const ROLLBACK = 57603
const ROLLUP = 57604
const ROW = 57605
const ROWS = 57606
const RSHIFT = 57607
const SAVEPOINT = 57608
const SCATTER = 57609
const SCRUB = 57610
const SEARCH = 57611
const SECOND = 57612
const SELECT = 57613
const SEQUENCES = 57614
const SERIAL = 57615
const SERIALIZABLE = 57616
const SESSION = 57617
const SESSIONS = 57618
const SESSION_USER = 57619
const SET = 57620
const SETTING = 57621
const SETTINGS = 57622
const SHOW = 57623
const SIMILAR = 57624
const SIMPLE = 57625
const SMALLINT = 57626
const SMALLSERIAL = 57627
const SNAPSHOT = 57628
const SOME = 57629
const SPLIT = 57630
const SQL = 57631
const START = 57632
const STATUS = 57633
const STDIN = 57634
const STRICT = 57635
const STRING = 57636
const STORE = 57637
const STORING = 57638
const SUBSTRING = 57639
const SYMMETRIC = 57640
const SYSTEM = 57641
const TABLE = 57642
const TABLES = 57643
const TEMP = 57644
const TEMPLATE = 57645
const TEMPORARY = 57646
const TESTING_RANGES = 57647
const TESTING_RELOCATE = 57648
const TEXT = 57649
const THAN = 57650
const THEN = 57651
const TIME = 57652
const TIMESTAMP = 57653
const TIMESTAMPTZ = 57654
const TO = 57655
const TRAILING = 57656
const TRACE = 57657
const TRANSACTION = 57658
const TREAT = 57659
const TRIM = 57660
const TRUE = 57661
const TRUNCATE = 57662
const TYPE = 57663
const UNBOUNDED = 57664
const UNCOMMITTED = 57665
const UNION = 57666
const UNIQUE = 57667
const UNKNOWN = 57668
const UPDATE = 57669
const UPSERT = 57670
const USE = 57671
const USER = 57672
const USERS = 57673
const USING = 57674
const UUID = 57675
const VALID = 57676
const VALIDATE = 57677
const VALUE = 57678
const VALUES = 57679
const VARCHAR = 57680
const VARIADIC = 57681
const VIEW = 57682
const VARYING = 57683
const WHEN = 57684
const WHERE = 57685
const WINDOW = 57686
const WITH = 57687
const WITHIN = 57688
const WITHOUT = 57689
const WRITE = 57690
const YEAR = 57691
const ZONE = 57692
const NOT_LA = 57693
const WITH_LA = 57694
const AS_LA = 57695
const CONTAINED_BY = 57696
const HAS_SOME_KEY = 57697
const HAS_ALL_KEYS = 57698
const POSTFIXOP = 57699
const UMINUS = 57700
const HELPTOKEN = 57701

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6805

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	379, 54,
	-2, 701,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 553,
	-2, 0,
	-1, 64,
	96, 701,
	157, 701,
	327, 701,
	328, 701,
	-2, 0,
	-1, 74,
	107, 676,
	117, 676,
	165, 676,
	185, 676,
	211, 676,
	217, 676,
	324, 676,
	-2, 665,
	-1, 107,
	4, 703,
	20, 703,
	21, 703,
	23, 703,
	28, 703,
	33, 703,
	34, 703,
	35, 703,
	36, 703,
	37, 703,
	38, 703,
	39, 703,
	40, 703,
	41, 703,
	42, 703,
	44, 703,
	45, 703,
	46, 703,
	47, 703,
	48, 703,
	51, 703,
	52, 703,
	53, 703,
	55, 703,
	56, 703,
	60, 703,
	61, 703,
	62, 703,
	64, 703,
	65, 703,
	66, 703,
	67, 703,
	69, 703,
	71, 703,
	72, 703,
	75, 703,
	76, 703,
	77, 703,
	85, 703,
	86, 703,
	87, 703,
	88, 703,
	89, 703,
	90, 703,
	91, 703,
	92, 703,
	94, 703,
	96, 703,
	98, 703,
	101, 703,
	102, 703,
	104, 703,
	108, 703,
	109, 703,
	110, 703,
	111, 703,
	112, 703,
	113, 703,
	114, 703,
	122, 703,
	123, 703,
	124, 703,
	125, 703,
	126, 703,
	128, 703,
	130, 703,
	135, 703,
	136, 703,
	138, 703,
	141, 703,
	142, 703,
	145, 703,
	146, 703,
	147, 703,
	148, 703,
	151, 703,
	152, 703,
	154, 703,
	157, 703,
	158, 703,
	159, 703,
	160, 703,
	161, 703,
	162, 703,
	163, 703,
	164, 703,
	166, 703,
	169, 703,
	170, 703,
	171, 703,
	173, 703,
	174, 703,
	175, 703,
	177, 703,
	178, 703,
	180, 703,
	182, 703,
	183, 703,
	186, 703,
	187, 703,
	190, 703,
	192, 703,
	193, 703,
	194, 703,
	195, 703,
	196, 703,
	197, 703,
	199, 703,
	200, 703,
	201, 703,
	202, 703,
	206, 703,
	207, 703,
	208, 703,
	209, 703,
	210, 703,
	212, 703,
	214, 703,
	215, 703,
	218, 703,
	219, 703,
	221, 703,
	223, 703,
	224, 703,
	225, 703,
	226, 703,
	227, 703,
	228, 703,
	230, 703,
	231, 703,
	232, 703,
	233, 703,
	234, 703,
	236, 703,
	237, 703,
	238, 703,
	239, 703,
	240, 703,
	241, 703,
	242, 703,
	243, 703,
	245, 703,
	246, 703,
	247, 703,
	248, 703,
	249, 703,
	251, 703,
	252, 703,
	253, 703,
	254, 703,
	255, 703,
	256, 703,
	257, 703,
	259, 703,
	261, 703,
	262, 703,
	263, 703,
	264, 703,
	266, 703,
	267, 703,
	268, 703,
	269, 703,
	270, 703,
	272, 703,
	273, 703,
	274, 703,
	275, 703,
	276, 703,
	278, 703,
	279, 703,
	280, 703,
	281, 703,
	283, 703,
	284, 703,
	285, 703,
	286, 703,
	288, 703,
	289, 703,
	290, 703,
	291, 703,
	292, 703,
	293, 703,
	294, 703,
	295, 703,
	296, 703,
	297, 703,
	299, 703,
	301, 703,
	302, 703,
	303, 703,
	304, 703,
	305, 703,
	306, 703,
	307, 703,
	308, 703,
	310, 703,
	311, 703,
	312, 703,
	315, 703,
	316, 703,
	317, 703,
	318, 703,
	320, 703,
	321, 703,
	322, 703,
	323, 703,
	326, 703,
	327, 703,
	328, 703,
	329, 703,
	331, 703,
	333, 703,
	334, 703,
	335, 703,
	336, 703,
	337, 703,
	338, 703,
	341, 703,
	346, 703,
	347, 703,
	348, 703,
	349, 703,
	350, 703,
	-2, 0,
	-1, 124,
	107, 675,
	117, 675,
	165, 675,
	185, 675,
	211, 675,
	217, 675,
	324, 675,
	-2, 668,
	-1, 129,
	1, 602,
	169, 602,
	236, 602,
	240, 602,
	378, 602,
	379, 602,
	-2, 0,
	-1, 131,
	1, 602,
	378, 602,
	379, 602,
	-2, 0,
	-1, 132,
	1, 602,
	378, 602,
	379, 602,
	-2, 0,
	-1, 133,
	1, 606,
	378, 606,
	379, 606,
	-2, 0,
	-1, 140,
	4, 709,
	5, 709,
	6, 709,
	7, 709,
	8, 709,
	9, 709,
	20, 709,
	21, 709,
	23, 709,
	28, 709,
	29, 709,
	33, 709,
	34, 709,
	35, 709,
	36, 709,
	37, 709,
	38, 709,
	39, 709,
	40, 709,
	41, 709,
	42, 709,
	44, 709,
	45, 709,
	46, 709,
	47, 709,
	48, 709,
	49, 709,
	50, 709,
	51, 709,
	52, 709,
	53, 709,
	55, 709,
	56, 709,
	58, 709,
	60, 709,
	61, 709,
	62, 709,
	64, 709,
	65, 709,
	66, 709,
	67, 709,
	69, 709,
	71, 709,
	72, 709,
	74, 709,
	75, 709,
	76, 709,
	77, 709,
	79, 709,
	80, 709,
	81, 709,
	83, 709,
	84, 709,
	85, 709,
	86, 709,
	87, 709,
	88, 709,
	89, 709,
	90, 709,
	91, 709,
	92, 709,
	94, 709,
	96, 709,
	98, 709,
	101, 709,
	102, 709,
	104, 709,
	108, 709,
	109, 709,
	110, 709,
	111, 709,
	112, 709,
	113, 709,
	114, 709,
	115, 709,
	116, 709,
	122, 709,
	123, 709,
	124, 709,
	125, 709,
	126, 709,
	128, 709,
	130, 709,
	133, 709,
	135, 709,
	136, 709,
	138, 709,
	141, 709,
	142, 709,
	145, 709,
	146, 709,
	147, 709,
	148, 709,
	149, 709,
	151, 709,
	152, 709,
	154, 709,
	156, 709,
	157, 709,
	158, 709,
	159, 709,
	160, 709,
	161, 709,
	162, 709,
	163, 709,
	164, 709,
	166, 709,
	168, 709,
	169, 709,
	170, 709,
	171, 709,
	172, 709,
	173, 709,
	174, 709,
	175, 709,
	177, 709,
	178, 709,
	180, 709,
	181, 709,
	182, 709,
	183, 709,
	184, 709,
	186, 709,
	187, 709,
	190, 709,
	192, 709,
	193, 709,
	194, 709,
	195, 709,
	196, 709,
	197, 709,
	198, 709,
	199, 709,
	200, 709,
	201, 709,
	202, 709,
	203, 709,
	205, 709,
	206, 709,
	207, 709,
	208, 709,
	209, 709,
	210, 709,
	212, 709,
	215, 709,
	218, 709,
	219, 709,
	220, 709,
	221, 709,
	222, 709,
	223, 709,
	224, 709,
	225, 709,
	226, 709,
	227, 709,
	228, 709,
	230, 709,
	231, 709,
	232, 709,
	233, 709,
	234, 709,
	236, 709,
	237, 709,
	238, 709,
	239, 709,
	240, 709,
	241, 709,
	242, 709,
	243, 709,
	245, 709,
	246, 709,
	247, 709,
	248, 709,
	249, 709,
	251, 709,
	252, 709,
	253, 709,
	254, 709,
	255, 709,
	256, 709,
	257, 709,
	259, 709,
	260, 709,
	261, 709,
	262, 709,
	263, 709,
	264, 709,
	266, 709,
	267, 709,
	268, 709,
	269, 709,
	270, 709,
	272, 709,
	273, 709,
	274, 709,
	275, 709,
	276, 709,
	277, 709,
	278, 709,
	279, 709,
	280, 709,
	281, 709,
	282, 709,
	283, 709,
	284, 709,
	285, 709,
	286, 709,
	288, 709,
	289, 709,
	290, 709,
	291, 709,
	292, 709,
	293, 709,
	294, 709,
	295, 709,
	296, 709,
	297, 709,
	299, 709,
	301, 709,
	302, 709,
	303, 709,
	304, 709,
	305, 709,
	306, 709,
	307, 709,
	308, 709,
	310, 709,
	311, 709,
	312, 709,
	315, 709,
	316, 709,
	317, 709,
	318, 709,
	319, 709,
	320, 709,
	321, 709,
	322, 709,
	323, 709,
	326, 709,
	327, 709,
	328, 709,
	329, 709,
	330, 709,
	331, 709,
	333, 709,
	334, 709,
	335, 709,
	336, 709,
	337, 709,
	338, 709,
	341, 709,
	346, 709,
	347, 709,
	348, 709,
	349, 709,
	350, 709,
	351, 709,
	361, 709,
	366, 709,
	367, 709,
	368, 709,
	375, 709,
	381, 709,
	-2, 0,
	-1, 143,
	1, 54,
	379, 54,
	-2, 701,
	-1, 513,
	132, 1316,
	313, 1316,
	356, 1316,
	377, 1316,
	-2, 0,
	-1, 514,
	132, 1263,
	313, 1263,
	356, 1263,
	377, 1263,
	-2, 0,
	-1, 516,
	132, 1375,
	313, 1375,
	356, 1375,
	377, 1375,
	-2, 0,
	-1, 518,
	132, 1398,
	313, 1398,
	356, 1398,
	377, 1398,
	-2, 0,
	-1, 525,
	132, 1321,
	313, 1321,
	356, 1321,
	377, 1321,
	-2, 327,
	-1, 551,
	1, 405,
	374, 405,
	376, 405,
	378, 405,
	379, 405,
	-2, 0,
	-1, 552,
	1, 457,
	129, 457,
	374, 457,
	376, 457,
	378, 457,
	379, 457,
	-2, 0,
	-1, 558,
	1, 419,
	374, 419,
	376, 419,
	378, 419,
	379, 419,
	-2, 0,
	-1, 560,
	1, 423,
	374, 423,
	376, 423,
	378, 423,
	379, 423,
	-2, 0,
	-1, 563,
	1, 431,
	374, 431,
	376, 431,
	378, 431,
	379, 431,
	-2, 0,
	-1, 564,
	1, 436,
	374, 436,
	376, 436,
	378, 436,
	379, 436,
	-2, 0,
	-1, 567,
	1, 446,
	374, 446,
	376, 446,
	378, 446,
	379, 446,
	-2, 0,
	-1, 583,
	117, 711,
	185, 711,
	211, 711,
	-2, 671,
	-1, 586,
	117, 710,
	185, 710,
	211, 710,
	-2, 669,
	-1, 643,
	375, 1241,
	-2, 1234,
	-1, 644,
	375, 1242,
	-2, 1235,
	-1, 650,
	5, 888,
	375, 888,
	-2, 1450,
	-1, 675,
	5, 847,
	-2, 1419,
	-1, 676,
	5, 882,
	375, 882,
	-2, 1421,
	-1, 677,
	5, 857,
	-2, 1422,
	-1, 678,
	5, 856,
	-2, 1423,
	-1, 679,
	5, 882,
	375, 882,
	-2, 1426,
	-1, 680,
	5, 882,
	375, 882,
	-2, 1427,
	-1, 681,
	5, 883,
	-2, 1430,
	-1, 682,
	5, 839,
	-2, 1431,
	-1, 683,
	5, 839,
	-2, 1432,
	-1, 684,
	5, 864,
	-2, 1436,
	-1, 685,
	5, 849,
	-2, 1437,
	-1, 686,
	5, 850,
	-2, 1438,
	-1, 687,
	5, 840,
	-2, 1444,
	-1, 688,
	5, 841,
	-2, 1445,
	-1, 689,
	5, 842,
	-2, 1446,
	-1, 690,
	5, 843,
	-2, 1447,
	-1, 691,
	5, 844,
	-2, 1448,
	-1, 692,
	5, 845,
	-2, 1449,
	-1, 693,
	5, 839,
	-2, 1454,
	-1, 694,
	5, 848,
	-2, 1459,
	-1, 695,
	5, 846,
	-2, 1462,
	-1, 696,
	5, 880,
	375, 880,
	-2, 1464,
	-1, 697,
	5, 884,
	-2, 1467,
	-1, 698,
	5, 886,
	-2, 1468,
	-1, 699,
	5, 879,
	375, 879,
	-2, 1473,
	-1, 883,
	227, 699,
	-2, 546,
	-1, 887,
	213, 1238,
	-2, 0,
	-1, 922,
	1, 216,
	374, 216,
	376, 216,
	378, 216,
	379, 216,
	-2, 674,
	-1, 929,
	4, 1472,
	10, 1472,
	11, 1472,
	13, 1472,
	14, 1472,
	15, 1472,
	16, 1472,
	17, 1472,
	18, 1472,
	20, 1472,
	21, 1472,
	23, 1472,
	26, 1472,
	28, 1472,
	30, 1472,
	33, 1472,
	34, 1472,
	35, 1472,
	36, 1472,
	37, 1472,
	38, 1472,
	39, 1472,
	40, 1472,
	41, 1472,
	42, 1472,
	44, 1472,
	45, 1472,
	46, 1472,
	47, 1472,
	48, 1472,
	51, 1472,
	52, 1472,
	53, 1472,
	55, 1472,
	56, 1472,
	57, 1472,
	60, 1472,
	61, 1472,
	62, 1472,
	63, 1472,
	64, 1472,
	65, 1472,
	66, 1472,
	67, 1472,
	69, 1472,
	70, 1472,
	71, 1472,
	72, 1472,
	74, 1472,
	75, 1472,
	76, 1472,
	77, 1472,
	85, 1472,
	86, 1472,
	87, 1472,
	88, 1472,
	89, 1472,
	90, 1472,
	91, 1472,
	92, 1472,
	94, 1472,
	96, 1472,
	98, 1472,
	101, 1472,
	102, 1472,
	104, 1472,
	108, 1472,
	109, 1472,
	110, 1472,
	111, 1472,
	112, 1472,
	113, 1472,
	114, 1472,
	118, 1472,
	119, 1472,
	120, 1472,
	121, 1472,
	122, 1472,
	123, 1472,
	124, 1472,
	125, 1472,
	126, 1472,
	127, 1472,
	128, 1472,
	130, 1472,
	133, 1472,
	135, 1472,
	136, 1472,
	138, 1472,
	141, 1472,
	142, 1472,
	145, 1472,
	146, 1472,
	147, 1472,
	148, 1472,
	149, 1472,
	150, 1472,
	151, 1472,
	152, 1472,
	154, 1472,
	156, 1472,
	157, 1472,
	158, 1472,
	159, 1472,
	160, 1472,
	161, 1472,
	162, 1472,
	163, 1472,
	164, 1472,
	166, 1472,
	168, 1472,
	169, 1472,
	170, 1472,
	171, 1472,
	172, 1472,
	173, 1472,
	174, 1472,
	175, 1472,
	177, 1472,
	178, 1472,
	180, 1472,
	181, 1472,
	182, 1472,
	183, 1472,
	184, 1472,
	186, 1472,
	187, 1472,
	190, 1472,
	191, 1472,
	192, 1472,
	193, 1472,
	194, 1472,
	195, 1472,
	196, 1472,
	197, 1472,
	198, 1472,
	199, 1472,
	200, 1472,
	201, 1472,
	202, 1472,
	206, 1472,
	207, 1472,
	208, 1472,
	209, 1472,
	210, 1472,
	212, 1472,
	215, 1472,
	216, 1472,
	218, 1472,
	219, 1472,
	221, 1472,
	223, 1472,
	224, 1472,
	225, 1472,
	226, 1472,
	227, 1472,
	228, 1472,
	230, 1472,
	231, 1472,
	232, 1472,
	233, 1472,
	234, 1472,
	236, 1472,
	237, 1472,
	238, 1472,
	239, 1472,
	240, 1472,
	241, 1472,
	242, 1472,
	243, 1472,
	245, 1472,
	246, 1472,
	247, 1472,
	248, 1472,
	249, 1472,
	250, 1472,
	251, 1472,
	252, 1472,
	253, 1472,
	254, 1472,
	255, 1472,
	256, 1472,
	257, 1472,
	259, 1472,
	260, 1472,
	261, 1472,
	262, 1472,
	263, 1472,
	264, 1472,
	265, 1472,
	266, 1472,
	267, 1472,
	268, 1472,
	269, 1472,
	270, 1472,
	272, 1472,
	273, 1472,
	274, 1472,
	275, 1472,
	276, 1472,
	278, 1472,
	279, 1472,
	280, 1472,
	281, 1472,
	282, 1472,
	283, 1472,
	284, 1472,
	285, 1472,
	286, 1472,
	288, 1472,
	289, 1472,
	290, 1472,
	291, 1472,
	292, 1472,
	293, 1472,
	294, 1472,
	295, 1472,
	296, 1472,
	297, 1472,
	299, 1472,
	301, 1472,
	302, 1472,
	303, 1472,
	304, 1472,
	305, 1472,
	306, 1472,
	307, 1472,
	308, 1472,
	310, 1472,
	311, 1472,
	312, 1472,
	315, 1472,
	316, 1472,
	317, 1472,
	318, 1472,
	320, 1472,
	321, 1472,
	322, 1472,
	323, 1472,
	326, 1472,
	327, 1472,
	328, 1472,
	329, 1472,
	331, 1472,
	333, 1472,
	334, 1472,
	335, 1472,
	336, 1472,
	337, 1472,
	338, 1472,
	341, 1472,
	346, 1472,
	347, 1472,
	348, 1472,
	349, 1472,
	350, 1472,
	351, 1472,
	352, 1472,
	354, 1472,
	355, 1472,
	356, 1472,
	357, 1472,
	358, 1472,
	359, 1472,
	360, 1472,
	361, 1472,
	363, 1472,
	364, 1472,
	365, 1472,
	366, 1472,
	367, 1472,
	368, 1472,
	369, 1472,
	370, 1472,
	371, 1472,
	373, 1472,
	376, 1472,
	377, 1472,
	380, 1472,
	381, 1472,
	-2, 0,
	-1, 942,
	132, 1375,
	313, 1375,
	356, 1375,
	377, 1375,
	-2, 0,
	-1, 959,
	132, 1398,
	313, 1398,
	356, 1398,
	377, 1398,
	-2, 0,
	-1, 960,
	169, 614,
	236, 614,
	240, 614,
	-2, 315,
	-1, 1032,
	117, 710,
	185, 710,
	211, 710,
	-2, 672,
	-1, 1111,
	107, 676,
	117, 676,
	165, 676,
	185, 676,
	211, 676,
	217, 676,
	324, 676,
	-2, 1017,
	-1, 1121,
	375, 1218,
	-2, 1206,
	-1, 1139,
	376, 1130,
	-2, 0,
	-1, 1163,
	169, 614,
	236, 614,
	240, 614,
	-2, 609,
	-1, 1191,
	376, 1130,
	-2, 0,
	-1, 1195,
	107, 676,
	117, 676,
	165, 676,
	185, 676,
	211, 676,
	217, 676,
	324, 676,
	-2, 772,
	-1, 1335,
	169, 614,
	236, 614,
	240, 614,
	-2, 317,
	-1, 1437,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 923,
	-1, 1438,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 924,
	-1, 1439,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 925,
	-1, 1440,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 926,
	-1, 1441,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 927,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 928,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 929,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 930,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 939,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 940,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 941,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 946,
	-1, 1464,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 948,
	-1, 1466,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 952,
	-1, 1467,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 953,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 954,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 955,
	-1, 1538,
	132, 1141,
	375, 1241,
	-2, 1234,
	-1, 1539,
	132, 1142,
	-2, 1415,
	-1, 1540,
	132, 1143,
	-2, 1320,
	-1, 1541,
	132, 1144,
	-2, 1281,
	-1, 1542,
	132, 1145,
	-2, 1298,
	-1, 1543,
	132, 1146,
	-2, 1319,
	-1, 1544,
	132, 1147,
	-2, 1372,
	-1, 1620,
	1, 773,
	74, 773,
	107, 773,
	117, 773,
	133, 773,
	137, 773,
	139, 773,
	156, 773,
	165, 773,
	172, 773,
	181, 773,
	185, 773,
	198, 773,
	211, 773,
	213, 773,
	217, 773,
	258, 773,
	260, 773,
	324, 773,
	332, 773,
	343, 773,
	344, 773,
	353, 773,
	374, 773,
	376, 773,
	378, 773,
	379, 773,
	380, 773,
	-2, 772,
	-1, 1765,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 947,
	-1, 1766,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 949,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 950,
	-1, 1789,
	222, 1101,
	-2, 1103,
	-1, 2020,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 951,
	-1, 2025,
	168, 0,
	-2, 967,
	-1, 2034,
	222, 1102,
	-2, 1104,
	-1, 2076,
	13, 0,
	14, 0,
	15, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 994,
	-1, 2077,
	13, 0,
	14, 0,
	15, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 995,
	-1, 2078,
	13, 0,
	14, 0,
	15, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 996,
	-1, 2082,
	13, 0,
	14, 0,
	15, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 1000,
	-1, 2083,
	13, 0,
	14, 0,
	15, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 1001,
	-1, 2084,
	13, 0,
	14, 0,
	15, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 1002,
	-1, 2216,
	168, 0,
	-2, 968,
	-1, 2219,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 971,
	-1, 2220,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 973,
	-1, 2340,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 972,
	-1, 2341,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 974,
	-1, 2348,
	168, 0,
	-2, 1003,
	-1, 2425,
	168, 0,
	-2, 1004,
	-1, 2506,
	36, 0,
	149, 0,
	184, 0,
	282, 0,
	351, 0,
	361, 0,
	-2, 1418,
}

const sqlPrivate = 57344

const sqlLast = 43224

var sqlAct = [...]int{

	644, 2574, 2311, 747, 2310, 2514, 2478, 2572, 2169, 2505,
	2555, 1686, 2515, 1666, 2374, 2516, 2430, 1694, 1999, 2321,
	2053, 603, 1242, 1759, 2284, 2504, 1235, 73, 642, 2179,
	2270, 1329, 1330, 877, 702, 1615, 980, 1277, 587, 2203,
	2201, 1967, 182, 641, 1683, 2136, 1965, 182, 1193, 1903,
	1189, 1665, 701, 2135, 2250, 182, 1633, 1855, 2354, 2195,
	1172, 1882, 2106, 1616, 182, 1695, 1670, 1669, 1624, 182,
	182, 1890, 1973, 182, 1659, 1854, 182, 1800, 637, 774,
	455, 634, 1238, 1117, 182, 595, 123, 1493, 620, 1411,
	1416, 1755, 1231, 1518, 1360, 963, 1201, 1494, 1173, 1035,
	470, 26, 1502, 1741, 1203, 614, 1481, 1356, 524, 1478,
	912, 753, 962, 452, 1149, 1153, 1512, 1667, 902, 1688,
	909, 1602, 982, 923, 1673, 756, 1180, 735, 504, 1534,
	1106, 1589, 636, 1036, 613, 182, 182, 1359, 1034, 173,
	1163, 1567, 124, 182, 899, 517, 1249, 482, 178, 733,
	123, 1255, 2285, 1162, 592, 125, 1198, 2120, 545, 1040,
	2121, 1257, 1788, 41, 1257, 2312, 1257, 2312, 1687, 182,
	182, 182, 182, 776, 1190, 2551, 44, 182, 182, 1226,
	2550, 2549, 2531, 2526, 1226, 1226, 2283, 1709, 2525, 2522,
	2502, 865, 1709, 1226, 1724, 2501, 2018, 2473, 2468, 1724,
	183, 1717, 2335, 586, 2464, 1982, 2456, 2427, 1226, 496,
	2283, 1717, 2405, 591, 591, 2402, 2283, 2400, 2385, 1226,
	2384, 2283, 1226, 601, 2283, 2598, 2362, 2359, 2342, 123,
	1226, 1226, 1717, 2306, 2304, 2282, 1660, 1709, 1709, 2283,
	477, 2263, 2218, 2194, 26, 1226, 1717, 1664, 1792, 2189,
	1051, 1052, 1278, 1664, 1793, 2116, 1091, 1092, 1093, 2117,
	2029, 1993, 1983, 2109, 1709, 1955, 584, 1954, 1879, 1660,
	1591, 1226, 1226, 1054, 66, 1222, 1095, 1051, 1052, 583,
	761, 765, 771, 1872, 1870, 737, 596, 1873, 1709, 2591,
	1869, 1868, 1051, 1052, 1709, 1709, 1724, 1053, 1728, 750,
	1054, 1716, 1709, 1073, 1708, 1717, 1663, 1596, 1709, 1270,
	1664, 1595, 1709, 1271, 1691, 1054, 739, 2474, 740, 2594,
	1724, 2585, 2335, 2109, 1053, 1590, 2010, 1622, 1051, 1052,
	2089, 1081, 1082, 1083, 1091, 1092, 1093, 521, 2031, 1053,
	1226, 1955, 1758, 1739, 1084, 1338, 1167, 1497, 863, 944,
	143, 1054, 941, 940, 1095, 1051, 1052, 67, 1076, 1077,
	1078, 1079, 939, 938, 937, 936, 935, 1059, 934, 1258,
	1825, 1826, 1258, 777, 1258, 1053, 1709, 1799, 1054, 2286,
	1515, 1073, 933, 127, 69, 140, 70, 932, 1070, 1088,
	1096, 931, 930, 741, 1059, 738, 577, 576, 575, 543,
	140, 542, 1053, 541, 540, 1357, 539, 476, 538, 1059,
	103, 594, 537, 536, 142, 535, 534, 182, 533, 182,
	182, 532, 182, 1840, 1086, 531, 530, 182, 529, 142,
	528, 1074, 1516, 182, 527, 512, 1076, 1077, 1078, 1079,
	511, 510, 140, 509, 508, 1059, 182, 182, 182, 182,
	182, 141, 1051, 1052, 443, 926, 442, 441, 1074, 440,
	439, 424, 423, 916, 1825, 1826, 141, 1088, 1096, 415,
	414, 142, 1059, 1074, 134, 1054, 413, 182, 412, 405,
	404, 135, 592, 1517, 1514, 166, 1094, 1831, 165, 126,
	1080, 182, 140, 1263, 1531, 164, 1256, 163, 1391, 1053,
	162, 161, 1086, 160, 126, 1075, 159, 182, 141, 1074,
	1982, 158, 157, 156, 155, 154, 134, 182, 1590, 153,
	152, 142, 1089, 135, 151, 881, 150, 149, 885, 148,
	147, 146, 1075, 145, 1085, 144, 869, 1898, 40, 1529,
	1194, 1527, 1525, 1363, 901, 975, 126, 1075, 926, 41,
	2578, 1841, 2573, 2576, 905, 905, 2521, 2503, 141, 2488,
	1519, 2483, 44, 876, 1047, 906, 134, 2422, 1080, 1059,
	2403, 2249, 2328, 135, 1051, 1052, 2248, 924, 2244, 182,
	978, 1831, 2243, 1075, 2236, 2235, 2234, 2230, 51, 2229,
	2228, 1087, 2227, 2221, 2200, 2103, 1690, 1054, 2098, 945,
	1089, 1090, 2097, 1064, 1062, 1063, 1055, 1056, 1057, 1058,
	1060, 1061, 2096, 2039, 1957, 1953, 748, 62, 1910, 1906,
	973, 1053, 1033, 1877, 63, 1842, 477, 64, 1874, 1862,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 1513,
	1853, 1824, 1821, 1274, 1820, 1841, 592, 1063, 1055, 1056,
	1057, 1058, 1060, 1061, 1818, 927, 1805, 1804, 1125, 960,
	66, 1032, 957, 1789, 1620, 1722, 1489, 1047, 1118, 1087,
	1109, 749, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090,
	140, 1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061,
	1028, 1059, 1046, 1192, 874, 2563, 2562, 1997, 2245, 869,
	1191, 749, 1241, 2055, 2493, 976, 2492, 2491, 2459, 142,
	2451, 1055, 1056, 1057, 1058, 1060, 1061, 2450, 2441, 1842,
	1825, 1826, 2439, 1836, 1834, 1835, 1827, 1828, 1829, 1830,
	1832, 1833, 2417, 182, 2327, 182, 2416, 2415, 584, 2371,
	2350, 2336, 2315, 67, 1171, 2303, 141, 2289, 927, 1043,
	1044, 583, 2241, 2177, 134, 1074, 1048, 2175, 182, 182,
	2174, 135, 2172, 2144, 1358, 1754, 2143, 2124, 2112, 127,
	69, 1178, 70, 1753, 2024, 1943, 1937, 1923, 1490, 1922,
	1825, 1826, 1121, 1908, 126, 592, 140, 1878, 1825, 1826,
	1743, 1852, 1814, 476, 1151, 1152, 103, 1813, 1810, 1155,
	1785, 1825, 1826, 1780, 1176, 1483, 1154, 1157, 1607, 1158,
	1057, 1058, 1060, 1061, 1579, 142, 1523, 1836, 1834, 1835,
	1827, 1828, 1829, 1830, 1832, 1833, 1234, 1051, 1052, 1075,
	1348, 1347, 1170, 1357, 1354, 700, 1923, 1831, 123, 1161,
	1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138,
	1054, 1137, 141, 1136, 1135, 1134, 1133, 1132, 1131, 1130,
	134, 1166, 1129, 926, 182, 1122, 1188, 135, 1530, 1110,
	776, 1109, 956, 948, 1053, 920, 182, 1164, 2433, 2334,
	2223, 2199, 2119, 1196, 1168, 2115, 1791, 1719, 182, 1118,
	126, 1608, 1995, 1107, 182, 1224, 182, 1831, 182, 1192,
	1968, 1841, 182, 1727, 972, 1831, 1896, 2338, 1825, 1826,
	1233, 2337, 1240, 1528, 2331, 1526, 1524, 2122, 1831, 1351,
	1159, 1984, 1660, 1194, 1031, 1160, 1946, 1940, 1062, 1063,
	1055, 1056, 1057, 1058, 1060, 1061, 1026, 875, 1936, 1876,
	1051, 1052, 1875, 182, 182, 1275, 1726, 1764, 1395, 1227,
	926, 969, 182, 1127, 2000, 182, 1825, 1826, 1239, 2355,
	1344, 1687, 2056, 1054, 1796, 1503, 1150, 1020, 2581, 1841,
	2580, 1246, 1204, 1978, 1205, 1842, 776, 2131, 2486, 1713,
	2463, 2546, 1841, 1317, 167, 182, 2297, 1053, 2007, 749,
	182, 590, 1323, 1729, 2396, 182, 182, 1012, 182, 2395,
	182, 1316, 182, 2547, 182, 901, 2393, 1021, 778, 2392,
	2163, 2160, 1225, 1352, 728, 182, 726, 1204, 2128, 1205,
	724, 182, 182, 417, 2127, 1626, 721, 1284, 1124, 1204,
	926, 1205, 1809, 730, 2155, 1808, 1807, 1626, 1248, 1806,
	1767, 1712, 629, 1842, 1251, 1655, 1625, 1651, 1353, 589,
	182, 1648, 1465, 1206, 776, 1364, 1842, 1059, 1260, 2309,
	1165, 1262, 1392, 927, 1996, 1265, 862, 1583, 1211, 170,
	777, 1582, 1426, 1831, 1834, 1835, 1827, 1828, 1829, 1830,
	1832, 1833, 2588, 1272, 179, 970, 1317, 1317, 957, 410,
	649, 1331, 1273, 1365, 1345, 123, 1684, 425, 1206, 579,
	1335, 591, 1349, 2462, 1316, 1316, 450, 1389, 421, 1361,
	1206, 494, 179, 491, 1388, 502, 1029, 2167, 507, 2168,
	1480, 1074, 1950, 1379, 2376, 1229, 526, 582, 971, 1050,
	1284, 1284, 444, 1425, 1372, 171, 1398, 592, 1829, 1830,
	1832, 1833, 592, 1835, 1827, 1828, 1829, 1830, 1832, 1833,
	927, 1480, 2499, 1252, 2538, 1233, 1519, 1827, 1828, 1829,
	1830, 1832, 1833, 1975, 1634, 1006, 182, 429, 182, 1397,
	1945, 182, 1396, 1976, 1515, 1368, 777, 736, 736, 1390,
	2444, 955, 182, 584, 1588, 410, 584, 584, 1061, 1939,
	1213, 776, 1358, 1355, 182, 1075, 1407, 581, 182, 1408,
	1409, 182, 1500, 1503, 1007, 182, 1148, 2470, 588, 182,
	582, 410, 410, 769, 410, 182, 1498, 448, 1975, 179,
	866, 172, 182, 776, 1212, 592, 1516, 182, 430, 1215,
	927, 1720, 2471, 2146, 2546, 182, 1491, 1562, 1609, 1488,
	1019, 1637, 182, 1756, 1757, 1209, 2008, 1934, 985, 2006,
	2012, 1487, 1030, 182, 777, 182, 1485, 182, 2575, 1202,
	182, 1387, 182, 1210, 182, 182, 1545, 182, 182, 1833,
	1610, 1627, 926, 1679, 1638, 1640, 182, 1517, 1514, 2153,
	2573, 1707, 168, 447, 1025, 2046, 1207, 2518, 2565, 1613,
	928, 1623, 1332, 1257, 1585, 1586, 1055, 1056, 1057, 1058,
	1060, 1061, 1657, 2278, 1417, 1424, 1604, 1605, 1594, 1600,
	1011, 1645, 1827, 1828, 1829, 1830, 1832, 1833, 1179, 1653,
	1643, 416, 169, 1196, 2346, 1192, 1649, 1369, 722, 1630,
	722, 1207, 1656, 1373, 723, 1374, 2047, 1375, 1599, 1376,
	722, 1377, 2279, 1207, 732, 1636, 422, 731, 2377, 570,
	1689, 418, 1689, 1812, 1519, 2312, 123, 1715, 1383, 1385,
	406, 419, 123, 2399, 776, 1701, 1220, 600, 905, 1216,
	905, 1693, 182, 1104, 1704, 2452, 2537, 1183, 1702, 2519,
	1703, 1336, 1219, 928, 1710, 1705, 1769, 1415, 182, 182,
	182, 777, 182, 1714, 924, 1711, 2049, 580, 432, 431,
	1186, 1721, 2011, 1217, 1723, 2278, 1049, 1016, 2271, 2147,
	961, 490, 1603, 1519, 501, 182, 1181, 1479, 1619, 2269,
	2210, 1218, 591, 777, 2273, 1184, 479, 1155, 2453, 1158,
	446, 1476, 571, 1513, 480, 1635, 977, 2520, 570, 993,
	1152, 1151, 1182, 1740, 2279, 2517, 480, 1474, 483, 2545,
	1730, 2558, 2274, 1367, 2275, 2543, 600, 1892, 954, 526,
	449, 883, 526, 2013, 888, 1777, 123, 2272, 2320, 891,
	445, 488, 927, 1519, 1017, 410, 966, 484, 1039, 1681,
	2536, 1775, 951, 986, 2277, 483, 943, 2085, 526, 526,
	410, 913, 866, 2280, 1744, 438, 2566, 483, 2239, 1746,
	1038, 1258, 1949, 1748, 1185, 1732, 2387, 2386, 488, 485,
	1752, 592, 2436, 2369, 484, 433, 1486, 1734, 2293, 526,
	488, 571, 987, 1462, 2130, 984, 484, 1470, 407, 1018,
	1919, 1915, 487, 526, 1183, 1471, 1682, 1472, 1247, 1735,
	1236, 1477, 572, 967, 1798, 1904, 485, 968, 966, 952,
	2571, 1733, 2479, 1403, 2274, 2045, 2275, 1186, 485, 526,
	1382, 1772, 1343, 1339, 777, 2180, 1038, 2584, 1037, 487,
	1770, 1773, 1768, 1601, 2276, 1778, 1891, 966, 2370, 879,
	878, 487, 1184, 2322, 175, 592, 2277, 1925, 499, 1924,
	1784, 2086, 182, 776, 1039, 2280, 408, 2087, 182, 182,
	1762, 1880, 182, 2556, 1795, 2296, 1886, 182, 2240, 966,
	182, 1341, 2295, 1893, 1598, 967, 1905, 1887, 182, 968,
	1597, 410, 573, 1342, 182, 182, 182, 589, 2292, 1404,
	182, 572, 887, 182, 1037, 493, 1460, 1463, 2170, 182,
	182, 182, 182, 182, 967, 1900, 486, 898, 968, 182,
	994, 1473, 182, 2313, 896, 574, 182, 1899, 1475, 2557,
	1948, 1185, 2570, 2367, 3, 182, 1317, 2251, 2107, 1909,
	1895, 1459, 1885, 475, 34, 182, 2276, 182, 1522, 182,
	2349, 2559, 182, 486, 1316, 1774, 182, 474, 33, 1881,
	2238, 182, 1776, 182, 2368, 486, 1916, 1956, 928, 1958,
	182, 2166, 489, 1317, 1856, 778, 1859, 1860, 1861, 1015,
	1284, 573, 2023, 182, 926, 1951, 1819, 720, 592, 473,
	30, 1316, 2294, 434, 1779, 926, 182, 1911, 472, 79,
	471, 78, 1004, 1725, 1002, 1662, 468, 22, 1654, 489,
	1933, 469, 23, 607, 574, 1935, 1992, 1284, 1884, 1647,
	1024, 489, 1317, 1942, 1888, 1889, 498, 2001, 1894, 867,
	868, 864, 1023, 182, 949, 435, 1980, 1000, 1857, 1461,
	1316, 467, 28, 466, 20, 507, 1749, 736, 1959, 1380,
	1552, 1962, 1371, 1977, 1128, 928, 1971, 1960, 464, 19,
	465, 18, 1985, 777, 998, 436, 1284, 437, 459, 15,
	410, 410, 1010, 492, 460, 16, 1521, 2513, 759, 458,
	14, 778, 897, 182, 704, 1317, 1991, 34, 2026, 895,
	703, 2003, 2004, 1223, 996, 2005, 2476, 463, 12, 2002,
	990, 33, 894, 1316, 2009, 457, 10, 462, 7, 1014,
	2041, 2042, 2043, 2014, 461, 6, 456, 5, 2016, 725,
	727, 1317, 1317, 2267, 1986, 1987, 2151, 1988, 1989, 1284,
	1317, 1317, 1003, 30, 1001, 928, 598, 2149, 570, 1316,
	1316, 2129, 79, 2036, 78, 1964, 2032, 2035, 1316, 1316,
	22, 1685, 646, 2030, 1920, 23, 600, 1678, 1267, 778,
	1266, 1495, 2057, 1317, 182, 1284, 1284, 999, 2062, 1264,
	182, 2048, 2050, 2051, 1284, 1284, 179, 2059, 1966, 182,
	182, 1316, 2091, 1261, 927, 28, 2064, 20, 410, 599,
	1259, 1920, 2125, 1221, 997, 927, 1214, 1208, 2547, 1009,
	1245, 2092, 19, 2410, 18, 2118, 410, 1284, 410, 1041,
	410, 1760, 15, 2333, 1253, 2332, 1362, 2196, 16, 2110,
	2090, 571, 2141, 14, 995, 2123, 182, 2108, 182, 2105,
	989, 2111, 893, 1626, 123, 182, 2165, 2140, 926, 744,
	1994, 12, 1641, 2126, 2412, 1642, 2188, 478, 2133, 10,
	2173, 7, 1626, 182, 182, 526, 179, 2176, 6, 745,
	5, 1639, 1179, 2190, 179, 1658, 1650, 526, 1646, 1393,
	1394, 182, 1269, 2154, 2182, 2142, 2193, 1761, 2181, 1750,
	2446, 182, 776, 182, 182, 2286, 1042, 988, 2157, 776,
	1051, 1052, 2157, 2171, 2424, 2156, 778, 526, 2157, 2161,
	2398, 2252, 526, 1045, 1652, 2164, 2186, 179, 526, 1283,
	526, 2212, 526, 2184, 526, 2192, 526, 2185, 2191, 500,
	2114, 1183, 2183, 2197, 1644, 2475, 182, 1381, 778, 1317,
	2318, 572, 2217, 526, 526, 1692, 746, 1053, 1680, 1417,
	2060, 1051, 1052, 1677, 1186, 1587, 1334, 1316, 1417, 2065,
	1276, 2150, 2554, 2152, 2569, 2361, 619, 1825, 1826, 2257,
	1181, 2207, 526, 2198, 1054, 1051, 1052, 2104, 2213, 1184,
	1737, 1736, 2052, 1284, 1737, 1998, 1901, 928, 1871, 1738,
	182, 2095, 1584, 182, 1581, 1580, 1182, 1511, 1053, 1115,
	2237, 2225, 2044, 776, 182, 182, 2255, 1961, 182, 182,
	182, 605, 1125, 409, 1123, 1022, 1013, 1008, 2262, 597,
	1884, 573, 1283, 1283, 1005, 182, 991, 953, 1337, 578,
	182, 2375, 182, 481, 182, 182, 182, 1370, 2291, 2261,
	992, 182, 1897, 2287, 182, 2254, 2256, 926, 927, 1606,
	2258, 2469, 2141, 2231, 574, 182, 182, 1811, 1185, 2429,
	2345, 1520, 926, 1126, 55, 2138, 623, 2140, 2316, 2268,
	2132, 1672, 1671, 779, 1346, 645, 2266, 2290, 2308, 778,
	1536, 2141, 2259, 1418, 719, 647, 2141, 1281, 507, 648,
	736, 1282, 777, 866, 1156, 635, 2140, 1279, 2324, 777,
	921, 2140, 2323, 1696, 410, 2142, 2314, 2317, 2325, 754,
	1350, 2319, 1484, 1501, 1794, 1119, 1618, 2339, 615, 627,
	410, 626, 1499, 410, 947, 1902, 1974, 1631, 2326, 1402,
	1751, 410, 1399, 1970, 2142, 763, 767, 410, 773, 2142,
	2148, 420, 1822, 2330, 410, 2344, 2253, 919, 182, 1661,
	182, 1559, 776, 182, 1551, 1547, 1317, 1668, 1027, 2351,
	1177, 182, 1105, 1697, 866, 974, 1981, 776, 1718, 1169,
	2329, 1410, 743, 742, 1316, 410, 2582, 1700, 1340, 526,
	1731, 1098, 526, 1097, 526, 2360, 410, 410, 2379, 1706,
	866, 2381, 2141, 2358, 729, 2438, 965, 964, 1631, 1233,
	1284, 182, 1237, 777, 926, 1918, 2564, 2140, 182, 2378,
	2445, 2145, 1317, 2485, 2363, 2413, 182, 182, 926, 926,
	139, 2411, 136, 138, 2141, 137, 1947, 82, 32, 31,
	1316, 2365, 102, 101, 100, 99, 182, 98, 97, 2140,
	2408, 182, 96, 95, 2407, 2142, 2380, 927, 182, 2401,
	2420, 2421, 2409, 94, 93, 2418, 1284, 2419, 92, 91,
	90, 89, 927, 2440, 2423, 1317, 88, 87, 2426, 86,
	2435, 2157, 85, 182, 182, 2434, 2432, 2142, 2397, 84,
	182, 522, 519, 1316, 81, 80, 29, 2442, 926, 25,
	870, 872, 2457, 182, 1742, 2455, 106, 926, 926, 2404,
	2458, 24, 2443, 77, 76, 27, 17, 11, 778, 1284,
	410, 410, 410, 2449, 410, 21, 60, 1178, 61, 2461,
	182, 59, 182, 592, 2460, 182, 58, 776, 2466, 2467,
	2390, 2391, 57, 13, 53, 2481, 52, 410, 50, 49,
	48, 47, 9, 105, 2494, 45, 2482, 2496, 8, 43,
	42, 2495, 777, 104, 118, 182, 2500, 115, 117, 114,
	116, 2498, 120, 119, 112, 110, 111, 777, 2141, 113,
	109, 2511, 182, 182, 182, 946, 2512, 2510, 108, 121,
	182, 950, 39, 2140, 2530, 2527, 2528, 2529, 38, 37,
	1113, 2523, 36, 2497, 182, 35, 2535, 2532, 2, 767,
	2533, 2534, 1, 0, 927, 0, 2487, 0, 605, 2544,
	2548, 2542, 0, 0, 773, 0, 0, 0, 927, 927,
	0, 2142, 0, 0, 2553, 0, 2552, 0, 0, 928,
	2389, 0, 0, 0, 2561, 0, 0, 0, 2560, 0,
	928, 2567, 0, 0, 2568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 2583, 2586, 0, 2587, 0, 2590,
	0, 0, 2592, 2589, 0, 2595, 2597, 2596, 0, 2593,
	2599, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 1099, 1100, 1101, 1102, 1103, 0, 927, 927, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 410, 0, 0, 0, 0, 0,
	410, 410, 0, 0, 410, 0, 0, 777, 0, 1618,
	0, 0, 1618, 2577, 0, 2579, 0, 0, 0, 0,
	1907, 0, 0, 0, 0, 767, 410, 1913, 1914, 0,
	0, 0, 1631, 0, 0, 1921, 0, 0, 0, 0,
	0, 1926, 1927, 1929, 1931, 1932, 0, 0, 0, 0,
	0, 410, 0, 0, 1941, 0, 0, 0, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1245, 0, 1245,
	0, 526, 1283, 0, 410, 0, 0, 0, 1969, 0,
	0, 0, 0, 410, 0, 1979, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 1174, 1174, 0, 0, 0,
	0, 0, 605, 0, 0, 1742, 0, 0, 0, 1283,
	0, 0, 0, 1319, 0, 0, 0, 0, 1742, 1318,
	0, 0, 0, 0, 777, 0, 777, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 0, 624, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 410, 0, 0, 1283, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 1199, 0, 778, 1333, 0,
	0, 0, 74, 0, 778, 2054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1319, 1319, 0, 0,
	0, 1283, 1318, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1283, 1283, 0,
	0, 585, 0, 0, 593, 0, 1283, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 74, 0, 0, 1280, 1280, 410, 0, 0, 0,
	0, 0, 1618, 0, 0, 0, 0, 0, 0, 1283,
	0, 866, 1618, 0, 0, 0, 0, 0, 778, 0,
	0, 0, 1232, 0, 0, 0, 2137, 0, 0, 0,
	0, 0, 0, 605, 605, 0, 0, 0, 0, 2158,
	767, 0, 1250, 2158, 1250, 0, 0, 0, 0, 2158,
	0, 0, 0, 0, 0, 0, 0, 0, 1631, 0,
	1245, 0, 928, 0, 0, 0, 1113, 2178, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 410, 410, 1537, 1537, 1550,
	0, 0, 0, 1570, 0, 0, 0, 1574, 1575, 1577,
	1400, 0, 1405, 2204, 0, 0, 0, 0, 1412, 0,
	0, 0, 0, 2206, 0, 2208, 410, 0, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	0, 1464, 0, 1466, 1467, 1468, 1469, 0, 2232, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	1492, 0, 0, 0, 0, 1283, 0, 1112, 0, 0,
	0, 0, 778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1532, 1533, 0, 0,
	1549, 0, 1561, 1563, 1568, 1571, 1572, 1573, 0, 0,
	0, 0, 410, 0, 0, 866, 0, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 1618, 866, 0, 0,
	2264, 2265, 1631, 928, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2137, 866, 0, 0,
	0, 0, 2298, 0, 2299, 0, 410, 2301, 2302, 0,
	0, 0, 0, 410, 0, 0, 2307, 0, 0, 0,
	0, 0, 0, 0, 0, 2137, 0, 866, 1668, 0,
	2137, 0, 1553, 1553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 928, 0, 0, 0, 0, 0, 1781,
	1782, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 778, 0, 754, 0, 0, 1621, 0, 0,
	0, 0, 0, 0, 0, 767, 0, 0, 1553, 1553,
	1553, 767, 0, 0, 0, 0, 0, 0, 773, 0,
	1631, 0, 2364, 0, 0, 2366, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 0, 2137, 0, 0, 0,
	0, 0, 1283, 0, 0, 1848, 1849, 1850, 0, 1698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	773, 773, 2158, 0, 0, 0, 0, 0, 2137, 0,
	0, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 1783, 0, 0, 2204, 2204,
	0, 0, 1786, 585, 0, 0, 0, 0, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2431, 1802,
	1803, 0, 0, 1618, 1108, 0, 1111, 0, 0, 778,
	1245, 778, 0, 1116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2447, 2448, 0, 0, 0,
	0, 1283, 410, 0, 0, 0, 1319, 0, 0, 1851,
	0, 0, 1318, 0, 0, 2465, 1570, 1570, 1570, 0,
	0, 1864, 1765, 1766, 0, 0, 0, 0, 1771, 0,
	0, 0, 0, 0, 1745, 773, 1747, 0, 767, 0,
	0, 0, 2480, 1319, 866, 0, 0, 410, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1790, 1763, 2137, 0, 0, 0, 1797, 0, 0, 1801,
	0, 0, 1553, 1553, 1280, 0, 0, 2431, 0, 0,
	0, 0, 0, 0, 0, 0, 1815, 0, 0, 0,
	0, 0, 1319, 0, 866, 866, 866, 0, 1318, 0,
	74, 0, 410, 0, 0, 1195, 0, 0, 0, 2021,
	2022, 1280, 0, 0, 0, 0, 2541, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 1568, 1568, 1568,
	0, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
	1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
	0, 1553, 0, 1174, 0, 1319, 0, 0, 605, 0,
	1280, 1318, 0, 0, 0, 0, 0, 0, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 0, 2088, 0,
	0, 1319, 1319, 0, 0, 0, 0, 1318, 1318, 0,
	1319, 1319, 0, 0, 0, 0, 1318, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 754, 1318,
	0, 0, 0, 0, 754, 754, 0, 0, 754, 0,
	1972, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	1280, 0, 0, 0, 0, 0, 0, 453, 1280, 1280,
	1912, 0, 1990, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 605,
	605, 0, 0, 0, 0, 1938, 0, 0, 0, 41,
	0, 1280, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 1952, 44, 0, 0, 2099, 2015, 0, 0, 0,
	0, 1412, 0, 0, 0, 0, 0, 2019, 1963, 0,
	2020, 0, 0, 0, 0, 0, 0, 1232, 51, 0,
	0, 0, 2025, 0, 0, 0, 1232, 0, 0, 0,
	0, 2033, 0, 0, 0, 0, 0, 74, 0, 2037,
	0, 0, 1990, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 63, 0, 477, 64, 0, 0,
	0, 0, 2061, 0, 0, 0, 2063, 0, 585, 2159,
	0, 585, 585, 0, 0, 2162, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 2017,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 2093,
	2094, 0, 0, 0, 0, 0, 0, 0, 2100, 2101,
	2102, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	41, 129, 0, 0, 0, 2113, 0, 593, 0, 0,
	0, 0, 1111, 44, 0, 0, 0, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 2134, 0, 46, 0, 51,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 56, 0, 0, 0, 62, 127,
	69, 132, 70, 0, 0, 63, 0, 122, 64, 755,
	0, 0, 0, 0, 0, 0, 140, 0, 1174, 0,
	754, 0, 1553, 476, 0, 1195, 103, 605, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 66, 0, 0, 0, 142, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2348,
	0, 0, 0, 1553, 0, 0, 2216, 0, 0, 0,
	2219, 2220, 0, 0, 2222, 0, 0, 74, 0, 74,
	0, 2224, 141, 2226, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 1319, 135, 74, 2233,
	2372, 0, 1318, 0, 74, 0, 0, 0, 0, 1698,
	754, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	68, 0, 2242, 1553, 0, 0, 0, 0, 0, 0,
	2209, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	127, 69, 1319, 70, 0, 71, 0, 133, 1318, 0,
	0, 0, 72, 0, 1280, 0, 0, 140, 0, 0,
	2425, 0, 0, 0, 83, 0, 0, 103, 0, 0,
	0, 0, 2288, 0, 2357, 0, 130, 1051, 1052, 0,
	1081, 1082, 1083, 1091, 1092, 1093, 142, 0, 0, 0,
	0, 0, 0, 1084, 0, 1319, 0, 0, 74, 0,
	1054, 1318, 0, 1095, 0, 0, 107, 0, 0, 0,
	1280, 2383, 0, 1051, 1052, 128, 0, 0, 0, 0,
	0, 0, 0, 141, 1053, 2394, 754, 0, 0, 0,
	1073, 134, 0, 0, 0, 0, 1054, 1070, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 2340, 2341, 0,
	0, 0, 1825, 1826, 0, 1843, 1844, 1845, 0, 0,
	1053, 126, 0, 1280, 4, 0, 1073, 0, 2215, 0,
	2300, 0, 0, 0, 0, 0, 0, 2305, 2353, 0,
	0, 1482, 0, 0, 2356, 1076, 1077, 1078, 1079, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 1111, 0, 1051, 1052, 1840, 1081, 1082, 1083, 1091,
	1092, 1093, 0, 0, 0, 0, 1088, 1096, 0, 1084,
	0, 1076, 1077, 1078, 1079, 0, 1054, 0, 2388, 1095,
	1059, 0, 0, 1825, 1826, 1094, 1843, 1844, 1845, 0,
	0, 0, 0, 0, 0, 0, 2472, 0, 0, 2214,
	1053, 1086, 0, 0, 0, 0, 1073, 0, 1074, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 1831,
	0, 0, 2489, 2490, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1840, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 2373, 0, 0,
	0, 0, 0, 0, 2437, 0, 0, 0, 0, 755,
	1846, 1076, 1077, 1078, 1079, 755, 755, 1080, 0, 755,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 1841, 0, 0, 0, 2406, 0, 0,
	0, 0, 1088, 1096, 0, 0, 0, 0, 605, 1089,
	1831, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 1094, 74, 0, 0, 0, 0, 0, 1075, 0,
	74, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 1846, 0, 0, 0, 74, 0, 0, 74, 0,
	0, 0, 0, 2509, 2509, 0, 0, 1842, 593, 1085,
	0, 0, 0, 0, 1841, 0, 2454, 0, 1087, 2524,
	0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 0,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 2509,
	0, 0, 0, 1080, 0, 0, 0, 1867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 2484, 0, 0, 0, 0, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2509, 1842, 0,
	0, 0, 0, 0, 0, 0, 1837, 1838, 1839, 0,
	0, 0, 0, 0, 0, 1836, 1834, 1835, 1827, 1828,
	1829, 1830, 1832, 1833, 0, 0, 1698, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 1065, 1066, 1072,
	1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 1866, 0, 0, 0, 1837, 1838, 1839,
	0, 0, 0, 0, 0, 0, 1836, 1834, 1835, 1827,
	1828, 1829, 1830, 1832, 1833, 0, 74, 0, 0, 0,
	1510, 0, 643, 632, 633, 630, 631, 622, 0, 0,
	0, 755, 0, 0, 0, 0, 0, 0, 184, 185,
	1507, 186, 0, 0, 0, 0, 660, 625, 0, 0,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 1508, 0, 674,
	216, 755, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 755, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 74, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 1506, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 608, 609, 1509, 0, 0, 0,
	0, 0, 0, 618, 1504, 0, 0, 0, 0, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 775, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 781, 186, 782, 783, 784,
	785, 347, 786, 787, 788, 789, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 790, 191, 354, 355,
	192, 193, 791, 792, 356, 357, 358, 793, 194, 359,
	794, 780, 795, 195, 196, 197, 0, 199, 200, 201,
	198, 796, 202, 1111, 203, 204, 797, 705, 205, 206,
	207, 798, 799, 801, 800, 802, 803, 804, 208, 209,
	411, 210, 360, 211, 361, 362, 805, 212, 806, 213,
	807, 214, 808, 809, 215, 216, 810, 217, 811, 0,
	812, 363, 218, 220, 219, 221, 364, 365, 813, 706,
	814, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 815, 225, 816, 817, 707, 818, 226, 369,
	819, 370, 820, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 709, 821, 373, 234, 822, 231, 823, 708,
	232, 374, 233, 375, 376, 377, 378, 379, 824, 380,
	825, 710, 235, 236, 237, 711, 238, 239, 240, 826,
	242, 241, 827, 381, 712, 243, 244, 713, 828, 245,
	246, 829, 830, 247, 0, 248, 249, 250, 252, 382,
	251, 714, 253, 254, 256, 255, 831, 832, 833, 383,
	257, 384, 258, 259, 834, 260, 835, 836, 261, 837,
	838, 262, 385, 715, 263, 716, 386, 264, 265, 266,
	267, 268, 839, 269, 387, 270, 388, 271, 840, 272,
	273, 274, 275, 276, 389, 277, 278, 841, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 842, 291, 717, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 843, 304, 391, 303, 305, 306,
	844, 307, 295, 296, 308, 718, 309, 392, 393, 310,
	845, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 846, 318, 847, 319, 320, 321, 322, 323, 324,
	325, 326, 848, 396, 397, 398, 849, 850, 327, 328,
	399, 400, 851, 329, 330, 331, 332, 852, 853, 333,
	334, 335, 336, 854, 337, 855, 401, 338, 339, 340,
	402, 403, 856, 857, 341, 858, 859, 860, 861, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	775, 0, 0, 0, 0, 0, 1611, 0, 0, 0,
	0, 0, 0, 0, 0, 1612, 184, 185, 781, 186,
	782, 783, 784, 785, 347, 786, 787, 788, 789, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 790,
	191, 354, 355, 192, 193, 791, 792, 356, 357, 358,
	793, 194, 359, 794, 780, 795, 195, 196, 197, 0,
	199, 200, 201, 198, 796, 202, 0, 203, 204, 797,
	705, 205, 206, 207, 798, 799, 801, 800, 802, 803,
	804, 208, 209, 411, 210, 360, 211, 361, 362, 805,
	212, 806, 213, 807, 214, 808, 809, 215, 216, 810,
	217, 811, 0, 812, 363, 218, 220, 219, 221, 364,
	365, 813, 706, 814, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 815, 225, 816, 817, 707,
	818, 226, 369, 819, 370, 820, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 709, 821, 373, 234, 822,
	231, 823, 708, 232, 374, 233, 375, 376, 377, 378,
	379, 824, 380, 825, 710, 235, 236, 237, 711, 238,
	239, 240, 826, 242, 241, 827, 381, 712, 243, 244,
	713, 828, 245, 246, 829, 830, 247, 0, 248, 249,
	250, 252, 382, 251, 714, 253, 254, 256, 255, 831,
	832, 833, 383, 257, 384, 258, 259, 834, 260, 835,
	836, 261, 837, 838, 262, 385, 715, 263, 716, 386,
	264, 265, 266, 267, 268, 839, 269, 387, 270, 388,
	271, 840, 272, 273, 274, 275, 276, 389, 277, 278,
	841, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 842, 291, 717, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 843, 304, 391,
	303, 305, 306, 844, 307, 295, 296, 308, 718, 309,
	392, 393, 310, 845, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 846, 318, 847, 319, 320, 321,
	322, 323, 324, 325, 326, 848, 396, 397, 398, 849,
	850, 327, 328, 399, 400, 851, 329, 330, 331, 332,
	852, 853, 333, 334, 335, 336, 854, 337, 855, 401,
	338, 339, 340, 402, 403, 856, 857, 341, 858, 859,
	860, 861, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 775, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2260,
	184, 185, 781, 186, 782, 783, 784, 785, 347, 786,
	787, 788, 789, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 790, 191, 354, 355, 192, 193, 791,
	792, 356, 357, 358, 793, 194, 359, 794, 780, 795,
	195, 196, 197, 0, 199, 200, 201, 198, 796, 202,
	0, 203, 204, 797, 705, 205, 206, 207, 798, 799,
	801, 800, 802, 803, 804, 208, 209, 411, 210, 360,
	211, 361, 362, 805, 212, 806, 213, 807, 214, 808,
	809, 215, 216, 810, 217, 811, 0, 812, 363, 218,
	220, 219, 221, 364, 365, 813, 706, 814, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 815,
	225, 816, 817, 707, 818, 226, 369, 819, 370, 820,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 709,
	821, 373, 234, 822, 231, 823, 708, 232, 374, 233,
	375, 376, 377, 378, 379, 824, 380, 825, 710, 235,
	236, 237, 711, 238, 239, 240, 826, 242, 241, 827,
	381, 712, 243, 244, 713, 828, 245, 246, 829, 830,
	247, 0, 248, 249, 250, 252, 382, 251, 714, 253,
	254, 256, 255, 831, 832, 833, 383, 257, 384, 258,
	259, 834, 260, 835, 836, 261, 837, 838, 262, 385,
	715, 263, 716, 386, 264, 265, 266, 267, 268, 839,
	269, 387, 270, 388, 271, 840, 272, 273, 274, 275,
	276, 389, 277, 278, 841, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 842, 291,
	717, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 843, 304, 391, 303, 305, 306, 844, 307, 295,
	296, 308, 718, 309, 392, 393, 310, 845, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 846, 318,
	847, 319, 320, 321, 322, 323, 324, 325, 326, 848,
	396, 397, 398, 849, 850, 327, 328, 399, 400, 851,
	329, 330, 331, 332, 852, 853, 333, 334, 335, 336,
	854, 337, 855, 401, 338, 339, 340, 402, 403, 856,
	857, 341, 858, 859, 860, 861, 342, 343, 344, 345,
	346, 0, 0, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1228, 184,
	185, 781, 186, 782, 783, 784, 785, 347, 786, 787,
	788, 789, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 790, 191, 354, 355, 192, 193, 791, 792,
	356, 357, 358, 793, 194, 359, 794, 780, 795, 195,
	196, 197, 0, 199, 200, 201, 198, 796, 202, 0,
	203, 204, 797, 705, 205, 206, 207, 798, 799, 801,
	800, 802, 803, 804, 208, 209, 411, 210, 360, 211,
	361, 362, 805, 212, 806, 213, 807, 214, 808, 809,
	215, 216, 810, 217, 811, 0, 812, 363, 218, 220,
	219, 221, 364, 365, 813, 706, 814, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 815, 225,
	816, 817, 707, 818, 226, 369, 819, 370, 820, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 709, 821,
	373, 234, 822, 231, 823, 708, 232, 374, 233, 375,
	376, 377, 378, 379, 824, 380, 825, 710, 235, 236,
	237, 711, 238, 239, 240, 826, 242, 241, 827, 381,
	712, 243, 244, 713, 828, 245, 246, 829, 830, 247,
	0, 248, 249, 250, 252, 382, 251, 714, 253, 254,
	256, 255, 831, 832, 833, 383, 257, 384, 258, 259,
	834, 260, 835, 836, 261, 837, 838, 262, 385, 715,
	263, 716, 386, 264, 265, 266, 267, 268, 839, 269,
	387, 270, 388, 271, 840, 272, 273, 274, 275, 276,
	389, 277, 278, 841, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 842, 291, 717,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	843, 304, 391, 303, 305, 306, 844, 307, 295, 296,
	308, 718, 309, 392, 393, 310, 845, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 846, 318, 847,
	319, 320, 321, 322, 323, 324, 325, 326, 848, 396,
	397, 398, 849, 850, 327, 328, 399, 400, 851, 329,
	330, 331, 332, 852, 853, 333, 334, 335, 336, 854,
	337, 855, 401, 338, 339, 340, 402, 403, 856, 857,
	341, 858, 859, 860, 861, 342, 343, 344, 345, 346,
	643, 632, 633, 630, 631, 622, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 660, 625, 0, 0, 0, 187,
	188, 189, 348, 675, 350, 676, 190, 677, 678, 0,
	191, 354, 355, 192, 193, 628, 659, 679, 680, 358,
	0, 194, 671, 0, 651, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	705, 205, 206, 207, 0, 652, 653, 655, 0, 654,
	656, 208, 209, 411, 210, 681, 211, 682, 683, 606,
	212, 0, 213, 0, 214, 0, 0, 674, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 661,
	662, 639, 706, 0, 0, 0, 0, 0, 222, 223,
	684, 685, 686, 0, 224, 0, 225, 0, 0, 707,
	0, 226, 672, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 668, 670, 709, 0, 373, 234, 0,
	231, 0, 708, 232, 687, 233, 688, 689, 690, 691,
	692, 0, 650, 0, 710, 235, 236, 237, 711, 238,
	239, 240, 0, 242, 241, 0, 673, 712, 243, 244,
	713, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 714, 253, 254, 256, 255, 611,
	0, 640, 669, 257, 693, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 715, 263, 716, 663,
	264, 265, 266, 267, 268, 0, 269, 664, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 694, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 717, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 391,
	303, 305, 306, 657, 307, 295, 296, 308, 718, 309,
	695, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	696, 314, 315, 665, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 697, 698, 0,
	0, 327, 328, 666, 667, 638, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 658, 337, 0, 401,
	338, 339, 340, 929, 699, 0, 0, 341, 0, 0,
	0, 134, 342, 343, 344, 345, 346, 612, 135, 594,
	0, 643, 632, 633, 630, 631, 622, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 0, 184, 185, 0,
	186, 1114, 0, 0, 0, 660, 625, 621, 0, 0,
	187, 188, 189, 348, 675, 350, 676, 190, 677, 678,
	0, 191, 354, 355, 192, 193, 628, 659, 679, 680,
	358, 0, 194, 671, 0, 651, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 705, 205, 206, 207, 0, 652, 653, 655, 0,
	654, 656, 208, 209, 411, 210, 681, 211, 682, 683,
	0, 212, 0, 213, 0, 214, 0, 0, 674, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	661, 662, 639, 706, 0, 0, 0, 0, 0, 222,
	223, 684, 685, 686, 0, 224, 0, 225, 0, 0,
	707, 0, 226, 672, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 668, 670, 709, 0, 373, 234,
	0, 231, 0, 708, 232, 687, 233, 688, 689, 690,
	691, 692, 0, 650, 0, 710, 235, 236, 237, 711,
	238, 239, 240, 0, 242, 241, 0, 673, 712, 243,
	244, 713, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 714, 253, 254, 256, 255,
	611, 0, 640, 669, 257, 693, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 715, 263, 716,
	663, 264, 265, 266, 267, 268, 0, 269, 664, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 694, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 717, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	391, 303, 305, 306, 657, 307, 295, 296, 308, 718,
	309, 695, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 696, 314, 315, 665, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 697, 698,
	0, 0, 327, 328, 666, 667, 638, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 658, 337, 0,
	401, 338, 339, 340, 929, 699, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 612, 135,
	643, 632, 633, 630, 631, 622, 0, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 184, 185, 0, 186,
	0, 0, 1114, 0, 660, 625, 0, 0, 621, 187,
	188, 189, 348, 675, 350, 676, 190, 677, 678, 0,
	191, 354, 355, 192, 193, 628, 659, 679, 680, 358,
	0, 194, 671, 0, 651, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	705, 205, 206, 207, 0, 652, 653, 655, 0, 654,
	656, 208, 209, 411, 210, 681, 211, 682, 683, 0,
	212, 0, 213, 0, 214, 0, 0, 674, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 661,
	662, 639, 706, 0, 0, 0, 0, 0, 222, 223,
	684, 685, 686, 0, 224, 0, 225, 0, 0, 707,
	0, 226, 672, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 668, 670, 709, 0, 373, 234, 0,
	231, 0, 708, 232, 687, 233, 688, 689, 690, 691,
	692, 0, 650, 0, 710, 235, 236, 237, 711, 238,
	239, 240, 0, 242, 241, 0, 673, 712, 243, 244,
	713, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 714, 253, 254, 256, 255, 611,
	0, 640, 669, 257, 693, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 715, 263, 716, 663,
	264, 265, 266, 267, 268, 0, 269, 664, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 694, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 717, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 391,
	303, 305, 306, 657, 307, 295, 296, 308, 718, 309,
	695, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	696, 314, 315, 665, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 697, 698, 0,
	0, 327, 328, 666, 667, 638, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 658, 337, 0, 401,
	338, 339, 340, 929, 699, 0, 0, 341, 0, 0,
	0, 134, 342, 343, 344, 345, 346, 612, 135, 643,
	632, 633, 630, 631, 622, 0, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 184, 185, 0, 186, 0,
	0, 1114, 0, 660, 625, 0, 0, 621, 187, 188,
	189, 348, 675, 350, 676, 190, 677, 678, 1564, 191,
	354, 355, 192, 193, 628, 659, 679, 680, 358, 0,
	194, 671, 0, 651, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 705,
	205, 206, 207, 0, 652, 653, 655, 0, 654, 656,
	208, 209, 411, 210, 681, 211, 682, 683, 0, 212,
	0, 213, 0, 214, 0, 0, 674, 216, 0, 217,
	0, 0, 0, 616, 218, 220, 219, 221, 661, 662,
	639, 706, 0, 0, 0, 0, 0, 222, 223, 684,
	685, 686, 0, 224, 0, 225, 0, 1569, 707, 0,
	226, 672, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 668, 670, 709, 0, 373, 234, 0, 231,
	0, 708, 232, 687, 233, 688, 689, 690, 691, 692,
	0, 650, 0, 710, 235, 236, 237, 711, 238, 239,
	240, 0, 242, 241, 1565, 673, 712, 243, 244, 713,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 714, 253, 254, 256, 255, 611, 0,
	640, 669, 257, 693, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 715, 263, 716, 663, 264,
	265, 266, 267, 268, 0, 269, 664, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 694, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 717, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 657, 307, 295, 296, 308, 718, 309, 695,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 696,
	314, 315, 665, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 697, 698, 0, 1566,
	327, 328, 666, 667, 638, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 658, 337, 0, 401, 338,
	339, 340, 402, 699, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 602, 0, 643,
	632, 633, 630, 631, 622, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 184, 185, 0, 186, 0,
	618, 0, 0, 660, 625, 0, 621, 0, 187, 188,
	189, 348, 675, 350, 676, 190, 677, 678, 0, 191,
	354, 355, 192, 193, 628, 659, 679, 680, 358, 0,
	194, 671, 0, 651, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 705,
	205, 206, 207, 0, 652, 653, 655, 0, 654, 656,
	208, 209, 411, 210, 681, 211, 682, 683, 606, 212,
	0, 213, 0, 214, 0, 0, 674, 216, 0, 217,
	0, 0, 0, 616, 218, 220, 219, 221, 661, 662,
	639, 706, 0, 0, 0, 0, 0, 222, 223, 684,
	685, 686, 0, 224, 0, 225, 0, 0, 707, 0,
	226, 672, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 668, 670, 709, 0, 373, 234, 0, 231,
	0, 708, 232, 687, 233, 688, 689, 690, 691, 692,
	0, 650, 0, 710, 235, 236, 237, 711, 238, 239,
	240, 0, 242, 241, 0, 673, 712, 243, 244, 713,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 714, 253, 254, 256, 255, 611, 0,
	640, 669, 257, 693, 258, 259, 0, 260, 604, 0,
	261, 0, 0, 262, 385, 715, 263, 716, 663, 264,
	265, 266, 267, 268, 0, 269, 664, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 694, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 717, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 657, 307, 295, 296, 308, 718, 309, 695,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 696,
	314, 315, 665, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 697, 698, 0, 0,
	327, 328, 666, 667, 638, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 658, 337, 0, 401, 338,
	339, 340, 402, 699, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 0, 643, 632,
	633, 630, 631, 622, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 184, 185, 0, 186, 0, 0,
	618, 0, 660, 625, 0, 0, 621, 187, 188, 189,
	348, 675, 350, 676, 190, 677, 678, 0, 191, 354,
	355, 192, 193, 628, 659, 679, 680, 358, 0, 194,
	671, 0, 651, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 705, 205,
	206, 207, 0, 652, 653, 655, 0, 654, 656, 208,
	209, 411, 210, 681, 211, 682, 683, 0, 212, 0,
	213, 0, 214, 0, 0, 674, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 661, 662, 639,
	706, 0, 0, 0, 0, 0, 222, 223, 684, 685,
	686, 0, 224, 0, 225, 0, 0, 707, 0, 226,
	672, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 668, 670, 709, 0, 373, 234, 0, 231, 0,
	708, 232, 687, 233, 688, 689, 690, 691, 692, 0,
	650, 0, 710, 235, 236, 237, 711, 238, 239, 240,
	0, 242, 241, 0, 673, 712, 243, 244, 713, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 714, 253, 254, 256, 255, 611, 2187, 640,
	669, 257, 693, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 715, 263, 716, 663, 264, 265,
	266, 267, 268, 0, 269, 664, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 694, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 717, 292, 293, 617, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 657, 307, 295, 296, 308, 718, 309, 695, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 696, 314,
	315, 665, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 697, 698, 0, 0, 327,
	328, 666, 667, 638, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 658, 337, 0, 401, 338, 339,
	340, 402, 699, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 612, 0, 643, 632, 633,
	630, 631, 622, 0, 0, 610, 0, 0, 0, 0,
	608, 609, 1175, 184, 185, 0, 186, 0, 0, 618,
	0, 660, 625, 0, 0, 621, 187, 188, 189, 348,
	675, 350, 676, 190, 677, 678, 0, 191, 354, 355,
	192, 193, 628, 659, 679, 680, 358, 0, 194, 671,
	0, 651, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 705, 205, 206,
	207, 0, 652, 653, 655, 0, 654, 656, 208, 209,
	411, 210, 681, 211, 682, 683, 0, 212, 0, 213,
	0, 214, 0, 0, 674, 216, 0, 217, 0, 0,
	0, 616, 218, 220, 219, 221, 661, 662, 639, 706,
	0, 0, 0, 0, 0, 222, 223, 684, 685, 686,
	0, 224, 0, 225, 0, 0, 707, 0, 226, 672,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	668, 670, 709, 0, 373, 234, 1414, 231, 0, 708,
	232, 687, 233, 688, 689, 690, 691, 692, 0, 650,
	0, 710, 235, 236, 237, 711, 238, 239, 240, 0,
	242, 241, 0, 673, 712, 243, 244, 713, 0, 245,
	246, 0, 0, 247, 0, 248, 249, 250, 252, 382,
	251, 714, 253, 254, 256, 255, 611, 0, 640, 669,
	257, 693, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 715, 263, 716, 663, 264, 265, 266,
	267, 268, 0, 269, 664, 270, 388, 271, 1413, 272,
	273, 274, 275, 276, 694, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 717, 292, 293, 617, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	657, 307, 295, 296, 308, 718, 309, 695, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 696, 314, 315,
	665, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 697, 698, 0, 0, 327, 328,
	666, 667, 638, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 658, 337, 0, 401, 338, 339, 340,
	402, 699, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 612, 0, 643, 632, 633, 630,
	631, 622, 0, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 184, 185, 0, 186, 0, 0, 618, 0,
	660, 625, 0, 0, 621, 187, 188, 189, 348, 675,
	350, 676, 190, 677, 678, 0, 191, 354, 355, 192,
	193, 628, 659, 679, 680, 358, 0, 194, 671, 0,
	651, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 705, 205, 206, 207,
	0, 652, 653, 655, 0, 654, 656, 208, 209, 411,
	210, 681, 211, 682, 683, 606, 212, 0, 213, 0,
	214, 0, 0, 674, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 661, 662, 639, 706, 0,
	0, 0, 0, 0, 222, 223, 684, 685, 686, 0,
	224, 0, 225, 0, 0, 707, 0, 226, 672, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 668,
	670, 709, 0, 373, 234, 0, 231, 0, 708, 232,
	687, 233, 688, 689, 690, 691, 692, 0, 650, 0,
	710, 235, 236, 237, 711, 238, 239, 240, 0, 242,
	241, 0, 673, 712, 243, 244, 713, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	714, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 604, 0, 261, 0, 0,
	262, 385, 715, 263, 716, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 717, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 718, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 606, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 249, 250, 252, 382, 251, 714,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 715, 263, 716, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 717, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 718, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 714, 253,
	254, 256, 255, 611, 0, 640, 669, 257, 693, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	715, 263, 716, 663, 264, 265, 266, 267, 268, 0,
	269, 664, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 694, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	717, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 657, 307, 295,
	296, 308, 718, 309, 695, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 696, 314, 315, 665, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 697, 698, 0, 0, 327, 328, 666, 667, 638,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	658, 337, 0, 401, 338, 339, 340, 402, 699, 2040,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 0, 643, 632, 633, 630, 631, 622, 0,
	0, 610, 0, 0, 0, 0, 608, 609, 0, 184,
	185, 0, 186, 0, 0, 618, 0, 660, 625, 0,
	0, 621, 187, 188, 189, 348, 675, 350, 676, 190,
	677, 678, 0, 191, 354, 355, 192, 193, 628, 659,
	679, 680, 358, 0, 194, 671, 0, 651, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 705, 205, 206, 207, 0, 652, 653,
	655, 0, 654, 656, 208, 209, 411, 210, 681, 211,
	682, 683, 0, 212, 0, 213, 0, 214, 0, 0,
	674, 216, 0, 217, 0, 0, 0, 616, 218, 220,
	219, 221, 661, 662, 639, 706, 0, 0, 0, 0,
	0, 222, 223, 684, 685, 686, 0, 224, 0, 225,
	0, 0, 707, 0, 226, 672, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 668, 670, 709, 0,
	373, 234, 0, 231, 0, 708, 232, 687, 233, 688,
	689, 690, 691, 692, 0, 650, 0, 710, 235, 236,
	237, 711, 238, 239, 240, 0, 242, 241, 0, 673,
	712, 243, 244, 713, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 251, 714, 253, 254,
	256, 255, 611, 0, 640, 669, 257, 693, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 715,
	263, 716, 663, 264, 265, 266, 267, 268, 0, 269,
	664, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	694, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 717,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 657, 307, 295, 296,
	308, 718, 309, 695, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 696, 314, 315, 665, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	697, 698, 0, 0, 327, 328, 666, 667, 638, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 658,
	337, 0, 401, 338, 339, 340, 402, 699, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 0, 643, 632, 633, 630, 631, 622, 0, 0,
	610, 0, 0, 0, 0, 608, 609, 1175, 184, 185,
	0, 186, 0, 0, 618, 0, 660, 625, 0, 0,
	621, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	1569, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1614, 0, 643, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1578, 0, 643, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1576, 0, 643, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1560, 0, 643, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1548, 0, 643, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1546, 0, 1538, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 1541, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	1542, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 1543, 1540, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 1544, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 1539, 346, 612,
	1535, 0, 1538, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 1541, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	1542, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 1543, 1540, 252, 382, 251, 714, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 1544, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	718, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 1539, 346, 612,
	0, 643, 632, 633, 630, 631, 622, 0, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 184, 185, 0,
	186, 0, 0, 618, 0, 660, 625, 0, 0, 621,
	187, 188, 189, 348, 675, 350, 676, 190, 677, 678,
	0, 191, 354, 355, 192, 193, 628, 659, 679, 680,
	358, 0, 194, 671, 0, 651, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 705, 205, 206, 207, 0, 652, 653, 655, 0,
	654, 656, 208, 209, 411, 210, 681, 211, 682, 683,
	0, 212, 0, 213, 0, 214, 0, 0, 674, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	661, 662, 639, 706, 0, 0, 0, 0, 0, 222,
	223, 684, 685, 686, 0, 224, 0, 225, 0, 0,
	707, 0, 226, 672, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 668, 670, 709, 0, 373, 234,
	0, 231, 0, 708, 232, 687, 233, 688, 689, 690,
	691, 692, 0, 650, 0, 710, 235, 236, 237, 711,
	238, 239, 240, 0, 242, 241, 0, 673, 712, 243,
	244, 713, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 714, 253, 254, 256, 255,
	611, 0, 640, 669, 257, 693, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 715, 263, 716,
	663, 264, 265, 266, 267, 268, 0, 269, 664, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 694, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 717, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 657, 307, 295, 296, 308, 718,
	309, 695, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 696, 314, 315, 665, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 697, 698,
	0, 0, 327, 328, 666, 667, 638, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 658, 337, 0,
	401, 338, 339, 340, 402, 699, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 0,
	643, 632, 633, 630, 631, 622, 0, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 184, 185, 1401, 186,
	1118, 0, 618, 0, 660, 625, 0, 0, 621, 187,
	188, 189, 348, 675, 350, 676, 190, 677, 678, 0,
	191, 354, 355, 192, 193, 628, 659, 679, 680, 358,
	0, 194, 671, 0, 651, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	705, 205, 206, 207, 0, 652, 653, 655, 0, 654,
	656, 208, 209, 411, 210, 681, 211, 682, 683, 0,
	212, 0, 213, 0, 214, 0, 0, 674, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 661,
	662, 639, 706, 0, 0, 0, 0, 0, 222, 223,
	684, 685, 686, 0, 224, 0, 225, 0, 0, 707,
	0, 226, 672, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 668, 670, 709, 0, 373, 234, 0,
	231, 0, 708, 232, 687, 233, 688, 689, 690, 691,
	692, 0, 650, 0, 710, 235, 236, 237, 711, 238,
	239, 240, 0, 242, 241, 0, 673, 712, 243, 244,
	713, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 714, 253, 254, 256, 255, 611,
	0, 640, 669, 257, 693, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 715, 263, 716, 663,
	264, 265, 266, 267, 268, 0, 269, 664, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 694, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 717, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 657, 307, 295, 296, 308, 718, 309,
	695, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	696, 314, 315, 665, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 697, 698, 0,
	0, 327, 328, 666, 667, 638, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 658, 337, 0, 401,
	338, 339, 340, 402, 699, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 873, 0,
	643, 632, 633, 630, 631, 622, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 184, 185, 0, 186,
	0, 618, 0, 0, 660, 625, 0, 621, 0, 187,
	188, 189, 348, 675, 350, 676, 190, 677, 678, 0,
	191, 354, 355, 192, 193, 628, 659, 679, 680, 358,
	0, 194, 671, 0, 651, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	705, 205, 206, 207, 0, 652, 653, 655, 0, 654,
	656, 208, 209, 411, 210, 681, 211, 682, 683, 0,
	212, 0, 213, 0, 214, 0, 0, 674, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 661,
	662, 639, 706, 0, 0, 0, 0, 0, 222, 223,
	684, 685, 686, 0, 224, 0, 225, 0, 0, 707,
	0, 226, 672, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 668, 670, 709, 0, 373, 234, 0,
	231, 0, 708, 232, 687, 233, 688, 689, 690, 691,
	692, 0, 650, 0, 710, 235, 236, 237, 711, 238,
	239, 240, 0, 242, 241, 0, 673, 712, 243, 244,
	713, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 714, 253, 254, 256, 255, 611,
	0, 640, 669, 257, 693, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 715, 263, 716, 663,
	264, 265, 266, 267, 268, 0, 269, 664, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 694, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 717, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 657, 307, 295, 296, 308, 718, 309,
	695, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	696, 314, 315, 665, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 697, 698, 0,
	0, 327, 328, 666, 667, 638, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 658, 337, 0, 401,
	338, 339, 340, 402, 699, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 871, 0,
	643, 632, 633, 630, 631, 622, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 184, 185, 0, 186,
	0, 618, 0, 0, 660, 625, 0, 621, 0, 187,
	188, 189, 348, 675, 350, 676, 190, 677, 678, 0,
	191, 354, 355, 192, 193, 628, 659, 679, 680, 358,
	0, 194, 671, 0, 651, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	705, 205, 206, 207, 0, 652, 653, 655, 0, 654,
	656, 208, 209, 411, 210, 681, 211, 682, 683, 0,
	212, 0, 213, 0, 214, 0, 0, 674, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 661,
	662, 639, 706, 0, 0, 0, 0, 0, 222, 223,
	684, 685, 686, 0, 224, 0, 225, 0, 0, 707,
	0, 226, 672, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 668, 670, 709, 0, 373, 234, 0,
	231, 0, 708, 232, 687, 233, 688, 689, 690, 691,
	692, 0, 650, 0, 710, 235, 236, 237, 711, 238,
	239, 240, 0, 242, 241, 0, 673, 712, 243, 244,
	713, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 714, 253, 254, 256, 255, 611,
	0, 640, 669, 257, 693, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 715, 263, 716, 663,
	264, 265, 266, 267, 268, 0, 269, 664, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 694, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 717, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 657, 307, 295, 296, 308, 718, 309,
	695, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	696, 314, 315, 665, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 697, 698, 0,
	0, 327, 328, 666, 667, 638, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 658, 337, 0, 401,
	338, 339, 340, 402, 699, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 0, 643,
	632, 633, 630, 631, 622, 0, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 184, 185, 0, 186, 0,
	0, 618, 0, 660, 625, 0, 0, 621, 187, 188,
	189, 348, 675, 350, 676, 190, 677, 678, 0, 191,
	354, 355, 192, 193, 628, 659, 679, 680, 358, 0,
	194, 671, 0, 651, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 705,
	205, 206, 2508, 0, 652, 653, 655, 0, 654, 656,
	208, 209, 411, 210, 681, 211, 682, 683, 0, 212,
	0, 213, 0, 214, 0, 0, 674, 216, 0, 217,
	0, 0, 0, 616, 218, 220, 219, 221, 661, 662,
	639, 706, 0, 0, 0, 0, 0, 222, 223, 684,
	685, 686, 0, 224, 0, 225, 0, 0, 707, 0,
	226, 672, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 668, 670, 709, 0, 373, 234, 0, 231,
	0, 708, 232, 687, 233, 688, 689, 690, 691, 692,
	0, 650, 0, 710, 235, 236, 237, 711, 238, 239,
	240, 0, 242, 241, 0, 673, 712, 243, 244, 713,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 714, 253, 254, 256, 255, 611, 0,
	640, 669, 257, 693, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 715, 263, 716, 663, 264,
	265, 266, 267, 268, 0, 269, 664, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 694, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 717, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 657, 307, 295, 296, 308, 718, 309, 695,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 696,
	314, 315, 665, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 697, 698, 0, 0,
	327, 328, 666, 667, 638, 329, 330, 2507, 332, 0,
	0, 333, 334, 335, 336, 658, 337, 0, 401, 338,
	339, 340, 402, 699, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 0, 643, 632,
	633, 630, 631, 622, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 184, 185, 0, 186, 0, 0,
	618, 0, 660, 625, 0, 0, 621, 187, 188, 189,
	348, 675, 350, 676, 190, 677, 678, 0, 191, 354,
	355, 192, 193, 628, 659, 679, 680, 358, 0, 194,
	671, 0, 651, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 705, 205,
	206, 207, 0, 652, 653, 655, 0, 654, 656, 208,
	209, 411, 210, 681, 211, 682, 683, 0, 212, 0,
	213, 0, 214, 0, 0, 674, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 661, 662, 639,
	706, 0, 0, 0, 0, 0, 222, 223, 684, 685,
	686, 0, 224, 0, 225, 0, 0, 707, 0, 226,
	672, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 668, 670, 709, 0, 373, 234, 0, 231, 0,
	708, 232, 687, 233, 688, 689, 690, 691, 692, 0,
	650, 0, 710, 235, 236, 237, 711, 238, 239, 240,
	0, 242, 241, 0, 673, 712, 243, 244, 713, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 714, 253, 254, 256, 255, 611, 0, 640,
	669, 257, 693, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 715, 263, 716, 663, 264, 265,
	266, 267, 268, 0, 269, 664, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 694, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 717, 292, 293, 617, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 657, 307, 295, 296, 308, 718, 309, 695, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 696, 314,
	315, 665, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 697, 698, 0, 0, 327,
	328, 666, 667, 638, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 658, 337, 0, 401, 338, 339,
	340, 402, 699, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 612, 0, 643, 632, 633,
	630, 631, 622, 0, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 184, 185, 0, 186, 0, 0, 618,
	0, 660, 625, 0, 0, 621, 187, 188, 189, 2506,
	675, 350, 676, 190, 677, 678, 0, 191, 354, 355,
	192, 193, 628, 659, 679, 680, 358, 0, 194, 671,
	0, 651, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 705, 205, 206,
	2508, 0, 652, 653, 655, 0, 654, 656, 208, 209,
	411, 210, 681, 211, 682, 683, 0, 212, 0, 213,
	0, 214, 0, 0, 674, 216, 0, 217, 0, 0,
	0, 616, 218, 220, 219, 221, 661, 662, 639, 706,
	0, 0, 0, 0, 0, 222, 223, 684, 685, 686,
	0, 224, 0, 225, 0, 0, 707, 0, 226, 672,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	668, 670, 709, 0, 373, 234, 0, 231, 0, 708,
	232, 687, 233, 688, 689, 690, 691, 692, 0, 650,
	0, 710, 235, 236, 237, 711, 238, 239, 240, 0,
	242, 241, 0, 673, 712, 243, 244, 713, 0, 245,
	246, 0, 0, 247, 0, 248, 249, 250, 252, 382,
	251, 714, 253, 254, 256, 255, 611, 0, 640, 669,
	257, 693, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 715, 263, 716, 663, 264, 265, 266,
	267, 268, 0, 269, 664, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 694, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 717, 292, 293, 617, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	657, 307, 295, 296, 308, 718, 309, 695, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 696, 314, 315,
	665, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 697, 698, 0, 0, 327, 328,
	666, 667, 638, 329, 330, 2507, 332, 0, 0, 333,
	334, 335, 336, 658, 337, 0, 401, 338, 339, 340,
	402, 699, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 612, 0, 643, 632, 633, 630,
	631, 622, 0, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 184, 185, 0, 186, 0, 0, 618, 0,
	660, 625, 0, 0, 621, 187, 188, 189, 348, 675,
	350, 676, 190, 677, 678, 0, 191, 354, 355, 192,
	193, 628, 659, 679, 680, 358, 0, 194, 671, 0,
	651, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 705, 205, 206, 207,
	0, 652, 653, 655, 0, 654, 656, 208, 209, 411,
	210, 681, 211, 682, 683, 0, 212, 0, 213, 0,
	214, 0, 0, 674, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 661, 662, 639, 706, 0,
	0, 0, 0, 0, 222, 223, 684, 685, 686, 0,
	224, 0, 225, 0, 0, 707, 0, 226, 672, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 668,
	670, 709, 0, 373, 234, 0, 231, 0, 708, 232,
	687, 233, 688, 689, 690, 691, 692, 0, 650, 0,
	710, 235, 236, 237, 711, 238, 239, 240, 0, 242,
	241, 0, 673, 712, 243, 244, 713, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	714, 253, 254, 256, 255, 0, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 715, 263, 716, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 717, 292, 293, 1558, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 718, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 1556, 0, 0, 0, 0, 1554, 1555,
	0, 184, 185, 0, 186, 0, 0, 1557, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	0, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 0, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 249, 250, 252, 382, 251, 714,
	253, 254, 256, 255, 0, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 715, 263, 716, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 717, 292, 293, 1558, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 718, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 1557, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 0, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 2508, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 0,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 0, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 714, 253,
	254, 256, 255, 611, 0, 640, 669, 257, 693, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	715, 263, 716, 663, 264, 265, 266, 267, 268, 0,
	269, 664, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 694, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	717, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 657, 307, 295,
	296, 308, 0, 309, 695, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 696, 314, 315, 665, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 697, 698, 0, 0, 327, 328, 666, 667, 638,
	329, 330, 2507, 332, 0, 0, 333, 334, 335, 336,
	658, 337, 0, 401, 338, 339, 340, 402, 699, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 609, 0, 184,
	185, 0, 186, 0, 0, 618, 0, 660, 0, 0,
	0, 621, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 659,
	356, 357, 358, 0, 194, 671, 0, 651, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 705, 205, 206, 207, 0, 652, 653,
	655, 0, 654, 656, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 661, 662, 0, 706, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 707, 0, 226, 672, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 668, 670, 709, 0,
	373, 234, 0, 231, 0, 708, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 710, 235, 236,
	237, 711, 238, 239, 240, 0, 242, 241, 0, 673,
	712, 243, 244, 713, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 251, 714, 253, 254,
	256, 255, 0, 0, 0, 669, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 715,
	263, 716, 663, 264, 265, 266, 267, 268, 0, 269,
	664, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 717,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 657, 307, 295, 296,
	308, 718, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 665, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 666, 667, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 658,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	922, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 2139, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 780, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 706, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 381, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 714, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 715, 263,
	716, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 717, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	718, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 142, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 929, 403, 0, 0, 341,
	0, 0, 0, 134, 342, 343, 344, 345, 346, 594,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 126, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 758, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 929, 403, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 0, 135,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	752, 0, 1197, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	758, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 929, 403, 0, 0, 341, 0, 0,
	0, 134, 342, 343, 344, 345, 346, 594, 135, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 752,
	0, 1197, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 140, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 142, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 929, 403, 0, 0, 341, 0, 0, 0,
	134, 342, 343, 344, 345, 346, 1883, 135, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	126, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 758, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 751, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 752, 0, 757,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 249, 250, 252, 382,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 758, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 752, 0, 757, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 758, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 752, 0, 757, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 1230, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 1699, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 2055,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 643, 632, 633, 630, 631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 1200, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 0,
	0, 679, 680, 358, 0, 194, 359, 0, 780, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	381, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 714, 253,
	254, 256, 255, 0, 0, 640, 383, 257, 693, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	715, 263, 716, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 694, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	717, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 718, 309, 695, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 696, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 697, 698, 0, 0, 327, 328, 399, 400, 638,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 699, 0,
	497, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 177, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 176, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 174, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 180, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 177, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 176, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 181, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 180, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 177,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 176, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 181, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	180, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 979,
	0, 925, 983, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 780, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 705, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 706, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	707, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 709, 0, 373, 234,
	0, 231, 0, 708, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 710, 235, 236, 237, 711,
	238, 239, 240, 0, 242, 241, 0, 381, 712, 243,
	244, 713, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 714, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 715, 263, 716,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 717, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 718,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 925, 983, 341, 0,
	0, 981, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	780, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 705, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 706, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 707, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 709, 0, 373, 234, 0, 231, 0, 708, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	710, 235, 236, 237, 711, 238, 239, 240, 0, 242,
	241, 0, 381, 712, 243, 244, 713, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	714, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 715, 263, 716, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 717, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 718, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 925, 983, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 780, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 705, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 706, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	707, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 709, 0, 373, 234,
	0, 231, 0, 708, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 710, 235, 236, 237, 711,
	238, 239, 240, 0, 242, 241, 0, 381, 712, 243,
	244, 713, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 714, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 715, 263, 716,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 717, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 718,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 925, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	780, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 705, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 706, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 707, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 709, 0, 373, 234, 0, 231, 0, 708, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	710, 235, 236, 237, 711, 238, 239, 240, 0, 242,
	241, 0, 381, 712, 243, 244, 713, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	714, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 715, 263, 716, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 717, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 718, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 1634, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 1632, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 1676, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 1637, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	1674, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 1636, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 1675, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 1634, 194, 359, 0,
	0, 1629, 195, 196, 197, 0, 199, 200, 201, 198,
	1632, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 1637, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 1628,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 1636, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 1635, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 900, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 758, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	764, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 766, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 758, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 760, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 762, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	758, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 428, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 427, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 426, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 1617,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 181, 2205,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 181, 2205, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 2202, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 758, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 1386, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 1384, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 1366, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 523, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 958, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 249, 250, 252, 382,
	525, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 520, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 1244, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 1243, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 523, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 958, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 525, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 520,
	397, 398, 0, 0, 327, 959, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 523,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 514, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 525, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 942, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 520, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 0, 918, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 917, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 915, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	914, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 249, 250, 252, 382,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 911, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 910, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 908, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 907, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 904,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 903, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	249, 250, 252, 382, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 892, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 890, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 889, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	886, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 884, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 880, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 882, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 770, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 772,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 768, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	523, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 514, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 513, 0, 0, 247, 0,
	248, 249, 250, 252, 382, 525, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 515, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 516, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 520, 397,
	398, 0, 0, 327, 518, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 505, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 506, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 503, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 495, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 451, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 1930, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 1928, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 1917, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 506, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	1254, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 0, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 734, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 0, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 0,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 0, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 1051, 1052, 0, 1081, 1082, 1083, 1091, 1092, 1093,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 1051, 1052, 0, 1081, 1082, 1083,
	1091, 1092, 1093, 0, 0, 0, 0, 0, 1053, 0,
	1084, 0, 0, 0, 1073, 0, 0, 1054, 0, 0,
	1095, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	1077, 1078, 1079, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 1096, 1076, 1077, 1078, 1079, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 1096, 1086, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1086, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 1052, 0,
	1081, 1082, 1083, 1091, 1092, 1093, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	1054, 0, 1087, 1095, 0, 1065, 1066, 1072, 1071, 1067,
	1068, 1069, 1090, 0, 1064, 1062, 1063, 1055, 1056, 1057,
	1058, 1060, 1061, 0, 1053, 0, 0, 0, 0, 0,
	1073, 1865, 0, 0, 0, 1087, 0, 1070, 1065, 1066,
	1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063,
	1055, 1056, 1057, 1058, 1060, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 1817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 1077, 1078, 1079, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 1051,
	1052, 0, 1081, 1082, 1083, 1091, 1092, 1093, 0, 0,
	0, 0, 0, 0, 0, 1084, 1088, 1096, 0, 0,
	0, 0, 1054, 0, 0, 1095, 1825, 1826, 0, 1843,
	1844, 1845, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 2028, 0, 0, 0, 1053, 0, 0, 0,
	0, 1086, 1073, 0, 0, 0, 0, 0, 1074, 1070,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1840,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 1077, 1078,
	1079, 0, 0, 0, 0, 0, 1059, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 1088, 1096,
	0, 0, 0, 1831, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 1051, 1052, 1094, 1081, 1082,
	1083, 1091, 1092, 1093, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 1086, 0, 0, 0, 0, 1054, 0,
	1074, 1095, 0, 0, 1846, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 1052, 0, 1081, 1082, 1083, 1091,
	1092, 1093, 1053, 0, 0, 1085, 0, 1841, 1073, 1084,
	0, 0, 0, 0, 0, 1070, 1054, 0, 1087, 1095,
	0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 0,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 1080,
	1053, 0, 0, 2477, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 1070, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 1076, 1077, 1078, 1079, 0, 0, 0,
	0, 1089, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 1842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 1096, 0, 0, 0, 0,
	0, 1076, 1077, 1078, 1079, 0, 0, 0, 0, 0,
	1059, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 1088, 1096, 0, 0, 1074, 0, 0, 0,
	1087, 0, 0, 1065, 1066, 1072, 1071, 1067, 1068, 1069,
	1090, 1094, 1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060,
	1061, 1085, 0, 0, 0, 2428, 0, 1086, 0, 0,
	1837, 1838, 1839, 0, 1074, 0, 0, 0, 0, 1836,
	1834, 1835, 1827, 1828, 1829, 1830, 1832, 1833, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 1051, 1052, 0, 1081,
	1082, 1083, 1091, 1092, 1093, 0, 0, 1089, 0, 0,
	0, 0, 1084, 1080, 0, 0, 0, 0, 0, 1054,
	0, 0, 1095, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 1089, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 1065,
	1066, 1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062,
	1063, 1055, 1056, 1057, 1058, 1060, 1061, 0, 0, 0,
	0, 2382, 0, 0, 1076, 1077, 1078, 1079, 0, 0,
	0, 0, 0, 1059, 1087, 0, 0, 1065, 1066, 1072,
	1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 1088, 1096, 0, 0, 2352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 1052, 1094, 1081, 1082, 1083, 1091, 1092,
	1093, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	1086, 0, 0, 0, 0, 1054, 0, 1074, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1051, 1052, 0, 1081, 1082, 1083, 1091, 1092, 1093, 1053,
	0, 0, 1085, 0, 0, 1073, 1084, 0, 0, 0,
	0, 0, 1070, 1054, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 1053, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	1070, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 1077, 1078, 1079, 0, 0, 0, 0, 1089, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 1096, 0, 0, 0, 0, 0, 1076, 1077,
	1078, 1079, 0, 0, 0, 0, 0, 1059, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 1088,
	1096, 0, 0, 1074, 0, 0, 0, 1087, 0, 0,
	1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 1094, 1064,
	1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 1085, 0,
	0, 0, 2347, 0, 1086, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 1051, 1052, 0, 1081, 1082, 1083, 1091,
	1092, 1093, 0, 0, 1089, 0, 0, 0, 0, 1084,
	1080, 0, 0, 0, 0, 0, 1054, 0, 0, 1095,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 1089, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 1065, 1066, 1072, 1071,
	1067, 1068, 1069, 1090, 0, 1064, 1062, 1063, 1055, 1056,
	1057, 1058, 1060, 1061, 0, 0, 0, 0, 2343, 0,
	0, 1076, 1077, 1078, 1079, 0, 0, 0, 0, 0,
	1059, 1087, 0, 0, 1065, 1066, 1072, 1071, 1067, 1068,
	1069, 1090, 0, 1064, 1062, 1063, 1055, 1056, 1057, 1058,
	1060, 1061, 1088, 1096, 0, 0, 2281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1051,
	1052, 1094, 1081, 1082, 1083, 1091, 1092, 1093, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 1086, 0, 0,
	0, 0, 1054, 0, 1074, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 1052, 0,
	1081, 1082, 1083, 1091, 1092, 1093, 1053, 0, 0, 1085,
	0, 0, 1073, 1084, 0, 0, 0, 0, 0, 1070,
	1054, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 1053, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 1070, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 1077, 1078,
	1079, 0, 0, 0, 0, 1089, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 1096,
	0, 0, 0, 0, 0, 1076, 1077, 1078, 1079, 0,
	0, 0, 0, 0, 1059, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 1088, 1096, 0, 0,
	1074, 0, 0, 0, 1087, 0, 0, 1065, 1066, 1072,
	1071, 1067, 1068, 1069, 1090, 1094, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 1085, 0, 0, 0, 2247,
	0, 1086, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	1051, 1052, 0, 1081, 1082, 1083, 1091, 1092, 1093, 0,
	0, 1089, 0, 0, 0, 0, 1084, 1080, 0, 0,
	0, 0, 0, 1054, 0, 0, 1095, 0, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 1089,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 1065, 1066, 1072, 1071, 1067, 1068, 1069,
	1090, 0, 1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060,
	1061, 0, 0, 0, 0, 2246, 0, 0, 1076, 1077,
	1078, 1079, 0, 0, 0, 0, 0, 1059, 1087, 0,
	0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 0,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 1088,
	1096, 0, 0, 2211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1051, 1052, 1094, 1081,
	1082, 1083, 1091, 1092, 1093, 0, 0, 0, 0, 0,
	0, 0, 1084, 0, 1086, 0, 0, 0, 0, 1054,
	0, 1074, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1051, 1052, 0, 1081, 1082, 1083,
	1091, 1092, 1093, 1053, 0, 0, 1085, 0, 0, 1073,
	1084, 0, 0, 0, 0, 0, 1070, 1054, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 1053, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 1070, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 1076, 1077, 1078, 1079, 0, 0,
	0, 0, 1089, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 1096, 0, 0, 0,
	0, 0, 1076, 1077, 1078, 1079, 0, 0, 0, 0,
	0, 1059, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 1088, 1096, 0, 0, 1074, 0, 0,
	0, 1087, 0, 0, 1065, 1066, 1072, 1071, 1067, 1068,
	1069, 1090, 1094, 1064, 1062, 1063, 1055, 1056, 1057, 1058,
	1060, 1061, 1085, 0, 0, 0, 2058, 0, 1086, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 1051, 1052, 0,
	1081, 1082, 1083, 1091, 1092, 1093, 0, 0, 1089, 0,
	0, 0, 0, 1084, 1080, 0, 0, 0, 0, 0,
	1054, 0, 0, 1095, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 1089, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 1070, 0, 0,
	1825, 1826, 0, 1843, 1844, 1845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2027, 1087, 0, 0,
	1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 0, 1064,
	1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 0, 0,
	0, 0, 2034, 0, 0, 1076, 1077, 1078, 1079, 0,
	0, 0, 0, 1840, 1059, 1087, 0, 0, 1065, 1066,
	1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063,
	1055, 1056, 1057, 1058, 1060, 1061, 1088, 1096, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 1052, 1094, 1081, 1082, 1083, 1091,
	1092, 1093, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 1086, 0, 0, 0, 0, 1054, 1831, 1074, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 1052, 0, 1081, 1082, 1083, 1091, 1092, 1093,
	1053, 0, 0, 1085, 0, 0, 1073, 1084, 0, 0,
	0, 0, 0, 1070, 1054, 0, 0, 1095, 1846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1053, 0,
	0, 1841, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 1070, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 1077, 1078, 1079, 0, 0, 0, 0, 1089,
	1059, 2540, 0, 0, 0, 1825, 1826, 0, 1843, 1844,
	1845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 1096, 0, 0, 0, 0, 0, 1076,
	1077, 1078, 1079, 0, 0, 0, 0, 0, 1059, 0,
	1857, 1094, 0, 1856, 0, 1842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 1840, 0,
	1088, 1096, 0, 0, 1074, 0, 0, 0, 1087, 0,
	0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 1094,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 1085,
	0, 1787, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 2539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1831, 1080, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 1837, 1838, 1839, 0, 1075, 0,
	0, 0, 0, 1836, 1834, 1835, 1827, 1828, 1829, 1830,
	1832, 1833, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 1080, 0, 1846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1841, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 1051,
	1052, 0, 1081, 1082, 1083, 1091, 1092, 1093, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	1760, 0, 1054, 0, 1087, 1095, 0, 1065, 1066, 1072,
	1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 0, 1053, 0, 0, 0,
	0, 0, 1073, 1825, 1826, 0, 1843, 1844, 1845, 1070,
	1842, 0, 1087, 0, 0, 1065, 1066, 1072, 1071, 1067,
	1068, 1069, 1090, 0, 1064, 1062, 1063, 1055, 1056, 1057,
	1058, 1060, 1061, 0, 0, 0, 1761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1840, 1076, 1077, 1078,
	1079, 0, 0, 0, 0, 1593, 1059, 0, 0, 0,
	0, 1051, 1052, 0, 1081, 1082, 1083, 1091, 1092, 1093,
	0, 0, 0, 0, 0, 0, 0, 1084, 1088, 1096,
	0, 1592, 0, 0, 1054, 0, 0, 1095, 0, 1837,
	1838, 1839, 0, 0, 0, 0, 0, 1094, 1836, 1834,
	1835, 1827, 1828, 1829, 1830, 1832, 1833, 0, 1053, 0,
	1831, 0, 0, 1086, 1073, 0, 0, 0, 0, 0,
	1074, 1070, 1825, 1826, 0, 1843, 1844, 1845, 0, 0,
	0, 0, 0, 1847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1846, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	1077, 1078, 1079, 0, 1841, 1840, 0, 0, 1059, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	1088, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 1051, 1052, 1094,
	1081, 1082, 1083, 1091, 1092, 1093, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 1086, 0, 0, 0, 1831,
	1054, 0, 1074, 1095, 0, 0, 0, 0, 1842, 0,
	0, 0, 0, 0, 0, 1051, 1052, 0, 1081, 1082,
	1083, 1091, 1092, 1093, 1053, 0, 0, 1085, 0, 0,
	1073, 1084, 0, 0, 0, 0, 0, 1070, 1054, 0,
	1087, 1095, 0, 1065, 1066, 1072, 1071, 1067, 1068, 1069,
	1090, 0, 1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060,
	1061, 1080, 1053, 1841, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 1070, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 1077, 1078, 1079, 0,
	0, 0, 0, 1089, 1059, 0, 0, 1837, 1838, 1839,
	0, 0, 0, 0, 0, 0, 1836, 1834, 1835, 1827,
	1828, 1829, 1830, 1832, 1833, 0, 1088, 1096, 0, 0,
	0, 0, 0, 1076, 1077, 1078, 1079, 0, 0, 0,
	0, 0, 1059, 0, 0, 1094, 0, 1842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1088, 1096, 0, 0, 1074, 0,
	0, 0, 1087, 0, 0, 1065, 1066, 1072, 1071, 1067,
	1068, 1069, 1090, 1094, 1064, 1062, 1063, 1055, 1056, 1057,
	1058, 1060, 1061, 1085, 591, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 1085, 0, 0, 0, 0, 1837, 1838, 1839, 0,
	0, 0, 1075, 0, 0, 1836, 1834, 1835, 1827, 1828,
	1829, 1830, 1832, 1833, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 1051, 1052, 0, 1081, 1082, 1083, 1091,
	1092, 1093, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 2038, 0, 1054, 0, 1087, 1095,
	0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 0,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 0,
	1053, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 1087, 0, 0, 1065,
	1066, 1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062,
	1063, 1055, 1056, 1057, 1058, 1060, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 1077, 1078, 1079, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 1863, 0, 0, 1051, 1052,
	0, 1081, 1082, 1083, 1091, 1092, 1093, 0, 0, 0,
	0, 0, 1088, 1096, 1084, 0, 0, 0, 1858, 0,
	0, 1054, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 1086, 0, 0,
	0, 1073, 0, 0, 1074, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 1077, 1078, 1079,
	0, 0, 0, 1080, 0, 1059, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1096, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 1087, 0, 0, 1065, 1066, 1072,
	1071, 1067, 1068, 1069, 1090, 44, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 1075, 0, 1051, 1052, 0, 1081, 1082,
	1083, 1091, 1092, 1093, 0, 0, 0, 0, 0, 0,
	1089, 1084, 0, 0, 0, 0, 0, 0, 1054, 0,
	62, 1095, 0, 0, 0, 0, 0, 63, 0, 477,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090,
	0, 1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061,
	0, 0, 0, 1076, 1077, 1078, 1079, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 1051, 1052, 0,
	1081, 1082, 1083, 1091, 1092, 1093, 0, 0, 0, 0,
	0, 0, 0, 1084, 1088, 1096, 0, 1816, 0, 0,
	1054, 0, 0, 1095, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 1086,
	1073, 0, 127, 69, 0, 70, 1074, 1070, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 1378, 0, 0, 476, 0, 0, 103,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1823, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 1076, 1077, 1078, 1079, 0,
	0, 0, 0, 0, 1059, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 141, 1088, 1096, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 1089, 0, 0,
	135, 0, 0, 1051, 1052, 1094, 1081, 1082, 1083, 1091,
	1092, 1093, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 1086, 0, 126, 0, 0, 1054, 0, 1074, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 1052, 0, 1081, 1082, 1083, 1091, 1092, 1093,
	1053, 0, 0, 1085, 0, 0, 1073, 1084, 0, 0,
	0, 0, 0, 1070, 1054, 0, 1087, 1095, 0, 1065,
	1066, 1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062,
	1063, 1055, 1056, 1057, 1058, 1060, 1061, 1080, 1053, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 1070, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 1077, 1078, 1079, 0, 0, 0, 0, 1089,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 1096, 0, 0, 0, 0, 0, 1076,
	1077, 1078, 1079, 0, 0, 0, 0, 0, 1059, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1088, 1096, 0, 0, 1074, 0, 0, 0, 1087, 0,
	0, 1065, 1066, 1072, 1071, 1067, 1068, 1069, 1090, 1094,
	1064, 1062, 1063, 1055, 1056, 1057, 1058, 1060, 1061, 1085,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 1051, 1052, 0, 1081, 1082, 1083,
	1091, 1092, 1093, 0, 0, 1089, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 1054, 0, 0,
	1095, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 1089, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 1065, 1066, 1072,
	1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063, 1055,
	1056, 1057, 1058, 1060, 1061, 0, 0, 0, 0, 0,
	0, 0, 1076, 1077, 1078, 1079, 0, 0, 0, 0,
	0, 1059, 1087, 0, 0, 1065, 1066, 1072, 1071, 1067,
	1068, 1069, 1090, 0, 1064, 1062, 1063, 1055, 1056, 1057,
	1058, 1060, 1061, 1088, 1096, 1051, 1052, 0, 1081, 1082,
	1083, 1091, 1092, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 1054, 0,
	0, 1095, 0, 0, 0, 0, 0, 1187, 1086, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 1053, 40, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 41, 1070, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 51, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 1076, 1077, 1078, 1079, 0, 0, 1075,
	0, 51, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 1089, 0, 0, 63,
	0, 477, 64, 0, 1088, 1096, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 63, 0, 477,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 1065, 1066,
	1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062, 1063,
	1055, 1056, 1057, 1058, 1060, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 1089, 0, 0,
	0, 0, 0, 0, 127, 69, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 127, 69, 0, 70, 0, 0, 476, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 103,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 142, 1065,
	1066, 1072, 1071, 1067, 1068, 1069, 1090, 0, 1064, 1062,
	1063, 1055, 1056, 1057, 1058, 1060, 1061, 141, 0, 0,
	0, 0, 0, 1297, 0, 134, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 1297, 134, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 126, 1305, 1294, 1324, 1285,
	1315, 1314, 0, 0, 1287, 1286, 0, 0, 0, 0,
	1326, 1325, 0, 126, 0, 1305, 1294, 1324, 1285, 1315,
	1314, 0, 0, 1287, 1286, 0, 0, 0, 0, 1326,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1320, 0,
	1312, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 0, 0, 0, 1320, 0, 1312,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 1309, 1307, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 1307, 1308, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 1298, 1296, 1299,
	1300, 1301, 1302, 1303, 0, 1323, 0, 0, 0, 1293,
	0, 0, 0, 0, 0, 0, 1298, 1296, 1299, 1300,
	1301, 1302, 1303, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 1295, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	1295, 0, 0, 0, 544, 0, 570, 0, 0, 0,
	1306, 0, 0, 0, 1421, 1419, 1420, 1423, 1422, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 1306,
	0, 0, 0, 0, 0, 0, 547, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 1291, 0, 0, 548, 0, 0,
	0, 1290, 550, 1328, 0, 0, 0, 0, 0, 0,
	556, 557, 1304, 1291, 0, 566, 1288, 0, 0, 0,
	1321, 1322, 1328, 0, 0, 0, 0, 0, 0, 571,
	551, 0, 0, 0, 0, 1288, 0, 0, 0, 1321,
	1322, 0, 1292, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 1292, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 560, 0, 0, 555, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 563, 573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 0, 0, 0, 568, 0, 0,
	0, 0, 574, 0, 0, 0, 0, 561, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567,
}
var sqlPact = [...]int{

	3856, -1000, -29, -1000, -1000, -1000, 157, -1000, -1000, -1000,
	-1000, 155, 153, 152, -1000, 151, 149, 148, 146, 142,
	141, 137, 136, 135, 134, 133, -1000, 128, -1000, -1000,
	-1000, -1000, 125, 123, 122, 119, 117, 110, 107, -1000,
	982, 21536, 102, 101, 1358, -1000, 35365, 100, 98, 92,
	91, 1021, 84, 83, 25584, 1071, 1493, 82, 81, 79,
	78, 76, 1130, 35030, 3705, 1424, 1111, 1633, 34692, 21198,
	1586, 1412, 34354, -1000, -1000, 34016, 66, 65, 63, 62,
	57, -1000, -1000, 33678, 56, 52, 50, 48, 47, 43,
	40, 38, 37, 35, 34, 30, 28, 26, -1000, 25,
	23, 21, -1000, 42892, 20, 19, 18, 1097, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 929, 114, -1000, 884, 409, 1864, 7945, 1024,
	1018, 1014, 1012, 1031, 37375, 35365, 17, -62, 15, -1000,
	1967, 614, 18773, 3856, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25246, 24908,
	33340, 33002, 6199, 753, -1000, -32, 22208, 35365, -1000, 159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14236, 13886, 562,
	159, -1000, -1000, -1000, -1000, -1000, 32664, -1000, 32326, 31988,
	1479, 31650, -1000, -1000, -1000, -1000, 31312, -1000, -1000, 1830,
	1652, 1645, 24570, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 30977, 30639, 30301, 29963, 29625,
	500, -1000, -1000, -1000, 17028, -1000, -1000, -1000, -1000, 14,
	-1000, 13, -1000, 9, 4, -10, -12, -1000, -13, -14,
	-1000, -15, -16, -1000, -25, -26, 29287, 846, 1273, -1000,
	-1000, -31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35365, -1000, 14934, -1000, 498, -1000, 1632, -1000, 14934, -1000,
	1269, -1000, -1000, -1000, -1000, -1000, 35365, -1000, -1000, -1000,
	-1000, -1000, -1000, 2145, 1179, 497, 28949, -1000, 1408, -1000,
	601, 772, -1000, -1000, -1000, 8992, 168, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1434, 22557, 1246, 1962,
	1828, 2144, 1437, 1822, 1792, 1765, 1732, 1730, 2142, 928,
	2135, 1800, 995, 2134, 1707, 1238, 667, 2133, 1630, 1618,
	-1000, -1000, -1000, -1000, 934, -1000, -1000, -1000, 26924, -1000,
	-1000, 816, 902, 884, -1000, -1000, -1000, 1383, 1917, 1917,
	1917, 1989, 316, 291, -1000, 114, -1000, 1345, -1000, 1127,
	-1000, -1000, -1000, -1000, -1000, 41883, -1000, -1000, 14934, 14934,
	14934, 14934, 14934, 1151, 520, -1000, 496, 494, 7246, -1000,
	-1000, 2112, -1000, -1000, -1000, 295, -1000, -1000, 14934, 159,
	-1000, -1000, -1000, -1000, 490, 2129, -1000, 653, -1000, -1000,
	-1000, 607, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1655, 487, 484, 483, -1000, 482, -1000, -1000, 481,
	480, 479, 478, 476, 474, 473, 472, 471, 470, 469,
	468, 467, 466, 465, 973, -1000, 625, -1000, -1000, 625,
	625, -1000, 431, 431, 432, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 431, -1000, -1000, -1000, 573, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 464,
	1307, -1000, -1000, 1307, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 747, 36705, -34, 35365, -1000, 457, -34, -1000, -1000,
	296, -1000, 10039, 10039, -1000, -1000, -1000, -1000, -1000, 9341,
	1918, -1000, 42320, -207, 325, 571, -1000, 17726, 20512, -1000,
	-1000, 1008, 1819, 957, -1000, 939, 1818, 531, -1000, 1118,
	-1000, 1115, 1815, -106, 1712, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 22892, 22208, -32, -40, -1000, -1000, -1000, 5850,
	41883, -1000, 41883, -1000, 833, 19469, 159, -1000, -1000, -1000,
	-1000, 451, 1337, 613, -1000, 327, -1000, 28611, 613, 1335,
	-1000, -1000, -1000, 26924, -1000, 35365, -1000, 35365, -1000, 875,
	-1000, 37040, 116, 1812, -1000, -1000, 116, 1805, -1000, 113,
	1791, -1000, -1000, 1245, 1782, -1000, -40, 1780, -1000, -1000,
	14934, -67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 614,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 28273, 21872, 1375, 570, 41883, 2050, 42678, 22892,
	41883, 21872, -1000, -1000, 35365, -1000, 14934, -1000, 2046, 1379,
	-35, -1000, -1000, -1000, -1000, -1000, 1380, 1421, 746, 826,
	8992, 8992, 1869, -1000, 166, 6199, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 27935, -1000, -1000, -1000, 1173, 35365,
	-1000, -1000, 1653, -1000, 21872, 35365, -1000, 35365, -1000, 35365,
	-1000, 35365, -1000, 35365, -1000, -1000, -1000, -1000, -1000, 41538,
	-1000, 1650, -1000, -1000, 35365, -1000, 1377, -1000, -1000, -1000,
	27600, 27262, -1000, 961, 807, -1000, -1000, 118, -1000, 22892,
	1935, 598, -1000, 1383, -1000, 1267, 1449, 13536, 1430, 14934,
	114, -1000, -1000, 114, 114, 8643, -1000, -1000, -1000, 35365,
	-1000, 42659, 42678, 6199, 762, 14934, 14934, 14934, 14934, 14934,
	14934, 14934, 14934, 14934, 14934, 14934, 14934, 14934, 14934, 14934,
	14934, 14934, 14934, 14934, 14934, 14934, 14934, 14934, 14934, 14934,
	14934, 14934, 14934, 14934, 14934, 14934, 14934, 1487, 14934, 739,
	14934, 14934, 14934, 14934, 1332, 1119, 430, 1229, -1000, 2085,
	2085, 2085, 42144, 42144, 403, 520, -1000, 14934, -1000, 171,
	14934, 291, 39934, -33, 6897, -1000, -1000, -1000, 13187, 623,
	41883, 159, 4668, -1000, 2110, 1084, 1684, 1541, 441, 540,
	539, 537, 492, 14934, 14934, 12838, 12488, 12138, 15632, 11788,
	14934, 7595, 14934, 14934, 14934, 14934, 11438, 11088, -1000, 439,
	-1000, -1000, -1000, -1000, 2108, -1000, -1000, 2107, -1000, 761,
	757, 2105, -1000, -35, -1000, 36705, -1000, 35365, -34, 2045,
	35365, -1000, 138, -1000, 40751, -1000, 138, -69, -1000, 1448,
	1442, 19121, 1401, 1192, 1192, 1192, -1000, 433, 517, 571,
	5133, 10738, -1000, 25919, 1200, 188, 288, 17377, 1918, -1000,
	35365, -53, 978, -1000, 24232, 1923, 1904, 1907, 26924, 2021,
	171, 1932, 1617, 738, 26924, 1930, 734, 2001, 171, 1606,
	732, 35365, 6199, 1929, 569, -1000, 35365, -1000, -1000, -1000,
	1603, -70, -1000, -1000, 23897, 2043, 1779, -1000, 1046, -1000,
	2038, 35365, 1266, 1333, -1000, -1000, 793, 1773, 618, 221,
	2035, 221, 19816, -1000, 35365, -1000, 35365, -1000, -1000, 35365,
	-1000, 35365, -1000, 35365, 35365, -1000, 35365, 35365, -72, 41883,
	42338, 23562, 728, -1000, 647, 23897, 129, -75, -1000, 858,
	-1000, -1000, -1000, -1000, 290, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 432,
	973, 431, 431, 431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 573, -1000, -1000, 625, 625, 625, -1000, -1000, -84,
	-1000, 1601, 590, -78, 677, -35, -1000, 1307, -1000, 1265,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2127, -1000, 2093, -1000, -1000, 2102, -37,
	-1000, -37, -1000, 6199, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	515, -1000, -1000, -1000, -1000, -1000, -1000, 35365, 35365, 35365,
	-1000, 26924, -1000, 1647, -1000, 1944, -1000, -1000, -1000, -1000,
	41883, -1000, 398, -1000, -1000, 41883, 980, 1462, -1000, 1462,
	-38, -1000, 40629, 1427, 35365, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, 442, 442, 817,
	817, 817, 817, 2061, 282, 930, 564, 240, 240, 240,
	240, 240, 240, 240, 240, 267, 345, 345, 267, 267,
	267, 267, 267, 240, 240, 240, 42144, 41921, 4173, 14934,
	14934, 727, 1088, 430, 4173, 14934, 4173, 4173, 4173, 4173,
	-1000, 1366, -1000, -1000, -1000, -1000, 1592, 428, 15632, 15632,
	-1000, -1000, -1000, 7246, 15981, -1000, -1000, -1000, -1000, 425,
	14934, -1000, 40157, -222, 287, -68, -1000, 14934, 512, -126,
	-1000, 861, -1000, 14934, -1000, -3, 14934, 14934, 14934, 281,
	-1000, 280, -1000, 726, -1000, 723, 722, 719, -1000, 423,
	1132, 422, 417, 14934, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41727, 38084, 278, -1000, 1584, -68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 268, -1000, 266, -1000, 41605,
	-68, 265, 40683, -1000, 15632, 15632, 15632, 7246, 416, 264,
	-1000, 40351, -1000, 41348, 10388, 10388, 10388, 253, 41223, 14934,
	-68, 38051, 4263, 4137, -85, -86, -1000, -92, -1000, 2101,
	-93, 252, 592, 589, 247, -1000, -1000, 412, -108, 618,
	10039, 18424, 6199, -1000, 618, 9341, -1000, 19121, 19121, 1244,
	1441, 19121, -1000, -1000, -1000, -1000, 25919, 530, 571, 25919,
	-1000, 2099, 1415, 243, -1000, -1000, -1000, 35365, 408, -1000,
	571, 242, 951, 35365, 35365, 35365, -1000, -1000, 1328, 36370,
	1327, 42678, 35365, -1000, 404, 402, 1416, 1414, 35365, 35365,
	36035, 35700, 35365, 996, 171, -1000, 588, 401, 35365, 938,
	577, 35365, 171, -1000, 400, 35365, 919, -1000, 576, 1514,
	1293, -1000, 830, 1583, 35365, 239, -109, -39, 42678, -1000,
	-1000, -1000, -1000, -1000, 35365, 461, 35365, 171, 35365, 2122,
	171, 35365, 1767, 1804, 544, 35365, 1449, 14934, 960, -1000,
	18075, 636, 35365, 905, 130, -1000, -1000, -1000, 565, 35365,
	-1000, -1000, 116, 116, -1000, 113, 1245, -40, -1000, 14934,
	-1000, -1000, 35365, 22892, -115, -1000, -1000, 42678, -1000, 519,
	690, -1000, 2098, 609, 22892, 35365, 8992, 8992, -1000, 1440,
	-1000, -1000, 926, -1000, 1006, -1000, -1000, -1000, -1000, 8992,
	-1000, -54, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1163,
	-1000, 980, -1000, 14934, 2097, -1000, -1000, -1000, 8643, -1000,
	-1000, -1000, 35365, -185, 14934, 4173, 4173, 14934, 15632, 15632,
	-1000, 4173, -1000, -1000, -1000, -1000, -1000, 1580, 399, 14934,
	42678, 40220, 38516, -116, -1000, 14934, -42, -1000, 14934, -1000,
	39896, -1000, -1000, 516, 1768, -1000, 14934, 40945, 237, 9690,
	-1000, 40907, -4, -4, -1000, 2117, 1361, 1143, 1203, 886,
	2095, -1000, 20164, 619, 1205, 39740, 42659, 42678, -1000, 14934,
	-1000, -1000, 1572, 14934, -1000, 42659, 42678, 15632, 15632, 15632,
	15632, 15632, 15632, 15632, 15632, 15632, 15632, 15632, 15632, 15632,
	15632, 15632, 15632, 15632, 15632, 15632, 1388, 15632, 2077, 2077,
	2077, -50, 14934, -1000, 1639, 1572, 14934, 14934, 42678, 236,
	226, 222, -1000, 14934, -68, 14934, 14934, 14934, -1000, -1000,
	-1000, 219, -1000, 2090, -1000, -1000, -1000, -1000, 129, -1000,
	1531, -1000, -117, -1000, 1918, -1000, 1531, -1000, -1000, 1244,
	-1000, 393, 14934, 19121, -1000, 511, -1000, -121, -1000, 25919,
	-1000, 508, -223, -1000, 561, -1000, 571, 392, 35365, 25919,
	-1000, -1000, -1000, 711, 705, 1763, -1000, 1321, -1000, 643,
	-1000, 1110, 14934, 16679, 391, 388, 1131, -1000, 1759, 1245,
	1748, 1245, -1000, -53, 966, -1000, 20860, 14934, -1000, 698,
	20860, -1000, -1000, 14934, -1000, 697, 20860, 609, 1569, 818,
	-1000, 827, -1000, 1486, -1000, 23897, 387, 35365, 385, -1000,
	382, -1000, -1000, 378, 35365, 1387, 544, 23227, -1000, 613,
	905, -1000, 41883, -1000, 905, 8294, 1909, -127, -1000, -1000,
	-1000, 618, 19816, 19121, 9341, -133, -1000, -1000, -1000, -1000,
	41883, -54, 1872, 1872, -1000, 2086, -1000, 507, 218, -1000,
	26589, -1000, -54, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35365, 6199, 35365, 35365, 1206, 39517, -1000, 1910, 6199, 2010,
	4173, 4293, 4212, 14934, 42678, 42285, -134, 14934, 14934, -1000,
	217, 14934, 506, 41883, -1000, -1000, -1000, 41883, 14934, 2116,
	14934, 216, 214, 213, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 211, -1000, -1000, 37710, 14934, 210, -1000, 209,
	208, 41883, 1639, 41883, -1000, -1000, 770, 770, 898, 898,
	898, 898, 2077, 778, 791, 710, 360, 360, 360, 454,
	946, 946, 360, 360, 360, 1558, 1399, 377, 40435, 14934,
	206, -1000, -1000, 41883, 41883, 202, -1000, -1000, -1000, -68,
	318, 39479, 39323, -1000, 200, 195, 1528, 1987, -1000, 19121,
	1528, -1000, 35365, 41883, -1000, -207, -1000, 2082, -1000, -1000,
	1415, -1000, 5496, 25919, 35365, -135, -1000, 35365, 35365, 35365,
	1745, -1000, 1351, -1000, 39100, -141, -1000, 322, 1958, 14934,
	-1000, -1000, 372, 16679, 35365, -1000, 1425, 1519, 665, 35365,
	-1000, 35365, -1000, 35365, 35365, 35365, -1000, 370, 159, -142,
	35365, -1000, -143, 35365, -1000, -1000, 22892, 749, -1000, 1129,
	1503, -1000, 16679, 367, 35365, 23897, 2030, 16679, 1255, 1406,
	544, 23227, -1000, 793, -1000, -1000, -55, -1000, 359, 171,
	905, -1000, -57, -1000, 558, 1859, -1000, 1857, 505, -1000,
	-1000, -58, 366, -1000, 555, 551, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1910, 14934, 14934, 42285, -148, -1000, 4173,
	4173, -1000, 39062, -1000, 41883, -1000, 40907, -1000, -1000, -1000,
	-1000, 1098, -1000, 38906, -1000, -1000, -1000, -1000, 15632, 1548,
	365, 42678, 38683, -1000, -1000, 14934, -1000, -1000, -1000, -1000,
	615, 14934, 14934, 1918, 615, -149, 571, -1000, -1000, -1000,
	2078, -1000, -150, -1000, -1000, -1000, -1000, 35365, -1000, 35365,
	-1000, 6199, 35365, 1547, 1308, -1000, -1000, 1405, 364, 15632,
	35365, -1000, 1052, 16679, 1910, 159, 6199, 1910, 38645, 4668,
	-156, -158, 1302, -1000, 1301, 14934, -1000, 42678, 1245, 1245,
	-1000, 696, 693, 14934, 686, -1000, 681, -1000, -60, 20860,
	-1000, -1000, 1986, 1139, -159, 16679, -161, 194, 171, -164,
	35365, -1000, 544, 23227, -1000, 1804, 1833, 35365, 1906, -1000,
	-1000, 362, 361, 357, -1000, 26254, 26254, 22892, 22892, -1000,
	4173, 4173, -1000, -1000, 191, 1205, 1980, -1000, 40812, 15632,
	42678, -169, -1000, 38489, -1000, 35365, 41883, -68, -1000, -1000,
	25919, 504, -1000, -1000, 1249, -1000, -1000, 35365, 1309, -1000,
	-1000, 14934, 40435, 347, 1486, 343, -1000, -1000, -1000, -1000,
	-1000, -1000, 1958, -3, -1000, 936, -1000, -1000, 41883, 1953,
	-1000, -1000, 35365, 35365, -4, 342, 335, -1000, 1189, 35365,
	1052, -170, -1000, 1486, -1000, 1052, 333, 23227, -1000, 1387,
	776, -172, 35365, -1000, -1000, 6546, 22892, 22892, -1000, -178,
	-1000, -1000, -1000, 968, 14934, 40812, -179, -1000, -1000, -63,
	-1000, 2025, -1000, -1000, -1000, -1000, 1718, 38367, 1360, 35365,
	-1000, 35365, 1910, 185, 35365, 646, 6199, -1000, -1000, 183,
	14934, 14934, 332, 331, 329, 1486, 1052, -1000, 1486, 16679,
	-1000, 1406, 874, -1000, 618, -1000, -181, -186, -1000, 181,
	15283, 15283, -68, -1000, 35365, 328, 1691, -1000, 1232, 1154,
	180, -187, -1000, -1000, 327, -1000, 14934, -1000, 2116, -188,
	-193, 35365, 35365, 35365, -1000, 1486, -1000, -194, -1000, 19816,
	-1000, 609, 609, -1000, -1000, -1000, 16330, 1248, 891, 40313,
	-1000, -1000, -1000, 35365, -1000, 1242, 1236, 907, -1000, -1000,
	-1000, -1000, -1000, 1360, 41883, -1000, -1000, -195, -196, -201,
	-1000, 1052, -175, -1000, -1000, 2056, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1832, -1000, 654, 1403, 1403, 1232, 321,
	320, 1240, 1486, -1000, 14585, -1000, 2064, -1000, -1000, 1457,
	-1000, -1000, 1054, 1032, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 177, 6199, 174, 6199, -1000, 633, -1000, 631,
	296, 1385, -59, -1000, 774, 326, -91, -1000, 296, -1000,
	-1000, 1054, -61, -1000, 1032, -155, -1000, -1000, 1032, -1000,
}
var sqlPgo = [...]int{

	0, 2522, 2518, 1664, 1846, 2515, 2512, 2509, 2508, 2502,
	2499, 2498, 2490, 2489, 2486, 2485, 2484, 2483, 2482, 2480,
	2479, 2478, 2477, 2474, 1844, 2473, 1837, 2470, 2469, 2468,
	2465, 2463, 2462, 1835, 2461, 2460, 2459, 2458, 2456, 2454,
	1827, 2453, 1809, 2452, 2446, 2441, 2438, 2436, 1804, 2435,
	80, 113, 1798, 2427, 2426, 1790, 1788, 1773, 2425, 1771,
	2424, 2423, 1741, 1736, 2421, 100, 2416, 2409, 2406, 1730,
	1728, 2405, 2404, 2402, 145, 2401, 1719, 2399, 2392, 2389,
	2387, 2386, 2381, 2380, 2379, 2378, 2374, 2373, 2363, 2362,
	2358, 2357, 2355, 2354, 2353, 2352, 158, 2349, 2348, 1687,
	1673, 2347, 2346, 39, 40, 18, 59, 27, 155, 2787,
	142, 2345, 2343, 2342, 2340, 2333, 2331, 23, 104, 96,
	2330, 151, 2326, 2325, 44, 46, 29, 19, 2322, 95,
	2317, 2316, 1042, 22, 2315, 2314, 128, 2303, 81, 24,
	2086, 148, 146, 110, 120, 2301, 2300, 2298, 51, 117,
	8, 4, 2, 7, 1, 2296, 2293, 2292, 26, 77,
	38, 2291, 53, 13, 2289, 2288, 131, 2286, 61, 92,
	1584, 108, 118, 1891, 97, 2285, 60, 17, 65, 2283,
	2282, 152, 33, 2280, 3, 62, 138, 2278, 72, 159,
	121, 71, 126, 129, 2275, 2274, 2271, 141, 2267, 116,
	93, 2262, 2261, 68, 2260, 99, 133, 2253, 2252, 2250,
	91, 2249, 119, 2248, 2246, 153, 140, 112, 14, 66,
	67, 11, 1580, 1579, 130, 87, 50, 49, 2245, 2002,
	1780, 1743, 88, 105, 75, 57, 106, 54, 83, 132,
	37, 2244, 2242, 134, 2241, 2239, 2238, 2235, 2234, 102,
	2233, 2232, 21, 2230, 63, 35, 48, 89, 45, 156,
	125, 111, 144, 98, 2223, 74, 123, 2220, 252, 2217,
	2215, 1882, 115, 2214, 2211, 2209, 1820, 1814, 1090, 78,
	2207, 2205, 52, 34, 2204, 2203, 90, 2200, 114, 107,
	94, 137, 337, 79, 2195, 122, 36, 2194, 32, 31,
	0, 835, 200, 2193, 124, 56, 2192, 2191, 2190, 2189,
	30, 6, 5, 10, 15, 12, 43, 28, 2186, 2185,
	127, 85, 82, 2184, 149, 2183, 2181, 2180, 58, 2179,
	16, 2177, 20, 2173, 2171, 25, 9, 2169, 2162, 139,
	2160, 103, 2157, 1977, 2153, 147, 2151, 2149, 1717, 2148,
	41, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 119, 119, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 116, 116, 121, 121, 121, 123, 123,
	120, 120, 115, 115, 24, 24, 63, 63, 106, 56,
	56, 56, 298, 298, 299, 299, 102, 102, 103, 103,
	103, 103, 104, 104, 105, 105, 105, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 40, 40, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 47, 47, 47, 45, 45, 45, 44, 44,
	44, 43, 43, 43, 46, 46, 46, 172, 172, 171,
	171, 175, 175, 48, 48, 48, 48, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	267, 267, 266, 49, 49, 241, 241, 52, 52, 198,
	198, 53, 53, 53, 53, 53, 54, 54, 64, 64,
	339, 339, 339, 343, 343, 344, 344, 345, 345, 345,
	345, 345, 345, 345, 341, 341, 59, 59, 59, 59,
	60, 60, 60, 61, 61, 101, 101, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 29, 30, 70, 70,
	70, 72, 69, 69, 69, 71, 71, 71, 71, 73,
	73, 74, 74, 74, 74, 74, 75, 75, 292, 290,
	290, 291, 291, 146, 146, 146, 146, 146, 147, 147,
	147, 297, 297, 297, 297, 297, 297, 296, 296, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 88, 88, 88, 96,
	96, 96, 96, 96, 96, 96, 77, 77, 82, 82,
	82, 82, 82, 78, 78, 83, 83, 84, 84, 85,
	85, 85, 85, 85, 85, 79, 79, 79, 79, 87,
	87, 87, 87, 86, 86, 92, 92, 92, 92, 92,
	92, 89, 89, 89, 89, 90, 90, 90, 93, 93,
	93, 93, 80, 80, 81, 81, 94, 94, 95, 95,
	95, 95, 95, 91, 91, 91, 340, 340, 342, 342,
	57, 57, 36, 36, 37, 37, 148, 148, 149, 149,
	220, 220, 220, 220, 150, 150, 122, 122, 122, 151,
	151, 152, 152, 153, 153, 153, 155, 155, 154, 154,
	154, 219, 308, 308, 309, 309, 309, 309, 309, 309,
	310, 310, 310, 310, 310, 310, 310, 306, 306, 307,
	304, 304, 305, 305, 305, 305, 346, 346, 218, 218,
	158, 158, 311, 311, 311, 311, 312, 312, 312, 312,
	312, 315, 314, 313, 313, 313, 313, 313, 253, 253,
	253, 98, 98, 38, 38, 128, 128, 39, 39, 35,
	35, 35, 202, 202, 162, 162, 258, 258, 258, 139,
	139, 117, 117, 117, 17, 13, 13, 13, 13, 13,
	13, 23, 23, 21, 21, 203, 203, 204, 204, 58,
	58, 62, 62, 67, 67, 97, 97, 97, 97, 97,
	97, 25, 25, 25, 25, 31, 31, 31, 31, 66,
	66, 348, 348, 135, 135, 135, 135, 136, 136, 215,
	215, 216, 216, 349, 349, 217, 217, 217, 130, 129,
	131, 131, 34, 34, 34, 124, 124, 125, 125, 126,
	126, 127, 127, 350, 350, 55, 55, 55, 100, 100,
	142, 142, 212, 212, 212, 214, 214, 213, 213, 213,
	188, 188, 188, 99, 99, 167, 167, 177, 177, 178,
	178, 264, 179, 179, 65, 65, 109, 109, 107, 107,
	107, 107, 107, 107, 108, 108, 108, 110, 110, 110,
	110, 110, 110, 110, 113, 113, 113, 114, 114, 114,
	112, 112, 321, 321, 321, 324, 324, 320, 322, 322,
	323, 323, 347, 347, 189, 189, 189, 157, 156, 156,
	160, 160, 159, 161, 161, 257, 257, 257, 186, 186,
	186, 186, 207, 207, 205, 205, 206, 206, 208, 208,
	209, 209, 209, 210, 210, 211, 211, 185, 185, 237,
	237, 111, 111, 111, 166, 166, 166, 168, 168, 227,
	227, 227, 228, 228, 226, 226, 226, 226, 259, 259,
	259, 259, 259, 259, 259, 259, 337, 337, 337, 338,
	338, 256, 256, 260, 260, 260, 260, 260, 260, 254,
	254, 254, 254, 255, 255, 265, 265, 192, 192, 192,
	192, 190, 190, 191, 191, 261, 261, 261, 261, 187,
	187, 262, 262, 262, 221, 221, 268, 268, 268, 286,
	286, 165, 165, 165, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 270, 270, 270, 270, 272, 272, 272,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 285, 285,
	285, 285, 285, 273, 273, 280, 280, 281, 281, 282,
	283, 274, 274, 275, 275, 276, 277, 284, 284, 284,
	284, 288, 288, 278, 278, 278, 278, 278, 279, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 200, 200, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 231, 231, 231,
	231, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 316, 316, 316, 316, 316, 316, 316, 316,
	318, 318, 319, 319, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 325, 325, 326, 326, 328, 328,
	329, 329, 330, 331, 331, 331, 332, 333, 333, 327,
	327, 334, 334, 334, 335, 335, 336, 336, 336, 336,
	336, 243, 243, 244, 245, 251, 251, 251, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 137, 137, 137, 137, 137, 174,
	174, 173, 173, 240, 240, 238, 238, 242, 242, 193,
	193, 287, 287, 287, 287, 287, 287, 287, 194, 194,
	194, 201, 195, 195, 196, 196, 196, 196, 196, 234,
	235, 197, 197, 197, 236, 236, 246, 250, 250, 249,
	248, 248, 247, 247, 224, 224, 225, 225, 223, 222,
	182, 182, 181, 181, 180, 180, 351, 351, 252, 252,
	183, 183, 184, 176, 176, 263, 263, 263, 263, 169,
	169, 144, 144, 170, 170, 140, 140, 143, 143, 141,
	141, 141, 141, 163, 163, 164, 164, 138, 138, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	289, 289, 289, 239, 132, 132, 132, 133, 133, 134,
	134, 294, 294, 294, 295, 295, 295, 295, 293, 293,
	293, 293, 293, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 8, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 1,
	0, 9, 9, 6, 7, 5, 1, 3, 8, 9,
	7, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 1, 3, 3, 1, 1,
	6, 6, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 378, -4, -24, -26, -29, -32,
	-33, -53, -40, -41, -42, -52, -48, -54, -55, -56,
	-57, -49, -63, -62, -64, -67, -65, -58, -59, -68,
	-76, -97, -98, -99, -100, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, 73, -38, -39, 94, -323, 98, -43, -44, -45,
	-47, -46, 102, 109, 112, 134, 145, 228, 234, 255,
	257, 259, 266, -107, -109, 253, -60, -61, -69, -70,
	-71, -72, -101, 278, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, 281, -25, -31, -66, 320, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -321, -110, -108, 375, 254, 329, 35,
	290, 61, 105, 261, 345, 352, -113, -111, -112, -114,
	271, 337, 300, 379, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 2, 300, 340,
	87, 153, 239, -339, 2, -170, 300, 87, -141, -132,
	368, 4, -300, -302, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 173, 174,
	175, 178, 177, 182, 183, 186, 187, 190, 192, 193,
	194, 197, 195, 199, 200, 202, 201, 207, 209, 210,
	212, 215, 218, 221, 224, 225, 226, 227, 228, 230,
	232, 234, 236, 237, 238, 239, 240, 242, 243, 245,
	246, 247, 248, 249, 253, 251, 252, 254, 255, 256,
	257, 259, 261, 262, 264, 279, 280, 291, 266, 267,
	268, 269, 270, 274, 272, 275, 276, 278, 281, 283,
	286, 289, 290, 292, 295, 296, 293, 288, 299, 301,
	302, 303, 304, 305, 306, 307, 308, 315, 316, 320,
	321, 322, 323, 326, 327, 328, 329, 331, 334, 335,
	336, 341, 346, 347, 348, 349, 350, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 180, 196, 206, 208, 219, 223, 231, 233, 241,
	263, 273, 284, 285, 294, 297, 310, 311, 312, 317,
	318, 333, 337, 338, 378, 378, 2, 170, 238, -140,
	-132, 87, 378, 378, 378, 378, 300, 2, 330, 340,
	-202, 87, 325, 378, 378, -132, 234, 22, 2, 96,
	157, 328, 327, 22, 230, 272, 302, 304, 2, 378,
	378, 378, 378, 378, 2, 340, 300, 153, 87, 330,
	-132, 2, -51, 2, 375, -50, -4, -33, -42, -52,
	-48, -24, -26, -40, -56, -55, -57, -59, -63, -62,
	-65, -69, -70, -76, -99, -100, 278, 111, -343, 2,
	22, -344, -345, 73, 102, 134, 271, 157, 96, 327,
	300, 2, 170, 2, -132, 2, -339, 2, 170, 2,
	-343, 2, -132, 2, -136, 2, 266, -132, 378, 378,
	378, 378, 378, 187, 55, 263, 275, -74, 316, -73,
	310, -292, -75, 2, -171, 197, -132, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 2, -96, 275, 34, 55, 22,
	60, 88, 135, 153, 154, 174, 68, 69, 237, 187,
	171, 315, 175, 276, 301, 316, 73, 331, 305, 110,
	4, 87, 197, 277, 310, 378, 378, 378, -347, 2,
	300, 268, 281, -108, -110, -109, -159, -160, 324, 165,
	107, 217, -107, -109, 2, -321, -96, 275, 2, 55,
	22, -290, 2, -252, 213, -229, 93, -231, 366, 367,
	361, 203, 351, -243, -233, -246, 108, 263, 375, -140,
	-232, 381, 9, -318, -109, 29, -244, -245, 49, -132,
	7, 8, 5, 6, -138, -270, -239, -279, 319, 115,
	205, -316, -317, 4, -300, -294, -271, -281, -275, -278,
	166, 58, 79, 80, 83, 81, 84, 277, 330, 50,
	28, 113, 114, 223, 231, 297, 317, 318, 147, 206,
	148, 56, 136, 180, 101, 37, 39, 41, 42, 51,
	52, 89, 91, 92, 124, 125, 126, 158, 160, 161,
	162, 163, 164, 208, 241, 284, 294, 311, 312, 338,
	-301, -282, -283, -276, -277, 74, 116, 133, 156, 149,
	168, 172, 181, 184, 198, 220, 222, 260, 282, -284,
	-348, 2, 316, 316, 2, -348, 2, -348, 2, -135,
	2, 316, 313, -324, 242, -320, -132, -324, 378, 378,
	380, 378, -156, -157, 2, 22, 99, -184, 2, 375,
	-259, 2, 373, -261, -140, -109, -260, 375, 214, -3,
	2, -261, 147, -140, 2, -261, 147, -140, 2, -132,
	2, -143, 147, -140, -293, 4, -300, -302, -301, -303,
	58, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 68, 73, 78, 79,
	81, 80, 82, 83, 84, 93, 95, 97, 99, 100,
	103, 105, 107, 115, 117, 129, 131, 132, 134, 137,
	139, 150, 153, 155, 165, 167, 176, 179, 185, 188,
	189, 203, 204, 205, 211, 213, 214, 216, 217, 229,
	235, 244, 258, 271, 277, 287, 298, 300, 309, 313,
	314, 319, 324, 325, 330, 332, 339, 340, 342, 343,
	344, 345, 313, 380, -170, -163, -132, -223, -222, 377,
	-229, 2, -229, 2, 132, 375, -181, -182, -222, -223,
	2, -171, 147, -132, 2, -171, 2, 153, -132, 147,
	2, -132, 22, 132, 2, 167, 2, 167, 2, -262,
	2, -261, -172, 147, 2, -171, -172, 147, 2, -144,
	147, 2, -143, -132, 147, 2, -163, 147, 2, -198,
	375, -267, 2, -266, -295, 4, -300, -302, -301, 337,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 275, 213, 380, -171, -229, -241, 375, 132,
	-229, 213, -132, 2, 279, 2, 375, -74, 53, 316,
	-216, 2, -217, -129, -130, -131, 169, 236, 240, 350,
	313, 356, 132, -290, -175, 377, -96, 2, -298, 2,
	-296, 9, -295, 5, 279, 2, 237, 276, 55, 132,
	2, 2, -340, 2, 213, 132, 2, 132, 2, 132,
	2, 132, 2, 132, 2, 2, 237, 276, 2, 129,
	2, 315, 2, 2, 132, 2, 169, 236, 291, 2,
	300, 340, 2, 132, 132, 350, 2, -187, -261, 300,
	350, 22, -159, -160, -186, -205, -206, 185, 117, 211,
	-189, 22, 99, -189, -189, 44, 376, 376, -96, 279,
	2, 10, 11, 57, 33, 366, 367, 368, 369, 127,
	370, 371, 364, 365, 363, 354, 355, 358, 359, 360,
	70, 357, 356, 63, 191, 265, 118, 119, 120, 121,
	250, 13, 14, 15, 26, 216, 184, 351, 149, 282,
	361, 16, 17, 18, 168, 36, 150, -137, -145, -229,
	-229, -229, -229, -229, 222, -180, -224, 373, -109, 375,
	375, -109, -229, -173, 375, 7, -109, -238, 373, -247,
	-229, -181, 375, 5, 375, 5, -325, 346, 129, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 233, -288,
	341, -288, -288, -272, 375, -272, -273, 375, -272, 347,
	352, 375, -215, -216, -215, 313, -136, 380, -324, -164,
	375, -184, -176, -263, -229, 368, -176, -183, -252, 74,
	-192, 172, 198, 133, 181, 260, 156, 7, -51, -226,
	381, 375, 368, -256, 352, -109, -260, 375, -259, -140,
	375, -119, 251, -118, 21, 23, 102, 335, 108, 288,
	306, 111, 267, 251, 108, 111, 251, 288, 306, 267,
	251, 108, 381, 111, -298, -141, 380, -293, 368, 292,
	376, -169, -140, -182, 375, -158, 203, -128, -322, 345,
	-158, 375, -133, 147, 2, -132, -322, 203, -262, -142,
	-140, -142, 278, -132, 30, -121, 380, 48, 256, 108,
	-121, 108, -121, 380, 108, -121, 108, 108, -173, -229,
	376, 380, -339, -345, 73, 375, 30, -240, -268, -269,
	-271, -280, -274, -278, -279, 40, 46, 45, 307, 196,
	273, 285, 333, 151, 38, 212, 159, 4, 158, 160,
	161, 162, 163, 164, 284, 37, 241, 125, 126, 124,
	101, 92, 91, 208, 42, 41, -282, -283, -276, -277,
	89, 311, 312, 166, 39, 52, 51, 338, 294, -299,
	-298, -339, -292, -173, 30, -216, 2, -349, 380, 183,
	-147, 190, 202, 141, 214, 348, -297, 5, 4, -239,
	-253, 93, 187, -279, 8, 367, -289, 7, 366, -291,
	-290, -291, 77, 377, -293, -171, 22, 280, 2, -292,
	-342, 129, -339, -292, -292, -292, -292, -292, 275, -51,
	129, -132, 183, -292, 2, -292, 2, 300, 153, 300,
	-121, 380, -298, 64, 65, 350, -186, -206, -205, -208,
	-229, 22, -211, 123, 199, -229, -231, -108, -108, -108,
	-161, -257, -229, 235, 153, -292, -286, -268, -285, 246,
	247, 245, 249, 248, -268, -293, 310, -229, -229, -229,
	-229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
	-229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
	-229, -229, -229, -229, -229, -229, -229, -229, -229, 184,
	149, 282, 36, 150, -229, 313, -229, -229, -229, -229,
	195, 203, 205, 319, 115, 326, 99, 209, -351, 298,
	32, -236, -109, 375, -251, 27, 287, 22, -243, 263,
	375, -224, -229, -225, -174, -173, 376, 380, -174, -242,
	-238, -250, -249, 342, 376, -173, 339, 22, 99, 368,
	2, 7, -199, 349, 194, 90, 142, 193, -200, 270,
	-326, 122, 137, 375, 376, 2, 376, 2, 376, 2,
	376, 2, -229, -229, -193, 2, -287, -173, 4, 349,
	194, 90, 142, 193, 270, -193, 2, -194, 2, -229,
	-173, -195, -230, -231, 366, 367, 361, 375, 263, -196,
	2, -229, -174, -229, 43, 179, 314, -197, -229, 132,
	-173, -229, -229, -229, -173, -173, 2, -173, 2, 375,
	7, 7, 310, 310, 7, -136, -320, 30, -163, -166,
	380, 132, 30, 4, -166, 380, 376, 172, 172, -259,
	-192, 172, -190, 220, -190, -190, -337, 375, 374, -256,
	-293, 373, 382, -174, 2, -255, -254, 30, -132, 218,
	376, -140, 380, 313, -203, 68, 59, -219, 147, 59,
	-304, -132, 68, -305, 54, 325, 235, 131, -203, 68,
	-203, 68, 68, -261, 33, -65, 66, 132, 313, -261,
	66, 313, 33, -65, 132, 313, -143, -293, 66, -265,
	353, -132, 132, 376, 380, -148, -163, -149, -132, -220,
	-219, -306, -307, -304, 153, 325, 116, 30, 108, 227,
	30, 213, 203, -124, 303, 108, -221, 343, -212, -65,
	375, 93, 30, -212, -177, -178, -264, -179, -140, 375,
	-132, -171, -172, -172, -143, -144, -132, -163, 376, 380,
	-51, -266, 313, 332, -149, -50, 376, 380, -165, 29,
	373, -199, 375, -265, 380, 132, 356, 313, 376, 316,
	-217, -146, 240, 286, 252, 274, 8, 7, 7, 380,
	-293, -341, -132, 275, -51, -140, -143, -140, -261, 129,
	65, -209, -289, 375, 367, -210, 263, 264, 380, -117,
	31, 97, 173, -140, 350, -229, -229, 313, -351, 298,
	-236, -229, 195, 205, 319, 115, 326, 99, 209, 132,
	375, -230, -230, -173, -233, 375, -173, 374, 384, 376,
	-229, 374, 374, 380, -248, -249, 103, -229, -160, 380,
	-159, -229, -173, -173, 376, 376, 313, 313, 313, 313,
	375, -331, 221, 375, 375, -229, 30, 380, 376, 132,
	376, 376, -201, 229, 376, 10, 11, 366, 367, 368,
	369, 127, 370, 371, 364, 365, 363, 354, 355, 356,
	63, 191, 265, 13, 14, 15, 168, 150, -230, -230,
	-230, -173, 375, 376, -234, -235, 132, 129, 30, -197,
	-197, -197, 376, 132, -173, 380, 380, 380, 376, 376,
	376, 7, 376, 380, 376, 350, 350, 376, 375, 376,
	-221, -263, -168, 2, -259, -293, -221, -252, -259, -259,
	-191, 332, 213, 172, -259, -254, 376, -338, 7, -256,
	-255, 7, -228, -227, 130, 201, 376, -132, 375, -256,
	376, -118, -140, -132, -132, 203, -219, 147, -123, 203,
	-268, -132, 375, 375, 173, 173, -132, -132, 147, -132,
	147, -132, -132, -119, 251, -65, 350, 375, -140, 251,
	350, -132, -65, 375, -132, 251, 350, -102, 146, 209,
	292, 132, -140, 376, 376, 380, -133, 153, -133, -65,
	-171, 5, -65, -140, 108, -125, 104, -350, 356, -132,
	-207, -205, -229, -188, -214, 258, 213, -169, 337, -132,
	-188, -167, 380, 132, 356, -169, -121, -121, -121, -121,
	-229, -341, -298, 376, -268, 373, 374, 7, 7, -105,
	345, -298, -341, -290, -290, -129, 323, 62, 240, -290,
	380, 239, 87, 300, -210, -229, -257, -140, 381, -229,
	-229, -230, -230, 132, 375, -229, -240, 26, 26, 376,
	-174, 380, -225, -229, 376, -238, 105, -229, 309, 376,
	339, -160, -160, -160, 5, 194, 142, 193, -200, 193,
	-200, -200, 7, -332, -132, 375, 343, -159, 376, -286,
	-268, -229, -234, -229, -286, -268, -230, -230, -230, -230,
	-230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
	-230, -230, -230, -230, -230, 99, 203, 209, -230, 380,
	-174, -235, -234, -229, -229, -268, 376, 376, 376, -173,
	-229, -229, -229, 376, 7, -50, -185, 137, -265, 380,
	-185, -191, 375, -229, -259, 374, 376, 380, -255, 374,
	380, 383, 356, -256, 375, -163, -254, 313, 313, 108,
	203, 334, -308, -305, -229, -162, -258, -132, -319, 375,
	-316, -317, -138, 375, 375, -116, 102, 278, -204, 108,
	-121, 108, -121, 313, -203, 68, -232, -138, -132, -173,
	313, -232, -173, 313, -232, -105, 132, 299, 292, -150,
	152, -220, 375, -133, 375, 375, -158, 375, -132, -126,
	178, -350, -296, -322, -188, -188, -176, 204, 67, 376,
	-221, -178, -168, -252, 376, -106, 75, -106, 7, 374,
	376, -104, 215, -103, -132, 5, -132, -293, -132, -140,
	214, 376, -117, -293, 26, 26, -229, -240, 376, -229,
	-229, 376, -229, 374, -229, 5, -229, 376, 376, 376,
	376, -333, -132, -229, 376, 376, 376, -235, 132, 99,
	209, 375, -229, 376, 376, 380, 376, 376, 376, 376,
	-237, 139, 44, -259, -237, -163, -226, 7, -227, -293,
	373, -255, -163, 376, -132, -132, -219, 108, -309, 68,
	-310, 57, 116, 73, 203, 205, 325, 235, 54, 93,
	244, 376, 376, 380, -139, -181, 57, -139, -229, 375,
	-162, -163, 203, 93, 203, 93, 86, 321, -132, -132,
	-140, -132, -132, 375, 376, -140, 376, -132, -299, 310,
	-151, -152, 226, 150, -162, 375, -163, -148, 30, -162,
	213, -127, 177, -350, -296, -124, -213, 375, 213, -65,
	-188, 356, 86, 86, 374, 380, 375, 356, 356, -117,
	-229, -229, 376, 376, -160, -327, 226, 376, -230, 132,
	375, -240, 376, -229, -328, 344, -229, -173, -328, 376,
	-256, 7, 376, -219, -132, -293, -132, 116, 147, 205,
	173, 375, -230, -140, -218, -346, 72, 296, -258, -117,
	-293, -117, 376, -173, 376, 376, 205, 205, -229, -268,
	-121, -121, 313, 313, -173, 313, 313, -232, 44, 224,
	376, -162, 376, 376, -65, 376, -140, -350, -296, -125,
	100, -163, 68, -184, -109, 375, 375, 375, -103, -104,
	-298, -298, 376, -160, 44, -230, -240, 376, 376, -329,
	-330, -132, -255, 374, -310, -133, 203, -229, -134, 375,
	-150, 375, -139, -160, 244, -120, 57, -132, -132, -160,
	375, 375, 186, 239, -140, -218, 376, -150, -218, 375,
	-296, -126, 327, 204, 376, -132, -299, -299, 376, -334,
	239, 264, -173, 376, 380, 30, 108, 376, -311, 192,
	-132, -163, -117, 376, -140, -115, 332, -293, 376, -173,
	-173, 375, 375, 375, -150, -218, -150, -162, -127, 278,
	-221, 376, 376, 376, -335, -336, 36, 322, 77, -229,
	-335, -330, -332, 116, -312, -315, -314, 213, 133, 225,
	283, 376, 376, -158, -229, 376, 376, -163, -163, -163,
	-150, 376, -177, -105, -105, -336, 232, 128, 263, 232,
	128, -132, -314, 213, -315, 213, 327, 96, -311, 376,
	376, 376, -218, -221, 26, -313, 200, 256, 48, 278,
	-313, -312, 375, 375, -122, 48, 256, -150, -336, 20,
	205, 93, -153, 226, -154, 226, 376, -293, 376, -293,
	337, 337, -155, -184, 182, 380, -152, -151, 308, -153,
	-184, 380, -184, -153, 380, -152, -151, -154, 380, -154,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 664, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 378,
	380, 382, 384, 0, 585, 587, 589, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 700, -2, 711, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 677, 679, 681, 683,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1279, 1203, 1209,
	1210, 1234, 1235, 1236, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 151, 153, 154, 0, 0, 0,
	1205, 1279, 160, 162, 164, 166, 0, 172, 0, 0,
	0, 0, 552, 169, 171, 261, 1341, 263, 265, 0,
	0, 0, 0, 175, 176, 177, 178, 179, 180, 182,
	184, 186, 188, 190, 191, 0, 0, 0, 0, 0,
	260, 258, 213, 214, 0, 243, 244, 245, 246, 247,
	249, 217, 219, 220, 222, 224, 226, 228, 229, 231,
	233, 234, 236, 238, 239, 241, 0, 0, 0, 267,
	273, 274, 275, 277, 278, 279, 280, 281, 282, 283,
	0, 131, 0, 461, 256, 254, 0, 127, 0, 582,
	0, 269, 583, 584, 579, 580, 1368, 608, 287, 289,
	298, 300, 302, -2, -2, 1460, -2, 313, -2, 321,
	1466, 0, 324, 325, 328, -2, 209, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 372, 374,
	376, 379, 381, 383, 385, 386, 0, 0, 0, 390,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	389, 391, 392, 393, 0, 586, 588, 590, 0, 542,
	702, 0, 0, -2, 675, 676, -2, 0, 706, 706,
	706, 0, 0, 676, 674, 0, 290, 0, 292, 0,
	390, 295, 296, 329, 330, 1188, 1189, 905, 0, 0,
	0, 0, 0, 0, 1007, 1009, 1433, 1460, 0, 1011,
	1012, 0, 1014, 1016, 1017, 0, 1020, 1021, 1173, 1205,
	1219, 1220, 1221, 1222, 0, 0, 1225, 0, 1227, 1228,
	1229, 1075, 1031, -2, -2, 1217, 833, 834, 835, 836,
	-2, 1474, 1035, 1038, 1041, 1044, 1045, 1048, 1049, 0,
	1417, 1434, 1435, 1456, 1457, 1465, 1469, 1470, 1441, 1453,
	1442, 1429, 1439, 1451, 1285, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1243, 867, 868, 873, 874, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 876,
	610, 592, 601, 610, 594, 595, 596, 597, 598, 599,
	600, 603, 0, 692, 1347, 695, 1216, 693, 678, 680,
	0, 682, 0, 0, 686, 708, 707, 741, 742, 0,
	690, 691, 701, 757, 795, 772, 763, 0, 0, 2,
	71, 0, 1441, 795, 73, 0, 1441, 795, 76, 0,
	82, 0, 1441, 1208, 0, 1248, 1249, 1250, 1251, 1252,
	1474, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 0, 0, 271, 272, 1213, 1211, 1212, 0,
	155, 156, 157, 158, 0, 0, 1206, 1182, 1180, 1181,
	167, 521, 1441, -2, 544, 521, 548, -2, 699, 1441,
	624, 262, 264, 0, 174, 0, 637, 0, 639, 0,
	654, 801, 117, 1441, 194, 207, 117, 1441, 197, 117,
	1441, 200, 1201, 117, 1441, 203, 204, 1441, 206, 257,
	0, 0, -2, 250, 252, 1244, 1245, 1246, 1247, -2,
	248, 218, 221, 223, 225, 227, 230, 232, 235, 237,
	240, 242, -2, 0, 0, 0, 460, 0, 0, 0,
	581, 0, 607, 305, 0, 310, 0, 312, 1428, -2,
	-2, 316, 611, 615, 616, 617, 0, 0, 0, 0,
	0, 0, 0, 326, 210, 0, 387, 388, 396, 397,
	132, 133, 347, 348, 0, 400, 421, 433, 0, 0,
	404, 406, 459, 408, 0, 0, 410, 0, 412, 0,
	414, 0, 416, 0, 418, 420, 422, 434, 424, 701,
	426, 0, 428, 432, 0, 437, 0, 439, 440, 441,
	0, 0, 447, 0, 0, 394, 395, 117, 799, 0,
	0, 0, -2, 0, 670, 720, 721, 0, 0, 0,
	0, 704, 705, 0, 0, 0, 666, 667, 291, 0,
	294, 0, 0, 0, 0, 1108, 1109, 1110, 1111, 1112,
	1113, 1116, 1117, 1114, 1115, 1118, 1119, 0, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 1122, 1123, 0, 0, 1125, 0, 1127, 0,
	0, 0, 0, 0, 0, 1187, 0, 0, 1124, 910,
	911, 912, 944, 945, 0, 1008, 1184, 1177, 1010, 0,
	1130, -2, 1131, 0, 0, 1013, 1018, 1019, 1130, 0,
	1172, -2, 0, 1224, 0, 902, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 870,
	881, 878, 877, 854, 0, 853, 851, 0, 855, 0,
	0, 0, 591, -2, 593, 0, 605, 0, 694, 0,
	0, 743, 746, 1193, 1197, 1198, 746, 0, 1190, 0,
	0, 0, 0, 792, 792, 792, 790, 766, 0, 772,
	0, -2, 796, 784, 0, -2, 763, 0, 0, 797,
	0, 83, 576, 96, 0, 576, 576, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 786, 1204, 0, 1178, 1179, 147,
	0, 0, 1199, 1183, 467, 0, 0, 543, 0, 698,
	0, 0, 0, 1441, 551, 1237, 626, 0, 805, 0,
	640, 0, 0, 802, 0, 192, 0, 115, 116, 0,
	195, 0, 198, 0, 0, 201, 0, 0, 0, 1131,
	701, 0, 0, 276, 0, 0, 701, 0, 1133, 813,
	814, 815, 816, 817, 902, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 864,
	0, 839, 839, 839, 856, 857, 865, 866, 871, 872,
	883, 884, 886, 888, 882, 882, 882, 879, 880, 786,
	134, 0, 0, 0, 0, -2, 318, 0, 613, 0,
	618, 338, 339, 340, 620, 621, 322, 341, 342, 343,
	344, 345, 346, 0, 538, 0, 540, 1230, 0, 319,
	331, 320, 323, 0, 211, 398, 399, 401, 402, 403,
	407, 0, 456, 409, 411, 413, 415, 417, 425, 429,
	701, 435, 438, 442, 443, 444, 445, 0, 0, 0,
	541, 0, 307, 0, 451, 0, 673, 718, 719, 724,
	728, 729, 732, 735, 736, 726, 905, 687, 688, 689,
	712, 713, 563, 0, 0, 293, 906, 809, 810, 858,
	859, 860, 861, 862, 907, 908, 0, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, -2, -2, -2,
	-2, -2, -2, -2, -2, 931, 932, 933, 934, 935,
	936, 937, 938, -2, -2, -2, 942, 943, -2, 1126,
	1128, 0, 1187, 0, -2, 0, -2, -2, -2, -2,
	956, 0, 958, 961, 963, 965, 0, 0, 0, 0,
	1186, 975, 1164, 0, 0, 1105, 1106, 1107, 960, 0,
	0, 1185, 1176, 0, 0, 1129, 1015, 0, 0, 0,
	1137, 1171, 1167, 0, 1022, 711, 0, 0, 0, 0,
	1029, 0, 1233, 889, 890, 891, 892, 893, 894, 903,
	1085, 0, 0, 0, 1036, 1037, 1039, 1040, 1042, 1043,
	1046, 1047, 0, 0, 0, 1053, 0, 1140, -2, -2,
	-2, -2, -2, -2, -2, 0, 1055, 0, 1057, 1131,
	1150, 0, 0, 978, 0, 0, 0, 0, 1460, 0,
	1060, 1131, 1158, 0, 0, 0, 0, 0, 1131, 0,
	1163, 0, 0, 0, 0, 0, 1071, 0, 1073, 0,
	0, 0, 0, 0, 0, 604, 696, 0, 0, 805,
	0, 0, 0, 1196, 805, 0, 1192, 0, 0, 0,
	0, 0, 787, 791, 788, 789, 0, 0, 772, 784,
	754, 0, 0, 0, 761, 762, 783, 0, 782, 771,
	-2, 0, 0, 0, 0, 0, 575, 98, 1441, 0,
	119, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 1207, 0, 137,
	0, 1214, 0, 0, 0, 0, 0, 466, 1213, 468,
	470, 471, 472, 473, 1238, 0, 1238, 0, 0, 0,
	0, 0, 0, 628, 634, 0, 723, 0, 652, 642,
	0, 0, 0, 652, 656, 657, 659, 660, 0, 0,
	803, 208, 117, 117, 1202, 117, 117, 205, 259, 0,
	215, 251, 0, 0, 0, 253, 255, 0, 806, 808,
	0, 818, 0, 146, 0, 0, 0, 0, 311, 0,
	612, 619, 0, 335, 0, 337, 539, 1232, 1231, 0,
	212, 458, 284, 427, 430, 453, 454, 455, 800, 0,
	452, 0, 730, 0, 0, 727, 733, 734, 0, 715,
	561, 562, 0, 0, 0, -2, -2, 0, 0, 0,
	976, -2, 957, 959, 962, 964, 966, 0, 0, 0,
	0, 0, 0, 0, 977, 1130, 0, 1174, 1177, -2,
	1132, 1135, 1136, 0, 0, 1168, 0, 0, 0, 0,
	710, 711, 711, 711, 1028, 0, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 1052, 0,
	1054, 1056, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 982,
	983, 0, 1130, 1059, 1156, 1157, 0, 0, 0, 0,
	0, 0, 1065, 0, 1162, 0, 0, 0, 1069, 1070,
	1072, 0, 837, 0, 863, 885, 887, 875, 701, 1215,
	738, 1194, 786, 745, 747, 1195, 738, 1191, 774, 0,
	776, 0, 0, 0, 778, 0, 767, 0, 769, 784,
	759, 0, 0, 752, 0, 751, 772, 780, 0, 0,
	798, 97, 565, 0, 0, 0, 100, 1441, 108, 0,
	493, 0, 0, 0, 0, 0, 578, 109, 1441, 117,
	1441, 117, 110, 84, 576, 85, 0, 0, 571, 0,
	0, 564, 86, 0, 573, 0, 0, 146, 0, 0,
	148, 0, 1200, 475, 520, 0, 0, 1238, 0, 464,
	521, 545, 547, 0, 0, 630, 634, 0, 633, 699,
	652, 722, 804, 635, 652, 0, 0, 0, 644, 641,
	638, 805, 0, 0, 0, 0, 193, 196, 199, 202,
	1132, 266, 0, 0, 1134, 0, 811, 0, 0, 126,
	0, 135, 268, 308, 309, 314, 333, 334, 336, 332,
	0, 0, 0, 0, 0, 0, 714, 563, 0, 909,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1165,
	0, 0, 0, 1176, -2, 1138, 1166, 1170, 0, 1023,
	0, 0, 0, 0, 1226, 895, 896, 897, 898, 899,
	900, 901, 0, 1083, 1084, 1088, 0, 0, 1034, 0,
	0, 1139, 1149, 1151, 979, 980, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, -2, -2, -2, 997,
	998, 999, -2, -2, -2, 0, 0, 0, 1152, 0,
	0, 1154, 1155, 1159, 1160, 0, 1062, 1063, 1064, 1161,
	0, 0, 0, 869, 0, 0, 740, 0, 744, 0,
	740, 775, 0, 794, 777, 757, 768, 0, 765, 755,
	0, 756, 0, 784, 0, 0, 764, 0, 0, 0,
	0, 118, 491, 510, 0, 0, 554, 560, 560, 0,
	1032, 1033, 0, 0, 0, 102, 0, 0, 0, 0,
	106, 0, 112, 0, 0, 0, 91, 0, 0, 0,
	0, 90, 0, 0, 89, 124, 0, 0, 149, 480,
	0, 469, 0, 0, 0, 467, 0, 0, 0, 632,
	634, 0, 625, 626, 173, 636, 650, 651, 649, 0,
	652, 658, 655, 661, 0, 0, 128, 0, 0, 812,
	819, 144, 1331, 142, 139, 141, 285, 448, 449, 450,
	725, 731, 716, 563, 0, 0, -2, 0, 969, -2,
	-2, 1101, 1132, 1175, 1169, 1223, 711, 1024, 1026, 1027,
	904, 1090, 1087, 0, 1074, 1050, 1051, 1148, 0, 0,
	0, 0, 1132, 1103, 1061, 0, 1067, 1068, 838, 697,
	1079, 0, 0, 748, 1079, 0, 772, 770, 753, 749,
	0, 760, 0, 781, 567, 569, 99, 0, 492, 0,
	495, 0, 0, 0, 0, 501, 502, 0, 0, 0,
	0, 512, 519, 0, 563, 1218, 0, 563, 0, 0,
	0, 0, 0, 114, 0, 0, 577, 0, 117, 117,
	566, 0, 0, 0, 0, 572, 0, 574, 136, 0,
	462, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 634, 0, 627, 628, 0, 0, 0, 643,
	653, 0, 0, 0, 807, 0, 0, 0, 0, 717,
	-2, -2, 970, 1102, 0, 711, 0, 1076, -2, 0,
	0, 0, 1104, 0, 684, 0, 739, 737, 685, 793,
	784, 0, 779, 101, 0, 496, 497, 1238, 0, 500,
	503, 0, 505, 1240, 475, 0, 516, 517, 555, 556,
	559, 557, 560, 711, 514, 0, 103, 104, 113, 121,
	105, 111, 0, 0, 711, 0, 0, 785, 0, 0,
	519, 0, 509, 475, 465, 519, 0, 0, 629, 630,
	0, 0, 0, 662, 663, 0, 0, 0, 143, 0,
	138, 140, 1025, 1093, 0, -2, 0, 1005, 1066, 1078,
	1080, 0, 758, 750, 494, 498, 0, 0, 525, 0,
	513, 0, 563, 0, 0, 123, 0, 568, 570, 0,
	0, 0, 0, 0, 0, 475, 519, 463, 475, 0,
	631, 632, 0, 646, 805, 648, 0, 0, 145, 0,
	0, 0, 1089, 1006, 0, 0, 0, 504, 530, 0,
	0, 0, 558, 1023, 521, 107, 0, 120, 0, 0,
	0, 0, 0, 0, 507, 475, 549, 0, 623, 0,
	647, 146, 146, 1086, 1091, 1094, -2, 1401, 1276, 0,
	1092, 1081, 1082, 0, 506, 526, 527, 0, 522, 523,
	524, 1239, 518, 525, 122, 93, 95, 0, 0, 0,
	508, 519, 805, 129, 130, 0, 1096, 1097, 1098, 1099,
	1100, 499, 528, 0, 529, 0, 0, 0, 530, 0,
	0, 478, 475, 645, 0, 531, 0, 534, 535, 0,
	532, 515, 0, 0, 474, 476, 477, 550, 1095, 533,
	536, 537, 0, 0, 0, 0, 481, 0, 482, 0,
	0, 0, 480, 486, 0, 0, 479, 485, 0, 483,
	487, 0, 480, 484, 0, 479, 490, 488, 0, 489,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 364, 3, 370, 365, 3,
	375, 376, 368, 366, 380, 367, 377, 369, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 384, 379,
	354, 356, 355, 358, 381, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 373, 3, 374, 371, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 382, 363, 383, 361,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 357, 57697, 359, 57698, 360, 57699, 362,
	57700, 372, 57701, 378, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:894
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:900
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1071
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1083
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1092
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1101
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1193
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1266
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1270
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1361
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1430
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1586
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1712
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1956
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1959
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2037
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2042
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			return unimplemented(sqllex, "set from current")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = Low
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = Normal
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = High
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2201
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.str = "client_encoding"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2416
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2464
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2490
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2528
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = DropDefault
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[1].union.exprs()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[3].union.exprs()})
		}
	case 488:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[8].union.rangePartitions()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			return unimplemented(sqllex, "match full")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			return unimplemented(sqllex, "match partial")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			return unimplemented(sqllex, "match simple")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2942
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = NoAction
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = Restrict
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = Cascade
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = SetNull
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = SetDefault
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = true
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = false
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3135
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = Ascending
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = Descending
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3179
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3181
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3215
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3314
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = ReadOnly
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = ReadWrite
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.str = ""
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.str = ""
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			return helpWith(sqllex, "INSERT")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3606
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			return helpWith(sqllex, "SELECT")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			return helpWith(sqllex, "VALUES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			return helpWith(sqllex, "TABLE")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			return helpWith(sqllex, "SELECT")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			return helpWith(sqllex, "TABLE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3882
		{
			return unimplemented(sqllex, "cte")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3886
		{
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3890
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3894
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = true
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = false
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = false
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = true
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3917
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3918
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4104
		{
			return helpWith(sqllex, "VALUES")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &From{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4143
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4188
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4225
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = nil
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = true
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = false
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.str = astFullJoin
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.str = astLeftJoin
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.str = astRightJoin
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.str = astInnerJoin
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4408
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4409
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4509
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4517
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4541
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4552
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4633
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4642
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = nil
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4707
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4803
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4835
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4875
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = year
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = month
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = day
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = hour
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = minute
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = month
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = hour
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = minute
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = minute
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = nil
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = second
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4970
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5005
		{
			return unimplemented(sqllex, "at tz")
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5279
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5452
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5505
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5506
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5519
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5530
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5551
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5560
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5569
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			return unimplemented(sqllex, "current role")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5588
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5614
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5619
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5628
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5629
		{
			return unimplemented(sqllex, "treat")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5671
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5675
		{
			return unimplemented(sqllex, "within group")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5676
		{
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5711
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.str = ""
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5773
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5774
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5775
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5779
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5785
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5786
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5787
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5788
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5789
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = Any
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = Some
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = All
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = Plus
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = Minus
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = Mult
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = Div
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = Mod
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = Bitand
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = Bitor
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = Pow
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = Bitxor
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = LT
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = GT
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = EQ
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = LE
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = GE
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = NE
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = Like
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = NotLike
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = ILike
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = NotILike
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6144
		{
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6145
		{
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6263
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6307
		{
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6336
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6343
		{
			return unimplemented(sqllex, "func const")
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6352
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6362
		{
			sqlVAL.union.val = DNull
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6373
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6379
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.str = ""
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
