// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOAD = 57513
const LOCAL = 57514
const LOCALTIME = 57515
const LOCALTIMESTAMP = 57516
const LOW = 57517
const LSHIFT = 57518
const MATCH = 57519
const MINUTE = 57520
const MONTH = 57521
const NAN = 57522
const NAME = 57523
const NAMES = 57524
const NATURAL = 57525
const NEXT = 57526
const NO = 57527
const NO_INDEX_JOIN = 57528
const NORMAL = 57529
const NOT = 57530
const NOTHING = 57531
const NULL = 57532
const NULLIF = 57533
const NULLS = 57534
const NUMERIC = 57535
const OF = 57536
const OFF = 57537
const OFFSET = 57538
const OID = 57539
const ON = 57540
const ONLY = 57541
const OPTIONS = 57542
const OR = 57543
const ORDER = 57544
const ORDINALITY = 57545
const OUT = 57546
const OUTER = 57547
const OVER = 57548
const OVERLAPS = 57549
const OVERLAY = 57550
const PARENT = 57551
const PARTIAL = 57552
const PARTITION = 57553
const PASSWORD = 57554
const PAUSE = 57555
const PLACING = 57556
const PLANS = 57557
const POSITION = 57558
const PRECEDING = 57559
const PRECISION = 57560
const PREPARE = 57561
const PRIMARY = 57562
const PRIORITY = 57563
const QUERIES = 57564
const QUERY = 57565
const RANGE = 57566
const READ = 57567
const REAL = 57568
const RECURSIVE = 57569
const REF = 57570
const REFERENCES = 57571
const REGCLASS = 57572
const REGPROC = 57573
const REGPROCEDURE = 57574
const REGNAMESPACE = 57575
const REGTYPE = 57576
const RENAME = 57577
const REPEATABLE = 57578
const RELEASE = 57579
const RESET = 57580
const RESTORE = 57581
const RESTRICT = 57582
const RESUME = 57583
const RETURNING = 57584
const REVOKE = 57585
const RIGHT = 57586
const ROLLBACK = 57587
const ROLLUP = 57588
const ROW = 57589
const ROWS = 57590
const RSHIFT = 57591
const SAVEPOINT = 57592
const SCATTER = 57593
const SEARCH = 57594
const SECOND = 57595
const SELECT = 57596
const SEQUENCES = 57597
const SERIAL = 57598
const SERIALIZABLE = 57599
const SESSION = 57600
const SESSIONS = 57601
const SESSION_USER = 57602
const SET = 57603
const SETTING = 57604
const SETTINGS = 57605
const SHOW = 57606
const SIMILAR = 57607
const SIMPLE = 57608
const SMALLINT = 57609
const SMALLSERIAL = 57610
const SNAPSHOT = 57611
const SOME = 57612
const SPLIT = 57613
const SQL = 57614
const START = 57615
const STATUS = 57616
const STDIN = 57617
const STRICT = 57618
const STRING = 57619
const STORING = 57620
const SUBSTRING = 57621
const SYMMETRIC = 57622
const SYSTEM = 57623
const TABLE = 57624
const TABLES = 57625
const TEMP = 57626
const TEMPLATE = 57627
const TEMPORARY = 57628
const TESTING_RANGES = 57629
const TESTING_RELOCATE = 57630
const TEXT = 57631
const THEN = 57632
const TIME = 57633
const TIMESTAMP = 57634
const TIMESTAMPTZ = 57635
const TO = 57636
const TRAILING = 57637
const TRACE = 57638
const TRANSACTION = 57639
const TREAT = 57640
const TRIM = 57641
const TRUE = 57642
const TRUNCATE = 57643
const TYPE = 57644
const UNBOUNDED = 57645
const UNCOMMITTED = 57646
const UNION = 57647
const UNIQUE = 57648
const UNKNOWN = 57649
const UPDATE = 57650
const UPSERT = 57651
const USE = 57652
const USER = 57653
const USERS = 57654
const USING = 57655
const UUID = 57656
const VALID = 57657
const VALIDATE = 57658
const VALUE = 57659
const VALUES = 57660
const VARCHAR = 57661
const VARIADIC = 57662
const VIEW = 57663
const VARYING = 57664
const WHEN = 57665
const WHERE = 57666
const WINDOW = 57667
const WITH = 57668
const WITHIN = 57669
const WITHOUT = 57670
const WRITE = 57671
const YEAR = 57672
const ZONE = 57673
const NOT_LA = 57674
const WITH_LA = 57675
const AS_LA = 57676
const POSTFIXOP = 57677
const UMINUS = 57678

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5901

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 34,
	355, 34,
	-2, 510,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	1, 482,
	198, 482,
	242, 482,
	351, 482,
	353, 482,
	355, 482,
	-2, 492,
	-1, 115,
	1, 485,
	198, 485,
	242, 485,
	351, 485,
	353, 485,
	355, 485,
	-2, 491,
	-1, 133,
	1, 34,
	355, 34,
	-2, 510,
	-1, 515,
	122, 1092,
	294, 1092,
	337, 1092,
	354, 1092,
	-2, 0,
	-1, 526,
	1, 219,
	355, 219,
	-2, 1097,
	-1, 539,
	111, 520,
	170, 520,
	196, 520,
	-2, 488,
	-1, 547,
	111, 519,
	170, 519,
	196, 519,
	-2, 486,
	-1, 700,
	352, 1023,
	-2, 1016,
	-1, 701,
	352, 1024,
	-2, 1017,
	-1, 707,
	5, 690,
	352, 690,
	-2, 1222,
	-1, 732,
	5, 649,
	-2, 1192,
	-1, 733,
	5, 684,
	352, 684,
	-2, 1194,
	-1, 734,
	5, 659,
	-2, 1195,
	-1, 735,
	5, 658,
	-2, 1196,
	-1, 736,
	5, 684,
	352, 684,
	-2, 1199,
	-1, 737,
	5, 684,
	352, 684,
	-2, 1200,
	-1, 738,
	5, 685,
	-2, 1203,
	-1, 739,
	5, 641,
	-2, 1204,
	-1, 740,
	5, 641,
	-2, 1205,
	-1, 741,
	5, 666,
	-2, 1209,
	-1, 742,
	5, 651,
	-2, 1210,
	-1, 743,
	5, 652,
	-2, 1211,
	-1, 744,
	5, 642,
	-2, 1216,
	-1, 745,
	5, 643,
	-2, 1217,
	-1, 746,
	5, 644,
	-2, 1218,
	-1, 747,
	5, 645,
	-2, 1219,
	-1, 748,
	5, 646,
	-2, 1220,
	-1, 749,
	5, 647,
	-2, 1221,
	-1, 750,
	5, 641,
	-2, 1226,
	-1, 751,
	5, 650,
	-2, 1231,
	-1, 752,
	5, 648,
	-2, 1234,
	-1, 753,
	5, 682,
	352, 682,
	-2, 1236,
	-1, 754,
	5, 686,
	-2, 1239,
	-1, 755,
	5, 688,
	-2, 1240,
	-1, 756,
	5, 681,
	352, 681,
	-2, 1245,
	-1, 801,
	212, 508,
	-2, 382,
	-1, 806,
	111, 519,
	170, 519,
	196, 519,
	-2, 489,
	-1, 909,
	102, 492,
	111, 492,
	151, 492,
	170, 492,
	196, 492,
	202, 492,
	305, 492,
	-2, 576,
	-1, 986,
	102, 492,
	111, 492,
	151, 492,
	170, 492,
	196, 492,
	202, 492,
	305, 492,
	-2, 809,
	-1, 995,
	352, 1000,
	-2, 988,
	-1, 1240,
	1, 577,
	70, 577,
	102, 577,
	111, 577,
	123, 577,
	127, 577,
	129, 577,
	142, 577,
	151, 577,
	158, 577,
	167, 577,
	170, 577,
	183, 577,
	196, 577,
	198, 577,
	202, 577,
	242, 577,
	244, 577,
	305, 577,
	313, 577,
	324, 577,
	325, 577,
	334, 577,
	351, 577,
	353, 577,
	355, 577,
	356, 577,
	-2, 576,
	-1, 1289,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 725,
	-1, 1290,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 726,
	-1, 1291,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 727,
	-1, 1295,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 731,
	-1, 1296,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 732,
	-1, 1297,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 733,
	-1, 1300,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 738,
	-1, 1306,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 740,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 744,
	-1, 1309,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 745,
	-1, 1310,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 746,
	-1, 1311,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 747,
	-1, 1337,
	207, 882,
	-2, 885,
	-1, 1374,
	122, 922,
	352, 1023,
	-2, 1016,
	-1, 1375,
	122, 923,
	-2, 1188,
	-1, 1376,
	122, 924,
	-2, 1096,
	-1, 1377,
	122, 925,
	-2, 1059,
	-1, 1378,
	122, 926,
	-2, 1076,
	-1, 1379,
	122, 927,
	-2, 1095,
	-1, 1380,
	122, 928,
	-2, 1147,
	-1, 1576,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 739,
	-1, 1577,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 741,
	-1, 1582,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 742,
	-1, 1600,
	207, 881,
	-2, 884,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 743,
	-1, 1805,
	154, 0,
	-2, 759,
	-1, 1815,
	207, 883,
	-2, 886,
	-1, 1857,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 786,
	-1, 1858,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 787,
	-1, 1859,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 788,
	-1, 1863,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 792,
	-1, 1864,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 793,
	-1, 1865,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 794,
	-1, 1969,
	154, 0,
	-2, 760,
	-1, 1972,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 763,
	-1, 1973,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 765,
	-1, 2079,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 764,
	-1, 2080,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 766,
	-1, 2087,
	154, 0,
	-2, 795,
	-1, 2153,
	154, 0,
	-2, 796,
	-1, 2225,
	36, 0,
	136, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 1191,
}

const sqlPrivate = 57344

const sqlLast = 31793

var sqlAct = [...]int{

	701, 1891, 2224, 2232, 2201, 2233, 2269, 2234, 1123, 2109,
	2223, 1248, 1256, 2036, 1914, 1834, 2094, 2022, 2141, 396,
	1036, 1721, 677, 548, 68, 1898, 1723, 644, 691, 1443,
	1130, 2007, 1461, 1086, 622, 694, 1235, 699, 1403, 142,
	563, 907, 1666, 142, 1480, 2061, 1118, 1544, 1438, 698,
	142, 1451, 1494, 1525, 1558, 903, 1442, 1897, 142, 1439,
	1126, 398, 1945, 1665, 142, 142, 1360, 1611, 142, 1335,
	1268, 142, 991, 890, 1257, 1524, 1694, 1531, 142, 883,
	380, 25, 1764, 1236, 1476, 372, 555, 113, 1161, 1242,
	1188, 1190, 1112, 1485, 779, 1345, 671, 1323, 1087, 1320,
	921, 884, 1446, 370, 566, 813, 778, 1022, 1354, 1371,
	626, 815, 982, 1250, 1037, 670, 1223, 808, 614, 572,
	894, 867, 503, 1210, 822, 567, 1026, 142, 142, 658,
	523, 823, 1110, 142, 388, 115, 134, 142, 142, 821,
	116, 558, 553, 521, 693, 113, 525, 1400, 2023, 925,
	138, 629, 652, 612, 866, 827, 507, 1778, 519, 1599,
	1779, 1120, 1120, 2255, 1249, 1120, 916, 2246, 2245, 2243,
	1264, 1264, 2021, 2241, 552, 2195, 916, 552, 1418, 2169,
	2158, 904, 2021, 2157, 547, 2155, 624, 2148, 1418, 2124,
	916, 2121, 2021, 506, 916, 2120, 1569, 636, 2021, 2119,
	2107, 500, 916, 2021, 1570, 128, 2081, 1253, 1243, 1418,
	1264, 556, 2069, 125, 25, 916, 1636, 1637, 2066, 2058,
	113, 916, 1264, 2057, 38, 120, 1264, 125, 1733, 2020,
	1767, 1357, 2021, 132, 1243, 1996, 1603, 111, 1264, 937,
	938, 1604, 957, 958, 959, 967, 968, 969, 1212, 540,
	1974, 122, 1144, 1264, 539, 960, 1425, 42, 2186, 112,
	1636, 1637, 940, 1971, 1958, 971, 1418, 916, 143, 131,
	1425, 1809, 1798, 112, 1264, 1247, 575, 126, 1358, 49,
	1767, 616, 1793, 51, 127, 1247, 939, 114, 937, 938,
	123, 1211, 954, 1492, 57, 1774, 58, 1704, 1775, 1683,
	916, 114, 1684, 117, 1734, 1870, 1681, 133, 57, 1264,
	58, 940, 1680, 1651, 59, 1264, 1679, 1602, 1600, 1264,
	60, 1264, 1264, 1642, 1359, 1356, 1812, 1547, 1264, 399,
	1264, 1610, 916, 1521, 60, 939, 916, 1427, 1417, 1263,
	1264, 1418, 1264, 1705, 1246, 1217, 945, 1247, 1216, 933,
	1479, 1435, 934, 1121, 1121, 1094, 1339, 1121, 879, 142,
	634, 61, 662, 621, 142, 964, 972, 1642, 640, 1116,
	1539, 793, 572, 128, 908, 2024, 2247, 2239, 676, 2222,
	2208, 2150, 1652, 970, 2122, 128, 2001, 573, 1997, 937,
	938, 901, 1989, 1988, 834, 945, 553, 1987, 962, 1361,
	1983, 132, 1982, 62, 1981, 955, 1980, 125, 1963, 63,
	1944, 1889, 940, 132, 1636, 1637, 1885, 1654, 1655, 1656,
	1880, 354, 1879, 1878, 1820, 569, 1652, 70, 71, 64,
	961, 65, 1708, 66, 1703, 124, 939, 131, 1569, 1688,
	67, 1685, 1673, 1664, 128, 126, 1635, 1632, 1631, 131,
	1629, 77, 127, 112, 119, 1653, 1616, 1615, 128, 1551,
	1368, 1367, 1487, 121, 1366, 834, 1692, 1651, 119, 1142,
	1137, 1252, 132, 1119, 653, 1240, 1355, 1331, 956, 1636,
	1637, 114, 1211, 117, 1129, 992, 132, 117, 57, 999,
	58, 99, 937, 938, 965, 906, 945, 659, 1423, 1653,
	118, 833, 905, 1836, 643, 142, 2198, 641, 131, 2185,
	2184, 627, 2177, 2171, 60, 940, 126, 2167, 2145, 142,
	2104, 1642, 131, 127, 2089, 2078, 2027, 572, 2019, 142,
	126, 2003, 1994, 1912, 142, 142, 142, 127, 142, 939,
	1910, 1658, 117, 142, 142, 142, 142, 142, 1646, 1638,
	1639, 1640, 1641, 1643, 1644, 1909, 117, 1908, 1657, 1905,
	1895, 963, 1962, 807, 951, 952, 953, 966, 1804, 950,
	948, 949, 941, 942, 943, 944, 946, 947, 572, 1782,
	1652, 2160, 1332, 1770, 1757, 1998, 1642, 1755, 1709, 1712,
	1647, 1645, 1646, 1638, 1639, 1640, 1641, 1643, 1644, 945,
	1663, 1625, 906, 1624, 1621, 1596, 819, 806, 142, 142,
	142, 142, 142, 1591, 142, 1325, 1549, 1520, 840, 789,
	1027, 941, 942, 943, 944, 946, 947, 1030, 1410, 1365,
	2144, 142, 142, 1228, 572, 142, 1122, 1034, 128, 795,
	573, 398, 777, 142, 1020, 1709, 1019, 1018, 119, 1017,
	142, 142, 142, 1653, 142, 553, 888, 1016, 955, 1015,
	917, 811, 142, 1014, 1013, 769, 132, 1636, 1637, 1012,
	2002, 923, 640, 1011, 840, 1010, 839, 774, 1009, 1008,
	799, 1007, 802, 1006, 911, 1005, 1004, 1003, 996, 810,
	810, 540, 985, 117, 623, 931, 539, 882, 887, 773,
	553, 764, 131, 656, 1976, 664, 830, 831, 1888, 1777,
	126, 1773, 113, 1229, 988, 757, 1537, 127, 1420, 871,
	992, 874, 877, 1690, 943, 944, 946, 947, 983, 902,
	870, 956, 914, 838, 1636, 1637, 117, 642, 788, 1648,
	1649, 1650, 654, 1198, 1647, 1645, 1646, 1638, 1639, 1640,
	1641, 1643, 1644, 1724, 1966, 1687, 786, 868, 1780, 1571,
	653, 570, 1475, 1196, 1243, 908, 572, 880, 142, 1686,
	1474, 1575, 1032, 142, 1642, 1127, 400, 1033, 785, 770,
	1197, 1100, 910, 1001, 1695, 915, 2062, 572, 572, 1104,
	1103, 1249, 569, 564, 398, 573, 1837, 936, 935, 787,
	1043, 927, 924, 1346, 142, 1023, 840, 1607, 1565, 862,
	1691, 1128, 1091, 1117, 1640, 1641, 1643, 1644, 1191, 1928,
	1192, 1109, 950, 948, 949, 941, 942, 943, 944, 946,
	947, 759, 125, 2214, 574, 995, 998, 906, 2261, 937,
	938, 551, 545, 142, 1024, 1025, 573, 142, 863, 142,
	142, 142, 142, 142, 142, 1136, 2147, 2262, 1139, 142,
	1141, 610, 940, 142, 142, 1133, 537, 1028, 2051, 1700,
	142, 1428, 607, 1107, 1191, 606, 1192, 1031, 112, 1191,
	142, 1192, 601, 142, 602, 530, 939, 857, 2139, 2138,
	550, 1496, 2137, 2136, 1193, 1943, 142, 1939, 1093, 544,
	1942, 1925, 573, 1090, 1088, 398, 114, 654, 142, 399,
	786, 1101, 1924, 57, 142, 58, 1089, 142, 609, 1620,
	1113, 1619, 1496, 816, 1231, 1618, 1617, 1106, 1495, 142,
	1105, 142, 1578, 1518, 1386, 572, 1517, 1080, 1515, 60,
	398, 552, 1209, 113, 1234, 1230, 1307, 1135, 1148, 1220,
	1193, 1960, 531, 787, 1147, 1193, 1267, 1108, 1452, 1277,
	1178, 1462, 360, 540, 869, 633, 540, 540, 1157, 1414,
	1413, 1158, 1159, 1043, 1043, 2146, 1278, 1168, 1186, 364,
	1172, 1173, 1174, 1175, 1176, 1171, 529, 873, 816, 1165,
	654, 1357, 1187, 1182, 1183, 1787, 1322, 1202, 1207, 1322,
	1638, 1639, 1640, 1641, 1643, 1644, 1251, 1185, 1251, 627,
	912, 1215, 1318, 1201, 361, 1225, 1226, 1221, 1788, 2111,
	113, 922, 1555, 923, 1336, 1454, 532, 1316, 654, 926,
	926, 1340, 1346, 1199, 573, 1348, 919, 1265, 1358, 1421,
	843, 1255, 543, 758, 549, 1167, 2236, 1373, 1373, 1384,
	1200, 1395, 1269, 1276, 772, 573, 573, 1407, 1408, 1409,
	659, 608, 399, 128, 1266, 1343, 533, 1177, 1930, 2189,
	1361, 546, 1644, 119, 2261, 928, 1830, 844, 2272, 389,
	842, 542, 1588, 859, 1359, 1356, 2252, 574, 1753, 1559,
	538, 132, 1762, 1189, 1333, 534, 1330, 1586, 1312, 1759,
	611, 394, 1205, 854, 2267, 535, 1313, 390, 1314, 937,
	938, 1699, 1319, 1194, 1827, 1204, 2174, 398, 1701, 1381,
	142, 1416, 113, 142, 1453, 2251, 1937, 131, 570, 565,
	142, 1563, 940, 2237, 391, 126, 1436, 1120, 142, 142,
	855, 142, 127, 142, 142, 398, 142, 142, 1021, 860,
	1184, 1361, 1422, 393, 1636, 1637, 939, 1493, 2085, 1361,
	1828, 117, 1329, 2096, 1469, 142, 2015, 1327, 1583, 1194,
	2192, 142, 365, 399, 1194, 1559, 1424, 947, 1584, 363,
	362, 509, 1589, 1477, 1478, 142, 142, 142, 1457, 2238,
	1025, 1024, 142, 980, 2193, 1028, 142, 1031, 1623, 510,
	2016, 1429, 861, 573, 142, 1224, 1471, 142, 399, 706,
	1502, 1239, 366, 142, 398, 2270, 945, 552, 1315, 142,
	142, 1497, 1522, 142, 2250, 1317, 893, 1527, 142, 2112,
	1437, 142, 1931, 1526, 1890, 1361, 1355, 1919, 142, 2235,
	2260, 367, 574, 368, 1580, 1503, 1505, 1321, 142, 1468,
	2258, 2035, 1459, 142, 1467, 142, 1465, 1473, 1466, 511,
	782, 1642, 142, 848, 392, 767, 113, 1541, 142, 686,
	2271, 1540, 1529, 1530, 627, 955, 1535, 553, 1510, 897,
	661, 1513, 1550, 1488, 1464, 810, 826, 810, 1585, 1554,
	1528, 2273, 1241, 574, 1500, 1587, 2268, 1490, 900, 825,
	2011, 2131, 2012, 2130, 2102, 1561, 1508, 1260, 139, 1992,
	1567, 1536, 355, 1523, 895, 1516, 2164, 1519, 395, 357,
	1652, 1866, 2280, 898, 2050, 1431, 783, 369, 2047, 1121,
	784, 2049, 2014, 499, 139, 1927, 1433, 505, 1304, 896,
	505, 2017, 1744, 1099, 1826, 1740, 1460, 527, 956, 574,
	553, 897, 1134, 1564, 1533, 1124, 400, 1434, 824, 512,
	2202, 1574, 1572, 1153, 1594, 1181, 1545, 1095, 1915, 1432,
	900, 1597, 1609, 2037, 825, 2103, 1714, 1713, 1483, 761,
	1534, 1219, 1218, 651, 826, 399, 1222, 1097, 501, 1613,
	1614, 498, 782, 1653, 650, 898, 615, 615, 550, 1098,
	899, 509, 355, 1581, 1579, 803, 139, 637, 646, 1993,
	1328, 1892, 645, 399, 2004, 1867, 553, 1553, 2013, 510,
	1946, 1868, 135, 1595, 2279, 2100, 572, 142, 2046, 2088,
	1662, 2048, 1546, 824, 1154, 508, 572, 513, 1302, 1305,
	1606, 1675, 941, 942, 943, 944, 946, 947, 142, 2101,
	142, 142, 384, 33, 1043, 1765, 1364, 142, 383, 32,
	142, 379, 29, 1991, 142, 1667, 840, 1803, 514, 1532,
	3, 1301, 899, 1786, 1630, 1590, 1556, 1043, 1707, 511,
	1710, 574, 399, 1514, 142, 1645, 1646, 1638, 1639, 1640,
	1641, 1643, 1644, 1511, 142, 142, 142, 1426, 654, 1245,
	142, 865, 574, 574, 142, 142, 142, 142, 142, 400,
	864, 858, 1726, 1727, 853, 1728, 142, 852, 142, 142,
	1697, 816, 816, 1698, 1696, 382, 17, 851, 1702, 1741,
	850, 849, 1156, 1689, 846, 142, 1715, 1043, 765, 1718,
	649, 142, 1668, 1484, 1179, 1670, 1671, 1672, 638, 1170,
	142, 142, 639, 1002, 1636, 1637, 1706, 1729, 600, 635,
	856, 376, 13, 1489, 816, 1491, 1363, 1303, 1731, 2231,
	142, 142, 2199, 2045, 654, 1935, 1933, 1776, 386, 512,
	1794, 1735, 816, 1926, 1736, 654, 33, 1720, 1772, 1781,
	1754, 627, 32, 1756, 1463, 29, 1074, 627, 627, 1752,
	760, 627, 1456, 1716, 632, 703, 1763, 113, 1769, 1783,
	1768, 1206, 1806, 1203, 1766, 1195, 1706, 1791, 1146, 1145,
	400, 378, 16, 1143, 142, 389, 1557, 1043, 647, 1785,
	1140, 922, 1138, 355, 1784, 1810, 1822, 1823, 1824, 1789,
	922, 377, 14, 893, 1795, 1797, 1796, 394, 1817, 1722,
	574, 375, 12, 390, 2073, 400, 828, 513, 1481, 17,
	619, 1642, 2262, 1043, 1043, 381, 10, 374, 8, 1813,
	1115, 2075, 1043, 1043, 385, 373, 4, 1816, 1496, 1507,
	391, 603, 604, 1496, 1506, 1829, 1831, 1832, 514, 1504,
	1792, 845, 2181, 1838, 573, 13, 897, 1843, 1840, 393,
	2024, 2152, 1871, 1947, 573, 1043, 142, 1845, 1873, 142,
	937, 938, 832, 1881, 1512, 900, 1509, 1387, 2187, 1482,
	1652, 142, 2033, 1458, 572, 1911, 1455, 1254, 829, 1208,
	1874, 895, 620, 2015, 398, 142, 2008, 1092, 1904, 1896,
	898, 502, 1269, 1841, 2006, 1035, 2265, 1903, 2010, 1916,
	2278, 1269, 1846, 1922, 2068, 16, 896, 939, 1952, 1902,
	1636, 1637, 1893, 1906, 1917, 937, 938, 2016, 142, 1074,
	1074, 142, 836, 835, 768, 14, 1887, 1921, 1886, 1833,
	836, 398, 142, 142, 1877, 12, 1918, 572, 527, 2009,
	1693, 1682, 1542, 1653, 1940, 1934, 1941, 1936, 355, 10,
	1954, 8, 1415, 527, 801, 527, 1938, 804, 1073, 4,
	392, 1412, 527, 527, 355, 817, 637, 899, 1956, 1411,
	1959, 1948, 1353, 937, 938, 1970, 1953, 840, 989, 1951,
	1950, 1949, 400, 837, 1978, 2197, 2095, 142, 1719, 1825,
	1043, 1717, 1957, 999, 997, 771, 940, 528, 2110, 1965,
	387, 1169, 847, 1538, 1227, 2191, 1984, 1622, 2140, 2084,
	400, 1362, 1732, 1000, 395, 50, 1900, 2011, 680, 2012,
	939, 2005, 1737, 1894, 1964, 1445, 1444, 505, 355, 355,
	876, 355, 401, 615, 1102, 702, 1990, 1638, 1639, 1640,
	1641, 1643, 1644, 557, 1372, 1270, 762, 1761, 704, 2014,
	355, 355, 1040, 705, 139, 1041, 142, 1029, 2017, 692,
	142, 142, 355, 627, 1038, 657, 1258, 572, 2025, 355,
	355, 355, 1326, 929, 1904, 142, 142, 142, 1344, 400,
	1605, 139, 993, 1903, 142, 672, 142, 1904, 142, 142,
	142, 1904, 2038, 142, 142, 1902, 1903, 684, 1260, 627,
	1903, 2040, 683, 2018, 1341, 763, 2044, 2039, 1902, 2032,
	1543, 1562, 1902, 142, 1961, 2028, 2030, 2041, 1152, 2031,
	2034, 1472, 1149, 1932, 1042, 536, 1633, 655, 1393, 1385,
	1382, 1073, 1073, 2070, 794, 2013, 2064, 889, 981, 2071,
	1259, 792, 573, 2067, 1568, 2065, 1419, 881, 1160, 618,
	617, 2076, 399, 2083, 1440, 790, 1096, 142, 1430, 398,
	142, 974, 973, 605, 2166, 2090, 781, 780, 142, 1125,
	1743, 2266, 2074, 2180, 1929, 398, 1387, 1387, 2098, 2213,
	1043, 130, 129, 2159, 2093, 1552, 142, 139, 76, 572,
	31, 30, 527, 95, 2115, 94, 142, 2113, 1904, 399,
	1904, 923, 93, 92, 91, 573, 90, 1903, 89, 1903,
	88, 87, 2128, 142, 2126, 86, 2118, 2114, 142, 1902,
	2116, 1902, 85, 1132, 84, 2129, 142, 2108, 83, 2127,
	82, 81, 80, 79, 78, 524, 75, 1043, 74, 73,
	72, 28, 24, 98, 1387, 1387, 1387, 142, 23, 2134,
	2135, 142, 21, 553, 2143, 22, 27, 26, 2151, 19,
	2154, 2170, 527, 932, 2123, 18, 527, 2168, 139, 527,
	527, 527, 527, 527, 2175, 1043, 15, 572, 1180, 2162,
	9, 2163, 527, 527, 2176, 2172, 20, 142, 142, 505,
	55, 574, 2173, 2179, 1076, 56, 627, 1042, 1042, 615,
	54, 574, 637, 53, 52, 11, 48, 47, 46, 45,
	2190, 44, 43, 7, 97, 355, 2133, 2178, 142, 41,
	2204, 40, 142, 39, 2196, 142, 6, 1238, 2210, 2205,
	96, 5, 398, 355, 2188, 573, 1244, 142, 109, 106,
	142, 2194, 108, 2212, 105, 107, 110, 102, 355, 142,
	1262, 2215, 2221, 2219, 2229, 2218, 1904, 2240, 103, 104,
	101, 100, 2220, 37, 36, 1903, 35, 2207, 2242, 34,
	2, 1, 0, 2216, 2217, 937, 938, 1902, 2249, 0,
	0, 2206, 142, 2248, 0, 2211, 0, 0, 0, 0,
	2259, 2257, 0, 0, 0, 0, 0, 2263, 940, 0,
	1074, 0, 0, 2264, 0, 1592, 1593, 0, 2230, 0,
	0, 0, 0, 0, 937, 938, 2276, 2275, 2277, 2274,
	0, 0, 939, 1074, 0, 0, 0, 399, 954, 0,
	0, 0, 0, 0, 0, 1387, 1387, 940, 0, 0,
	0, 0, 0, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 0, 0,
	0, 939, 0, 0, 0, 0, 2054, 1076, 1076, 681,
	69, 0, 2060, 1659, 1660, 1661, 0, 0, 1636, 1637,
	0, 0, 945, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1387, 1387, 1387, 1387, 1387, 1387,
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
	1387, 1387, 1387, 0, 1387, 1075, 0, 0, 0, 0,
	1039, 945, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 955, 1441, 0, 0, 573, 2106, 0, 125, 637,
	0, 0, 0, 0, 0, 0, 0, 527, 527, 0,
	527, 0, 355, 355, 2125, 1470, 637, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 541, 355, 1642, 0, 554, 0, 574,
	1486, 0, 0, 0, 112, 0, 0, 0, 0, 400,
	399, 0, 628, 69, 355, 355, 355, 0, 0, 1074,
	1074, 1501, 1073, 0, 956, 355, 0, 0, 1074, 1074,
	0, 0, 114, 355, 0, 2161, 355, 0, 0, 57,
	0, 58, 355, 0, 0, 1073, 0, 0, 355, 355,
	0, 0, 355, 0, 1652, 0, 400, 1238, 0, 0,
	1238, 1074, 574, 956, 0, 60, 0, 1548, 0, 0,
	0, 0, 0, 0, 1801, 1802, 0, 355, 0, 937,
	938, 0, 355, 0, 1566, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 1486, 1075, 1075,
	0, 0, 940, 1039, 1039, 1073, 0, 0, 0, 0,
	0, 0, 0, 2209, 0, 950, 948, 949, 941, 942,
	943, 944, 946, 947, 0, 0, 939, 1653, 1260, 0,
	0, 0, 0, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 0, 1869, 0, 948, 949, 941, 942, 943,
	944, 946, 947, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 0, 0, 766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 1042, 128,
	0, 0, 574, 0, 0, 1073, 1074, 0, 0, 119,
	0, 0, 0, 0, 796, 797, 798, 0, 0, 112,
	0, 1042, 0, 0, 0, 0, 0, 132, 1647, 1645,
	1646, 1638, 1639, 1640, 1641, 1643, 1644, 0, 0, 0,
	0, 1073, 1073, 0, 0, 0, 0, 114, 0, 0,
	1073, 1073, 0, 0, 57, 955, 58, 0, 0, 0,
	0, 554, 0, 131, 0, 0, 1486, 1387, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 127, 0,
	60, 1042, 0, 1073, 0, 0, 0, 1132, 0, 1132,
	1711, 0, 1387, 0, 400, 0, 527, 117, 0, 355,
	0, 885, 885, 1725, 0, 0, 0, 891, 0, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 574, 0, 0, 0, 956, 0,
	0, 0, 0, 355, 1738, 1739, 0, 0, 0, 1501,
	0, 0, 0, 1745, 1746, 1748, 1750, 1751, 0, 975,
	976, 977, 978, 979, 0, 1758, 0, 1760, 355, 987,
	0, 0, 0, 0, 1387, 0, 0, 0, 1076, 994,
	0, 1042, 0, 0, 355, 0, 0, 0, 0, 0,
	1238, 0, 0, 0, 0, 0, 0, 0, 0, 637,
	1238, 1076, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 1042, 1042, 355,
	355, 0, 574, 0, 119, 0, 1042, 1042, 1073, 0,
	0, 949, 941, 942, 943, 944, 946, 947, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 0, 0, 0, 1042,
	0, 1076, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1835, 0, 0, 0, 400, 131, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 2087, 0, 0, 0,
	0, 0, 371, 0, 0, 0, 0, 0, 1150, 0,
	1155, 0, 0, 0, 0, 69, 1162, 0, 0, 0,
	909, 2105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 1501, 0, 0, 1132, 1899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1913, 0, 0, 984, 0, 986, 0, 0, 0, 0,
	0, 0, 990, 0, 1923, 0, 0, 1076, 1076, 0,
	0, 0, 0, 0, 1042, 0, 1076, 1076, 0, 1075,
	0, 0, 0, 2153, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 1073, 0,
	637, 0, 1075, 0, 0, 0, 0, 1039, 0, 1076,
	0, 1238, 637, 0, 0, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 0, 1306, 0,
	1308, 1309, 1310, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 938, 0, 1073, 0, 1334, 967, 968,
	969, 0, 1075, 0, 0, 0, 1985, 1039, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 971, 0,
	1369, 1370, 0, 0, 1383, 0, 1394, 1396, 1401, 1404,
	1405, 1406, 0, 1073, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 954, 0, 541, 0, 0,
	541, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 637, 69, 0, 1899, 637,
	1441, 0, 1899, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 1075, 0, 2042, 2043, 1501, 1039, 0, 945,
	0, 0, 0, 2052, 1042, 2053, 0, 355, 2055, 2056,
	0, 0, 2059, 355, 0, 628, 0, 0, 964, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 1075,
	2072, 0, 637, 1039, 1039, 0, 0, 1075, 1075, 0,
	0, 0, 1039, 1039, 0, 69, 0, 69, 0, 0,
	0, 962, 0, 69, 0, 0, 0, 0, 955, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 1039, 2097, 0, 0, 2099,
	1636, 1637, 0, 1654, 1655, 1656, 0, 355, 0, 1899,
	0, 1899, 1324, 0, 0, 0, 0, 0, 0, 1042,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	891, 956, 2142, 1651, 0, 0, 0, 1238, 0, 0,
	0, 0, 0, 0, 0, 2149, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 1560, 0, 0, 355, 0, 0, 0,
	1132, 0, 0, 0, 1076, 0, 0, 0, 1573, 0,
	0, 0, 0, 0, 0, 0, 0, 1642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 2182, 2183, 0, 0,
	1039, 0, 0, 0, 963, 1576, 1577, 0, 0, 0,
	966, 1582, 950, 948, 949, 941, 942, 943, 944, 946,
	947, 1076, 0, 0, 0, 0, 0, 2203, 0, 0,
	0, 637, 0, 0, 355, 0, 1652, 1899, 0, 0,
	0, 0, 0, 1601, 0, 0, 2142, 0, 0, 355,
	1608, 0, 0, 1612, 0, 0, 0, 0, 637, 1076,
	0, 0, 0, 0, 0, 0, 0, 937, 938, 1626,
	957, 958, 959, 967, 968, 969, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 69,
	940, 2256, 0, 971, 0, 987, 0, 0, 0, 0,
	0, 1401, 1401, 1401, 0, 0, 0, 69, 0, 1653,
	69, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	954, 0, 628, 0, 0, 0, 0, 0, 628, 628,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 1636,
	1637, 0, 1654, 1655, 1656, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1968, 0, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 0, 1730, 0,
	0, 0, 0, 1162, 0, 1075, 0, 0, 0, 0,
	1039, 0, 1651, 964, 972, 1648, 1649, 1650, 0, 0,
	1647, 1645, 1646, 1638, 1639, 1640, 1641, 1643, 1644, 0,
	0, 970, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 955, 0, 986, 0, 1771, 0, 0,
	0, 0, 1075, 0, 0, 0, 1642, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 1799,
	1075, 0, 1800, 1657, 0, 1039, 0, 0, 0, 0,
	0, 0, 0, 0, 1805, 0, 0, 0, 0, 0,
	0, 986, 0, 1814, 0, 1652, 956, 0, 0, 0,
	0, 1818, 0, 0, 1573, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1842, 0, 0, 0, 1844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 69, 0,
	0, 1875, 1876, 0, 0, 0, 0, 0, 1653, 0,
	1882, 1883, 1884, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 951, 952, 953, 966, 0, 950, 948, 949,
	941, 942, 943, 944, 946, 947, 0, 1636, 1637, 0,
	1654, 1655, 1656, 1678, 0, 0, 1907, 0, 0, 69,
	0, 0, 69, 1967, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 937, 938, 0, 957, 958,
	959, 967, 968, 969, 628, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 940, 0,
	1651, 971, 0, 0, 1648, 1649, 1650, 0, 0, 1647,
	1645, 1646, 1638, 1639, 1640, 1641, 1643, 1644, 0, 0,
	628, 0, 939, 0, 0, 0, 0, 0, 954, 0,
	0, 0, 937, 938, 0, 957, 958, 959, 967, 968,
	969, 0, 0, 0, 0, 0, 0, 1969, 960, 0,
	0, 1972, 1973, 0, 1642, 940, 1975, 0, 971, 0,
	0, 0, 0, 1977, 0, 1979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 1986, 945, 0, 0, 954, 0, 0, 0, 0,
	0, 1657, 0, 1636, 1637, 0, 1654, 1655, 1656, 0,
	0, 964, 972, 0, 0, 0, 0, 0, 0, 1808,
	0, 0, 0, 1652, 1995, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 945,
	0, 955, 0, 0, 0, 2026, 1651, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 972,
	1636, 1637, 0, 1654, 1655, 1656, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1653, 0, 0, 0,
	2063, 962, 0, 0, 0, 0, 0, 0, 955, 0,
	1642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2079, 2080, 1651, 956, 0, 0, 628, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 1657, 0, 0,
	0, 0, 2092, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1652,
	0, 0, 0, 0, 0, 0, 0, 1642, 0, 0,
	0, 956, 1648, 1649, 1650, 0, 0, 1647, 1645, 1646,
	1638, 1639, 1640, 1641, 1643, 1644, 0, 965, 0, 0,
	0, 0, 0, 2132, 0, 0, 0, 963, 0, 0,
	951, 952, 953, 966, 1657, 950, 948, 949, 941, 942,
	943, 944, 946, 947, 0, 0, 0, 0, 0, 0,
	0, 1677, 891, 0, 0, 0, 1652, 0, 0, 0,
	0, 0, 1653, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2165, 0,
	0, 0, 0, 0, 963, 0, 0, 951, 952, 953,
	966, 0, 950, 948, 949, 941, 942, 943, 944, 946,
	947, 0, 0, 0, 0, 0, 0, 0, 1676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2077, 0, 1648, 1649,
	1650, 0, 0, 1647, 1645, 1646, 1638, 1639, 1640, 1641,
	1643, 1644, 0, 0, 0, 0, 2228, 2228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 1648, 1649, 1650, 0, 0,
	1647, 1645, 1646, 1638, 1639, 1640, 1641, 1643, 1644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2228,
	0, 0, 0, 397, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 144,
	145, 416, 146, 417, 418, 419, 420, 298, 421, 422,
	423, 424, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 425, 151, 305, 306, 152, 153, 426, 427,
	307, 308, 309, 428, 154, 310, 429, 402, 430, 155,
	156, 157, 0, 158, 431, 159, 160, 161, 432, 403,
	162, 163, 433, 434, 436, 435, 437, 438, 439, 164,
	165, 356, 166, 311, 167, 312, 313, 440, 168, 441,
	169, 442, 170, 443, 444, 171, 172, 445, 173, 446,
	0, 447, 314, 174, 175, 176, 315, 316, 448, 449,
	450, 177, 178, 317, 318, 319, 0, 179, 451, 180,
	452, 453, 404, 454, 181, 320, 455, 321, 456, 182,
	183, 184, 185, 322, 323, 406, 457, 189, 458, 186,
	459, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	460, 330, 461, 407, 190, 191, 192, 408, 193, 194,
	195, 462, 197, 196, 463, 331, 409, 198, 410, 464,
	199, 200, 465, 466, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 467, 468, 469,
	333, 211, 334, 212, 213, 470, 214, 471, 472, 215,
	473, 474, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 475, 223, 337, 224, 338, 225, 476,
	226, 227, 228, 229, 230, 339, 231, 232, 477, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 478, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 479, 257, 341, 256, 258, 259, 480,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 481,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 482,
	270, 483, 271, 272, 273, 274, 275, 276, 277, 484,
	346, 347, 348, 485, 486, 278, 279, 349, 350, 487,
	280, 281, 282, 283, 488, 489, 284, 285, 286, 287,
	490, 288, 491, 351, 289, 290, 291, 352, 353, 492,
	493, 292, 494, 495, 496, 497, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 1232,
	0, 0, 0, 0, 0, 0, 0, 1233, 144, 145,
	416, 146, 417, 418, 419, 420, 298, 421, 422, 423,
	424, 147, 148, 149, 299, 300, 301, 302, 150, 303,
	304, 425, 151, 305, 306, 152, 153, 426, 427, 307,
	308, 309, 428, 154, 310, 429, 402, 430, 155, 156,
	157, 0, 158, 431, 159, 160, 161, 432, 403, 162,
	163, 433, 434, 436, 435, 437, 438, 439, 164, 165,
	356, 166, 311, 167, 312, 313, 440, 168, 441, 169,
	442, 170, 443, 444, 171, 172, 445, 173, 446, 0,
	447, 314, 174, 175, 176, 315, 316, 448, 449, 450,
	177, 178, 317, 318, 319, 0, 179, 451, 180, 452,
	453, 404, 454, 181, 320, 455, 321, 456, 182, 183,
	184, 185, 322, 323, 406, 457, 189, 458, 186, 459,
	405, 187, 324, 188, 325, 326, 327, 328, 329, 460,
	330, 461, 407, 190, 191, 192, 408, 193, 194, 195,
	462, 197, 196, 463, 331, 409, 198, 410, 464, 199,
	200, 465, 466, 201, 0, 202, 203, 204, 206, 332,
	205, 411, 207, 208, 210, 209, 467, 468, 469, 333,
	211, 334, 212, 213, 470, 214, 471, 472, 215, 473,
	474, 216, 335, 412, 217, 413, 336, 218, 219, 220,
	221, 222, 475, 223, 337, 224, 338, 225, 476, 226,
	227, 228, 229, 230, 339, 231, 232, 477, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	478, 245, 414, 246, 247, 340, 248, 0, 252, 253,
	254, 255, 479, 257, 341, 256, 258, 259, 480, 260,
	249, 250, 261, 415, 262, 342, 343, 263, 481, 269,
	264, 265, 251, 266, 268, 344, 267, 345, 482, 270,
	483, 271, 272, 273, 274, 275, 276, 277, 484, 346,
	347, 348, 485, 486, 278, 279, 349, 350, 487, 280,
	281, 282, 283, 488, 489, 284, 285, 286, 287, 490,
	288, 491, 351, 289, 290, 291, 352, 353, 492, 493,
	292, 494, 495, 496, 497, 293, 294, 295, 296, 297,
	0, 0, 0, 397, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1955, 144,
	145, 416, 146, 417, 418, 419, 420, 298, 421, 422,
	423, 424, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 425, 151, 305, 306, 152, 153, 426, 427,
	307, 308, 309, 428, 154, 310, 429, 402, 430, 155,
	156, 157, 0, 158, 431, 159, 160, 161, 432, 403,
	162, 163, 433, 434, 436, 435, 437, 438, 439, 164,
	165, 356, 166, 311, 167, 312, 313, 440, 168, 441,
	169, 442, 170, 443, 444, 171, 172, 445, 173, 446,
	0, 447, 314, 174, 175, 176, 315, 316, 448, 449,
	450, 177, 178, 317, 318, 319, 0, 179, 451, 180,
	452, 453, 404, 454, 181, 320, 455, 321, 456, 182,
	183, 184, 185, 322, 323, 406, 457, 189, 458, 186,
	459, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	460, 330, 461, 407, 190, 191, 192, 408, 193, 194,
	195, 462, 197, 196, 463, 331, 409, 198, 410, 464,
	199, 200, 465, 466, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 467, 468, 469,
	333, 211, 334, 212, 213, 470, 214, 471, 472, 215,
	473, 474, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 475, 223, 337, 224, 338, 225, 476,
	226, 227, 228, 229, 230, 339, 231, 232, 477, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 478, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 479, 257, 341, 256, 258, 259, 480,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 481,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 482,
	270, 483, 271, 272, 273, 274, 275, 276, 277, 484,
	346, 347, 348, 485, 486, 278, 279, 349, 350, 487,
	280, 281, 282, 283, 488, 489, 284, 285, 286, 287,
	490, 288, 491, 351, 289, 290, 291, 352, 353, 492,
	493, 292, 494, 495, 496, 497, 293, 294, 295, 296,
	297, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 144, 145, 416,
	146, 417, 418, 419, 420, 298, 421, 422, 423, 424,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	425, 151, 305, 306, 152, 153, 426, 427, 307, 308,
	309, 428, 154, 310, 429, 402, 430, 155, 156, 157,
	0, 158, 431, 159, 160, 161, 432, 403, 162, 163,
	433, 434, 436, 435, 437, 438, 439, 164, 165, 356,
	166, 311, 167, 312, 313, 440, 168, 441, 169, 442,
	170, 443, 444, 171, 172, 445, 173, 446, 0, 447,
	314, 174, 175, 176, 315, 316, 448, 449, 450, 177,
	178, 317, 318, 319, 0, 179, 451, 180, 452, 453,
	404, 454, 181, 320, 455, 321, 456, 182, 183, 184,
	185, 322, 323, 406, 457, 189, 458, 186, 459, 405,
	187, 324, 188, 325, 326, 327, 328, 329, 460, 330,
	461, 407, 190, 191, 192, 408, 193, 194, 195, 462,
	197, 196, 463, 331, 409, 198, 410, 464, 199, 200,
	465, 466, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 467, 468, 469, 333, 211,
	334, 212, 213, 470, 214, 471, 472, 215, 473, 474,
	216, 335, 412, 217, 413, 336, 218, 219, 220, 221,
	222, 475, 223, 337, 224, 338, 225, 476, 226, 227,
	228, 229, 230, 339, 231, 232, 477, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 478,
	245, 414, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 479, 257, 341, 256, 258, 259, 480, 260, 249,
	250, 261, 415, 262, 342, 343, 263, 481, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 482, 270, 483,
	271, 272, 273, 274, 275, 276, 277, 484, 346, 347,
	348, 485, 486, 278, 279, 349, 350, 487, 280, 281,
	282, 283, 488, 489, 284, 285, 286, 287, 490, 288,
	491, 351, 289, 290, 291, 352, 353, 492, 493, 292,
	494, 495, 496, 497, 293, 294, 295, 296, 297, 700,
	689, 690, 687, 688, 679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 717, 682, 0, 0, 0, 147, 148,
	149, 299, 732, 301, 733, 150, 734, 735, 0, 151,
	305, 306, 152, 153, 685, 716, 736, 737, 309, 0,
	154, 728, 0, 708, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 403, 162, 163, 0, 709,
	710, 712, 0, 711, 713, 164, 165, 356, 166, 738,
	167, 739, 740, 892, 168, 0, 169, 0, 170, 0,
	0, 731, 172, 0, 173, 0, 0, 0, 673, 174,
	175, 176, 718, 719, 696, 0, 0, 177, 178, 741,
	742, 743, 0, 179, 0, 180, 0, 0, 404, 0,
	181, 729, 0, 321, 0, 182, 183, 184, 185, 725,
	727, 406, 0, 189, 0, 186, 0, 405, 187, 744,
	188, 745, 746, 747, 748, 749, 0, 707, 0, 407,
	190, 191, 192, 408, 193, 194, 195, 0, 197, 196,
	0, 730, 409, 198, 410, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 411, 207,
	208, 210, 209, 668, 0, 697, 726, 211, 750, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	412, 217, 413, 720, 218, 219, 220, 221, 222, 0,
	223, 721, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 751, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 414,
	246, 247, 674, 248, 0, 252, 253, 254, 255, 128,
	257, 341, 256, 258, 259, 714, 260, 249, 250, 261,
	415, 262, 752, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 753, 267, 722, 0, 270, 132, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 754, 755, 0,
	0, 278, 279, 723, 724, 695, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 715, 288, 0, 351,
	289, 290, 291, 660, 756, 0, 0, 292, 0, 0,
	0, 126, 293, 294, 295, 296, 297, 669, 127, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 665, 666,
	700, 689, 690, 687, 688, 679, 0, 675, 0, 0,
	0, 0, 678, 0, 0, 0, 144, 145, 1350, 146,
	0, 0, 0, 0, 717, 682, 0, 0, 0, 147,
	148, 149, 299, 732, 301, 733, 150, 734, 735, 0,
	151, 305, 306, 152, 153, 685, 716, 736, 737, 309,
	0, 154, 728, 0, 708, 0, 155, 156, 157, 0,
	158, 0, 159, 160, 161, 0, 403, 162, 163, 0,
	709, 710, 712, 0, 711, 713, 164, 165, 356, 166,
	738, 167, 739, 740, 0, 168, 0, 169, 0, 170,
	1351, 0, 731, 172, 0, 173, 0, 0, 0, 673,
	174, 175, 176, 718, 719, 696, 0, 0, 177, 178,
	741, 742, 743, 0, 179, 0, 180, 0, 0, 404,
	0, 181, 729, 0, 321, 0, 182, 183, 184, 185,
	725, 727, 406, 0, 189, 0, 186, 0, 405, 187,
	744, 188, 745, 746, 747, 748, 749, 0, 707, 0,
	407, 190, 191, 192, 408, 193, 194, 195, 0, 197,
	196, 0, 730, 409, 198, 410, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 411,
	207, 208, 210, 209, 668, 0, 697, 726, 211, 750,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 412, 217, 413, 720, 218, 219, 220, 221, 222,
	0, 223, 721, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 751, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	414, 246, 247, 674, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 714, 260, 249, 250,
	261, 415, 262, 752, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 753, 267, 722, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 754, 755,
	0, 0, 278, 279, 723, 724, 695, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 715, 288, 0,
	351, 289, 290, 291, 352, 756, 1349, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 1352, 700, 689, 690, 687, 688, 679, 675, 1347,
	0, 0, 0, 678, 0, 0, 0, 0, 144, 145,
	0, 146, 0, 0, 0, 0, 717, 682, 0, 0,
	0, 147, 148, 149, 299, 732, 301, 733, 150, 734,
	735, 0, 151, 305, 306, 152, 153, 685, 716, 736,
	737, 309, 0, 154, 728, 0, 708, 0, 155, 156,
	157, 0, 158, 0, 159, 160, 161, 0, 403, 162,
	163, 0, 709, 710, 712, 0, 711, 713, 164, 165,
	356, 166, 738, 167, 739, 740, 0, 168, 0, 169,
	0, 170, 0, 0, 731, 172, 0, 173, 0, 0,
	0, 673, 174, 175, 176, 718, 719, 696, 0, 0,
	177, 178, 741, 742, 743, 0, 179, 0, 180, 0,
	0, 404, 0, 181, 729, 0, 321, 0, 182, 183,
	184, 185, 725, 727, 406, 0, 189, 0, 186, 0,
	405, 187, 744, 188, 745, 746, 747, 748, 749, 0,
	707, 0, 407, 190, 191, 192, 408, 193, 194, 195,
	0, 197, 196, 0, 730, 409, 198, 410, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 411, 207, 208, 210, 209, 668, 0, 697, 726,
	211, 750, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 412, 217, 413, 720, 218, 219, 220,
	221, 222, 0, 223, 721, 224, 338, 225, 0, 226,
	227, 228, 229, 230, 751, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 414, 246, 247, 674, 248, 0, 252, 253,
	254, 255, 128, 257, 341, 256, 258, 259, 714, 260,
	249, 250, 261, 415, 262, 752, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 753, 267, 722, 0, 270,
	132, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	754, 755, 0, 0, 278, 279, 723, 724, 695, 280,
	281, 282, 283, 0, 0, 284, 285, 286, 287, 715,
	288, 0, 351, 289, 290, 291, 660, 756, 0, 0,
	292, 0, 0, 0, 126, 293, 294, 295, 296, 297,
	669, 127, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 665, 666, 700, 689, 690, 687, 688, 679, 0,
	675, 0, 0, 0, 0, 678, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 717, 682, 0,
	0, 0, 147, 148, 149, 299, 732, 301, 733, 150,
	734, 735, 1397, 151, 305, 306, 152, 153, 685, 716,
	736, 737, 309, 0, 154, 728, 0, 708, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 709, 710, 712, 0, 711, 713, 164,
	165, 356, 166, 738, 167, 739, 740, 0, 168, 0,
	169, 0, 170, 0, 0, 731, 172, 0, 173, 0,
	0, 0, 673, 174, 175, 176, 718, 719, 696, 0,
	0, 177, 178, 741, 742, 743, 0, 179, 0, 180,
	0, 1402, 404, 0, 181, 729, 0, 321, 0, 182,
	183, 184, 185, 725, 727, 406, 0, 189, 0, 186,
	0, 405, 187, 744, 188, 745, 746, 747, 748, 749,
	0, 707, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 1398, 730, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 668, 0, 697,
	726, 211, 750, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 720, 218, 219,
	220, 221, 222, 0, 223, 721, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 751, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 674, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 714,
	260, 249, 250, 261, 415, 262, 752, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 753, 267, 722, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 754, 755, 0, 1399, 278, 279, 723, 724, 695,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	715, 288, 0, 351, 289, 290, 291, 352, 756, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 700, 689, 690, 687, 688, 679,
	0, 675, 0, 0, 0, 0, 678, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 147, 148, 149, 299, 732, 301, 733,
	150, 734, 735, 0, 151, 305, 306, 152, 153, 685,
	716, 736, 737, 309, 0, 154, 728, 0, 708, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	403, 162, 163, 0, 709, 710, 712, 0, 711, 713,
	164, 165, 356, 166, 738, 167, 739, 740, 0, 168,
	0, 169, 0, 170, 0, 0, 731, 172, 0, 173,
	0, 0, 0, 673, 174, 175, 176, 718, 719, 696,
	0, 0, 177, 178, 741, 742, 743, 0, 179, 0,
	180, 0, 0, 404, 0, 181, 729, 0, 321, 0,
	182, 183, 184, 185, 725, 727, 406, 0, 189, 0,
	186, 0, 405, 187, 744, 188, 745, 746, 747, 748,
	749, 0, 707, 0, 407, 190, 191, 192, 408, 193,
	194, 195, 0, 197, 196, 0, 730, 409, 198, 410,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 411, 207, 208, 210, 209, 668, 1790,
	697, 726, 211, 750, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 412, 217, 413, 720, 218,
	219, 220, 221, 222, 0, 223, 721, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 751, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 414, 246, 247, 674, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	714, 260, 249, 250, 261, 415, 262, 752, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 753, 267, 722,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 754, 755, 0, 0, 278, 279, 723, 724,
	695, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 715, 288, 0, 351, 289, 290, 291, 352, 756,
	0, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 669, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 665, 666, 886, 700, 689, 690, 687,
	688, 679, 675, 0, 0, 0, 0, 678, 0, 0,
	0, 0, 144, 145, 0, 146, 0, 0, 0, 0,
	717, 682, 0, 0, 0, 147, 148, 149, 299, 732,
	301, 733, 150, 734, 735, 0, 151, 305, 306, 152,
	153, 685, 716, 736, 737, 309, 0, 154, 728, 0,
	708, 0, 155, 156, 157, 0, 158, 0, 159, 160,
	161, 0, 403, 162, 163, 0, 709, 710, 712, 0,
	711, 713, 164, 165, 356, 166, 738, 167, 739, 740,
	0, 168, 0, 169, 0, 170, 0, 0, 731, 172,
	0, 173, 0, 0, 0, 673, 174, 175, 176, 718,
	719, 696, 0, 0, 177, 178, 741, 742, 743, 0,
	179, 0, 180, 0, 0, 404, 0, 181, 729, 0,
	321, 0, 182, 183, 184, 185, 725, 727, 406, 0,
	189, 1164, 186, 0, 405, 187, 744, 188, 745, 746,
	747, 748, 749, 0, 707, 0, 407, 190, 191, 192,
	408, 193, 194, 195, 0, 197, 196, 0, 730, 409,
	198, 410, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 411, 207, 208, 210, 209,
	668, 0, 697, 726, 211, 750, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 412, 217, 413,
	720, 218, 219, 220, 221, 222, 0, 223, 721, 224,
	338, 225, 1163, 226, 227, 228, 229, 230, 751, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 414, 246, 247, 674,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 714, 260, 249, 250, 261, 415, 262, 752,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 753,
	267, 722, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 754, 755, 0, 0, 278, 279,
	723, 724, 695, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 715, 288, 0, 351, 289, 290, 291,
	352, 756, 0, 0, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 669, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 665, 666, 700, 689, 690,
	687, 688, 679, 0, 675, 0, 0, 0, 0, 678,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 717, 682, 0, 0, 0, 147, 148, 149, 299,
	732, 301, 733, 150, 734, 735, 0, 151, 305, 306,
	152, 153, 685, 716, 736, 737, 309, 0, 154, 728,
	0, 708, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 403, 162, 163, 0, 709, 710, 712,
	0, 711, 713, 164, 165, 356, 166, 738, 167, 739,
	740, 0, 168, 0, 169, 0, 170, 0, 0, 731,
	172, 0, 173, 0, 0, 0, 673, 174, 175, 176,
	718, 719, 696, 0, 0, 177, 178, 741, 742, 743,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 729,
	0, 321, 0, 182, 183, 184, 185, 725, 727, 406,
	0, 189, 0, 186, 0, 405, 187, 744, 188, 745,
	746, 747, 748, 749, 0, 707, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 730,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 668, 0, 697, 726, 211, 750, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 720, 218, 219, 220, 221, 222, 0, 223, 721,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 751,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	674, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 714, 260, 249, 250, 261, 415, 262,
	752, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	753, 267, 722, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 754, 755, 0, 0, 278,
	279, 723, 724, 695, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 715, 288, 0, 351, 289, 290,
	291, 352, 756, 0, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 669, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 665, 666, 0, 0,
	0, 0, 0, 992, 1342, 675, 0, 0, 0, 0,
	678, 700, 689, 690, 687, 688, 679, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	147, 148, 149, 299, 732, 301, 733, 150, 734, 735,
	0, 151, 305, 306, 152, 153, 685, 716, 736, 737,
	309, 0, 154, 728, 0, 708, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 403, 162, 163,
	0, 709, 710, 712, 0, 711, 713, 164, 165, 356,
	166, 738, 167, 739, 740, 0, 168, 0, 169, 0,
	170, 0, 0, 731, 172, 0, 173, 0, 0, 0,
	673, 174, 175, 176, 718, 719, 696, 0, 0, 177,
	178, 741, 742, 743, 0, 179, 0, 180, 0, 0,
	404, 0, 181, 729, 0, 321, 0, 182, 183, 184,
	185, 725, 727, 406, 0, 189, 0, 186, 0, 405,
	187, 744, 188, 745, 746, 747, 748, 749, 0, 707,
	0, 407, 190, 191, 192, 408, 193, 194, 195, 0,
	197, 196, 0, 730, 409, 198, 410, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 668, 0, 697, 726, 211,
	750, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 412, 217, 413, 720, 218, 219, 220, 221,
	222, 0, 223, 721, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 751, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 414, 246, 247, 674, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 714, 260, 249,
	250, 261, 415, 262, 752, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 753, 267, 722, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 754,
	755, 0, 0, 278, 279, 723, 724, 695, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 715, 288,
	0, 351, 289, 290, 291, 352, 756, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 669,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	665, 666, 700, 689, 690, 687, 688, 679, 0, 675,
	1872, 0, 0, 0, 678, 0, 0, 0, 144, 145,
	0, 146, 0, 0, 0, 0, 717, 682, 0, 0,
	0, 147, 148, 149, 299, 732, 301, 733, 150, 734,
	735, 0, 151, 305, 306, 152, 153, 685, 716, 736,
	737, 309, 0, 154, 728, 0, 708, 0, 155, 156,
	157, 0, 158, 0, 159, 160, 161, 0, 403, 162,
	163, 0, 709, 710, 712, 0, 711, 713, 164, 165,
	356, 166, 738, 167, 739, 740, 0, 168, 0, 169,
	0, 170, 0, 0, 731, 172, 0, 173, 0, 0,
	0, 673, 174, 175, 176, 718, 719, 696, 0, 0,
	177, 178, 741, 742, 743, 0, 179, 0, 180, 0,
	0, 404, 0, 181, 729, 0, 321, 0, 182, 183,
	184, 185, 725, 727, 406, 0, 189, 0, 186, 0,
	405, 187, 744, 188, 745, 746, 747, 748, 749, 0,
	707, 0, 407, 190, 191, 192, 408, 193, 194, 195,
	0, 197, 196, 0, 730, 409, 198, 410, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 411, 207, 208, 210, 209, 668, 0, 697, 726,
	211, 750, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 412, 217, 413, 720, 218, 219, 220,
	221, 222, 0, 223, 721, 224, 338, 225, 0, 226,
	227, 228, 229, 230, 751, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 414, 246, 247, 674, 248, 0, 252, 253,
	254, 255, 0, 257, 341, 256, 258, 259, 714, 260,
	249, 250, 261, 415, 262, 752, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 753, 267, 722, 0, 270,
	0, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	754, 755, 0, 0, 278, 279, 723, 724, 695, 280,
	281, 282, 283, 0, 0, 284, 285, 286, 287, 715,
	288, 0, 351, 289, 290, 291, 352, 756, 1821, 0,
	292, 0, 0, 0, 0, 293, 294, 295, 296, 297,
	669, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 665, 666, 700, 689, 690, 687, 688, 679, 0,
	675, 0, 0, 0, 0, 678, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 717, 682, 0,
	0, 0, 147, 148, 149, 299, 732, 301, 733, 150,
	734, 735, 0, 151, 305, 306, 152, 153, 685, 716,
	736, 737, 309, 0, 154, 728, 0, 708, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 709, 710, 712, 0, 711, 713, 164,
	165, 356, 166, 738, 167, 739, 740, 0, 168, 0,
	169, 0, 170, 0, 0, 731, 172, 0, 173, 0,
	0, 0, 673, 174, 175, 176, 718, 719, 696, 0,
	0, 177, 178, 741, 742, 743, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 729, 0, 321, 0, 182,
	183, 184, 185, 725, 727, 406, 0, 189, 0, 186,
	0, 405, 187, 744, 188, 745, 746, 747, 748, 749,
	0, 707, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 730, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 668, 0, 697,
	726, 211, 750, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 720, 218, 219,
	220, 221, 222, 0, 223, 721, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 751, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 674, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 714,
	260, 249, 250, 261, 415, 262, 752, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 753, 267, 722, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 754, 755, 0, 0, 278, 279, 723, 724, 695,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	715, 288, 0, 351, 289, 290, 291, 352, 756, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 700, 689, 690, 687, 688, 679,
	0, 675, 1811, 0, 0, 0, 678, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 147, 148, 149, 299, 732, 301, 733,
	150, 734, 735, 0, 151, 305, 306, 152, 153, 685,
	716, 736, 737, 309, 0, 154, 728, 0, 708, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	403, 162, 163, 0, 709, 710, 712, 0, 711, 713,
	164, 165, 356, 166, 738, 167, 739, 740, 892, 168,
	0, 169, 0, 170, 0, 0, 731, 172, 0, 173,
	0, 0, 0, 673, 174, 175, 176, 718, 719, 696,
	0, 0, 177, 178, 741, 742, 743, 0, 179, 0,
	180, 0, 0, 404, 0, 181, 729, 0, 321, 0,
	182, 183, 184, 185, 725, 727, 406, 0, 189, 0,
	186, 0, 405, 187, 744, 188, 745, 746, 747, 748,
	749, 0, 707, 0, 407, 190, 191, 192, 408, 193,
	194, 195, 0, 197, 196, 0, 730, 409, 198, 410,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 411, 207, 208, 210, 209, 668, 0,
	697, 726, 211, 750, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 412, 217, 413, 720, 218,
	219, 220, 221, 222, 0, 223, 721, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 751, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 414, 246, 247, 674, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	714, 260, 249, 250, 261, 415, 262, 752, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 753, 267, 722,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 754, 755, 0, 0, 278, 279, 723, 724,
	695, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 715, 288, 0, 351, 289, 290, 291, 352, 756,
	0, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 669, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 665, 666, 700, 689, 690, 687, 688,
	679, 0, 675, 0, 0, 0, 0, 678, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 147, 148, 149, 299, 732, 301,
	733, 150, 734, 735, 0, 151, 305, 306, 152, 153,
	685, 716, 736, 737, 309, 0, 154, 728, 0, 708,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 403, 162, 163, 0, 709, 710, 712, 0, 711,
	713, 164, 165, 356, 166, 738, 167, 739, 740, 0,
	168, 0, 169, 0, 170, 0, 0, 731, 172, 0,
	173, 0, 0, 0, 673, 174, 175, 176, 718, 719,
	696, 0, 0, 177, 178, 741, 742, 743, 0, 179,
	0, 180, 0, 1402, 404, 0, 181, 729, 0, 321,
	0, 182, 183, 184, 185, 725, 727, 406, 0, 189,
	0, 186, 0, 405, 187, 744, 188, 745, 746, 747,
	748, 749, 0, 707, 0, 407, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 730, 409, 198,
	410, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 668,
	0, 697, 726, 211, 750, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 720,
	218, 219, 220, 221, 222, 0, 223, 721, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 751, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 674, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 714, 260, 249, 250, 261, 415, 262, 752, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 753, 267,
	722, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 754, 755, 0, 0, 278, 279, 723,
	724, 695, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 715, 288, 0, 351, 289, 290, 291, 352,
	756, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 669, 0, 0, 0, 0, 0, 667,
	0, 0, 0, 0, 665, 666, 700, 689, 690, 687,
	688, 679, 0, 675, 0, 0, 0, 0, 678, 0,
	0, 0, 144, 145, 0, 146, 0, 0, 0, 0,
	717, 682, 0, 0, 0, 147, 148, 149, 299, 732,
	301, 733, 150, 734, 735, 0, 151, 305, 306, 152,
	153, 685, 716, 736, 737, 309, 0, 154, 728, 0,
	708, 0, 155, 156, 157, 0, 158, 0, 159, 160,
	161, 0, 403, 162, 163, 0, 709, 710, 712, 0,
	711, 713, 164, 165, 356, 166, 738, 167, 739, 740,
	0, 168, 0, 169, 0, 170, 0, 0, 731, 172,
	0, 173, 0, 0, 0, 673, 174, 175, 176, 718,
	719, 696, 0, 0, 177, 178, 741, 742, 743, 0,
	179, 0, 180, 0, 0, 404, 0, 181, 729, 0,
	321, 0, 182, 183, 184, 185, 725, 727, 406, 0,
	189, 0, 186, 0, 405, 187, 744, 188, 745, 746,
	747, 748, 749, 0, 707, 0, 407, 190, 191, 192,
	408, 193, 194, 195, 0, 197, 196, 0, 730, 409,
	198, 410, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 411, 207, 208, 210, 209,
	668, 0, 697, 726, 211, 750, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 412, 217, 413,
	720, 218, 219, 220, 221, 222, 0, 223, 721, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 751, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 414, 246, 247, 674,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 714, 260, 249, 250, 261, 415, 262, 752,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 753,
	267, 722, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 754, 755, 0, 0, 278, 279,
	723, 724, 695, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 715, 288, 0, 351, 289, 290, 291,
	352, 756, 0, 0, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 669, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 665, 666, 886, 700, 689,
	690, 687, 688, 679, 675, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 144, 145, 0, 146, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 147, 148, 149,
	299, 732, 301, 733, 150, 734, 735, 0, 151, 305,
	306, 152, 153, 685, 716, 736, 737, 309, 0, 154,
	728, 0, 708, 0, 155, 156, 157, 0, 158, 0,
	159, 160, 161, 0, 403, 162, 163, 0, 709, 710,
	712, 0, 711, 713, 164, 165, 356, 166, 738, 167,
	739, 740, 0, 168, 0, 169, 0, 170, 0, 0,
	731, 172, 0, 173, 0, 0, 0, 673, 174, 175,
	176, 718, 719, 696, 0, 0, 177, 178, 741, 742,
	743, 0, 179, 0, 180, 0, 0, 404, 0, 181,
	729, 0, 321, 0, 182, 183, 184, 185, 725, 727,
	406, 0, 189, 0, 186, 0, 405, 187, 744, 188,
	745, 746, 747, 748, 749, 0, 707, 0, 407, 190,
	191, 192, 408, 193, 194, 195, 0, 197, 196, 0,
	730, 409, 198, 410, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 411, 207, 208,
	210, 209, 668, 0, 697, 726, 211, 750, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 412,
	217, 413, 720, 218, 219, 220, 221, 222, 0, 223,
	721, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	751, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 414, 246,
	247, 674, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 714, 260, 249, 250, 261, 415,
	262, 752, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 753, 267, 722, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 754, 755, 0, 0,
	278, 279, 723, 724, 695, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 715, 288, 0, 351, 289,
	290, 291, 352, 756, 0, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 669, 0, 0, 0,
	0, 0, 667, 0, 0, 0, 0, 665, 666, 700,
	689, 690, 687, 688, 679, 0, 675, 1337, 0, 0,
	0, 678, 0, 0, 0, 144, 145, 1151, 146, 0,
	0, 0, 0, 717, 682, 0, 0, 0, 147, 148,
	149, 299, 732, 301, 733, 150, 734, 735, 0, 151,
	305, 306, 152, 153, 685, 716, 736, 737, 309, 0,
	154, 728, 0, 708, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 403, 162, 163, 0, 709,
	710, 712, 0, 711, 713, 164, 165, 356, 166, 738,
	167, 739, 740, 0, 168, 0, 169, 0, 170, 0,
	0, 731, 172, 0, 173, 0, 0, 0, 673, 174,
	175, 176, 718, 719, 696, 0, 0, 177, 178, 741,
	742, 743, 0, 179, 0, 180, 0, 0, 404, 0,
	181, 729, 0, 321, 0, 182, 183, 184, 185, 725,
	727, 406, 0, 189, 0, 186, 0, 405, 187, 744,
	188, 745, 746, 747, 748, 749, 0, 707, 0, 407,
	190, 191, 192, 408, 193, 194, 195, 0, 197, 196,
	0, 730, 409, 198, 410, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 411, 207,
	208, 210, 209, 668, 0, 697, 726, 211, 750, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	412, 217, 413, 720, 218, 219, 220, 221, 222, 0,
	223, 721, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 751, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 414,
	246, 247, 674, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 714, 260, 249, 250, 261,
	415, 262, 752, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 753, 267, 722, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 754, 755, 0,
	0, 278, 279, 723, 724, 695, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 715, 288, 0, 351,
	289, 290, 291, 352, 756, 0, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 669, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 665, 666,
	700, 689, 690, 687, 688, 679, 0, 675, 0, 0,
	0, 0, 678, 0, 0, 0, 144, 145, 0, 146,
	0, 0, 0, 0, 717, 682, 0, 0, 0, 147,
	148, 149, 299, 732, 301, 733, 150, 734, 735, 0,
	151, 305, 306, 152, 153, 685, 716, 736, 737, 309,
	0, 154, 728, 0, 708, 0, 155, 156, 157, 0,
	158, 0, 159, 160, 161, 0, 403, 162, 2227, 0,
	709, 710, 712, 0, 711, 713, 164, 165, 356, 166,
	738, 167, 739, 740, 0, 168, 0, 169, 0, 170,
	0, 0, 731, 172, 0, 173, 0, 0, 0, 673,
	174, 175, 176, 718, 719, 696, 0, 0, 177, 178,
	741, 742, 743, 0, 179, 0, 180, 0, 0, 404,
	0, 181, 729, 0, 321, 0, 182, 183, 184, 185,
	725, 727, 406, 0, 189, 0, 186, 0, 405, 187,
	744, 188, 745, 746, 747, 748, 749, 0, 707, 0,
	407, 190, 191, 192, 408, 193, 194, 195, 0, 197,
	196, 0, 730, 409, 198, 410, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 411,
	207, 208, 210, 209, 668, 0, 697, 726, 211, 750,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 412, 217, 413, 720, 218, 219, 220, 221, 222,
	0, 223, 721, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 751, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	414, 246, 247, 674, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 714, 260, 249, 250,
	261, 415, 262, 752, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 753, 267, 722, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 754, 755,
	0, 0, 278, 279, 723, 724, 695, 280, 281, 2226,
	283, 0, 0, 284, 285, 286, 287, 715, 288, 0,
	351, 289, 290, 291, 352, 756, 0, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 700, 689, 690, 687, 688, 679, 0, 675, 0,
	0, 0, 0, 678, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	147, 148, 149, 299, 732, 301, 733, 150, 734, 735,
	0, 151, 305, 306, 152, 153, 685, 716, 736, 737,
	309, 0, 154, 728, 0, 708, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 403, 162, 163,
	0, 709, 710, 712, 0, 711, 713, 164, 165, 356,
	166, 738, 167, 739, 740, 0, 168, 0, 169, 0,
	170, 0, 0, 731, 172, 0, 173, 0, 0, 0,
	673, 174, 175, 176, 718, 719, 696, 0, 0, 177,
	178, 741, 742, 743, 0, 179, 0, 180, 0, 0,
	404, 0, 181, 729, 0, 321, 0, 182, 183, 184,
	185, 725, 727, 406, 0, 189, 0, 186, 0, 405,
	187, 744, 188, 745, 746, 747, 748, 749, 0, 707,
	0, 407, 190, 191, 192, 408, 193, 194, 195, 0,
	197, 196, 0, 730, 409, 198, 410, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 668, 0, 697, 726, 211,
	750, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 412, 217, 413, 720, 218, 219, 220, 221,
	222, 0, 223, 721, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 751, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 414, 246, 247, 674, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 714, 260, 249,
	250, 261, 415, 262, 752, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 753, 267, 722, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 754,
	755, 0, 0, 278, 279, 723, 724, 695, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 715, 288,
	0, 351, 289, 290, 291, 352, 756, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 669,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	665, 666, 700, 689, 690, 687, 688, 679, 0, 675,
	0, 0, 0, 0, 678, 0, 0, 0, 144, 145,
	0, 146, 0, 0, 0, 0, 717, 682, 0, 0,
	0, 147, 148, 149, 2225, 732, 301, 733, 150, 734,
	735, 0, 151, 305, 306, 152, 153, 685, 716, 736,
	737, 309, 0, 154, 728, 0, 708, 0, 155, 156,
	157, 0, 158, 0, 159, 160, 161, 0, 403, 162,
	2227, 0, 709, 710, 712, 0, 711, 713, 164, 165,
	356, 166, 738, 167, 739, 740, 0, 168, 0, 169,
	0, 170, 0, 0, 731, 172, 0, 173, 0, 0,
	0, 673, 174, 175, 176, 718, 719, 696, 0, 0,
	177, 178, 741, 742, 743, 0, 179, 0, 180, 0,
	0, 404, 0, 181, 729, 0, 321, 0, 182, 183,
	184, 185, 725, 727, 406, 0, 189, 0, 186, 0,
	405, 187, 744, 188, 745, 746, 747, 748, 749, 0,
	707, 0, 407, 190, 191, 192, 408, 193, 194, 195,
	0, 197, 196, 0, 730, 409, 198, 410, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 411, 207, 208, 210, 209, 668, 0, 697, 726,
	211, 750, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 412, 217, 413, 720, 218, 219, 220,
	221, 222, 0, 223, 721, 224, 338, 225, 0, 226,
	227, 228, 229, 230, 751, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 414, 246, 247, 674, 248, 0, 252, 253,
	254, 255, 0, 257, 341, 256, 258, 259, 714, 260,
	249, 250, 261, 415, 262, 752, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 753, 267, 722, 0, 270,
	0, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	754, 755, 0, 0, 278, 279, 723, 724, 695, 280,
	281, 2226, 283, 0, 0, 284, 285, 286, 287, 715,
	288, 0, 351, 289, 290, 291, 352, 756, 0, 0,
	292, 0, 0, 0, 0, 293, 294, 295, 296, 297,
	669, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 665, 666, 1374, 689, 690, 687, 688, 679, 0,
	675, 0, 0, 0, 0, 678, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 717, 682, 0,
	0, 0, 147, 148, 149, 299, 732, 301, 733, 150,
	734, 735, 0, 151, 305, 306, 152, 153, 685, 716,
	736, 737, 309, 0, 154, 728, 0, 708, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 709, 710, 712, 0, 711, 713, 164,
	165, 356, 166, 738, 1377, 739, 740, 0, 168, 0,
	169, 0, 170, 0, 0, 731, 172, 0, 173, 0,
	0, 0, 673, 174, 175, 176, 718, 719, 696, 0,
	0, 177, 178, 741, 742, 743, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 729, 0, 321, 0, 182,
	183, 1378, 185, 725, 727, 406, 0, 189, 0, 186,
	0, 405, 187, 744, 188, 745, 746, 747, 748, 749,
	0, 707, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 730, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 1379, 1376, 206,
	332, 205, 411, 207, 208, 210, 209, 668, 0, 697,
	726, 211, 750, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 720, 218, 219,
	220, 221, 222, 0, 223, 721, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 751, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 674, 248, 0, 252,
	253, 254, 1380, 0, 257, 341, 256, 258, 259, 714,
	260, 249, 250, 261, 415, 262, 752, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 753, 267, 722, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 754, 755, 0, 0, 278, 279, 723, 724, 695,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	715, 288, 0, 351, 289, 290, 291, 352, 756, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 1375,
	297, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 700, 689, 690, 687, 688, 679,
	0, 675, 0, 0, 0, 0, 678, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 147, 148, 149, 299, 732, 301, 733,
	150, 734, 735, 0, 151, 305, 306, 152, 153, 685,
	716, 736, 737, 309, 0, 154, 728, 0, 708, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	403, 162, 163, 0, 709, 710, 712, 0, 711, 713,
	164, 165, 356, 166, 738, 167, 739, 740, 0, 168,
	0, 169, 0, 170, 0, 0, 731, 172, 0, 173,
	0, 0, 0, 673, 174, 175, 176, 718, 719, 696,
	0, 0, 177, 178, 741, 742, 743, 0, 179, 0,
	180, 0, 0, 404, 0, 181, 729, 0, 321, 0,
	182, 183, 184, 185, 725, 727, 406, 0, 189, 0,
	186, 0, 405, 187, 744, 188, 745, 746, 747, 748,
	749, 0, 707, 0, 407, 190, 191, 192, 408, 193,
	194, 195, 0, 197, 196, 0, 730, 409, 198, 410,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 411, 207, 208, 210, 209, 0, 0,
	697, 726, 211, 750, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 412, 217, 413, 720, 218,
	219, 220, 221, 222, 0, 223, 721, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 751, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 414, 246, 247, 1392, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	714, 260, 249, 250, 261, 415, 262, 752, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 753, 267, 722,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 754, 755, 0, 0, 278, 279, 723, 724,
	695, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 715, 288, 0, 351, 289, 290, 291, 352, 756,
	0, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 0, 0, 1390, 0,
	0, 0, 0, 1388, 1389, 700, 689, 690, 687, 688,
	679, 0, 1391, 0, 0, 0, 0, 678, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 147, 148, 149, 299, 732, 301,
	733, 150, 734, 735, 0, 151, 305, 306, 152, 153,
	0, 716, 736, 737, 309, 0, 154, 728, 0, 708,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 403, 162, 163, 0, 709, 710, 712, 0, 711,
	713, 164, 165, 356, 166, 738, 167, 739, 740, 0,
	168, 0, 169, 0, 170, 0, 0, 731, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 718, 719,
	696, 0, 0, 177, 178, 741, 742, 743, 0, 179,
	0, 180, 0, 0, 404, 0, 181, 729, 0, 321,
	0, 182, 183, 184, 185, 725, 727, 406, 0, 189,
	0, 186, 0, 405, 187, 744, 188, 745, 746, 747,
	748, 749, 0, 707, 0, 407, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 730, 409, 198,
	410, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 0,
	0, 697, 726, 211, 750, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 720,
	218, 219, 220, 221, 222, 0, 223, 721, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 751, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 1392, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 714, 260, 249, 250, 261, 415, 262, 752, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 753, 267,
	722, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 754, 755, 0, 0, 278, 279, 723,
	724, 695, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 715, 288, 0, 351, 289, 290, 291, 352,
	756, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 700, 689, 690, 687, 688,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 145, 1391, 146, 0, 0, 0, 678, 717,
	682, 0, 0, 0, 147, 148, 149, 0, 732, 301,
	733, 150, 734, 735, 0, 151, 305, 306, 152, 153,
	685, 716, 736, 737, 309, 0, 154, 728, 0, 708,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 403, 162, 2227, 0, 709, 710, 712, 0, 711,
	713, 164, 165, 356, 166, 738, 167, 739, 740, 0,
	168, 0, 169, 0, 170, 0, 0, 731, 172, 0,
	173, 0, 0, 0, 673, 174, 175, 176, 718, 719,
	696, 0, 0, 177, 178, 741, 742, 743, 0, 179,
	0, 180, 0, 0, 404, 0, 181, 729, 0, 321,
	0, 182, 183, 184, 185, 725, 727, 0, 0, 189,
	0, 186, 0, 405, 187, 744, 188, 745, 746, 747,
	748, 749, 0, 707, 0, 0, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 730, 409, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 668,
	0, 697, 726, 211, 750, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 720,
	218, 219, 220, 221, 222, 0, 223, 721, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 751, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 674, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 714, 260, 249, 250, 261, 0, 262, 752, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 753, 267,
	722, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 754, 755, 0, 0, 278, 279, 723,
	724, 695, 280, 281, 2226, 283, 0, 0, 284, 285,
	286, 287, 715, 288, 0, 351, 289, 290, 291, 352,
	756, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 700, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 666, 0, 0, 0, 144,
	145, 0, 146, 675, 0, 0, 0, 717, 678, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 716,
	307, 308, 309, 0, 154, 728, 0, 708, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 709, 710, 712, 0, 711, 713, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 718, 719, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 729, 0, 321, 0, 182,
	183, 184, 185, 725, 727, 406, 0, 189, 0, 186,
	0, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 730, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 0, 0, 0,
	726, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 720, 218, 219,
	220, 221, 222, 0, 223, 721, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 714,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 722, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 723, 724, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	715, 288, 0, 351, 289, 290, 291, 352, 353, 0,
	0, 292, 0, 571, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 1901, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 402, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 406, 0, 189, 0, 186,
	0, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 331, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 128, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 132, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 660, 353, 0,
	0, 292, 0, 0, 0, 126, 293, 294, 295, 296,
	297, 0, 127, 571, 568, 0, 569, 564, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	145, 117, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 402, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 1114, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 561, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 406, 0, 189, 0, 186,
	0, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 331, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 562, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 560,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 571, 568, 0, 569, 564, 559, 0, 0, 0,
	0, 0, 570, 565, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 402, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 403, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 1111, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 561, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	404, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 406, 0, 189, 0, 186, 0, 405,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 407, 190, 191, 192, 408, 193, 194, 195, 0,
	197, 196, 0, 331, 409, 198, 410, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 562, 0, 215, 0, 0,
	216, 335, 412, 217, 413, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 414, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 415, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 560, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 571,
	568, 0, 569, 564, 559, 0, 0, 0, 0, 0,
	570, 565, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 402, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 403, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 791, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 561, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 404, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 406, 0, 189, 0, 186, 0, 405, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 407,
	190, 191, 192, 408, 193, 194, 195, 0, 197, 196,
	0, 331, 409, 198, 410, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 411, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 562, 0, 215, 0, 0, 216, 335,
	412, 217, 413, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 414,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	415, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 560, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 0, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 571, 568, 0,
	569, 564, 559, 0, 0, 0, 0, 0, 570, 565,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 402, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 403, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 561, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 406,
	0, 189, 0, 186, 0, 405, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 331,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 562, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 415, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 560, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 0, 141, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 570, 565, 298, 0,
	0, 0, 0, 147, 148, 149, 299, 300, 301, 302,
	150, 303, 304, 0, 151, 305, 306, 152, 153, 0,
	0, 307, 308, 309, 0, 154, 310, 0, 0, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	0, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 631,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 128, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 132, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 660, 353,
	0, 0, 292, 0, 141, 0, 126, 293, 294, 295,
	296, 297, 0, 127, 0, 0, 0, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 0, 0, 298, 0,
	625, 0, 630, 147, 148, 149, 299, 300, 301, 302,
	150, 303, 304, 0, 151, 305, 306, 152, 153, 0,
	0, 307, 308, 309, 0, 154, 310, 0, 0, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	0, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 128, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 132, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 660, 353,
	0, 0, 292, 0, 141, 0, 126, 293, 294, 295,
	296, 297, 0, 127, 0, 0, 0, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 0, 0, 298, 0,
	0, 0, 117, 147, 148, 149, 299, 300, 301, 302,
	150, 303, 304, 0, 151, 305, 306, 152, 153, 0,
	0, 307, 308, 309, 0, 154, 310, 0, 0, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	0, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 631,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 352, 353,
	0, 0, 292, 0, 141, 0, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 145, 0, 146, 0, 0, 0, 0, 298, 0,
	625, 0, 630, 147, 148, 149, 299, 300, 301, 302,
	150, 303, 304, 0, 151, 305, 306, 152, 153, 0,
	0, 307, 308, 309, 0, 154, 310, 0, 0, 0,
	155, 156, 157, 0, 158, 0, 159, 160, 161, 0,
	0, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 352, 353,
	0, 0, 292, 0, 0, 141, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 920, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 0, 0, 292, 0, 141, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 1261, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 0, 0, 292, 0, 141, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 1836, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 700, 689, 690, 687, 688, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	145, 0, 146, 913, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 732, 301, 733, 150,
	734, 735, 0, 151, 305, 306, 152, 153, 0, 0,
	736, 737, 309, 0, 154, 310, 0, 402, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 738, 167, 739, 740, 0, 168, 0,
	169, 0, 170, 0, 0, 731, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 696, 0,
	0, 177, 178, 741, 742, 743, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 406, 0, 189, 0, 186,
	0, 405, 187, 744, 188, 745, 746, 747, 748, 749,
	0, 707, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 331, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 0, 0, 697,
	333, 211, 750, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 751, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 415, 262, 752, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 753, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 754, 755, 0, 0, 278, 279, 349, 350, 695,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 756, 571,
	568, 292, 0, 0, 841, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 402, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 403, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 404, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 406, 0, 189, 0, 186, 0, 405, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 407,
	190, 191, 192, 408, 193, 194, 195, 0, 197, 196,
	0, 331, 409, 198, 410, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 411, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	412, 217, 413, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 414,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	415, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 137, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 136, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 571, 568, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 140, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 402, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 403, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	404, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 406, 0, 189, 0, 186, 0, 405,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 407, 190, 191, 192, 408, 193, 194, 195, 0,
	197, 196, 0, 331, 409, 198, 410, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 412, 217, 413, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 414, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 415, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 141, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 0, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 0, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 571, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 298, 140, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 402, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 403,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 406, 0, 189, 0, 186,
	0, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 331, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 141,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 1452,
	154, 310, 0, 0, 0, 155, 156, 157, 0, 158,
	1450, 159, 160, 161, 0, 0, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 1449, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 1454, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 0, 0, 189, 1447, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 1453, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 1448, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 1452, 154, 310, 0, 0,
	1499, 155, 156, 157, 0, 158, 1450, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 1454, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 1498, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 1453, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 1502, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 141, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 0, 1237, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 0, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 141, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 0, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 0, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 631, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 141, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 144,
	145, 1166, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 0, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 0,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 141,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 0, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 0, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 878,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 631, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 872, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	631, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 141, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 648,
	146, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 0, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 141, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 144, 145, 359, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 0, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 0, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 358, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 141, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 0, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 0,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 141,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 0, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 0, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 1749,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 1747, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 141, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 0, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 1742, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 141, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 0, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 0, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 504, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 141, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 0, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 0,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 1131, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 141,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 930, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 0, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 0, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 0, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 875, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 141, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 0, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 820, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 141, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 0, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 0, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 818, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 141, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 309, 0, 154, 310, 0, 0, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 0,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 814, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 141,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 0, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 0, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 812,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 154, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 809, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 141, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 0, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 805, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 141, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 144, 145, 0, 146, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 147, 148, 149, 299,
	300, 301, 302, 150, 303, 304, 0, 151, 305, 306,
	152, 153, 0, 0, 307, 308, 309, 0, 154, 310,
	0, 0, 0, 155, 156, 157, 0, 158, 0, 159,
	160, 161, 0, 0, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 800, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 141, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 144,
	145, 0, 146, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 147, 148, 149, 299, 300, 301, 302, 150,
	303, 304, 0, 151, 305, 306, 152, 153, 0, 0,
	307, 308, 775, 0, 154, 310, 0, 0, 0, 155,
	156, 157, 0, 158, 0, 159, 160, 161, 0, 0,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 526, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	522, 347, 348, 0, 0, 278, 776, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 141,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 144, 145, 0, 146, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 147, 148,
	149, 299, 300, 301, 302, 150, 303, 304, 0, 151,
	305, 306, 152, 153, 0, 0, 307, 308, 309, 0,
	154, 310, 0, 0, 0, 155, 156, 157, 0, 158,
	0, 159, 160, 161, 0, 0, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 613, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 141, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 144, 145, 0, 146, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 147, 148, 149, 299, 300, 301,
	302, 150, 303, 304, 0, 151, 305, 306, 152, 153,
	0, 0, 307, 308, 309, 0, 516, 310, 0, 0,
	0, 155, 156, 157, 0, 158, 0, 159, 160, 161,
	0, 0, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 515, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 526, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 517, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 518,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 522, 347, 348, 0, 0, 278, 520, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 141, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 144, 145, 0,
	146, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	147, 148, 149, 299, 300, 301, 302, 150, 303, 304,
	0, 151, 305, 306, 152, 153, 0, 0, 307, 308,
	309, 0, 154, 310, 0, 0, 0, 155, 156, 157,
	0, 158, 0, 159, 160, 161, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 0, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 0, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 0, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 937,
	938, 0, 957, 958, 959, 967, 968, 969, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 971, 0, 937, 938, 0,
	957, 958, 959, 967, 968, 969, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 939, 0, 0, 0,
	940, 0, 954, 971, 0, 937, 938, 0, 957, 958,
	959, 967, 968, 969, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 939, 0, 0, 0, 940, 0,
	954, 971, 0, 0, 937, 938, 0, 957, 958, 959,
	967, 968, 969, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 939, 0, 0, 0, 945, 940, 954, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 972, 0, 0, 0,
	0, 939, 0, 0, 945, 0, 0, 954, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 972, 0, 0, 0, 962, 0,
	0, 0, 945, 0, 0, 955, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 972, 0, 0, 0, 962, 0, 0, 0,
	961, 945, 0, 955, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 972, 0, 0, 962, 0, 0, 0, 961, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 962, 0, 0, 961, 0, 0, 0,
	955, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 956, 951, 952, 953, 966, 0, 950,
	948, 949, 941, 942, 943, 944, 946, 947, 0, 965,
	0, 0, 0, 0, 0, 1628, 0, 0, 0, 963,
	0, 0, 951, 952, 953, 966, 0, 950, 948, 949,
	941, 942, 943, 944, 946, 947, 0, 0, 0, 0,
	2200, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	951, 952, 953, 966, 0, 950, 948, 949, 941, 942,
	943, 944, 946, 947, 0, 0, 0, 0, 2156, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 951,
	952, 953, 966, 0, 950, 948, 949, 941, 942, 943,
	944, 946, 947, 0, 0, 937, 938, 2117, 957, 958,
	959, 967, 968, 969, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 971, 0, 937, 938, 0, 957, 958, 959, 967,
	968, 969, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 939, 0, 0, 0, 940, 0, 954, 971,
	0, 937, 938, 0, 957, 958, 959, 967, 968, 969,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	939, 0, 0, 0, 940, 0, 954, 971, 0, 0,
	937, 938, 0, 957, 958, 959, 967, 968, 969, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 939, 0,
	0, 0, 945, 940, 954, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 972, 0, 0, 0, 0, 939, 0, 0,
	945, 0, 0, 954, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	972, 0, 0, 0, 962, 0, 0, 0, 945, 0,
	0, 955, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 972, 0,
	0, 0, 962, 0, 0, 0, 961, 945, 0, 955,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 972, 0, 0,
	962, 0, 0, 0, 961, 0, 0, 955, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 962,
	0, 0, 961, 0, 0, 0, 955, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 956,
	951, 952, 953, 966, 0, 950, 948, 949, 941, 942,
	943, 944, 946, 947, 0, 965, 0, 0, 2091, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 951, 952,
	953, 966, 0, 950, 948, 949, 941, 942, 943, 944,
	946, 947, 0, 0, 0, 0, 2086, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 951, 952, 953, 966,
	0, 950, 948, 949, 941, 942, 943, 944, 946, 947,
	0, 0, 0, 0, 2082, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 951, 952, 953, 966, 0,
	950, 948, 949, 941, 942, 943, 944, 946, 947, 0,
	0, 937, 938, 2029, 957, 958, 959, 967, 968, 969,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 971, 0, 937,
	938, 0, 957, 958, 959, 967, 968, 969, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 939, 0,
	0, 0, 940, 0, 954, 971, 0, 937, 938, 0,
	957, 958, 959, 967, 968, 969, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 939, 0, 0, 0,
	940, 0, 954, 971, 0, 0, 937, 938, 0, 957,
	958, 959, 967, 968, 969, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 939, 0, 0, 0, 945, 940,
	954, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 972, 0,
	0, 0, 0, 939, 0, 0, 945, 0, 0, 954,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 972, 0, 0, 0,
	962, 0, 0, 0, 945, 0, 0, 955, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 972, 0, 0, 0, 962, 0,
	0, 0, 961, 945, 0, 955, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 972, 0, 0, 962, 0, 0, 0,
	961, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 962, 0, 0, 961, 0,
	0, 0, 955, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 956, 951, 952, 953, 966,
	0, 950, 948, 949, 941, 942, 943, 944, 946, 947,
	0, 965, 0, 0, 2000, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 951, 952, 953, 966, 0, 950,
	948, 949, 941, 942, 943, 944, 946, 947, 0, 0,
	0, 0, 1999, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 951, 952, 953, 966, 0, 950, 948, 949,
	941, 942, 943, 944, 946, 947, 0, 0, 0, 0,
	1920, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 951, 952, 953, 966, 0, 950, 948, 949, 941,
	942, 943, 944, 946, 947, 0, 0, 937, 938, 1839,
	957, 958, 959, 967, 968, 969, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 971, 0, 937, 938, 0, 957, 958,
	959, 967, 968, 969, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 939, 0, 0, 0, 940, 0,
	954, 971, 0, 937, 938, 0, 957, 958, 959, 967,
	968, 969, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 939, 0, 0, 0, 940, 0, 954, 971,
	0, 0, 937, 938, 0, 957, 958, 959, 967, 968,
	969, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	939, 0, 0, 0, 945, 940, 954, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 972, 0, 0, 0, 0, 939,
	0, 0, 945, 0, 0, 954, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 972, 0, 0, 0, 962, 0, 0, 0,
	945, 0, 0, 955, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	972, 0, 0, 0, 962, 0, 0, 0, 961, 945,
	2254, 955, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 972,
	0, 0, 962, 0, 0, 0, 961, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 962, 0, 0, 961, 0, 0, 0, 955, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 2253,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 956, 951, 952, 953, 966, 0, 950, 948, 949,
	941, 942, 943, 944, 946, 947, 0, 965, 0, 0,
	1815, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	951, 952, 953, 966, 0, 950, 948, 949, 941, 942,
	943, 944, 946, 947, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 951, 952,
	953, 966, 0, 950, 948, 949, 941, 942, 943, 944,
	946, 947, 0, 0, 1598, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 951, 952, 953,
	966, 0, 950, 948, 949, 941, 942, 943, 944, 946,
	947, 937, 938, 0, 957, 958, 959, 967, 968, 969,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 971, 0, 937,
	938, 0, 957, 958, 959, 967, 968, 969, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 939, 0,
	1481, 0, 940, 0, 954, 971, 0, 0, 0, 0,
	0, 1214, 0, 0, 0, 0, 0, 937, 938, 0,
	957, 958, 959, 967, 968, 969, 939, 0, 0, 0,
	0, 0, 954, 960, 0, 0, 0, 1213, 0, 0,
	940, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	1668, 1482, 0, 1667, 939, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 964, 972, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 972, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 970, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 961, 964, 972, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 963, 0, 0, 951, 952, 953, 966,
	0, 950, 948, 949, 941, 942, 943, 944, 946, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 951, 952, 953, 966, 0, 950,
	948, 949, 941, 942, 943, 944, 946, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 951, 952, 953, 966, 0, 950, 948, 949,
	941, 942, 943, 944, 946, 947, 937, 938, 0, 957,
	958, 959, 967, 968, 969, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 971, 0, 937, 938, 0, 957, 958, 959,
	967, 968, 969, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 939, 0, 0, 0, 940, 0, 954,
	971, 0, 937, 938, 0, 957, 958, 959, 967, 968,
	969, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 939, 0, 0, 0, 940, 0, 954, 971, 0,
	0, 0, 0, 0, 0, 0, 937, 938, 0, 957,
	958, 959, 967, 968, 969, 0, 0, 0, 0, 939,
	0, 0, 960, 945, 0, 954, 1669, 0, 0, 940,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 972, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 939, 0, 0, 0, 0, 0, 954,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 972, 0, 0, 0, 962, 0, 0, 0, 945,
	0, 0, 955, 0, 1674, 0, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 972,
	0, 0, 0, 962, 0, 0, 0, 961, 552, 0,
	955, 0, 0, 945, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 964, 972, 0, 961, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 962, 0, 0, 0, 0,
	0, 965, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 937, 938, 0, 957,
	958, 959, 967, 968, 969, 0, 0, 961, 0, 965,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 940,
	0, 956, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1819, 0, 0, 965, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 963, 954,
	0, 951, 952, 953, 966, 956, 950, 948, 949, 941,
	942, 943, 944, 946, 947, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 963, 0, 0, 951,
	952, 953, 966, 0, 950, 948, 949, 941, 942, 943,
	944, 946, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 963, 0, 0, 951, 952, 953,
	966, 0, 950, 948, 949, 941, 942, 943, 944, 946,
	947, 0, 964, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	970, 951, 952, 953, 966, 0, 950, 948, 949, 941,
	942, 943, 944, 946, 947, 962, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 938, 0, 957,
	958, 959, 967, 968, 969, 0, 0, 961, 0, 0,
	0, 0, 960, 0, 0, 0, 1627, 0, 0, 940,
	1634, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	937, 938, 0, 957, 958, 959, 967, 968, 969, 0,
	0, 0, 0, 939, 0, 0, 960, 0, 0, 954,
	0, 0, 0, 940, 0, 956, 971, 0, 937, 938,
	0, 957, 958, 959, 967, 968, 969, 0, 0, 0,
	0, 965, 0, 0, 960, 0, 0, 939, 0, 0,
	0, 940, 0, 954, 971, 0, 937, 938, 0, 957,
	958, 959, 967, 968, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 939, 0, 0, 0, 940,
	0, 954, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 945, 963, 954,
	970, 951, 952, 953, 966, 0, 950, 948, 949, 941,
	942, 943, 944, 946, 947, 962, 964, 972, 0, 0,
	0, 0, 955, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 1636, 1637, 0, 1654,
	1655, 1656, 0, 0, 964, 972, 0, 961, 0, 962,
	0, 0, 1807, 945, 0, 0, 955, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 972, 0, 0, 0, 962, 0, 0,
	0, 961, 0, 0, 955, 0, 0, 0, 0, 1651,
	970, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 965, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1642, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 963, 0,
	1657, 951, 952, 953, 966, 956, 950, 948, 949, 941,
	942, 943, 944, 946, 947, 0, 0, 0, 0, 0,
	0, 965, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 951, 952, 953, 966, 0,
	950, 948, 949, 941, 942, 943, 944, 946, 947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 951, 952, 953, 966, 0, 950, 948,
	949, 941, 942, 943, 944, 946, 947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 951, 952, 953, 966, 1653, 950, 948, 949, 941,
	942, 943, 944, 946, 947, 937, 938, 0, 957, 958,
	959, 967, 968, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 1052, 1081, 1044, 1072, 1071, 0, 0, 1046, 1045,
	0, 1648, 1649, 1650, 1083, 1082, 1647, 1645, 1646, 1638,
	1639, 1640, 1641, 1643, 1644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 1077, 0, 1069,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 964, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 1064, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 1055, 1054, 1056,
	1057, 1058, 1059, 1060, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	965, 0, 0, 1273, 1271, 1272, 1275, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 1050, 0, 0, 1062, 1052, 1081, 1044, 1072, 1071,
	1085, 0, 1046, 1045, 0, 0, 0, 0, 1083, 1082,
	0, 0, 1047, 0, 0, 1078, 1079, 963, 0, 0,
	951, 952, 953, 966, 0, 950, 948, 949, 941, 942,
	943, 944, 946, 947, 509, 0, 0, 1051, 0, 0,
	0, 1077, 1084, 1069, 1068, 0, 0, 0, 0, 0,
	0, 0, 579, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 0, 0, 0, 0, 0,
	0, 1066, 1064, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	580, 0, 0, 0, 0, 586, 587, 0, 0, 596,
	0, 1055, 1054, 1056, 1057, 1058, 1059, 1060, 0, 1080,
	0, 0, 511, 581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 599, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 1053, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 590, 0, 0,
	585, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 1078,
	1079, 0, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 593,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 0, 0, 598, 0, 0,
	0, 514, 0, 0, 0, 0, 591, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597,
}
var sqlPact = [...]int{

	190, -1000, -48, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18031, -1000,
	-1000, -1000, 22139, -1000, -1000, -1000, -1000, -1000, -1000, 21823,
	871, 957, -1000, -1000, -1000, -1000, -1000, 22139, 2580, 1556,
	5377, -1000, 1235, 22139, 18031, 1232, 1556, 23403, -1000, -1000,
	23403, 1177, -1000, -1000, -1000, -1000, -1000, 27511, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 704,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 729, 784, 131, 760, -1000, 739, -49, 14833, 31480,
	585, 587, 585, 585, 578, 779, 27195, 22139, 1638, 7,
	-1000, 342, 15790, 190, 671, 4, 18663, 22139, -1000, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 385, 14, -1000, -1000, 21507, -1000,
	1418, 1241, 1230, 20243, -1000, -1000, -1000, -1000, -1000, 351,
	-1000, 13519, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1082, -1000, 6, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11177, 349,
	1416, 11177, 1067, -1000, 22139, -1000, -1000, -1000, 1397, -1000,
	-1000, -1000, -1000, -1000, 448, 1843, 792, 347, 26879, -1000,
	1105, -1000, 447, 616, -1000, -1000, 14505, 17, 20243, -1000,
	11177, 11177, 11177, 26563, 22139, 22139, 1266, 26247, -1000, 739,
	-1000, -1000, 25931, 25615, 25299, 24983, 24667, -1000, 1188, 1634,
	1634, 1634, 1668, 148, 112, 131, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1765, -1000, -1000, -1000, -1000,
	1826, -1000, -1000, -1000, -1000, -1000, 1397, 17715, 818, 1636,
	1412, -1000, 1065, 1409, 1408, 1405, 1395, 1392, -1000, 881,
	-1000, 1441, 591, -1000, 1389, 928, 527, -1000, 1388, 1379,
	1105, -1000, 1105, -1000, -1000, -1000, 670, 23403, 21191, 24351,
	22139, 20875, 2, 22139, -1000, 345, 2, 9812, 9812, -1000,
	-1000, 342, -1000, 9130, 1573, 384, -176, 150, 432, -1000,
	15150, 17071, -1000, 17715, 18663, 4, -24, -1000, -1000, -1000,
	5049, 761, 16110, 14, -1000, -1000, -1000, -1000, -1000, 20243,
	22139, 22139, 814, 24035, 257, -1000, 11177, -4, -1000, -1000,
	342, 18031, 1010, 30740, -1000, 11177, 11177, 11177, 11177, 11177,
	986, 378, -1000, 341, 340, 6388, -1000, -1000, 1821, -1000,
	-1000, -1000, 135, -1000, -1000, 11177, 14, -1000, -1000, -1000,
	-1000, 336, 1839, -1000, 484, -1000, -1000, -1000, 456, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1434, 335,
	334, 333, -1000, -1000, -1000, -1000, 331, 329, 327, 326,
	323, 321, 317, 312, 311, 307, 305, 297, 295, 294,
	292, 930, -1000, 483, -1000, -1000, 483, 483, -1000, 268,
	268, 275, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	268, -1000, -1000, -1000, 444, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 285, 1715, 31407, 17715, 30740, 18031, -1000, -1000,
	-1000, -1000, 22139, 11177, -1000, 1707, 1105, -1, -1000, -1000,
	-1000, -1000, 1199, 1212, 582, 785, 14177, 13849, 1598, -1000,
	-1000, -1000, 15, 5377, 117, -1000, 30740, 30740, 30740, 284,
	1167, 449, 132, 23719, 449, 1164, -1000, 1188, 114, 1529,
	-1000, 114, 1527, 113, 1520, -1000, -105, -1000, 1516, -24,
	1515, -1000, 1090, 1263, 10495, 1250, 11177, 131, -1000, -1000,
	131, 131, 7412, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20559, -1000, -1000, 782, 22139, 1430, 18031, 22139,
	22139, 22139, 22139, 22139, -1000, -1000, 809, 1425, 22139, 1197,
	-1000, -1000, 22139, 22139, 868, 696, -1000, -1, -1000, 23403,
	-1000, 858, 1512, 492, 762, 1510, 880, 867, 1508, 22139,
	2, 1699, 22139, 126, -1000, 29917, -1000, 126, -1000, -8,
	-1000, 30740, -1000, 1224, 1223, 15790, 1228, 1000, 1000, 1000,
	-1000, 281, 362, 432, 4379, 11177, -1000, 19927, 1008, 41,
	122, 1573, -1000, 22139, 430, -1000, 22139, -1000, -1000, -1000,
	1377, -9, -1000, -1000, 467, 119, 1697, 119, 16431, -1000,
	22139, -14, 30740, 2375, 18979, 662, -1000, 31173, 31407, 5377,
	685, 11177, 11177, 11177, 11177, 11177, 11177, 11177, 11177, 11177,
	11177, 11177, 11177, 11177, 11177, 11177, 11177, 11177, 11177, 11177,
	11177, 11177, 11177, 1302, 11177, 652, 11177, 11177, 11177, 11177,
	918, 967, 263, 1140, -1000, 1755, 1755, 1755, 30796, 30796,
	230, 378, -1000, 11177, -1000, 10154, 112, 29455, 0, -1000,
	-1000, -1000, 7753, 480, 30740, 14, 6046, -1000, 1815, 906,
	1454, 1329, 277, 111, 108, 107, 11177, 11177, 11859, 11859,
	11177, 12200, 11177, 11177, 6729, 11177, 11177, 11177, 11177, 11177,
	11177, -1000, 276, -1000, -1000, -1000, -1000, 1812, -1000, -1000,
	1804, -1000, 679, 678, 1795, -49, -15, -1000, 689, -1000,
	-1000, -1000, -1000, 146, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 275, 930, 268, 268,
	268, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 444, -1000,
	-1000, 483, 483, 483, -1000, -1000, -100, -1000, 1375, -1000,
	462, -16, 574, -1, 1105, 1100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1838,
	-5, -1000, -1000, -5, -1000, -1000, 5377, -1000, -1000, 20243,
	-1000, -1000, 19295, 1696, 1499, -1000, 976, -1000, 1693, 22139,
	1054, 1158, -1000, 676, 1491, -1000, -1000, 22139, 22139, -1000,
	22139, -1000, 22139, 22139, 5377, 22139, 22139, -1000, -1000, -1000,
	30740, -1000, 418, -1000, -1000, 30740, 936, 1247, -1000, 1247,
	-6, -1000, 29879, 1219, 22139, -1000, -1000, -1000, -1000, -1000,
	22139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204,
	-1000, -1000, -1000, -1000, 22139, 22139, 22139, -1000, -63, 863,
	-1000, 19611, 1624, 1619, 1614, 20243, 1683, -49, 1371, 1681,
	-49, 1361, 644, 22139, 642, 639, 20243, -1000, 265, -20,
	467, 9812, 15790, 5377, -1000, 467, 9130, -1000, 15790, 15790,
	1156, 1222, 15790, -1000, -1000, -1000, -1000, 19927, 363, 432,
	19927, -1000, 1785, 1246, -26, -1000, -1000, 22139, 264, -1000,
	432, 106, 1284, 1095, -1000, 747, 1354, 22139, 847, 11177,
	933, -1000, 15470, 490, 22139, 847, 82, -1000, -1000, -1000,
	422, 22139, -1000, -1000, 11177, -1000, -1000, 22139, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 440, 379,
	379, 829, 829, 829, 829, 1813, 2509, 1099, 2254, 3082,
	3082, 3082, 482, 278, 278, 3082, 3082, 3082, 30796, 30768,
	2215, 11177, 11177, 638, 964, 263, 2215, 11177, 2215, 2215,
	2215, 2215, -1000, 988, -1000, -1000, -1000, -1000, 1353, 261,
	12200, 12200, -1000, -1000, -1000, 6388, 12541, -1000, -1000, -1000,
	-1000, 253, 11177, -1000, 29483, -201, -35, -1000, -1000, 11177,
	-34, -115, -1000, -1000, 709, -1000, 11177, -1000, -25, 11177,
	11177, 11177, 104, 103, -1000, 632, -1000, 631, 627, 625,
	-1000, 252, 992, 251, 249, 11177, -1000, -1000, -1000, 30706,
	28149, 97, 1352, -146, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 95, 94, 30526, -146, 93, 404, -1000, 12200, 12200,
	12200, 6388, 248, 90, 29851, -146, 30346, 9471, 9471, 9471,
	89, 30312, 11177, -146, 3892, 3835, 3467, -37, -41, -47,
	1784, -54, 88, 438, 424, 86, -1000, -1000, 31407, -1000,
	373, 459, -1000, 1783, 458, 17715, 22139, -1000, 1237, -1000,
	-1000, 807, -1000, 893, -1000, 14833, -1000, -1000, 81, -56,
	-13, 31407, -1000, -1000, -1000, -1000, -1000, 22139, 293, 22139,
	22139, -1000, 237, 1218, 1217, -49, 22139, 1836, -49, 22139,
	1484, 1550, 416, 22139, -1000, 114, 114, -1000, 113, -1000,
	-1000, -24, 936, -1000, 11177, 1773, -1000, -1000, -1000, 7412,
	-1000, -1000, -1000, 22139, -129, -52, -1000, -1000, -1000, -1000,
	-1000, 430, 797, 22139, 22139, 22139, -1000, -1000, 1157, 23087,
	1154, 31407, 236, 22139, 22139, 22771, 22455, 22139, 853, -49,
	-1000, 235, -49, -1000, 232, 22139, 864, 22139, 22139, 857,
	-49, -1000, 1328, -1000, -126, 1573, -1000, 1328, -1000, -1000,
	1156, -1000, 231, 11177, 15790, -1000, 360, -1000, -58, -1000,
	19927, -1000, 358, -199, -1000, 421, -1000, 432, 227, 22139,
	19927, -1000, 458, 1351, 714, -1000, 743, -1000, -1000, 7070,
	30740, -1000, 847, 1626, -71, -1000, -1000, -1000, 467, 16431,
	15790, 9130, -81, 30740, -52, 11177, 2215, 2215, 11177, 12200,
	12200, -1000, 2215, -1000, -1000, -1000, -1000, -1000, 1345, 216,
	11177, 31407, 30886, 3953, -82, -1000, 8789, -30, -1000, 11177,
	-1000, 29427, -1000, -1000, 370, 1548, -1000, 11177, 30284, 71,
	8448, -1000, 30256, -28, -28, -1000, 1834, 1165, 982, 898,
	817, 1772, -1000, 16751, 472, 1015, 29086, 31173, 31407, -1000,
	11177, -1000, -1000, 1343, 11177, -1000, 31173, 31407, 12200, 12200,
	12200, 12200, 12200, 12200, 12200, 12200, 12200, 12200, 12200, 12200,
	12200, 12200, 12200, 12200, 12200, 12200, 12200, 1227, 12200, 1750,
	1750, 1750, -51, 8107, -1000, 1423, 1343, 11177, 11177, 31407,
	70, 69, 67, -1000, 11177, -146, 11177, 11177, 11177, -1000,
	-1000, -1000, 63, -1000, 1771, -1000, -1000, -1000, -1000, -1000,
	1769, -1000, 357, 58, -1000, 1034, -1000, -52, -1000, -1000,
	-1000, -1000, -1000, 1273, -1000, 19295, -1000, 208, 22139, 13199,
	207, 904, 11177, 205, 203, -1000, 188, -1000, -1000, 181,
	22139, 1204, 416, 18347, -1000, 449, -1000, -1000, -1000, 1038,
	29057, -1000, 1627, 5377, 22139, -1000, -1000, -1000, 618, 607,
	1480, -1000, 1147, -1000, 504, 971, -1000, 1473, 1089, 1472,
	1089, -1000, -63, 832, -1000, 11177, -1000, 11177, -1000, 606,
	-1000, -1000, 601, 57, 1291, 1659, -1000, 15790, 1291, -1000,
	22139, 30740, -1000, -176, -1000, 1751, -1000, -1000, 1246, -1000,
	4718, 19927, 22139, -89, -1000, -1000, 17715, 660, -1000, -65,
	-1000, -1000, 210, -49, 847, -1000, -76, -1000, 417, 1700,
	2215, 3807, 3539, 11177, 31407, 31135, -90, 11177, 11177, -1000,
	-103, -1000, 11177, 353, 30740, -1000, -1000, -1000, 30740, 11177,
	1829, 11177, 53, 51, 49, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47, -1000, -1000, 27827, 11177, 44, -1000,
	40, 39, 30740, 1423, 30740, -1000, -1000, 469, 469, 724,
	724, 724, 724, 1750, 206, 1544, 1144, 250, 250, 250,
	2318, 657, 657, 250, 250, 250, 1341, 1215, 180, 4020,
	11177, -118, -1000, -1000, -1000, 30740, 30740, 35, -1000, -1000,
	-1000, -146, 229, 29029, 29001, -1000, 33, 319, -1000, -1000,
	179, -1000, 1277, -1000, 1679, 13199, 176, -124, -1000, 318,
	1643, 11177, -1000, -1000, 174, 22139, -1000, 28660, 13199, 22139,
	19295, 1692, 13199, 1053, 1210, 416, 18347, -1000, 676, -1000,
	-1000, -1000, 1627, -1000, 22139, 22139, 22139, 1470, -1000, -1000,
	1240, 1243, 566, 22139, -1000, 22139, -1000, 22139, 22139, 22139,
	-130, -134, 22139, 22139, -1000, 461, 11177, 11177, 1573, 461,
	-135, 432, -1000, -1000, -1000, 1747, -1000, -141, -1000, -86,
	17399, 1559, 22139, 1606, -1000, -1000, 173, 11177, 11177, 31135,
	-147, -1000, 2215, 2215, -1000, 28631, -1000, 30740, -1000, 30256,
	-1000, -1000, -1000, -1000, 947, -1000, 28603, -1000, -1000, -1000,
	-1000, 12200, 1307, 172, 31407, 28575, -1000, -1000, 11177, -1000,
	-1000, -1000, -1000, 1831, 954, -1000, 22139, -1000, 5377, 22139,
	1315, 1114, -1000, -1000, 1216, 168, 12200, 22139, -153, 13199,
	951, 13199, 1627, 14, 5377, 1627, 28234, 6046, -154, -1000,
	-158, -162, 31, -49, -164, 22139, -1000, 416, 18347, -1000,
	1550, -1000, -1000, -1000, -1000, 22139, 1113, -1000, 1111, 11177,
	-1000, 31407, 1089, 1089, -1000, 599, 598, 595, 594, -1000,
	-1000, -1000, 22139, 30740, -146, -1000, -1000, 19927, 279, -1000,
	-1000, 166, 14, 667, -166, 22139, -1000, -1000, 5705, 2215,
	2215, -1000, -1000, 28, 1015, 1657, -1000, 3270, 12200, 31407,
	-168, -1000, 28205, -173, -1000, 244, 22139, 1112, -1000, -1000,
	22139, 1128, -1000, -1000, 11177, 4020, 165, 951, -174, 1273,
	161, -1000, -1000, -1000, -1000, -1000, -1000, 1643, -25, -1000,
	-1000, 887, 1273, -1000, 951, 160, 18347, -1000, 1204, -1000,
	-1000, -1000, 30740, 1635, -1000, -1000, 22139, 22139, 158, 157,
	-98, -1000, 1688, -1000, -1000, 11177, 808, -1000, 467, -1000,
	-1000, 946, 11177, 3270, -178, -1000, -1000, 1831, -1000, -1000,
	1830, 154, -1000, -1000, 1469, 28177, 1183, 22139, 1273, 951,
	-1000, 22139, 1627, 27, 22139, -1000, 1273, 13199, -1000, 1210,
	520, 5377, -1000, -1000, 11177, 11177, 22139, 151, -28, 16431,
	-1000, 26, 11518, 11518, -146, -1000, -1000, -1000, 22139, 1459,
	-1000, 1041, 923, 24, -1000, 1273, -180, -1000, -1000, 132,
	-1000, -184, -1000, -1000, 11177, -1000, -185, -186, -1000, -1000,
	23, -160, -1000, -1000, -1000, 12871, 1007, 839, 29512, -1000,
	-190, 22139, -1000, 1052, 1042, 766, -1000, -1000, -1000, -1000,
	-1000, -1000, 1183, 951, 30740, -1000, -1000, 1829, -1000, 1720,
	-1000, -1000, -1000, -1000, -1000, 1056, -1000, -1000, 1571, -1000,
	530, 1030, 1030, 1041, 1273, 10836, -1000, -1000, -1000, -1000,
	1730, -1000, -1000, 1234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 2221, 2220, 1470, 1675, 2219, 2216, 2214, 2213, 2211,
	2210, 2209, 2208, 2197, 2196, 2195, 2194, 2192, 2189, 2188,
	2181, 2180, 2176, 2173, 2171, 2169, 2164, 2163, 1667, 2162,
	2161, 2159, 2158, 2157, 2156, 1665, 2155, 1651, 2154, 2153,
	2150, 2145, 2140, 1641, 1621, 2136, 85, 103, 1561, 2130,
	2126, 1525, 2115, 2109, 2107, 2106, 2105, 2102, 2098, 80,
	2093, 2092, 2091, 2090, 2089, 2088, 2086, 143, 158, 2085,
	1461, 2084, 2083, 2082, 2081, 2080, 2078, 2074, 2072, 2065,
	2061, 2060, 2058, 2056, 2054, 2053, 2052, 2045, 2043, 156,
	2041, 2040, 1458, 1452, 2038, 2035, 16, 2034, 76, 2033,
	24, 140, 2319, 135, 2032, 2031, 2029, 2024, 44, 91,
	90, 2023, 46, 2021, 2020, 32, 21, 14, 13, 2019,
	94, 2017, 2016, 1269, 30, 2014, 2013, 122, 2012, 28,
	17, 378, 150, 149, 111, 105, 2011, 2008, 2006, 2005,
	48, 2004, 1, 2000, 1999, 8, 67, 23, 1998, 57,
	59, 1997, 1996, 123, 1994, 75, 100, 1422, 146, 117,
	38, 1991, 79, 12, 74, 1990, 1988, 148, 27, 1987,
	34, 82, 139, 1984, 54, 155, 116, 77, 120, 109,
	1980, 1979, 1978, 147, 1977, 108, 66, 1976, 1975, 52,
	1973, 124, 131, 1972, 1971, 84, 1968, 113, 1964, 1961,
	154, 121, 106, 9, 29, 56, 11, 1412, 1408, 112,
	69, 55, 47, 1960, 2113, 934, 705, 22, 96, 63,
	42, 97, 62, 72, 144, 20, 1955, 1954, 115, 1952,
	1947, 1935, 1932, 1930, 95, 1928, 1922, 73, 141, 83,
	36, 41, 88, 25, 53, 151, 110, 152, 101, 1916,
	89, 129, 1915, 114, 1914, 1909, 1605, 126, 1907, 1905,
	1903, 1600, 1379, 1209, 35, 1902, 1898, 1043, 831, 1896,
	1895, 70, 1894, 107, 104, 1893, 132, 130, 19, 1885,
	125, 40, 92, 1884, 98, 33, 0, 715, 268, 1882,
	102, 51, 1876, 1875, 1873, 1871, 31, 3, 7, 4,
	5, 6, 49, 37, 1868, 1866, 118, 86, 60, 1865,
	153, 1863, 1861, 1859, 45, 1858, 18, 1857, 15, 1856,
	1855, 10, 2, 1854, 1853, 136, 1852, 93, 1851, 1674,
	1850, 134, 1848, 1847, 1558, 26, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 7, 8, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	110, 110, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 107, 107, 112,
	112, 112, 114, 114, 111, 111, 106, 106, 20, 57,
	52, 284, 284, 285, 285, 95, 95, 99, 99, 96,
	97, 97, 98, 98, 27, 27, 27, 22, 22, 22,
	23, 24, 25, 28, 28, 28, 28, 28, 28, 35,
	36, 36, 36, 36, 36, 37, 37, 37, 37, 37,
	42, 42, 40, 40, 39, 39, 38, 38, 41, 41,
	159, 159, 158, 158, 161, 161, 43, 43, 46, 46,
	46, 46, 46, 47, 47, 47, 47, 47, 47, 47,
	47, 252, 252, 251, 45, 226, 226, 48, 184, 184,
	49, 49, 49, 49, 50, 58, 325, 325, 325, 329,
	329, 330, 330, 331, 331, 331, 331, 331, 331, 331,
	327, 327, 55, 55, 94, 62, 62, 62, 62, 62,
	62, 64, 66, 63, 63, 63, 65, 65, 67, 67,
	67, 67, 68, 68, 68, 68, 69, 69, 139, 139,
	277, 276, 276, 282, 282, 282, 137, 137, 137, 137,
	137, 138, 138, 138, 275, 275, 275, 275, 283, 283,
	283, 283, 283, 283, 281, 281, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 82, 82, 89, 89, 89, 89,
	89, 89, 71, 76, 76, 76, 72, 77, 78, 79,
	79, 79, 73, 73, 81, 81, 81, 80, 86, 86,
	86, 86, 83, 83, 83, 84, 84, 87, 87, 87,
	74, 75, 88, 85, 85, 85, 44, 326, 326, 328,
	328, 53, 31, 31, 32, 32, 140, 140, 141, 141,
	205, 205, 205, 205, 142, 142, 113, 113, 113, 204,
	294, 294, 295, 295, 295, 295, 295, 295, 296, 296,
	296, 296, 296, 296, 296, 292, 292, 293, 290, 290,
	291, 291, 291, 291, 332, 332, 203, 203, 145, 145,
	299, 299, 299, 299, 297, 297, 297, 297, 297, 300,
	298, 301, 301, 301, 301, 301, 238, 238, 238, 91,
	33, 119, 119, 34, 30, 30, 188, 188, 149, 149,
	243, 243, 243, 130, 130, 108, 108, 108, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 189,
	189, 190, 190, 54, 56, 61, 90, 90, 90, 21,
	21, 26, 26, 60, 334, 334, 126, 126, 126, 126,
	127, 127, 200, 200, 201, 201, 202, 202, 202, 121,
	120, 122, 122, 29, 29, 115, 115, 116, 116, 117,
	117, 118, 118, 335, 335, 51, 51, 93, 133, 133,
	197, 197, 197, 199, 199, 198, 198, 198, 174, 174,
	174, 92, 154, 154, 163, 163, 164, 164, 249, 165,
	165, 59, 59, 102, 102, 100, 100, 100, 100, 100,
	100, 101, 101, 103, 103, 103, 103, 103, 103, 103,
	105, 307, 307, 307, 310, 310, 306, 308, 308, 309,
	309, 333, 333, 175, 175, 175, 144, 143, 143, 147,
	147, 146, 148, 148, 242, 242, 242, 172, 172, 172,
	172, 191, 191, 192, 192, 193, 193, 194, 194, 194,
	195, 195, 196, 196, 171, 171, 222, 222, 104, 104,
	153, 153, 155, 155, 212, 212, 212, 213, 213, 211,
	211, 211, 211, 244, 244, 244, 244, 244, 244, 244,
	323, 323, 323, 324, 324, 241, 241, 245, 245, 245,
	245, 245, 245, 239, 239, 239, 239, 240, 240, 250,
	250, 178, 178, 178, 178, 176, 176, 177, 177, 246,
	246, 246, 246, 173, 173, 247, 247, 247, 206, 206,
	253, 253, 253, 271, 271, 152, 152, 152, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 255, 255, 255, 255, 257,
	257, 257, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	270, 270, 270, 270, 270, 258, 258, 265, 265, 266,
	266, 267, 268, 259, 259, 260, 260, 261, 262, 269,
	269, 269, 269, 273, 273, 263, 263, 263, 263, 263,
	264, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 186, 186, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 216,
	216, 216, 216, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 302, 302, 302, 302, 302, 302,
	302, 304, 304, 305, 305, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 311, 311, 312, 312, 314, 314,
	315, 315, 316, 317, 317, 317, 318, 319, 319, 313,
	313, 320, 320, 320, 321, 321, 322, 322, 322, 322,
	322, 228, 228, 228, 229, 229, 230, 236, 236, 236,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 128, 128, 128, 128,
	128, 160, 160, 225, 225, 223, 223, 223, 227, 227,
	179, 179, 272, 272, 272, 272, 272, 272, 272, 180,
	180, 180, 187, 181, 181, 182, 182, 182, 182, 182,
	182, 219, 220, 183, 183, 183, 221, 221, 231, 235,
	235, 234, 233, 233, 232, 232, 209, 209, 210, 210,
	208, 207, 168, 168, 167, 167, 166, 166, 336, 336,
	237, 237, 169, 169, 170, 162, 162, 248, 248, 248,
	248, 156, 156, 135, 135, 157, 157, 131, 131, 134,
	134, 132, 132, 132, 132, 150, 150, 151, 151, 129,
	129, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 274, 274, 274, 224, 123, 123, 123, 124,
	124, 125, 125, 279, 279, 279, 280, 280, 280, 280,
	278, 278, 278, 278, 278, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 6,
	1, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 1, 1,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 6,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 6, 4, 6, 4, 6, 3, 5, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 2, 1, 1, 1, 1, 1,
	3, 4, 5, 3, 2, 6, 3, 4, 3, 3,
	3, 3, 1, 3, 3, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 1, 1, 1, 1,
	1, 2, 3, 4, 4, 4, 4, 2, 4, 4,
	4, 4, 4, 4, 2, 3, 3, 2, 4, 5,
	4, 5, 2, 3, 3, 4, 2, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 3, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	4, 3, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 3, 2, 1, 1, 1, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 1, 4, 4, 4,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 2, 3, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -27, -28, -49,
	-35, -36, -37, -48, -43, -50, -44, -51, -52, -53,
	-45, -57, -56, -58, -61, -59, -54, -55, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 34, -23,
	-24, -25, 67, -29, -30, -31, -32, -33, -34, 89,
	-309, 93, -38, -39, -40, -42, -41, 104, 106, 124,
	130, 171, 213, 219, 239, 241, 243, 250, -100, -102,
	237, 238, -63, -64, -65, -66, -94, 261, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -21, -26, -60, 301,
	-9, -10, -13, -12, -11, -16, -18, -15, -17, -19,
	-14, 47, 69, -307, 97, -103, -101, 352, 310, 264,
	35, 273, 61, 100, 245, 23, 326, 333, 254, -104,
	-105, 318, 282, 355, -325, -157, 282, 82, -132, -123,
	345, 4, -286, -288, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 64, 66,
	67, 68, 71, 72, 80, 81, 83, 85, 89, 91,
	93, 96, 97, 99, 104, 105, 106, 112, 113, 118,
	120, 125, 130, 131, 132, 133, 140, 143, 145, 138,
	155, 156, 157, 159, 160, 161, 164, 163, 168, 171,
	172, 175, 177, 178, 179, 182, 180, 184, 185, 187,
	186, 192, 194, 195, 197, 200, 203, 206, 209, 210,
	211, 212, 213, 215, 217, 219, 221, 222, 223, 224,
	225, 227, 228, 230, 231, 232, 233, 234, 237, 235,
	236, 238, 239, 240, 241, 243, 245, 246, 248, 262,
	263, 274, 250, 251, 252, 253, 257, 255, 258, 259,
	261, 264, 266, 269, 272, 273, 275, 278, 276, 271,
	281, 283, 284, 285, 286, 287, 288, 289, 296, 297,
	301, 302, 303, 304, 307, 308, 309, 310, 312, 315,
	316, 317, 322, 327, 328, 329, 330, 331, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 51, 52, 53,
	56, 84, 86, 87, 103, 107, 108, 114, 115, 116,
	126, 128, 134, 135, 144, 146, 147, 148, 149, 150,
	152, 166, 181, 191, 193, 204, 208, 216, 218, 226,
	247, 256, 267, 268, 277, 279, 291, 292, 293, 298,
	299, 314, 318, 319, -131, -123, 82, -123, 219, 22,
	91, 143, 309, 308, 22, 215, 255, 284, 286, -123,
	-47, 352, -46, -4, -28, -37, -48, -43, -44, -70,
	-59, -35, -51, -92, -93, -329, 22, -330, -331, 69,
	97, 124, 254, 143, 91, 308, -278, 4, -286, -288,
	-287, -289, 58, 70, 123, 142, 136, 154, 158, 167,
	169, 183, 205, 207, 244, 265, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 65, 69, 73, 74, 76, 75, 77, 78, 79,
	88, 90, 92, 94, 95, 98, 100, 102, 109, 110,
	111, 119, 121, 122, 124, 127, 129, 137, 139, 141,
	151, 153, 162, 165, 170, 173, 174, 188, 189, 190,
	196, 198, 199, 201, 202, 214, 220, 229, 242, 254,
	260, 270, 280, 282, 290, 294, 295, 300, 305, 306,
	311, 313, 320, 321, 323, 324, 325, 326, 156, -123,
	-325, 156, -329, -127, 250, -123, -127, -89, 258, 4,
	22, 82, 182, 260, 291, 172, 55, 247, 258, -68,
	297, -67, 291, -277, -69, -158, 182, -123, -333, 282,
	156, 223, 297, 282, 311, 321, -188, 82, 306, -101,
	-103, -102, 321, 282, 139, 82, 311, -146, -147, 305,
	151, 102, 202, -100, -102, -307, -282, -275, -238, 9,
	300, 109, 198, -281, 8, 344, -274, -280, 5, 7,
	343, 4, -286, -288, -287, -89, 258, 34, 55, 22,
	60, 83, 125, 139, 140, 160, 65, 66, 222, 172,
	157, 296, 161, 259, 283, 297, 69, 312, 287, 105,
	-334, 297, 297, -334, -334, -126, 297, 294, 282, 139,
	82, 321, -310, 227, -306, -123, -310, -143, -144, 22,
	94, 356, -170, 352, -244, 350, -246, -131, -102, -245,
	352, 199, -3, 294, 356, -157, -150, -123, -208, -207,
	354, 122, 352, -167, -168, -207, -208, -123, 22, 122,
	153, 153, -247, -246, -131, -184, 352, -252, -251, -280,
	318, 198, 356, -214, -216, 343, 344, 338, 188, 332,
	-228, -218, -231, 103, 247, 352, -131, -217, 357, 9,
	-304, -102, 29, -229, -230, 49, -123, 7, 8, 5,
	6, -129, -255, -224, -264, 300, 109, 190, -302, -303,
	4, -286, -279, -256, -266, -260, -263, 152, 58, 74,
	75, 78, 76, 79, 260, 311, 50, 28, 107, 108,
	208, 216, 279, 298, 299, 134, 191, 135, 56, 126,
	166, 96, 37, 39, 41, 42, 51, 52, 84, 86,
	87, 114, 115, 116, 144, 146, 147, 148, 149, 150,
	193, 226, 267, 277, 292, 293, 319, -287, -267, -268,
	-261, -262, -269, -226, 352, 122, -214, 198, -123, -89,
	331, 2, 262, 352, -68, 53, 297, -201, -202, -120,
	-121, -122, 155, 221, 225, 331, 294, 337, 122, -282,
	-139, 88, -161, 354, -173, -246, -214, -214, -214, -158,
	134, -123, -158, 139, -123, 134, -146, -147, -159, 134,
	-158, -159, 134, -135, 134, -134, -131, -123, 134, -150,
	134, -172, -191, -192, 170, 111, 196, -175, 22, 94,
	-175, -175, 44, 353, 353, 8, 7, 7, -89, -284,
	-281, 9, 262, 222, 259, 55, 122, -326, 198, 122,
	122, 122, 122, 122, 222, 259, 119, 296, 122, 155,
	221, 274, 282, 321, 122, 122, -200, -201, -200, 294,
	-127, -246, 134, -131, -134, 134, -123, -246, 134, 356,
	-310, -151, 352, -162, -248, -214, 345, -162, -170, -169,
	-237, -214, 88, 70, -178, 158, 183, 123, 167, 244,
	142, 7, -47, -211, 357, 352, 345, -241, 333, -102,
	-245, -244, -131, 352, -284, -132, 356, -278, 345, 275,
	353, -156, -131, -168, -247, -133, -131, -133, 261, -123,
	30, -160, -214, 353, 356, -325, -331, 10, 11, 57,
	33, 343, 344, 345, 346, 117, 347, 348, 341, 342,
	340, 335, 336, 337, 63, 176, 249, 13, 14, 15,
	26, 201, 169, 332, 136, 265, 338, 16, 17, 18,
	154, 36, 137, -128, -136, -214, -214, -214, -214, -214,
	207, -166, -209, 350, -102, 352, -102, -214, -160, 7,
	-102, -223, 350, -232, -214, -167, 352, 5, 352, 5,
	-311, 327, 119, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 218, -273, 322, -273, -273, -257, 352, -257, -258,
	352, -257, 328, 333, 352, 30, -225, -253, -254, -256,
	-265, -259, -263, -264, 40, 46, 45, 289, 181, 256,
	268, 314, 38, 197, 145, 144, 146, 147, 148, 149,
	150, 267, 37, 226, 115, 116, 114, 96, 87, 86,
	193, 42, 41, -267, -268, -261, -262, 84, 292, 293,
	152, 39, 52, 51, 319, 277, -285, -284, -325, -67,
	-277, -160, 30, -201, 356, 168, -138, 175, 187, 131,
	199, 329, -283, 5, 4, -224, -238, 88, 172, -264,
	-276, 88, -282, -276, 88, 72, 354, -278, -112, 356,
	48, 240, 352, -145, 188, -119, -308, 326, -145, 352,
	-124, 134, -123, -308, 188, -172, -112, 356, 103, -112,
	103, -112, 356, 103, 357, 103, 103, -192, -191, -193,
	-214, 22, -196, 113, 184, -214, -216, -101, -101, -101,
	-148, -242, -214, 220, 139, -158, 22, 263, -277, -328,
	119, -325, -277, -277, -277, -277, -277, 258, -47, 119,
	-123, 168, -277, -277, 282, 139, 282, -127, -110, 235,
	-109, 21, 23, 97, 316, 103, 271, 288, 251, 271,
	288, 251, 235, 103, 235, 235, 103, -306, 30, -150,
	-153, 356, 122, 30, 4, -153, 356, 353, 158, 158,
	-244, -178, 158, -176, 205, -176, -176, -323, 352, 351,
	-241, -278, 350, 358, -160, -240, -239, 30, -123, 203,
	353, -131, -250, 334, -123, 122, 353, 356, -206, 324,
	-197, -59, 352, 88, 30, -197, -163, -164, -249, -165,
	-131, 352, -123, 353, 356, -47, -251, 294, -271, -253,
	-270, 231, 232, 230, 234, 233, -253, -278, 291, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, 169, 136, 265, 36, 137, -214, 294, -214, -214,
	-214, -214, 180, 188, 190, 300, 109, 307, 94, 194,
	-336, 280, 32, -221, -102, 352, -236, 27, 270, 22,
	-228, 247, 352, -209, -214, -210, -160, 353, 353, 356,
	-160, -227, 351, -223, -235, -234, 323, 353, -160, 320,
	22, 94, 345, 7, -185, 330, 179, 85, 132, 178,
	-186, 253, -312, 112, 127, 352, 353, 353, 353, -214,
	-214, -179, -272, -160, 4, 330, 179, 85, 132, 178,
	253, -179, -180, -214, -160, -181, -215, -216, 343, 344,
	338, 352, 247, -182, -214, -160, -214, 43, 165, 295,
	-183, -214, 122, -160, -214, -214, -214, -160, -160, -160,
	352, 7, 7, 291, 291, 7, -46, 353, 356, -152,
	29, 350, -185, 352, -250, 356, 122, 353, 297, -202,
	-137, 225, 269, 236, 257, 356, -278, -246, -140, -150,
	-141, -123, -205, -204, -292, -293, -290, 139, 306, 110,
	65, -291, 54, 220, 121, 30, 103, 212, 30, 198,
	188, -115, 285, 103, -158, -159, -159, -134, -135, -278,
	-123, -150, -194, -274, 352, 344, -195, 247, 248, 356,
	-108, 31, 92, 159, -131, -327, -123, 258, -47, -131,
	-134, -131, 356, 294, -189, 65, 59, -204, 134, 59,
	-290, -123, 306, -189, 65, -189, 65, 65, -246, 33,
	-59, 122, 33, -59, 122, 294, -134, 294, 294, -246,
	352, 353, -206, -248, -155, -244, -278, -206, -237, -244,
	-244, -177, 313, 198, 158, -244, -239, 353, -324, 7,
	-241, -240, 7, -213, -212, 120, 186, 353, -123, 352,
	-241, 353, -95, 133, 194, 275, 122, -131, -174, 242,
	-214, -174, -199, 198, -156, 318, -123, -174, -154, 356,
	122, 337, -156, -214, -327, 331, -214, -214, 294, -336,
	280, -221, -214, 180, 190, 300, 109, 307, 94, 194,
	122, 352, -215, -215, -160, -218, 352, -160, 351, 360,
	353, -214, 351, 351, 356, -233, -234, 98, -214, -147,
	356, -146, -214, -160, -160, 353, 353, 294, 294, 294,
	294, 352, -317, 206, 352, 352, -214, 30, 356, 353,
	122, 353, 353, -187, 214, 353, 10, 11, 343, 344,
	345, 346, 117, 347, 348, 341, 342, 340, 335, 336,
	337, 63, 176, 249, 13, 14, 15, 154, 137, -215,
	-215, -215, -160, 352, 353, -219, -220, 122, 119, 30,
	-183, -183, -183, 353, 122, -160, 356, 356, 356, 353,
	353, 353, 7, 353, 356, 353, 331, 331, 353, -253,
	350, 351, 7, 7, -98, 326, -284, -327, -120, 304,
	62, 225, -282, 353, 353, 356, -253, -124, 139, 352,
	-124, -123, 352, 159, 159, -59, -158, 5, -59, -131,
	103, -116, 99, -335, 337, -123, -112, -112, -112, -195,
	-214, -242, -131, 357, 356, -250, -109, -131, -123, -123,
	188, -204, 134, -114, 188, -123, -123, 134, -123, 134,
	-123, -123, -110, 235, -59, 352, -59, 352, -123, 235,
	-123, -131, 235, -46, -171, 127, -250, 356, -171, -177,
	352, -214, -244, 351, 353, 356, -240, 351, 356, 359,
	337, -241, 352, -150, -239, -98, 122, 281, 275, -162,
	189, -174, 64, 353, -206, -164, -155, -237, 353, -214,
	-214, -215, -215, 122, 352, -214, -225, 26, 26, 353,
	-160, 353, 356, -210, -214, 353, -223, 100, -214, 290,
	353, 320, -147, -147, -147, 5, 179, 132, 178, -186,
	178, -186, -186, 7, -318, -123, 352, 324, -146, 353,
	-271, -253, -214, -219, -214, -271, -253, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, 94, 188, 194, -215,
	356, -160, 353, -220, -219, -214, -214, -253, 353, 353,
	353, -160, -214, -214, -214, 353, 7, 7, 351, 353,
	200, -142, 138, -205, -294, 352, -124, -149, -243, -123,
	-305, 352, -302, -303, -129, 352, -291, -214, 352, 352,
	352, -145, 352, -123, -117, 164, -335, -281, -308, 199,
	353, -108, -278, -123, 294, 294, 103, 188, 315, -107,
	97, 261, -190, 103, -112, 103, -112, 294, -189, 65,
	-160, -160, 294, 294, 353, -222, 129, 44, -244, -222,
	-150, -211, 7, -212, -278, 350, -240, -150, 353, -285,
	291, -198, 352, 198, -59, -174, 337, 26, 26, -214,
	-225, 353, -214, -214, 353, -214, 351, -214, 5, -214,
	353, 353, 353, 353, -319, -123, -214, 353, 353, 353,
	-220, 122, 94, 194, 352, -214, 353, 353, 356, 353,
	353, 353, 351, 352, 137, -295, 65, -296, 57, 110,
	69, 188, 190, 306, 220, 54, 88, 229, -149, 352,
	353, 356, -130, -167, 57, -130, -214, 352, -150, 353,
	-149, -150, -140, 30, -149, 198, -118, 163, -335, -281,
	-115, -108, -123, -123, -204, 103, 188, 88, 188, 88,
	81, 302, -123, -123, -131, -123, -123, 353, 353, -123,
	-131, -314, 325, -214, -160, -314, 353, -241, 7, 353,
	-217, -129, -123, 95, -150, 65, -170, -102, 352, -214,
	-214, 353, 353, -147, -313, 211, 353, -215, 122, 352,
	-225, 353, -214, -97, -96, 5, 209, -123, -278, -123,
	110, 134, 190, 159, 352, -215, -131, 353, -149, -203,
	-332, 68, 278, -243, -108, -278, -108, 353, -160, 353,
	353, 353, 353, -59, 353, -131, -335, -281, -116, -204,
	190, 190, -214, -253, -112, -112, 294, 294, 294, 294,
	-315, -316, -123, -240, 351, 352, 308, 189, 353, -123,
	353, -147, 44, -215, -225, 353, 353, 356, 353, -99,
	337, -131, -296, -124, 188, -214, -125, 352, -203, 353,
	-142, 352, -130, -147, 229, -142, -203, 352, -281, -117,
	-111, 57, -123, -123, 352, 352, 356, 30, -160, 261,
	-206, -320, 224, 248, -160, 353, -96, 5, 352, 103,
	353, -299, 177, -123, -142, -203, -150, -108, 353, -131,
	-142, -149, -118, -106, 313, -278, -160, -160, -316, -318,
	-147, -163, 353, -321, -322, 36, 303, 72, -214, -321,
	-150, 110, -297, -300, -298, 198, 123, 210, 266, 353,
	-142, 353, -145, 353, -214, 353, 353, 353, -206, -322,
	217, 118, 247, 217, 118, 353, -123, -298, 198, -300,
	198, 308, 91, -299, -203, 26, -113, 48, 240, -301,
	185, 240, 48, 261, -301, -297, -142, -322, 20, 190,
	88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 35, 36, 37, 38, 0, 107,
	108, 109, 0, 113, 114, 115, 116, 117, 118, 0,
	0, 0, 125, 126, 127, 128, 129, 0, 510, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 481, -2,
	0, 0, 195, 196, 197, 198, 199, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 416, 417, 418, 512,
	39, 40, 41, 42, 43, 46, 47, 48, 49, 44,
	45, 0, 387, 509, 0, -2, 520, 0, 0, 0,
	425, 0, 425, 425, 429, 0, 0, 0, 518, 495,
	496, 0, 0, -2, 0, 176, 0, 1057, 985, 991,
	992, 1016, 1017, 1018, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 0, 987, 1057, 170, 1117, 172,
	0, 0, 0, 0, 120, 121, 122, 123, 124, 169,
	146, 0, 153, 154, 155, 156, 157, 158, 159, 160,
	148, 149, 150, 151, 152, 0, 179, 180, 181, 183,
	184, 185, 186, 187, 188, 189, 306, 1030, 1031, 1032,
	1033, 1034, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 0, 166,
	0, 0, 0, 415, 1144, 431, 413, 192, 0, 266,
	267, 268, 269, 270, 0, -2, 1045, 1232, 1150, 204,
	1171, 212, 1238, 0, 215, 220, -2, 142, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 386, -2,
	491, 492, 0, 0, 0, 0, 0, -2, 0, 515,
	515, 515, 0, 0, 492, 0, 194, 223, 224, 225,
	234, 235, 236, 237, 376, 0, 378, 244, 245, 1012,
	0, 1026, 1027, 1028, 1029, 264, 0, 0, 0, 267,
	0, 277, 308, 0, 0, 0, 0, 0, 284, 0,
	287, 0, 0, 292, 296, 0, 0, 302, 0, 0,
	433, 424, 433, 421, 422, 423, 426, 0, 0, 0,
	0, 0, 501, 1123, 504, 998, 502, 0, 0, 517,
	516, 0, 548, 0, 500, 510, 562, 599, 576, 567,
	0, 0, 2, 0, 0, 177, 178, 995, 993, 994,
	0, 0, 0, 988, 964, 962, 963, 171, 173, 0,
	0, 0, 0, 605, 599, 167, 0, 0, 161, 163,
	1244, 0, 0, 311, 707, 0, 0, 0, 0, 0,
	0, 799, 801, 1206, 1232, 0, 803, 804, 0, 806,
	808, 809, 0, 812, 813, 955, 987, 1001, 1002, 1003,
	1004, 0, 0, 1007, 0, 1009, 1010, 1011, 855, 822,
	-2, -2, 999, 635, 636, 637, 638, -2, 1246, 826,
	828, 830, 832, 833, 834, 835, 0, 1190, 1207, 1208,
	1228, 1229, 1237, 1241, 1242, 1214, 1225, 1215, 1202, 1212,
	1223, 1063, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1025, 669, 670,
	675, 676, 678, 0, 0, 0, 414, 0, 430, 193,
	271, 200, 0, 0, 203, 1201, 1171, 206, 434, 436,
	437, 438, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 143, 0, 81, 603, 110, 111, 112, 359,
	1214, -2, 359, 1020, 508, 1214, -2, 0, 81, 1214,
	140, 81, 1214, 81, 1214, 983, 990, 136, 1214, 138,
	1214, 487, 529, 530, 0, 0, 0, 0, 513, 514,
	0, 0, 0, 483, 484, 377, 1014, 1013, 265, 272,
	91, 92, 0, 285, 293, 0, 0, 310, 0, 0,
	0, 0, 0, 0, 286, 294, 510, 0, 0, 0,
	298, 299, 0, 0, 0, 0, 419, 432, 420, 0,
	428, 0, 1214, 599, 0, 1214, 0, 0, 1214, 0,
	503, 0, 0, 551, 975, 979, 980, 551, 549, 0,
	972, 970, 971, 0, 0, 0, 0, 596, 596, 596,
	594, 570, 0, 576, 0, 0, 600, 588, 0, -2,
	567, 0, 601, 0, 590, 986, 0, 960, 961, 104,
	0, 0, 981, 965, 609, 0, 458, 0, 0, 606,
	0, 0, 911, 510, 0, 0, 182, 0, 0, 0,
	0, 890, 891, 892, 893, 894, 895, 898, 899, 896,
	897, 900, 901, 902, 0, 0, 0, 903, 904, 905,
	0, 0, 907, 0, 909, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 906, 712, 713, 714, 736, 737,
	0, 800, 966, 959, 802, 0, -2, 911, 0, 805,
	810, 811, 0, 0, 954, -2, 0, 1006, 0, 704,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 672, 683, 680, 679, 656, 0, 655, 653,
	0, 657, 0, 0, 0, 510, 0, 913, 617, 618,
	619, 620, 621, 704, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 666, 0, 641, 641,
	641, 658, 659, 667, 668, 673, 674, 685, 686, 688,
	690, 684, 684, 684, 681, 682, 590, 93, 0, 201,
	0, 0, 0, 207, 0, 0, 439, 231, 232, 233,
	441, 442, 213, 238, 239, 240, 241, 242, 243, 0,
	208, 210, 221, 209, 211, 214, 0, 144, 379, 0,
	79, 80, 317, 0, 0, 380, 0, 507, 0, 0,
	0, 1214, 1019, 446, 0, 490, 130, 0, 0, 132,
	0, 134, 0, 0, 0, 0, 0, 527, 528, 531,
	535, 536, 539, 542, 543, 533, 707, 497, 498, 499,
	521, 522, 397, 0, 0, 273, 274, 275, 276, 278,
	0, 307, 279, 280, 281, 282, 283, 288, 290, 510,
	295, 297, 300, 301, 0, 0, 0, 427, 50, 410,
	60, 0, 410, 410, 0, 0, 0, 0, 56, 0,
	0, 58, 0, 0, 0, 0, 0, 505, 0, 0,
	609, 0, 0, 0, 978, 609, 0, 974, 0, 0,
	0, 0, 0, 591, 595, 592, 593, 0, 0, 576,
	588, 559, 0, 0, 0, 566, 587, 0, 586, 575,
	-2, 0, 96, 0, 996, 0, 0, 0, 470, 0,
	470, 460, 0, 0, 0, 470, 473, 474, 476, 477,
	0, 0, 607, 168, 0, 147, 162, 0, 708, 613,
	614, 660, 661, 662, 663, 664, 709, 710, 0, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, -2,
	-2, -2, 728, 729, 730, -2, -2, -2, 734, 735,
	-2, 908, 910, 0, 969, 0, -2, 0, -2, -2,
	-2, -2, 748, 0, 750, 753, 755, 757, 0, 0,
	0, 0, 968, 767, 946, 0, 0, 887, 888, 889,
	752, 0, 0, 967, 958, 0, 0, -2, 807, 0,
	0, 0, 917, 918, 953, 949, 0, 814, 520, 0,
	0, 0, 0, 0, 1015, 691, 692, 693, 694, 695,
	696, 705, 865, 0, 0, 0, 827, 829, 831, 0,
	0, 0, 0, 921, -2, -2, -2, -2, -2, -2,
	-2, 0, 0, 911, 931, 0, 0, 770, 0, 0,
	0, 0, 1232, 0, 911, 939, 0, 0, 0, 0,
	0, 911, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 0, 610,
	612, 0, 622, 0, 103, 0, 0, 202, 0, 435,
	440, 0, 228, 0, 230, 0, 145, 604, 0, 0,
	316, 995, 318, 320, 321, 322, 323, 1020, 0, 1020,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 454, 0, 141, 81, 81, 984, 81, 989,
	137, 139, 0, 537, 0, 0, 534, 540, 541, 0,
	524, 395, 396, 0, 0, 309, 190, 289, 291, 303,
	304, 590, 0, 0, 0, 0, 409, 62, 1214, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	510, 997, 545, 976, 590, 552, 977, 545, 973, 578,
	0, 580, 0, 0, 0, 582, 0, 571, 0, 573,
	588, 564, 0, 0, 557, 0, 556, 576, 584, 0,
	0, 602, 103, 0, 0, 105, 0, 982, 119, 0,
	608, 455, 470, 0, 0, 462, 459, 457, 609, 0,
	0, 0, 0, 912, 174, 0, -2, -2, 0, 0,
	0, 768, -2, 749, 751, 754, 756, 758, 0, 0,
	0, 0, 0, 0, 0, 769, 0, 0, 956, 959,
	-2, 912, 915, 916, 0, 0, 950, 0, 0, 0,
	0, 519, 520, 520, 520, 820, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 838,
	0, 839, 840, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 773,
	774, 775, 0, 0, 842, 937, 938, 0, 0, 0,
	0, 0, 0, 847, 0, 944, 0, 0, 0, 851,
	852, 853, 0, 639, 0, 665, 687, 689, 677, 914,
	0, 615, 0, 0, 89, 0, 94, 175, 205, 226,
	227, 229, 222, 325, 358, 0, 331, 0, 1020, 0,
	0, 0, 0, 0, 0, 314, 359, 381, 383, 0,
	0, 450, 454, 0, 453, 508, 131, 133, 135, 0,
	0, 523, 397, 0, 0, 305, 61, 399, 0, 0,
	0, 64, 1214, 72, 0, 412, 73, 1214, 81, 1214,
	81, 74, 51, 410, 52, 0, 53, 0, 407, 0,
	398, 405, 0, 0, 547, 0, 550, 0, 547, 579,
	0, 598, 581, 562, 572, 0, 569, 560, 0, 561,
	0, 588, 0, 0, 568, 88, 0, 0, 106, 468,
	469, 456, 467, 0, 470, 475, 472, 478, 0, 711,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 947,
	0, 882, 0, 0, 958, -2, 919, 948, 952, 0,
	815, 0, 0, 0, 0, 1008, 697, 698, 699, 700,
	701, 702, 703, 0, 863, 864, 868, 0, 0, 825,
	0, 0, 920, 930, 932, 771, 772, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, -2, -2, -2,
	789, 790, 791, -2, -2, -2, 0, 0, 0, 933,
	0, 0, 885, 935, 936, 941, 942, 0, 844, 845,
	846, 943, 0, 0, 0, 671, 0, 0, 616, 623,
	0, 312, 0, 319, 329, 0, 0, 0, 388, 394,
	394, 0, 823, 824, 0, 0, 348, 0, 0, 0,
	317, 0, 0, 0, 452, 454, 0, 445, 446, 532,
	538, 525, 397, 191, 0, 0, 0, 0, 82, 66,
	0, 0, 0, 0, 70, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 506, 859, 0, 0, 553, 859,
	0, 576, 574, 558, 554, 0, 565, 0, 585, 95,
	0, 0, 0, 0, 461, 471, 0, 0, 0, -2,
	0, 761, -2, -2, 881, 912, 957, 951, 1005, 520,
	816, 818, 819, 706, 870, 867, 0, 854, 836, 837,
	929, 0, 0, 0, 0, 912, 884, 843, 0, 849,
	850, 640, 611, 0, 0, 330, 0, 333, 0, 0,
	0, 0, 339, 340, 0, 0, 0, 0, 0, 0,
	357, 0, 397, 1000, 0, 397, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 443, 454, 0, 447,
	448, 526, 401, 403, 63, 0, 0, 78, 0, 0,
	411, 0, 81, 81, 400, 0, 0, 0, 0, 408,
	406, 493, 0, 546, 544, 494, 597, 588, 0, 583,
	589, 0, 0, 0, 0, 0, 479, 480, 0, -2,
	-2, 762, 883, 0, 520, 0, 856, -2, 0, 0,
	0, 886, 0, 0, 100, 98, 0, 0, 334, 335,
	1020, 0, 338, 341, 0, 343, 1022, 357, 0, 325,
	0, 354, 355, 389, 390, 393, 391, 394, 520, 347,
	352, 0, 325, 315, 357, 0, 0, 449, 450, 65,
	67, 68, 77, 85, 69, 75, 0, 0, 0, 0,
	858, 860, 0, 563, 555, 0, 0, 464, 609, 466,
	817, 873, 0, -2, 0, 797, 848, 0, 102, 99,
	0, 0, 332, 336, 0, 0, 363, 0, 325, 357,
	351, 0, 397, 0, 0, 313, 325, 0, 451, 452,
	87, 0, 402, 404, 0, 0, 0, 0, 520, 0,
	465, 0, 0, 0, 869, 798, 101, 97, 0, 0,
	342, 368, 0, 0, 345, 325, 0, 392, 815, 359,
	384, 0, 444, 71, 0, 84, 0, 0, 861, 862,
	0, 609, 866, 871, 874, -2, 1174, 1054, 0, 872,
	0, 0, 344, 364, 365, 0, 360, 361, 362, 1021,
	346, 356, 363, 357, 86, 57, 59, 0, 463, 0,
	876, 877, 878, 879, 880, 328, 337, 366, 0, 367,
	0, 0, 0, 368, 325, 0, 324, 326, 327, 369,
	0, 372, 373, 0, 370, 353, 385, 875, 371, 374,
	375,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 341, 3, 347, 342, 3,
	352, 353, 345, 343, 356, 344, 354, 346, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 360, 355,
	335, 337, 336, 3, 357, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 350, 3, 351, 348, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 358, 340, 359, 338,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 339, 57678, 349, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:987
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1066
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = nil
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = DropCascade
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = DropRestrict
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = DropDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1138
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1139
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1142
		{
			return unimplemented(sqllex, "alter using")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1143
		{
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Load{}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.str = ""
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelTransaction{ID: sqlDollar[3].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1288
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{ /* SKIP DOC */
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1612
		{ /* SKIP DOC */
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{ /* SKIP DOC */
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			return unimplemented(sqllex, "set local")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1679
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			return unimplemented(sqllex, "set from current")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1701
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = Low
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = Normal
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = High
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.str = "client_encoding"
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2009
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2013
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2017
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = DropDefault
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			return unimplemented(sqllex, "match full")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			return unimplemented(sqllex, "match partial")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			return unimplemented(sqllex, "match simple")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2354
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			return unimplemented(sqllex, "no action")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2366
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2368
		{
			return unimplemented(sqllex, "action set null")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			return unimplemented(sqllex, "action set default")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = true
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = false
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2477
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2480
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = Ascending
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = Descending
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2521
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2523
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = true
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = false
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.str = ""
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.str = ""
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = ReadOnly
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = ReadWrite
		}
	case 443:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.str = ""
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.str = ""
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2837
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2872
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3111
		{
			return unimplemented(sqllex, "cte")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3123
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = true
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = false
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = false
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = true
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &From{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3361
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3406
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3423
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = nil
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.str = astFullJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.str = astLeftJoin
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.str = astRightJoin
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.str = astInnerJoin
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3606
		{
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3692
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3705
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3803
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = nil
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3964
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3996
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4036
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = year
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = month
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = day
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = hour
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = minute
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = month
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = hour
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = minute
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = minute
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = nil
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = second
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4131
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4166
		{
			return unimplemented(sqllex, "at tz")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4400
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "variadic")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "variadic")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4650
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			return unimplemented(sqllex, "func_application")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4671
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			return unimplemented(sqllex, "current role")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			return unimplemented(sqllex, "current user")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			return unimplemented(sqllex, "session user")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			return unimplemented(sqllex, "user")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4728
		{
			return unimplemented(sqllex, "treat")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4772
		{
			return unimplemented(sqllex, "within group")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4773
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = Window(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.str = ""
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			return unimplemented(sqllex, "frame range")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4871
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4872
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4876
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4884
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4885
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4886
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = Any
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Some
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = All
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = Plus
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = Minus
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = Mult
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = Div
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = FloorDiv
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = Mod
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = Bitand
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = Bitor
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = Pow
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = Bitxor
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = LT
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = GT
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = EQ
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = LE
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = GE
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = NE
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = Like
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = NotLike
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = ILike
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = NotILike
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5251
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5369
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5413
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5449
		{
			return unimplemented(sqllex, "func const")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5458
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = DNull
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.str = ""
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
