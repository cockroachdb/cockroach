// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:499
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CACHE = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const HAS_SOME = 57486
const HAS_ALL = 57487
const IMPORT = 57488
const INCREMENT = 57489
const INCREMENTAL = 57490
const IF = 57491
const IFNULL = 57492
const ILIKE = 57493
const IN = 57494
const INET = 57495
const INTERLEAVE = 57496
const INDEX = 57497
const INDEXES = 57498
const INITIALLY = 57499
const INNER = 57500
const INSERT = 57501
const INT = 57502
const INT2VECTOR = 57503
const INT2 = 57504
const INT4 = 57505
const INT8 = 57506
const INT64 = 57507
const INTEGER = 57508
const INTERSECT = 57509
const INTERVAL = 57510
const INTO = 57511
const IS = 57512
const ISOLATION = 57513
const JOB = 57514
const JOBS = 57515
const JOIN = 57516
const JSON = 57517
const JSONB = 57518
const KEY = 57519
const KEYS = 57520
const KV = 57521
const LATERAL = 57522
const LC_CTYPE = 57523
const LC_COLLATE = 57524
const LEADING = 57525
const LEAST = 57526
const LEFT = 57527
const LESS = 57528
const LEVEL = 57529
const LIKE = 57530
const LIMIT = 57531
const LIST = 57532
const LOCAL = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const LOW = 57536
const LSHIFT = 57537
const MATCH = 57538
const MINVALUE = 57539
const MAXVALUE = 57540
const MINUTE = 57541
const MONTH = 57542
const NAN = 57543
const NAME = 57544
const NAMES = 57545
const NATURAL = 57546
const NEXT = 57547
const NO = 57548
const NO_INDEX_JOIN = 57549
const NORMAL = 57550
const NOT = 57551
const NOTHING = 57552
const NULL = 57553
const NULLIF = 57554
const NULLS = 57555
const NUMERIC = 57556
const OF = 57557
const OFF = 57558
const OFFSET = 57559
const OID = 57560
const ON = 57561
const ONLY = 57562
const OPTIONS = 57563
const OR = 57564
const ORDER = 57565
const ORDINALITY = 57566
const OUT = 57567
const OUTER = 57568
const OVER = 57569
const OVERLAPS = 57570
const OVERLAY = 57571
const PARENT = 57572
const PARTIAL = 57573
const PARTITION = 57574
const PASSWORD = 57575
const PAUSE = 57576
const PLACING = 57577
const PLANS = 57578
const POSITION = 57579
const PRECEDING = 57580
const PRECISION = 57581
const PREPARE = 57582
const PRIMARY = 57583
const PRIORITY = 57584
const QUERIES = 57585
const QUERY = 57586
const RANGE = 57587
const READ = 57588
const REAL = 57589
const RECURSIVE = 57590
const REF = 57591
const REFERENCES = 57592
const REGCLASS = 57593
const REGPROC = 57594
const REGPROCEDURE = 57595
const REGNAMESPACE = 57596
const REGTYPE = 57597
const REMOVE_PATH = 57598
const RENAME = 57599
const REPEATABLE = 57600
const RELEASE = 57601
const RESET = 57602
const RESTORE = 57603
const RESTRICT = 57604
const RESUME = 57605
const RETURNING = 57606
const REVOKE = 57607
const RIGHT = 57608
const ROLLBACK = 57609
const ROLLUP = 57610
const ROW = 57611
const ROWS = 57612
const RSHIFT = 57613
const SAVEPOINT = 57614
const SCATTER = 57615
const SCRUB = 57616
const SEARCH = 57617
const SECOND = 57618
const SELECT = 57619
const SEQUENCE = 57620
const SEQUENCES = 57621
const SERIAL = 57622
const SERIALIZABLE = 57623
const SESSION = 57624
const SESSIONS = 57625
const SESSION_USER = 57626
const SET = 57627
const SETTING = 57628
const SETTINGS = 57629
const SHOW = 57630
const SIMILAR = 57631
const SIMPLE = 57632
const SMALLINT = 57633
const SMALLSERIAL = 57634
const SNAPSHOT = 57635
const SOME = 57636
const SPLIT = 57637
const SQL = 57638
const START = 57639
const STATUS = 57640
const STDIN = 57641
const STRICT = 57642
const STRING = 57643
const STORE = 57644
const STORING = 57645
const SUBSTRING = 57646
const SYMMETRIC = 57647
const SYSTEM = 57648
const TABLE = 57649
const TABLES = 57650
const TEMP = 57651
const TEMPLATE = 57652
const TEMPORARY = 57653
const TESTING_RANGES = 57654
const TESTING_RELOCATE = 57655
const TEXT = 57656
const THAN = 57657
const THEN = 57658
const TIME = 57659
const TIMESTAMP = 57660
const TIMESTAMPTZ = 57661
const TO = 57662
const TRAILING = 57663
const TRACE = 57664
const TRANSACTION = 57665
const TREAT = 57666
const TRIM = 57667
const TRUE = 57668
const TRUNCATE = 57669
const TYPE = 57670
const UNBOUNDED = 57671
const UNCOMMITTED = 57672
const UNION = 57673
const UNIQUE = 57674
const UNKNOWN = 57675
const UPDATE = 57676
const UPSERT = 57677
const USE = 57678
const USER = 57679
const USERS = 57680
const USING = 57681
const UUID = 57682
const VALID = 57683
const VALIDATE = 57684
const VALUE = 57685
const VALUES = 57686
const VARCHAR = 57687
const VARIADIC = 57688
const VIEW = 57689
const VARYING = 57690
const WHEN = 57691
const WHERE = 57692
const WINDOW = 57693
const WITH = 57694
const WITHIN = 57695
const WITHOUT = 57696
const WRITE = 57697
const YEAR = 57698
const ZONE = 57699
const NOT_LA = 57700
const WITH_LA = 57701
const AS_LA = 57702
const CONTAINED_BY = 57703
const HAS_SOME_KEY = 57704
const HAS_ALL_KEYS = 57705
const POSTFIXOP = 57706
const UMINUS = 57707
const HELPTOKEN = 57708

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6994

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 732,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	155, 582,
	-2, 0,
	-1, 65,
	97, 732,
	159, 732,
	334, 732,
	335, 732,
	-2, 0,
	-1, 75,
	1, 694,
	219, 694,
	264, 694,
	381, 694,
	383, 694,
	385, 694,
	386, 694,
	-2, 707,
	-1, 108,
	4, 734,
	20, 734,
	21, 734,
	23, 734,
	28, 734,
	33, 734,
	34, 734,
	35, 734,
	36, 734,
	37, 734,
	38, 734,
	39, 734,
	40, 734,
	41, 734,
	42, 734,
	44, 734,
	45, 734,
	46, 734,
	47, 734,
	48, 734,
	49, 734,
	52, 734,
	53, 734,
	54, 734,
	56, 734,
	57, 734,
	61, 734,
	62, 734,
	63, 734,
	65, 734,
	66, 734,
	67, 734,
	68, 734,
	70, 734,
	72, 734,
	73, 734,
	76, 734,
	77, 734,
	78, 734,
	86, 734,
	87, 734,
	88, 734,
	89, 734,
	90, 734,
	91, 734,
	92, 734,
	93, 734,
	95, 734,
	97, 734,
	99, 734,
	102, 734,
	103, 734,
	105, 734,
	109, 734,
	110, 734,
	111, 734,
	112, 734,
	113, 734,
	114, 734,
	115, 734,
	123, 734,
	124, 734,
	125, 734,
	126, 734,
	127, 734,
	129, 734,
	131, 734,
	136, 734,
	137, 734,
	139, 734,
	142, 734,
	143, 734,
	146, 734,
	147, 734,
	148, 734,
	149, 734,
	150, 734,
	153, 734,
	154, 734,
	156, 734,
	159, 734,
	160, 734,
	161, 734,
	162, 734,
	163, 734,
	164, 734,
	165, 734,
	166, 734,
	168, 734,
	171, 734,
	172, 734,
	173, 734,
	175, 734,
	176, 734,
	177, 734,
	178, 734,
	179, 734,
	181, 734,
	182, 734,
	184, 734,
	186, 734,
	187, 734,
	190, 734,
	191, 734,
	194, 734,
	196, 734,
	197, 734,
	199, 734,
	200, 734,
	201, 734,
	202, 734,
	203, 734,
	205, 734,
	206, 734,
	207, 734,
	208, 734,
	212, 734,
	213, 734,
	214, 734,
	215, 734,
	216, 734,
	218, 734,
	220, 734,
	221, 734,
	224, 734,
	225, 734,
	227, 734,
	229, 734,
	230, 734,
	231, 734,
	232, 734,
	233, 734,
	234, 734,
	236, 734,
	237, 734,
	238, 734,
	239, 734,
	240, 734,
	242, 734,
	243, 734,
	244, 734,
	245, 734,
	246, 734,
	247, 734,
	248, 734,
	249, 734,
	251, 734,
	252, 734,
	253, 734,
	254, 734,
	255, 734,
	257, 734,
	258, 734,
	259, 734,
	260, 734,
	261, 734,
	262, 734,
	263, 734,
	265, 734,
	267, 734,
	268, 734,
	269, 734,
	270, 734,
	272, 734,
	273, 734,
	274, 734,
	275, 734,
	276, 734,
	278, 734,
	279, 734,
	280, 734,
	281, 734,
	282, 734,
	283, 734,
	285, 734,
	286, 734,
	287, 734,
	288, 734,
	290, 734,
	291, 734,
	292, 734,
	293, 734,
	295, 734,
	296, 734,
	297, 734,
	298, 734,
	299, 734,
	300, 734,
	301, 734,
	302, 734,
	303, 734,
	304, 734,
	306, 734,
	308, 734,
	309, 734,
	310, 734,
	311, 734,
	312, 734,
	313, 734,
	314, 734,
	315, 734,
	317, 734,
	318, 734,
	319, 734,
	322, 734,
	323, 734,
	324, 734,
	325, 734,
	327, 734,
	328, 734,
	329, 734,
	330, 734,
	333, 734,
	334, 734,
	335, 734,
	336, 734,
	338, 734,
	340, 734,
	341, 734,
	342, 734,
	343, 734,
	344, 734,
	345, 734,
	348, 734,
	353, 734,
	354, 734,
	355, 734,
	356, 734,
	357, 734,
	-2, 0,
	-1, 125,
	1, 697,
	219, 697,
	264, 697,
	381, 697,
	383, 697,
	385, 697,
	386, 697,
	-2, 706,
	-1, 130,
	1, 631,
	171, 631,
	242, 631,
	246, 631,
	385, 631,
	386, 631,
	-2, 0,
	-1, 132,
	1, 631,
	385, 631,
	386, 631,
	-2, 0,
	-1, 133,
	1, 631,
	385, 631,
	386, 631,
	-2, 0,
	-1, 134,
	1, 635,
	385, 635,
	386, 635,
	-2, 0,
	-1, 141,
	4, 740,
	5, 740,
	6, 740,
	7, 740,
	8, 740,
	9, 740,
	20, 740,
	21, 740,
	23, 740,
	28, 740,
	29, 740,
	33, 740,
	34, 740,
	35, 740,
	36, 740,
	37, 740,
	38, 740,
	39, 740,
	40, 740,
	41, 740,
	42, 740,
	44, 740,
	45, 740,
	46, 740,
	47, 740,
	48, 740,
	49, 740,
	50, 740,
	51, 740,
	52, 740,
	53, 740,
	54, 740,
	56, 740,
	57, 740,
	59, 740,
	61, 740,
	62, 740,
	63, 740,
	65, 740,
	66, 740,
	67, 740,
	68, 740,
	70, 740,
	72, 740,
	73, 740,
	75, 740,
	76, 740,
	77, 740,
	78, 740,
	80, 740,
	81, 740,
	82, 740,
	84, 740,
	85, 740,
	86, 740,
	87, 740,
	88, 740,
	89, 740,
	90, 740,
	91, 740,
	92, 740,
	93, 740,
	95, 740,
	97, 740,
	99, 740,
	102, 740,
	103, 740,
	105, 740,
	109, 740,
	110, 740,
	111, 740,
	112, 740,
	113, 740,
	114, 740,
	115, 740,
	116, 740,
	117, 740,
	123, 740,
	124, 740,
	125, 740,
	126, 740,
	127, 740,
	129, 740,
	131, 740,
	134, 740,
	136, 740,
	137, 740,
	139, 740,
	142, 740,
	143, 740,
	146, 740,
	147, 740,
	148, 740,
	149, 740,
	150, 740,
	151, 740,
	153, 740,
	154, 740,
	156, 740,
	158, 740,
	159, 740,
	160, 740,
	161, 740,
	162, 740,
	163, 740,
	164, 740,
	165, 740,
	166, 740,
	168, 740,
	170, 740,
	171, 740,
	172, 740,
	173, 740,
	174, 740,
	175, 740,
	176, 740,
	177, 740,
	178, 740,
	179, 740,
	181, 740,
	182, 740,
	184, 740,
	185, 740,
	186, 740,
	187, 740,
	188, 740,
	190, 740,
	191, 740,
	194, 740,
	196, 740,
	197, 740,
	198, 740,
	199, 740,
	200, 740,
	201, 740,
	202, 740,
	203, 740,
	204, 740,
	205, 740,
	206, 740,
	207, 740,
	208, 740,
	209, 740,
	211, 740,
	212, 740,
	213, 740,
	214, 740,
	215, 740,
	216, 740,
	218, 740,
	221, 740,
	224, 740,
	225, 740,
	226, 740,
	227, 740,
	228, 740,
	229, 740,
	230, 740,
	231, 740,
	232, 740,
	233, 740,
	234, 740,
	236, 740,
	237, 740,
	238, 740,
	239, 740,
	240, 740,
	242, 740,
	243, 740,
	244, 740,
	245, 740,
	246, 740,
	247, 740,
	248, 740,
	249, 740,
	251, 740,
	252, 740,
	253, 740,
	254, 740,
	255, 740,
	257, 740,
	258, 740,
	259, 740,
	260, 740,
	261, 740,
	262, 740,
	263, 740,
	265, 740,
	266, 740,
	267, 740,
	268, 740,
	269, 740,
	270, 740,
	272, 740,
	273, 740,
	274, 740,
	275, 740,
	276, 740,
	278, 740,
	279, 740,
	280, 740,
	281, 740,
	282, 740,
	283, 740,
	284, 740,
	285, 740,
	286, 740,
	287, 740,
	288, 740,
	289, 740,
	290, 740,
	291, 740,
	292, 740,
	293, 740,
	295, 740,
	296, 740,
	297, 740,
	298, 740,
	299, 740,
	300, 740,
	301, 740,
	302, 740,
	303, 740,
	304, 740,
	306, 740,
	308, 740,
	309, 740,
	310, 740,
	311, 740,
	312, 740,
	313, 740,
	314, 740,
	315, 740,
	317, 740,
	318, 740,
	319, 740,
	322, 740,
	323, 740,
	324, 740,
	325, 740,
	326, 740,
	327, 740,
	328, 740,
	329, 740,
	330, 740,
	333, 740,
	334, 740,
	335, 740,
	336, 740,
	337, 740,
	338, 740,
	340, 740,
	341, 740,
	342, 740,
	343, 740,
	344, 740,
	345, 740,
	348, 740,
	353, 740,
	354, 740,
	355, 740,
	356, 740,
	357, 740,
	358, 740,
	368, 740,
	373, 740,
	374, 740,
	375, 740,
	382, 740,
	388, 740,
	-2, 0,
	-1, 144,
	1, 54,
	386, 54,
	-2, 732,
	-1, 522,
	133, 1356,
	320, 1356,
	363, 1356,
	384, 1356,
	-2, 0,
	-1, 523,
	133, 1302,
	320, 1302,
	363, 1302,
	384, 1302,
	-2, 0,
	-1, 525,
	133, 1417,
	320, 1417,
	363, 1417,
	384, 1417,
	-2, 0,
	-1, 527,
	133, 1440,
	320, 1440,
	363, 1440,
	384, 1440,
	-2, 0,
	-1, 534,
	133, 1362,
	320, 1362,
	363, 1362,
	384, 1362,
	-2, 334,
	-1, 560,
	1, 412,
	381, 412,
	383, 412,
	385, 412,
	386, 412,
	-2, 0,
	-1, 561,
	1, 464,
	130, 464,
	381, 464,
	383, 464,
	385, 464,
	386, 464,
	-2, 0,
	-1, 567,
	1, 426,
	381, 426,
	383, 426,
	385, 426,
	386, 426,
	-2, 0,
	-1, 569,
	1, 430,
	381, 430,
	383, 430,
	385, 430,
	386, 430,
	-2, 0,
	-1, 572,
	1, 438,
	381, 438,
	383, 438,
	385, 438,
	386, 438,
	-2, 0,
	-1, 573,
	1, 443,
	381, 443,
	383, 443,
	385, 443,
	386, 443,
	-2, 0,
	-1, 576,
	1, 453,
	381, 453,
	383, 453,
	385, 453,
	386, 453,
	-2, 0,
	-1, 592,
	118, 742,
	130, 742,
	189, 742,
	217, 742,
	-2, 701,
	-1, 595,
	118, 741,
	130, 741,
	189, 741,
	217, 741,
	-2, 698,
	-1, 652,
	382, 1279,
	-2, 1272,
	-1, 653,
	382, 1280,
	-2, 1273,
	-1, 659,
	5, 926,
	382, 926,
	-2, 1492,
	-1, 684,
	5, 885,
	-2, 1461,
	-1, 685,
	5, 920,
	382, 920,
	-2, 1463,
	-1, 686,
	5, 895,
	-2, 1464,
	-1, 687,
	5, 894,
	-2, 1465,
	-1, 688,
	5, 920,
	382, 920,
	-2, 1468,
	-1, 689,
	5, 920,
	382, 920,
	-2, 1469,
	-1, 690,
	5, 921,
	-2, 1472,
	-1, 691,
	5, 877,
	-2, 1473,
	-1, 692,
	5, 877,
	-2, 1474,
	-1, 693,
	5, 902,
	-2, 1478,
	-1, 694,
	5, 887,
	-2, 1479,
	-1, 695,
	5, 888,
	-2, 1480,
	-1, 696,
	5, 878,
	-2, 1486,
	-1, 697,
	5, 879,
	-2, 1487,
	-1, 698,
	5, 880,
	-2, 1488,
	-1, 699,
	5, 881,
	-2, 1489,
	-1, 700,
	5, 882,
	-2, 1490,
	-1, 701,
	5, 883,
	-2, 1491,
	-1, 702,
	5, 877,
	-2, 1498,
	-1, 703,
	5, 886,
	-2, 1503,
	-1, 704,
	5, 884,
	-2, 1506,
	-1, 705,
	5, 918,
	382, 918,
	-2, 1508,
	-1, 706,
	5, 922,
	-2, 1511,
	-1, 707,
	5, 924,
	-2, 1512,
	-1, 708,
	5, 917,
	382, 917,
	-2, 1517,
	-1, 894,
	233, 730,
	-2, 575,
	-1, 898,
	219, 1276,
	-2, 0,
	-1, 933,
	1, 218,
	381, 218,
	383, 218,
	385, 218,
	386, 218,
	-2, 705,
	-1, 940,
	4, 1516,
	10, 1516,
	11, 1516,
	13, 1516,
	14, 1516,
	15, 1516,
	16, 1516,
	17, 1516,
	18, 1516,
	20, 1516,
	21, 1516,
	23, 1516,
	26, 1516,
	28, 1516,
	30, 1516,
	33, 1516,
	34, 1516,
	35, 1516,
	36, 1516,
	37, 1516,
	38, 1516,
	39, 1516,
	40, 1516,
	41, 1516,
	42, 1516,
	44, 1516,
	45, 1516,
	46, 1516,
	47, 1516,
	48, 1516,
	49, 1516,
	52, 1516,
	53, 1516,
	54, 1516,
	56, 1516,
	57, 1516,
	58, 1516,
	61, 1516,
	62, 1516,
	63, 1516,
	64, 1516,
	65, 1516,
	66, 1516,
	67, 1516,
	68, 1516,
	70, 1516,
	71, 1516,
	72, 1516,
	73, 1516,
	75, 1516,
	76, 1516,
	77, 1516,
	78, 1516,
	86, 1516,
	87, 1516,
	88, 1516,
	89, 1516,
	90, 1516,
	91, 1516,
	92, 1516,
	93, 1516,
	95, 1516,
	97, 1516,
	99, 1516,
	102, 1516,
	103, 1516,
	105, 1516,
	109, 1516,
	110, 1516,
	111, 1516,
	112, 1516,
	113, 1516,
	114, 1516,
	115, 1516,
	119, 1516,
	120, 1516,
	121, 1516,
	122, 1516,
	123, 1516,
	124, 1516,
	125, 1516,
	126, 1516,
	127, 1516,
	128, 1516,
	129, 1516,
	131, 1516,
	134, 1516,
	136, 1516,
	137, 1516,
	139, 1516,
	142, 1516,
	143, 1516,
	146, 1516,
	147, 1516,
	148, 1516,
	149, 1516,
	150, 1516,
	151, 1516,
	152, 1516,
	153, 1516,
	154, 1516,
	156, 1516,
	158, 1516,
	159, 1516,
	160, 1516,
	161, 1516,
	162, 1516,
	163, 1516,
	164, 1516,
	165, 1516,
	166, 1516,
	168, 1516,
	170, 1516,
	171, 1516,
	172, 1516,
	173, 1516,
	174, 1516,
	175, 1516,
	176, 1516,
	177, 1516,
	178, 1516,
	179, 1516,
	181, 1516,
	182, 1516,
	184, 1516,
	185, 1516,
	186, 1516,
	187, 1516,
	188, 1516,
	190, 1516,
	191, 1516,
	194, 1516,
	195, 1516,
	196, 1516,
	197, 1516,
	199, 1516,
	200, 1516,
	201, 1516,
	202, 1516,
	203, 1516,
	204, 1516,
	205, 1516,
	206, 1516,
	207, 1516,
	208, 1516,
	212, 1516,
	213, 1516,
	214, 1516,
	215, 1516,
	216, 1516,
	218, 1516,
	221, 1516,
	222, 1516,
	224, 1516,
	225, 1516,
	227, 1516,
	229, 1516,
	230, 1516,
	231, 1516,
	232, 1516,
	233, 1516,
	234, 1516,
	236, 1516,
	237, 1516,
	238, 1516,
	239, 1516,
	240, 1516,
	242, 1516,
	243, 1516,
	244, 1516,
	245, 1516,
	246, 1516,
	247, 1516,
	248, 1516,
	249, 1516,
	251, 1516,
	252, 1516,
	253, 1516,
	254, 1516,
	255, 1516,
	256, 1516,
	257, 1516,
	258, 1516,
	259, 1516,
	260, 1516,
	261, 1516,
	262, 1516,
	263, 1516,
	265, 1516,
	266, 1516,
	267, 1516,
	268, 1516,
	269, 1516,
	270, 1516,
	271, 1516,
	272, 1516,
	273, 1516,
	274, 1516,
	275, 1516,
	276, 1516,
	278, 1516,
	279, 1516,
	280, 1516,
	281, 1516,
	282, 1516,
	283, 1516,
	285, 1516,
	286, 1516,
	287, 1516,
	288, 1516,
	289, 1516,
	290, 1516,
	291, 1516,
	292, 1516,
	293, 1516,
	295, 1516,
	296, 1516,
	297, 1516,
	298, 1516,
	299, 1516,
	300, 1516,
	301, 1516,
	302, 1516,
	303, 1516,
	304, 1516,
	306, 1516,
	308, 1516,
	309, 1516,
	310, 1516,
	311, 1516,
	312, 1516,
	313, 1516,
	314, 1516,
	315, 1516,
	317, 1516,
	318, 1516,
	319, 1516,
	322, 1516,
	323, 1516,
	324, 1516,
	325, 1516,
	327, 1516,
	328, 1516,
	329, 1516,
	330, 1516,
	333, 1516,
	334, 1516,
	335, 1516,
	336, 1516,
	338, 1516,
	340, 1516,
	341, 1516,
	342, 1516,
	343, 1516,
	344, 1516,
	345, 1516,
	348, 1516,
	353, 1516,
	354, 1516,
	355, 1516,
	356, 1516,
	357, 1516,
	358, 1516,
	359, 1516,
	361, 1516,
	362, 1516,
	363, 1516,
	364, 1516,
	365, 1516,
	366, 1516,
	367, 1516,
	368, 1516,
	370, 1516,
	371, 1516,
	372, 1516,
	373, 1516,
	374, 1516,
	375, 1516,
	376, 1516,
	377, 1516,
	378, 1516,
	380, 1516,
	383, 1516,
	384, 1516,
	387, 1516,
	388, 1516,
	-2, 0,
	-1, 953,
	133, 1417,
	320, 1417,
	363, 1417,
	384, 1417,
	-2, 0,
	-1, 970,
	133, 1440,
	320, 1440,
	363, 1440,
	384, 1440,
	-2, 0,
	-1, 971,
	171, 643,
	242, 643,
	246, 643,
	-2, 322,
	-1, 1043,
	118, 741,
	130, 741,
	189, 741,
	217, 741,
	-2, 702,
	-1, 1124,
	108, 707,
	118, 707,
	130, 707,
	167, 707,
	189, 707,
	217, 707,
	223, 707,
	331, 707,
	-2, 1055,
	-1, 1134,
	382, 1256,
	-2, 1244,
	-1, 1152,
	383, 1168,
	-2, 0,
	-1, 1176,
	171, 643,
	242, 643,
	246, 643,
	-2, 638,
	-1, 1204,
	383, 1168,
	-2, 0,
	-1, 1208,
	108, 707,
	118, 707,
	130, 707,
	167, 707,
	189, 707,
	217, 707,
	223, 707,
	331, 707,
	-2, 808,
	-1, 1360,
	171, 643,
	242, 643,
	246, 643,
	-2, 324,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 961,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 962,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 963,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 964,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 965,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 966,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 967,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 968,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 977,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 978,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 979,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 984,
	-1, 1495,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 986,
	-1, 1497,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 990,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 991,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 992,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 993,
	-1, 1569,
	133, 1179,
	382, 1279,
	-2, 1272,
	-1, 1570,
	133, 1180,
	-2, 1457,
	-1, 1571,
	133, 1181,
	-2, 1361,
	-1, 1572,
	133, 1182,
	-2, 1320,
	-1, 1573,
	133, 1183,
	-2, 1337,
	-1, 1574,
	133, 1184,
	-2, 1359,
	-1, 1575,
	133, 1185,
	-2, 1413,
	-1, 1651,
	1, 809,
	75, 809,
	108, 809,
	118, 809,
	130, 809,
	134, 809,
	138, 809,
	140, 809,
	158, 809,
	167, 809,
	174, 809,
	185, 809,
	189, 809,
	204, 809,
	217, 809,
	219, 809,
	223, 809,
	264, 809,
	266, 809,
	331, 809,
	339, 809,
	350, 809,
	351, 809,
	360, 809,
	381, 809,
	383, 809,
	385, 809,
	386, 809,
	387, 809,
	-2, 808,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 985,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 987,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 988,
	-1, 1835,
	228, 1139,
	-2, 1141,
	-1, 2069,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 989,
	-1, 2074,
	170, 0,
	-2, 1005,
	-1, 2083,
	228, 1140,
	-2, 1142,
	-1, 2125,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1032,
	-1, 2126,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1033,
	-1, 2127,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1034,
	-1, 2131,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1038,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1039,
	-1, 2133,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1040,
	-1, 2268,
	170, 0,
	-2, 1006,
	-1, 2271,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1009,
	-1, 2272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1011,
	-1, 2395,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1010,
	-1, 2396,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1012,
	-1, 2403,
	170, 0,
	-2, 1041,
	-1, 2482,
	170, 0,
	-2, 1042,
	-1, 2564,
	36, 0,
	151, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1460,
	-1, 2650,
	382, 1528,
	-2, 499,
}

const sqlPrivate = 57344

const sqlLast = 45338

var sqlAct = [...]int{

	653, 2632, 2646, 2363, 2362, 2647, 2630, 2218, 2572, 2536,
	2563, 2613, 2573, 2047, 2574, 2373, 1730, 1248, 2429, 1738,
	2487, 784, 2102, 2228, 1805, 2562, 2336, 74, 2257, 2184,
	1265, 2322, 612, 1300, 1354, 2015, 1646, 2252, 2185, 1355,
	887, 1206, 183, 2250, 2409, 1949, 1697, 183, 991, 651,
	643, 650, 757, 1727, 2021, 1696, 183, 2013, 1202, 2302,
	2244, 1928, 1185, 1278, 1739, 183, 1690, 1261, 1211, 1901,
	183, 183, 1700, 1655, 183, 1936, 596, 183, 1701, 479,
	26, 2155, 1647, 629, 1664, 183, 1846, 604, 124, 1447,
	464, 1900, 1524, 974, 1244, 1549, 1785, 1525, 1214, 1048,
	1216, 1130, 1186, 1533, 623, 1512, 1711, 1442, 1509, 1713,
	1425, 763, 1423, 923, 461, 1801, 1598, 1301, 973, 1162,
	1166, 1698, 1252, 993, 934, 1704, 533, 1543, 920, 766,
	1633, 1620, 1732, 745, 1193, 1119, 183, 183, 513, 913,
	622, 1049, 125, 1426, 183, 530, 1384, 1424, 1565, 1385,
	645, 174, 126, 124, 1176, 601, 491, 1272, 743, 526,
	910, 179, 1175, 554, 1053, 2337, 2169, 1834, 1280, 2170,
	183, 183, 183, 183, 786, 2364, 1280, 1280, 183, 183,
	2663, 2662, 2655, 2364, 2656, 2656, 2656, 2609, 2608, 2607,
	1731, 1239, 1239, 1239, 2589, 2584, 1203, 2067, 2335, 1753,
	1064, 1065, 1235, 2668, 2654, 2583, 1104, 1105, 1106, 1753,
	2580, 2560, 760, 595, 1239, 1768, 2559, 2531, 600, 2031,
	1768, 1761, 505, 1067, 26, 875, 1108, 2030, 600, 2526,
	184, 2525, 124, 1239, 2521, 2387, 2513, 2484, 1239, 2460,
	2335, 1761, 2457, 2335, 1526, 2455, 1239, 2440, 1066, 2335,
	1622, 1239, 1871, 1872, 1086, 1889, 1890, 1891, 2439, 2417,
	2414, 2397, 2335, 1239, 1239, 1761, 1753, 593, 2267, 1871,
	1872, 2358, 2356, 2532, 2334, 1753, 1753, 592, 2335, 610,
	2315, 771, 775, 2270, 1239, 646, 781, 1761, 1691, 2243,
	2238, 1838, 605, 1695, 1695, 747, 2165, 1839, 1871, 1872,
	2166, 1889, 1890, 1891, 2078, 1768, 1886, 1691, 1753, 1089,
	1090, 1091, 1092, 2041, 2391, 2158, 2000, 2001, 1072, 2387,
	1239, 1925, 1918, 1886, 1916, 1239, 1919, 1915, 1753, 1914,
	2664, 1753, 1772, 1753, 1768, 1760, 1753, 2158, 2643, 1761,
	1752, 1101, 1109, 1694, 1753, 1627, 1293, 1695, 1621, 1626,
	1294, 749, 1886, 750, 2058, 1653, 2138, 2080, 1239, 2001,
	1064, 1065, 1804, 1094, 1095, 1096, 1104, 1105, 1106, 1783,
	1877, 1363, 1180, 1528, 873, 955, 1097, 144, 1099, 2338,
	141, 1281, 1753, 1067, 952, 1087, 1108, 1877, 951, 1281,
	1281, 950, 1845, 949, 948, 947, 946, 945, 944, 1382,
	943, 942, 941, 751, 787, 748, 586, 585, 1066, 584,
	143, 552, 1892, 551, 1086, 1546, 1877, 1064, 1065, 550,
	549, 1083, 548, 547, 183, 546, 183, 183, 183, 545,
	183, 544, 543, 542, 541, 540, 183, 1887, 539, 538,
	1067, 537, 183, 536, 521, 520, 1093, 142, 519, 518,
	517, 452, 451, 450, 1887, 183, 183, 183, 183, 183,
	449, 1088, 448, 433, 937, 1066, 432, 1547, 431, 1089,
	1090, 1091, 1092, 2030, 1064, 1065, 422, 421, 1072, 1102,
	709, 420, 419, 1887, 1735, 127, 183, 412, 879, 1064,
	1065, 601, 411, 167, 166, 165, 164, 1067, 163, 162,
	183, 1101, 1109, 161, 1621, 927, 1286, 160, 159, 158,
	157, 156, 1067, 1888, 1279, 1416, 183, 155, 154, 153,
	1107, 152, 1066, 1548, 1545, 151, 183, 150, 149, 148,
	1888, 147, 146, 145, 1944, 1072, 1562, 1066, 1099, 1560,
	1388, 986, 2631, 1558, 1556, 1087, 2636, 2634, 1100, 2579,
	891, 2561, 893, 912, 896, 1207, 2546, 937, 1103, 1888,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 2541,
	1871, 1872, 1098, 1889, 1890, 1891, 2479, 2458, 2380, 1060,
	2392, 916, 916, 886, 1871, 1872, 2266, 935, 183, 2301,
	2300, 2296, 1072, 2295, 2288, 917, 989, 2287, 2286, 2282,
	1550, 2281, 1087, 1883, 1884, 1885, 1093, 1072, 2280, 2279,
	2273, 2249, 1882, 1880, 1881, 1873, 1874, 1875, 1876, 1878,
	1879, 1088, 2152, 2147, 1886, 1520, 956, 2146, 2145, 1882,
	1880, 1881, 1873, 1874, 1875, 1876, 1878, 1879, 2088, 1102,
	2003, 1999, 884, 1956, 1952, 1923, 1920, 1908, 1899, 1883,
	1884, 1885, 1870, 1867, 788, 601, 1866, 1864, 1882, 1880,
	1881, 1873, 1874, 1875, 1876, 1878, 1879, 141, 1851, 1044,
	1850, 1297, 603, 1835, 1087, 1651, 1060, 758, 1088, 1043,
	1544, 1138, 971, 1205, 984, 968, 1059, 1131, 1877, 1122,
	1204, 2657, 2653, 2641, 938, 2621, 2620, 143, 1264, 1039,
	2104, 2551, 1877, 1763, 2550, 879, 1766, 2549, 1100, 1871,
	1872, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 987,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 2516,
	1892, 2508, 1131, 2507, 142, 40, 2498, 2297, 1521, 2496,
	1045, 2379, 135, 183, 1046, 183, 41, 593, 2472, 136,
	1088, 2471, 1871, 1872, 2470, 1887, 2426, 592, 2405, 2388,
	44, 141, 2367, 1056, 1057, 1383, 1714, 2355, 183, 183,
	1061, 2341, 1734, 2293, 1800, 1871, 1872, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 51, 938, 2226, 2043,
	2224, 143, 1191, 2223, 2221, 601, 2193, 2192, 1064, 1065,
	2173, 2161, 2073, 1184, 1134, 1989, 2045, 1983, 1164, 1165,
	1969, 1292, 1968, 1168, 1954, 63, 1189, 1924, 1898, 1860,
	1859, 1067, 64, 1171, 486, 65, 1856, 1877, 142, 1831,
	1826, 1888, 1514, 1167, 1170, 1638, 135, 1068, 1069, 1070,
	1071, 1073, 1074, 136, 1610, 1554, 1066, 1247, 759, 1183,
	124, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 67, 1174,
	1160, 983, 1159, 1158, 1157, 1156, 127, 1969, 1155, 1154,
	1877, 1153, 1126, 937, 183, 1152, 1151, 1201, 1150, 1149,
	786, 1179, 1148, 1147, 1146, 1145, 183, 1144, 1143, 1142,
	1135, 885, 1123, 1877, 1887, 1122, 1177, 1209, 967, 183,
	959, 1240, 931, 1181, 2490, 183, 2386, 183, 1120, 183,
	1942, 2275, 1237, 183, 1263, 1382, 1072, 1561, 1205, 2248,
	1559, 1883, 1884, 1885, 1557, 1555, 2168, 1246, 2164, 1837,
	1882, 1880, 1881, 1873, 1874, 1875, 1876, 1878, 1879, 1771,
	2393, 614, 1064, 1065, 939, 1639, 68, 141, 2016, 1875,
	1876, 1878, 1879, 2390, 183, 183, 1382, 1064, 1065, 2389,
	1887, 937, 2383, 183, 2171, 1067, 183, 1269, 1871, 1872,
	1888, 2032, 128, 70, 1691, 71, 1207, 143, 1382, 1298,
	1067, 1283, 1770, 1087, 1285, 1042, 1224, 786, 1288, 141,
	1066, 1992, 1037, 1712, 1787, 1986, 183, 485, 1172, 1982,
	104, 183, 1922, 1173, 1921, 1066, 183, 183, 1389, 183,
	1810, 183, 1420, 183, 142, 183, 912, 980, 1369, 143,
	1140, 2048, 135, 1262, 1793, 2180, 183, 1534, 2410, 136,
	1731, 2105, 183, 183, 1842, 1238, 1888, 939, 1163, 1031,
	2639, 183, 2638, 2544, 2026, 1217, 1757, 1218, 981, 711,
	2520, 2604, 127, 1427, 1764, 2349, 142, 759, 1137, 1088,
	1072, 738, 1773, 183, 135, 1271, 1274, 786, 2055, 2451,
	740, 136, 1873, 1874, 1875, 1876, 1878, 1879, 2605, 1032,
	2450, 736, 1373, 1372, 2448, 1382, 1379, 2447, 1456, 2212,
	1381, 982, 1023, 2209, 127, 2177, 2176, 1855, 710, 1854,
	1853, 1852, 1415, 938, 734, 1813, 1295, 731, 124, 599,
	787, 1357, 1296, 968, 1356, 1873, 1874, 1875, 1876, 1878,
	1879, 1756, 1390, 1686, 1682, 1360, 1679, 1219, 1496, 1386,
	1178, 1374, 616, 1546, 872, 1404, 1880, 1881, 1873, 1874,
	1875, 1876, 1878, 1879, 2361, 1614, 1394, 1225, 1613, 1429,
	601, 1457, 1398, 1370, 1399, 601, 1400, 1397, 1401, 2651,
	1402, 1068, 1069, 1070, 1071, 1073, 1074, 658, 598, 1222,
	1728, 588, 1376, 1414, 2519, 1246, 1291, 1408, 1410, 183,
	2044, 183, 1448, 1455, 183, 1547, 424, 1223, 1421, 438,
	1428, 938, 1422, 1040, 2216, 183, 593, 500, 2217, 593,
	593, 1996, 1511, 453, 786, 1413, 1438, 183, 1446, 1439,
	1440, 183, 1358, 2431, 183, 1511, 1242, 787, 183, 1217,
	1776, 1218, 183, 1030, 600, 1641, 880, 882, 183, 1529,
	1619, 591, 1778, 1531, 1518, 183, 786, 1393, 601, 1516,
	183, 1548, 1545, 2023, 1640, 1307, 1348, 590, 183, 1205,
	1593, 439, 2557, 1657, 1522, 1779, 41, 1688, 1519, 1583,
	1721, 591, 2204, 1630, 1665, 183, 1378, 1777, 1507, 1377,
	44, 1275, 429, 1217, 1063, 1218, 183, 492, 183, 1534,
	183, 1383, 1714, 183, 1505, 183, 1017, 183, 183, 457,
	183, 183, 1669, 1671, 966, 937, 1658, 787, 1576, 183,
	497, 1219, 1644, 1676, 713, 2195, 493, 1070, 1071, 1073,
	1074, 1684, 1550, 957, 1617, 2604, 2061, 1616, 1550, 961,
	1041, 1625, 1383, 1714, 2596, 1074, 1018, 712, 1635, 1636,
	1631, 2623, 597, 1674, 486, 2054, 1879, 1751, 494, 1680,
	1209, 1668, 1991, 1661, 1383, 1714, 614, 1036, 1687, 1280,
	1307, 1307, 1733, 939, 1733, 1219, 456, 1412, 168, 2098,
	788, 1715, 496, 1719, 1720, 1722, 1220, 1657, 67, 1501,
	1228, 2528, 1126, 1985, 1710, 1226, 1656, 1502, 2501, 1503,
	1536, 124, 732, 1508, 2056, 1871, 1872, 124, 742, 786,
	1759, 741, 1027, 1568, 1568, 1581, 2529, 183, 1544, 1601,
	1748, 2330, 732, 1605, 1606, 1608, 1745, 1737, 1754, 916,
	1784, 916, 1022, 183, 183, 183, 1749, 183, 935, 1755,
	1758, 1767, 1746, 2095, 1747, 733, 441, 440, 732, 1112,
	1113, 1114, 1115, 1116, 787, 1765, 1550, 2509, 996, 1125,
	2331, 939, 2576, 2432, 171, 1361, 183, 1161, 1233, 1133,
	1667, 1383, 1380, 1192, 2454, 1980, 68, 1168, 510, 1171,
	2024, 2633, 425, 1028, 1232, 1723, 787, 788, 2595, 2616,
	1165, 1164, 2631, 2060, 1823, 1815, 589, 2401, 489, 2096,
	495, 1774, 128, 70, 1117, 71, 1230, 2196, 1510, 2364,
	1821, 423, 2510, 124, 1504, 1802, 1803, 977, 1858, 141,
	1634, 1506, 499, 1877, 1231, 2023, 1517, 485, 455, 1215,
	104, 172, 1196, 2202, 1650, 1229, 430, 600, 413, 1029,
	1788, 426, 1392, 2059, 2262, 938, 1052, 1790, 1792, 143,
	492, 427, 2575, 1797, 1796, 2062, 1199, 498, 458, 2577,
	1220, 1666, 601, 1799, 2624, 2134, 2603, 788, 454, 2601,
	1004, 2372, 1194, 497, 1725, 2326, 1550, 2327, 1062, 493,
	962, 954, 1281, 1197, 1187, 1187, 142, 1995, 978, 2629,
	1887, 614, 979, 2442, 135, 1818, 1051, 2594, 965, 1493,
	2441, 136, 1195, 2424, 2537, 1819, 2493, 2329, 1047, 1824,
	2179, 494, 1965, 1961, 1220, 1726, 2332, 1938, 2578, 1368,
	1816, 173, 1814, 972, 127, 1270, 2291, 1249, 2345, 1434,
	1871, 1872, 2094, 1844, 977, 496, 601, 1407, 655, 787,
	1830, 1051, 1364, 183, 786, 2642, 2614, 1654, 1051, 183,
	183, 2229, 2374, 183, 889, 1950, 1841, 1926, 183, 888,
	176, 183, 1932, 2425, 1198, 1931, 1888, 1050, 607, 183,
	579, 1366, 1939, 1718, 2135, 183, 183, 183, 579, 1933,
	2136, 183, 1629, 169, 183, 1367, 1971, 1970, 609, 1808,
	183, 183, 183, 183, 183, 1052, 609, 1946, 2328, 997,
	183, 1945, 2615, 183, 788, 978, 2628, 183, 414, 979,
	1435, 1930, 1050, 1955, 1491, 1494, 183, 1934, 1935, 1050,
	1820, 1940, 608, 170, 1628, 2617, 183, 1822, 183, 977,
	183, 1951, 1905, 1906, 1907, 2258, 788, 1937, 598, 998,
	1941, 2292, 995, 2344, 1927, 898, 183, 1052, 1877, 2219,
	183, 1490, 2365, 495, 580, 183, 2002, 183, 2004, 1962,
	1994, 988, 580, 579, 183, 1882, 1880, 1881, 1873, 1874,
	1875, 1876, 1878, 1879, 1957, 1981, 909, 183, 937, 1829,
	415, 609, 601, 1988, 1716, 1717, 1832, 1005, 907, 937,
	183, 2303, 977, 1979, 508, 939, 2156, 1553, 2404, 1552,
	1966, 2290, 2215, 1848, 1849, 1902, 2072, 502, 2005, 2422,
	498, 1997, 2028, 614, 614, 1887, 1865, 2040, 3, 1196,
	2348, 1825, 1769, 1026, 2010, 1903, 1693, 2347, 2049, 183,
	2034, 2035, 1685, 2036, 2037, 877, 1678, 1966, 874, 2007,
	878, 2423, 1035, 1199, 1034, 960, 447, 580, 2008, 2025,
	2019, 1047, 1492, 1897, 1794, 1405, 2006, 1396, 2033, 1632,
	1601, 1601, 1601, 978, 1141, 1910, 442, 979, 2571, 581,
	1197, 2534, 1236, 2039, 787, 484, 34, 581, 2319, 183,
	2075, 2200, 1431, 2085, 1436, 2198, 2050, 2053, 2178, 788,
	1443, 1888, 483, 33, 2012, 2014, 1729, 1709, 1290, 2042,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 2065, 1495, 2063, 1497, 1498, 1499, 1500, 1289,
	2051, 2052, 2346, 908, 2090, 2091, 2092, 2081, 606, 2079,
	582, 1198, 1523, 2057, 1025, 906, 482, 30, 582, 1125,
	183, 2084, 581, 769, 507, 1287, 183, 2106, 1307, 2097,
	2099, 2100, 2108, 481, 80, 183, 183, 501, 1563, 1564,
	2111, 2113, 1580, 583, 1592, 1594, 1599, 1602, 1603, 1604,
	2140, 583, 1881, 1873, 1874, 1875, 1876, 1878, 1879, 1258,
	1448, 2109, 2167, 488, 1284, 1307, 480, 79, 938, 1448,
	2114, 477, 22, 2141, 2172, 2157, 2139, 478, 23, 938,
	34, 2174, 183, 489, 183, 476, 28, 2214, 2163, 1342,
	1015, 2160, 124, 183, 2159, 2154, 937, 33, 1259, 2190,
	2191, 2189, 2144, 582, 2225, 475, 20, 730, 1282, 1234,
	1227, 183, 183, 2206, 2222, 473, 19, 2206, 2175, 2199,
	1013, 2201, 1221, 2206, 474, 18, 2239, 1307, 1021, 183,
	2230, 1011, 2182, 2465, 2203, 492, 583, 1009, 1341, 183,
	443, 786, 183, 183, 2231, 2242, 2205, 1007, 786, 1001,
	2210, 2605, 1806, 2233, 2220, 905, 2213, 2234, 497, 1253,
	2385, 30, 2259, 2384, 493, 2232, 2235, 1387, 754, 2265,
	2245, 2264, 1192, 2241, 487, 2240, 468, 15, 80, 2467,
	1930, 1673, 2246, 444, 788, 183, 2330, 2269, 755, 2323,
	469, 16, 1307, 2237, 1342, 1342, 494, 1054, 467, 14,
	2321, 472, 12, 466, 10, 2325, 1689, 1306, 1657, 1254,
	1256, 79, 1795, 445, 2503, 446, 22, 1672, 1255, 1807,
	496, 1014, 23, 471, 7, 2331, 1681, 1677, 1307, 1307,
	28, 1196, 470, 6, 2148, 465, 5, 1307, 1307, 183,
	735, 737, 183, 1341, 1341, 1418, 1419, 509, 2324, 2338,
	20, 1012, 786, 183, 183, 1199, 1020, 183, 183, 183,
	19, 2289, 1010, 1657, 999, 1437, 756, 2481, 1008, 18,
	1307, 1194, 1670, 2311, 183, 1055, 2453, 2304, 1006, 183,
	1000, 183, 1197, 183, 183, 183, 904, 1058, 2307, 2313,
	183, 1064, 1065, 183, 2339, 2310, 937, 1683, 1675, 2306,
	2314, 1195, 2342, 2308, 183, 183, 2533, 2305, 2208, 1257,
	2370, 937, 1306, 1306, 2211, 1736, 1724, 1708, 939, 1618,
	2343, 15, 2190, 2191, 2189, 1359, 938, 1299, 2612, 939,
	2360, 2366, 2627, 1871, 1872, 16, 2371, 2318, 495, 1066,
	2326, 2416, 2327, 14, 1344, 2375, 12, 2309, 10, 2247,
	2368, 2190, 2191, 2189, 1064, 1065, 2190, 2191, 2189, 2376,
	2369, 1064, 1065, 1198, 1584, 2153, 2377, 1343, 7, 2101,
	2394, 787, 2329, 2046, 2382, 1781, 1780, 6, 787, 1781,
	5, 2332, 1811, 1812, 1067, 1947, 1917, 1782, 1817, 1615,
	1612, 1611, 1542, 1128, 2277, 498, 2093, 2009, 2381, 1138,
	183, 1136, 183, 1033, 786, 183, 1024, 2406, 1019, 1066,
	1016, 1002, 964, 183, 1362, 587, 2430, 490, 1395, 786,
	1836, 1003, 1943, 1637, 2527, 2420, 1843, 2283, 1857, 1847,
	2415, 2413, 2486, 2400, 1551, 2399, 1139, 638, 56, 1307,
	2435, 2434, 2187, 632, 2436, 2320, 1861, 2181, 1703, 1344,
	1344, 1702, 789, 183, 2433, 1371, 937, 654, 1246, 1567,
	183, 1449, 729, 2328, 656, 2190, 2191, 2189, 183, 183,
	937, 937, 1343, 1343, 183, 1304, 657, 2456, 2418, 180,
	1125, 1305, 787, 1169, 417, 644, 1302, 1599, 1599, 1599,
	2462, 183, 2206, 434, 2445, 2446, 183, 2190, 2191, 2189,
	2477, 932, 459, 183, 2463, 2473, 2466, 503, 180, 2475,
	2476, 511, 2474, 1187, 516, 2464, 2468, 2497, 614, 2483,
	2478, 1740, 535, 1375, 1515, 2452, 938, 1532, 183, 183,
	2459, 2491, 2489, 2492, 1840, 183, 1132, 624, 636, 635,
	1530, 938, 958, 937, 2499, 1948, 2514, 2444, 183, 2022,
	2378, 1433, 937, 937, 2512, 1798, 1430, 2480, 2018, 2515,
	2197, 428, 1868, 930, 1590, 1582, 1578, 1250, 2518, 1251,
	1038, 1190, 1118, 746, 746, 1741, 939, 183, 601, 183,
	985, 417, 183, 1191, 786, 2029, 2523, 2524, 1762, 1182,
	1441, 2517, 753, 752, 2640, 2500, 1365, 1775, 1111, 1110,
	2552, 739, 2495, 2554, 2540, 2545, 2506, 417, 417, 779,
	417, 976, 2553, 183, 2556, 180, 876, 975, 2558, 1260,
	1964, 788, 2622, 2020, 2502, 2539, 2555, 2194, 788, 2412,
	183, 183, 183, 2569, 787, 2568, 2570, 2543, 183, 140,
	2581, 2588, 137, 139, 138, 2038, 2190, 2191, 2189, 787,
	1993, 83, 183, 2591, 2592, 2593, 32, 2590, 1303, 1307,
	31, 103, 614, 614, 102, 101, 2438, 2602, 2600, 100,
	99, 2606, 98, 97, 96, 614, 2585, 2586, 2587, 95,
	2449, 94, 93, 92, 91, 90, 938, 2611, 2610, 89,
	88, 87, 2064, 86, 85, 2619, 1443, 2618, 2625, 531,
	938, 938, 2068, 2626, 528, 2069, 82, 81, 29, 25,
	107, 24, 786, 78, 786, 1307, 77, 2074, 27, 17,
	11, 21, 1584, 1584, 2644, 2645, 2082, 61, 62, 60,
	2652, 59, 788, 2635, 2086, 2637, 2658, 2038, 58, 13,
	2661, 2659, 2660, 54, 53, 52, 2667, 2665, 2666, 50,
	2669, 49, 48, 47, 9, 106, 2256, 2110, 45, 8,
	43, 2112, 42, 1303, 1303, 105, 119, 116, 118, 115,
	117, 1307, 121, 938, 120, 113, 939, 111, 112, 114,
	110, 109, 938, 938, 122, 39, 38, 37, 36, 633,
	75, 939, 1342, 35, 2142, 2143, 2, 1, 1584, 1584,
	1584, 0, 0, 2149, 2150, 2151, 2530, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	2162, 0, 2547, 2548, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 1827,
	1828, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	2183, 535, 0, 535, 894, 535, 0, 899, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 0, 1341, 417,
	0, 0, 0, 0, 788, 0, 0, 0, 0, 0,
	0, 1342, 535, 535, 417, 924, 876, 0, 0, 788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 594, 1187, 0, 602, 0, 0,
	0, 0, 0, 535, 614, 1894, 1895, 1896, 0, 0,
	0, 0, 0, 765, 75, 0, 939, 535, 0, 0,
	1341, 0, 787, 0, 787, 0, 0, 1306, 0, 0,
	939, 939, 0, 963, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 535, 2268, 0, 0, 0, 2271, 2272,
	0, 628, 2274, 0, 0, 0, 0, 0, 0, 2276,
	0, 2278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 1342, 0, 0, 0, 2285, 0, 0,
	0, 1342, 1342, 0, 0, 1341, 0, 0, 0, 1306,
	0, 0, 1871, 1872, 0, 1889, 1890, 1891, 416, 0,
	0, 0, 0, 939, 0, 417, 0, 1584, 1584, 0,
	2294, 0, 939, 939, 1342, 0, 0, 0, 0, 0,
	0, 1341, 1341, 0, 0, 0, 0, 1344, 0, 0,
	1341, 1341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 788, 0, 1886, 0, 0, 0,
	1343, 0, 0, 0, 1306, 0, 0, 0, 0, 0,
	2340, 0, 0, 1341, 1344, 0, 1584, 1584, 1584, 1584,
	1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
	1584, 1584, 1584, 1584, 1584, 0, 1584, 1343, 0, 0,
	1306, 1306, 0, 0, 0, 764, 0, 0, 0, 1306,
	1306, 0, 1871, 1872, 0, 1889, 1890, 1891, 0, 0,
	1877, 0, 0, 0, 0, 0, 0, 0, 2077, 0,
	0, 773, 777, 0, 783, 0, 1344, 0, 1064, 1065,
	0, 0, 1306, 0, 2070, 2071, 0, 0, 2395, 2396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 1067, 1892, 0, 0, 0, 1886, 0, 0, 0,
	516, 0, 746, 0, 0, 0, 0, 0, 0, 2408,
	0, 0, 788, 0, 788, 2411, 1066, 1887, 0, 0,
	0, 0, 0, 1342, 0, 417, 417, 0, 0, 0,
	0, 1344, 0, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 0, 2137, 1343, 0, 0, 0, 0, 2443,
	1877, 0, 0, 0, 0, 0, 0, 1344, 1344, 0,
	0, 0, 1341, 602, 0, 0, 1344, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	1343, 1343, 0, 1888, 0, 0, 0, 0, 0, 1343,
	1343, 0, 1892, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1887, 0, 0,
	0, 180, 1343, 0, 0, 0, 0, 0, 2494, 0,
	0, 1306, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 1268, 0, 0, 0,
	0, 0, 417, 0, 417, 40, 417, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 1303, 614, 1883, 1884, 1885, 0, 0, 0, 0,
	44, 0, 1882, 1880, 1881, 1873, 1874, 1875, 1876, 1878,
	1879, 0, 0, 1888, 0, 0, 0, 0, 0, 0,
	0, 535, 180, 0, 594, 0, 51, 0, 1303, 0,
	180, 0, 0, 535, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 777, 0, 1121, 0, 1124, 0, 0,
	2567, 2567, 0, 1342, 1129, 63, 0, 0, 783, 0,
	0, 0, 64, 535, 486, 65, 2582, 0, 535, 0,
	0, 0, 0, 180, 535, 0, 535, 0, 535, 0,
	535, 0, 535, 0, 0, 0, 2567, 0, 1344, 0,
	1303, 0, 0, 1406, 0, 0, 0, 0, 67, 535,
	535, 0, 1341, 1883, 1884, 1885, 0, 0, 417, 1342,
	0, 1343, 1882, 1880, 1881, 1873, 1874, 1875, 1876, 1878,
	1879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 1584, 2567, 0, 0, 0, 0, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 1341, 0,
	0, 0, 0, 2648, 0, 1342, 0, 0, 0, 0,
	0, 1306, 0, 0, 1584, 2648, 0, 0, 2648, 2648,
	0, 0, 75, 0, 0, 0, 68, 1208, 0, 777,
	0, 1303, 1303, 0, 0, 0, 0, 0, 0, 0,
	1303, 1303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 70, 1341, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1306, 0, 141,
	0, 0, 0, 1303, 1403, 0, 0, 485, 0, 0,
	104, 0, 0, 0, 0, 0, 516, 1584, 746, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 143,
	2403, 0, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1649, 0, 0, 0, 417, 0,
	0, 417, 0, 1306, 0, 1662, 0, 0, 0, 417,
	0, 0, 0, 0, 0, 417, 142, 0, 0, 0,
	0, 2427, 417, 0, 135, 0, 0, 1692, 1344, 0,
	0, 136, 0, 0, 0, 1699, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	0, 1343, 876, 0, 127, 41, 130, 0, 0, 0,
	0, 0, 0, 417, 0, 1744, 0, 535, 0, 44,
	535, 553, 535, 579, 417, 417, 0, 1750, 876, 0,
	0, 0, 0, 132, 1344, 0, 1662, 0, 0, 764,
	1212, 558, 0, 46, 2482, 51, 0, 0, 0, 0,
	0, 0, 0, 556, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	57, 0, 1303, 0, 63, 557, 0, 133, 0, 0,
	559, 64, 0, 123, 65, 0, 0, 0, 565, 566,
	1344, 0, 0, 575, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 580, 560, 0,
	75, 0, 0, 1343, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 0, 1786, 0, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 0, 594, 594, 0, 0,
	417, 417, 417, 0, 417, 561, 0, 1245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 777, 0, 1273, 0,
	1273, 0, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 0, 0, 0, 0, 564, 571, 1513,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	568, 69, 602, 0, 0, 0, 0, 1124, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	76, 128, 70, 0, 71, 0, 72, 0, 134, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 141, 1200,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 104,
	0, 0, 567, 0, 0, 40, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 143, 0,
	0, 0, 0, 0, 765, 0, 0, 0, 0, 0,
	44, 0, 1303, 0, 0, 0, 0, 0, 108, 0,
	1208, 555, 572, 582, 0, 0, 0, 129, 0, 0,
	0, 0, 1417, 75, 0, 142, 51, 0, 0, 0,
	0, 75, 0, 135, 0, 0, 0, 573, 0, 0,
	136, 577, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 570, 574, 0, 0, 63, 0, 0, 1303, 0,
	0, 0, 64, 127, 486, 65, 4, 576, 0, 0,
	417, 0, 75, 0, 75, 0, 417, 417, 0, 0,
	417, 0, 0, 0, 0, 1649, 0, 0, 1649, 0,
	0, 0, 0, 75, 0, 0, 1953, 0, 67, 75,
	0, 0, 417, 1959, 1960, 0, 0, 0, 1662, 0,
	0, 1967, 0, 0, 1303, 0, 0, 1972, 1973, 1975,
	1977, 1978, 0, 0, 0, 0, 0, 417, 0, 0,
	1987, 0, 0, 0, 1990, 0, 0, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1268, 0, 1268, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 764, 2017, 0, 0,
	0, 0, 417, 0, 2027, 0, 68, 0, 0, 0,
	0, 417, 764, 0, 0, 1652, 0, 0, 0, 0,
	0, 0, 0, 777, 1786, 75, 0, 0, 0, 777,
	0, 0, 128, 70, 0, 71, 783, 1786, 0, 1064,
	1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 141,
	0, 0, 0, 0, 0, 1097, 0, 485, 0, 0,
	104, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 462, 417, 1742, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 1066, 783, 783,
	0, 0, 0, 1086, 0, 0, 40, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 1513, 0, 142, 0, 0, 0,
	0, 44, 0, 0, 135, 0, 2103, 0, 0, 0,
	0, 136, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 1089, 1090,
	1091, 1092, 0, 0, 127, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	1101, 1109, 0, 64, 0, 486, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 417, 1124, 0,
	0, 0, 0, 1649, 1789, 783, 1791, 1099, 777, 67,
	0, 0, 876, 1649, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2186, 0, 0,
	0, 0, 765, 0, 0, 0, 0, 1809, 765, 765,
	2207, 1098, 765, 0, 2207, 0, 0, 0, 0, 0,
	2207, 0, 0, 0, 0, 0, 0, 0, 0, 1662,
	0, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	2227, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 417, 417,
	1088, 0, 0, 75, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 2253, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 2255, 0, 75, 2260,
	417, 0, 0, 128, 70, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 602, 0, 0, 0, 485, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2284, 0, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 1913, 142, 0, 0,
	0, 0, 0, 0, 764, 135, 417, 0, 0, 876,
	764, 764, 136, 0, 764, 0, 0, 0, 0, 0,
	1649, 876, 0, 0, 2316, 2317, 1662, 0, 0, 0,
	0, 0, 0, 0, 0, 463, 1958, 0, 0, 0,
	2186, 876, 0, 0, 0, 0, 2350, 0, 2351, 0,
	417, 2353, 2354, 0, 0, 0, 0, 417, 0, 0,
	2359, 1984, 0, 0, 0, 0, 0, 0, 0, 2186,
	0, 876, 1699, 0, 2186, 0, 0, 1998, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1871, 1872, 0, 1889, 1890, 1891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2076, 2011, 0, 0,
	0, 0, 0, 0, 1064, 1065, 1245, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 75, 1245, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 765,
	1108, 0, 0, 0, 1886, 0, 0, 0, 1871, 1872,
	0, 1889, 1890, 1891, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 1662, 1086, 2419,
	0, 0, 2421, 0, 0, 1083, 0, 0, 0, 0,
	417, 0, 0, 2186, 0, 0, 0, 0, 0, 0,
	2066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1886, 0, 0, 0, 0, 0, 1877, 2207,
	0, 0, 0, 0, 0, 2186, 0, 0, 0, 0,
	417, 0, 0, 1089, 1090, 1091, 1092, 876, 0, 0,
	0, 765, 1072, 0, 0, 2253, 2253, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	1892, 0, 0, 0, 0, 1101, 1109, 0, 2488, 0,
	0, 0, 0, 1649, 0, 0, 1877, 0, 0, 0,
	1268, 0, 0, 0, 1107, 1887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	1893, 0, 1099, 0, 0, 2504, 2505, 0, 41, 1087,
	0, 0, 417, 0, 0, 0, 0, 0, 1892, 0,
	0, 0, 44, 0, 0, 2522, 0, 0, 1064, 1065,
	0, 764, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 1887, 0, 0, 0, 0, 51, 0,
	0, 1067, 0, 0, 2538, 0, 876, 0, 0, 417,
	0, 1888, 0, 0, 0, 0, 0, 0, 765, 0,
	1093, 0, 0, 0, 2186, 0, 1066, 63, 0, 0,
	0, 0, 1086, 0, 64, 1088, 486, 65, 1064, 1065,
	2488, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 0, 1102, 1097, 0, 0, 876, 876, 876,
	0, 1067, 0, 0, 1108, 417, 0, 0, 0, 1888,
	67, 0, 1742, 764, 0, 0, 0, 0, 0, 2599,
	0, 0, 0, 0, 0, 0, 1066, 1089, 1090, 1091,
	1092, 0, 1086, 0, 0, 0, 1072, 0, 75, 1083,
	0, 1883, 1884, 1885, 2261, 0, 0, 0, 0, 0,
	1882, 1880, 1881, 1873, 1874, 1875, 1876, 1878, 1879, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 1912, 0, 0, 0, 0, 1072, 0, 68, 1883,
	1884, 1885, 0, 1087, 0, 0, 0, 0, 1882, 1880,
	1881, 1873, 1874, 1875, 1876, 1878, 1879, 0, 0, 1101,
	1109, 0, 0, 0, 128, 70, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	764, 141, 0, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 104, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1087, 1093, 0, 0, 0, 0, 0,
	75, 143, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 2469, 2352, 0, 0, 0, 0, 0,
	1098, 2357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 136, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 0, 2461, 1911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2511, 0, 0, 185,
	186, 791, 187, 792, 793, 794, 795, 352, 796, 797,
	798, 799, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 800, 192, 359, 360, 193, 194, 195, 801,
	802, 361, 362, 363, 803, 196, 364, 804, 790, 805,
	197, 198, 199, 2542, 201, 202, 203, 200, 806, 204,
	0, 205, 206, 807, 714, 207, 208, 209, 808, 809,
	811, 810, 812, 813, 814, 210, 211, 418, 212, 365,
	213, 366, 367, 815, 214, 816, 215, 817, 216, 818,
	819, 217, 218, 820, 219, 821, 0, 822, 368, 220,
	222, 221, 223, 369, 370, 823, 715, 824, 0, 1742,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 825,
	227, 826, 827, 716, 828, 228, 374, 829, 375, 830,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	718, 831, 378, 237, 832, 234, 833, 717, 235, 379,
	236, 380, 381, 382, 383, 384, 834, 385, 835, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 836,
	245, 244, 837, 388, 721, 246, 247, 722, 838, 248,
	249, 839, 840, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 841, 842,
	843, 390, 261, 391, 262, 263, 844, 264, 845, 846,
	265, 847, 848, 266, 392, 725, 267, 726, 393, 268,
	269, 270, 271, 272, 849, 273, 394, 274, 395, 275,
	850, 276, 277, 278, 279, 280, 396, 281, 282, 851,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 852, 295, 727, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 853, 308, 309, 398,
	307, 310, 311, 854, 312, 299, 300, 313, 728, 314,
	399, 400, 315, 855, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 856, 323, 857, 324, 325, 326,
	327, 328, 329, 330, 331, 858, 403, 404, 405, 859,
	860, 332, 333, 406, 407, 861, 334, 335, 336, 337,
	862, 863, 338, 339, 340, 341, 864, 342, 865, 408,
	343, 344, 345, 409, 410, 866, 867, 346, 868, 869,
	870, 871, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 0, 0, 0, 1642,
	0, 0, 0, 0, 0, 0, 0, 0, 1643, 185,
	186, 791, 187, 792, 793, 794, 795, 352, 796, 797,
	798, 799, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 800, 192, 359, 360, 193, 194, 195, 801,
	802, 361, 362, 363, 803, 196, 364, 804, 790, 805,
	197, 198, 199, 0, 201, 202, 203, 200, 806, 204,
	0, 205, 206, 807, 714, 207, 208, 209, 808, 809,
	811, 810, 812, 813, 814, 210, 211, 418, 212, 365,
	213, 366, 367, 815, 214, 816, 215, 817, 216, 818,
	819, 217, 218, 820, 219, 821, 0, 822, 368, 220,
	222, 221, 223, 369, 370, 823, 715, 824, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 825,
	227, 826, 827, 716, 828, 228, 374, 829, 375, 830,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	718, 831, 378, 237, 832, 234, 833, 717, 235, 379,
	236, 380, 381, 382, 383, 384, 834, 385, 835, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 836,
	245, 244, 837, 388, 721, 246, 247, 722, 838, 248,
	249, 839, 840, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 841, 842,
	843, 390, 261, 391, 262, 263, 844, 264, 845, 846,
	265, 847, 848, 266, 392, 725, 267, 726, 393, 268,
	269, 270, 271, 272, 849, 273, 394, 274, 395, 275,
	850, 276, 277, 278, 279, 280, 396, 281, 282, 851,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 852, 295, 727, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 853, 308, 309, 398,
	307, 310, 311, 854, 312, 299, 300, 313, 728, 314,
	399, 400, 315, 855, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 856, 323, 857, 324, 325, 326,
	327, 328, 329, 330, 331, 858, 403, 404, 405, 859,
	860, 332, 333, 406, 407, 861, 334, 335, 336, 337,
	862, 863, 338, 339, 340, 341, 864, 342, 865, 408,
	343, 344, 345, 409, 410, 866, 867, 346, 868, 869,
	870, 871, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2312,
	185, 186, 791, 187, 792, 793, 794, 795, 352, 796,
	797, 798, 799, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 800, 192, 359, 360, 193, 194, 195,
	801, 802, 361, 362, 363, 803, 196, 364, 804, 790,
	805, 197, 198, 199, 0, 201, 202, 203, 200, 806,
	204, 0, 205, 206, 807, 714, 207, 208, 209, 808,
	809, 811, 810, 812, 813, 814, 210, 211, 418, 212,
	365, 213, 366, 367, 815, 214, 816, 215, 817, 216,
	818, 819, 217, 218, 820, 219, 821, 0, 822, 368,
	220, 222, 221, 223, 369, 370, 823, 715, 824, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	825, 227, 826, 827, 716, 828, 228, 374, 829, 375,
	830, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 718, 831, 378, 237, 832, 234, 833, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 834, 385, 835,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	836, 245, 244, 837, 388, 721, 246, 247, 722, 838,
	248, 249, 839, 840, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 841,
	842, 843, 390, 261, 391, 262, 263, 844, 264, 845,
	846, 265, 847, 848, 266, 392, 725, 267, 726, 393,
	268, 269, 270, 271, 272, 849, 273, 394, 274, 395,
	275, 850, 276, 277, 278, 279, 280, 396, 281, 282,
	851, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 852, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 853, 308, 309,
	398, 307, 310, 311, 854, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 855, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 856, 323, 857, 324, 325,
	326, 327, 328, 329, 330, 331, 858, 403, 404, 405,
	859, 860, 332, 333, 406, 407, 861, 334, 335, 336,
	337, 862, 863, 338, 339, 340, 341, 864, 342, 865,
	408, 343, 344, 345, 409, 410, 866, 867, 346, 868,
	869, 870, 871, 347, 348, 349, 350, 351, 0, 0,
	785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1241, 185, 186, 791, 187,
	792, 793, 794, 795, 352, 796, 797, 798, 799, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 800,
	192, 359, 360, 193, 194, 195, 801, 802, 361, 362,
	363, 803, 196, 364, 804, 790, 805, 197, 198, 199,
	0, 201, 202, 203, 200, 806, 204, 0, 205, 206,
	807, 714, 207, 208, 209, 808, 809, 811, 810, 812,
	813, 814, 210, 211, 418, 212, 365, 213, 366, 367,
	815, 214, 816, 215, 817, 216, 818, 819, 217, 218,
	820, 219, 821, 0, 822, 368, 220, 222, 221, 223,
	369, 370, 823, 715, 824, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 825, 227, 826, 827,
	716, 828, 228, 374, 829, 375, 830, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 718, 831, 378,
	237, 832, 234, 833, 717, 235, 379, 236, 380, 381,
	382, 383, 384, 834, 385, 835, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 836, 245, 244, 837,
	388, 721, 246, 247, 722, 838, 248, 249, 839, 840,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 841, 842, 843, 390, 261,
	391, 262, 263, 844, 264, 845, 846, 265, 847, 848,
	266, 392, 725, 267, 726, 393, 268, 269, 270, 271,
	272, 849, 273, 394, 274, 395, 275, 850, 276, 277,
	278, 279, 280, 396, 281, 282, 851, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	852, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 853, 308, 309, 398, 307, 310, 311,
	854, 312, 299, 300, 313, 728, 314, 399, 400, 315,
	855, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 856, 323, 857, 324, 325, 326, 327, 328, 329,
	330, 331, 858, 403, 404, 405, 859, 860, 332, 333,
	406, 407, 861, 334, 335, 336, 337, 862, 863, 338,
	339, 340, 341, 864, 342, 865, 408, 343, 344, 345,
	409, 410, 866, 867, 346, 868, 869, 870, 871, 347,
	348, 349, 350, 351, 1541, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 1538, 187, 0, 0, 0, 0,
	669, 634, 0, 0, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 1539, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 1537, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 1540, 185, 186,
	0, 187, 0, 0, 627, 1535, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 615, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 141, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 143, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 940, 708, 0, 0, 346, 0, 0, 0,
	135, 347, 348, 349, 350, 351, 621, 136, 603, 0,
	652, 641, 642, 639, 640, 631, 619, 0, 0, 0,
	0, 617, 618, 0, 0, 0, 185, 186, 0, 187,
	1127, 0, 0, 0, 669, 634, 630, 0, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 141, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 143, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	940, 708, 0, 0, 346, 0, 0, 0, 135, 347,
	348, 349, 350, 351, 621, 136, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 1127, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 141,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 143,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 940, 708, 0, 0,
	346, 0, 0, 0, 135, 347, 348, 349, 350, 351,
	621, 136, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 1127, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 1595, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 1600, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 1596, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 1597,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 611, 0, 652,
	641, 642, 639, 640, 631, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 0, 185, 186, 0, 187, 0,
	627, 0, 0, 669, 634, 0, 630, 0, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 615,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 613, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 0, 652, 641, 642, 639, 640,
	631, 0, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	634, 0, 0, 630, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 2236, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 1188, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 1445, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 1444, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 615, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 613, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 2649, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 2650, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 0, 187, 0,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 615,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 0, 652, 641, 642, 639, 640,
	631, 0, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	634, 0, 0, 630, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 2089, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 1188, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 1600, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 1645, 0, 652, 641, 642, 639, 640, 631,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 0,
	185, 186, 0, 187, 0, 627, 0, 0, 669, 634,
	0, 630, 0, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 1609,
	0, 652, 641, 642, 639, 640, 631, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 0, 185, 186, 0,
	187, 0, 627, 0, 0, 669, 634, 0, 630, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 1607, 0, 652, 641,
	642, 639, 640, 631, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 0, 185, 186, 0, 187, 0, 627,
	0, 0, 669, 634, 0, 630, 0, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 1591, 0, 652, 641, 642, 639, 640,
	631, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 185, 186, 0, 187, 0, 627, 0, 0, 669,
	634, 0, 630, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	1579, 0, 652, 641, 642, 639, 640, 631, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 0, 185, 186,
	0, 187, 0, 627, 0, 0, 669, 634, 0, 630,
	0, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 1577, 0, 1569,
	641, 642, 639, 640, 631, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 0, 185, 186, 0, 187, 0,
	627, 0, 0, 669, 634, 0, 630, 0, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 1572, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 1573, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 1574, 1571, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 1575, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 1570, 351, 621, 1566, 0, 1569, 641, 642, 639,
	640, 631, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 0, 185, 186, 0, 187, 0, 627, 0, 0,
	669, 634, 0, 630, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 1572, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 1573, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 1574, 1571, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 1575, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 1570, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 1432, 187, 1131, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 883, 0, 652, 641, 642, 639, 640,
	631, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 185, 186, 0, 187, 0, 627, 0, 0, 669,
	634, 0, 630, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	881, 0, 652, 641, 642, 639, 640, 631, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 0, 185, 186,
	0, 187, 0, 627, 0, 0, 669, 634, 0, 630,
	0, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 2566, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 2565, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 0, 187, 0, 0, 627, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 0,
	652, 641, 642, 639, 640, 631, 0, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 634, 0, 0, 630, 188,
	189, 190, 2564, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 2566, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 2565, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 0, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 1589, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	1587, 0, 0, 0, 0, 1585, 1586, 0, 185, 186,
	0, 187, 0, 0, 1588, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 0, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 0, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 1589, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	1588, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	0, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 2566, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 0, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 0, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 0, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 2565, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 0, 187, 0, 0, 627, 0, 669, 0,
	0, 0, 630, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 668, 361, 362, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 670, 671, 0, 715, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 0,
	0, 0, 678, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 675, 676, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 933, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 2188, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 790, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 715, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 141, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 728, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 143, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	940, 410, 0, 0, 346, 0, 0, 0, 135, 347,
	348, 349, 350, 351, 603, 136, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 127, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 768, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 141,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 143,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 940, 410, 0, 0,
	346, 0, 0, 0, 135, 347, 348, 349, 350, 351,
	0, 136, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 762, 0, 1210, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 768, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 141, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 143, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 940, 410, 0, 0, 346, 0, 0, 0,
	135, 347, 348, 349, 350, 351, 603, 136, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 762, 0,
	1210, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 141, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 143, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 940, 410,
	0, 0, 346, 0, 0, 0, 135, 347, 348, 349,
	350, 351, 1929, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 127, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	768, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 761, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	762, 0, 767, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 768, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 762, 0, 767, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 762, 0, 767, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 1243,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 1743, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 2104, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 652,
	641, 642, 639, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 1213, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 688, 689, 363,
	0, 196, 364, 0, 790, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 0, 0, 649, 390, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 406,
	407, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 506, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 178, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 177, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 175, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 181, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 178, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 177, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 182, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	181, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 178, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 177, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 182, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 181, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 990,
	0, 936, 994, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 790, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 715, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 728, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 936, 994, 346, 0, 0, 992, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 790, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 715, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 728, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 936, 994, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	790, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 715, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	728, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 936, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 790, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	715, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 728, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	1665, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 1663, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 1707, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 1668, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	1705, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 1667, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 1706, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 182, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 1665, 196, 364, 0, 0, 1660, 197, 198,
	199, 0, 201, 202, 203, 200, 1663, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 1668,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 1659, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 1667, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 1666,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 911, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 768, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 774,
	346, 182, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 776, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 768, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 770, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 772, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 768, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 437,
	346, 182, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 436,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 435, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 182, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 1648,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 182, 2254, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 182, 2254, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 2251, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 768, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 1411, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 1409, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 182, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 185, 186, 1391,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 532, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 969, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 534, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 529,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 1267,
	346, 182, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 1266, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 532, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 969, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 534, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 529,
	404, 405, 0, 0, 332, 970, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 532,
	346, 182, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 523, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	534, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 953,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 529, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 929, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 928, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 926,
	346, 182, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 925, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 922, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 921, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 919,
	346, 182, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 918, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 915, 346, 182, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 914, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 903, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 901, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 900, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 897, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 895, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 890, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 892, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 780, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 782, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 778, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 532, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 523, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	522, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 534, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 524, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 525, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 529, 404, 405, 0,
	0, 332, 527, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 514, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 515, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 512, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 504, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 460, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 182, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 182, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 1976, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 1974, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 182, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 1963, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 182, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 515, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 182, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 1277, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 0, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 182, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 744, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 0, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	0, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 0, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 1066, 0, 0, 0, 0, 0, 1086, 1097, 0,
	0, 0, 0, 0, 1083, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 0, 0, 0, 0,
	1072, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 1101, 1109, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 1066, 0, 0, 0, 0, 0, 1086, 0,
	1863, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 2535, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 2485, 0, 1064,
	1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 2437, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089, 1090,
	1091, 1092, 0, 1097, 0, 0, 0, 1072, 0, 0,
	1067, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 1098, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1109,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1102, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 2407, 0, 1064, 1065, 1102, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	2402, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 2398, 0, 1064,
	1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 2333, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089, 1090,
	1091, 1092, 0, 1097, 0, 0, 0, 1072, 0, 0,
	1067, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 1098, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1109,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1102, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 2299, 0, 1064, 1065, 1102, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	2298, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 2263, 0, 1064,
	1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 2107, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089, 1090,
	1091, 1092, 0, 1097, 0, 0, 0, 1072, 0, 0,
	1067, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 1098, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1109,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1102, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 2083, 0, 1064, 1065, 1102, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	1527, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0, 0,
	1072, 2598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 1833, 0, 0, 0, 1064,
	1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 0, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089, 1090,
	1091, 1092, 0, 1097, 0, 0, 0, 1072, 1806, 1903,
	1067, 0, 1902, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 1807, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 1098, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1109,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1102, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 1624, 0,
	0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 1623, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 0, 0, 1064,
	1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 0, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089, 1090,
	1091, 1092, 0, 1097, 0, 0, 0, 1072, 0, 0,
	1067, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 1098, 0, 0, 0, 1072, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1109,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1102, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2087, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 1904, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 0, 0, 1064,
	1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 1862,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 0, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089, 1090,
	1091, 1092, 0, 1097, 0, 0, 0, 1072, 0, 0,
	1067, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 1098, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1109,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1102, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 1089, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 1072, 0, 0, 1067, 0, 0, 1108, 1064,
	1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	1066, 0, 1067, 0, 0, 1108, 1086, 0, 0, 0,
	0, 0, 0, 1083, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 1099, 1086, 0, 0, 0, 0, 0, 1087,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 1090,
	1091, 1092, 0, 1101, 1109, 0, 0, 1072, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1088, 0, 0, 0, 0,
	1101, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1102, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	1322, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 1093, 0, 0, 0, 0,
	0, 1102, 0, 1330, 1319, 1349, 1308, 1340, 1339, 0,
	1088, 1310, 1309, 0, 0, 0, 0, 0, 1351, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 1337, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 1334, 1332, 1333, 0, 0, 0, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 1318,
	0, 0, 0, 0, 0, 0, 1323, 1321, 1324, 1325,
	1326, 1327, 1328, 0, 1348, 0, 0, 0, 0, 0,
	0, 1312, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 1320, 0, 0, 0, 0, 1330,
	1319, 1349, 1308, 1340, 1339, 0, 0, 1310, 1309, 0,
	0, 0, 0, 0, 1351, 1350, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 1452, 1450, 1451,
	1454, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 1337, 1336, 1315, 0, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 1329, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1332, 1333,
	1313, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 1317, 0, 0, 0,
	0, 1352, 1323, 1321, 1324, 1325, 1326, 1327, 1328, 0,
	1348, 0, 0, 0, 0, 0, 0, 1312, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	1346, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 1352,
}
var sqlPact = [...]int{

	3591, -1000, -9, -1000, -1000, -1000, 148, -1000, -1000, -1000,
	-1000, 147, 146, 144, -1000, 143, 142, 140, 136, 134,
	133, 132, 126, 125, 124, 123, -1000, 122, -1000, -1000,
	-1000, -1000, 118, 114, 113, 111, 110, 109, 108, -1000,
	1356, 22775, 107, 102, 1516, -1000, 36891, 97, 96, 92,
	91, 1184, 83, 81, 78, 26907, 1092, 1824, 77, 75,
	68, 67, 66, 1201, 36549, 4163, 1981, 1195, 1785, 36204,
	22430, 1772, 1456, 35859, -1000, -1000, 35514, 65, 64, 63,
	60, 59, -1000, -1000, 35169, 58, 56, 54, 53, 50,
	49, 48, 47, 46, 44, 40, 38, 37, 35, -1000,
	34, 28, 26, -1000, 3639, 24, 22, 21, 1169, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 973, 103, -1000, 1001, 670, 1646, 8555,
	1105, 1102, 1079, 1059, 1068, 38943, 36891, 20, -34, 18,
	-1000, 2086, 675, 19956, 3591, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26562,
	26217, 34824, 34479, 6416, 814, -1000, -13, 23461, 36891, -1000,
	104, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15328, 14971, 509, 104, -1000, -1000,
	-1000, -1000, -1000, 34134, -1000, 36891, 33789, 33444, 1570, 33099,
	-1000, -1000, -1000, -1000, -1000, 32754, -1000, -1000, 2073, 1766,
	1754, 25872, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32412, 32067, 31722, 31377, 31032, 520,
	-1000, -1000, -1000, 18176, -1000, -1000, -1000, -1000, 17, -1000,
	16, -1000, 15, 13, 12, 11, -1000, 10, 9, -1000,
	8, 6, -1000, 3, -1, 30687, 943, 1342, -1000, -1000,
	-12, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36891,
	-1000, 16040, -1000, 518, -1000, 1692, -1000, 16040, -1000, 1341,
	-1000, -1000, -1000, -1000, -1000, 36891, -1000, -1000, -1000, -1000,
	-1000, -1000, 2330, 1292, 516, 30342, -1000, 1601, -1000, 660,
	728, -1000, -1000, -1000, 9623, 157, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1739, 23817, 1436, 2128, 2067,
	2329, 1548, 2065, 2055, 2049, 2038, 2008, 2328, 1043, 2326,
	2046, 1090, 2324, 1801, 1221, 732, 2321, 1691, 1689, -1000,
	-1000, -1000, -1000, 990, -1000, -1000, -1000, 28275, -1000, -1000,
	886, 963, 1001, -1000, -1000, -1000, 1458, 2095, 2095, 2095,
	2163, 303, 293, -1000, 103, -1000, 1654, -1000, 1272, -1000,
	-1000, -1000, -1000, -1000, 44177, -1000, -1000, 16040, 16040, 16040,
	16040, 16040, 1256, 528, -1000, 513, 510, 7842, -1000, -1000,
	2306, -1000, -1000, -1000, 307, -1000, -1000, 16040, 104, -1000,
	-1000, -1000, -1000, 508, 2316, -1000, 676, -1000, -1000, -1000,
	667, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1714, 507, 506, 505, -1000, 503, -1000, -1000, 502, 501,
	500, 497, 496, 494, 493, 489, 487, 486, 483, 482,
	481, 480, 478, 1208, -1000, 690, -1000, -1000, 690, 690,
	-1000, 451, 451, 452, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 451, -1000, -1000, -1000, 644, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 477,
	1326, -1000, -1000, 1326, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 810, 38259, -15, 36891, -1000, 467, -15, -1000, -1000,
	466, -1000, 11047, 11047, -1000, -1000, -1000, -1000, -1000, 10335,
	2017, -1000, 3862, -192, 308, 617, -1000, 18888, 21730, -1000,
	-1000, 1252, 1933, 874, -1000, 1118, 1921, 543, -1000, 1258,
	-1000, 1191, 1920, -186, 1740, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 24159, 23461, -13, -29, -1000, -1000, -1000, 6060,
	44177, -1000, 44177, -1000, 917, 20666, 104, -1000, -1000, -1000,
	-1000, 465, 1398, 1932, 671, -1000, 316, -1000, 29997, 671,
	1396, -1000, -1000, -1000, 28275, -1000, 36891, -1000, 36891, -1000,
	986, -1000, 38601, 127, 1919, -1000, -1000, 127, 1875, -1000,
	119, 1836, -1000, -1000, 1300, 1810, -1000, -29, 1769, -1000,
	-1000, 16040, -37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	675, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29652, 23118, 1203, 597, 44177, 2217, 44992,
	24159, 44177, 23118, -1000, -1000, 36891, -1000, 16040, -1000, 2215,
	1443, -16, -1000, -1000, -1000, -1000, -1000, 1435, 1457, 798,
	1078, 9623, 9623, 2009, -1000, 156, 6416, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29307, -1000, -1000, -1000, 1235,
	36891, -1000, -1000, 1707, -1000, 23118, 36891, -1000, 36891, -1000,
	36891, -1000, 36891, -1000, 36891, -1000, -1000, -1000, -1000, -1000,
	3242, -1000, 1705, -1000, -1000, 36891, -1000, 1430, -1000, -1000,
	-1000, 28965, 28620, -1000, 1050, 866, -1000, -1000, 128, -1000,
	36891, 2100, 655, -1000, 1458, 1510, 1701, 719, 1309, 1503,
	14614, 1485, 16040, 103, -1000, -1000, 103, 103, 9267, -1000,
	-1000, -1000, 36891, -1000, 44806, 44992, 6416, 834, 16040, 16040,
	16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040,
	16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040,
	16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040,
	1543, 16040, 808, 16040, 16040, 16040, 16040, 1168, 1183, 450,
	1212, -1000, 2264, 2264, 2264, 44552, 44552, 356, 528, -1000,
	16040, -1000, 484, 16040, 293, 41927, -14, 7486, -1000, -1000,
	-1000, 14258, 678, 44177, 104, 6772, -1000, 2305, 1042, 1656,
	1639, 463, 542, 541, 537, 534, 16040, 16040, 13902, 13545,
	13188, 16752, 12831, 16040, 8198, 16040, 16040, 16040, 16040, 12474,
	12117, -1000, 462, -1000, -1000, -1000, -1000, 2304, -1000, -1000,
	2303, -1000, 831, 828, 2302, -1000, -16, -1000, 38259, -1000,
	36891, -15, 2209, 36891, -1000, 117, -1000, 42954, -1000, 117,
	-38, -1000, 1530, 1488, 20311, 1665, 1274, 1274, 1274, -1000,
	453, 564, 617, 5329, 11760, -1000, 27249, 1290, 196, 292,
	18532, 2017, -1000, 36891, -32, 1307, -1000, 25527, 2123, 2068,
	2032, 28275, 2185, 484, 2080, 1683, 806, 28275, 2079, 804,
	2184, 484, 1679, 803, 36891, 6416, 2059, 614, -1000, 36891,
	-1000, -1000, -1000, 1673, -40, -1000, -1000, 25185, 2207, 1768,
	-1000, 1932, -1000, 949, 971, 1567, 971, 908, 971, -1000,
	-1000, 1232, -1000, 2206, 36891, 1335, 1386, -1000, -1000, 860,
	1767, 680, 390, 2205, 390, 21020, -1000, 36891, -1000, 36891,
	-1000, -1000, 36891, -1000, 36891, -1000, 36891, 36891, -1000, 36891,
	36891, -43, 44177, 4774, 24843, 801, -1000, 707, 25185, 1222,
	-48, -1000, 674, -1000, -1000, -1000, -1000, 324, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 452, 1208, 451, 451, 451, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 644, -1000, -1000, 690,
	690, 690, -1000, -1000, -53, -1000, 1669, 619, -51, 739,
	-16, -1000, 1326, -1000, 974, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2314, -1000,
	2288, -1000, -1000, 2300, -18, -1000, -18, -1000, 6416, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36891, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 712, -1000, -1000, -1000, -1000,
	-1000, -1000, 36891, 36891, 36891, -1000, 28275, 672, 1704, -1000,
	2066, 1510, 1701, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44177, -1000, 392, -1000, -1000, 44177, 1226, 1551, -1000,
	1551, -25, -1000, 42677, 1492, 36891, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 653, 932, 932,
	947, 947, 947, 947, 2271, 479, 788, 3058, 190, 190,
	190, 190, 190, 190, 190, 190, 407, 464, 464, 407,
	407, 407, 407, 407, 190, 190, 190, 44552, 44454, 4818,
	16040, 16040, 785, 1170, 450, 4818, 16040, 4818, 4818, 4818,
	4818, -1000, 1374, -1000, -1000, -1000, -1000, 1668, 448, 16752,
	16752, -1000, -1000, -1000, 7842, 17108, -1000, -1000, -1000, -1000,
	447, 16040, -1000, 42204, -224, 290, -121, -1000, 16040, 548,
	-90, -1000, 930, -1000, 16040, -1000, 5, 16040, 16040, 16040,
	287, -1000, 285, -1000, 781, -1000, 780, 779, 777, -1000,
	444, 1271, 438, 437, 16040, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 44079, 39633, 274, -1000, 1663, -121, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 273, -1000, 270, -1000,
	43802, -121, 269, 4648, -1000, 16752, 16752, 16752, 7842, 436,
	265, -1000, 42579, -1000, 43704, 11403, 11403, 11403, 264, 43427,
	16040, -121, 4878, 4614, 4119, -54, -56, -1000, -59, -1000,
	2299, -61, 263, 647, 645, 262, -1000, -1000, 435, -62,
	680, 11047, 19600, 6416, -1000, 680, 10335, -1000, 20311, 20311,
	1378, 1478, 20311, -1000, -1000, -1000, -1000, 27249, 527, 617,
	27249, -1000, 2298, 1504, 261, -1000, -1000, -1000, 36891, 432,
	-1000, 617, 260, 1024, 36891, 36891, 36891, -1000, -1000, 1384,
	37917, 1383, 44992, 36891, -1000, 430, 428, 1490, 1489, 36891,
	36891, 37575, 37233, 36891, 1198, 484, -1000, 642, 425, 36891,
	1116, 638, 36891, 484, -1000, 423, 36891, 1085, -1000, 634,
	1592, 1352, -1000, 902, 1658, 36891, 258, -67, -28, 44992,
	-1000, -1000, -1000, -1000, -1000, 36891, 485, 36891, 484, 36891,
	-1000, -1000, 971, -1000, 2292, -1000, -1000, -1000, -1000, -1000,
	-1000, 971, -1000, 2312, 484, 36891, 1765, 1770, 585, 36891,
	1503, 16040, 1241, -1000, 19244, 700, 36891, 979, 86, -1000,
	-1000, -1000, 608, 36891, -1000, -1000, 127, 127, -1000, 119,
	1300, -29, -1000, 16040, -1000, -1000, 36891, 24159, -70, -1000,
	-1000, 44992, -1000, 409, 799, -1000, 2286, 669, 24159, 36891,
	9623, 9623, -1000, 1538, -1000, -1000, 1005, -1000, 1138, -1000,
	-1000, -1000, -1000, 9623, -1000, -33, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1302, 1228, -1000, -1000, -1000, 1226, -1000,
	16040, -1000, -1000, -1000, 9267, -1000, -1000, -1000, 36891, -191,
	16040, 4818, 4818, 16040, 16752, 16752, -1000, 4818, -1000, -1000,
	-1000, -1000, -1000, 1653, 420, 16040, 44992, 4590, 3032, -79,
	-1000, 16040, -30, -1000, 16040, -1000, 41829, -1000, -1000, 352,
	1757, -1000, 16040, 43329, 255, 10691, -1000, 43052, -5, -5,
	-1000, 2311, 1412, 1280, 1160, 1036, 2282, -1000, 21375, 681,
	1294, 41552, 44806, 44992, -1000, 16040, -1000, -1000, 1652, 16040,
	-1000, 44806, 44992, 16752, 16752, 16752, 16752, 16752, 16752, 16752,
	16752, 16752, 16752, 16752, 16752, 16752, 16752, 16752, 16752, 16752,
	16752, 16752, 1445, 16752, 2243, 2243, 2243, -31, 16040, -1000,
	1675, 1652, 16040, 16040, 44992, 245, 244, 240, -1000, 16040,
	-121, 16040, 16040, 16040, -1000, -1000, -1000, 239, -1000, 2278,
	-1000, -1000, -1000, -1000, 1222, -1000, 1638, -1000, -72, -1000,
	2017, -1000, 1638, -1000, -1000, 1378, -1000, 419, 16040, 20311,
	-1000, 547, -1000, -87, -1000, 27249, -1000, 545, -221, -1000,
	601, -1000, 617, 418, 36891, 27249, -1000, -1000, -1000, 776,
	775, 1759, -1000, 1381, -1000, 684, -1000, 1209, 16040, 17820,
	415, 414, 1202, -1000, 1756, 1300, 1752, 1300, -1000, -32,
	1193, -1000, 22085, 16040, -1000, 773, 22085, -1000, -1000, 16040,
	-1000, 769, 22085, 669, 1649, 888, -1000, 899, -1000, 1575,
	-1000, 25185, 412, 36891, 411, -1000, 408, -1000, -1000, -1000,
	-1000, 406, 36891, 1449, 585, 24501, -1000, 671, 979, -1000,
	44177, -1000, 979, 8911, 2045, -93, -1000, -1000, -1000, 680,
	21020, 20311, 10335, -94, -1000, -1000, -1000, -1000, 44177, -33,
	2014, 2014, -1000, 2262, -1000, 538, 228, -1000, 27933, -1000,
	-33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36891, 1560,
	6416, 36891, 36891, 1304, 41454, -1000, 2041, 6416, 2201, 4818,
	560, 242, 16040, 44992, 44579, -100, 16040, 16040, -1000, 227,
	16040, 530, 44177, -1000, -1000, -1000, 44177, 16040, 2309, 16040,
	226, 225, 218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 216, -1000, -1000, 39285, 16040, 215, -1000, 214, 211,
	44177, 1675, 44177, -1000, -1000, 574, 574, 958, 958, 958,
	958, 2243, 1600, 699, 765, 259, 259, 259, 1375, 742,
	742, 259, 259, 259, 1648, 1506, 391, 2922, 16040, 210,
	-1000, -1000, 44177, 44177, 208, -1000, -1000, -1000, -121, 350,
	41177, 41079, -1000, 207, 206, 1631, 2153, -1000, 20311, 1631,
	-1000, 36891, 44177, -1000, -192, -1000, 2260, -1000, -1000, 1504,
	-1000, 5699, 27249, 36891, -103, -1000, 36891, 36891, 36891, 1749,
	-1000, 2051, -1000, 40802, -109, -1000, 321, 2111, 16040, -1000,
	-1000, 389, 17820, 36891, -1000, 1514, 1713, 727, 36891, -1000,
	36891, -1000, 36891, 36891, 36891, -1000, 385, 104, -111, 36891,
	-1000, -112, 36891, -1000, -1000, 24159, 827, -1000, 1257, 1580,
	-1000, 17820, 380, 36891, 25185, 2200, 17820, 1332, 1451, 585,
	24501, -1000, 860, -1000, -1000, -39, -1000, 359, 484, 979,
	-1000, -50, -1000, 599, 1996, -1000, 1993, 525, -1000, -1000,
	-68, 377, -1000, 596, 590, -1000, -73, -1000, 558, -1000,
	-1000, -1000, -1000, -1000, -1000, 2041, 16040, 16040, 44579, -122,
	-1000, 4818, 4818, -1000, 40704, -1000, 44177, -1000, 43052, -1000,
	-1000, -1000, -1000, 1245, -1000, 40427, -1000, -1000, -1000, -1000,
	16752, 1645, 376, 44992, 40329, -1000, -1000, 16040, -1000, -1000,
	-1000, -1000, 677, 16040, 16040, 2017, 677, -123, 617, -1000,
	-1000, -1000, 2254, -1000, -124, -1000, -1000, -1000, -1000, 36891,
	-1000, 36891, -1000, 6416, 36891, 1672, 1372, -1000, -1000, 1466,
	374, 16752, 36891, -1000, 1140, 17820, 2041, 104, 6416, 2041,
	40052, 6772, -125, -136, 1369, -1000, 1362, 16040, -1000, 44992,
	1300, 1300, -1000, 767, 764, 16040, 760, -1000, 749, -1000,
	-82, 22085, -1000, -1000, 2152, 1224, -138, 17820, -141, 194,
	484, -144, 36891, -1000, 585, 24501, -1000, 1770, 1952, 36891,
	2030, -1000, -1000, 372, 369, 366, -1000, 27591, 27591, 24159,
	24159, 1560, -1000, 36891, -1000, 4818, 4818, -1000, -1000, 193,
	1294, 2143, -1000, 288, 16752, 44992, -146, -1000, 39954, -1000,
	36891, 44177, -121, -1000, -1000, 27249, 523, -1000, -1000, 1346,
	-1000, -1000, 36891, 1377, -1000, -1000, 16040, 2922, 357, 1575,
	354, -1000, -1000, -1000, -1000, -1000, -1000, 2111, 5, -1000,
	1128, -1000, -1000, 44177, 2076, -1000, -1000, 36891, 36891, -5,
	351, 349, -1000, 1247, 36891, 1140, -147, -1000, 1575, -1000,
	1140, 347, 24501, -1000, 1449, 840, -149, 36891, -1000, -1000,
	7128, 24159, 24159, -1000, -152, -1000, -1000, -1000, -154, -1000,
	1126, 16040, 288, -166, -1000, -1000, -114, -1000, 2196, -1000,
	-1000, -1000, -1000, 1742, 39672, 1388, 36891, -1000, 36891, 2041,
	186, 36891, 704, 6416, -1000, -1000, 173, 16040, 16040, 325,
	322, 319, 1575, 1140, -1000, 1575, 17820, -1000, 1451, 967,
	-1000, 680, -1000, -167, -172, -1000, -1000, 168, 16396, 16396,
	-121, -1000, 36891, 318, 1731, -1000, 1313, 1308, 166, -173,
	-1000, -1000, 316, -1000, 16040, -1000, 2309, -178, -188, 36891,
	36891, 36891, -1000, 1575, -1000, -189, -1000, 21020, -1000, 669,
	669, -1000, -1000, -1000, 17464, 1339, 1055, 42302, -1000, -1000,
	-1000, 36891, -1000, 1330, 1327, 981, -1000, -1000, -1000, -1000,
	-1000, 1388, 44177, -1000, -1000, -194, -195, -196, -1000, 1140,
	-160, -1000, -1000, 2222, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1974, -1000, 717, 1420, 1420, 1313, 314, 313, 1282,
	1575, -1000, 15684, -1000, 2232, -1000, -1000, 1475, -1000, -1000,
	1240, 1229, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	164, 6416, 163, 6416, -1000, 698, -1000, 696, 311, 1439,
	-49, 9979, 844, 310, -183, -1000, -201, -1000, 44177, -1000,
	-1000, 309, -1000, 9979, 1240, -1000, 9979, 9979, -202, -1000,
	-1000, -203, -1000, -57, 1229, -184, -1000, -1000, 1229, -1000,
}
var sqlPgo = [...]int{

	0, 2717, 2716, 1798, 2155, 2713, 2708, 2707, 2706, 2705,
	2704, 2701, 2700, 2699, 2698, 2697, 2695, 2694, 2692, 2690,
	2689, 2688, 2687, 2686, 2152, 2685, 2143, 2682, 2680, 2679,
	2678, 2676, 28, 2675, 2674, 2123, 2673, 2672, 2671, 2669,
	2665, 2664, 2663, 2121, 2659, 2118, 2658, 2651, 2649, 2648,
	2647, 2110, 2641, 90, 114, 2096, 2640, 2639, 2044, 2035,
	2025, 2638, 2005, 2636, 2633, 1997, 1991, 2631, 79, 2630,
	2629, 2628, 1986, 1953, 2627, 2626, 2624, 159, 2619, 1936,
	2614, 2613, 2611, 2610, 2609, 2605, 2604, 2603, 2602, 2601,
	2599, 2594, 2593, 2592, 2590, 2589, 2585, 2584, 2581, 163,
	2580, 2576, 1872, 1855, 2571, 2570, 37, 43, 13, 60,
	27, 152, 2709, 142, 2564, 2563, 2562, 2559, 2557, 2547,
	24, 100, 98, 2544, 63, 2542, 2540, 53, 57, 23,
	15, 2539, 93, 2537, 2531, 2357, 30, 2522, 2521, 138,
	2519, 50, 26, 2891, 161, 157, 113, 128, 2518, 2517,
	2516, 55, 121, 7, 4, 3, 6, 1, 2514, 2,
	5, 2513, 2512, 17, 86, 76, 2510, 29, 46, 2509,
	2508, 131, 2505, 61, 94, 1640, 126, 139, 244, 97,
	2500, 62, 19, 64, 2495, 2492, 165, 40, 2491, 52,
	81, 147, 112, 2490, 54, 2489, 2487, 122, 106, 164,
	130, 75, 134, 148, 2486, 2485, 2484, 116, 2483, 127,
	95, 2482, 2481, 73, 2480, 99, 141, 2478, 143, 110,
	2476, 2475, 115, 2471, 132, 2470, 2469, 162, 154, 118,
	18, 78, 72, 16, 1639, 1634, 135, 92, 58, 45,
	2465, 811, 1259, 1132, 83, 104, 91, 69, 105, 59,
	101, 150, 33, 2462, 2460, 140, 2459, 2458, 2457, 2456,
	2454, 103, 2447, 2444, 32, 2443, 82, 36, 41, 107,
	38, 68, 129, 111, 160, 102, 2441, 66, 124, 2421,
	117, 2406, 2405, 1618, 120, 2403, 2401, 2396, 1327, 1304,
	1167, 285, 2395, 2384, 1098, 1049, 2382, 2381, 89, 2379,
	119, 109, 149, 146, 145, 21, 2377, 123, 48, 2375,
	39, 34, 0, 480, 230, 2372, 125, 84, 2371, 2368,
	2367, 2365, 31, 9, 8, 11, 14, 12, 51, 49,
	2363, 2362, 133, 87, 67, 2358, 158, 2356, 2354, 2353,
	44, 2352, 20, 2348, 22, 2347, 2344, 25, 10, 2343,
	2342, 151, 2341, 96, 2338, 2094, 2337, 156, 2336, 2335,
	2027, 2334, 35, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 122, 122, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 119, 119, 124, 124, 124, 126, 126,
	123, 123, 118, 118, 24, 24, 66, 66, 109, 59,
	59, 59, 310, 310, 311, 311, 105, 105, 106, 106,
	106, 106, 107, 107, 108, 108, 108, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 43, 43, 44, 44, 44,
	44, 44, 44, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 50, 50, 50, 48, 48, 48,
	47, 47, 47, 46, 46, 46, 49, 49, 49, 177,
	177, 176, 176, 180, 180, 51, 51, 51, 51, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 54, 54, 54, 54, 54,
	54, 54, 279, 279, 278, 52, 52, 253, 253, 55,
	55, 208, 208, 56, 56, 56, 56, 56, 57, 57,
	67, 67, 351, 351, 351, 355, 355, 356, 356, 357,
	357, 357, 357, 357, 357, 357, 353, 353, 62, 62,
	62, 62, 63, 63, 63, 64, 64, 104, 104, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 29, 30,
	30, 31, 31, 32, 32, 73, 73, 73, 75, 72,
	72, 72, 74, 74, 74, 74, 76, 76, 77, 77,
	77, 77, 77, 78, 78, 304, 302, 302, 303, 303,
	149, 149, 149, 149, 149, 150, 150, 150, 309, 309,
	309, 309, 309, 309, 308, 308, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 91, 91, 91, 99, 99, 99, 99,
	99, 99, 99, 80, 80, 85, 85, 85, 85, 85,
	81, 81, 86, 86, 87, 87, 88, 88, 88, 88,
	88, 88, 82, 82, 82, 82, 90, 90, 90, 90,
	89, 89, 95, 95, 95, 95, 95, 95, 92, 92,
	92, 92, 93, 93, 93, 96, 96, 96, 96, 83,
	83, 84, 84, 97, 97, 98, 98, 98, 98, 98,
	94, 94, 94, 352, 352, 354, 354, 60, 60, 38,
	38, 39, 39, 151, 151, 152, 152, 232, 232, 232,
	232, 153, 153, 125, 125, 125, 154, 154, 155, 155,
	156, 156, 156, 158, 158, 159, 159, 160, 160, 160,
	157, 157, 157, 231, 320, 320, 321, 321, 321, 321,
	321, 321, 322, 322, 322, 322, 322, 322, 322, 318,
	318, 319, 316, 316, 317, 317, 317, 317, 358, 358,
	230, 230, 163, 163, 323, 323, 323, 323, 324, 324,
	324, 324, 324, 327, 326, 325, 325, 325, 325, 325,
	265, 265, 265, 42, 196, 196, 195, 195, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 198,
	101, 101, 40, 40, 131, 131, 41, 41, 37, 37,
	37, 212, 212, 167, 167, 270, 270, 270, 142, 142,
	120, 120, 120, 17, 13, 13, 13, 13, 13, 13,
	23, 23, 21, 21, 213, 213, 214, 214, 61, 61,
	65, 65, 70, 70, 100, 100, 100, 100, 100, 100,
	25, 25, 25, 25, 33, 33, 33, 33, 69, 69,
	360, 360, 138, 138, 138, 138, 139, 139, 227, 227,
	228, 228, 361, 361, 229, 229, 229, 133, 132, 134,
	134, 36, 36, 36, 127, 127, 128, 128, 129, 129,
	130, 130, 362, 362, 58, 58, 58, 103, 103, 145,
	145, 224, 224, 224, 226, 226, 225, 225, 225, 194,
	194, 194, 102, 102, 172, 172, 182, 182, 183, 183,
	276, 184, 184, 68, 68, 112, 112, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 111, 113, 113,
	113, 113, 113, 113, 113, 116, 116, 116, 117, 117,
	117, 115, 115, 333, 333, 333, 336, 336, 332, 334,
	334, 335, 335, 359, 359, 199, 199, 199, 162, 161,
	161, 165, 165, 164, 166, 166, 269, 269, 269, 192,
	192, 191, 191, 191, 191, 217, 217, 215, 215, 216,
	216, 220, 220, 221, 221, 221, 222, 222, 223, 223,
	190, 190, 249, 249, 219, 219, 218, 114, 114, 114,
	171, 171, 171, 173, 173, 239, 239, 239, 240, 240,
	238, 238, 238, 238, 271, 271, 271, 271, 271, 271,
	271, 271, 349, 349, 349, 350, 350, 268, 268, 272,
	272, 272, 272, 272, 272, 266, 266, 266, 266, 267,
	267, 277, 277, 202, 202, 202, 202, 200, 200, 201,
	201, 273, 273, 273, 273, 193, 193, 274, 274, 274,
	233, 233, 280, 280, 280, 298, 298, 170, 170, 170,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 282, 282, 282, 282, 284, 284, 284, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 297, 297, 297, 297,
	297, 285, 285, 292, 292, 293, 293, 294, 295, 286,
	286, 287, 287, 288, 289, 296, 296, 296, 296, 300,
	300, 290, 290, 290, 290, 290, 291, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 210, 210, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 243, 243, 243, 243, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	328, 328, 328, 328, 328, 328, 328, 328, 330, 330,
	331, 331, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 337, 337, 338, 338, 340, 340, 341, 341,
	342, 343, 343, 343, 344, 345, 345, 339, 339, 346,
	346, 346, 347, 347, 348, 348, 348, 348, 348, 255,
	255, 256, 257, 263, 263, 263, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 140, 140, 140, 140, 140, 179, 179, 178,
	178, 252, 252, 250, 250, 254, 254, 203, 203, 299,
	299, 299, 299, 299, 299, 299, 204, 204, 204, 211,
	205, 205, 206, 206, 206, 206, 206, 246, 247, 207,
	207, 207, 248, 248, 258, 262, 262, 261, 260, 260,
	259, 259, 236, 236, 237, 237, 235, 234, 187, 187,
	186, 186, 185, 185, 363, 363, 264, 264, 188, 188,
	189, 181, 181, 275, 275, 275, 275, 174, 174, 147,
	147, 175, 175, 143, 143, 146, 146, 144, 144, 144,
	144, 168, 168, 169, 169, 141, 141, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 301, 301,
	301, 251, 135, 135, 135, 136, 136, 137, 137, 306,
	306, 306, 307, 307, 307, 307, 305, 305, 305, 305,
	305, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 1, 4,
	7, 1, 3, 2, 4, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 8,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 1, 0, 9, 9,
	6, 7, 5, 3, 5, 1, 3, 1, 1, 1,
	10, 11, 9, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 1, 0, 1, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 2, 1, 2, 1,
	4, 2, 4, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 4,
	4, 2, 3, 5, 5, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 1,
	0, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 1, 0, 2, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -24, -26, -29, -34,
	-35, -56, -43, -44, -45, -55, -51, -57, -58, -59,
	-60, -52, -66, -65, -67, -70, -68, -61, -62, -71,
	-79, -100, -101, -102, -103, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 48, -30, 72, -36, -37, -38,
	-39, 74, -40, -41, -42, 95, -335, 99, -46, -47,
	-48, -50, -49, 103, 110, 113, 135, 146, 234, 240,
	261, 263, 265, 272, -110, -112, 259, -63, -64, -72,
	-73, -74, -75, -104, 285, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, -98, 288, -25, -33, -69, 327, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 112, -333, -113, -111, 382, 260, 336,
	35, 297, 62, 106, 267, 352, 359, -116, -114, -115,
	-117, 277, 344, 307, 386, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 2, 307,
	347, 88, 155, 245, -351, 2, -175, 307, 88, -144,
	-135, 375, 4, -312, -314, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 146, 147, 148, 156, 159, 161, 154, 171, 172,
	173, 177, 178, 179, 182, 181, 186, 187, 190, 191,
	194, 196, 199, 197, 200, 203, 201, 205, 206, 208,
	207, 213, 215, 216, 218, 221, 224, 227, 230, 231,
	232, 233, 234, 236, 238, 240, 242, 243, 244, 245,
	246, 248, 249, 251, 252, 253, 254, 255, 259, 257,
	258, 260, 261, 262, 263, 265, 267, 268, 270, 286,
	287, 298, 272, 273, 274, 275, 276, 281, 278, 279,
	282, 283, 285, 288, 290, 293, 296, 297, 299, 302,
	303, 300, 295, 306, 308, 309, 310, 311, 312, 313,
	314, 315, 322, 323, 327, 328, 329, 330, 333, 334,
	335, 336, 338, 341, 342, 343, 348, 353, 354, 355,
	356, 357, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 149, 150, 153, 160,
	162, 163, 164, 165, 166, 168, 175, 176, 184, 202,
	212, 214, 225, 229, 237, 239, 247, 269, 280, 291,
	292, 301, 304, 317, 318, 319, 324, 325, 340, 344,
	345, 385, 385, 2, 172, 244, -143, -135, 88, 385,
	385, 385, 385, 307, 2, 278, 337, 347, -212, 88,
	332, 385, 385, 385, -135, 240, 22, 2, 97, 159,
	335, 334, 22, 236, 279, 309, 311, 2, 385, 385,
	385, 385, 385, 2, 347, 307, 155, 88, 337, -135,
	2, -54, 2, 382, -53, -4, -35, -45, -55, -51,
	-24, -26, -43, -59, -58, -60, -62, -66, -65, -68,
	-72, -73, -79, -102, -103, 285, 112, -355, 2, 22,
	-356, -357, 74, 103, 135, 277, 159, 97, 334, 307,
	2, 172, 2, -135, 2, -351, 2, 172, 2, -355,
	2, -135, 2, -139, 2, 272, -135, 385, 385, 385,
	385, 385, 191, 56, 269, 282, -77, 323, -76, 317,
	-304, -78, 2, -176, 203, -135, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 2, -99, 282, 34, 56, 22, 61,
	89, 136, 155, 156, 178, 69, 70, 243, 191, 173,
	322, 179, 283, 308, 323, 74, 338, 312, 111, 4,
	88, 203, 284, 317, 385, 385, 385, -359, 2, 307,
	274, 288, -111, -113, -112, -164, -165, 331, 167, 108,
	223, -110, -112, 2, -333, -99, 282, 2, 56, 22,
	-302, 2, -264, 219, -241, 94, -243, 373, 374, 368,
	209, 358, -255, -245, -258, 109, 269, 382, -143, -244,
	388, 9, -330, -112, 29, -256, -257, 50, -135, 7,
	8, 5, 6, -141, -282, -251, -291, 326, 116, 211,
	-328, -329, 4, -312, -306, -283, -293, -287, -290, 168,
	59, 80, 81, 84, 82, 85, 284, 337, 51, 28,
	114, 115, 229, 237, 304, 324, 325, 149, 212, 150,
	57, 137, 184, 102, 37, 39, 41, 42, 52, 53,
	90, 92, 93, 125, 126, 127, 160, 162, 163, 164,
	165, 166, 214, 247, 291, 301, 318, 319, 345, -313,
	-294, -295, -288, -289, 75, 117, 134, 158, 151, 170,
	174, 185, 188, 198, 204, 226, 228, 266, 289, -296,
	-360, 2, 323, 323, 2, -360, 2, -360, 2, -138,
	2, 323, 320, -336, 248, -332, -135, -336, 385, 385,
	387, 385, -161, -162, 2, 22, 100, -189, 2, 382,
	-271, 2, 380, -273, -143, -112, -272, 382, 220, -3,
	2, -273, 149, -143, 2, -273, 149, -143, 2, -135,
	2, -146, 149, -143, -305, 4, -312, -314, -313, -315,
	59, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 50, 51, 55, 58, 60, 69, 74, 79, 80,
	82, 81, 83, 84, 85, 94, 96, 98, 100, 101,
	104, 106, 108, 116, 118, 130, 132, 133, 135, 138,
	140, 152, 155, 157, 167, 169, 180, 183, 189, 192,
	193, 209, 210, 211, 217, 219, 220, 222, 223, 235,
	241, 250, 264, 277, 284, 294, 305, 307, 316, 320,
	321, 326, 331, 332, 337, 339, 346, 347, 349, 350,
	351, 352, 320, 387, -175, -168, -135, -235, -234, 384,
	-241, 2, -241, 2, 133, 382, -186, -187, -234, -235,
	2, -176, 149, -176, -135, 2, -176, 2, 155, -135,
	149, 2, -135, 22, 133, 2, 169, 2, 169, 2,
	-274, 2, -273, -177, 149, 2, -176, -177, 149, 2,
	-147, 149, 2, -146, -135, 149, 2, -168, 149, 2,
	-208, 382, -279, 2, -278, -307, 4, -312, -314, -313,
	344, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 282, 219, 387, -176, -241, -253, 382,
	133, -241, 219, -135, 2, 286, 2, 382, -77, 54,
	323, -228, 2, -229, -132, -133, -134, 171, 242, 246,
	357, 320, 363, 133, -302, -180, 384, -99, 2, -310,
	2, -308, 9, -307, 5, 286, 2, 243, 283, 56,
	133, 2, 2, -352, 2, 219, 133, 2, 133, 2,
	133, 2, 133, 2, 133, 2, 2, 243, 283, 2,
	130, 2, 322, 2, 2, 133, 2, 171, 242, 298,
	2, 307, 347, 2, 133, 133, 357, 2, -193, -273,
	307, 357, 22, -164, -165, -218, -191, 130, -215, -216,
	189, 118, 217, -199, 22, 100, -199, -199, 44, 383,
	383, -99, 286, 2, 10, 11, 58, 33, 373, 374,
	375, 376, 128, 377, 378, 371, 372, 370, 361, 362,
	365, 366, 367, 71, 364, 363, 64, 195, 271, 119,
	120, 121, 122, 256, 13, 14, 15, 26, 222, 188,
	358, 151, 289, 368, 16, 17, 18, 170, 36, 152,
	-140, -148, -241, -241, -241, -241, -241, 228, -185, -236,
	380, -112, 382, 382, -112, -241, -178, 382, 7, -112,
	-250, 380, -259, -241, -186, 382, 5, 382, 5, -337,
	353, 130, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 239, -300, 348, -300, -300, -284, 382, -284, -285,
	382, -284, 354, 359, 382, -227, -228, -227, 320, -139,
	387, -336, -169, 382, -189, -181, -275, -241, 375, -181,
	-188, -264, 75, -202, 174, 204, 134, 185, 266, 158,
	7, -54, -238, 388, 382, 375, -268, 359, -112, -272,
	382, -271, -143, 382, -122, 257, -121, 21, 23, 103,
	342, 109, 295, 313, 112, 273, 257, 109, 112, 257,
	295, 313, 273, 257, 109, 388, 112, -310, -144, 387,
	-305, 375, 299, 383, -174, -143, -187, 382, -163, 209,
	-196, -195, -197, 147, 197, 206, 198, 297, 47, 86,
	-131, -334, 352, -163, 382, -136, 149, 2, -135, -334,
	209, -274, -145, -143, -145, 285, -135, 30, -124, 387,
	49, 262, 109, -124, 109, -124, 387, 109, -124, 109,
	109, -178, -241, 383, 387, -351, -357, 74, 382, 30,
	-252, -280, -281, -283, -292, -286, -290, -291, 40, 46,
	45, 176, 175, 314, 202, 280, 292, 340, 153, 38,
	218, 161, 4, 160, 162, 163, 164, 165, 166, 291,
	37, 247, 126, 127, 125, 102, 93, 92, 214, 42,
	41, -294, -295, -288, -289, 90, 318, 319, 168, 39,
	53, 52, 345, 301, -311, -310, -351, -304, -178, 30,
	-228, 2, -361, 387, 187, -150, 194, 208, 142, 220,
	355, -309, 5, 4, -251, -265, 94, 191, -291, 8,
	374, -301, 7, 373, -303, -302, -303, 78, 384, -305,
	-176, 22, 287, 2, -304, -354, 130, -351, -304, -304,
	-304, -304, -304, 282, -54, 130, -135, 187, -304, 2,
	-304, 2, 307, 155, 307, -124, 387, -143, 65, 66,
	357, -218, -191, -192, -191, -219, -218, 334, -216, -215,
	-220, -241, 22, -223, 124, 205, -241, -243, -111, -111,
	-111, -166, -269, -241, 241, 155, -304, -298, -280, -297,
	252, 253, 251, 255, 254, -280, -305, 317, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	188, 151, 289, 36, 152, -241, 320, -241, -241, -241,
	-241, 201, 209, 211, 326, 116, 333, 100, 215, -363,
	305, 32, -248, -112, 382, -263, 27, 294, 22, -255,
	269, 382, -236, -241, -237, -179, -178, 383, 387, -179,
	-254, -250, -262, -261, 349, 383, -178, 346, 22, 100,
	375, 2, 7, -209, 356, 200, 91, 143, 199, -210,
	276, -338, 123, 138, 382, 383, 2, 383, 2, 383,
	2, 383, 2, -241, -241, -203, 2, -299, -178, 4,
	356, 200, 91, 143, 199, 276, -203, 2, -204, 2,
	-241, -178, -205, -242, -243, 373, 374, 368, 382, 269,
	-206, 2, -241, -179, -241, 43, 183, 321, -207, -241,
	133, -178, -241, -241, -241, -178, -178, 2, -178, 2,
	382, 7, 7, 317, 317, 7, -139, -332, 30, -168,
	-171, 387, 133, 30, 4, -171, 387, 383, 174, 174,
	-271, -202, 174, -200, 226, -200, -200, -349, 382, 381,
	-268, -305, 380, 389, -179, 2, -267, -266, 30, -135,
	224, 383, -143, 387, 320, -213, 69, 60, -231, 149,
	60, -316, -135, 69, -317, 55, 332, 241, 132, -213,
	69, -213, 69, 69, -273, 33, -68, 67, 133, 320,
	-273, 67, 320, 33, -68, 133, 320, -146, -305, 67,
	-277, 360, -135, 133, 383, 387, -151, -168, -152, -135,
	-232, -231, -318, -319, -316, 155, 332, 117, 30, 109,
	-197, -198, 44, -301, 374, -198, 197, 198, 86, -198,
	-198, 352, -198, 233, 30, 219, 209, -127, 310, 109,
	-233, 350, -224, -68, 382, 94, 30, -224, -182, -183,
	-276, -184, -143, 382, -135, -176, -177, -177, -146, -147,
	-135, -168, 383, 387, -54, -278, 320, 339, -152, -53,
	383, 387, -170, 29, 380, -209, 382, -277, 387, 133,
	363, 320, 383, 323, -229, -149, 246, 293, 258, 281,
	8, 7, 7, 387, -305, -353, -135, 282, -54, -143,
	-146, -143, -273, 352, 130, 66, -192, -219, -221, -301,
	382, -222, 269, 270, 387, -120, 31, 98, 177, -143,
	357, -241, -241, 320, -363, 305, -248, -241, 201, 211,
	326, 116, 333, 100, 215, 133, 382, -242, -242, -178,
	-245, 382, -178, 381, 391, 383, -241, 381, 381, 387,
	-260, -261, 104, -241, -165, 387, -164, -241, -178, -178,
	383, 383, 320, 320, 320, 320, 382, -343, 227, 382,
	382, -241, 30, 387, 383, 133, 383, 383, -211, 235,
	383, 10, 11, 373, 374, 375, 376, 128, 377, 378,
	371, 372, 370, 361, 362, 363, 64, 195, 271, 13,
	14, 15, 170, 152, -242, -242, -242, -178, 382, 383,
	-246, -247, 133, 130, 30, -207, -207, -207, 383, 133,
	-178, 387, 387, 387, 383, 383, 383, 7, 383, 387,
	383, 357, 357, 383, 382, 383, -233, -275, -173, 2,
	-271, -305, -233, -264, -271, -271, -201, 339, 219, 174,
	-271, -266, 383, -350, 7, -268, -267, 7, -240, -239,
	131, 207, 383, -135, 382, -268, 383, -121, -143, -135,
	-135, 209, -231, 149, -126, 209, -280, -135, 382, 382,
	177, 177, -135, -135, 149, -135, 149, -135, -135, -122,
	257, -68, 357, 382, -143, 257, 357, -135, -68, 382,
	-135, 257, 357, -105, 148, 215, 299, 133, -143, 383,
	383, 387, -136, 155, -136, -68, -176, -198, -198, 5,
	-68, -143, 109, -128, 105, -362, 363, -135, -217, -215,
	-241, -194, -226, 264, 219, -174, 344, -135, -194, -172,
	387, 133, 363, -174, -124, -124, -124, -124, -241, -353,
	-310, 383, -280, 380, 381, 7, 7, -108, 352, -310,
	-353, -302, -302, -132, 330, 63, 246, -302, 387, 221,
	245, 88, 307, -222, -241, -269, -143, 388, -241, -241,
	-242, -242, 133, 382, -241, -252, 26, 26, 383, -179,
	387, -237, -241, 383, -250, 106, -241, 316, 383, 346,
	-165, -165, -165, 5, 200, 143, 199, -210, 199, -210,
	-210, 7, -344, -135, 382, 350, -164, 383, -298, -280,
	-241, -246, -241, -298, -280, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, 100, 209, 215, -242, 387, -179,
	-247, -246, -241, -241, -280, 383, 383, 383, -178, -241,
	-241, -241, 383, 7, -53, -190, 138, -277, 387, -190,
	-201, 382, -241, -271, 381, 383, 387, -267, 381, 387,
	390, 363, -268, 382, -168, -266, 320, 320, 109, 209,
	341, -320, -317, -241, -167, -270, -135, -331, 382, -328,
	-329, -141, 382, 382, -119, 103, 285, -214, 109, -124,
	109, -124, 320, -213, 69, -244, -141, -135, -178, 320,
	-244, -178, 320, -244, -108, 133, 306, 299, -153, 154,
	-232, 382, -136, 382, 382, -163, 382, -135, -129, 182,
	-362, -308, -334, -194, -194, -181, 210, 68, 383, -233,
	-183, -173, -264, 383, -109, 76, -109, 7, 381, 383,
	-107, 221, -106, -135, 5, -135, -31, -32, 155, -305,
	-135, -143, 220, 383, -120, -305, 26, 26, -241, -252,
	383, -241, -241, 383, -241, 381, -241, 5, -241, 383,
	383, 383, 383, -345, -135, -241, 383, 383, 383, -247,
	133, 100, 215, 382, -241, 383, 383, 387, 383, 383,
	383, 383, -249, 140, 44, -271, -249, -168, -238, 7,
	-239, -305, 380, -267, -168, 383, -135, -135, -231, 109,
	-321, 69, -322, 58, 117, 74, 209, 211, 332, 241,
	55, 94, 250, 383, 383, 387, -142, -186, 58, -142,
	-241, 382, -167, -168, 209, 94, 209, 94, 87, 328,
	-135, -135, -143, -135, -135, 382, 383, -143, 383, -135,
	-311, 317, -154, -155, 232, 152, -167, 382, -168, -151,
	30, -167, 219, -130, 181, -362, -308, -127, -225, 382,
	219, -68, -194, 363, 87, 87, 381, 387, 382, 363,
	363, 387, 22, 382, -120, -241, -241, 383, 383, -165,
	-339, 232, 383, -242, 133, 382, -252, 383, -241, -340,
	351, -241, -178, -340, 383, -268, 7, 383, -231, -135,
	-305, -135, 117, 149, 211, 177, 382, -242, -143, -230,
	-358, 73, 303, -270, -120, -305, -120, 383, -178, 383,
	383, 211, 211, -241, -280, -124, -124, 320, 320, -178,
	320, 320, -244, 44, 230, 383, -167, 383, 383, -68,
	383, -143, -362, -308, -128, 101, -168, 69, -189, -112,
	382, 382, 382, -106, -107, -310, -310, -32, -168, 383,
	-165, 44, -242, -252, 383, 383, -341, -342, -135, -267,
	381, -322, -136, 209, -241, -137, 382, -153, 382, -142,
	-165, 250, -123, 58, -135, -135, -165, 382, 382, 190,
	245, -143, -230, 383, -153, -230, 382, -308, -129, 334,
	210, 383, -135, -311, -311, 383, 383, -346, 245, 270,
	-178, 383, 387, 30, 109, 383, -323, 196, -135, -168,
	-120, 383, -143, -118, 339, -305, 383, -178, -178, 382,
	382, 382, -153, -230, -153, -167, -130, 285, -233, 383,
	383, 383, -347, -348, 36, 329, 78, -241, -347, -342,
	-344, 117, -324, -327, -326, 219, 134, 231, 290, 383,
	383, -163, -241, 383, 383, -168, -168, -168, -153, 383,
	-182, -108, -108, -348, 238, 129, 269, 238, 129, -135,
	-326, 219, -327, 219, 334, 97, -323, 383, 383, 383,
	-230, -233, 26, -325, 206, 262, 49, 285, -325, -324,
	382, 382, -125, 49, 262, -153, -348, 20, 211, 94,
	-156, 232, -157, 232, 383, -305, 383, -305, 344, 344,
	-158, 382, 186, 387, -155, -154, -159, -160, -241, 94,
	198, 315, -156, 382, 387, 383, 387, 382, -159, -156,
	-160, -159, 383, 383, 387, -155, -154, -157, 387, -157,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 308, 0, 159, 161, 163,
	165, -2, 168, 170, 172, 0, 0, 0, 183, 185,
	187, 189, 191, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 693, -2, 0, 288, 290, 299,
	301, 303, 305, 306, 0, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	385, 387, 389, 391, 0, 614, 616, 618, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 731, -2, 742, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 708, 710, 712,
	714, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 272, 0, 1318, 1241,
	1247, 1248, 1272, 1273, 1274, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 151, 153, 154, 0, 0, 0, 1243, 1318, 160,
	162, 164, 166, 0, 174, 0, 0, 0, 0, 0,
	581, 169, 171, 173, 263, 1382, 265, 267, 0, 0,
	0, 0, 177, 178, 179, 180, 181, 182, 184, 186,
	188, 190, 192, 193, 0, 0, 0, 0, 0, 262,
	260, 215, 216, 0, 245, 246, 247, 248, 249, 251,
	219, 221, 222, 224, 226, 228, 230, 231, 233, 235,
	236, 238, 240, 241, 243, 0, 0, 0, 269, 275,
	276, 277, 279, 280, 281, 282, 283, 284, 285, 0,
	131, 0, 468, 258, 256, 0, 127, 0, 611, 0,
	271, 612, 613, 608, 609, 1409, 637, 289, 291, 300,
	302, 304, -2, -2, 1504, -2, 320, -2, 328, 1510,
	0, 331, 332, 335, -2, 211, 357, 359, 361, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 383,
	386, 388, 390, 392, 393, 0, 0, 0, 397, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 396,
	398, 399, 400, 0, 615, 617, 619, 0, 571, 733,
	0, 0, -2, 706, 707, -2, 0, 737, 737, 737,
	0, 0, 707, 705, 0, 292, 0, 294, 0, 397,
	297, 298, 336, 337, 1226, 1227, 943, 0, 0, 0,
	0, 0, 0, 1045, 1047, 1475, 1504, 0, 1049, 1050,
	0, 1052, 1054, 1055, 0, 1058, 1059, 1211, 1243, 1257,
	1258, 1259, 1260, 0, 0, 1263, 0, 1265, 1266, 1267,
	1113, 1069, -2, -2, 1255, 871, 872, 873, 874, -2,
	1518, 1073, 1076, 1079, 1082, 1083, 1086, 1087, 0, 1459,
	1476, 1477, 1500, 1501, 1509, 1513, 1514, 1483, 1497, 1484,
	1471, 1481, 1495, 1324, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1281,
	905, 906, 911, 912, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 914,
	639, 621, 630, 639, 623, 624, 625, 626, 627, 628,
	629, 632, 0, 723, 1388, 726, 1254, 724, 709, 711,
	0, 713, 0, 0, 717, 739, 738, 777, 778, 0,
	721, 722, 732, 793, 831, 808, 799, 0, 0, 2,
	71, 0, 1483, 831, 73, 0, 1483, 831, 76, 0,
	82, 0, 1483, 1246, 0, 1286, 1287, 1288, 1289, 1290,
	1518, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 0, 0, 273, 274, 1251, 1249, 1250, 0,
	155, 156, 157, 158, 0, 0, 1244, 1220, 1218, 1219,
	167, 533, 1483, 555, -2, 573, 533, 577, -2, 730,
	1483, 653, 264, 266, 0, 176, 0, 666, 0, 668,
	0, 683, 837, 117, 1483, 196, 209, 117, 1483, 199,
	117, 1483, 202, 1239, 117, 1483, 205, 206, 1483, 208,
	259, 0, 0, -2, 252, 254, 1282, 1283, 1284, 1285,
	-2, 250, 220, 223, 225, 227, 229, 232, 234, 237,
	239, 242, 244, -2, 0, 0, 0, 467, 0, 0,
	0, 610, 0, 636, 307, 0, 317, 0, 319, 1470,
	-2, -2, 323, 640, 644, 645, 646, 0, 0, 0,
	0, 0, 0, 0, 333, 212, 0, 394, 395, 403,
	404, 132, 133, 354, 355, 0, 407, 428, 440, 0,
	0, 411, 413, 466, 415, 0, 0, 417, 0, 419,
	0, 421, 0, 423, 0, 425, 427, 429, 441, 431,
	732, 433, 0, 435, 439, 0, 444, 0, 446, 447,
	448, 0, 0, 454, 0, 0, 401, 402, 117, 835,
	0, 0, 0, -2, 0, 750, 775, 0, 753, 754,
	0, 0, 0, 0, 735, 736, 0, 0, 0, 695,
	696, 293, 0, 296, 0, 0, 0, 0, 1146, 1147,
	1148, 1149, 1150, 1151, 1154, 1155, 1152, 1153, 1156, 1157,
	0, 0, 0, 0, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 1159, 1160, 1161, 0, 0, 1163,
	0, 1165, 0, 0, 0, 0, 0, 0, 1225, 0,
	0, 1162, 948, 949, 950, 982, 983, 0, 1046, 1222,
	1215, 1048, 0, 1168, -2, 1169, 0, 0, 1051, 1056,
	1057, 1168, 0, 1210, -2, 0, 1262, 0, 940, 1115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1191, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 908, 919, 916, 915, 892, 0, 891, 889,
	0, 893, 0, 0, 0, 620, -2, 622, 0, 634,
	0, 725, 0, 0, 779, 782, 1231, 1235, 1236, 782,
	0, 1228, 0, 0, 0, 0, 828, 828, 828, 826,
	802, 0, 808, 0, -2, 832, 820, 0, -2, 799,
	0, 0, 833, 0, 83, 605, 96, 0, 605, 605,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 822, 1242, 0,
	1216, 1217, 147, 0, 0, 1237, 1221, 474, 0, 0,
	553, 554, 556, 0, 0, 0, 0, 0, 0, 567,
	572, 0, 729, 0, 0, 0, 1483, 580, 1275, 655,
	0, 841, 0, 669, 0, 0, 838, 0, 194, 0,
	115, 116, 0, 197, 0, 200, 0, 0, 203, 0,
	0, 0, 1169, 732, 0, 0, 278, 0, 0, 732,
	0, 1171, 849, 850, 851, 852, 853, 940, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 902, 0, 877, 877, 877, 894,
	895, 903, 904, 909, 910, 921, 922, 924, 926, 920,
	920, 920, 917, 918, 822, 134, 0, 0, 0, 0,
	-2, 325, 0, 642, 0, 647, 345, 346, 347, 649,
	650, 329, 348, 349, 350, 351, 352, 353, 0, 550,
	0, 552, 1268, 0, 326, 338, 327, 330, 0, 213,
	405, 406, 408, 409, 410, 414, 0, 463, 416, 418,
	420, 422, 424, 432, 436, 732, 442, 445, 449, 450,
	451, 452, 0, 0, 0, 570, 0, 309, 0, 458,
	0, 750, 775, 699, 749, 700, 774, 776, 751, 752,
	757, 761, 762, 765, 768, 769, 759, 943, 718, 719,
	720, 743, 744, 592, 0, 0, 295, 944, 845, 846,
	896, 897, 898, 899, 900, 945, 946, 0, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, -2, -2,
	-2, -2, -2, -2, -2, -2, 969, 970, 971, 972,
	973, 974, 975, 976, -2, -2, -2, 980, 981, -2,
	1164, 1166, 0, 1225, 0, -2, 0, -2, -2, -2,
	-2, 994, 0, 996, 999, 1001, 1003, 0, 0, 0,
	0, 1224, 1013, 1202, 0, 0, 1143, 1144, 1145, 998,
	0, 0, 1223, 1214, 0, 0, 1167, 1053, 0, 0,
	0, 1175, 1209, 1205, 0, 1060, 742, 0, 0, 0,
	0, 1067, 0, 1271, 927, 928, 929, 930, 931, 932,
	941, 1123, 0, 0, 0, 1074, 1075, 1077, 1078, 1080,
	1081, 1084, 1085, 0, 0, 0, 1091, 0, 1178, -2,
	-2, -2, -2, -2, -2, -2, 0, 1093, 0, 1095,
	1169, 1188, 0, 0, 1016, 0, 0, 0, 0, 1504,
	0, 1098, 1169, 1196, 0, 0, 0, 0, 0, 1169,
	0, 1201, 0, 0, 0, 0, 0, 1109, 0, 1111,
	0, 0, 0, 0, 0, 0, 633, 727, 0, 0,
	841, 0, 0, 0, 1234, 841, 0, 1230, 0, 0,
	0, 0, 0, 823, 827, 824, 825, 0, 0, 808,
	820, 790, 0, 0, 0, 797, 798, 819, 0, 818,
	807, -2, 0, 0, 0, 0, 0, 604, 98, 1483,
	0, 119, 0, 0, 523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 1245, 0,
	137, 0, 1252, 0, 0, 0, 0, 0, 473, 1251,
	475, 477, 478, 479, 480, 1276, 0, 1276, 0, 0,
	557, 558, 0, 569, 0, 560, 561, 563, 568, 562,
	564, 0, 566, 0, 0, 0, 0, 657, 663, 0,
	756, 0, 681, 671, 0, 0, 0, 681, 685, 686,
	688, 689, 0, 0, 839, 210, 117, 117, 1240, 117,
	117, 207, 261, 0, 217, 253, 0, 0, 0, 255,
	257, 0, 842, 844, 0, 854, 0, 146, 0, 0,
	0, 0, 318, 0, 641, 648, 0, 342, 0, 344,
	551, 1270, 1269, 0, 214, 465, 286, 434, 437, 460,
	461, 462, 836, 0, 0, 459, 703, 704, 0, 763,
	0, 760, 766, 767, 0, 746, 590, 591, 0, 0,
	0, -2, -2, 0, 0, 0, 1014, -2, 995, 997,
	1000, 1002, 1004, 0, 0, 0, 0, 0, 0, 0,
	1015, 1168, 0, 1212, 1215, -2, 1170, 1173, 1174, 0,
	0, 1206, 0, 0, 0, 0, 741, 742, 742, 742,
	1066, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 1090, 0, 1092, 1094, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1019, 1020, 1021, 0, 1168, 1097,
	1194, 1195, 0, 0, 0, 0, 0, 0, 1103, 0,
	1200, 0, 0, 0, 1107, 1108, 1110, 0, 875, 0,
	901, 923, 925, 913, 732, 1253, 771, 1232, 822, 781,
	783, 1233, 771, 1229, 810, 0, 812, 0, 0, 0,
	814, 0, 803, 0, 805, 820, 795, 0, 0, 788,
	0, 787, 808, 816, 0, 0, 834, 97, 594, 0,
	0, 0, 100, 1483, 108, 0, 505, 0, 0, 0,
	0, 0, 607, 109, 1483, 117, 1483, 117, 110, 84,
	605, 85, 0, 0, 600, 0, 0, 593, 86, 0,
	602, 0, 0, 146, 0, 0, 148, 0, 1238, 482,
	532, 0, 0, 1276, 0, 471, 533, 559, 565, 574,
	576, 0, 0, 659, 663, 0, 662, 730, 681, 755,
	840, 664, 681, 0, 0, 0, 673, 670, 667, 841,
	0, 0, 0, 0, 195, 198, 201, 204, 1170, 268,
	0, 0, 1172, 0, 847, 0, 0, 126, 0, 135,
	270, 315, 316, 321, 340, 341, 343, 339, 0, 0,
	0, 0, 0, 0, 0, 745, 592, 0, 947, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1203, 0,
	0, 0, 1214, -2, 1176, 1204, 1208, 0, 1061, 0,
	0, 0, 0, 1264, 933, 934, 935, 936, 937, 938,
	939, 0, 1121, 1122, 1126, 0, 0, 1072, 0, 0,
	1177, 1187, 1189, 1017, 1018, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, -2, -2, -2, 1035, 1036,
	1037, -2, -2, -2, 0, 0, 0, 1190, 0, 0,
	1192, 1193, 1197, 1198, 0, 1100, 1101, 1102, 1199, 0,
	0, 0, 907, 0, 0, 773, 0, 780, 0, 773,
	811, 0, 830, 813, 793, 804, 0, 801, 791, 0,
	792, 0, 820, 0, 0, 800, 0, 0, 0, 0,
	118, 503, 522, 0, 0, 583, 589, 589, 0, 1070,
	1071, 0, 0, 0, 102, 0, 0, 0, 0, 106,
	0, 112, 0, 0, 0, 91, 0, 0, 0, 0,
	90, 0, 0, 89, 124, 0, 0, 149, 487, 0,
	476, 0, 0, 0, 474, 0, 0, 0, 661, 663,
	0, 654, 655, 175, 665, 679, 680, 678, 0, 681,
	687, 684, 690, 0, 0, 128, 0, 0, 848, 855,
	144, 1372, 142, 139, 141, 287, 310, 311, 0, 455,
	456, 457, 758, 764, 747, 592, 0, 0, -2, 0,
	1007, -2, -2, 1139, 1170, 1213, 1207, 1261, 742, 1062,
	1064, 1065, 942, 1128, 1125, 0, 1112, 1088, 1089, 1186,
	0, 0, 0, 0, 1170, 1141, 1099, 0, 1105, 1106,
	876, 728, 1117, 0, 0, 784, 1117, 0, 808, 806,
	789, 785, 0, 796, 0, 817, 596, 598, 99, 0,
	504, 0, 507, 0, 0, 0, 0, 513, 514, 0,
	0, 0, 0, 524, 531, 0, 592, 1256, 0, 592,
	0, 0, 0, 0, 0, 114, 0, 0, 606, 0,
	117, 117, 595, 0, 0, 0, 0, 601, 0, 603,
	136, 0, 469, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 663, 0, 656, 657, 0, 0,
	0, 672, 682, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 313, 0, 748, -2, -2, 1008, 1140, 0,
	742, 0, 1114, -2, 0, 0, 0, 1142, 0, 715,
	0, 772, 770, 716, 829, 820, 0, 815, 101, 0,
	508, 509, 1276, 0, 512, 515, 0, 517, 1278, 482,
	0, 528, 529, 584, 585, 588, 586, 589, 742, 526,
	0, 103, 104, 113, 121, 105, 111, 0, 0, 742,
	0, 0, 821, 0, 0, 531, 0, 521, 482, 472,
	531, 0, 0, 658, 659, 0, 0, 0, 691, 692,
	0, 0, 0, 143, 0, 138, 140, 312, 0, 1063,
	1131, 0, -2, 0, 1043, 1104, 1116, 1118, 0, 794,
	786, 506, 510, 0, 0, 537, 0, 525, 0, 592,
	0, 0, 123, 0, 597, 599, 0, 0, 0, 0,
	0, 0, 482, 531, 470, 482, 0, 660, 661, 0,
	675, 841, 677, 0, 0, 145, 314, 0, 0, 0,
	1127, 1044, 0, 0, 0, 516, 542, 0, 0, 0,
	587, 1061, 533, 107, 0, 120, 0, 0, 0, 0,
	0, 0, 519, 482, 578, 0, 652, 0, 676, 146,
	146, 1124, 1129, 1132, -2, 1443, 1315, 0, 1130, 1119,
	1120, 0, 518, 538, 539, 0, 534, 535, 536, 1277,
	530, 537, 122, 93, 95, 0, 0, 0, 520, 531,
	841, 129, 130, 0, 1134, 1135, 1136, 1137, 1138, 511,
	540, 0, 541, 0, 0, 0, 542, 0, 0, 485,
	482, 674, 0, 543, 0, 546, 547, 0, 544, 527,
	0, 0, 481, 483, 484, 579, 1133, 545, 548, 549,
	0, 0, 0, 0, 488, 0, 489, 0, 0, 0,
	487, 0, 0, 0, 486, 492, 0, 495, 497, 498,
	-2, 0, 490, 0, 0, 493, 0, 0, 0, 491,
	496, 0, 494, 487, 0, 486, 502, 500, 0, 501,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	361, 363, 362, 365, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 364, 57704, 366,
	57705, 367, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1129
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1221
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1231
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1294
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1298
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CREATE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DELETE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex, "set local")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			return unimplemented(sqllex, "set from current")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = Low
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = Normal
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = High
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.str = "client_encoding"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2530
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2534
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = DropDefault
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return unimplemented(sqllex, "match full")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return unimplemented(sqllex, "match partial")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			return unimplemented(sqllex, "match simple")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3025
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = NoAction
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = Restrict
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = Cascade
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = SetNull
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = SetDefault
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3122
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = []SequenceOption{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[2].union.intVal()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: nil}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: nil}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[2].union.intVal()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCache, IntVal: sqlDollar[2].union.intVal()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: false}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3247
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = true
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = false
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3278
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3281
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = Ascending
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = Descending
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3322
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3324
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = true
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = false
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3395
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3397
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3446
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3457
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3518
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = ReadOnly
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = ReadWrite
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.str = ""
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.str = ""
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.str = ""
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.str = ""
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3626
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			return helpWith(sqllex, "INSERT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3667
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3749
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			return helpWith(sqllex, "SELECT")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			return helpWith(sqllex, "VALUES")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			return helpWith(sqllex, "TABLE")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			return helpWith(sqllex, "SELECT")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4014
		{
			return helpWith(sqllex, "TABLE")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4034
		{
			return unimplemented(sqllex, "cte")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4038
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4046
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = false
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = true
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			return helpWith(sqllex, "VALUES")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4293
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &From{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4315
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4360
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4397
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = nil
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = true
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = false
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.str = astFullJoin
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.str = astLeftJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.str = astRightJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.str = astInnerJoin
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4581
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4681
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4689
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4724
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = jsonbColType
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = jsonColType
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4822
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = nil
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4887
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4983
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5015
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5055
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = year
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = month
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = day
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = hour
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = minute
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = month
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = hour
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = minute
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = nil
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = second
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5150
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5185
		{
			return unimplemented(sqllex, "at tz")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5459
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5685
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5686
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5710
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5726
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5731
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5740
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5749
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5758
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5759
		{
			return unimplemented(sqllex, "current role")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5789
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5794
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5799
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5809
		{
			return unimplemented(sqllex, "treat")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5846
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5851
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5855
		{
			return unimplemented(sqllex, "within group")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5856
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5891
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.str = ""
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5953
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5954
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5955
		{
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5959
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5966
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5967
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5968
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5969
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = Any
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = Some
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = All
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Plus
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = Minus
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = Mult
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Div
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = Mod
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = Bitand
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = Bitor
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = Pow
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = Bitxor
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = LT
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = GT
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = EQ
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = LE
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = GE
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = NE
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Like
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = NotLike
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = ILike
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = NotILike
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6305
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6324
		{
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6325
		{
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6378
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6439
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6443
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6456
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6460
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6484
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6487
		{
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6501
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6508
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6512
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6516
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6520
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6523
		{
			return unimplemented(sqllex, "func const")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6532
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6534
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6538
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6542
		{
			sqlVAL.union.val = DNull
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6549
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6553
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6559
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6594
		{
			sqlVAL.str = ""
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
