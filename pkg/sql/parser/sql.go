// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PLACING = 57573
const PLANS = 57574
const POSITION = 57575
const PRECEDING = 57576
const PRECISION = 57577
const PREPARE = 57578
const PRIMARY = 57579
const PRIORITY = 57580
const QUERIES = 57581
const QUERY = 57582
const RANGE = 57583
const READ = 57584
const REAL = 57585
const RECURSIVE = 57586
const REF = 57587
const REFERENCES = 57588
const REGCLASS = 57589
const REGPROC = 57590
const REGPROCEDURE = 57591
const REGNAMESPACE = 57592
const REGTYPE = 57593
const REMOVE_PATH = 57594
const RENAME = 57595
const REPEATABLE = 57596
const RELEASE = 57597
const RESET = 57598
const RESTORE = 57599
const RESTRICT = 57600
const RESUME = 57601
const RETURNING = 57602
const REVOKE = 57603
const RIGHT = 57604
const ROLLBACK = 57605
const ROLLUP = 57606
const ROW = 57607
const ROWS = 57608
const RSHIFT = 57609
const SAVEPOINT = 57610
const SCATTER = 57611
const SCRUB = 57612
const SEARCH = 57613
const SECOND = 57614
const SELECT = 57615
const SEQUENCES = 57616
const SERIAL = 57617
const SERIALIZABLE = 57618
const SESSION = 57619
const SESSIONS = 57620
const SESSION_USER = 57621
const SET = 57622
const SETTING = 57623
const SETTINGS = 57624
const SHOW = 57625
const SIMILAR = 57626
const SIMPLE = 57627
const SMALLINT = 57628
const SMALLSERIAL = 57629
const SNAPSHOT = 57630
const SOME = 57631
const SOME_EXISTENCE = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6964

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 733,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 582,
	-2, 0,
	-1, 54,
	97, 733,
	156, 733,
	330, 733,
	331, 733,
	-2, 0,
	-1, 64,
	1, 695,
	215, 695,
	260, 695,
	375, 695,
	377, 695,
	379, 695,
	380, 695,
	-2, 708,
	-1, 97,
	4, 735,
	20, 735,
	21, 735,
	24, 735,
	29, 735,
	34, 735,
	35, 735,
	36, 735,
	37, 735,
	38, 735,
	39, 735,
	40, 735,
	41, 735,
	42, 735,
	43, 735,
	45, 735,
	46, 735,
	47, 735,
	48, 735,
	49, 735,
	52, 735,
	53, 735,
	54, 735,
	56, 735,
	57, 735,
	61, 735,
	62, 735,
	63, 735,
	65, 735,
	66, 735,
	67, 735,
	68, 735,
	70, 735,
	72, 735,
	73, 735,
	76, 735,
	77, 735,
	78, 735,
	86, 735,
	87, 735,
	88, 735,
	89, 735,
	90, 735,
	91, 735,
	92, 735,
	93, 735,
	95, 735,
	97, 735,
	99, 735,
	102, 735,
	103, 735,
	105, 735,
	109, 735,
	110, 735,
	111, 735,
	112, 735,
	113, 735,
	114, 735,
	115, 735,
	123, 735,
	124, 735,
	125, 735,
	126, 735,
	127, 735,
	129, 735,
	131, 735,
	136, 735,
	137, 735,
	139, 735,
	142, 735,
	143, 735,
	144, 735,
	145, 735,
	146, 735,
	147, 735,
	150, 735,
	151, 735,
	153, 735,
	156, 735,
	157, 735,
	158, 735,
	159, 735,
	160, 735,
	161, 735,
	162, 735,
	163, 735,
	165, 735,
	168, 735,
	169, 735,
	170, 735,
	172, 735,
	173, 735,
	174, 735,
	175, 735,
	176, 735,
	178, 735,
	179, 735,
	181, 735,
	183, 735,
	184, 735,
	187, 735,
	188, 735,
	191, 735,
	193, 735,
	195, 735,
	196, 735,
	197, 735,
	198, 735,
	199, 735,
	201, 735,
	202, 735,
	203, 735,
	204, 735,
	208, 735,
	209, 735,
	210, 735,
	211, 735,
	212, 735,
	214, 735,
	216, 735,
	217, 735,
	220, 735,
	221, 735,
	223, 735,
	225, 735,
	226, 735,
	227, 735,
	228, 735,
	229, 735,
	230, 735,
	232, 735,
	233, 735,
	234, 735,
	235, 735,
	236, 735,
	238, 735,
	239, 735,
	240, 735,
	241, 735,
	242, 735,
	243, 735,
	244, 735,
	245, 735,
	247, 735,
	248, 735,
	249, 735,
	250, 735,
	251, 735,
	253, 735,
	254, 735,
	255, 735,
	256, 735,
	257, 735,
	258, 735,
	259, 735,
	261, 735,
	263, 735,
	264, 735,
	265, 735,
	266, 735,
	268, 735,
	269, 735,
	270, 735,
	271, 735,
	272, 735,
	274, 735,
	275, 735,
	276, 735,
	277, 735,
	278, 735,
	280, 735,
	281, 735,
	282, 735,
	283, 735,
	285, 735,
	286, 735,
	287, 735,
	288, 735,
	291, 735,
	292, 735,
	293, 735,
	294, 735,
	295, 735,
	296, 735,
	297, 735,
	298, 735,
	299, 735,
	300, 735,
	302, 735,
	304, 735,
	305, 735,
	306, 735,
	307, 735,
	308, 735,
	309, 735,
	310, 735,
	311, 735,
	313, 735,
	314, 735,
	315, 735,
	318, 735,
	319, 735,
	320, 735,
	321, 735,
	323, 735,
	324, 735,
	325, 735,
	326, 735,
	329, 735,
	330, 735,
	331, 735,
	332, 735,
	334, 735,
	336, 735,
	337, 735,
	338, 735,
	339, 735,
	340, 735,
	341, 735,
	344, 735,
	349, 735,
	350, 735,
	351, 735,
	352, 735,
	353, 735,
	-2, 0,
	-1, 115,
	1, 698,
	215, 698,
	260, 698,
	375, 698,
	377, 698,
	379, 698,
	380, 698,
	-2, 707,
	-1, 120,
	1, 633,
	168, 633,
	238, 633,
	242, 633,
	379, 633,
	380, 633,
	-2, 0,
	-1, 122,
	1, 633,
	379, 633,
	380, 633,
	-2, 0,
	-1, 123,
	1, 633,
	379, 633,
	380, 633,
	-2, 0,
	-1, 124,
	1, 637,
	379, 637,
	380, 637,
	-2, 0,
	-1, 146,
	4, 741,
	5, 741,
	6, 741,
	7, 741,
	8, 741,
	9, 741,
	20, 741,
	21, 741,
	24, 741,
	29, 741,
	30, 741,
	34, 741,
	35, 741,
	36, 741,
	37, 741,
	38, 741,
	39, 741,
	40, 741,
	41, 741,
	42, 741,
	43, 741,
	45, 741,
	46, 741,
	47, 741,
	48, 741,
	49, 741,
	50, 741,
	51, 741,
	52, 741,
	53, 741,
	54, 741,
	56, 741,
	57, 741,
	59, 741,
	61, 741,
	62, 741,
	63, 741,
	65, 741,
	66, 741,
	67, 741,
	68, 741,
	70, 741,
	72, 741,
	73, 741,
	75, 741,
	76, 741,
	77, 741,
	78, 741,
	80, 741,
	81, 741,
	82, 741,
	84, 741,
	85, 741,
	86, 741,
	87, 741,
	88, 741,
	89, 741,
	90, 741,
	91, 741,
	92, 741,
	93, 741,
	94, 741,
	95, 741,
	97, 741,
	99, 741,
	102, 741,
	103, 741,
	105, 741,
	109, 741,
	110, 741,
	111, 741,
	112, 741,
	113, 741,
	114, 741,
	115, 741,
	116, 741,
	117, 741,
	123, 741,
	124, 741,
	125, 741,
	126, 741,
	127, 741,
	129, 741,
	131, 741,
	134, 741,
	136, 741,
	137, 741,
	139, 741,
	142, 741,
	143, 741,
	144, 741,
	145, 741,
	146, 741,
	147, 741,
	148, 741,
	150, 741,
	151, 741,
	153, 741,
	155, 741,
	156, 741,
	157, 741,
	158, 741,
	159, 741,
	160, 741,
	161, 741,
	162, 741,
	163, 741,
	165, 741,
	167, 741,
	168, 741,
	169, 741,
	170, 741,
	171, 741,
	172, 741,
	173, 741,
	174, 741,
	175, 741,
	176, 741,
	178, 741,
	179, 741,
	181, 741,
	182, 741,
	183, 741,
	184, 741,
	185, 741,
	187, 741,
	188, 741,
	191, 741,
	193, 741,
	194, 741,
	195, 741,
	196, 741,
	197, 741,
	198, 741,
	199, 741,
	200, 741,
	201, 741,
	202, 741,
	203, 741,
	204, 741,
	205, 741,
	207, 741,
	208, 741,
	209, 741,
	210, 741,
	211, 741,
	212, 741,
	214, 741,
	217, 741,
	220, 741,
	221, 741,
	222, 741,
	223, 741,
	224, 741,
	225, 741,
	226, 741,
	227, 741,
	228, 741,
	229, 741,
	230, 741,
	232, 741,
	233, 741,
	234, 741,
	235, 741,
	236, 741,
	238, 741,
	239, 741,
	240, 741,
	241, 741,
	242, 741,
	243, 741,
	244, 741,
	245, 741,
	247, 741,
	248, 741,
	249, 741,
	250, 741,
	251, 741,
	253, 741,
	254, 741,
	255, 741,
	256, 741,
	257, 741,
	258, 741,
	259, 741,
	261, 741,
	262, 741,
	263, 741,
	264, 741,
	265, 741,
	266, 741,
	268, 741,
	269, 741,
	270, 741,
	271, 741,
	272, 741,
	274, 741,
	275, 741,
	276, 741,
	277, 741,
	278, 741,
	279, 741,
	280, 741,
	281, 741,
	282, 741,
	283, 741,
	284, 741,
	285, 741,
	286, 741,
	287, 741,
	288, 741,
	291, 741,
	292, 741,
	293, 741,
	294, 741,
	295, 741,
	296, 741,
	297, 741,
	298, 741,
	299, 741,
	300, 741,
	302, 741,
	304, 741,
	305, 741,
	306, 741,
	307, 741,
	308, 741,
	309, 741,
	310, 741,
	311, 741,
	313, 741,
	314, 741,
	315, 741,
	318, 741,
	319, 741,
	320, 741,
	321, 741,
	322, 741,
	323, 741,
	324, 741,
	325, 741,
	326, 741,
	329, 741,
	330, 741,
	331, 741,
	332, 741,
	333, 741,
	334, 741,
	336, 741,
	337, 741,
	338, 741,
	339, 741,
	340, 741,
	341, 741,
	344, 741,
	349, 741,
	350, 741,
	351, 741,
	352, 741,
	353, 741,
	354, 741,
	362, 741,
	367, 741,
	368, 741,
	369, 741,
	376, 741,
	382, 741,
	-2, 0,
	-1, 149,
	1, 54,
	380, 54,
	-2, 733,
	-1, 516,
	133, 1351,
	316, 1351,
	359, 1351,
	378, 1351,
	-2, 0,
	-1, 517,
	133, 1298,
	316, 1298,
	359, 1298,
	378, 1298,
	-2, 0,
	-1, 519,
	133, 1410,
	316, 1410,
	359, 1410,
	378, 1410,
	-2, 0,
	-1, 521,
	133, 1433,
	316, 1433,
	359, 1433,
	378, 1433,
	-2, 0,
	-1, 528,
	133, 1356,
	316, 1356,
	359, 1356,
	378, 1356,
	-2, 347,
	-1, 554,
	1, 425,
	375, 425,
	377, 425,
	379, 425,
	380, 425,
	-2, 0,
	-1, 555,
	1, 478,
	130, 478,
	375, 478,
	377, 478,
	379, 478,
	380, 478,
	-2, 0,
	-1, 561,
	1, 439,
	375, 439,
	377, 439,
	379, 439,
	380, 439,
	-2, 0,
	-1, 563,
	1, 443,
	375, 443,
	377, 443,
	379, 443,
	380, 443,
	-2, 0,
	-1, 566,
	1, 451,
	375, 451,
	377, 451,
	379, 451,
	380, 451,
	-2, 0,
	-1, 567,
	1, 456,
	375, 456,
	377, 456,
	379, 456,
	380, 456,
	-2, 0,
	-1, 570,
	1, 466,
	375, 466,
	377, 466,
	379, 466,
	380, 466,
	-2, 0,
	-1, 595,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 702,
	-1, 602,
	118, 742,
	130, 742,
	186, 742,
	213, 742,
	-2, 699,
	-1, 658,
	376, 1276,
	-2, 1269,
	-1, 659,
	376, 1277,
	-2, 1270,
	-1, 665,
	5, 927,
	376, 927,
	-2, 1485,
	-1, 690,
	5, 886,
	-2, 1454,
	-1, 691,
	5, 921,
	376, 921,
	-2, 1456,
	-1, 692,
	5, 896,
	-2, 1457,
	-1, 693,
	5, 895,
	-2, 1458,
	-1, 694,
	5, 921,
	376, 921,
	-2, 1461,
	-1, 695,
	5, 921,
	376, 921,
	-2, 1462,
	-1, 696,
	5, 922,
	-2, 1465,
	-1, 697,
	5, 878,
	-2, 1466,
	-1, 698,
	5, 878,
	-2, 1467,
	-1, 699,
	5, 903,
	-2, 1471,
	-1, 700,
	5, 888,
	-2, 1472,
	-1, 701,
	5, 889,
	-2, 1473,
	-1, 702,
	5, 879,
	-2, 1479,
	-1, 703,
	5, 880,
	-2, 1480,
	-1, 704,
	5, 881,
	-2, 1481,
	-1, 705,
	5, 882,
	-2, 1482,
	-1, 706,
	5, 883,
	-2, 1483,
	-1, 707,
	5, 884,
	-2, 1484,
	-1, 708,
	5, 878,
	-2, 1491,
	-1, 709,
	5, 887,
	-2, 1496,
	-1, 710,
	5, 885,
	-2, 1499,
	-1, 711,
	5, 919,
	376, 919,
	-2, 1501,
	-1, 712,
	5, 923,
	-2, 1504,
	-1, 713,
	5, 925,
	-2, 1505,
	-1, 714,
	5, 918,
	376, 918,
	-2, 1510,
	-1, 778,
	112, 502,
	-2, 832,
	-1, 909,
	229, 731,
	-2, 575,
	-1, 914,
	215, 1273,
	-2, 0,
	-1, 950,
	1, 225,
	375, 225,
	377, 225,
	379, 225,
	380, 225,
	-2, 706,
	-1, 953,
	4, 1509,
	10, 1509,
	11, 1509,
	13, 1509,
	14, 1509,
	15, 1509,
	16, 1509,
	17, 1509,
	18, 1509,
	20, 1509,
	21, 1509,
	23, 1509,
	24, 1509,
	27, 1509,
	29, 1509,
	31, 1509,
	34, 1509,
	35, 1509,
	36, 1509,
	37, 1509,
	38, 1509,
	39, 1509,
	40, 1509,
	41, 1509,
	42, 1509,
	43, 1509,
	45, 1509,
	46, 1509,
	47, 1509,
	48, 1509,
	49, 1509,
	52, 1509,
	53, 1509,
	54, 1509,
	56, 1509,
	57, 1509,
	58, 1509,
	61, 1509,
	62, 1509,
	63, 1509,
	64, 1509,
	65, 1509,
	66, 1509,
	67, 1509,
	68, 1509,
	70, 1509,
	71, 1509,
	72, 1509,
	73, 1509,
	75, 1509,
	76, 1509,
	77, 1509,
	78, 1509,
	86, 1509,
	87, 1509,
	88, 1509,
	89, 1509,
	90, 1509,
	91, 1509,
	92, 1509,
	93, 1509,
	95, 1509,
	97, 1509,
	99, 1509,
	102, 1509,
	103, 1509,
	105, 1509,
	109, 1509,
	110, 1509,
	111, 1509,
	112, 1509,
	113, 1509,
	114, 1509,
	115, 1509,
	119, 1509,
	120, 1509,
	121, 1509,
	122, 1509,
	123, 1509,
	124, 1509,
	125, 1509,
	126, 1509,
	127, 1509,
	128, 1509,
	129, 1509,
	131, 1509,
	134, 1509,
	136, 1509,
	137, 1509,
	139, 1509,
	142, 1509,
	143, 1509,
	144, 1509,
	145, 1509,
	146, 1509,
	147, 1509,
	148, 1509,
	149, 1509,
	150, 1509,
	151, 1509,
	153, 1509,
	155, 1509,
	156, 1509,
	157, 1509,
	158, 1509,
	159, 1509,
	160, 1509,
	161, 1509,
	162, 1509,
	163, 1509,
	165, 1509,
	167, 1509,
	168, 1509,
	169, 1509,
	170, 1509,
	171, 1509,
	172, 1509,
	173, 1509,
	174, 1509,
	175, 1509,
	176, 1509,
	178, 1509,
	179, 1509,
	181, 1509,
	182, 1509,
	183, 1509,
	184, 1509,
	185, 1509,
	187, 1509,
	188, 1509,
	191, 1509,
	192, 1509,
	193, 1509,
	195, 1509,
	196, 1509,
	197, 1509,
	198, 1509,
	199, 1509,
	200, 1509,
	201, 1509,
	202, 1509,
	203, 1509,
	204, 1509,
	208, 1509,
	209, 1509,
	210, 1509,
	211, 1509,
	212, 1509,
	214, 1509,
	217, 1509,
	218, 1509,
	220, 1509,
	221, 1509,
	223, 1509,
	225, 1509,
	226, 1509,
	227, 1509,
	228, 1509,
	229, 1509,
	230, 1509,
	232, 1509,
	233, 1509,
	234, 1509,
	235, 1509,
	236, 1509,
	238, 1509,
	239, 1509,
	240, 1509,
	241, 1509,
	242, 1509,
	243, 1509,
	244, 1509,
	245, 1509,
	247, 1509,
	248, 1509,
	249, 1509,
	250, 1509,
	251, 1509,
	252, 1509,
	253, 1509,
	254, 1509,
	255, 1509,
	256, 1509,
	257, 1509,
	258, 1509,
	259, 1509,
	261, 1509,
	262, 1509,
	263, 1509,
	264, 1509,
	265, 1509,
	266, 1509,
	267, 1509,
	268, 1509,
	269, 1509,
	270, 1509,
	271, 1509,
	272, 1509,
	274, 1509,
	275, 1509,
	276, 1509,
	277, 1509,
	278, 1509,
	280, 1509,
	281, 1509,
	282, 1509,
	283, 1509,
	284, 1509,
	285, 1509,
	286, 1509,
	287, 1509,
	288, 1509,
	290, 1509,
	291, 1509,
	292, 1509,
	293, 1509,
	294, 1509,
	295, 1509,
	296, 1509,
	297, 1509,
	298, 1509,
	299, 1509,
	300, 1509,
	302, 1509,
	304, 1509,
	305, 1509,
	306, 1509,
	307, 1509,
	308, 1509,
	309, 1509,
	310, 1509,
	311, 1509,
	313, 1509,
	314, 1509,
	315, 1509,
	318, 1509,
	319, 1509,
	320, 1509,
	321, 1509,
	323, 1509,
	324, 1509,
	325, 1509,
	326, 1509,
	329, 1509,
	330, 1509,
	331, 1509,
	332, 1509,
	334, 1509,
	336, 1509,
	337, 1509,
	338, 1509,
	339, 1509,
	340, 1509,
	341, 1509,
	344, 1509,
	349, 1509,
	350, 1509,
	351, 1509,
	352, 1509,
	353, 1509,
	354, 1509,
	355, 1509,
	357, 1509,
	358, 1509,
	359, 1509,
	360, 1509,
	361, 1509,
	362, 1509,
	364, 1509,
	365, 1509,
	366, 1509,
	367, 1509,
	368, 1509,
	369, 1509,
	370, 1509,
	371, 1509,
	372, 1509,
	374, 1509,
	377, 1509,
	378, 1509,
	381, 1509,
	382, 1509,
	-2, 0,
	-1, 969,
	133, 1410,
	316, 1410,
	359, 1410,
	378, 1410,
	-2, 0,
	-1, 986,
	133, 1433,
	316, 1433,
	359, 1433,
	378, 1433,
	-2, 0,
	-1, 987,
	168, 645,
	238, 645,
	242, 645,
	-2, 335,
	-1, 1055,
	118, 742,
	130, 742,
	186, 742,
	213, 742,
	-2, 703,
	-1, 1136,
	108, 708,
	118, 708,
	130, 708,
	164, 708,
	186, 708,
	213, 708,
	219, 708,
	327, 708,
	-2, 1057,
	-1, 1146,
	376, 1253,
	-2, 1241,
	-1, 1164,
	377, 1170,
	-2, 0,
	-1, 1188,
	168, 645,
	238, 645,
	242, 645,
	-2, 640,
	-1, 1216,
	377, 1170,
	-2, 0,
	-1, 1220,
	108, 708,
	118, 708,
	130, 708,
	164, 708,
	186, 708,
	213, 708,
	219, 708,
	327, 708,
	-2, 809,
	-1, 1367,
	168, 645,
	238, 645,
	242, 645,
	-2, 337,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 962,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 963,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 964,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 965,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 966,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 967,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 968,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 969,
	-1, 1491,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 978,
	-1, 1492,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 979,
	-1, 1493,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 980,
	-1, 1496,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 985,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 987,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 991,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 992,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 993,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 994,
	-1, 1576,
	133, 1181,
	376, 1276,
	-2, 1269,
	-1, 1577,
	133, 1182,
	-2, 1450,
	-1, 1578,
	133, 1183,
	-2, 1355,
	-1, 1579,
	133, 1184,
	-2, 1316,
	-1, 1580,
	133, 1185,
	-2, 1333,
	-1, 1581,
	133, 1186,
	-2, 1354,
	-1, 1582,
	133, 1187,
	-2, 1407,
	-1, 1659,
	1, 810,
	75, 810,
	108, 810,
	118, 810,
	130, 810,
	134, 810,
	138, 810,
	140, 810,
	155, 810,
	164, 810,
	171, 810,
	182, 810,
	186, 810,
	200, 810,
	213, 810,
	215, 810,
	219, 810,
	260, 810,
	262, 810,
	327, 810,
	335, 810,
	346, 810,
	347, 810,
	356, 810,
	375, 810,
	377, 810,
	379, 810,
	380, 810,
	381, 810,
	-2, 809,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 986,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 988,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 989,
	-1, 1838,
	224, 1141,
	-2, 1143,
	-1, 2015,
	229, 731,
	-2, 575,
	-1, 2074,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 990,
	-1, 2079,
	167, 0,
	-2, 1006,
	-1, 2088,
	224, 1142,
	-2, 1144,
	-1, 2130,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1034,
	-1, 2131,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1035,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1036,
	-1, 2136,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1040,
	-1, 2137,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1041,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1042,
	-1, 2277,
	167, 0,
	-2, 1007,
	-1, 2280,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1010,
	-1, 2281,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1012,
	-1, 2409,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1011,
	-1, 2410,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1013,
	-1, 2417,
	167, 0,
	-2, 1043,
	-1, 2494,
	167, 0,
	-2, 1044,
	-1, 2576,
	37, 0,
	148, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1453,
	-1, 2659,
	376, 1521,
	-2, 515,
}

const sqlPrivate = 57344

const sqlLast = 43487

var sqlAct = [...]int{

	659, 2644, 2656, 2375, 1238, 2657, 2642, 2625, 2374, 2584,
	2585, 2575, 2548, 2443, 1730, 2586, 2225, 2052, 2574, 1265,
	2107, 2385, 2499, 1738, 649, 2236, 2345, 2189, 657, 2265,
	1808, 786, 2331, 1273, 2258, 1519, 1308, 2019, 2260, 186,
	603, 470, 26, 943, 186, 2190, 656, 903, 186, 2021,
	1236, 1654, 2423, 1727, 186, 1953, 1218, 1214, 2027, 186,
	186, 1708, 2252, 186, 1904, 946, 186, 1932, 1267, 1739,
	1197, 635, 1268, 2311, 186, 939, 1713, 1712, 2160, 1672,
	452, 1309, 1655, 1940, 1663, 1849, 1449, 1804, 990, 1261,
	1060, 1903, 1286, 611, 110, 801, 1702, 1142, 1392, 1226,
	1531, 1454, 1787, 1228, 1532, 1540, 527, 1605, 1198, 1516,
	1388, 768, 1556, 1432, 449, 1430, 989, 1174, 1178, 1550,
	1710, 936, 788, 951, 1732, 1716, 771, 1641, 1205, 1628,
	751, 1131, 1572, 627, 507, 115, 1061, 929, 1433, 177,
	1391, 186, 186, 524, 116, 63, 1431, 651, 110, 186,
	1188, 485, 1280, 926, 1223, 749, 182, 520, 1187, 2346,
	1065, 548, 2174, 1837, 1288, 2175, 1288, 1288, 2376, 2376,
	1731, 607, 186, 186, 791, 186, 186, 803, 607, 1709,
	2672, 186, 186, 2671, 2665, 2664, 2621, 2665, 2620, 2665,
	1256, 26, 1256, 2619, 2601, 1215, 2596, 1256, 2344, 499,
	1635, 2037, 602, 2595, 2072, 2036, 2592, 1635, 1076, 1077,
	1256, 1106, 1107, 1108, 1116, 1117, 1118, 1252, 617, 2572,
	2571, 1094, 1703, 1298, 1298, 1109, 1076, 1077, 1630, 2543,
	2538, 2677, 1079, 1764, 1256, 1120, 2537, 2533, 2525, 784,
	2399, 1256, 2344, 110, 2663, 1635, 596, 2163, 1076, 1077,
	1079, 798, 2544, 2496, 2474, 595, 1078, 1764, 2344, 1298,
	2471, 2469, 1098, 608, 1256, 2344, 2454, 2453, 2403, 1095,
	1256, 2344, 1079, 2431, 1078, 2428, 2399, 1256, 2411, 1256,
	612, 2370, 1764, 776, 780, 1635, 2365, 2343, 2324, 2279,
	1635, 2344, 1256, 1764, 2251, 2246, 1078, 753, 1707, 1707,
	2170, 2083, 1098, 765, 2171, 1635, 2046, 2007, 1929, 1928,
	2008, 1256, 1635, 1256, 1703, 2163, 1629, 1101, 1102, 1103,
	1104, 2673, 2653, 1921, 1919, 1918, 1084, 1922, 1635, 1635,
	1917, 1841, 1774, 1635, 1635, 2062, 1635, 1842, 1763, 1298,
	1848, 1753, 1764, 1661, 1084, 1635, 1113, 1121, 1706, 1634,
	1553, 1301, 1707, 1635, 755, 1302, 756, 1101, 1102, 1103,
	1104, 891, 2143, 2085, 2008, 1119, 1084, 1076, 1077, 1807,
	652, 1785, 1370, 1289, 1192, 1289, 1289, 1535, 1256, 889,
	971, 149, 968, 1111, 2347, 967, 966, 965, 964, 37,
	1099, 1079, 963, 962, 961, 960, 959, 958, 957, 146,
	38, 120, 1554, 956, 955, 954, 757, 610, 1099, 754,
	601, 600, 599, 41, 598, 1078, 1110, 594, 593, 592,
	591, 186, 791, 186, 1760, 186, 1389, 122, 186, 148,
	1099, 590, 587, 586, 186, 38, 585, 43, 584, 46,
	580, 579, 578, 186, 186, 186, 186, 791, 41, 2036,
	1105, 146, 791, 1533, 1555, 1552, 546, 545, 544, 543,
	47, 542, 541, 540, 49, 1100, 147, 539, 52, 538,
	537, 123, 536, 535, 1761, 53, 1629, 104, 54, 534,
	186, 148, 1114, 1100, 533, 1084, 532, 909, 1093, 531,
	1105, 530, 515, 514, 186, 513, 1294, 895, 1287, 1423,
	55, 512, 117, 1762, 511, 1100, 440, 1874, 1875, 56,
	186, 418, 480, 411, 410, 169, 168, 167, 147, 166,
	186, 165, 164, 1735, 163, 162, 140, 907, 161, 912,
	160, 1557, 159, 141, 158, 157, 156, 155, 154, 153,
	152, 151, 150, 1395, 56, 928, 1948, 1569, 1002, 932,
	932, 791, 1112, 1567, 117, 1090, 1091, 1097, 1096, 1092,
	1115, 1565, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 1563, 1219, 1239, 952, 2010, 902, 2648, 2646, 2306,
	2591, 933, 186, 1080, 1081, 1082, 1083, 1085, 1086, 2573,
	2559, 2553, 2491, 2404, 1072, 57, 2472, 608, 1874, 1875,
	972, 58, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 1551, 2310, 1076, 1077, 764, 1005, 2392, 2309, 2305,
	65, 118, 59, 2304, 60, 1880, 61, 1000, 124, 2297,
	57, 2296, 2295, 62, 2291, 1769, 1056, 1079, 146, 2290,
	1874, 1875, 2289, 2288, 2282, 73, 2257, 2157, 93, 2152,
	1874, 1875, 2151, 2150, 2093, 2006, 118, 59, 121, 60,
	1960, 1078, 1956, 1926, 1923, 1911, 1902, 1873, 148, 1870,
	1869, 1867, 987, 146, 1854, 1853, 1838, 984, 146, 1659,
	479, 1055, 1072, 93, 1305, 1527, 1071, 1150, 97, 1890,
	1874, 1875, 1217, 1051, 1889, 2666, 1143, 119, 1134, 1216,
	900, 2651, 146, 148, 895, 147, 2633, 2632, 148, 1272,
	2109, 1003, 2563, 140, 2562, 2561, 1880, 2528, 2520, 2518,
	141, 2662, 2510, 2508, 1080, 1081, 1082, 1083, 1085, 1086,
	2484, 1084, 148, 2050, 2483, 1076, 1077, 1521, 2440, 2419,
	147, 117, 1057, 2400, 4, 147, 2379, 596, 140, 186,
	1058, 186, 2368, 140, 2350, 141, 595, 2302, 1880, 1079,
	141, 2234, 2231, 2230, 1891, 2228, 1068, 1069, 1880, 147,
	2198, 2197, 2178, 186, 186, 1073, 117, 140, 2391, 608,
	1890, 117, 2166, 1078, 141, 2078, 1390, 1803, 1996, 1987,
	1973, 1972, 1958, 1927, 1901, 1802, 1528, 1863, 1862, 1973,
	1859, 1834, 1829, 1179, 1146, 1734, 1182, 1212, 1880, 1646,
	1617, 1561, 1176, 1177, 1264, 1196, 1195, 1180, 1203, 1186,
	1172, 1171, 1890, 1170, 477, 1169, 1168, 1183, 1076, 1077,
	1201, 1167, 1166, 1165, 1164, 38, 1163, 1162, 1161, 1160,
	1159, 1158, 1157, 1156, 1155, 1154, 1147, 1135, 41, 1248,
	1134, 983, 1079, 1084, 975, 1891, 948, 2502, 2398, 2284,
	2256, 110, 1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882,
	2173, 2169, 1217, 1840, 476, 1647, 1078, 1766, 1143, 2048,
	1132, 999, 1213, 1191, 717, 1874, 1875, 716, 1773, 791,
	186, 2022, 2402, 2401, 2395, 2176, 803, 1891, 1189, 1221,
	1239, 2038, 186, 478, 1184, 1703, 1193, 1219, 1054, 1185,
	53, 2217, 480, 54, 2210, 186, 1946, 1099, 608, 1049,
	1376, 186, 1568, 186, 1152, 186, 1999, 1992, 1566, 186,
	1925, 1772, 1271, 1924, 1813, 1427, 1564, 996, 619, 2053,
	1269, 1237, 1991, 901, 56, 1795, 1562, 2405, 1242, 2424,
	1263, 1731, 2110, 1541, 1254, 1876, 1877, 1878, 1879, 1881,
	1882, 1845, 1175, 1234, 1553, 1043, 2649, 2647, 2032, 2185,
	186, 186, 1082, 1083, 1085, 1086, 2556, 791, 1757, 186,
	1229, 1235, 186, 1230, 446, 421, 1306, 173, 1277, 763,
	2616, 1257, 1100, 1434, 1885, 1883, 1884, 1876, 1877, 1878,
	1879, 1881, 1882, 803, 2617, 1044, 1775, 2532, 186, 1878,
	1879, 1881, 1882, 186, 2358, 2059, 1554, 430, 186, 186,
	1362, 186, 744, 186, 742, 186, 1291, 186, 2465, 1293,
	57, 441, 928, 1296, 1035, 740, 2463, 746, 186, 2462,
	2461, 1217, 737, 419, 186, 186, 1255, 1876, 1877, 1878,
	1879, 1881, 1882, 186, 1826, 1377, 118, 59, 1149, 60,
	1229, 2219, 1231, 1230, 997, 2212, 2182, 2181, 1555, 1552,
	1824, 1858, 1857, 146, 1279, 186, 431, 1282, 1856, 803,
	479, 1855, 1816, 93, 1756, 1698, 1693, 1138, 1688, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 1396, 1503,
	1190, 2049, 888, 148, 2373, 1621, 1620, 998, 1464, 2660,
	1303, 174, 1728, 1421, 1397, 1665, 1420, 445, 1363, 2065,
	1052, 2223, 582, 1304, 2209, 1364, 110, 984, 494, 424,
	1518, 2531, 2445, 1229, 2224, 1518, 1230, 1367, 2003, 1393,
	147, 1259, 1231, 1422, 1381, 1557, 589, 1411, 140, 2569,
	1283, 1821, 1436, 1075, 588, 141, 1401, 1404, 1455, 1462,
	1400, 1822, 1405, 445, 1406, 1827, 1407, 589, 1408, 1029,
	1409, 664, 2103, 719, 1463, 175, 117, 1665, 1673, 1525,
	170, 444, 2588, 2067, 1557, 1523, 1664, 1415, 1417, 2608,
	1086, 186, 982, 186, 1263, 1428, 186, 1435, 2029, 1874,
	1875, 596, 1541, 1429, 596, 596, 2540, 186, 1030, 2200,
	1445, 1076, 1077, 1446, 1447, 1231, 803, 1202, 1453, 186,
	573, 1767, 1244, 186, 1008, 1551, 186, 444, 1805, 1806,
	186, 2541, 896, 898, 186, 1079, 2030, 2616, 616, 1053,
	803, 1538, 186, 424, 791, 1998, 2635, 1882, 1536, 1557,
	433, 432, 186, 803, 1989, 1676, 1778, 186, 2628, 1078,
	1240, 2513, 1529, 1526, 176, 186, 174, 1419, 1780, 1600,
	1048, 1648, 2064, 186, 2213, 2589, 1823, 1684, 2058, 2060,
	608, 2029, 2607, 1825, 186, 608, 186, 1173, 186, 1695,
	1781, 186, 1984, 186, 1583, 186, 186, 1232, 186, 791,
	791, 606, 1779, 791, 574, 1288, 1666, 186, 1722, 1691,
	1690, 1649, 1239, 1042, 973, 1677, 1679, 1880, 2415, 718,
	977, 1652, 1733, 1624, 1733, 1623, 171, 1699, 621, 1084,
	175, 1633, 443, 2590, 2066, 1687, 1639, 1643, 1644, 738,
	2468, 738, 412, 1752, 420, 1682, 1315, 619, 1700, 1221,
	1034, 748, 739, 1689, 747, 1669, 173, 605, 2446, 738,
	1675, 1638, 446, 1245, 1751, 1227, 172, 1385, 608, 425,
	1748, 2207, 442, 1514, 421, 1626, 2376, 1232, 443, 1380,
	1379, 1890, 1389, 1386, 422, 1590, 2201, 2606, 1759, 1512,
	1129, 1861, 1642, 1099, 1745, 110, 803, 932, 1818, 932,
	2339, 110, 1300, 1517, 186, 2100, 1658, 1737, 446, 2063,
	2521, 2626, 607, 607, 439, 575, 1754, 1749, 442, 176,
	186, 186, 186, 583, 186, 952, 1755, 1758, 1746, 493,
	1747, 486, 1074, 1662, 434, 1768, 2271, 1365, 1064, 2340,
	1399, 1124, 1125, 1126, 1127, 1128, 1524, 1315, 1315, 1239,
	1232, 1674, 1137, 186, 491, 2636, 1891, 2101, 420, 1770,
	487, 1009, 1145, 1180, 2522, 1183, 2587, 2627, 1100, 1383,
	1508, 981, 993, 2615, 1250, 2613, 1177, 1176, 1509, 1039,
	1510, 171, 2384, 425, 1515, 1725, 1776, 978, 421, 2629,
	1249, 1786, 488, 1076, 1077, 576, 1792, 1063, 422, 970,
	1010, 1016, 504, 1007, 2002, 2456, 110, 2300, 2139, 413,
	2455, 173, 1246, 490, 1289, 2641, 2438, 1079, 2357, 1368,
	604, 172, 483, 2354, 988, 2356, 1204, 1790, 1500, 577,
	1247, 2505, 1375, 2184, 1557, 1794, 1969, 1819, 1965, 1726,
	1356, 1078, 994, 1799, 1798, 1954, 995, 1278, 1270, 1040,
	2335, 1801, 2336, 1885, 1883, 1884, 1876, 1877, 1878, 1879,
	1881, 1882, 2099, 1384, 1266, 1062, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 486, 1208, 1441, 1199, 1199, 2549,
	414, 1373, 2338, 1414, 1847, 1208, 1063, 1371, 2652, 2237,
	2439, 2341, 1064, 1138, 1374, 1511, 1211, 491, 634, 905,
	904, 1543, 1513, 487, 2386, 1041, 1211, 1975, 1974, 1811,
	1817, 1084, 1640, 2140, 1575, 1575, 1588, 1955, 2301, 2141,
	1608, 179, 1206, 1209, 1612, 1613, 1615, 661, 2640, 1943,
	489, 186, 803, 1209, 2353, 488, 2355, 186, 186, 1498,
	1501, 186, 415, 1930, 435, 1844, 186, 1637, 1936, 186,
	1627, 1207, 1636, 1442, 1062, 502, 490, 186, 496, 605,
	993, 2266, 925, 186, 186, 186, 1942, 608, 1004, 186,
	573, 923, 186, 2337, 2226, 1099, 1497, 914, 186, 186,
	186, 186, 186, 2377, 3, 993, 436, 492, 616, 186,
	993, 791, 2436, 2001, 186, 1063, 2312, 475, 34, 803,
	1950, 2161, 1560, 1210, 1949, 1038, 1027, 1059, 186, 2418,
	1908, 1909, 1910, 1210, 1017, 2299, 1959, 437, 186, 438,
	186, 2437, 186, 791, 791, 1985, 186, 1935, 1945, 2222,
	186, 1905, 474, 33, 2077, 186, 1994, 186, 1931, 1025,
	2004, 608, 1390, 1387, 186, 1966, 1868, 769, 473, 30,
	1100, 2009, 1970, 2011, 574, 994, 1990, 186, 791, 995,
	994, 1828, 2012, 1062, 995, 1961, 2016, 1771, 1705, 1697,
	778, 782, 186, 489, 800, 1499, 1686, 1047, 1046, 976,
	1906, 1059, 1983, 893, 894, 1934, 1941, 1796, 2014, 2015,
	1064, 1938, 1939, 1970, 1997, 1944, 2034, 1412, 1403, 1559,
	1023, 1153, 890, 472, 69, 471, 68, 2583, 1696, 1685,
	1253, 2546, 186, 2090, 2328, 1021, 619, 619, 2205, 2203,
	2183, 2025, 501, 2045, 2031, 495, 924, 2018, 2013, 1729,
	492, 1723, 1721, 2039, 774, 922, 1037, 1026, 1033, 2040,
	2041, 1299, 2042, 2043, 468, 22, 2047, 34, 1297, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 1295, 469, 23, 2044,
	1350, 1292, 186, 1349, 2057, 575, 2080, 736, 1290, 1251,
	1024, 2055, 2056, 1243, 2054, 467, 28, 466, 20, 1019,
	608, 1438, 33, 1443, 2061, 464, 19, 1241, 2068, 1450,
	1233, 2095, 2096, 2097, 2070, 465, 18, 1013, 30, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1022, 1502, 2020, 1504, 1505, 1506, 1507, 2086, 2084,
	2089, 1874, 1875, 2479, 186, 576, 1020, 1455, 2114, 2111,
	186, 1530, 1066, 69, 921, 68, 1455, 2119, 1137, 186,
	186, 1350, 1350, 2116, 1349, 1349, 1032, 2113, 2145, 2102,
	2104, 2105, 456, 15, 2397, 1832, 2118, 1570, 1571, 577,
	2617, 1587, 1835, 1599, 1601, 1606, 1609, 1610, 1611, 2149,
	741, 743, 457, 16, 22, 2396, 2146, 1394, 2196, 1851,
	1852, 2172, 2195, 463, 51, 2253, 2144, 23, 2159, 186,
	1018, 186, 2481, 2177, 1809, 2164, 1681, 2215, 2221, 186,
	2194, 110, 791, 2165, 2215, 28, 2245, 20, 1012, 2162,
	1067, 1995, 782, 2232, 1204, 19, 1986, 186, 186, 455,
	50, 1315, 2180, 800, 2229, 18, 462, 12, 1701, 1900,
	2247, 2187, 1692, 2239, 186, 1797, 1608, 1608, 1608, 1880,
	2515, 1913, 481, 186, 2214, 803, 186, 186, 186, 2208,
	2238, 2220, 2204, 803, 2206, 760, 1425, 1426, 461, 44,
	1810, 2347, 1315, 2241, 2233, 920, 2227, 2242, 1665, 1011,
	454, 45, 644, 1208, 1665, 761, 2240, 1680, 2168, 2493,
	2243, 2467, 2273, 1678, 2313, 2249, 2248, 1070, 1694, 2254,
	186, 460, 7, 1683, 1211, 2278, 2545, 1076, 1077, 459,
	6, 2382, 15, 1890, 503, 1736, 458, 36, 1724, 1720,
	1206, 183, 1625, 453, 35, 1315, 416, 1366, 2179, 1307,
	426, 1209, 16, 2270, 2624, 2639, 447, 1314, 2430, 1352,
	2318, 497, 183, 51, 2255, 505, 1874, 1875, 510, 1207,
	2267, 187, 1076, 1077, 186, 1078, 529, 186, 2274, 1076,
	1077, 1783, 1782, 762, 2158, 2106, 1783, 803, 186, 186,
	782, 2298, 186, 186, 186, 2051, 1951, 1920, 1784, 50,
	1622, 1619, 1934, 1079, 1618, 1549, 12, 1140, 1891, 186,
	1315, 2286, 2098, 1150, 186, 1148, 186, 1045, 186, 186,
	186, 1036, 1031, 186, 791, 1028, 1014, 1078, 980, 2348,
	803, 1210, 2196, 791, 1369, 2351, 2195, 2317, 44, 2322,
	2319, 186, 186, 752, 752, 2215, 1315, 1315, 2315, 791,
	45, 416, 2215, 581, 2194, 1315, 1315, 2444, 1314, 1314,
	1352, 1352, 484, 2196, 1402, 1015, 2378, 2195, 1947, 2196,
	2327, 7, 2383, 2195, 416, 416, 2372, 796, 416, 6,
	2388, 1645, 2320, 183, 892, 2194, 36, 2539, 1315, 2367,
	2292, 2194, 2364, 35, 1860, 2498, 2414, 2387, 2393, 2369,
	1558, 1151, 48, 2381, 2389, 1351, 2192, 1884, 1876, 1877,
	1878, 1879, 1881, 1882, 638, 2408, 2394, 2329, 2186, 1715,
	1714, 806, 1378, 660, 1574, 2371, 1814, 1815, 2314, 1456,
	2406, 2407, 1820, 735, 662, 1312, 663, 1313, 2413, 186,
	1181, 186, 650, 803, 186, 792, 1310, 949, 804, 2420,
	1740, 1833, 186, 1382, 1522, 1539, 2316, 1843, 803, 1144,
	630, 642, 641, 1537, 1839, 715, 974, 629, 2323, 1952,
	1846, 2028, 2390, 1850, 1440, 1800, 2153, 1437, 2427, 2196,
	2024, 769, 1224, 2195, 2429, 2202, 2448, 423, 2352, 2450,
	1864, 1871, 947, 1597, 1589, 186, 1585, 1050, 791, 1130,
	2447, 2194, 186, 1444, 1263, 1741, 1351, 1351, 2215, 1001,
	186, 186, 791, 791, 2196, 2432, 186, 2470, 2195, 2035,
	2380, 1765, 1194, 1448, 1137, 759, 758, 2650, 1372, 2477,
	1777, 1606, 1606, 1606, 2473, 186, 2194, 2478, 2434, 1123,
	186, 2482, 1122, 2489, 745, 2486, 2476, 186, 2485, 2507,
	2458, 2211, 992, 2449, 614, 2466, 573, 991, 1199, 1315,
	2218, 1968, 2459, 2460, 1937, 2492, 2495, 2634, 2514, 2199,
	2509, 2555, 186, 186, 616, 145, 2503, 2487, 2488, 186,
	2504, 142, 144, 143, 2000, 72, 32, 791, 2511, 31,
	92, 2501, 186, 2524, 791, 791, 91, 90, 2527, 2526,
	89, 88, 1591, 2512, 87, 86, 85, 84, 615, 83,
	1262, 82, 81, 80, 2530, 2519, 79, 78, 2529, 186,
	77, 186, 76, 529, 186, 529, 803, 915, 75, 782,
	918, 1281, 74, 1281, 525, 522, 416, 2535, 2536, 793,
	574, 71, 805, 70, 29, 529, 529, 416, 940, 2565,
	25, 2564, 2552, 96, 2566, 186, 24, 67, 2570, 66,
	2026, 27, 2568, 2196, 17, 1350, 2567, 2195, 1349, 11,
	2580, 21, 186, 186, 186, 114, 2582, 2581, 113, 112,
	186, 2480, 529, 111, 2593, 2194, 14, 13, 109, 108,
	107, 106, 2600, 792, 186, 2490, 529, 105, 2605, 2603,
	2604, 619, 619, 2602, 10, 9, 1350, 2614, 95, 1349,
	2264, 2612, 979, 1311, 619, 42, 2618, 8, 792, 40,
	39, 2557, 529, 792, 94, 2622, 136, 2623, 135, 132,
	134, 2069, 131, 133, 103, 2630, 1450, 138, 2631, 137,
	129, 127, 2073, 128, 130, 2074, 2638, 2643, 2645, 2637,
	126, 575, 125, 482, 139, 102, 101, 2079, 100, 1350,
	99, 1424, 1349, 98, 2654, 5, 2087, 2, 2643, 2655,
	2661, 1, 0, 483, 2091, 2667, 0, 1937, 2643, 2670,
	2668, 2669, 0, 1315, 416, 2676, 2674, 0, 2645, 2678,
	0, 2675, 2645, 0, 0, 0, 0, 2115, 0, 0,
	2551, 2117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 1311, 0, 0, 2339, 0,
	0, 2332, 792, 0, 1350, 486, 0, 1349, 0, 613,
	0, 576, 2330, 0, 2147, 2148, 0, 2334, 0, 1315,
	0, 0, 0, 2154, 2155, 2156, 0, 0, 491, 0,
	0, 2597, 2598, 2599, 487, 0, 0, 2340, 0, 0,
	1350, 1350, 0, 1349, 1349, 577, 0, 0, 0, 1350,
	1350, 2167, 1349, 1349, 0, 0, 0, 2426, 0, 0,
	2333, 0, 0, 0, 0, 0, 488, 793, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 2188, 1350, 0, 0, 1349, 0, 490, 0, 0,
	0, 0, 793, 0, 2452, 769, 0, 793, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 769, 2464, 0, 1660, 0, 0, 0, 0, 0,
	0, 0, 782, 0, 0, 0, 0, 0, 0, 0,
	782, 510, 1314, 752, 1352, 1591, 1591, 0, 1199, 0,
	800, 0, 0, 0, 0, 0, 0, 2250, 2335, 0,
	2336, 0, 0, 0, 0, 416, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1742, 1314, 0, 1352, 0, 0, 0, 0,
	2338, 0, 0, 800, 800, 0, 2277, 0, 0, 2341,
	2280, 2281, 1830, 1831, 2283, 0, 793, 0, 0, 0,
	0, 2285, 0, 2287, 489, 0, 0, 0, 0, 0,
	0, 1591, 1591, 1591, 0, 0, 0, 0, 0, 2294,
	0, 0, 0, 0, 0, 0, 1314, 0, 1352, 0,
	0, 0, 0, 0, 0, 0, 0, 2542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2303, 1350, 0, 0, 1349, 0, 0, 0,
	0, 492, 2558, 0, 2560, 0, 0, 0, 1897, 1898,
	1899, 2337, 183, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 1314, 0, 1352, 0, 0, 0, 1276, 0, 0,
	0, 0, 2349, 416, 0, 416, 0, 416, 1791, 800,
	1793, 1284, 782, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 0, 0, 0, 0, 0, 1314, 1314, 1352,
	1352, 0, 0, 0, 0, 0, 1314, 1314, 1352, 1352,
	792, 1812, 0, 0, 0, 0, 0, 804, 0, 0,
	0, 0, 529, 183, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 529, 0, 0, 0, 0, 1314,
	0, 1352, 0, 0, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2409, 2410, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 529, 0, 0, 0, 0,
	183, 529, 0, 529, 0, 529, 0, 529, 0, 529,
	0, 0, 0, 0, 0, 2422, 0, 0, 0, 0,
	1413, 2425, 0, 0, 0, 0, 529, 529, 792, 0,
	0, 0, 0, 0, 0, 416, 1591, 1591, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 529, 0, 0,
	0, 0, 0, 0, 0, 2457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1351, 1351, 1350, 0, 0,
	1349, 0, 0, 0, 1351, 1351, 0, 0, 0, 0,
	0, 0, 0, 2075, 2076, 1591, 1591, 1591, 1591, 1591,
	1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
	1591, 1591, 1591, 1591, 0, 1591, 0, 1351, 0, 769,
	0, 0, 0, 0, 0, 769, 769, 0, 0, 769,
	804, 0, 0, 1350, 793, 0, 1349, 0, 0, 0,
	1314, 805, 1352, 0, 0, 0, 0, 0, 0, 2506,
	0, 1962, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 0, 2142, 510, 0, 752, 0, 1988, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 416,
	639, 64, 0, 0, 1350, 0, 2005, 1349, 0, 0,
	0, 1657, 0, 0, 0, 416, 0, 0, 416, 0,
	0, 0, 1670, 0, 2017, 0, 416, 0, 0, 0,
	0, 0, 793, 1262, 416, 0, 0, 0, 0, 1311,
	0, 0, 1262, 0, 416, 0, 0, 0, 0, 1704,
	0, 0, 0, 0, 0, 64, 0, 1711, 805, 2579,
	2579, 0, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2594, 416, 804, 1744, 0,
	529, 0, 0, 529, 0, 529, 0, 416, 416, 0,
	1750, 0, 1311, 0, 0, 2579, 0, 0, 1351, 1670,
	0, 804, 0, 0, 0, 792, 0, 0, 0, 0,
	2071, 597, 0, 0, 804, 0, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 0,
	0, 0, 0, 2579, 0, 0, 0, 0, 0, 770,
	64, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	792, 792, 0, 0, 792, 0, 0, 0, 0, 0,
	2658, 0, 0, 0, 1314, 0, 1352, 0, 0, 0,
	0, 2658, 0, 0, 2658, 2658, 0, 0, 0, 0,
	0, 0, 0, 1311, 1311, 0, 1788, 0, 0, 0,
	0, 0, 1311, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 416, 416, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 1352, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 769, 0, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 1352, 0, 805, 0, 0, 0, 793,
	0, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1351, 0, 0, 0, 0, 0, 1591, 0,
	0, 0, 0, 0, 0, 1742, 769, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 793, 793, 0, 0, 793, 0,
	0, 0, 0, 41, 0, 2269, 800, 0, 0, 1591,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 0,
	0, 0, 0, 0, 0, 2417, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 416, 0, 53, 2441, 480, 54, 416,
	416, 0, 0, 416, 0, 0, 0, 0, 1657, 1351,
	0, 1657, 0, 0, 0, 0, 0, 1591, 0, 1957,
	0, 805, 609, 0, 0, 416, 1963, 1964, 0, 56,
	0, 1670, 769, 0, 1971, 0, 0, 0, 0, 0,
	1976, 1977, 1979, 1981, 1982, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 0, 0, 1993, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 2494, 0, 2361, 0, 0, 0,
	1276, 2366, 1276, 0, 529, 0, 0, 0, 416, 0,
	0, 0, 2023, 0, 0, 0, 0, 416, 0, 2033,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 1874,
	1875, 0, 1892, 1893, 1894, 57, 0, 0, 0, 1788,
	0, 0, 792, 0, 0, 0, 2276, 0, 0, 0,
	804, 0, 1076, 1077, 1788, 1106, 1107, 1108, 1116, 1117,
	1118, 118, 59, 0, 60, 1094, 0, 0, 0, 1109,
	0, 0, 0, 0, 792, 792, 1079, 0, 146, 1120,
	0, 0, 1789, 1889, 0, 479, 0, 0, 93, 0,
	0, 0, 0, 0, 416, 0, 0, 0, 0, 0,
	1078, 0, 597, 0, 0, 0, 1098, 0, 148, 792,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	1311, 0, 1133, 0, 1136, 0, 0, 0, 0, 0,
	2442, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2108, 147, 0, 1880, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	141, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	1084, 0, 0, 2475, 0, 0, 1311, 805, 0, 0,
	0, 117, 0, 0, 0, 0, 1895, 0, 0, 0,
	1113, 1121, 0, 1874, 1875, 0, 1892, 1893, 1894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 1890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 1111, 0, 0,
	0, 0, 1657, 0, 1099, 0, 793, 1311, 0, 0,
	0, 892, 1657, 0, 805, 0, 0, 1889, 0, 0,
	0, 0, 0, 0, 0, 0, 2191, 2523, 64, 0,
	1110, 0, 0, 1220, 0, 0, 0, 0, 793, 793,
	0, 0, 0, 0, 0, 2216, 0, 0, 0, 0,
	0, 0, 2216, 0, 0, 0, 1891, 0, 0, 0,
	0, 1670, 0, 1276, 1105, 0, 0, 0, 0, 0,
	0, 2235, 2554, 793, 0, 0, 0, 0, 0, 1100,
	0, 1880, 0, 0, 0, 0, 0, 0, 0, 416,
	416, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 2261, 0, 0, 0,
	0, 0, 0, 0, 0, 2263, 0, 0, 2268, 416,
	416, 0, 0, 0, 0, 0, 0, 0, 1742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 1890, 1886, 1887, 1888, 0,
	0, 0, 0, 1885, 1883, 1884, 1876, 1877, 1878, 1879,
	1881, 1882, 2293, 0, 0, 0, 1112, 0, 0, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 804, 477, 0, 0,
	0, 0, 0, 1916, 804, 0, 0, 0, 38, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 416, 0, 0, 892,
	1891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1657, 892, 0, 0, 2325, 2326, 1670, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2191, 892, 0, 0, 0, 0, 2359, 0, 2360, 0,
	416, 2362, 2363, 2216, 0, 416, 478, 0, 0, 0,
	2216, 0, 0, 53, 0, 480, 54, 0, 0, 0,
	0, 2191, 0, 892, 1711, 0, 0, 2191, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	1886, 1887, 1888, 0, 0, 0, 0, 1885, 1883, 1884,
	1876, 1877, 1878, 1879, 1881, 1882, 597, 0, 0, 597,
	597, 0, 0, 0, 0, 792, 0, 793, 0, 0,
	0, 804, 0, 0, 792, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 1670, 1520, 2433, 0, 0, 2435, 0, 805, 0,
	0, 0, 0, 57, 416, 609, 0, 2191, 0, 0,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	59, 0, 60, 0, 0, 0, 2216, 0, 0, 0,
	0, 0, 2191, 0, 0, 0, 146, 416, 0, 0,
	1410, 0, 0, 479, 892, 0, 93, 0, 0, 0,
	0, 0, 2261, 2261, 804, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 148, 770, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 2500, 0, 0,
	0, 0, 1657, 1220, 0, 0, 0, 0, 0, 1276,
	0, 0, 805, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 64, 792,
	0, 140, 0, 0, 2516, 2517, 0, 0, 141, 0,
	0, 416, 0, 792, 792, 0, 0, 0, 0, 793,
	0, 0, 0, 0, 2534, 805, 0, 0, 793, 117,
	0, 64, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 0,
	0, 2550, 64, 892, 0, 0, 416, 0, 64, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 2191, 1094, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 1120, 2500, 792, 0,
	0, 0, 0, 0, 0, 792, 792, 0, 0, 0,
	0, 0, 0, 0, 892, 892, 892, 1078, 0, 0,
	0, 0, 416, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 2611, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 1077,
	0, 0, 0, 805, 1116, 1117, 1118, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 1079, 0, 0, 1120, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 793, 0, 0, 1078, 1113, 1121, 0,
	0, 0, 1098, 0, 0, 0, 0, 793, 793, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 1099, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 1084, 1110, 476, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 1113, 1121, 0, 793,
	793, 0, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 1105, 0, 0, 53, 0, 480, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 805, 0, 1111, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1114, 0, 0, 0, 0, 56, 1093,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 0, 0, 770, 770, 0,
	1105, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 1100, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 1114, 0, 57, 0, 0, 0, 0, 0,
	1915, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	118, 59, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 64, 0, 0, 479, 64, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 148, 0, 0,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 610, 0, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 191, 192, 193, 352,
	690, 354, 691, 194, 692, 693, 0, 195, 358, 359,
	196, 197, 643, 674, 694, 695, 362, 0, 198, 686,
	0, 666, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 720, 209, 210,
	211, 0, 667, 668, 670, 0, 669, 671, 212, 213,
	417, 214, 696, 215, 697, 698, 628, 216, 0, 217,
	0, 218, 0, 0, 689, 220, 0, 221, 64, 0,
	0, 631, 222, 224, 223, 225, 676, 677, 654, 721,
	0, 0, 0, 0, 770, 226, 227, 699, 700, 701,
	0, 228, 0, 229, 0, 0, 722, 0, 230, 687,
	0, 374, 0, 0, 231, 232, 233, 234, 683, 685,
	724, 0, 377, 238, 0, 235, 0, 723, 236, 702,
	237, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	239, 240, 241, 726, 385, 386, 242, 243, 244, 0,
	246, 245, 0, 688, 727, 247, 248, 728, 0, 249,
	250, 0, 0, 251, 0, 252, 729, 253, 254, 256,
	388, 255, 730, 257, 258, 260, 259, 625, 0, 655,
	684, 261, 708, 262, 263, 0, 264, 0, 770, 265,
	0, 0, 266, 391, 731, 267, 732, 678, 268, 269,
	270, 271, 272, 0, 273, 679, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 709, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 733, 296, 297, 632, 298, 0,
	302, 303, 304, 305, 306, 146, 308, 397, 307, 309,
	310, 672, 311, 299, 300, 312, 734, 313, 710, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 711,
	318, 319, 680, 0, 322, 148, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 712, 713, 0, 0,
	331, 332, 681, 682, 653, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 673, 341, 0, 407, 342,
	343, 344, 953, 714, 770, 0, 345, 0, 0, 0,
	140, 346, 347, 348, 349, 350, 626, 141, 0, 0,
	0, 0, 0, 0, 624, 0, 0, 0, 0, 622,
	623, 0, 0, 0, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 807, 0, 190,
	808, 809, 810, 811, 351, 812, 813, 814, 815, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 816,
	195, 358, 359, 196, 197, 817, 818, 360, 361, 362,
	819, 198, 363, 820, 794, 821, 199, 200, 201, 0,
	203, 204, 205, 202, 822, 206, 0, 207, 208, 823,
	720, 209, 210, 211, 824, 825, 827, 826, 828, 829,
	830, 212, 213, 417, 214, 364, 215, 365, 366, 831,
	216, 832, 217, 833, 218, 834, 835, 219, 220, 836,
	221, 837, 0, 838, 367, 222, 224, 223, 225, 368,
	369, 839, 721, 840, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 64, 228, 841, 229, 842, 843, 722,
	844, 230, 373, 845, 374, 846, 1520, 231, 232, 233,
	234, 375, 376, 724, 847, 377, 238, 848, 235, 849,
	723, 236, 378, 237, 379, 380, 381, 382, 383, 850,
	384, 851, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 852, 246, 245, 853, 387, 727, 247, 248,
	728, 854, 249, 250, 855, 856, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	857, 858, 859, 389, 261, 390, 262, 263, 860, 264,
	861, 862, 265, 863, 864, 266, 391, 731, 267, 732,
	392, 268, 269, 270, 271, 272, 865, 273, 393, 274,
	394, 275, 866, 276, 277, 278, 279, 280, 395, 281,
	282, 867, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 868, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 869, 308,
	397, 307, 309, 310, 870, 311, 299, 300, 312, 734,
	313, 398, 399, 314, 871, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 872, 322, 873, 323,
	324, 325, 326, 327, 328, 329, 330, 874, 402, 403,
	404, 875, 876, 331, 332, 405, 406, 877, 333, 334,
	335, 336, 878, 879, 337, 338, 339, 340, 880, 341,
	881, 407, 342, 343, 344, 408, 409, 882, 883, 345,
	884, 885, 886, 887, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1650,
	0, 0, 0, 0, 0, 188, 189, 807, 1651, 190,
	808, 809, 810, 811, 351, 812, 813, 814, 815, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 816,
	195, 358, 359, 196, 197, 817, 818, 360, 361, 362,
	819, 198, 363, 820, 794, 821, 199, 200, 201, 0,
	203, 204, 205, 202, 822, 206, 0, 207, 208, 823,
	720, 209, 210, 211, 824, 825, 827, 826, 828, 829,
	830, 212, 213, 417, 214, 364, 215, 365, 366, 831,
	216, 832, 217, 833, 218, 834, 835, 219, 220, 836,
	221, 837, 0, 838, 367, 222, 224, 223, 225, 368,
	369, 839, 721, 840, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 841, 229, 842, 843, 722,
	844, 230, 373, 845, 374, 846, 0, 231, 232, 233,
	234, 375, 376, 724, 847, 377, 238, 848, 235, 849,
	723, 236, 378, 237, 379, 380, 381, 382, 383, 850,
	384, 851, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 852, 246, 245, 853, 387, 727, 247, 248,
	728, 854, 249, 250, 855, 856, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	857, 858, 859, 389, 261, 390, 262, 263, 860, 264,
	861, 862, 265, 863, 864, 266, 391, 731, 267, 732,
	392, 268, 269, 270, 271, 272, 865, 273, 393, 274,
	394, 275, 866, 276, 277, 278, 279, 280, 395, 281,
	282, 867, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 868, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 869, 308,
	397, 307, 309, 310, 870, 311, 299, 300, 312, 734,
	313, 398, 399, 314, 871, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 872, 322, 873, 323,
	324, 325, 326, 327, 328, 329, 330, 874, 402, 403,
	404, 875, 876, 331, 332, 405, 406, 877, 333, 334,
	335, 336, 878, 879, 337, 338, 339, 340, 880, 341,
	881, 407, 342, 343, 344, 408, 409, 882, 883, 345,
	884, 885, 886, 887, 346, 347, 348, 349, 350, 0,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 807, 2321,
	190, 808, 809, 810, 811, 351, 812, 813, 814, 815,
	191, 192, 193, 352, 353, 354, 355, 194, 356, 357,
	816, 195, 358, 359, 196, 197, 817, 818, 360, 361,
	362, 819, 198, 363, 820, 794, 821, 199, 200, 201,
	0, 203, 204, 205, 202, 822, 206, 0, 207, 208,
	823, 720, 209, 210, 211, 824, 825, 827, 826, 828,
	829, 830, 212, 213, 417, 214, 364, 215, 365, 366,
	831, 216, 832, 217, 833, 218, 834, 835, 219, 220,
	836, 221, 837, 0, 838, 367, 222, 224, 223, 225,
	368, 369, 839, 721, 840, 0, 0, 0, 0, 226,
	227, 370, 371, 372, 0, 228, 841, 229, 842, 843,
	722, 844, 230, 373, 845, 374, 846, 0, 231, 232,
	233, 234, 375, 376, 724, 847, 377, 238, 848, 235,
	849, 723, 236, 378, 237, 379, 380, 381, 382, 383,
	850, 384, 851, 725, 239, 240, 241, 726, 385, 386,
	242, 243, 244, 852, 246, 245, 853, 387, 727, 247,
	248, 728, 854, 249, 250, 855, 856, 251, 0, 252,
	729, 253, 254, 256, 388, 255, 730, 257, 258, 260,
	259, 857, 858, 859, 389, 261, 390, 262, 263, 860,
	264, 861, 862, 265, 863, 864, 266, 391, 731, 267,
	732, 392, 268, 269, 270, 271, 272, 865, 273, 393,
	274, 394, 275, 866, 276, 277, 278, 279, 280, 395,
	281, 282, 867, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 868, 295, 733, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 869,
	308, 397, 307, 309, 310, 870, 311, 299, 300, 312,
	734, 313, 398, 399, 314, 871, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 872, 322, 873,
	323, 324, 325, 326, 327, 328, 329, 330, 874, 402,
	403, 404, 875, 876, 331, 332, 405, 406, 877, 333,
	334, 335, 336, 878, 879, 337, 338, 339, 340, 880,
	341, 881, 407, 342, 343, 344, 408, 409, 882, 883,
	345, 884, 885, 886, 887, 346, 347, 348, 349, 350,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 188, 189, 807, 0,
	190, 808, 809, 810, 811, 351, 812, 813, 814, 815,
	191, 192, 193, 352, 353, 354, 355, 194, 356, 357,
	816, 195, 358, 359, 196, 197, 817, 818, 360, 361,
	362, 819, 198, 363, 820, 794, 821, 199, 200, 201,
	0, 203, 204, 205, 202, 822, 206, 0, 207, 208,
	823, 720, 209, 210, 211, 824, 825, 827, 826, 828,
	829, 830, 212, 213, 417, 214, 364, 215, 365, 366,
	831, 216, 832, 217, 833, 218, 834, 835, 219, 220,
	836, 221, 837, 0, 838, 367, 222, 224, 223, 225,
	368, 369, 839, 721, 840, 0, 0, 0, 0, 226,
	227, 370, 371, 372, 0, 228, 841, 229, 842, 843,
	722, 844, 230, 373, 845, 374, 846, 0, 231, 232,
	233, 234, 375, 376, 724, 847, 377, 238, 848, 235,
	849, 723, 236, 378, 237, 379, 380, 381, 382, 383,
	850, 384, 851, 725, 239, 240, 241, 726, 385, 386,
	242, 243, 244, 852, 246, 245, 853, 387, 727, 247,
	248, 728, 854, 249, 250, 855, 856, 251, 0, 252,
	729, 253, 254, 256, 388, 255, 730, 257, 258, 260,
	259, 857, 858, 859, 389, 261, 390, 262, 263, 860,
	264, 861, 862, 265, 863, 864, 266, 391, 731, 267,
	732, 392, 268, 269, 270, 271, 272, 865, 273, 393,
	274, 394, 275, 866, 276, 277, 278, 279, 280, 395,
	281, 282, 867, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 868, 295, 733, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 869,
	308, 397, 307, 309, 310, 870, 311, 299, 300, 312,
	734, 313, 398, 399, 314, 871, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 872, 322, 873,
	323, 324, 325, 326, 327, 328, 329, 330, 874, 402,
	403, 404, 875, 876, 331, 332, 405, 406, 877, 333,
	334, 335, 336, 878, 879, 337, 338, 339, 340, 880,
	341, 881, 407, 342, 343, 344, 408, 409, 882, 883,
	345, 884, 885, 886, 887, 346, 347, 348, 349, 350,
	1548, 0, 658, 647, 648, 645, 646, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	1545, 0, 190, 0, 0, 0, 0, 675, 640, 0,
	0, 0, 191, 192, 193, 352, 690, 354, 691, 194,
	692, 693, 0, 195, 358, 359, 196, 197, 643, 674,
	694, 695, 362, 0, 198, 686, 0, 666, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 720, 209, 210, 211, 0, 667, 668,
	670, 0, 669, 671, 212, 213, 417, 214, 696, 215,
	697, 698, 628, 216, 0, 217, 0, 218, 1546, 0,
	689, 220, 0, 221, 0, 0, 0, 631, 222, 224,
	223, 225, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 226, 227, 699, 700, 701, 0, 228, 0, 229,
	0, 0, 722, 0, 230, 687, 0, 374, 0, 0,
	231, 232, 233, 234, 683, 685, 724, 0, 377, 238,
	0, 235, 0, 723, 236, 702, 237, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 239, 240, 241, 726,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 688,
	727, 247, 248, 728, 0, 249, 250, 0, 0, 251,
	0, 252, 729, 253, 254, 256, 388, 255, 730, 257,
	258, 260, 259, 625, 0, 655, 684, 261, 708, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 391,
	731, 267, 732, 678, 268, 269, 270, 271, 272, 0,
	273, 679, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 709, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 632, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 672, 311, 299,
	300, 312, 734, 313, 710, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 711, 318, 319, 680, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 712, 713, 0, 0, 331, 332, 681, 682,
	653, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 673, 341, 0, 407, 342, 343, 344, 408, 714,
	1544, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 626, 658, 647, 648, 645, 646, 637, 0,
	624, 0, 0, 0, 0, 622, 623, 1547, 0, 188,
	189, 0, 0, 190, 633, 1542, 0, 0, 675, 640,
	636, 0, 0, 191, 192, 193, 352, 690, 354, 691,
	194, 692, 693, 0, 195, 358, 359, 196, 197, 643,
	674, 694, 695, 362, 0, 198, 686, 0, 666, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 720, 209, 210, 211, 0, 667,
	668, 670, 0, 669, 671, 212, 213, 417, 214, 696,
	215, 697, 698, 628, 216, 0, 217, 0, 218, 0,
	0, 689, 220, 0, 221, 0, 0, 0, 631, 222,
	224, 223, 225, 676, 677, 654, 721, 0, 0, 0,
	0, 0, 226, 227, 699, 700, 701, 0, 228, 0,
	229, 0, 0, 722, 0, 230, 687, 0, 374, 0,
	0, 231, 232, 233, 234, 683, 685, 724, 0, 377,
	238, 0, 235, 0, 723, 236, 702, 237, 703, 704,
	705, 706, 707, 0, 665, 0, 725, 239, 240, 241,
	726, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	688, 727, 247, 248, 728, 0, 249, 250, 0, 0,
	251, 0, 252, 729, 253, 254, 256, 388, 255, 730,
	257, 258, 260, 259, 625, 0, 655, 684, 261, 708,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 731, 267, 732, 678, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 146, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 148, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 953,
	714, 0, 0, 345, 0, 0, 0, 140, 346, 347,
	348, 349, 350, 626, 141, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 622, 623, 658, 647,
	648, 645, 646, 637, 0, 1139, 0, 0, 0, 0,
	0, 636, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 675, 640, 0, 0, 0, 191, 192,
	193, 352, 690, 354, 691, 194, 692, 693, 1602, 195,
	358, 359, 196, 197, 643, 674, 694, 695, 362, 0,
	198, 686, 0, 666, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 720,
	209, 210, 211, 0, 667, 668, 670, 0, 669, 671,
	212, 213, 417, 214, 696, 215, 697, 698, 628, 216,
	0, 217, 0, 218, 0, 0, 689, 220, 0, 221,
	0, 0, 0, 631, 222, 224, 223, 225, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 226, 227, 699,
	700, 701, 0, 228, 0, 229, 0, 1607, 722, 0,
	230, 687, 0, 374, 0, 0, 231, 232, 233, 234,
	683, 685, 724, 0, 377, 238, 0, 235, 0, 723,
	236, 702, 237, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 239, 240, 241, 726, 385, 386, 242, 243,
	244, 0, 246, 245, 1603, 688, 727, 247, 248, 728,
	0, 249, 250, 0, 0, 251, 0, 252, 729, 253,
	254, 256, 388, 255, 730, 257, 258, 260, 259, 625,
	0, 655, 684, 261, 708, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 731, 267, 732, 678,
	268, 269, 270, 271, 272, 0, 273, 679, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 709, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 733, 296, 297, 632,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 672, 311, 299, 300, 312, 734, 313,
	710, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 711, 318, 319, 680, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 712, 713,
	0, 1604, 331, 332, 681, 682, 653, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 673, 341, 0,
	407, 342, 343, 344, 408, 714, 0, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 626, 658,
	647, 648, 645, 646, 637, 0, 624, 0, 0, 0,
	0, 622, 623, 0, 0, 188, 189, 0, 0, 190,
	633, 0, 0, 0, 675, 640, 636, 0, 0, 191,
	192, 193, 352, 690, 354, 691, 194, 692, 693, 0,
	195, 358, 359, 196, 197, 643, 674, 694, 695, 362,
	0, 198, 686, 0, 666, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	720, 209, 210, 211, 0, 667, 668, 670, 0, 669,
	671, 212, 213, 417, 214, 696, 215, 697, 698, 628,
	216, 0, 217, 0, 218, 0, 0, 689, 220, 0,
	221, 0, 0, 0, 631, 222, 224, 223, 225, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 226, 227,
	699, 700, 701, 0, 228, 0, 229, 0, 0, 722,
	0, 230, 687, 0, 374, 0, 0, 231, 232, 233,
	234, 683, 685, 724, 0, 377, 238, 0, 235, 0,
	723, 236, 702, 237, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 688, 727, 247, 248,
	728, 0, 249, 250, 0, 0, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	625, 2244, 655, 684, 261, 708, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 731, 267, 732,
	678, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 1200, 0, 188, 189, 0, 0,
	190, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	191, 192, 193, 352, 690, 354, 691, 194, 692, 693,
	0, 195, 358, 359, 196, 197, 643, 674, 694, 695,
	362, 0, 198, 686, 0, 666, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 720, 209, 210, 211, 0, 667, 668, 670, 0,
	669, 671, 212, 213, 417, 214, 696, 215, 697, 698,
	628, 216, 0, 217, 0, 218, 0, 0, 689, 220,
	0, 221, 0, 0, 0, 631, 222, 224, 223, 225,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 226,
	227, 699, 700, 701, 0, 228, 0, 229, 0, 0,
	722, 0, 230, 687, 0, 374, 0, 0, 231, 232,
	233, 234, 683, 685, 724, 0, 377, 238, 1452, 235,
	0, 723, 236, 702, 237, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 239, 240, 241, 726, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 688, 727, 247,
	248, 728, 0, 249, 250, 0, 0, 251, 0, 252,
	729, 253, 254, 256, 388, 255, 730, 257, 258, 260,
	259, 625, 0, 655, 684, 261, 708, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 391, 731, 267,
	732, 678, 268, 269, 270, 271, 272, 0, 273, 679,
	274, 394, 275, 1451, 276, 277, 278, 279, 280, 709,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 733, 296,
	297, 632, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 672, 311, 299, 300, 312,
	734, 313, 710, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 711, 318, 319, 680, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	712, 713, 0, 0, 331, 332, 681, 682, 653, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 673,
	341, 0, 407, 342, 343, 344, 408, 714, 0, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	626, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	0, 0, 0, 622, 623, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 618, 636, 658,
	647, 648, 645, 646, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 675, 640, 0, 0, 0, 191,
	192, 193, 352, 690, 354, 691, 194, 692, 693, 0,
	195, 358, 359, 196, 197, 643, 674, 694, 695, 362,
	0, 198, 686, 0, 666, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	720, 209, 210, 211, 0, 667, 668, 670, 0, 669,
	671, 212, 213, 417, 214, 696, 215, 697, 698, 628,
	216, 0, 217, 0, 218, 0, 0, 689, 220, 0,
	221, 0, 0, 0, 631, 222, 224, 223, 225, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 226, 227,
	699, 700, 701, 0, 228, 0, 229, 0, 0, 722,
	0, 230, 687, 0, 374, 0, 0, 231, 232, 233,
	234, 683, 685, 724, 0, 377, 238, 0, 235, 0,
	723, 236, 702, 237, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 688, 727, 247, 248,
	728, 0, 249, 250, 0, 0, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	625, 0, 655, 684, 261, 708, 262, 263, 0, 264,
	620, 0, 265, 0, 0, 266, 391, 731, 267, 732,
	678, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 188, 189, 0, 0,
	190, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	191, 192, 193, 352, 690, 354, 691, 194, 692, 693,
	0, 195, 358, 359, 196, 197, 643, 674, 694, 695,
	362, 0, 198, 686, 0, 666, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 720, 209, 210, 211, 0, 667, 668, 670, 0,
	669, 671, 212, 213, 417, 214, 696, 215, 697, 698,
	628, 216, 0, 217, 0, 218, 0, 0, 689, 220,
	0, 221, 0, 0, 0, 631, 222, 224, 223, 225,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 226,
	227, 699, 700, 701, 0, 228, 0, 229, 0, 0,
	722, 0, 230, 687, 0, 374, 0, 0, 231, 232,
	233, 234, 683, 685, 724, 0, 377, 238, 0, 235,
	0, 723, 236, 702, 237, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 239, 240, 241, 726, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 688, 727, 247,
	248, 728, 0, 249, 250, 0, 0, 251, 0, 252,
	729, 253, 254, 256, 388, 255, 730, 257, 258, 260,
	259, 625, 0, 655, 684, 261, 708, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 391, 731, 267,
	732, 678, 268, 269, 270, 271, 272, 0, 273, 679,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 709,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 733, 296,
	297, 632, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 672, 311, 299, 300, 312,
	734, 313, 710, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 711, 318, 319, 680, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	712, 713, 0, 0, 331, 332, 681, 682, 653, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 673,
	341, 0, 407, 342, 343, 344, 408, 714, 2094, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	626, 658, 647, 648, 645, 646, 637, 0, 624, 0,
	0, 0, 0, 622, 623, 0, 0, 188, 189, 0,
	0, 190, 633, 0, 0, 0, 675, 640, 636, 0,
	0, 191, 192, 193, 352, 690, 354, 691, 194, 692,
	693, 0, 195, 358, 359, 196, 197, 643, 674, 694,
	695, 362, 0, 198, 686, 0, 666, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 720, 209, 210, 211, 0, 667, 668, 670,
	0, 669, 671, 212, 213, 417, 214, 696, 215, 697,
	698, 628, 216, 0, 217, 0, 218, 0, 0, 689,
	220, 0, 221, 0, 0, 0, 631, 222, 224, 223,
	225, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	226, 227, 699, 700, 701, 0, 228, 0, 229, 0,
	0, 722, 0, 230, 687, 0, 374, 0, 0, 231,
	232, 233, 234, 683, 685, 724, 0, 377, 238, 0,
	235, 0, 723, 236, 702, 237, 703, 704, 705, 706,
	707, 0, 665, 0, 725, 239, 240, 241, 726, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 688, 727,
	247, 248, 728, 0, 249, 250, 0, 0, 251, 0,
	252, 729, 253, 254, 256, 388, 255, 730, 257, 258,
	260, 259, 625, 0, 655, 684, 261, 708, 262, 263,
	0, 264, 620, 0, 265, 0, 0, 266, 391, 731,
	267, 732, 678, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 658, 647, 648, 645, 646, 637, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 188, 189,
	0, 0, 190, 633, 0, 0, 0, 675, 640, 636,
	0, 0, 191, 192, 193, 352, 690, 354, 691, 194,
	692, 693, 0, 195, 358, 359, 196, 197, 643, 674,
	694, 695, 362, 0, 198, 686, 0, 666, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 720, 209, 210, 211, 0, 667, 668,
	670, 0, 669, 671, 212, 213, 417, 214, 696, 215,
	697, 698, 628, 216, 0, 217, 0, 218, 0, 0,
	689, 220, 0, 221, 0, 0, 0, 631, 222, 224,
	223, 225, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 226, 227, 699, 700, 701, 0, 228, 0, 229,
	0, 0, 722, 0, 230, 687, 0, 374, 0, 0,
	231, 232, 233, 234, 683, 685, 724, 0, 377, 238,
	0, 235, 0, 723, 236, 702, 237, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 239, 240, 241, 726,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 688,
	727, 247, 248, 728, 0, 249, 250, 0, 0, 251,
	0, 252, 729, 253, 254, 256, 388, 255, 730, 257,
	258, 260, 259, 625, 0, 655, 684, 261, 708, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 391,
	731, 267, 732, 678, 268, 269, 270, 271, 272, 0,
	273, 679, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 709, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 632, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 672, 311, 299,
	300, 312, 734, 313, 710, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 711, 318, 319, 680, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 712, 713, 0, 0, 331, 332, 681, 682,
	653, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 673, 341, 0, 407, 342, 343, 344, 408, 714,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 626, 658, 647, 648, 645, 646, 637, 0,
	624, 0, 0, 0, 0, 622, 623, 1200, 0, 188,
	189, 0, 0, 190, 633, 0, 0, 0, 675, 640,
	636, 0, 0, 191, 192, 193, 352, 690, 354, 691,
	194, 692, 693, 0, 195, 358, 359, 196, 197, 643,
	674, 694, 695, 362, 0, 198, 686, 0, 666, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 720, 209, 210, 211, 0, 667,
	668, 670, 0, 669, 671, 212, 213, 417, 214, 696,
	215, 697, 698, 628, 216, 0, 217, 0, 218, 0,
	0, 689, 220, 0, 221, 0, 0, 0, 631, 222,
	224, 223, 225, 676, 677, 654, 721, 0, 0, 0,
	0, 0, 226, 227, 699, 700, 701, 0, 228, 0,
	229, 0, 1607, 722, 0, 230, 687, 0, 374, 0,
	0, 231, 232, 233, 234, 683, 685, 724, 0, 377,
	238, 0, 235, 0, 723, 236, 702, 237, 703, 704,
	705, 706, 707, 0, 665, 0, 725, 239, 240, 241,
	726, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	688, 727, 247, 248, 728, 0, 249, 250, 0, 0,
	251, 0, 252, 729, 253, 254, 256, 388, 255, 730,
	257, 258, 260, 259, 625, 0, 655, 684, 261, 708,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 731, 267, 732, 678, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 0, 0,
	1653, 636, 658, 647, 648, 645, 646, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 675, 640, 0,
	0, 0, 191, 192, 193, 352, 690, 354, 691, 194,
	692, 693, 0, 195, 358, 359, 196, 197, 643, 674,
	694, 695, 362, 0, 198, 686, 0, 666, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 720, 209, 210, 211, 0, 667, 668,
	670, 0, 669, 671, 212, 213, 417, 214, 696, 215,
	697, 698, 628, 216, 0, 217, 0, 218, 0, 0,
	689, 220, 0, 221, 0, 0, 0, 631, 222, 224,
	223, 225, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 226, 227, 699, 700, 701, 0, 228, 0, 229,
	0, 0, 722, 0, 230, 687, 0, 374, 0, 0,
	231, 232, 233, 234, 683, 685, 724, 0, 377, 238,
	0, 235, 0, 723, 236, 702, 237, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 239, 240, 241, 726,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 688,
	727, 247, 248, 728, 0, 249, 250, 0, 0, 251,
	0, 252, 729, 253, 254, 256, 388, 255, 730, 257,
	258, 260, 259, 625, 0, 655, 684, 261, 708, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 391,
	731, 267, 732, 678, 268, 269, 270, 271, 272, 0,
	273, 679, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 709, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 632, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 672, 311, 299,
	300, 312, 734, 313, 710, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 711, 318, 319, 680, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 712, 713, 0, 0, 331, 332, 681, 682,
	653, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 673, 341, 0, 407, 342, 343, 344, 408, 714,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 626, 0, 0, 0, 0, 0, 0, 0,
	624, 0, 0, 0, 0, 622, 623, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 0, 0, 1616,
	636, 658, 647, 648, 645, 646, 637, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 675, 640, 0, 0,
	0, 191, 192, 193, 352, 690, 354, 691, 194, 692,
	693, 0, 195, 358, 359, 196, 197, 643, 674, 694,
	695, 362, 0, 198, 686, 0, 666, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 720, 209, 210, 211, 0, 667, 668, 670,
	0, 669, 671, 212, 213, 417, 214, 696, 215, 697,
	698, 628, 216, 0, 217, 0, 218, 0, 0, 689,
	220, 0, 221, 0, 0, 0, 631, 222, 224, 223,
	225, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	226, 227, 699, 700, 701, 0, 228, 0, 229, 0,
	0, 722, 0, 230, 687, 0, 374, 0, 0, 231,
	232, 233, 234, 683, 685, 724, 0, 377, 238, 0,
	235, 0, 723, 236, 702, 237, 703, 704, 705, 706,
	707, 0, 665, 0, 725, 239, 240, 241, 726, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 688, 727,
	247, 248, 728, 0, 249, 250, 0, 0, 251, 0,
	252, 729, 253, 254, 256, 388, 255, 730, 257, 258,
	260, 259, 625, 0, 655, 684, 261, 708, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 731,
	267, 732, 678, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1614, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	191, 192, 193, 352, 690, 354, 691, 194, 692, 693,
	0, 195, 358, 359, 196, 197, 643, 674, 694, 695,
	362, 0, 198, 686, 0, 666, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 720, 209, 210, 211, 0, 667, 668, 670, 0,
	669, 671, 212, 213, 417, 214, 696, 215, 697, 698,
	628, 216, 0, 217, 0, 218, 0, 0, 689, 220,
	0, 221, 0, 0, 0, 631, 222, 224, 223, 225,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 226,
	227, 699, 700, 701, 0, 228, 0, 229, 0, 0,
	722, 0, 230, 687, 0, 374, 0, 0, 231, 232,
	233, 234, 683, 685, 724, 0, 377, 238, 0, 235,
	0, 723, 236, 702, 237, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 239, 240, 241, 726, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 688, 727, 247,
	248, 728, 0, 249, 250, 0, 0, 251, 0, 252,
	729, 253, 254, 256, 388, 255, 730, 257, 258, 260,
	259, 625, 0, 655, 684, 261, 708, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 391, 731, 267,
	732, 678, 268, 269, 270, 271, 272, 0, 273, 679,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 709,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 733, 296,
	297, 632, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 672, 311, 299, 300, 312,
	734, 313, 710, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 711, 318, 319, 680, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	712, 713, 0, 0, 331, 332, 681, 682, 653, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 673,
	341, 0, 407, 342, 343, 344, 408, 714, 0, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	626, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	0, 0, 0, 622, 623, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 1598, 636, 658,
	647, 648, 645, 646, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 675, 640, 0, 0, 0, 191,
	192, 193, 352, 690, 354, 691, 194, 692, 693, 0,
	195, 358, 359, 196, 197, 643, 674, 694, 695, 362,
	0, 198, 686, 0, 666, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	720, 209, 210, 211, 0, 667, 668, 670, 0, 669,
	671, 212, 213, 417, 214, 696, 215, 697, 698, 628,
	216, 0, 217, 0, 218, 0, 0, 689, 220, 0,
	221, 0, 0, 0, 631, 222, 224, 223, 225, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 226, 227,
	699, 700, 701, 0, 228, 0, 229, 0, 0, 722,
	0, 230, 687, 0, 374, 0, 0, 231, 232, 233,
	234, 683, 685, 724, 0, 377, 238, 0, 235, 0,
	723, 236, 702, 237, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 688, 727, 247, 248,
	728, 0, 249, 250, 0, 0, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	625, 0, 655, 684, 261, 708, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 731, 267, 732,
	678, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	0, 0, 0, 0, 0, 0, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 1586, 636, 658, 647,
	648, 645, 646, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 675, 640, 0, 0, 0, 191, 192,
	193, 352, 690, 354, 691, 194, 692, 693, 0, 195,
	358, 359, 196, 197, 643, 674, 694, 695, 362, 0,
	198, 686, 0, 666, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 720,
	209, 210, 211, 0, 667, 668, 670, 0, 669, 671,
	212, 213, 417, 214, 696, 215, 697, 698, 628, 216,
	0, 217, 0, 218, 0, 0, 689, 220, 0, 221,
	0, 0, 0, 631, 222, 224, 223, 225, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 226, 227, 699,
	700, 701, 0, 228, 0, 229, 0, 0, 722, 0,
	230, 687, 0, 374, 0, 0, 231, 232, 233, 234,
	683, 685, 724, 0, 377, 238, 0, 235, 0, 723,
	236, 702, 237, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 239, 240, 241, 726, 385, 386, 242, 243,
	244, 0, 246, 245, 0, 688, 727, 247, 248, 728,
	0, 249, 250, 0, 0, 251, 0, 252, 729, 253,
	254, 256, 388, 255, 730, 257, 258, 260, 259, 625,
	0, 655, 684, 261, 708, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 731, 267, 732, 678,
	268, 269, 270, 271, 272, 0, 273, 679, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 709, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 733, 296, 297, 632,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 672, 311, 299, 300, 312, 734, 313,
	710, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 711, 318, 319, 680, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 712, 713,
	0, 0, 331, 332, 681, 682, 653, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 673, 341, 0,
	407, 342, 343, 344, 408, 714, 0, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 626, 0,
	0, 0, 0, 0, 0, 0, 624, 0, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 0, 0, 0, 1584, 636, 1576, 647, 648,
	645, 646, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 675, 640, 0, 0, 0, 191, 192, 193,
	352, 690, 354, 691, 194, 692, 693, 0, 195, 358,
	359, 196, 197, 643, 674, 694, 695, 362, 0, 198,
	686, 0, 666, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 720, 209,
	210, 211, 0, 667, 668, 670, 0, 669, 671, 212,
	213, 417, 214, 696, 1579, 697, 698, 628, 216, 0,
	217, 0, 218, 0, 0, 689, 220, 0, 221, 0,
	0, 0, 631, 222, 224, 223, 225, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 226, 227, 699, 700,
	701, 0, 228, 0, 229, 0, 0, 722, 0, 230,
	687, 0, 374, 0, 0, 231, 1580, 233, 234, 683,
	685, 724, 0, 377, 238, 0, 235, 0, 723, 236,
	702, 237, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 239, 240, 241, 726, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 688, 727, 247, 248, 728, 0,
	249, 250, 0, 0, 251, 0, 252, 729, 1581, 1578,
	256, 388, 255, 730, 257, 258, 260, 259, 625, 0,
	655, 684, 261, 708, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 731, 267, 732, 678, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 1582, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 1577, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1573, 636, 1576, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 191, 192, 193, 352,
	690, 354, 691, 194, 692, 693, 0, 195, 358, 359,
	196, 197, 643, 674, 694, 695, 362, 0, 198, 686,
	0, 666, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 720, 209, 210,
	211, 0, 667, 668, 670, 0, 669, 671, 212, 213,
	417, 214, 696, 1579, 697, 698, 628, 216, 0, 217,
	0, 218, 0, 0, 689, 220, 0, 221, 0, 0,
	0, 631, 222, 224, 223, 225, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 226, 227, 699, 700, 701,
	0, 228, 0, 229, 0, 0, 722, 0, 230, 687,
	0, 374, 0, 0, 231, 1580, 233, 234, 683, 685,
	724, 0, 377, 238, 0, 235, 0, 723, 236, 702,
	237, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	239, 240, 241, 726, 385, 386, 242, 243, 244, 0,
	246, 245, 0, 688, 727, 247, 248, 728, 0, 249,
	250, 0, 0, 251, 0, 252, 729, 1581, 1578, 256,
	388, 255, 730, 257, 258, 260, 259, 625, 0, 655,
	684, 261, 708, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 391, 731, 267, 732, 678, 268, 269,
	270, 271, 272, 0, 273, 679, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 709, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 733, 296, 297, 632, 298, 0,
	302, 303, 304, 305, 1582, 0, 308, 397, 307, 309,
	310, 672, 311, 299, 300, 312, 734, 313, 710, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 711,
	318, 319, 680, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 712, 713, 0, 0,
	331, 332, 681, 682, 653, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 673, 341, 0, 407, 342,
	343, 344, 408, 714, 0, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 1577, 350, 626, 658, 647, 648,
	645, 646, 637, 0, 624, 0, 0, 0, 0, 622,
	623, 0, 0, 188, 189, 0, 0, 190, 633, 0,
	0, 0, 675, 640, 636, 0, 0, 191, 192, 193,
	352, 690, 354, 691, 194, 692, 693, 0, 195, 358,
	359, 196, 197, 643, 674, 694, 695, 362, 0, 198,
	686, 0, 666, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 720, 209,
	210, 211, 0, 667, 668, 670, 0, 669, 671, 212,
	213, 417, 214, 696, 215, 697, 698, 628, 216, 0,
	217, 0, 218, 0, 0, 689, 220, 0, 221, 0,
	0, 0, 631, 222, 224, 223, 225, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 226, 227, 699, 700,
	701, 0, 228, 0, 229, 0, 0, 722, 0, 230,
	687, 0, 374, 0, 0, 231, 232, 233, 234, 683,
	685, 724, 0, 377, 238, 0, 235, 0, 723, 236,
	702, 237, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 239, 240, 241, 726, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 688, 727, 247, 248, 728, 0,
	249, 250, 0, 0, 251, 0, 252, 729, 253, 254,
	256, 388, 255, 730, 257, 258, 260, 259, 625, 0,
	655, 684, 261, 708, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 731, 267, 732, 678, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 188, 189, 1439, 1143, 190, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 191, 192,
	193, 352, 690, 354, 691, 194, 692, 693, 0, 195,
	358, 359, 196, 197, 643, 674, 694, 695, 362, 0,
	198, 686, 0, 666, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 720,
	209, 210, 211, 0, 667, 668, 670, 0, 669, 671,
	212, 213, 417, 214, 696, 215, 697, 698, 628, 216,
	0, 217, 0, 218, 0, 0, 689, 220, 0, 221,
	0, 0, 0, 631, 222, 224, 223, 225, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 226, 227, 699,
	700, 701, 0, 228, 0, 229, 0, 0, 722, 0,
	230, 687, 0, 374, 0, 0, 231, 232, 233, 234,
	683, 685, 724, 0, 377, 238, 0, 235, 0, 723,
	236, 702, 237, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 239, 240, 241, 726, 385, 386, 242, 243,
	244, 0, 246, 245, 0, 688, 727, 247, 248, 728,
	0, 249, 250, 0, 0, 251, 0, 252, 729, 253,
	254, 256, 388, 255, 730, 257, 258, 260, 259, 625,
	0, 655, 684, 261, 708, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 731, 267, 732, 678,
	268, 269, 270, 271, 272, 0, 273, 679, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 709, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 733, 296, 297, 632,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 672, 311, 299, 300, 312, 734, 313,
	710, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 711, 318, 319, 680, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 712, 713,
	0, 0, 331, 332, 681, 682, 653, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 673, 341, 0,
	407, 342, 343, 344, 408, 714, 0, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 626, 0,
	0, 0, 0, 0, 0, 0, 624, 0, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 0, 0, 0, 899, 636, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 675, 640, 0, 0, 0, 191, 192, 193,
	352, 690, 354, 691, 194, 692, 693, 0, 195, 358,
	359, 196, 197, 643, 674, 694, 695, 362, 0, 198,
	686, 0, 666, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 720, 209,
	210, 211, 0, 667, 668, 670, 0, 669, 671, 212,
	213, 417, 214, 696, 215, 697, 698, 628, 216, 0,
	217, 0, 218, 0, 0, 689, 220, 0, 221, 0,
	0, 0, 631, 222, 224, 223, 225, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 226, 227, 699, 700,
	701, 0, 228, 0, 229, 0, 0, 722, 0, 230,
	687, 0, 374, 0, 0, 231, 232, 233, 234, 683,
	685, 724, 0, 377, 238, 0, 235, 0, 723, 236,
	702, 237, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 239, 240, 241, 726, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 688, 727, 247, 248, 728, 0,
	249, 250, 0, 0, 251, 0, 252, 729, 253, 254,
	256, 388, 255, 730, 257, 258, 260, 259, 625, 0,
	655, 684, 261, 708, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 731, 267, 732, 678, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 897, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 191, 192, 193, 352,
	690, 354, 691, 194, 692, 693, 0, 195, 358, 359,
	196, 197, 643, 674, 694, 695, 362, 0, 198, 686,
	0, 666, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 720, 209, 210,
	211, 0, 667, 668, 670, 0, 669, 671, 212, 213,
	417, 214, 696, 215, 697, 698, 628, 216, 0, 217,
	0, 218, 0, 0, 689, 220, 0, 221, 0, 0,
	0, 631, 222, 224, 223, 225, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 226, 227, 699, 700, 701,
	0, 228, 0, 229, 0, 0, 722, 0, 230, 687,
	0, 374, 0, 0, 231, 232, 233, 234, 683, 685,
	724, 0, 377, 238, 0, 235, 0, 723, 236, 702,
	237, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	239, 240, 241, 726, 385, 386, 242, 243, 244, 0,
	246, 245, 0, 688, 727, 247, 248, 728, 0, 249,
	250, 0, 0, 251, 0, 252, 729, 253, 254, 256,
	388, 255, 730, 257, 258, 260, 259, 625, 0, 655,
	684, 261, 708, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 391, 731, 267, 732, 678, 268, 269,
	270, 271, 272, 0, 273, 679, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 709, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 733, 296, 297, 632, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 672, 311, 299, 300, 312, 734, 313, 710, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 711,
	318, 319, 680, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 712, 713, 0, 0,
	331, 332, 681, 682, 653, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 673, 341, 0, 407, 342,
	343, 344, 408, 714, 0, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 626, 658, 647, 648,
	645, 646, 637, 0, 624, 0, 0, 0, 0, 622,
	623, 0, 0, 188, 189, 0, 0, 190, 633, 0,
	0, 0, 675, 640, 636, 0, 0, 191, 192, 193,
	352, 690, 354, 691, 194, 692, 693, 0, 195, 358,
	359, 196, 197, 643, 674, 694, 695, 362, 0, 198,
	686, 0, 666, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 720, 209,
	210, 211, 0, 667, 668, 670, 0, 669, 671, 212,
	213, 417, 214, 696, 215, 697, 698, 628, 216, 0,
	217, 0, 218, 0, 0, 689, 220, 0, 221, 0,
	0, 0, 631, 222, 224, 223, 225, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 226, 227, 699, 700,
	701, 0, 228, 0, 229, 0, 0, 722, 0, 230,
	687, 0, 374, 0, 0, 231, 232, 233, 234, 683,
	685, 724, 0, 377, 238, 0, 235, 0, 723, 236,
	702, 237, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 239, 240, 241, 726, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 688, 727, 247, 248, 728, 0,
	249, 250, 0, 0, 251, 0, 252, 2659, 253, 254,
	256, 388, 255, 730, 257, 258, 260, 259, 625, 0,
	655, 684, 261, 708, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 731, 267, 732, 678, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 188, 189, 0, 0, 190, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 191, 192,
	193, 352, 690, 354, 691, 194, 692, 693, 0, 195,
	358, 359, 196, 197, 643, 674, 694, 695, 362, 0,
	198, 686, 0, 666, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 720,
	209, 210, 2578, 0, 667, 668, 670, 0, 669, 671,
	212, 213, 417, 214, 696, 215, 697, 698, 628, 216,
	0, 217, 0, 218, 0, 0, 689, 220, 0, 221,
	0, 0, 0, 631, 222, 224, 223, 225, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 226, 227, 699,
	700, 701, 0, 228, 0, 229, 0, 0, 722, 0,
	230, 687, 0, 374, 0, 0, 231, 232, 233, 234,
	683, 685, 724, 0, 377, 238, 0, 235, 0, 723,
	236, 702, 237, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 239, 240, 241, 726, 385, 386, 242, 243,
	244, 0, 246, 245, 0, 688, 727, 247, 248, 728,
	0, 249, 250, 0, 0, 251, 0, 252, 729, 253,
	254, 256, 388, 255, 730, 257, 258, 260, 259, 625,
	0, 655, 684, 261, 708, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 731, 267, 732, 678,
	268, 269, 270, 271, 272, 0, 273, 679, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 709, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 733, 296, 297, 632,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 672, 311, 299, 300, 312, 734, 313,
	710, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 711, 318, 319, 680, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 712, 713,
	0, 0, 331, 332, 681, 682, 653, 333, 334, 2577,
	336, 0, 0, 337, 338, 339, 340, 673, 341, 0,
	407, 342, 343, 344, 408, 714, 0, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 626, 658,
	647, 648, 645, 646, 637, 0, 624, 0, 0, 0,
	0, 622, 623, 0, 0, 188, 189, 0, 0, 190,
	633, 0, 0, 0, 675, 640, 636, 0, 0, 191,
	192, 193, 352, 690, 354, 691, 194, 692, 693, 0,
	195, 358, 359, 196, 197, 643, 674, 694, 695, 362,
	0, 198, 686, 0, 666, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	720, 209, 210, 211, 0, 667, 668, 670, 0, 669,
	671, 212, 213, 417, 214, 696, 215, 697, 698, 628,
	216, 0, 217, 0, 218, 0, 0, 689, 220, 0,
	221, 0, 0, 0, 631, 222, 224, 223, 225, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 226, 227,
	699, 700, 701, 0, 228, 0, 229, 0, 0, 722,
	0, 230, 687, 0, 374, 0, 0, 231, 232, 233,
	234, 683, 685, 724, 0, 377, 238, 0, 235, 0,
	723, 236, 702, 237, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 688, 727, 247, 248,
	728, 0, 249, 250, 0, 0, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	625, 0, 655, 684, 261, 708, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 731, 267, 732,
	678, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 188, 189, 0, 0,
	190, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	191, 192, 193, 2576, 690, 354, 691, 194, 692, 693,
	0, 195, 358, 359, 196, 197, 643, 674, 694, 695,
	362, 0, 198, 686, 0, 666, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 720, 209, 210, 2578, 0, 667, 668, 670, 0,
	669, 671, 212, 213, 417, 214, 696, 215, 697, 698,
	628, 216, 0, 217, 0, 218, 0, 0, 689, 220,
	0, 221, 0, 0, 0, 631, 222, 224, 223, 225,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 226,
	227, 699, 700, 701, 0, 228, 0, 229, 0, 0,
	722, 0, 230, 687, 0, 374, 0, 0, 231, 232,
	233, 234, 683, 685, 724, 0, 377, 238, 0, 235,
	0, 723, 236, 702, 237, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 239, 240, 241, 726, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 688, 727, 247,
	248, 728, 0, 249, 250, 0, 0, 251, 0, 252,
	729, 253, 254, 256, 388, 255, 730, 257, 258, 260,
	259, 625, 0, 655, 684, 261, 708, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 391, 731, 267,
	732, 678, 268, 269, 270, 271, 272, 0, 273, 679,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 709,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 733, 296,
	297, 632, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 672, 311, 299, 300, 312,
	734, 313, 710, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 711, 318, 319, 680, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	712, 713, 0, 0, 331, 332, 681, 682, 653, 333,
	334, 2577, 336, 0, 0, 337, 338, 339, 340, 673,
	341, 0, 407, 342, 343, 344, 408, 714, 0, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	626, 658, 647, 648, 645, 646, 637, 0, 624, 0,
	0, 0, 0, 622, 623, 0, 0, 188, 189, 0,
	0, 190, 633, 0, 0, 0, 675, 640, 636, 0,
	0, 191, 192, 193, 352, 690, 354, 691, 194, 692,
	693, 0, 195, 358, 359, 196, 197, 643, 674, 694,
	695, 362, 0, 198, 686, 0, 666, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 720, 209, 210, 211, 0, 667, 668, 670,
	0, 669, 671, 212, 213, 417, 214, 696, 215, 697,
	698, 0, 216, 0, 217, 0, 218, 0, 0, 689,
	220, 0, 221, 0, 0, 0, 631, 222, 224, 223,
	225, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	226, 227, 699, 700, 701, 0, 228, 0, 229, 0,
	0, 722, 0, 230, 687, 0, 374, 0, 0, 231,
	232, 233, 234, 683, 685, 724, 0, 377, 238, 0,
	235, 0, 723, 236, 702, 237, 703, 704, 705, 706,
	707, 0, 665, 0, 725, 239, 240, 241, 726, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 688, 727,
	247, 248, 728, 0, 249, 250, 0, 0, 251, 0,
	252, 729, 253, 254, 256, 388, 255, 730, 257, 258,
	260, 259, 0, 0, 655, 684, 261, 708, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 731,
	267, 732, 678, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 1596, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 658, 647, 648, 645, 646, 637, 0, 0, 1594,
	0, 0, 0, 0, 1592, 1593, 0, 188, 189, 0,
	0, 190, 0, 1595, 0, 0, 675, 640, 0, 636,
	0, 191, 192, 193, 0, 690, 354, 691, 194, 692,
	693, 0, 195, 358, 359, 196, 197, 643, 674, 694,
	695, 362, 0, 198, 686, 0, 666, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 720, 209, 210, 2578, 0, 667, 668, 670,
	0, 669, 671, 212, 213, 417, 214, 696, 215, 697,
	698, 628, 216, 0, 217, 0, 218, 0, 0, 689,
	220, 0, 221, 0, 0, 0, 631, 222, 224, 223,
	225, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	226, 227, 699, 700, 701, 0, 228, 0, 229, 0,
	0, 722, 0, 230, 687, 0, 374, 0, 0, 231,
	232, 233, 234, 683, 685, 0, 0, 377, 238, 0,
	235, 0, 723, 236, 702, 237, 703, 704, 705, 706,
	707, 0, 665, 0, 0, 239, 240, 241, 726, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 688, 727,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 729, 253, 254, 256, 388, 255, 730, 257, 258,
	260, 259, 625, 0, 655, 684, 261, 708, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 731,
	267, 732, 678, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 0, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 2577, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 658, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 623, 0, 188, 189, 0,
	0, 190, 0, 633, 0, 0, 675, 0, 0, 636,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 674, 360,
	361, 362, 0, 198, 686, 0, 666, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 720, 209, 210, 211, 0, 667, 668, 670,
	0, 669, 671, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 676, 677, 0, 721, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 722, 0, 230, 687, 0, 374, 0, 0, 231,
	232, 233, 234, 683, 685, 724, 0, 377, 238, 0,
	235, 0, 723, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 725, 239, 240, 241, 726, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 688, 727,
	247, 248, 728, 0, 249, 250, 0, 0, 251, 0,
	252, 729, 253, 254, 256, 388, 255, 730, 257, 258,
	260, 259, 0, 0, 0, 684, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 731,
	267, 732, 678, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 681, 682, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	0, 345, 950, 0, 790, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 351,
	0, 0, 0, 2193, 191, 192, 193, 352, 353, 354,
	355, 194, 356, 357, 0, 195, 358, 359, 196, 197,
	0, 0, 360, 361, 362, 0, 198, 363, 0, 794,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 720, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 417, 214,
	364, 215, 365, 366, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 367,
	222, 224, 223, 225, 368, 369, 0, 721, 0, 0,
	0, 0, 0, 226, 227, 370, 371, 372, 0, 228,
	0, 229, 0, 0, 722, 0, 230, 373, 0, 374,
	0, 0, 231, 232, 233, 234, 375, 376, 724, 0,
	377, 238, 0, 235, 0, 723, 236, 378, 237, 379,
	380, 381, 382, 383, 0, 384, 0, 725, 239, 240,
	241, 726, 385, 386, 242, 243, 244, 0, 246, 245,
	0, 387, 727, 247, 248, 728, 0, 249, 250, 0,
	0, 251, 0, 252, 729, 253, 254, 256, 388, 255,
	730, 257, 258, 260, 259, 0, 0, 0, 389, 261,
	390, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 391, 731, 267, 732, 392, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 733, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 146, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 734, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 148, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	953, 409, 0, 0, 345, 610, 0, 185, 140, 346,
	347, 348, 349, 350, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 117, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 375,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 773,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 146, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 148, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 953, 409, 0, 0, 345, 0, 0,
	185, 140, 346, 347, 348, 349, 350, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 351, 0, 767, 0, 1222,
	191, 192, 193, 352, 353, 354, 355, 194, 356, 357,
	0, 195, 358, 359, 196, 197, 0, 0, 360, 361,
	362, 0, 198, 363, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 417, 214, 364, 215, 365, 366,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 367, 222, 224, 223, 225,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 370, 371, 372, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 373, 0, 374, 0, 0, 231, 232,
	233, 234, 375, 376, 0, 0, 377, 238, 0, 235,
	0, 0, 236, 378, 237, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 239, 240, 241, 0, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 387, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 388, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 389, 261, 390, 262, 263, 0,
	264, 0, 773, 265, 0, 0, 266, 391, 0, 267,
	0, 392, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 146,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 148,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 953, 409, 0, 0,
	345, 610, 0, 185, 140, 346, 347, 348, 349, 350,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	767, 0, 1222, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 146, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 148, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 953,
	409, 0, 0, 345, 1933, 0, 185, 140, 346, 347,
	348, 349, 350, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 351, 0, 0, 0, 117, 191, 192, 193, 352,
	353, 354, 355, 194, 356, 357, 0, 195, 358, 359,
	196, 197, 0, 0, 360, 361, 362, 0, 198, 363,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	417, 214, 364, 215, 365, 366, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 367, 222, 224, 223, 225, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 370, 371, 372,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 373,
	0, 374, 0, 0, 231, 232, 233, 234, 375, 376,
	0, 0, 377, 238, 0, 235, 0, 0, 236, 378,
	237, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	239, 240, 241, 0, 385, 386, 242, 243, 244, 0,
	246, 245, 0, 387, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	388, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	389, 261, 390, 262, 263, 0, 264, 0, 773, 265,
	0, 0, 266, 391, 0, 267, 0, 392, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 0, 345, 766, 0, 185,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 767, 0, 772, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 773, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 0, 345,
	0, 0, 185, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 351, 0, 767,
	0, 772, 191, 192, 193, 352, 353, 354, 355, 194,
	356, 357, 0, 195, 358, 359, 196, 197, 0, 0,
	360, 361, 362, 0, 198, 363, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 417, 214, 364, 215,
	365, 366, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 367, 222, 224,
	223, 225, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 370, 371, 372, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 373, 0, 374, 0, 0,
	231, 232, 233, 234, 375, 376, 0, 0, 377, 238,
	0, 235, 0, 0, 236, 378, 237, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 239, 240, 241, 0,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 387,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 388, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 389, 261, 390, 262,
	263, 0, 264, 0, 773, 265, 0, 0, 266, 391,
	0, 267, 0, 392, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 0, 345, 0, 0, 185, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	351, 0, 767, 0, 772, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 0, 345, 0, 0, 0, 185,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 1260, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 0, 345,
	0, 0, 185, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 351, 0, 0,
	0, 1743, 191, 192, 193, 352, 353, 354, 355, 194,
	356, 357, 0, 195, 358, 359, 196, 197, 0, 0,
	360, 361, 362, 0, 198, 363, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 417, 214, 364, 215,
	365, 366, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 367, 222, 224,
	223, 225, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 370, 371, 372, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 373, 0, 374, 0, 0,
	231, 232, 233, 234, 375, 376, 0, 0, 377, 238,
	0, 235, 0, 0, 236, 378, 237, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 239, 240, 241, 0,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 387,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 388, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 389, 261, 390, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 391,
	0, 267, 0, 392, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 0, 345, 0, 0, 185, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	351, 0, 0, 0, 2109, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 658, 647, 648, 645, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 1225, 0, 0,
	351, 0, 0, 0, 0, 191, 192, 193, 352, 690,
	354, 691, 194, 692, 693, 0, 195, 358, 359, 196,
	197, 0, 0, 694, 695, 362, 0, 198, 363, 0,
	794, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 720, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 696, 215, 697, 698, 0, 216, 0, 217, 0,
	218, 0, 0, 689, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 654, 721, 0,
	0, 0, 0, 0, 226, 227, 699, 700, 701, 0,
	228, 0, 229, 0, 0, 722, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 724,
	0, 377, 238, 0, 235, 0, 723, 236, 702, 237,
	703, 704, 705, 706, 707, 0, 665, 0, 725, 239,
	240, 241, 726, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 727, 247, 248, 728, 0, 249, 250,
	0, 0, 251, 0, 252, 729, 253, 254, 256, 388,
	255, 730, 257, 258, 260, 259, 0, 0, 655, 389,
	261, 708, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 731, 267, 732, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 405, 406, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 1006, 0, 790, 789, 0,
	0, 0, 787, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 794, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 720, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	721, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 722, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 375,
	376, 724, 0, 377, 238, 0, 235, 0, 723, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	725, 239, 240, 241, 726, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 727, 247, 248, 728, 0,
	249, 250, 0, 0, 251, 0, 252, 729, 253, 254,
	256, 388, 255, 730, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 731, 267, 732, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 734, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 945, 0, 790,
	789, 0, 0, 0, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 794, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	720, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 721, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 722,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 944, 376, 724, 0, 377, 238, 0, 235, 0,
	723, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 727, 247, 248,
	728, 0, 249, 250, 0, 0, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 731, 267, 732,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 734,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 911,
	0, 790, 789, 0, 0, 0, 787, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 198, 363, 0, 794, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 720, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 721, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 722, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 910, 376, 724, 0, 377, 238, 0,
	235, 0, 723, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 725, 239, 240, 241, 726, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 727,
	247, 248, 728, 0, 249, 250, 0, 0, 251, 0,
	252, 729, 253, 254, 256, 388, 255, 730, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 731,
	267, 732, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 734, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 783, 0, 790, 789, 0, 0, 0, 787, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 794, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 720, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 721, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 722, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 785, 376, 724, 0, 377,
	238, 0, 235, 0, 723, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 725, 239, 240, 241,
	726, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 727, 247, 248, 728, 0, 249, 250, 0, 0,
	251, 0, 252, 729, 253, 254, 256, 388, 255, 730,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 731, 267, 732, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 734, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 500, 345, 185, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 191, 192, 193, 352, 353, 354,
	355, 194, 356, 357, 0, 195, 358, 359, 196, 197,
	0, 0, 360, 361, 362, 0, 198, 363, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 181, 214,
	364, 215, 365, 366, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 367,
	222, 224, 223, 225, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 370, 371, 372, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 373, 0, 374,
	0, 0, 231, 232, 233, 234, 375, 376, 0, 0,
	377, 238, 0, 235, 0, 0, 236, 378, 237, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 239, 240,
	241, 0, 385, 386, 242, 243, 244, 0, 246, 245,
	0, 387, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 388, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 389, 261,
	390, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 391, 0, 267, 0, 392, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 180, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 178, 345, 185, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 184,
	351, 0, 0, 0, 0, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 181,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 180, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 790, 789, 345, 0, 0, 787, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	184, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 794, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 720, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 721, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 722, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 724, 0, 377,
	238, 0, 235, 0, 723, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 725, 239, 240, 241,
	726, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 727, 247, 248, 728, 0, 249, 250, 0, 0,
	251, 0, 252, 729, 253, 254, 256, 388, 255, 730,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 731, 267, 732, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 734, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 185, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 198, 363, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 181, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 375, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	180, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 790,
	789, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 184, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 794, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	720, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 721, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 722,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 724, 0, 377, 238, 0, 235, 0,
	723, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 725, 239, 240, 241, 726, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 727, 247, 248,
	728, 0, 249, 250, 0, 0, 251, 0, 252, 729,
	253, 254, 256, 388, 255, 730, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 731, 267, 732,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 734,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 185, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 375,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 790, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	351, 0, 184, 0, 0, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	794, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 720, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 721, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 722, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 724,
	0, 377, 238, 0, 235, 0, 723, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 725, 239,
	240, 241, 726, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 727, 247, 248, 728, 0, 249, 250,
	0, 0, 251, 0, 252, 729, 253, 254, 256, 388,
	255, 730, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 731, 267, 732, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 734, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 185, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 1673, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 1671, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 1719, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 1676, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 0, 0, 377,
	238, 1717, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 1675, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 1718, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 185, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 1673, 198, 363, 0, 0, 1668, 199, 200,
	201, 0, 203, 204, 205, 202, 1671, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 1676,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 1667, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 1675, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 1674, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	927, 345, 185, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 191, 192, 193, 352, 353, 354, 355, 194,
	356, 357, 0, 195, 358, 359, 196, 197, 0, 0,
	360, 361, 362, 0, 198, 363, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 417, 214, 364, 215,
	365, 366, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 367, 222, 224,
	223, 225, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 370, 371, 372, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 373, 0, 374, 0, 0,
	231, 232, 233, 234, 375, 376, 0, 0, 377, 238,
	0, 235, 0, 0, 236, 378, 237, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 239, 240, 241, 0,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 387,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 388, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 389, 261, 390, 262,
	263, 0, 264, 0, 773, 265, 0, 0, 266, 391,
	0, 267, 0, 392, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 779, 345, 185, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 781, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 773, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 775, 345, 185, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 191, 192, 193, 352, 353, 354,
	355, 194, 356, 357, 0, 195, 358, 359, 196, 197,
	0, 0, 360, 361, 362, 0, 198, 363, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 417, 214,
	364, 215, 365, 366, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 367,
	222, 224, 223, 225, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 370, 371, 372, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 373, 0, 374,
	0, 0, 231, 232, 233, 234, 777, 376, 0, 0,
	377, 238, 0, 235, 0, 0, 236, 378, 237, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 239, 240,
	241, 0, 385, 386, 242, 243, 244, 0, 246, 245,
	0, 387, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 388, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 389, 261,
	390, 262, 263, 0, 264, 0, 773, 265, 0, 0,
	266, 391, 0, 267, 0, 392, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 429, 345, 185, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 428, 0, 190, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 427, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 185, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	1656, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 185, 2262, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 198, 363, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 375, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 185,
	2262, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 2259, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 185, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 375,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 773,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 1418, 345, 185, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 191, 192,
	193, 352, 353, 354, 355, 194, 356, 357, 0, 195,
	358, 359, 196, 197, 0, 0, 360, 361, 362, 0,
	198, 363, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 417, 214, 364, 215, 365, 366, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 367, 222, 224, 223, 225, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 370,
	371, 372, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 373, 0, 374, 0, 0, 231, 232, 233, 234,
	375, 376, 0, 0, 377, 238, 0, 235, 0, 0,
	236, 378, 237, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 239, 240, 241, 0, 385, 386, 242, 243,
	244, 0, 246, 245, 0, 387, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 388, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 389, 261, 390, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 0, 267, 0, 392,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 1416, 345, 185,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 185, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 188, 189, 1398, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 375,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 526, 345, 185, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 191, 192,
	193, 352, 353, 354, 355, 194, 356, 357, 0, 195,
	358, 359, 196, 197, 0, 0, 360, 361, 985, 0,
	198, 363, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 417, 214, 364, 215, 365, 366, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 367, 222, 224, 223, 225, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 370,
	371, 372, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 373, 0, 374, 0, 0, 231, 232, 233, 234,
	375, 376, 0, 0, 377, 238, 0, 235, 0, 0,
	236, 378, 237, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 239, 240, 241, 0, 385, 386, 242, 243,
	244, 0, 246, 245, 0, 387, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 388, 528, 0, 257, 258, 260, 259, 0,
	0, 0, 389, 261, 390, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 0, 267, 0, 392,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 523, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 1275, 345, 185,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 1274, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 526, 345,
	185, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	191, 192, 193, 352, 353, 354, 355, 194, 356, 357,
	0, 195, 358, 359, 196, 197, 0, 0, 360, 361,
	985, 0, 198, 363, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 417, 214, 364, 215, 365, 366,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 367, 222, 224, 223, 225,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 370, 371, 372, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 373, 0, 374, 0, 0, 231, 232,
	233, 234, 375, 376, 0, 0, 377, 238, 0, 235,
	0, 0, 236, 378, 237, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 239, 240, 241, 0, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 387, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 388, 528, 0, 257, 258, 260,
	259, 0, 0, 0, 389, 261, 390, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 391, 0, 267,
	0, 392, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 523,
	403, 404, 0, 0, 331, 986, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 526,
	345, 185, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 517, 363, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 375, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 528, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 969, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	523, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	942, 345, 185, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 191, 192, 193, 352, 353, 354, 355, 194,
	356, 357, 0, 195, 358, 359, 196, 197, 0, 0,
	360, 361, 362, 0, 198, 363, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 417, 214, 364, 215,
	365, 366, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 367, 222, 224,
	223, 225, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 370, 371, 372, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 373, 0, 374, 0, 0,
	231, 232, 233, 234, 941, 376, 0, 0, 377, 238,
	0, 235, 0, 0, 236, 378, 237, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 239, 240, 241, 0,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 387,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 388, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 389, 261, 390, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 391,
	0, 267, 0, 392, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 938, 345, 185, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 937, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 935, 345, 185, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 191, 192, 193, 352, 353, 354,
	355, 194, 356, 357, 0, 195, 358, 359, 196, 197,
	0, 0, 360, 361, 362, 0, 198, 363, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 417, 214,
	364, 215, 365, 366, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 367,
	222, 224, 223, 225, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 370, 371, 372, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 373, 0, 374,
	0, 0, 231, 232, 233, 234, 934, 376, 0, 0,
	377, 238, 0, 235, 0, 0, 236, 378, 237, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 239, 240,
	241, 0, 385, 386, 242, 243, 244, 0, 246, 245,
	0, 387, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 388, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 389, 261,
	390, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 391, 0, 267, 0, 392, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 931, 345, 185, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 930, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 185, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 188,
	189, 919, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 917, 345, 185, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 191, 192, 193, 352, 353, 354,
	355, 194, 356, 357, 0, 195, 358, 359, 196, 197,
	0, 0, 360, 361, 362, 0, 198, 363, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 417, 214,
	364, 215, 365, 366, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 367,
	222, 224, 223, 225, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 370, 371, 372, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 373, 0, 374,
	0, 0, 231, 232, 233, 234, 916, 376, 0, 0,
	377, 238, 0, 235, 0, 0, 236, 378, 237, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 239, 240,
	241, 0, 385, 386, 242, 243, 244, 0, 246, 245,
	0, 387, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 388, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 389, 261,
	390, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 391, 0, 267, 0, 392, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 913, 345, 185, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 375, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 906, 345, 185, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 191, 192, 193, 352,
	353, 354, 355, 194, 356, 357, 0, 195, 358, 359,
	196, 197, 0, 0, 360, 361, 362, 0, 198, 363,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	417, 214, 364, 215, 365, 366, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 367, 222, 224, 223, 225, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 370, 371, 372,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 373,
	0, 374, 0, 0, 231, 232, 233, 234, 908, 376,
	0, 0, 377, 238, 0, 235, 0, 0, 236, 378,
	237, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	239, 240, 241, 0, 385, 386, 242, 243, 244, 0,
	246, 245, 0, 387, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	388, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	389, 261, 390, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 391, 0, 267, 0, 392, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 797, 345, 185, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 799,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 795, 345, 185, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 191, 192,
	193, 352, 353, 354, 355, 194, 356, 357, 0, 195,
	358, 359, 196, 197, 0, 0, 360, 361, 362, 0,
	198, 363, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 417, 214, 364, 215, 365, 366, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 367, 222, 224, 223, 225, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 370,
	371, 372, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 373, 0, 374, 0, 0, 231, 232, 233, 234,
	375, 376, 0, 0, 377, 238, 0, 235, 0, 0,
	236, 378, 237, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 239, 240, 241, 0, 385, 386, 242, 243,
	244, 0, 246, 245, 0, 387, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 388, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 389, 261, 390, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 391, 0, 267, 0, 392,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 526, 345, 185,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 517, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 516, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 528, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	518, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 519, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 523, 403,
	404, 0, 0, 331, 521, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 508, 345,
	185, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	191, 192, 193, 352, 353, 354, 355, 194, 356, 357,
	0, 195, 358, 359, 196, 197, 0, 0, 360, 361,
	362, 0, 198, 363, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 417, 214, 364, 215, 365, 366,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 367, 222, 224, 223, 225,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 370, 371, 372, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 373, 0, 374, 0, 0, 231, 232,
	233, 234, 375, 376, 0, 0, 377, 238, 0, 235,
	0, 0, 236, 378, 237, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 239, 240, 241, 0, 385, 386,
	242, 243, 244, 0, 246, 245, 0, 387, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 388, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 389, 261, 390, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 391, 0, 267,
	0, 392, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 509, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 506,
	345, 185, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 198, 363, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 375, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	498, 345, 185, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 191, 192, 193, 352, 353, 354, 355, 194,
	356, 357, 0, 195, 358, 359, 196, 197, 0, 0,
	360, 361, 362, 0, 198, 363, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 417, 214, 364, 215,
	365, 366, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 367, 222, 224,
	223, 225, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 370, 371, 372, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 373, 0, 374, 0, 0,
	231, 232, 233, 234, 375, 376, 0, 0, 377, 238,
	0, 235, 0, 0, 236, 378, 237, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 239, 240, 241, 0,
	385, 386, 242, 243, 244, 0, 246, 245, 0, 387,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 388, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 389, 261, 390, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 391,
	0, 267, 0, 392, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 448, 345, 185, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 185, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 198, 363, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 375, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 185,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 1980, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 185, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 1978,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 185, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 191, 192, 193, 352, 353,
	354, 355, 194, 356, 357, 0, 195, 358, 359, 196,
	197, 0, 0, 360, 361, 362, 0, 198, 363, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 417,
	214, 364, 215, 365, 366, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	367, 222, 224, 223, 225, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 370, 371, 372, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 373, 0,
	374, 0, 0, 231, 232, 233, 234, 1967, 376, 0,
	0, 377, 238, 0, 235, 0, 0, 236, 378, 237,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 239,
	240, 241, 0, 385, 386, 242, 243, 244, 0, 246,
	245, 0, 387, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 388,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 389,
	261, 390, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 391, 0, 267, 0, 392, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 185, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 191, 192, 193, 352, 353, 354, 355,
	194, 356, 357, 0, 195, 358, 359, 196, 197, 0,
	0, 360, 361, 362, 0, 198, 363, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 417, 214, 364,
	215, 365, 366, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 367, 222,
	224, 223, 225, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 370, 371, 372, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 373, 0, 374, 0,
	0, 231, 232, 233, 234, 375, 376, 0, 0, 377,
	238, 0, 235, 0, 0, 236, 378, 237, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 239, 240, 241,
	0, 385, 386, 242, 243, 244, 0, 246, 245, 0,
	387, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 388, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 389, 261, 390,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	391, 0, 267, 0, 392, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 509, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 185, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 351, 0, 1285, 0,
	0, 191, 192, 193, 352, 353, 354, 355, 194, 356,
	357, 0, 195, 358, 359, 196, 197, 0, 0, 360,
	361, 362, 0, 198, 363, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 417, 214, 364, 215, 365,
	366, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 367, 222, 224, 223,
	225, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 370, 371, 372, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 373, 0, 374, 0, 0, 231,
	232, 233, 234, 375, 376, 0, 0, 377, 238, 0,
	235, 0, 0, 236, 378, 237, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 239, 240, 241, 0, 385,
	386, 242, 243, 244, 0, 246, 245, 0, 387, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 388, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 389, 261, 390, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 391, 0,
	267, 0, 392, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 0, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 185,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 191,
	192, 193, 352, 353, 354, 355, 194, 356, 357, 0,
	195, 358, 359, 196, 197, 0, 0, 360, 361, 362,
	0, 198, 363, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 417, 214, 364, 215, 365, 366, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 367, 222, 224, 223, 225, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	370, 371, 372, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 373, 0, 374, 0, 0, 231, 232, 233,
	234, 375, 376, 0, 0, 377, 238, 0, 235, 0,
	0, 236, 378, 237, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 239, 240, 241, 0, 385, 386, 242,
	243, 244, 0, 246, 245, 0, 387, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 388, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 389, 261, 390, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 391, 0, 267, 0,
	392, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 750,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 185, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 191, 192, 193,
	352, 353, 354, 355, 194, 356, 357, 0, 195, 358,
	359, 196, 197, 0, 0, 360, 361, 362, 0, 198,
	363, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 417, 214, 364, 215, 365, 366, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 367, 222, 224, 223, 225, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 370, 371,
	372, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	373, 0, 374, 0, 0, 231, 232, 233, 234, 375,
	376, 0, 0, 377, 238, 0, 235, 0, 0, 236,
	378, 237, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 239, 240, 241, 0, 385, 386, 242, 243, 244,
	0, 246, 245, 0, 387, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 388, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 389, 261, 390, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 391, 0, 267, 0, 392, 268,
	269, 0, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 0, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 0,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 1076, 1077, 0,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 1120, 0, 0, 0, 0, 1874,
	1875, 0, 1892, 1893, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 2275, 0, 0, 1076,
	1077, 1098, 1106, 1107, 1108, 1116, 1117, 1118, 1095, 0,
	0, 0, 1094, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 1889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 1098, 0, 0, 1101, 1102, 1103, 1104,
	1095, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1880, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1895, 1113, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 1119, 0, 0, 0,
	0, 1890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 1891, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 1114, 0, 0, 1094, 0, 0, 1093,
	1109, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	1120, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 1078, 0, 0, 0, 0, 0, 1098, 1914, 0,
	0, 0, 0, 0, 1095, 0, 1886, 1887, 1888, 0,
	0, 0, 0, 1885, 1883, 1884, 1876, 1877, 1878, 1879,
	1881, 1882, 0, 1112, 0, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	1866, 0, 1101, 1102, 1103, 1104, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 1113, 1121, 0, 0, 1094, 0, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 1120,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1111, 0,
	1078, 0, 0, 0, 0, 1099, 1098, 0, 0, 0,
	0, 0, 0, 1095, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 1101, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 1874, 1875, 1093, 1892, 1893, 1894, 0, 0, 1119,
	0, 0, 0, 0, 0, 478, 0, 0, 2082, 0,
	0, 0, 53, 0, 480, 54, 0, 1111, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 1889, 56, 0, 1109, 0,
	1110, 0, 0, 0, 0, 1079, 0, 1112, 1120, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0, 1078,
	2547, 0, 0, 0, 1105, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1880,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	1076, 1077, 1093, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 57, 1094, 0, 0, 0, 1109, 0, 0,
	1101, 1102, 1103, 1104, 1079, 0, 0, 1120, 1895, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 59,
	0, 60, 0, 0, 0, 0, 0, 0, 1078, 1113,
	1121, 0, 0, 1890, 1098, 146, 0, 0, 0, 0,
	0, 1095, 479, 0, 0, 93, 1112, 0, 1119, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 148, 1111, 0, 0, 2497,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 0, 1084, 1110,
	0, 0, 147, 0, 0, 0, 0, 0, 1891, 0,
	140, 0, 0, 0, 0, 0, 0, 141, 1113, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 1119, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 1114, 0, 0, 0, 1076,
	1077, 1093, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 0, 1094, 0, 0, 0, 1109, 0, 1110, 0,
	0, 0, 0, 1079, 0, 0, 1120, 0, 1886, 1887,
	1888, 0, 0, 0, 0, 1885, 1883, 1884, 1876, 1877,
	1878, 1879, 1881, 1882, 0, 0, 0, 1078, 0, 0,
	0, 0, 1105, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 1112, 0, 1100, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 1114, 0, 0, 0, 2451, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 1113, 1121, 0,
	0, 1094, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 1079, 0, 1112, 1120, 1119, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 1111, 0, 1078, 2421, 0, 0,
	0, 1099, 1098, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 1874, 1875, 1093,
	1892, 1893, 1894, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1076, 1077, 0,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 1889, 0, 0, 1109, 0, 1110, 0, 0, 0,
	0, 1079, 0, 1112, 1120, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 1078, 2416, 0, 0, 0,
	1105, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1880, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 1076, 1077, 1093, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 0, 0, 1109, 0, 0, 1101, 1102, 1103, 1104,
	1079, 0, 0, 1120, 1895, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 1113, 1121, 0, 0, 1890,
	1098, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 1112, 0, 1119, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 1111, 0, 0, 2412, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 0, 1084, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 1891, 1874, 1875, 0, 1892, 1893,
	1894, 0, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 0, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 1099, 1889,
	0, 1114, 0, 0, 0, 1076, 1077, 1093, 1106, 1107,
	1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094, 0,
	0, 0, 1109, 0, 1110, 0, 0, 0, 0, 1079,
	0, 0, 1120, 0, 1886, 1887, 1888, 0, 0, 0,
	0, 1885, 1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882,
	0, 0, 0, 1078, 0, 0, 0, 0, 1105, 1098,
	0, 0, 0, 1880, 0, 0, 1095, 0, 0, 0,
	0, 1112, 0, 1100, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	1114, 0, 0, 0, 2342, 0, 1093, 0, 0, 0,
	0, 0, 1895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 1890, 0, 0,
	0, 0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 1113, 1121, 0, 0, 1094, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 1079, 0,
	1112, 1120, 1119, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	1111, 0, 1078, 2308, 0, 0, 0, 1099, 1098, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 1891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1121, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 1874, 1875, 1093, 1892, 1893, 1894, 0,
	0, 1119, 1886, 1887, 1888, 0, 0, 0, 0, 1885,
	1883, 1884, 1876, 1877, 1878, 1879, 1881, 1882, 0, 1111,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 0, 0, 0, 1094, 1889, 0, 0,
	1109, 0, 1110, 0, 0, 0, 0, 1079, 0, 1112,
	1120, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	0, 1078, 2307, 0, 0, 0, 1105, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1880, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 1076, 1077, 1093, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 1896, 0, 0, 1094, 0, 0, 0, 1109,
	0, 0, 1101, 1102, 1103, 1104, 1079, 0, 0, 1120,
	1895, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 1113, 1121, 0, 0, 1890, 1098, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 1112, 0,
	1119, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 1111, 0,
	0, 2272, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	1084, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	1891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 1114, 0, 0,
	0, 1076, 1077, 1093, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 0, 0, 0, 1109, 0,
	1110, 0, 0, 0, 0, 1079, 0, 0, 1120, 0,
	1886, 1887, 1888, 0, 0, 0, 0, 1885, 1883, 1884,
	1876, 1877, 1878, 1879, 1881, 1882, 0, 0, 0, 1078,
	0, 0, 0, 0, 1105, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 1112, 0, 1100,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 1114, 0, 0, 0,
	2112, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1102, 1103, 1104, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 1113,
	1121, 0, 0, 1094, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 1079, 0, 1112, 1120, 1119, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 1111, 0, 1078, 2088,
	0, 0, 0, 1099, 1098, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 1105, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 1121,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 0, 1094, 0, 0, 0, 1109, 0, 1110, 0,
	0, 0, 0, 1079, 0, 1112, 1120, 0, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 0, 0, 0, 1078, 1534, 0,
	0, 0, 1105, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 1076, 1077,
	1093, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0,
	0, 1094, 0, 0, 0, 1109, 0, 0, 1101, 1102,
	1103, 1104, 1079, 0, 0, 1120, 0, 1084, 2610, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 1113, 1121, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 1112, 0, 1119, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 1111, 1836, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 1084, 1110, 1906, 0,
	0, 1905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2609, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1114, 0, 0, 0, 1076, 1077, 1093,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 0, 1109, 0, 1110, 0, 0, 1809,
	0, 1079, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	1105, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1112, 0, 1100, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 1114, 0, 0, 1810, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	1632, 0, 0, 0, 0, 0, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 1113, 1121, 0, 0, 1094,
	0, 0, 0, 1109, 0, 0, 0, 1631, 0, 0,
	1079, 0, 1112, 1120, 1119, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 1111, 0, 1078, 0, 0, 0, 0, 1099,
	1098, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 1113, 1121, 0, 0, 1094, 0,
	0, 1114, 1109, 0, 0, 0, 0, 1093, 0, 1079,
	0, 0, 1120, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 1078, 0, 0, 0, 0, 1099, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 1113, 1121, 0, 0, 1094, 0, 0,
	1114, 1109, 0, 0, 0, 0, 1093, 0, 1079, 0,
	0, 1120, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 1078, 0, 0, 0, 0, 1099, 1098, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 607, 0, 0, 0, 0, 0,
	1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 1076, 1077, 0, 1106, 1107, 1108, 1116,
	1117, 1118, 1113, 1121, 0, 0, 1094, 0, 0, 1114,
	1109, 0, 0, 0, 0, 1093, 0, 1079, 0, 0,
	1120, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1111,
	0, 1078, 0, 0, 0, 0, 1099, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	0, 0, 1101, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 1912, 0, 0, 0,
	0, 1100, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 1113, 1121, 0, 0, 1094, 0, 0, 1114, 1109,
	0, 0, 0, 1907, 1093, 0, 1079, 0, 0, 1120,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2092, 0, 1111, 0,
	1078, 0, 0, 0, 0, 1099, 1098, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 0, 0, 0, 1109, 0,
	1110, 0, 0, 0, 0, 1079, 0, 1112, 1120, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0, 1078,
	0, 0, 0, 0, 1105, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1102, 1103, 1104, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 1113,
	1121, 0, 0, 1094, 0, 0, 0, 1109, 0, 0,
	0, 1865, 0, 0, 1079, 0, 1112, 1120, 1119, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 1111, 0, 1078, 0,
	0, 0, 0, 1099, 1098, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 1105, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 1113, 1121,
	0, 0, 1094, 0, 0, 1114, 1109, 0, 0, 0,
	0, 1093, 0, 1079, 0, 0, 1120, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 1078, 0, 0,
	0, 0, 1099, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 1113, 1121, 0,
	0, 1094, 0, 0, 1114, 1109, 0, 0, 0, 0,
	1093, 0, 1079, 0, 0, 1120, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 1078, 0, 0, 0,
	0, 1099, 1098, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 1076, 1077, 0,
	1106, 1107, 1108, 1116, 1117, 1118, 1113, 1121, 0, 0,
	1094, 0, 0, 1114, 0, 0, 0, 0, 0, 1093,
	0, 1079, 0, 0, 1120, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 1078, 0, 0, 0, 0,
	1099, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	1105, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 1113, 1121, 0, 0, 1094,
	0, 0, 1114, 0, 0, 0, 0, 0, 1093, 0,
	1079, 0, 0, 1120, 1119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1111, 0, 1078, 0, 0, 0, 0, 1099,
	1098, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 547, 1100, 573, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 1114, 0, 552, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 551, 1099, 0,
	0, 0, 553, 0, 0, 0, 0, 0, 0, 0,
	559, 560, 0, 0, 0, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	554, 1112, 0, 1330, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 572, 0, 0, 0, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 1327, 1357,
	1316, 1348, 1347, 1100, 0, 1318, 1317, 555, 0, 0,
	0, 1359, 1358, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 556, 557, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 0, 0, 0, 0, 558, 565, 0, 1353,
	0, 1345, 1344, 0, 0, 0, 0, 0, 0, 562,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 1340, 1341, 0, 0, 0,
	1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 1326,
	561, 0, 0, 0, 0, 0, 1331, 1329, 1332, 1333,
	1334, 1335, 1336, 0, 1356, 0, 0, 0, 0, 1330,
	0, 1320, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 566,
	576, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 1338, 1327, 1357, 1316, 1348, 1347, 1346,
	0, 1318, 1317, 1328, 0, 567, 0, 1359, 1358, 571,
	0, 0, 0, 0, 577, 0, 0, 0, 0, 564,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 570, 1459, 1457, 1458, 1461,
	1460, 0, 0, 0, 0, 1353, 0, 1345, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 1324, 0, 0, 0,
	1342, 1340, 1341, 0, 0, 0, 1361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 1354, 1355, 1326, 0, 0, 0, 0,
	0, 0, 1331, 1329, 1332, 1333, 1334, 1335, 1336, 0,
	1356, 0, 0, 0, 0, 1325, 0, 1320, 1319, 0,
	1360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 1360,
}
var sqlPact = [...]int{

	365, -1000, 1, -1000, -1000, -1000, 163, -1000, -1000, -1000,
	-1000, 162, 161, 160, -1000, 159, 158, 157, 156, 155,
	153, 151, 149, 146, 145, 143, -1000, 142, -1000, -1000,
	-1000, -1000, 140, 138, 137, -1000, 136, 1178, 22951, 135,
	134, 1340, -1000, 35867, 132, -1000, 1041, 26681, 920, 1412,
	-1000, 127, 1029, 35529, 39092, 2641, 1126, 1656, 35188, 22610,
	1653, 1500, 34847, -1000, -1000, 34506, 125, 122, 116, 114,
	113, -1000, -1000, 34165, 112, 110, 107, 105, 100, 94,
	93, 91, 90, 88, 84, 83, 82, 80, -1000, 79,
	78, 77, -1000, 42891, 63, 62, 61, 1120, 59, 57,
	54, 53, -1000, -1000, 884, 52, 41, 40, 39, 38,
	126, 35, 33, 32, 31, -1000, 1193, 405, 2442, 8765,
	1040, 1033, 1022, 1020, 1035, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	37895, 35867, 30, -25, 27, -1000, 2073, 613, 18795, 365,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26340, 25999, 22269, 33824, 33483, 6616, 786, -1000, -2,
	24303, 35867, -1000, 119, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14282, 13903, 567, 119, -1000, -1000, -1000,
	33142, 21917, 32801, 1525, 32460, -1000, -1000, 32119, -1000, -1000,
	1952, 1669, 1660, 25658, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31781, 31440, 31099, 30758, 21565, 480, -1000, -1000,
	-1000, 17080, -1000, -1000, -1000, -1000, 26, -1000, 25, 24,
	-1000, 19, 18, 17, 16, 15, 14, -1000, 13, 9,
	-1000, 8, 7, -1000, 6, 3, 1155, 1023, 1075, 30417,
	863, 1284, -1000, -1000, -1, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35867, -1000, 15335, -1000, 478, -1000, 1646,
	-1000, 15335, -1000, 1272, -1000, -1000, -1000, -1000, -1000, 35867,
	-1000, -1000, -1000, -1000, -1000, -1000, 2216, 1190, 475, 30076,
	-1000, 1522, -1000, 584, 748, -1000, -1000, -1000, 9467, 170,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1666,
	21213, 1222, 2033, 1895, 2214, 1499, 1877, 1813, 1798, 1737,
	1704, 2213, 930, 2210, 1836, 1032, 2209, 1703, 1311, 662,
	2205, 1645, 1644, -1000, -1000, -1000, -1000, 917, -1000, -1000,
	-1000, 28033, -1000, -1000, -1000, -1000, -1000, -1000, 817, 886,
	-1000, -1000, -1000, -1000, -1000, 1193, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1577, 1930, 1930, 1930, 2062, 309, 305,
	-1000, 126, -1000, 1216, -1000, 1151, -1000, -1000, -1000, 42369,
	-1000, -1000, 15335, 15335, 15335, 15335, 15335, 1166, -1000, 506,
	-1000, 474, 471, 7319, -1000, -1000, 2190, -1000, -1000, -1000,
	322, -1000, -1000, 15335, 119, -1000, -1000, -1000, -1000, 470,
	2200, -1000, 682, -1000, -1000, -1000, 575, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1671, 469, 468, 467,
	-1000, 466, -1000, -1000, 465, 464, 463, 462, 461, 460,
	458, 457, 456, 455, 450, 449, 447, 445, 444, 1052,
	-1000, 618, -1000, -1000, 618, 618, -1000, 427, 427, 430,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 427, -1000,
	-1000, -1000, 554, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 443, 1304, -1000, -1000, 1304,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 784, 37219, -7,
	35867, -1000, 440, -7, -1000, -1000, 439, -1000, 9818, 9818,
	-1000, -1000, -1000, 15335, -1000, 1959, -1000, 800, -187, 323,
	552, -1000, 17766, 20511, -1000, -1000, 1112, 1781, 672, -1000,
	1007, 1778, 503, -1000, 600, 1764, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1110, -1000, 1221, 1760,
	-165, 1698, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23289, 24303,
	-2, -3, -1000, -1000, -1000, 6266, 42369, -1000, 42369, -1000,
	846, 19481, 119, -1000, -1000, -1000, -1000, 438, 1359, 592,
	1343, -1000, 333, -1000, 29735, 592, 1342, -1000, -1000, -1000,
	28033, -1000, 35867, -1000, 35867, -1000, 870, -1000, 37557, 117,
	1759, -1000, -1000, 117, 1752, -1000, 115, 1747, -1000, -1000,
	1256, 1739, -1000, -122, 1732, -1000, -1000, -1000, 15335, -26,
	-1000, -1000, -1000, 613, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29394,
	23627, 1357, 610, 42369, 2108, 43145, 23289, 42369, 23627, -1000,
	-1000, 35867, -1000, 15335, -1000, 2106, 1517, -9, -1000, -1000,
	-1000, -1000, -1000, 1403, 1390, 704, 1375, 9467, 9467, 1919,
	-1000, 165, 6616, -1000, -1000, -1000, -1000, 29053, -1000, -1000,
	-1000, 1158, 35867, -1000, -1000, 1668, -1000, 23627, 35867, -1000,
	35867, -1000, 35867, -1000, 35867, -1000, 35867, -1000, -1000, -1000,
	-1000, -1000, 4203, -1000, 1667, -1000, -1000, 35867, -1000, 1399,
	-1000, -1000, -1000, 28715, 28374, -1000, 964, 810, -1000, -1000,
	118, -1000, 35867, 2011, 582, -1000, 1577, 1379, 1651, 663,
	1225, 1468, 13524, 1452, 15335, 126, -1000, -1000, 126, 126,
	8386, -1000, -1000, -1000, 35867, -1000, 42979, 43145, 6616, 795,
	15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335,
	15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335,
	15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335, 15335,
	15335, 15335, 1491, 15335, 783, 15335, 15335, 15335, 15335, 1273,
	1102, 361, 1157, -1000, 2152, 2152, 2152, 42627, 42627, 420,
	506, -1000, 15335, -1000, 178, 15335, 305, 40681, -4, 5122,
	-1000, -1000, -1000, 13173, 608, 42369, 119, 6968, -1000, 2188,
	873, 1676, 1564, 435, 569, 559, 551, 545, 15335, 15335,
	12822, 12443, 12064, 16037, 11685, 15335, 7684, 15335, 15335, 15335,
	15335, 11306, 10927, -1000, 434, -1000, -1000, -1000, -1000, 2187,
	-1000, -1000, 2184, -1000, 793, 792, 2183, -1000, -9, -1000,
	37219, -1000, 35867, -7, 2101, 35867, 15335, 95, -1000, 41406,
	-1000, 95, -28, 42369, 1481, 1476, 19138, 1441, 1170, 1170,
	1170, -1000, 433, 500, 552, 5555, 10548, -1000, 27019, 1186,
	217, 302, 17423, 1959, -1000, 35867, -38, 1117, -1000, 25317,
	2034, 2028, 1947, 28033, 2079, 178, 1697, 1643, -1000, 6616,
	772, 28033, 1081, 23289, 1985, 770, 2074, 178, 1696, 1636,
	769, 35867, 6616, 1981, 549, -1000, 35867, -1000, -1000, -1000,
	1635, -29, -1000, -1000, 24979, 2098, 1723, -1000, 1079, -1000,
	1722, 2097, 35867, 1270, 1334, -1000, -1000, 806, 1720, 605,
	429, 2094, 429, 19825, -1000, 35867, -1000, 35867, -1000, -1000,
	35867, -1000, 35867, -1000, 35867, 35867, -1000, 35867, 23289, 23289,
	-36, 4744, 24641, 768, -1000, 643, 24979, 400, -39, -1000,
	847, -1000, -1000, -1000, -1000, 259, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 430, 1052, 427, 427, 427, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 554, -1000, -1000, 618, 618, 618,
	-1000, -1000, -42, 1634, 572, -45, 687, -9, -1000, 1304,
	-1000, 1014, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2198, -1000, 2164, -1000, -1000,
	2181, -10, -1000, -10, -1000, 6616, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35867, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3615, -1000, -1000, -1000, -1000, -1000, -1000, 35867,
	35867, 35867, -1000, 28033, 597, 1657, -1000, 1989, 1379, 1651,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42369, -1000,
	419, -1000, -1000, 42369, 963, 1495, -1000, 1495, -12, -1000,
	41277, 1435, 35867, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 581, 603, 603, 818, 818, 818,
	818, 2159, 1483, 216, 1201, 4688, 4688, 4688, 4688, 4688,
	4688, 4688, 4688, 725, 357, 357, 725, 725, 725, 725,
	725, 4688, 4688, 4688, 42627, 42498, 238, 15335, 15335, 766,
	1097, 361, 238, 15335, 238, 238, 238, 238, -1000, 954,
	-1000, -1000, -1000, -1000, 1628, 426, 16037, 16037, -1000, -1000,
	-1000, 7319, 15335, -1000, -1000, -1000, -1000, 425, 15335, -1000,
	40810, -222, 299, -136, -1000, 15335, 498, -44, -1000, 857,
	-1000, 15335, -1000, -41, 15335, 15335, 15335, 298, -1000, 297,
	-1000, 765, -1000, 762, 756, 755, -1000, 424, 1168, 422,
	421, 15335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42240, 38629, 294, -1000, 1613, -136, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 293, -1000, 292, -1000, 42111, -136, 290,
	40363, -1000, 16037, 16037, 16037, 7319, 418, 289, -1000, 41088,
	-1000, 41922, 10169, 10169, 10169, 288, 41793, 15335, -136, 38577,
	4599, 3852, -47, -52, -1000, -53, -1000, 2180, -54, 287,
	580, 577, 286, -1000, -1000, 417, -68, -69, 605, 9818,
	18452, 6616, -1000, 605, -1000, 15335, 19138, 19138, 1451, 1458,
	19138, -1000, -1000, -1000, -1000, 27019, 539, 552, 27019, -1000,
	2179, 1414, 285, -1000, -1000, -1000, 35867, 416, -1000, 552,
	283, 959, 35867, 35867, 35867, -1000, -1000, 1333, 36881, 1331,
	43145, 35867, -1000, 415, 414, 1434, 1433, 35867, 35867, 36543,
	36205, 35867, 1039, 178, -1000, 1969, 413, -1000, 35867, 1001,
	23289, 594, 574, 35867, 178, -1000, 1964, 412, 6616, 992,
	-1000, 573, 1548, 1293, -1000, 843, 1607, 35867, 278, -70,
	-17, 43145, -1000, -1000, -1000, -1000, -1000, 35867, 423, 35867,
	178, 35867, 23289, 23289, 178, 35867, 1718, 1828, 532, 35867,
	1468, 15335, 1021, -1000, 18109, 628, 35867, 938, 68, -1000,
	-1000, -1000, 542, 35867, -1000, -1000, 117, 117, -1000, 115,
	1256, -1000, -122, -1000, -1000, -1000, 35867, 23289, -71, -1000,
	654, 652, 651, -1000, 43145, -1000, 505, 726, -1000, 2178,
	591, 35867, 9467, 9467, -1000, 1492, -1000, -1000, 952, -1000,
	1037, -1000, -1000, -1000, -1000, 9467, -1000, -46, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1192, 1031, -1000, -1000, -1000,
	963, -1000, 15335, 2169, -1000, -1000, -1000, 8386, -1000, -1000,
	-1000, 35867, -178, 15335, 238, 238, 15335, 16037, 16037, -1000,
	238, -1000, -1000, -1000, -1000, -1000, 1601, 409, 15335, 43145,
	39767, 39171, -76, 725, 15335, -18, -1000, 15335, -1000, 40492,
	-1000, -1000, 504, 1707, -1000, 15335, 41664, 277, 9116, -1000,
	41535, -48, -48, -1000, 2197, 1366, 1262, 977, 912, 2168,
	-1000, 20168, 606, 1194, 40403, 42979, 43145, -1000, 15335, -1000,
	-1000, 1598, 15335, -1000, 42979, 43145, 16037, 16037, 16037, 16037,
	16037, 16037, 16037, 16037, 16037, 16037, 16037, 16037, 16037, 16037,
	16037, 16037, 16037, 16037, 16037, 1408, 16037, 2146, 2146, 2146,
	-19, 15335, -1000, 1650, 1598, 15335, 15335, 43145, 276, 275,
	272, -1000, 15335, -136, 15335, 15335, 15335, -1000, -1000, -1000,
	270, -1000, 2167, -1000, -1000, -1000, -1000, 400, -1000, -1000,
	1563, -1000, -134, -1000, 1959, -1000, 1563, 42369, -1000, 1451,
	-1000, 406, 15335, 19138, -1000, 496, -1000, -77, -1000, 27019,
	-1000, 495, -219, -1000, 536, -1000, 552, 396, 35867, 27019,
	-1000, -1000, -1000, 751, 750, 1711, -1000, 1328, -1000, 632,
	-1000, 1123, 15335, 16737, 395, 394, 1106, -1000, 1710, 1256,
	1709, 1256, -1000, -38, 1055, -1000, 561, 15335, -1000, 749,
	-1000, 1045, 20861, -1000, -1000, 558, 15335, -1000, 745, 20861,
	591, 1596, 819, -1000, 839, -1000, 1523, -1000, 24979, 389,
	35867, 387, -1000, 386, -1000, 592, -1000, 385, 35867, 1410,
	532, 23965, -1000, 592, 938, -1000, 42369, -1000, 938, 8035,
	1958, -82, -1000, -1000, -1000, 605, 19825, 19138, 15335, -83,
	-1000, -1000, -1000, -1000, -46, 1929, 1929, -1000, 2147, -1000,
	485, 269, -1000, 27695, -46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35867, 1509, 6616, 35867, 35867, 35867, 1220, 40214,
	-1000, 1982, 6616, 2107, 238, 38609, 3829, 15335, 43145, 42756,
	-88, 15335, 15335, -1000, 267, 15335, 484, 42369, -1000, -1000,
	-1000, 42369, 15335, 2196, 15335, 266, 265, 262, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 257, -1000, -1000, 38233,
	15335, 255, -1000, 254, 252, 42369, 1650, 42369, -1000, -1000,
	640, 640, 875, 875, 875, 875, 2146, 1931, 588, 497,
	630, 630, 630, 1189, 680, 680, 630, 630, 630, 1582,
	1407, 381, 40025, 15335, 246, -1000, -1000, 42369, 42369, 242,
	-1000, -1000, -1000, -136, 198, 40085, 39896, -1000, 241, 235,
	1556, 2059, -1000, 19138, 1556, -1000, 35867, 42369, -1000, -187,
	-1000, 2143, -1000, -1000, 1414, -1000, 5915, 27019, 35867, -89,
	-1000, 35867, 35867, 35867, 1705, -1000, 2653, -1000, 39807, -90,
	-1000, 326, 2023, 15335, -1000, -1000, 378, 16737, 35867, -1000,
	1429, 1431, 690, 35867, -1000, 35867, -1000, 35867, 35867, 35867,
	20861, -91, 35867, 23289, -1000, 376, 119, 20861, -96, 6616,
	-1000, -1000, 23289, 791, -1000, 1148, 1534, -1000, 16737, 370,
	35867, 24979, 2090, -1000, 16737, 1267, 1426, 532, 23965, -1000,
	806, -1000, -1000, -65, -1000, 402, 178, 938, -1000, -66,
	42369, 535, 1908, -1000, 1887, 483, -1000, -1000, -105, 367,
	-1000, 534, 533, -1000, -113, -1000, 571, -1000, -1000, 1084,
	1084, -1000, -1000, -1000, 1982, 15335, 15335, 42756, -99, -1000,
	238, 238, -1000, 39618, -1000, 42369, -1000, 41535, -1000, -1000,
	-1000, -1000, 1090, -1000, 39489, -1000, -1000, -1000, -1000, 16037,
	1576, 363, 43145, 39300, -1000, -1000, 15335, -1000, -1000, -1000,
	-1000, 602, 15335, 15335, 1959, 602, -102, 552, -1000, -1000,
	-1000, 2141, -1000, -104, -1000, -1000, -1000, -1000, 35867, -1000,
	35867, -1000, 6616, 35867, 1575, 1309, -1000, -1000, 1416, 362,
	16037, 35867, -1000, 1059, 16737, 1982, 119, 6616, 1982, 39211,
	6968, -110, -111, 1303, -1000, 1298, 15335, -1000, 43145, 1256,
	1256, -1000, 724, 723, -1000, 720, -1000, -1000, 15335, -1000,
	712, -1000, -122, 20861, -1000, -1000, 2056, 1114, -116, 16737,
	-117, 219, 178, -123, 35867, -1000, 532, 23965, -1000, 1828,
	1842, 35867, 1943, -1000, -1000, 361, 358, 354, -1000, 27357,
	27357, 23289, 23289, 1509, -1000, 35867, -1000, -1000, -1000, 238,
	238, -1000, -1000, 215, 1194, 2054, -1000, 3993, 16037, 43145,
	-124, -1000, 39022, -1000, 35867, 42369, -136, -1000, -1000, 27019,
	482, -1000, -1000, 1345, -1000, -1000, 35867, 1326, -1000, -1000,
	15335, 40025, 347, 1523, 346, -1000, -1000, -1000, -1000, -1000,
	-1000, 2023, -41, -1000, 1015, -1000, -1000, 42369, 2002, -1000,
	-1000, 35867, 35867, 343, -48, 342, -1000, 1223, 35867, 1059,
	-139, -1000, 1523, -1000, 1059, 341, 23965, -1000, 1410, 801,
	-140, 35867, -1000, 23289, 23289, -1000, -141, -1000, -1000, -1000,
	-147, -1000, 965, 15335, 3993, -148, -1000, -1000, -129, -1000,
	2085, -1000, -1000, -1000, -1000, 1702, 38893, 1386, 35867, -1000,
	35867, 1982, 214, 35867, 641, 6616, -1000, -1000, 15335, 213,
	15335, 339, 338, 336, 1523, 1059, -1000, 1523, 16737, -1000,
	1426, 869, -1000, 605, -1000, -157, -158, -1000, -1000, 212,
	15686, 15686, -136, -1000, 35867, 334, 1690, -1000, 1251, 1048,
	203, -171, -1000, -1000, 333, -1000, 15335, -1000, -174, 2196,
	-181, 35867, 35867, 35867, -1000, 1523, -1000, -183, -1000, 19825,
	-1000, 591, 591, -1000, -1000, -1000, 16387, 1153, 924, 40999,
	-1000, -1000, -1000, 35867, -1000, 1260, 1258, 907, -1000, -1000,
	-1000, -1000, -1000, 1386, 42369, -1000, -1000, -184, -189, -191,
	-1000, 1059, -176, -1000, -1000, 2117, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1883, -1000, 660, 1209, 1209, 1251, 331,
	330, 1197, 1523, -1000, 14984, -1000, 2125, -1000, -1000, 1421,
	-1000, -1000, 1084, 1084, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 201, 627, 200, 626, -1000, 325, -1000, 1405,
	-59, 14633, 798, 345, -137, -1000, -192, -1000, 42369, -1000,
	319, -1000, 14633, 1084, -1000, 14633, 14633, -194, -1000, -1000,
	-197, -1000, -60, 1084, -150, -1000, -1000, 1084, -1000,
}
var sqlPgo = [...]int{

	0, 2661, 2657, 1684, 2655, 2133, 2653, 2650, 2648, 2646,
	2126, 2645, 2644, 2642, 2640, 2634, 2633, 2631, 2630, 2629,
	2627, 2624, 2623, 2622, 2620, 2619, 2618, 2616, 2119, 2614,
	2111, 2610, 2609, 2607, 2605, 2600, 29, 2598, 2595, 2594,
	2090, 2587, 2581, 2580, 2579, 2078, 2578, 2046, 2577, 2576,
	2039, 2573, 2569, 2568, 2003, 2565, 1992, 2561, 80, 114,
	1972, 2559, 2554, 1895, 1885, 1877, 2551, 1875, 2549, 2547,
	1857, 1844, 2546, 41, 2543, 2540, 2534, 1805, 1803, 2533,
	2531, 2525, 157, 2524, 1748, 2522, 2518, 2512, 2510, 2507,
	2506, 2503, 2502, 2501, 2499, 2497, 2496, 2495, 2494, 2491,
	2490, 2487, 2486, 2480, 161, 2479, 2476, 1732, 1697, 2475,
	2474, 38, 34, 17, 62, 145, 144, 3300, 135, 2473,
	2472, 2471, 2465, 2461, 2459, 30, 103, 99, 2458, 92,
	2457, 2451, 53, 37, 25, 21, 68, 88, 2447, 2442,
	2092, 33, 2439, 2434, 134, 2432, 24, 26, 1598, 156,
	152, 75, 121, 2429, 2420, 2418, 61, 120, 16, 8,
	3, 4, 50, 6, 1, 2417, 2, 5, 2416, 2415,
	19, 85, 40, 2413, 27, 179, 2412, 2411, 129, 2409,
	67, 89, 1621, 106, 137, 453, 104, 2399, 70, 23,
	69, 2395, 2389, 159, 47, 78, 146, 115, 2387, 58,
	160, 127, 83, 128, 132, 2386, 2384, 2383, 107, 2382,
	119, 112, 2381, 2377, 84, 2375, 90, 136, 2370, 138,
	113, 2367, 2365, 87, 2364, 124, 2362, 2361, 158, 150,
	116, 13, 76, 77, 14, 1600, 1599, 131, 100, 57,
	55, 2359, 818, 1385, 1328, 71, 2357, 91, 64, 35,
	73, 97, 147, 36, 2356, 2353, 133, 2352, 2351, 2350,
	2349, 2347, 105, 2345, 2344, 2343, 82, 51, 56, 86,
	45, 154, 126, 111, 153, 108, 2340, 96, 123, 2337,
	81, 2336, 2332, 1627, 118, 2330, 2327, 2326, 1319, 1173,
	1171, 370, 2325, 2324, 887, 884, 2323, 2319, 101, 2314,
	117, 110, 98, 140, 143, 95, 2313, 122, 31, 2312,
	65, 43, 0, 2355, 2161, 2311, 125, 79, 2310, 2309,
	2308, 2307, 32, 12, 9, 7, 15, 10, 46, 28,
	2304, 2296, 130, 93, 72, 2292, 155, 2291, 2290, 2286,
	52, 2285, 22, 2284, 20, 2280, 2277, 18, 11, 2271,
	2258, 139, 2255, 102, 2254, 2062, 2252, 151, 2247, 2243,
	1867, 2224, 49, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 127, 127, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	124, 124, 129, 129, 129, 131, 131, 128, 128, 123,
	123, 28, 28, 71, 71, 114, 64, 64, 64, 310,
	310, 311, 311, 110, 110, 111, 111, 111, 111, 112,
	112, 113, 113, 113, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	50, 55, 55, 55, 53, 53, 53, 52, 52, 52,
	51, 51, 51, 54, 54, 54, 184, 184, 183, 183,
	187, 187, 56, 56, 56, 56, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	59, 59, 59, 59, 59, 279, 279, 278, 57, 57,
	254, 254, 60, 60, 209, 209, 61, 61, 61, 61,
	61, 62, 62, 72, 72, 351, 351, 351, 355, 355,
	356, 356, 357, 357, 357, 357, 357, 357, 357, 353,
	353, 67, 67, 67, 67, 68, 68, 68, 69, 69,
	109, 109, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 33, 34, 34, 35, 35, 36, 36, 78, 78,
	78, 80, 77, 77, 77, 79, 79, 79, 79, 81,
	81, 82, 82, 82, 82, 82, 83, 83, 304, 302,
	302, 303, 303, 154, 154, 154, 154, 154, 155, 155,
	155, 309, 309, 309, 309, 309, 309, 308, 308, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 96, 96, 96, 104,
	104, 104, 104, 104, 104, 104, 85, 85, 90, 90,
	90, 90, 90, 86, 86, 91, 91, 92, 92, 93,
	93, 93, 93, 93, 93, 87, 87, 87, 87, 95,
	95, 95, 95, 94, 94, 100, 100, 100, 100, 100,
	100, 97, 97, 97, 97, 98, 98, 98, 101, 101,
	101, 101, 88, 88, 89, 89, 102, 102, 103, 103,
	103, 103, 103, 103, 99, 99, 99, 352, 352, 354,
	354, 65, 65, 43, 43, 44, 44, 156, 156, 157,
	157, 233, 233, 233, 233, 158, 158, 130, 130, 130,
	161, 162, 162, 159, 159, 160, 160, 163, 163, 163,
	165, 165, 166, 166, 167, 167, 164, 164, 164, 232,
	320, 320, 321, 321, 321, 321, 321, 321, 322, 322,
	322, 322, 322, 322, 322, 318, 318, 319, 316, 316,
	317, 317, 317, 317, 358, 358, 231, 231, 170, 170,
	323, 323, 323, 323, 324, 324, 324, 324, 324, 327,
	326, 325, 325, 325, 325, 325, 265, 265, 265, 106,
	106, 45, 45, 45, 136, 136, 46, 46, 42, 42,
	42, 213, 213, 174, 174, 270, 270, 270, 147, 147,
	125, 125, 125, 19, 21, 21, 15, 15, 15, 15,
	15, 15, 27, 27, 24, 24, 214, 214, 215, 215,
	66, 66, 70, 70, 75, 75, 105, 105, 105, 105,
	105, 105, 29, 29, 29, 29, 37, 37, 37, 37,
	74, 74, 360, 360, 143, 143, 143, 143, 144, 144,
	228, 228, 229, 229, 361, 361, 230, 230, 230, 138,
	137, 139, 139, 41, 41, 41, 132, 132, 133, 133,
	134, 134, 135, 135, 362, 362, 63, 63, 63, 108,
	108, 150, 150, 225, 225, 225, 227, 227, 226, 226,
	226, 199, 199, 199, 107, 107, 179, 179, 189, 189,
	190, 190, 276, 191, 73, 73, 117, 117, 115, 115,
	115, 115, 115, 115, 115, 115, 116, 116, 116, 118,
	118, 118, 118, 118, 118, 118, 121, 121, 121, 122,
	122, 122, 120, 120, 333, 333, 333, 336, 336, 332,
	334, 334, 335, 335, 359, 359, 200, 200, 200, 169,
	168, 168, 172, 172, 171, 173, 173, 269, 269, 269,
	197, 197, 196, 196, 196, 196, 218, 218, 216, 216,
	217, 217, 221, 221, 222, 222, 222, 223, 223, 224,
	224, 195, 195, 250, 250, 220, 220, 219, 119, 119,
	119, 178, 178, 178, 180, 180, 240, 240, 240, 241,
	241, 239, 239, 239, 239, 271, 271, 271, 271, 271,
	271, 271, 271, 349, 349, 349, 350, 350, 268, 268,
	272, 272, 272, 272, 272, 272, 266, 266, 266, 266,
	267, 267, 277, 277, 203, 203, 203, 203, 201, 201,
	202, 202, 273, 273, 273, 273, 198, 198, 274, 274,
	274, 234, 234, 280, 280, 280, 298, 298, 177, 177,
	177, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 282, 282, 282, 282, 284, 284, 284, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 297, 297, 297,
	297, 297, 285, 285, 292, 292, 293, 293, 294, 295,
	286, 286, 287, 287, 288, 289, 296, 296, 296, 296,
	300, 300, 290, 290, 290, 290, 290, 291, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 211, 211, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 244, 244, 244,
	244, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 328, 328, 328, 328, 328, 328, 328, 328,
	330, 330, 331, 331, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 337, 337, 338, 338, 340, 340,
	341, 341, 342, 343, 343, 343, 344, 345, 345, 339,
	339, 346, 346, 346, 347, 347, 348, 348, 348, 348,
	348, 256, 256, 257, 258, 264, 264, 264, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 145, 145, 145, 145, 145, 186,
	186, 185, 185, 253, 253, 251, 251, 255, 255, 204,
	204, 299, 299, 299, 299, 299, 299, 299, 205, 205,
	205, 212, 206, 206, 207, 207, 207, 207, 207, 247,
	248, 208, 208, 208, 249, 249, 259, 263, 263, 262,
	261, 261, 260, 260, 237, 237, 238, 238, 236, 235,
	194, 194, 193, 193, 192, 192, 363, 363, 188, 188,
	275, 275, 275, 275, 181, 181, 152, 152, 182, 182,
	148, 148, 151, 151, 149, 149, 149, 149, 175, 175,
	176, 176, 146, 146, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 301, 301, 301, 252, 140,
	140, 140, 141, 141, 142, 142, 306, 306, 306, 307,
	307, 307, 307, 305, 305, 305, 305, 305, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 4, 7, 1, 3, 2, 4, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	8, 8, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 5, 6, 4,
	3, 5, 1, 3, 1, 1, 9, 10, 8, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 7, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	1, 0, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 1, 0, 2, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 1, 3, 3, 1, 1,
	6, 6, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -28, -30, -33, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -31,
	-32, 48, -34, 72, -45, -40, 74, 95, -335, 99,
	-50, -54, 103, 110, 113, 135, 144, 230, 236, 257,
	259, 261, 268, -115, -117, 255, -68, -69, -77, -78,
	-79, -80, -109, 280, -85, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, 283, -29, -37, -74, 323, -6, -7,
	-8, -9, -11, -21, 112, -41, -42, -43, -44, -46,
	-333, -51, -52, -53, -55, -118, -116, 376, 256, 332,
	36, 293, 62, 106, 263, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -27, -19, -20, -12,
	348, 355, -121, -119, -120, -122, 273, 340, 303, 380,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	2, 303, 343, 333, 88, 152, 241, -351, 2, -182,
	303, 88, -149, -140, 369, 4, -312, -314, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 232, 234, 236, 238, 239, 240, 241,
	242, 244, 245, 247, 248, 249, 250, 251, 255, 253,
	254, 256, 257, 258, 259, 261, 263, 264, 266, 281,
	282, 294, 268, 269, 270, 271, 272, 276, 274, 277,
	278, 280, 283, 285, 288, 292, 293, 295, 298, 299,
	296, 291, 302, 304, 305, 306, 307, 308, 309, 310,
	311, 318, 319, 323, 324, 325, 326, 329, 330, 331,
	332, 334, 337, 338, 339, 344, 349, 350, 351, 352,
	353, 29, 37, 38, 39, 40, 42, 43, 46, 47,
	52, 53, 54, 57, 90, 92, 93, 109, 114, 115,
	125, 126, 127, 137, 139, 146, 147, 150, 157, 159,
	160, 161, 162, 163, 165, 172, 173, 181, 198, 208,
	210, 221, 225, 233, 235, 243, 265, 275, 286, 287,
	297, 300, 313, 314, 315, 320, 321, 336, 340, 341,
	379, 379, 2, 169, 240, -148, -140, 88, 379, 2,
	303, 333, 343, -213, 88, 328, -140, 236, 22, 2,
	97, 156, 331, 330, 22, 232, 274, 305, 307, 2,
	379, 2, 343, 303, 152, 88, 333, -140, 2, -59,
	2, 376, -58, -5, -40, -50, -60, -56, -10, -28,
	-30, -45, -47, -54, -64, -63, -65, -67, -71, -70,
	-73, -77, -78, -84, -107, -108, 74, 24, 103, 280,
	112, -355, 2, 22, -356, -357, 74, 103, 135, 273,
	156, 97, 330, 303, 2, 169, 2, -140, 2, -351,
	2, 169, 2, -355, 2, -140, 2, -144, 2, 268,
	-140, 379, 379, 379, 379, 379, 188, 56, 265, 277,
	-82, 319, -81, 313, -304, -83, 2, -183, 199, -140,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 2, -104, 277,
	35, 56, 22, 61, 89, 136, 152, 153, 175, 69,
	70, 239, 188, 170, 318, 176, 278, 304, 319, 74,
	334, 308, 111, 4, 88, 199, 279, 313, 379, 379,
	379, -359, 2, 303, 379, 379, 379, 379, 270, 283,
	379, 379, 379, 379, 379, -116, -118, -117, 379, 379,
	379, 379, -171, -172, 327, 164, 108, 219, -115, -117,
	2, -333, -104, 277, 2, 56, 22, -302, 2, -242,
	215, -244, 367, 368, 362, 205, 354, -256, 94, -246,
	-259, 109, 265, 376, -148, -245, 382, 9, -330, -117,
	30, -257, -258, 50, -140, 7, 8, 5, 6, -146,
	-282, -252, -291, 322, 116, 207, -328, -329, 4, -312,
	-306, -283, -293, -287, -290, 165, 59, 80, 81, 84,
	82, 85, 279, 333, 51, 29, 114, 115, 225, 233,
	300, 320, 321, 146, 208, 147, 57, 137, 181, 102,
	38, 40, 42, 43, 52, 53, 90, 92, 93, 125,
	126, 127, 157, 159, 160, 161, 162, 163, 210, 243,
	286, 297, 314, 315, 341, -313, -294, -295, -288, -289,
	75, 117, 134, 155, 148, 167, 171, 182, 185, 194,
	200, 222, 224, 262, 284, -296, -360, 2, 319, 319,
	2, -360, 2, -360, 2, -143, 2, 319, 316, -336,
	244, -332, -140, -336, 379, 379, 381, 379, -168, -169,
	2, 22, 100, 376, 2, -271, 2, 374, -273, -148,
	-117, -272, 376, 216, -3, 2, -273, 146, -148, 2,
	-273, 146, -148, 2, -310, 146, -308, 9, -307, 5,
	4, -312, -314, -313, 59, 2, -140, 2, -151, 146,
	-148, -305, 4, -312, -314, -313, -315, 22, 25, 26,
	27, 28, 30, 31, 32, 33, 44, 50, 51, 55,
	58, 60, 69, 74, 79, 80, 82, 81, 83, 84,
	85, 94, 96, 98, 100, 101, 104, 106, 108, 116,
	118, 130, 132, 133, 135, 138, 140, 149, 152, 154,
	164, 166, 177, 180, 186, 189, 190, 205, 206, 207,
	213, 215, 216, 218, 219, 231, 237, 246, 260, 273,
	279, 289, 301, 303, 312, 316, 317, 322, 327, 328,
	333, 335, 342, 343, 345, 346, 347, 348, 316, 381,
	-182, -175, -140, -236, -235, 378, -242, 2, -242, 2,
	133, 376, -193, -194, -235, -236, 2, -183, 146, -310,
	146, 2, -183, 2, 152, -140, 146, 2, -140, 22,
	133, 2, 166, 2, 166, 2, -274, 2, -273, -184,
	146, 2, -183, -184, 146, 2, -152, 146, 2, -151,
	-140, 146, 2, -311, 146, 2, -310, -209, 376, -279,
	2, -278, -307, 340, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 277,
	215, 381, -183, -242, -254, 376, 133, -242, 215, -140,
	2, 281, 2, 376, -82, 54, 319, -229, 2, -230,
	-137, -138, -139, 168, 238, 242, 353, 316, 359, 133,
	-302, -187, 378, -104, 2, -310, 2, 281, 2, 239,
	278, 56, 133, 2, 2, -352, 2, 215, 133, 2,
	133, 2, 133, 2, 133, 2, 133, 2, 2, 239,
	278, 2, 130, 2, 318, 2, 2, 133, 2, 168,
	238, 294, 2, 303, 343, 2, 133, 133, 353, 2,
	-198, -273, 303, 353, 22, -171, -172, -219, -196, 130,
	-216, -217, 186, 118, 213, -200, 22, 100, -200, -200,
	45, 377, 377, -104, 281, 2, 10, 11, 58, 34,
	367, 368, 369, 370, 128, 371, 372, 365, 366, 364,
	357, 358, 361, 290, 23, 71, 360, 359, 64, 192,
	267, 119, 120, 121, 122, 252, 13, 14, 15, 27,
	218, 185, 354, 148, 284, 362, 16, 17, 18, 167,
	37, 149, -145, -153, -242, -242, -242, -242, -242, 224,
	-192, -237, 374, -117, 376, 376, -117, -242, -185, 376,
	7, -117, -251, 374, -260, -242, -193, 376, 5, 376,
	5, -337, 349, 130, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 235, -300, 344, -300, -300, -284, 376,
	-284, -285, 376, -284, 350, 355, 376, -228, -229, -228,
	316, -144, 381, -336, -176, 376, 376, -188, -275, -242,
	369, -188, -185, -242, 75, -203, 171, 200, 134, 182,
	262, 155, 7, -59, -239, 382, 376, 369, -268, 355,
	-117, -272, 376, -271, -148, 376, -127, 253, -126, 21,
	24, 103, 338, 109, 291, 309, -162, 269, -161, 228,
	253, 109, 348, 109, 112, 253, 291, 309, -162, 269,
	253, 109, 382, 112, -310, -149, 381, -305, 369, 295,
	377, -181, -148, -194, 376, -170, 205, -136, -334, 348,
	205, -170, 376, -141, 146, 2, -140, -334, 205, -274,
	-150, -148, -150, 280, -140, 31, -129, 381, 49, 258,
	109, -129, 109, -129, 381, 109, -129, 109, 381, 109,
	-185, 377, 381, -351, -357, 74, 376, 31, -253, -280,
	-281, -283, -292, -286, -290, -291, 41, 47, 46, 173,
	172, 310, 198, 275, 287, 336, 150, 39, 214, 158,
	4, 157, 159, 160, 161, 162, 163, 286, 38, 243,
	126, 127, 125, 102, 93, 92, 210, 43, 42, -294,
	-295, -288, -289, 90, 314, 315, 165, 40, 53, 52,
	341, 297, -311, -351, -304, -185, 31, -229, 2, -361,
	381, 184, -155, 191, 204, 142, 216, 351, -309, 5,
	4, -252, -265, 94, 188, -291, 8, 368, -301, 7,
	367, -303, -302, -303, 78, 378, -305, -183, 22, 282,
	2, -304, -354, 130, -351, -304, -304, -304, -304, -304,
	277, -59, 130, -140, 184, -304, 2, -304, 2, 303,
	152, 303, -129, 381, -148, 65, 66, 353, -219, -196,
	-197, -196, -220, -219, 330, -217, -216, -221, -242, 22,
	-224, 124, 201, -242, -244, -116, -116, -116, -173, -269,
	-242, 237, 152, -304, -298, -280, -297, 248, 249, 247,
	251, 250, -280, -305, 313, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, 185, 148, 284,
	37, 149, -242, 316, -242, -242, -242, -242, 197, 205,
	207, 322, 116, 329, 100, 211, -363, 301, 33, -249,
	-117, 376, -264, 28, 289, 22, -256, 265, 376, -237,
	-242, -238, -186, -185, 377, 381, -186, -255, -251, -263,
	-262, 345, 377, -185, 342, 22, 100, 369, 2, 7,
	-210, 352, 196, 91, 143, 195, -211, 272, -338, 123,
	138, 376, 377, 2, 377, 2, 377, 2, 377, 2,
	-242, -242, -204, 2, -299, -185, 4, 352, 196, 91,
	143, 195, 272, -204, 2, -205, 2, -242, -185, -206,
	-243, -244, 367, 368, 362, 376, 265, -207, 2, -242,
	-186, -242, 44, 180, 317, -208, -242, 133, -185, -242,
	-242, -242, -185, -185, 2, -185, 2, 376, 7, 7,
	313, 313, 7, -144, -332, 31, -175, -185, -178, 381,
	133, 31, 4, -178, 377, 381, 171, 171, -271, -203,
	171, -201, 222, -201, -201, -349, 376, 375, -268, -305,
	374, 383, -186, 2, -267, -266, 31, -140, 220, 377,
	-148, 381, 316, -214, 69, 60, -232, 146, 60, -316,
	-140, 69, -317, 55, 328, 237, 132, -214, 69, -214,
	69, 69, -273, 34, -73, 112, 133, -305, 316, -273,
	229, -310, 67, 316, 34, -73, 112, 133, 316, -151,
	-305, 67, -277, 356, -140, 133, 377, 381, -156, -175,
	-157, -140, -233, -232, -318, -319, -316, 152, 328, 117,
	31, 109, 229, 109, 31, 215, 205, -132, 306, 109,
	-234, 346, -225, -73, 376, 94, 31, -225, -189, -190,
	-276, -191, -148, 376, -140, -183, -184, -184, -151, -152,
	-140, -310, -311, 377, -59, -278, 316, 335, -157, -58,
	24, 74, 103, 377, 381, -177, 30, 374, -210, 376,
	-277, 133, 359, 316, 377, 319, -230, -154, 242, 288,
	254, 276, 8, 7, 7, 381, -305, -353, -140, 277,
	-59, -148, -151, -148, -273, 348, 130, 66, -197, -220,
	-222, -301, 376, 368, -223, 265, 266, 381, -125, 32,
	98, 174, -148, 353, -242, -242, 316, -363, 301, -249,
	-242, 197, 207, 322, 116, 329, 100, 211, 133, 376,
	-243, -243, -185, -242, 376, -185, 375, 385, 377, -242,
	375, 375, 381, -261, -262, 104, -242, -172, 381, -171,
	-242, -185, -185, 377, 377, 316, 316, 316, 316, 376,
	-343, 223, 376, 376, -242, 31, 381, 377, 133, 377,
	377, -212, 231, 377, 10, 11, 367, 368, 369, 370,
	128, 371, 372, 365, 366, 364, 357, 358, 359, 64,
	192, 267, 13, 14, 15, 167, 149, -243, -243, -243,
	-185, 376, 377, -247, -248, 133, 130, 31, -208, -208,
	-208, 377, 133, -185, 381, 381, 381, 377, 377, 377,
	7, 377, 381, 377, 353, 353, 377, 376, 377, 377,
	-234, -275, -180, 2, -271, -305, -234, -242, -271, -271,
	-202, 335, 215, 171, -271, -266, 377, -350, 7, -268,
	-267, 7, -241, -240, 131, 203, 377, -140, 376, -268,
	377, -126, -148, -140, -140, 205, -232, 146, -131, 205,
	-280, -140, 376, 376, 174, 174, -140, -140, 146, -140,
	146, -140, -140, -127, 253, -73, 67, 376, -148, 253,
	-310, 348, 353, -140, -73, 67, 376, -305, 253, 353,
	-110, 145, 211, 295, 133, -148, 377, 377, 381, -141,
	152, -141, -73, -183, -310, -310, -73, -148, 109, -133,
	105, -362, 359, -140, -218, -216, -242, -199, -227, 260,
	215, -181, 340, -140, -199, -179, 381, 133, 359, -181,
	-129, -129, -129, -129, -353, -310, 377, -280, 374, 375,
	7, 7, -113, 348, -353, -302, -302, -137, 326, 63,
	242, -302, 381, 217, 241, 88, 303, 152, -223, -242,
	-269, -148, 382, -242, -242, -243, -243, 133, 376, -242,
	-253, 27, 27, 377, -186, 381, -238, -242, 377, -251,
	106, -242, 312, 377, 342, -172, -172, -172, 5, 196,
	143, 195, -211, 195, -211, -211, 7, -344, -140, 376,
	346, -171, 377, -298, -280, -242, -247, -242, -298, -280,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, 100,
	205, 211, -243, 381, -186, -248, -247, -242, -242, -280,
	377, 377, 377, -185, -242, -242, -242, 377, 7, -58,
	-195, 138, -277, 381, -195, -202, 376, -242, -271, 375,
	377, 381, -267, 375, 381, 384, 359, -268, 376, -175,
	-266, 316, 316, 109, 205, 337, -320, -317, -242, -174,
	-270, -140, -331, 376, -328, -329, -146, 376, 376, -124,
	103, 280, -215, 109, -129, 109, -129, 316, -214, 69,
	353, -185, 316, 229, -245, -146, -140, 353, -185, 316,
	-245, -113, 133, 302, 295, -158, 151, -233, 376, -141,
	376, 376, -170, -136, 376, -140, -134, 179, -362, -308,
	-334, -199, -199, -188, 206, 68, 377, -234, -190, -180,
	-242, 377, -114, 76, -114, 7, 375, 377, -112, 217,
	-111, -140, 5, -140, -35, -36, 152, -305, -140, -148,
	-151, 216, 377, -125, -305, 27, 27, -242, -253, 377,
	-242, -242, 377, -242, 375, -242, 5, -242, 377, 377,
	377, 377, -345, -140, -242, 377, 377, 377, -248, 133,
	100, 211, 376, -242, 377, 377, 381, 377, 377, 377,
	377, -250, 140, 45, -271, -250, -175, -239, 7, -240,
	-305, 374, -267, -175, 377, -140, -140, -232, 109, -321,
	69, -322, 58, 117, 74, 205, 207, 328, 237, 55,
	94, 246, 377, 377, 381, -147, -193, 58, -147, -242,
	376, -174, -175, 205, 94, 205, 94, 87, 324, -140,
	-140, -148, -140, -140, -245, 377, -148, -310, 376, -245,
	377, -305, -311, 313, -159, -160, 228, 149, -174, 376,
	-175, -156, 31, -174, 215, -135, 178, -362, -308, -132,
	-226, 376, 215, -73, -199, 359, 87, 87, 375, 381,
	376, 359, 359, 381, 22, 376, -162, -162, -125, -242,
	-242, 377, 377, -172, -339, 228, 377, -243, 133, 376,
	-253, 377, -242, -340, 347, -242, -185, -340, 377, -268,
	7, 377, -232, -140, -305, -140, 117, 146, 207, 174,
	376, -243, -148, -231, -358, 73, 299, -270, -125, -305,
	-125, 377, -185, 377, 377, 207, 207, -242, -280, -129,
	-129, 316, 316, 316, -185, 316, -245, 45, 226, 377,
	-174, 377, 377, -73, 377, -148, -362, -308, -133, 101,
	-175, 69, -249, 376, 376, -111, -112, -310, -310, -36,
	-175, 377, -172, 45, -243, -253, 377, 377, -341, -342,
	-140, -267, 375, -322, -141, 205, -242, -142, 376, -158,
	376, -147, -172, 246, -128, 58, -140, -140, 376, -172,
	376, 187, 241, -148, -231, 377, -158, -231, 376, -308,
	-134, 330, 206, 377, -140, -311, -311, 377, 377, -346,
	241, 266, -185, 377, 381, 31, 109, 377, -323, 193,
	-140, -175, -125, 377, -148, -123, 335, -305, -185, 377,
	-185, 376, 376, 376, -158, -231, -158, -174, -135, 280,
	-234, 377, 377, 377, -347, -348, 37, 325, 78, -242,
	-347, -342, -344, 117, -324, -327, -326, 215, 134, 227,
	285, 377, 377, -170, -242, 377, 377, -175, -175, -175,
	-158, 377, -189, -113, -113, -348, 234, 129, 265, 234,
	129, -140, -326, 215, -327, 215, 330, 97, -323, 377,
	377, 377, -231, -234, 27, -325, 202, 258, 49, 280,
	-325, -324, 376, 376, -130, 49, 258, -158, -348, 20,
	207, 94, -163, -161, -164, -161, 377, 340, 377, 340,
	-165, 376, 183, 381, -160, -159, -166, -167, -242, 194,
	311, -163, 376, 381, 377, 381, 376, -166, -163, -167,
	-166, 377, 377, 381, -160, -159, -164, 381, -164,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 0, 166, 168, -2, 0, 0, 0,
	189, 190, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 694, -2, 0, 301, 303, 312, 314,
	316, 318, 319, 0, 369, 371, 373, 375, 377, 379,
	381, 383, 385, 387, 389, 391, 393, 395, 397, 398,
	400, 402, 404, 0, 616, 618, 620, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	732, 193, 195, 197, 199, -2, 743, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 87, 75, 79, 80, 82,
	0, 0, 709, 711, 713, 715, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 132, 285,
	0, 1314, 1238, 1244, 1245, 1269, 1270, 1271, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	158, 160, 161, 0, 0, 0, 1240, 1314, 167, 169,
	0, 0, 0, 0, 0, 581, 276, 1376, 278, 280,
	0, 0, 0, 0, 183, 184, 185, 186, 187, 188,
	191, 192, 0, 0, 0, 0, 0, 275, 273, 222,
	223, 0, 258, 259, 260, 261, 262, 264, 226, 228,
	230, 231, 233, 235, 237, 239, 241, 243, 244, 246,
	248, 249, 251, 253, 254, 256, 582, 0, 0, 0,
	0, 0, 282, 288, 289, 290, 292, 293, 294, 295,
	296, 297, 298, 0, 138, 0, 482, 271, 269, 0,
	134, 0, 613, 0, 284, 614, 615, 610, 611, 1403,
	639, 302, 304, 313, 315, 317, -2, -2, 1497, -2,
	333, -2, 341, 1503, 0, 344, 345, 348, -2, 218,
	370, 372, 374, 376, 378, 380, 382, 384, 386, 388,
	390, 392, 394, 396, 399, 401, 403, 405, 406, 0,
	0, 0, 410, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 409, 411, 412, 413, 0, 617, 619,
	621, 0, 570, 734, 60, 62, 64, 66, 0, 0,
	171, 173, 175, 177, 180, -2, 707, 708, 194, 196,
	198, 200, -2, 0, 738, 738, 738, 0, 0, 708,
	706, 0, 305, 0, 307, 0, 410, 310, 311, 349,
	350, 944, 0, 0, 0, 0, 0, 0, 1017, 1047,
	1049, 1468, 1497, 0, 1051, 1052, 0, 1054, 1056, 1057,
	0, 1060, 1061, 1213, 1240, 1254, 1255, 1256, 1257, 0,
	0, 1260, 0, 1262, 1263, 1264, 1115, 1071, -2, -2,
	1252, 872, 873, 874, 875, -2, 1511, 1075, 1078, 1081,
	1084, 1085, 1088, 1089, 0, 1452, 1469, 1470, 1493, 1494,
	1502, 1506, 1507, 1476, 1490, 1477, 1464, 1474, 1488, 1320,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1278, 906, 907, 912, 913,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 915, 641, 623, 632, 641,
	625, 626, 627, 628, 629, 630, 631, 634, 0, 724,
	1382, 727, 1251, 725, 710, 712, 0, 714, 0, 0,
	718, 740, 739, 0, 779, 722, 723, 733, 794, 832,
	809, 800, 0, 0, 2, 74, 0, 1476, -2, 76,
	0, 1476, 832, 78, 0, 1476, 139, 140, 367, 368,
	1279, 1280, 1281, 1282, 1511, 81, 0, 88, 502, 1476,
	1243, 0, 1283, 1284, 1285, 1286, 1287, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 0, 0,
	286, 287, 1248, 1246, 1247, 0, 162, 163, 164, 165,
	0, 0, 1241, 1222, 1220, 1221, 178, 549, 1476, -2,
	1476, 573, 549, 577, -2, 731, 1476, 655, 277, 279,
	0, 182, 0, 668, 0, 670, 0, 685, 838, 124,
	1476, 203, 216, 124, 1476, 206, 124, 1476, 209, 1236,
	124, 1476, 212, 213, 1476, 215, 141, 272, 0, 0,
	-2, 265, 267, -2, 263, 227, 229, 232, 234, 236,
	238, 240, 242, 245, 247, 250, 252, 255, 257, -2,
	0, 0, 0, 481, 0, 0, 0, 612, 0, 638,
	320, 0, 330, 0, 332, 1463, -2, -2, 336, 642,
	646, 647, 648, 0, 0, 0, 0, 0, 0, 0,
	346, 219, 0, 407, 408, 416, 417, 0, 420, 441,
	453, 0, 0, 424, 426, 480, 428, 0, 0, 430,
	0, 432, 0, 434, 0, 436, 0, 438, 440, 442,
	454, 444, 733, 446, 0, 448, 452, 0, 457, 0,
	459, 460, 461, 0, 0, 467, 0, 0, 414, 415,
	124, 836, 0, 0, 0, -2, 0, 751, 776, 0,
	754, 755, 0, 0, 0, 0, 736, 737, 0, 0,
	0, 696, 697, 306, 0, 309, 0, 0, 0, 0,
	1148, 1149, 1150, 1151, 1152, 1153, 1156, 1157, 1154, 1155,
	1158, 1159, 0, 0, 0, 0, 0, 1160, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 1162, 1163, 0,
	0, 1165, 0, 1167, 0, 0, 0, 0, 0, 0,
	1227, 0, 0, 1164, 949, 950, 951, 983, 984, 0,
	1048, 1224, 1217, 1050, 0, 1170, -2, 1171, 0, 0,
	1053, 1058, 1059, 1170, 0, 1212, -2, 0, 1259, 0,
	941, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1193, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 909, 920, 917, 916, 893, 0,
	892, 890, 0, 894, 0, 0, 0, 622, -2, 624,
	0, 636, 0, 726, 0, 0, 0, 783, 1228, 1232,
	1233, 783, 0, 1171, 0, 0, 0, 0, 829, 829,
	829, 827, 803, 0, 809, 0, -2, 833, 821, 0,
	-2, 800, 0, 0, 834, 0, 89, 607, 103, 0,
	607, 607, 0, 0, 0, 0, 0, 99, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 823, 1239, 0, 1218, 1219, 154,
	0, 0, 1234, 1223, 488, 0, 0, 571, 0, 730,
	0, 0, 0, 0, 1476, 580, 1272, 657, 0, 842,
	0, 671, 0, 0, 839, 0, 201, 0, 122, 123,
	0, 204, 0, 207, 0, 0, 210, 0, 0, 0,
	0, 733, 0, 0, 291, 0, 0, 733, 0, 1173,
	850, 851, 852, 853, 854, 941, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 903, 0, 878, 878, 878, 895, 896, 904,
	905, 910, 911, 922, 923, 925, 927, 921, 921, 921,
	918, 919, 823, 0, 0, 0, 0, -2, 338, 0,
	644, 0, 649, 358, 359, 360, 651, 652, 342, 361,
	362, 363, 364, 365, 366, 0, 566, 0, 568, 1265,
	0, 339, 351, 340, 343, 0, 220, 418, 419, 421,
	422, 423, 427, 0, 477, 429, 431, 433, 435, 437,
	445, 449, 733, 455, 458, 462, 463, 464, 465, 0,
	0, 0, 569, 0, 322, 0, 472, 0, 751, 776,
	700, 750, 701, 775, 777, 752, 753, 758, 762, 763,
	766, 769, 770, 760, 944, 719, 720, 721, 744, 745,
	592, 0, 0, 308, 945, 846, 847, 897, 898, 899,
	900, 901, 946, 947, 0, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, -2, -2, -2, -2, -2,
	-2, -2, -2, 970, 971, 972, 973, 974, 975, 976,
	977, -2, -2, -2, 981, 982, -2, 1166, 1168, 0,
	1227, 0, -2, 0, -2, -2, -2, -2, 995, 0,
	997, 1000, 1002, 1004, 0, 0, 0, 0, 1226, 1014,
	1204, 0, 0, 1145, 1146, 1147, 999, 0, 0, 1225,
	1216, 0, 0, 1169, 1055, 0, 0, 0, 1177, 1211,
	1207, 0, 1062, 743, 0, 0, 0, 0, 1069, 0,
	1268, 928, 929, 930, 931, 932, 933, 942, 1125, 0,
	0, 0, 1076, 1077, 1079, 1080, 1082, 1083, 1086, 1087,
	0, 0, 0, 1093, 0, 1180, -2, -2, -2, -2,
	-2, -2, -2, 0, 1095, 0, 1097, 1171, 1190, 0,
	0, 1018, 0, 0, 0, 0, 1497, 0, 1100, 1171,
	1198, 0, 0, 0, 0, 0, 1171, 0, 1203, 0,
	0, 0, 0, 0, 1111, 0, 1113, 0, 0, 0,
	0, 0, 0, 635, 728, 0, 0, 0, 842, 0,
	0, 0, 1231, 842, 778, 0, 0, 0, 0, 0,
	0, 824, 828, 825, 826, 0, 0, 809, 821, 791,
	0, 0, 0, 798, 799, 820, 0, 819, 808, -2,
	0, 0, 0, 0, 0, 606, 105, 1476, 0, 126,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 500, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	1242, 0, 144, 0, 1249, 0, 0, 0, 0, 0,
	487, 1248, 489, 491, 492, 493, 494, 1273, 0, 1273,
	0, 0, 0, 0, 0, 0, 0, 659, 665, 0,
	757, 0, 683, 673, 0, 0, 0, 683, 687, 688,
	690, 691, 0, 0, 840, 217, 124, 124, 1237, 124,
	124, 142, 214, 274, 224, 266, 0, 0, 0, 268,
	0, 0, 0, 270, 0, 843, 845, 0, 855, 0,
	153, 0, 0, 0, 331, 0, 643, 650, 0, 355,
	0, 357, 567, 1267, 1266, 0, 221, 479, 299, 447,
	450, 474, 475, 476, 837, 0, 0, 473, 704, 705,
	0, 764, 0, 0, 761, 767, 768, 0, 747, 590,
	591, 0, 0, 0, -2, -2, 0, 0, 0, 1015,
	-2, 996, 998, 1001, 1003, 1005, 0, 0, 0, 0,
	0, 0, 0, 1016, 1170, 0, 1214, 1217, -2, 1172,
	1175, 1176, 0, 0, 1208, 0, 0, 0, 0, 742,
	743, 743, 743, 1068, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 1092, 0, 1094,
	1096, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 1022, 1023,
	0, 1170, 1099, 1196, 1197, 0, 0, 0, 0, 0,
	0, 1105, 0, 1202, 0, 0, 0, 1109, 1110, 1112,
	0, 876, 0, 902, 924, 926, 914, 733, 1250, 780,
	772, 1229, 823, 782, 784, 1230, 772, 1172, 811, 0,
	813, 0, 0, 0, 815, 0, 804, 0, 806, 821,
	796, 0, 0, 789, 0, 788, 809, 817, 0, 0,
	835, 104, 596, 0, 0, 0, 107, 1476, 115, 0,
	521, 0, 0, 0, 0, 0, 609, 116, 1476, 124,
	1476, 124, 117, 90, 607, 91, 0, 0, 602, 0,
	594, 0, 0, 593, 92, 0, 0, 604, 0, 0,
	153, 0, 0, 155, 0, 1235, 496, 548, 0, 0,
	1273, 0, 485, 549, 574, -2, 576, 0, 0, 661,
	665, 0, 664, 731, 683, 756, 841, 666, 683, 0,
	0, 0, 675, 672, 669, 842, 0, 0, 0, 0,
	202, 205, 208, 211, 281, 0, 0, 1174, 0, 848,
	0, 0, 133, 0, 283, 328, 329, 334, 353, 354,
	356, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 592, 0, 948, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1205, 0, 0, 0, 1216, -2, 1178,
	1206, 1210, 0, 1063, 0, 0, 0, 0, 1261, 934,
	935, 936, 937, 938, 939, 940, 0, 1123, 1124, 1128,
	0, 0, 1074, 0, 0, 1179, 1189, 1191, 1019, 1020,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	-2, -2, -2, 1037, 1038, 1039, -2, -2, -2, 0,
	0, 0, 1192, 0, 0, 1194, 1195, 1199, 1200, 0,
	1102, 1103, 1104, 1201, 0, 0, 0, 908, 0, 0,
	774, 0, 781, 0, 774, 812, 0, 831, 814, 794,
	805, 0, 802, 792, 0, 793, 0, 821, 0, 0,
	801, 0, 0, 0, 0, 125, 519, 538, 0, 0,
	583, 589, 589, 0, 1072, 1073, 0, 0, 0, 109,
	0, 0, 0, 0, 113, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	95, 131, 0, 0, 156, 504, 0, 490, 0, 0,
	0, 488, 0, 572, 0, 0, 663, 665, 0, 656,
	657, 181, 667, 681, 682, 680, 0, 683, 689, 686,
	692, 0, 0, 135, 0, 0, 849, 856, 151, 1366,
	149, 146, 148, 300, 323, 324, 0, 468, 469, 502,
	502, 759, 765, 748, 592, 0, 0, -2, 0, 1008,
	-2, -2, 1141, 1172, 1215, 1209, 1258, 743, 1064, 1066,
	1067, 943, 1130, 1127, 0, 1114, 1090, 1091, 1188, 0,
	0, 0, 0, 1172, 1143, 1101, 0, 1107, 1108, 877,
	729, 1119, 0, 0, 785, 1119, 0, 809, 807, 790,
	786, 0, 797, 0, 818, 598, 600, 106, 0, 520,
	0, 523, 0, 0, 0, 0, 529, 530, 0, 0,
	0, 0, 540, 547, 0, 592, 1253, 0, 592, 0,
	0, 0, 0, 0, 121, 0, 0, 608, 0, 124,
	124, 597, 0, 0, 97, 0, 603, 595, 0, 98,
	0, 605, 143, 0, 483, 503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 665, 0, 658, 659,
	0, 0, 0, 674, 684, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 326, 0, 470, 471, 749, -2,
	-2, 1009, 1142, 0, 743, 0, 1116, -2, 0, 0,
	0, 1144, 0, 716, 0, 773, 771, 717, 830, 821,
	0, 816, 108, 0, 524, 525, 1273, 0, 528, 531,
	0, 533, 1275, 496, 0, 544, 545, 584, 585, 588,
	586, 589, 743, 542, 0, 110, 111, 120, 128, 112,
	118, 0, 0, 0, 743, 0, 822, 0, 0, 547,
	0, 537, 496, 486, 547, 0, 0, 660, 661, 0,
	0, 0, 693, 0, 0, 150, 0, 145, 147, 325,
	0, 1065, 1133, 0, -2, 0, 1045, 1106, 1118, 1120,
	0, 795, 787, 522, 526, 0, 0, 553, 0, 541,
	0, 592, 0, 0, 130, 0, 599, 601, 0, 0,
	0, 0, 0, 0, 496, 547, 484, 496, 0, 662,
	663, 0, 677, 842, 679, 0, 0, 152, 327, 0,
	0, 0, 1129, 1046, 0, 0, 0, 532, 558, 0,
	0, 0, 587, 1063, 549, 114, 0, 127, 0, 0,
	0, 0, 0, 0, 535, 496, 578, 0, 654, 0,
	678, 153, 153, 1126, 1131, 1134, -2, 1436, 1311, 0,
	1132, 1121, 1122, 0, 534, 554, 555, 0, 550, 551,
	552, 1274, 546, 553, 129, 100, 102, 0, 0, 0,
	536, 547, 842, 136, 137, 0, 1136, 1137, 1138, 1139,
	1140, 527, 556, 0, 557, 0, 0, 0, 558, 0,
	0, 499, 496, 676, 0, 559, 0, 562, 563, 0,
	560, 543, 0, 0, 495, 497, 498, 579, 1135, 561,
	564, 565, 0, 0, 0, 0, 505, 0, 506, 0,
	504, 0, 0, 0, 503, 509, 0, 512, 514, -2,
	0, 507, 0, 0, 510, 0, 0, 0, 508, 513,
	0, 511, 504, 0, 503, 518, 516, 0, 517,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1110
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1131
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1140
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					Table:     TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition: Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1152
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					Table:     sqlDollar[3].union.tableWithIdx(),
					Partition: Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1247
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1324
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			return unimplemented(sqllex, "set local")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2084
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			return unimplemented(sqllex, "set from current")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = Low
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = Normal
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = High
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = "client_encoding"
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2459
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2535
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2546
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2561
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2565
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2569
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				Table:     TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition: Name(sqlDollar[8].str),
			}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2576
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				Table:     sqlDollar[7].union.tableWithIdx(),
				Partition: Name(sqlDollar[8].str),
			}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2583
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2587
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2593
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2597
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2601
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = DropDefault
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.str = ""
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			return unimplemented(sqllex, "match full")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			return unimplemented(sqllex, "match partial")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			return unimplemented(sqllex, "match simple")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = NoAction
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = Restrict
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = Cascade
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = SetNull
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = SetDefault
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3165
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = nil
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3245
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = true
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = false
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3280
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = Ascending
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = Descending
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3333
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = true
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = false
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3367
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3404
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = ""
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3527
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = ReadOnly
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = ReadWrite
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.str = ""
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.str = ""
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.str = ""
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.str = ""
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3635
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3659
		{
			return helpWith(sqllex, "INSERT")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 684:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3757
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3758
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			return helpWith(sqllex, "SELECT")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			return helpWith(sqllex, "VALUES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			return helpWith(sqllex, "TABLE")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			return helpWith(sqllex, "SELECT")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			return helpWith(sqllex, "TABLE")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4033
		{
			return unimplemented(sqllex, "cte")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4041
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4044
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = false
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4147
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = false
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = true
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			return helpWith(sqllex, "VALUES")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4277
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4292
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &From{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4314
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4359
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4396
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = nil
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = true
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = false
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.str = astFullJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.str = astLeftJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.str = astRightJoin
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.str = astInnerJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4580
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4666
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4680
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4688
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4723
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = jsonbColType
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = jsonColType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4821
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4886
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4982
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5014
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5054
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = year
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = month
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = day
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = hour
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = minute
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = month
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = hour
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = minute
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = minute
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = nil
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = second
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5149
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5184
		{
			return unimplemented(sqllex, "at tz")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5458
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5635
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5688
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5689
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5702
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5713
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5734
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5743
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5752
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			return unimplemented(sqllex, "current role")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5797
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5812
		{
			return unimplemented(sqllex, "treat")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5849
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5854
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5858
		{
			return unimplemented(sqllex, "within group")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5859
		{
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5894
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.str = ""
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5956
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5957
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5958
		{
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5962
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5968
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5969
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5970
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5971
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5972
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = Any
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = Some
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = All
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Plus
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Minus
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = Mult
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = Div
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = Mod
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = Bitand
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = Bitor
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = Pow
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = Bitxor
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = LT
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = GT
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = EQ
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = LE
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = GE
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = NE
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = Like
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = NotLike
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = ILike
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = NotILike
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6327
		{
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6328
		{
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6342
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6377
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6441
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6460
		{
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6470
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6496
		{
			return unimplemented(sqllex, "func const")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6505
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6507
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6511
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6515
		{
			sqlVAL.union.val = DNull
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6522
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6532
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6567
		{
			sqlVAL.str = ""
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6573
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6577
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
