// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const HELPTOKEN = 57362
const ACTION = 57363
const ADD = 57364
const ALL = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOIN = 57492
const KEY = 57493
const KEYS = 57494
const LATERAL = 57495
const LC_CTYPE = 57496
const LC_COLLATE = 57497
const LEADING = 57498
const LEAST = 57499
const LEFT = 57500
const LEVEL = 57501
const LIKE = 57502
const LIMIT = 57503
const LOCAL = 57504
const LOCALTIME = 57505
const LOCALTIMESTAMP = 57506
const LOW = 57507
const LSHIFT = 57508
const MATCH = 57509
const MINUTE = 57510
const MONTH = 57511
const NAN = 57512
const NAME = 57513
const NAMES = 57514
const NATURAL = 57515
const NEXT = 57516
const NO = 57517
const NO_INDEX_JOIN = 57518
const NORMAL = 57519
const NOT = 57520
const NOTHING = 57521
const NULL = 57522
const NULLIF = 57523
const NULLS = 57524
const NUMERIC = 57525
const OF = 57526
const OFF = 57527
const OFFSET = 57528
const OID = 57529
const ON = 57530
const ONLY = 57531
const OPTIONS = 57532
const OR = 57533
const ORDER = 57534
const ORDINALITY = 57535
const OUT = 57536
const OUTER = 57537
const OVER = 57538
const OVERLAPS = 57539
const OVERLAY = 57540
const PARENT = 57541
const PARTIAL = 57542
const PARTITION = 57543
const PASSWORD = 57544
const PLACING = 57545
const POSITION = 57546
const PRECEDING = 57547
const PRECISION = 57548
const PREPARE = 57549
const PRIMARY = 57550
const PRIORITY = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSION_USER = 57585
const SET = 57586
const SETTING = 57587
const SETTINGS = 57588
const SHOW = 57589
const SIMILAR = 57590
const SIMPLE = 57591
const SMALLINT = 57592
const SMALLSERIAL = 57593
const SNAPSHOT = 57594
const SOME = 57595
const SPLIT = 57596
const SQL = 57597
const START = 57598
const STATUS = 57599
const STDIN = 57600
const STRICT = 57601
const STRING = 57602
const STORING = 57603
const SUBSTRING = 57604
const SYMMETRIC = 57605
const SYSTEM = 57606
const TABLE = 57607
const TABLES = 57608
const TEMPLATE = 57609
const TESTING_RANGES = 57610
const TESTING_RELOCATE = 57611
const TEXT = 57612
const THEN = 57613
const TIME = 57614
const TIMESTAMP = 57615
const TIMESTAMPTZ = 57616
const TO = 57617
const TRAILING = 57618
const TRANSACTION = 57619
const TREAT = 57620
const TRIM = 57621
const TRUE = 57622
const TRUNCATE = 57623
const TYPE = 57624
const UNBOUNDED = 57625
const UNCOMMITTED = 57626
const UNION = 57627
const UNIQUE = 57628
const UNKNOWN = 57629
const UPDATE = 57630
const UPSERT = 57631
const USER = 57632
const USERS = 57633
const USING = 57634
const UUID = 57635
const VALID = 57636
const VALIDATE = 57637
const VALUE = 57638
const VALUES = 57639
const VARCHAR = 57640
const VARIADIC = 57641
const VIEW = 57642
const VARYING = 57643
const WHEN = 57644
const WHERE = 57645
const WINDOW = 57646
const WITH = 57647
const WITHIN = 57648
const WITHOUT = 57649
const YEAR = 57650
const ZONE = 57651
const NOT_LA = 57652
const WITH_LA = 57653
const AS_LA = 57654
const POSTFIXOP = 57655
const UMINUS = 57656

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"HELPTOKEN",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5810

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 45,
	333, 45,
	-2, 596,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	135, 458,
	-2, 0,
	-1, 50,
	90, 596,
	139, 596,
	288, 596,
	289, 596,
	-2, 0,
	-1, 59,
	100, 572,
	109, 572,
	145, 572,
	161, 572,
	186, 572,
	192, 572,
	285, 572,
	-2, 561,
	-1, 85,
	4, 598,
	21, 598,
	22, 598,
	24, 598,
	29, 598,
	34, 598,
	35, 598,
	36, 598,
	37, 598,
	38, 598,
	39, 598,
	40, 598,
	41, 598,
	42, 598,
	43, 598,
	45, 598,
	46, 598,
	47, 598,
	48, 598,
	51, 598,
	52, 598,
	53, 598,
	55, 598,
	56, 598,
	60, 598,
	61, 598,
	62, 598,
	64, 598,
	66, 598,
	67, 598,
	68, 598,
	71, 598,
	72, 598,
	79, 598,
	80, 598,
	81, 598,
	82, 598,
	83, 598,
	84, 598,
	85, 598,
	86, 598,
	88, 598,
	90, 598,
	94, 598,
	95, 598,
	97, 598,
	101, 598,
	102, 598,
	103, 598,
	104, 598,
	105, 598,
	106, 598,
	110, 598,
	111, 598,
	112, 598,
	114, 598,
	116, 598,
	121, 598,
	122, 598,
	124, 598,
	126, 598,
	127, 598,
	128, 598,
	129, 598,
	130, 598,
	131, 598,
	134, 598,
	136, 598,
	139, 598,
	140, 598,
	141, 598,
	142, 598,
	143, 598,
	144, 598,
	146, 598,
	149, 598,
	151, 598,
	152, 598,
	154, 598,
	155, 598,
	157, 598,
	159, 598,
	162, 598,
	165, 598,
	167, 598,
	168, 598,
	169, 598,
	170, 598,
	171, 598,
	172, 598,
	174, 598,
	175, 598,
	176, 598,
	177, 598,
	181, 598,
	182, 598,
	183, 598,
	184, 598,
	185, 598,
	187, 598,
	189, 598,
	190, 598,
	193, 598,
	194, 598,
	196, 598,
	198, 598,
	199, 598,
	200, 598,
	201, 598,
	202, 598,
	204, 598,
	205, 598,
	206, 598,
	207, 598,
	209, 598,
	210, 598,
	211, 598,
	212, 598,
	213, 598,
	214, 598,
	216, 598,
	217, 598,
	218, 598,
	219, 598,
	220, 598,
	221, 598,
	222, 598,
	223, 598,
	224, 598,
	225, 598,
	226, 598,
	228, 598,
	230, 598,
	231, 598,
	232, 598,
	233, 598,
	235, 598,
	236, 598,
	237, 598,
	238, 598,
	240, 598,
	241, 598,
	242, 598,
	244, 598,
	245, 598,
	246, 598,
	247, 598,
	249, 598,
	250, 598,
	251, 598,
	252, 598,
	254, 598,
	255, 598,
	256, 598,
	257, 598,
	258, 598,
	259, 598,
	260, 598,
	261, 598,
	262, 598,
	264, 598,
	266, 598,
	267, 598,
	268, 598,
	269, 598,
	270, 598,
	272, 598,
	273, 598,
	274, 598,
	277, 598,
	278, 598,
	279, 598,
	281, 598,
	282, 598,
	283, 598,
	284, 598,
	287, 598,
	288, 598,
	289, 598,
	291, 598,
	293, 598,
	294, 598,
	295, 598,
	296, 598,
	297, 598,
	298, 598,
	301, 598,
	306, 598,
	307, 598,
	308, 598,
	309, 598,
	-2, 0,
	-1, 98,
	100, 571,
	109, 571,
	145, 571,
	161, 571,
	186, 571,
	192, 571,
	285, 571,
	-2, 564,
	-1, 101,
	1, 505,
	20, 505,
	149, 505,
	209, 505,
	333, 505,
	-2, 0,
	-1, 103,
	1, 505,
	20, 505,
	333, 505,
	-2, 0,
	-1, 104,
	1, 505,
	20, 505,
	333, 505,
	-2, 0,
	-1, 105,
	1, 509,
	20, 509,
	333, 509,
	-2, 0,
	-1, 109,
	4, 604,
	5, 604,
	6, 604,
	7, 604,
	8, 604,
	9, 604,
	21, 604,
	22, 604,
	24, 604,
	29, 604,
	30, 604,
	34, 604,
	35, 604,
	36, 604,
	37, 604,
	38, 604,
	39, 604,
	40, 604,
	41, 604,
	42, 604,
	43, 604,
	45, 604,
	46, 604,
	47, 604,
	48, 604,
	49, 604,
	50, 604,
	51, 604,
	52, 604,
	53, 604,
	55, 604,
	56, 604,
	58, 604,
	60, 604,
	61, 604,
	62, 604,
	64, 604,
	66, 604,
	67, 604,
	68, 604,
	70, 604,
	71, 604,
	72, 604,
	74, 604,
	75, 604,
	77, 604,
	78, 604,
	79, 604,
	80, 604,
	81, 604,
	82, 604,
	83, 604,
	84, 604,
	85, 604,
	86, 604,
	88, 604,
	90, 604,
	94, 604,
	95, 604,
	97, 604,
	101, 604,
	102, 604,
	103, 604,
	104, 604,
	105, 604,
	106, 604,
	107, 604,
	110, 604,
	111, 604,
	112, 604,
	114, 604,
	116, 604,
	119, 604,
	121, 604,
	122, 604,
	124, 604,
	126, 604,
	127, 604,
	128, 604,
	129, 604,
	130, 604,
	131, 604,
	132, 604,
	134, 604,
	136, 604,
	138, 604,
	139, 604,
	140, 604,
	141, 604,
	142, 604,
	143, 604,
	144, 604,
	146, 604,
	148, 604,
	149, 604,
	150, 604,
	151, 604,
	152, 604,
	154, 604,
	155, 604,
	157, 604,
	158, 604,
	159, 604,
	160, 604,
	162, 604,
	165, 604,
	167, 604,
	168, 604,
	169, 604,
	170, 604,
	171, 604,
	172, 604,
	173, 604,
	174, 604,
	175, 604,
	176, 604,
	177, 604,
	178, 604,
	180, 604,
	181, 604,
	182, 604,
	183, 604,
	184, 604,
	185, 604,
	187, 604,
	190, 604,
	193, 604,
	194, 604,
	195, 604,
	196, 604,
	197, 604,
	198, 604,
	199, 604,
	200, 604,
	201, 604,
	202, 604,
	204, 604,
	205, 604,
	206, 604,
	207, 604,
	209, 604,
	210, 604,
	211, 604,
	212, 604,
	213, 604,
	214, 604,
	216, 604,
	217, 604,
	218, 604,
	219, 604,
	220, 604,
	221, 604,
	222, 604,
	223, 604,
	224, 604,
	225, 604,
	226, 604,
	228, 604,
	229, 604,
	230, 604,
	231, 604,
	232, 604,
	233, 604,
	235, 604,
	236, 604,
	237, 604,
	238, 604,
	240, 604,
	241, 604,
	242, 604,
	243, 604,
	244, 604,
	245, 604,
	246, 604,
	247, 604,
	248, 604,
	249, 604,
	250, 604,
	251, 604,
	252, 604,
	254, 604,
	255, 604,
	256, 604,
	257, 604,
	258, 604,
	259, 604,
	260, 604,
	261, 604,
	262, 604,
	264, 604,
	266, 604,
	267, 604,
	268, 604,
	269, 604,
	270, 604,
	272, 604,
	273, 604,
	274, 604,
	277, 604,
	278, 604,
	279, 604,
	280, 604,
	281, 604,
	282, 604,
	283, 604,
	284, 604,
	287, 604,
	288, 604,
	289, 604,
	290, 604,
	291, 604,
	293, 604,
	294, 604,
	295, 604,
	296, 604,
	297, 604,
	298, 604,
	301, 604,
	306, 604,
	307, 604,
	308, 604,
	309, 604,
	310, 604,
	316, 604,
	321, 604,
	322, 604,
	323, 604,
	330, 604,
	335, 604,
	-2, 0,
	-1, 114,
	1, 45,
	333, 45,
	-2, 596,
	-1, 512,
	118, 1179,
	275, 1179,
	315, 1179,
	332, 1179,
	-2, 0,
	-1, 513,
	118, 1137,
	275, 1137,
	315, 1137,
	332, 1137,
	-2, 0,
	-1, 515,
	118, 1231,
	275, 1231,
	315, 1231,
	332, 1231,
	-2, 0,
	-1, 517,
	118, 1248,
	275, 1248,
	315, 1248,
	332, 1248,
	-2, 0,
	-1, 521,
	1, 296,
	20, 296,
	333, 296,
	-2, 1184,
	-1, 531,
	1, 376,
	20, 376,
	115, 376,
	329, 376,
	333, 376,
	-2, 0,
	-1, 533,
	1, 347,
	20, 347,
	329, 347,
	333, 347,
	-2, 0,
	-1, 539,
	1, 360,
	20, 360,
	329, 360,
	333, 360,
	-2, 0,
	-1, 542,
	1, 370,
	20, 370,
	329, 370,
	333, 370,
	-2, 0,
	-1, 575,
	109, 606,
	161, 606,
	186, 606,
	-2, 567,
	-1, 578,
	109, 605,
	161, 605,
	186, 605,
	-2, 565,
	-1, 654,
	202, 594,
	-2, 451,
	-1, 658,
	188, 1113,
	-2, 0,
	-1, 685,
	1, 172,
	20, 172,
	329, 172,
	333, 172,
	-2, 570,
	-1, 693,
	4, 1315,
	10, 1315,
	11, 1315,
	13, 1315,
	14, 1315,
	15, 1315,
	16, 1315,
	17, 1315,
	18, 1315,
	21, 1315,
	22, 1315,
	24, 1315,
	27, 1315,
	29, 1315,
	31, 1315,
	34, 1315,
	35, 1315,
	36, 1315,
	37, 1315,
	38, 1315,
	39, 1315,
	40, 1315,
	41, 1315,
	42, 1315,
	43, 1315,
	45, 1315,
	46, 1315,
	47, 1315,
	48, 1315,
	51, 1315,
	52, 1315,
	53, 1315,
	55, 1315,
	56, 1315,
	57, 1315,
	60, 1315,
	61, 1315,
	62, 1315,
	63, 1315,
	64, 1315,
	66, 1315,
	67, 1315,
	68, 1315,
	70, 1315,
	71, 1315,
	72, 1315,
	79, 1315,
	80, 1315,
	81, 1315,
	82, 1315,
	83, 1315,
	84, 1315,
	85, 1315,
	86, 1315,
	88, 1315,
	90, 1315,
	94, 1315,
	95, 1315,
	97, 1315,
	101, 1315,
	102, 1315,
	103, 1315,
	104, 1315,
	105, 1315,
	106, 1315,
	110, 1315,
	111, 1315,
	112, 1315,
	113, 1315,
	114, 1315,
	116, 1315,
	119, 1315,
	121, 1315,
	122, 1315,
	124, 1315,
	126, 1315,
	127, 1315,
	128, 1315,
	129, 1315,
	130, 1315,
	131, 1315,
	132, 1315,
	133, 1315,
	134, 1315,
	136, 1315,
	138, 1315,
	139, 1315,
	140, 1315,
	141, 1315,
	142, 1315,
	143, 1315,
	144, 1315,
	146, 1315,
	148, 1315,
	149, 1315,
	150, 1315,
	151, 1315,
	152, 1315,
	154, 1315,
	155, 1315,
	157, 1315,
	158, 1315,
	159, 1315,
	160, 1315,
	162, 1315,
	165, 1315,
	166, 1315,
	167, 1315,
	168, 1315,
	169, 1315,
	170, 1315,
	171, 1315,
	172, 1315,
	173, 1315,
	174, 1315,
	175, 1315,
	176, 1315,
	177, 1315,
	181, 1315,
	182, 1315,
	183, 1315,
	184, 1315,
	185, 1315,
	187, 1315,
	190, 1315,
	191, 1315,
	193, 1315,
	194, 1315,
	196, 1315,
	198, 1315,
	199, 1315,
	200, 1315,
	201, 1315,
	202, 1315,
	204, 1315,
	205, 1315,
	206, 1315,
	207, 1315,
	209, 1315,
	210, 1315,
	211, 1315,
	212, 1315,
	213, 1315,
	214, 1315,
	216, 1315,
	217, 1315,
	218, 1315,
	219, 1315,
	220, 1315,
	221, 1315,
	222, 1315,
	223, 1315,
	224, 1315,
	225, 1315,
	226, 1315,
	228, 1315,
	229, 1315,
	230, 1315,
	231, 1315,
	232, 1315,
	233, 1315,
	234, 1315,
	235, 1315,
	236, 1315,
	237, 1315,
	238, 1315,
	240, 1315,
	241, 1315,
	242, 1315,
	244, 1315,
	245, 1315,
	246, 1315,
	247, 1315,
	248, 1315,
	249, 1315,
	250, 1315,
	251, 1315,
	252, 1315,
	254, 1315,
	255, 1315,
	256, 1315,
	257, 1315,
	258, 1315,
	259, 1315,
	260, 1315,
	261, 1315,
	262, 1315,
	264, 1315,
	266, 1315,
	267, 1315,
	268, 1315,
	269, 1315,
	270, 1315,
	272, 1315,
	273, 1315,
	274, 1315,
	277, 1315,
	278, 1315,
	279, 1315,
	281, 1315,
	282, 1315,
	283, 1315,
	284, 1315,
	287, 1315,
	288, 1315,
	289, 1315,
	291, 1315,
	293, 1315,
	294, 1315,
	295, 1315,
	296, 1315,
	297, 1315,
	298, 1315,
	301, 1315,
	306, 1315,
	307, 1315,
	308, 1315,
	309, 1315,
	310, 1315,
	311, 1315,
	313, 1315,
	314, 1315,
	315, 1315,
	316, 1315,
	318, 1315,
	319, 1315,
	320, 1315,
	321, 1315,
	322, 1315,
	323, 1315,
	324, 1315,
	325, 1315,
	326, 1315,
	328, 1315,
	331, 1315,
	332, 1315,
	334, 1315,
	335, 1315,
	-2, 0,
	-1, 713,
	118, 1248,
	275, 1248,
	315, 1248,
	332, 1248,
	-2, 0,
	-1, 773,
	109, 605,
	161, 605,
	186, 605,
	-2, 568,
	-1, 839,
	330, 1116,
	-2, 1109,
	-1, 840,
	330, 1117,
	-2, 1110,
	-1, 846,
	5, 776,
	330, 776,
	-2, 1293,
	-1, 870,
	5, 737,
	-2, 1267,
	-1, 871,
	5, 770,
	330, 770,
	-2, 1269,
	-1, 872,
	5, 745,
	-2, 1270,
	-1, 873,
	5, 744,
	-2, 1271,
	-1, 874,
	5, 770,
	330, 770,
	-2, 1274,
	-1, 875,
	5, 770,
	330, 770,
	-2, 1275,
	-1, 876,
	5, 771,
	-2, 1278,
	-1, 877,
	5, 731,
	-2, 1279,
	-1, 878,
	5, 731,
	-2, 1280,
	-1, 879,
	5, 752,
	-2, 1284,
	-1, 880,
	5, 732,
	-2, 1289,
	-1, 881,
	5, 733,
	-2, 1290,
	-1, 882,
	5, 734,
	-2, 1291,
	-1, 883,
	5, 735,
	-2, 1292,
	-1, 884,
	5, 731,
	-2, 1297,
	-1, 885,
	5, 738,
	-2, 1302,
	-1, 886,
	5, 736,
	-2, 1305,
	-1, 887,
	5, 768,
	330, 768,
	-2, 1307,
	-1, 888,
	5, 772,
	-2, 1310,
	-1, 889,
	5, 774,
	-2, 1311,
	-1, 890,
	5, 767,
	330, 767,
	-2, 1316,
	-1, 1167,
	100, 572,
	109, 572,
	145, 572,
	161, 572,
	186, 572,
	192, 572,
	285, 572,
	-2, 895,
	-1, 1177,
	330, 1093,
	-2, 1081,
	-1, 1193,
	331, 1033,
	-2, 0,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 811,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 812,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 813,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 817,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 818,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 819,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 824,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 826,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 830,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 831,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 832,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 833,
	-1, 1445,
	197, 975,
	-2, 978,
	-1, 1478,
	118, 1015,
	330, 1116,
	-2, 1109,
	-1, 1479,
	118, 1016,
	-2, 1263,
	-1, 1480,
	118, 1017,
	-2, 1183,
	-1, 1481,
	118, 1018,
	-2, 1151,
	-1, 1482,
	118, 1019,
	-2, 1167,
	-1, 1483,
	118, 1020,
	-2, 1182,
	-1, 1484,
	118, 1021,
	-2, 1229,
	-1, 1645,
	90, 596,
	139, 596,
	288, 596,
	289, 596,
	-2, 0,
	-1, 1652,
	100, 572,
	109, 572,
	145, 572,
	161, 572,
	186, 572,
	192, 572,
	285, 572,
	-2, 666,
	-1, 1657,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 825,
	-1, 1658,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 827,
	-1, 1663,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 828,
	-1, 1681,
	197, 974,
	-2, 977,
	-1, 1875,
	1, 667,
	20, 667,
	70, 667,
	100, 667,
	109, 667,
	119, 667,
	123, 667,
	125, 667,
	138, 667,
	145, 667,
	150, 667,
	158, 667,
	161, 667,
	173, 667,
	186, 667,
	188, 667,
	192, 667,
	227, 667,
	229, 667,
	285, 667,
	292, 667,
	303, 667,
	304, 667,
	312, 667,
	329, 667,
	331, 667,
	333, 667,
	334, 667,
	-2, 666,
	-1, 1877,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 829,
	-1, 1882,
	148, 0,
	-2, 845,
	-1, 1892,
	197, 976,
	-2, 979,
	-1, 1926,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 872,
	-1, 1927,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 873,
	-1, 1928,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 874,
	-1, 1932,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 878,
	-1, 1933,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 879,
	-1, 1934,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 880,
	-1, 2055,
	148, 0,
	-2, 846,
	-1, 2058,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 849,
	-1, 2059,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 851,
	-1, 2165,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 850,
	-1, 2166,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 852,
	-1, 2173,
	148, 0,
	-2, 881,
	-1, 2229,
	148, 0,
	-2, 882,
	-1, 2294,
	37, 0,
	132, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 1266,
}

const sqlPrivate = 57344

const sqlLast = 36865

var sqlAct = [...]int{

	840, 2293, 1804, 2271, 2235, 2318, 2272, 1291, 2273, 1283,
	939, 1870, 2145, 1871, 2099, 1650, 2292, 1903, 1814, 2011,
	973, 2125, 372, 1357, 1977, 2046, 1963, 58, 1263, 579,
	893, 947, 384, 1647, 1582, 149, 149, 149, 587, 97,
	2031, 648, 616, 736, 1742, 1775, 2025, 1584, 686, 816,
	1368, 1375, 386, 149, 149, 149, 1262, 931, 149, 1845,
	1587, 830, 1280, 1267, 1692, 149, 959, 1173, 1443, 1774,
	1741, 1854, 1373, 815, 900, 1637, 1366, 150, 1292, 1231,
	799, 1323, 1564, 1266, 149, 149, 1453, 942, 1222, 97,
	1632, 1507, 810, 1430, 1254, 1427, 381, 23, 734, 378,
	18, 838, 379, 28, 1353, 377, 17, 149, 149, 837,
	341, 380, 9, 1104, 149, 1306, 1053, 1343, 935, 716,
	906, 932, 908, 1474, 1316, 891, 809, 523, 584, 387,
	800, 1162, 1203, 149, 149, 149, 149, 1047, 717, 687,
	1207, 678, 671, 1370, 149, 149, 1285, 1112, 1270, 681,
	1978, 373, 21, 97, 603, 566, 776, 775, 777, 141,
	1051, 1055, 98, 832, 578, 715, 519, 497, 953, 669,
	145, 601, 527, 639, 789, 516, 2158, 388, 1680, 2159,
	961, 961, 1284, 2308, 1320, 2287, 928, 620, 1976, 99,
	781, 583, 1288, 961, 583, 340, 1648, 1510, 2283, 1115,
	1116, 1326, 2282, 1684, 1599, 1326, 626, 620, 1685, 635,
	1114, 23, 2279, 1598, 18, 928, 2269, 28, 2264, 1313,
	17, 928, 2260, 1118, 586, 928, 9, 2231, 1321, 925,
	1313, 1115, 1116, 1326, 1135, 1136, 1137, 1145, 1146, 1147,
	2225, 2211, 2203, 928, 928, 1976, 1117, 2198, 1138, 612,
	2197, 2167, 1132, 2155, 1313, 1118, 971, 619, 1149, 2152,
	576, 2133, 2153, 2213, 1976, 109, 21, 522, 1322, 1319,
	2130, 2128, 2110, 928, 1976, 928, 624, 628, 1117, 605,
	29, 1712, 1713, 2109, 1132, 633, 1976, 575, 1258, 2081,
	2060, 113, 1326, 1326, 2057, 2049, 1998, 1313, 1326, 1326,
	1996, 1683, 1123, 1326, 1712, 1713, 1326, 1730, 1731, 1732,
	1975, 1886, 1828, 1976, 1326, 1261, 1823, 1759, 1635, 1261,
	1760, 2054, 1113, 112, 1939, 37, 1757, 833, 1889, 1326,
	1626, 106, 1756, 1326, 1123, 1326, 1691, 107, 1324, 1755,
	1681, 1220, 1326, 1326, 109, 1255, 149, 149, 149, 1572,
	149, 45, 570, 1142, 1150, 1133, 100, 1727, 962, 962,
	50, 149, 1447, 149, 149, 149, 149, 1635, 1255, 1148,
	113, 962, 690, 1571, 1363, 1329, 928, 928, 1326, 1356,
	1325, 1140, 51, 1326, 1718, 1312, 1260, 1133, 1313, 1261,
	1258, 1218, 970, 1341, 1217, 971, 795, 1107, 1106, 584,
	1031, 1030, 112, 928, 637, 705, 114, 1718, 1318, 643,
	106, 1979, 1139, 1651, 2039, 688, 107, 1063, 1181, 728,
	1598, 2307, 2291, 1134, 2278, 1471, 1113, 109, 2240, 2226,
	1317, 1469, 2131, 788, 620, 1287, 645, 1728, 635, 2086,
	2082, 2074, 1733, 2073, 2072, 2068, 2067, 2066, 2024, 691,
	1954, 1949, 1948, 113, 1947, 1134, 2018, 1897, 1875, 1844,
	1728, 109, 1832, 1574, 1439, 1764, 967, 960, 1761, 1143,
	1749, 1740, 1711, 652, 1708, 656, 945, 1712, 1713, 1088,
	1730, 1731, 1732, 1707, 1705, 112, 1697, 113, 1696, 903,
	674, 674, 149, 647, 1570, 109, 1649, 692, 1527, 788,
	615, 1115, 1116, 65, 670, 1729, 675, 1128, 1126, 1127,
	1119, 1120, 1121, 1122, 1124, 1125, 149, 1048, 100, 112,
	1174, 113, 1165, 2290, 787, 1118, 1905, 106, 1729, 690,
	1727, 1141, 2250, 107, 1129, 1130, 1131, 1144, 2206, 1128,
	1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 1117, 2196,
	2195, 1174, 100, 112, 2194, 2083, 2186, 2184, 2175, 2262,
	1862, 106, 1440, 613, 2162, 2148, 2143, 107, 149, 2096,
	2079, 2051, 149, 149, 2005, 2002, 1982, 1881, 1115, 1116,
	1718, 1859, 29, 1830, 1812, 1810, 100, 1809, 1807, 1723,
	1721, 1722, 1714, 1715, 1716, 1717, 1719, 1720, 2017, 1783,
	1782, 149, 1118, 149, 1123, 774, 691, 1724, 1725, 1726,
	1739, 1701, 1723, 1721, 1722, 1714, 1715, 1716, 1717, 1719,
	1720, 1700, 149, 1677, 2157, 1117, 1672, 37, 1432, 1617,
	1558, 892, 1553, 1728, 1540, 1539, 1519, 690, 149, 1467,
	773, 1362, 974, 1208, 386, 690, 620, 149, 646, 1211,
	733, 1115, 1116, 45, 692, 1215, 898, 1133, 1540, 149,
	1201, 1200, 50, 1199, 149, 1198, 149, 944, 149, 1197,
	1196, 149, 1195, 1194, 1193, 1118, 929, 1192, 1191, 1190,
	1189, 1123, 1188, 1187, 51, 1186, 643, 1185, 1178, 937,
	897, 711, 1166, 1165, 938, 904, 617, 798, 1117, 730,
	710, 1729, 701, 699, 2062, 149, 2040, 149, 2036, 790,
	149, 2023, 790, 2022, 691, 1863, 772, 1712, 1713, 1611,
	936, 387, 691, 1712, 1713, 1134, 690, 690, 791, 386,
	1007, 791, 1610, 1163, 1133, 903, 725, 620, 2037, 954,
	149, 954, 964, 1180, 149, 966, 149, 803, 950, 149,
	576, 149, 2200, 149, 1470, 149, 794, 149, 926, 149,
	1468, 1064, 692, 2160, 149, 149, 724, 792, 1585, 388,
	692, 2021, 784, 785, 796, 1600, 726, 575, 1255, 1213,
	1724, 1725, 1726, 1214, 1651, 1723, 1721, 1722, 1714, 1715,
	1716, 1717, 1719, 1720, 149, 1763, 149, 109, 1762, 149,
	1183, 1656, 1134, 691, 691, 65, 387, 670, 927, 1128,
	1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 768, 943,
	720, 1115, 1116, 113, 1060, 1060, 1718, 1111, 617, 916,
	1565, 1049, 1352, 952, 2026, 1284, 955, 1906, 1087, 770,
	1351, 344, 584, 1454, 1688, 1118, 1204, 914, 763, 1594,
	1770, 692, 692, 2243, 388, 112, 2305, 1115, 1116, 2304,
	1623, 1990, 915, 106, 1021, 597, 1023, 1065, 1117, 107,
	909, 1330, 910, 1022, 2210, 2120, 1024, 1492, 2119, 1029,
	2118, 1118, 1041, 764, 1040, 2117, 595, 1061, 1861, 1119,
	1120, 1121, 1122, 1124, 1125, 1798, 357, 1320, 1796, 1019,
	1712, 1713, 593, 1071, 1117, 1829, 149, 1767, 1026, 591,
	149, 361, 1224, 909, 149, 910, 903, 588, 1794, 149,
	349, 1766, 1232, 725, 1123, 149, 149, 131, 909, 149,
	910, 1659, 1089, 1616, 1091, 1090, 1224, 1615, 1614, 149,
	1613, 1321, 1223, 911, 576, 358, 149, 576, 576, 1108,
	1109, 1414, 1327, 1251, 1247, 1971, 1245, 149, 793, 149,
	1123, 149, 636, 726, 149, 2001, 149, 1125, 149, 149,
	149, 1100, 690, 1225, 1101, 1102, 1177, 1025, 582, 1219,
	845, 1322, 1319, 2209, 1523, 1235, 911, 620, 1972, 1522,
	365, 1385, 620, 1304, 1281, 923, 1085, 1086, 635, 1236,
	1238, 911, 573, 1718, 1801, 1803, 134, 1205, 1206, 97,
	922, 97, 1169, 1072, 1567, 688, 1073, 1429, 1074, 1209,
	1075, 1429, 1076, 581, 1077, 1212, 1257, 980, 920, 895,
	1295, 1081, 1083, 1720, 1714, 1715, 1716, 1717, 1719, 1720,
	933, 635, 635, 921, 364, 1216, 2275, 1436, 1044, 691,
	1454, 1324, 1434, 1785, 2304, 1324, 1067, 1241, 1228, 2256,
	135, 2101, 1246, 759, 386, 956, 2315, 1243, 738, 1551,
	583, 149, 1309, 1249, 1252, 1310, 1234, 2266, 1308, 1967,
	708, 1968, 1622, 1411, 1311, 149, 149, 149, 1298, 149,
	1334, 674, 1588, 674, 360, 359, 1342, 692, 1837, 1624,
	2267, 1336, 1290, 2326, 345, 1286, 1299, 1286, 1300, 1970,
	1302, 1305, 907, 1560, 1644, 149, 1973, 1301, 386, 1555,
	1337, 1318, 1364, 961, 1307, 350, 1084, 2276, 1792, 346,
	719, 1335, 1119, 1120, 1121, 1122, 1124, 1125, 600, 347,
	599, 387, 1209, 912, 1212, 919, 1007, 1007, 1206, 1205,
	1384, 1332, 1221, 386, 1233, 1354, 1355, 1834, 1345, 635,
	1347, 590, 620, 580, 1592, 917, 2189, 2314, 1324, 1331,
	1121, 1122, 1124, 1125, 363, 1028, 2277, 590, 1409, 1412,
	1202, 1712, 1713, 894, 592, 1437, 912, 1969, 1371, 388,
	132, 1276, 590, 584, 2127, 387, 370, 1835, 584, 2321,
	714, 912, 1786, 1588, 2171, 1160, 1408, 1712, 1713, 362,
	760, 1645, 1699, 1716, 1717, 1719, 1720, 1855, 29, 937,
	718, 1425, 149, 149, 149, 133, 1525, 1361, 149, 1874,
	387, 149, 1348, 1350, 583, 1346, 1423, 149, 149, 149,
	149, 149, 1451, 388, 1365, 1360, 149, 1661, 149, 1802,
	741, 1428, 149, 1636, 2102, 1712, 1713, 1842, 2313, 690,
	1007, 2274, 149, 37, 842, 574, 1563, 1324, 2303, 2301,
	761, 2010, 149, 1278, 149, 706, 149, 1435, 388, 149,
	719, 2327, 704, 149, 1718, 780, 2332, 1438, 149, 45,
	149, 1533, 1526, 1441, 1410, 1529, 1007, 149, 50, 1419,
	1068, 962, 1640, 1573, 1935, 1575, 1463, 1420, 1727, 1421,
	1718, 739, 2112, 1426, 1485, 584, 2077, 2111, 762, 1554,
	51, 1643, 718, 709, 2094, 2181, 2319, 1986, 149, 149,
	1769, 1006, 1536, 1638, 498, 1569, 691, 1728, 729, 1532,
	545, 1641, 690, 1528, 1007, 1279, 1590, 718, 951, 1833,
	940, 1596, 1580, 2047, 65, 503, 1639, 2236, 1718, 731,
	499, 936, 1550, 1728, 1444, 1096, 1602, 1603, 1169, 1604,
	936, 2033, 1448, 1079, 1989, 149, 1457, 2320, 779, 2331,
	1566, 1988, 719, 1636, 692, 500, 1032, 1477, 1477, 1490,
	1936, 1502, 2095, 1815, 1552, 2322, 1937, 1514, 1515, 1517,
	1557, 97, 584, 1577, 502, 1729, 1593, 719, 2078, 1422,
	2012, 1728, 1642, 2048, 1036, 1601, 1424, 547, 1985, 691,
	1039, 1038, 1542, 1048, 1045, 1655, 1576, 1541, 1097, 1579,
	778, 1729, 1640, 109, 2034, 1850, 743, 779, 1640, 1849,
	1060, 65, 1627, 980, 980, 1619, 1620, 1653, 1371, 718,
	1621, 1643, 1034, 581, 1628, 780, 666, 1643, 1625, 113,
	584, 1634, 1309, 1638, 1035, 1310, 1646, 692, 1308, 1853,
	1630, 1641, 1987, 142, 1311, 2032, 825, 1641, 1631, 1729,
	664, 650, 649, 658, 1805, 2003, 1639, 1690, 2092, 778,
	1562, 112, 1714, 1715, 1716, 1717, 1719, 1720, 1846, 106,
	1633, 1466, 2174, 1042, 501, 107, 1662, 1660, 757, 2076,
	2093, 146, 146, 342, 1307, 1743, 1721, 1722, 1714, 1715,
	1716, 1717, 1719, 1720, 371, 584, 1676, 755, 1099, 486,
	488, 490, 753, 1880, 508, 1800, 1706, 751, 749, 1687,
	1671, 524, 1642, 747, 744, 662, 1568, 1328, 1642, 1259,
	1250, 1244, 767, 504, 766, 644, 1744, 980, 1184, 1070,
	568, 524, 1013, 1723, 1721, 1722, 1714, 1715, 1716, 1717,
	1719, 1720, 3, 149, 1465, 149, 382, 12, 1043, 546,
	2270, 2233, 149, 604, 604, 690, 383, 11, 1811, 1960,
	342, 375, 10, 980, 1790, 1788, 1746, 1747, 1748, 149,
	149, 667, 1781, 374, 8, 1768, 1808, 1824, 548, 342,
	342, 631, 342, 1789, 1581, 1791, 1765, 638, 1772, 1282,
	146, 640, 1275, 969, 758, 665, 589, 149, 641, 642,
	1675, 1816, 968, 965, 963, 924, 149, 1894, 1678, 149,
	1793, 980, 1780, 756, 1799, 376, 4, 918, 754, 386,
	1779, 149, 1821, 752, 750, 149, 1806, 1694, 1695, 748,
	745, 663, 691, 1864, 913, 1583, 2138, 607, 1860, 1819,
	782, 2305, 1295, 1371, 1818, 1827, 1826, 1825, 1050, 1224,
	979, 1865, 584, 1817, 97, 1239, 1848, 622, 610, 1851,
	722, 12, 2140, 1883, 1240, 1738, 1836, 1838, 1839, 1822,
	149, 11, 1358, 1007, 740, 1655, 10, 1751, 2191, 1371,
	692, 1224, 1371, 1856, 1857, 1852, 1979, 1237, 8, 2228,
	493, 1847, 786, 1899, 1900, 1901, 387, 1653, 1371, 1009,
	594, 596, 1115, 1116, 1007, 1007, 1248, 1049, 1046, 783,
	1242, 1115, 1116, 1007, 1007, 2214, 2008, 1006, 1006, 1890,
	1289, 1795, 1277, 1893, 1274, 1909, 1797, 611, 1376, 1383,
	4, 1359, 2329, 1110, 1914, 1118, 1907, 149, 149, 149,
	1027, 972, 723, 1315, 388, 2330, 1007, 505, 1608, 1117,
	1912, 1607, 1606, 1605, 149, 697, 1942, 696, 1117, 149,
	695, 149, 694, 149, 149, 149, 614, 149, 606, 149,
	564, 690, 1980, 563, 562, 561, 560, 559, 558, 557,
	149, 149, 1984, 1943, 556, 555, 554, 690, 553, 552,
	551, 550, 524, 654, 524, 1956, 660, 549, 511, 510,
	509, 369, 1959, 368, 367, 820, 59, 342, 2006, 524,
	524, 342, 682, 366, 1781, 356, 355, 1868, 354, 353,
	149, 149, 1983, 352, 149, 351, 139, 138, 2000, 137,
	136, 1006, 690, 2013, 130, 149, 1993, 2007, 129, 1781,
	1997, 128, 1537, 149, 1781, 1887, 2043, 2004, 691, 2042,
	127, 2015, 2009, 1008, 1780, 2020, 59, 126, 125, 584,
	124, 2052, 1779, 123, 691, 122, 121, 1006, 120, 119,
	2029, 2030, 2056, 118, 2035, 688, 149, 117, 1537, 1780,
	2041, 116, 1007, 115, 1780, 2014, 2263, 1779, 1712, 1713,
	1115, 1116, 1779, 1371, 1371, 2217, 692, 1371, 1339, 1338,
	2044, 1955, 1840, 577, 1831, 1758, 585, 1940, 1669, 691,
	1493, 1339, 692, 1612, 1524, 1006, 1521, 1520, 1950, 1462,
	59, 1340, 1171, 1667, 2064, 2249, 1609, 2075, 2126, 1902,
	1578, 149, 1181, 149, 976, 386, 149, 1179, 702, 765,
	746, 707, 572, 2100, 149, 2019, 496, 1069, 742, 2038,
	386, 1858, 2265, 2069, 1698, 2144, 2170, 692, 1464, 1182,
	44, 1777, 524, 819, 1961, 1771, 1269, 2090, 1268, 389,
	980, 2104, 1037, 2087, 2106, 841, 1054, 1476, 1377, 896,
	843, 149, 2105, 977, 690, 844, 1664, 978, 149, 1210,
	937, 1007, 2103, 831, 2088, 975, 1665, 149, 1293, 1433,
	1670, 980, 980, 1452, 1686, 149, 1175, 811, 1781, 823,
	980, 980, 387, 149, 769, 2028, 2139, 2098, 524, 342,
	2137, 2121, 149, 149, 2156, 822, 2154, 387, 2115, 2116,
	2135, 1449, 698, 2122, 2141, 2161, 2164, 1781, 2045, 62,
	2151, 2147, 63, 980, 1591, 2129, 2016, 568, 1780, 604,
	2163, 1095, 1349, 1092, 2134, 2150, 1779, 1787, 348, 1709,
	388, 691, 700, 149, 1499, 2169, 979, 979, 342, 1491,
	2176, 1487, 2185, 771, 899, 388, 1161, 1780, 1371, 1294,
	1007, 727, 2136, 1597, 146, 1779, 2179, 1314, 149, 149,
	797, 1103, 609, 342, 2180, 608, 1666, 1264, 149, 721,
	1033, 1333, 2187, 1668, 2204, 949, 690, 1154, 2188, 692,
	342, 149, 342, 2202, 342, 1009, 1009, 957, 2205, 149,
	1151, 598, 2183, 941, 1535, 149, 2208, 2325, 2190, 1784,
	2132, 386, 149, 149, 2242, 111, 2218, 2216, 110, 108,
	2199, 584, 2124, 2223, 1020, 1493, 1493, 2215, 2219, 1561,
	2108, 146, 27, 146, 2220, 149, 524, 149, 81, 82,
	149, 2224, 386, 2221, 97, 80, 2230, 24, 79, 78,
	2227, 77, 76, 75, 74, 2251, 1007, 585, 2253, 980,
	979, 2239, 73, 691, 149, 2238, 524, 149, 2252, 2248,
	146, 2257, 524, 72, 2244, 524, 2258, 524, 2255, 524,
	2261, 524, 2259, 524, 2207, 1078, 71, 70, 387, 69,
	524, 524, 1493, 1493, 1493, 68, 979, 67, 66, 61,
	60, 149, 2280, 22, 20, 2286, 19, 149, 6, 1009,
	26, 692, 25, 2241, 2288, 16, 15, 14, 1781, 387,
	568, 149, 604, 13, 49, 640, 2254, 2284, 2289, 2285,
	2302, 2300, 48, 47, 2298, 2306, 388, 46, 43, 42,
	149, 41, 40, 39, 979, 1009, 2312, 38, 2310, 1008,
	1008, 2311, 2309, 7, 1006, 1673, 1674, 5, 1780, 95,
	2324, 2323, 2328, 92, 94, 91, 1779, 388, 980, 93,
	96, 88, 89, 90, 87, 86, 33, 32, 31, 30,
	1295, 2333, 2, 1, 0, 1006, 1006, 0, 0, 0,
	0, 0, 0, 1009, 1006, 1006, 1376, 1910, 0, 0,
	0, 0, 0, 0, 0, 1376, 1915, 0, 1712, 1713,
	0, 1730, 1731, 1732, 0, 0, 0, 0, 0, 0,
	0, 0, 1735, 1736, 1737, 2053, 0, 1006, 0, 0,
	976, 976, 342, 0, 0, 0, 1229, 0, 1946, 0,
	342, 0, 2245, 2246, 2247, 342, 0, 0, 0, 0,
	0, 342, 1253, 1971, 0, 1256, 1964, 980, 1493, 1493,
	0, 1727, 0, 1008, 1962, 1265, 0, 0, 1966, 0,
	0, 0, 640, 577, 0, 0, 2268, 0, 0, 0,
	0, 0, 0, 342, 0, 1297, 1972, 524, 0, 0,
	524, 0, 524, 0, 342, 342, 1303, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 1965, 0, 0,
	0, 1718, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
	1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
	1493, 0, 1493, 0, 1115, 1116, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 1733, 1008, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 1006, 1728, 0, 0, 0, 0, 0,
	0, 0, 0, 506, 0, 1115, 1116, 1967, 0, 1968,
	976, 1117, 0, 0, 0, 0, 0, 0, 1878, 1879,
	0, 0, 0, 0, 495, 0, 0, 1344, 0, 1118,
	0, 0, 0, 1712, 1713, 0, 0, 1970, 0, 0,
	0, 342, 342, 342, 1973, 342, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 1729, 0, 0, 0, 0, 1123, 0, 0,
	498, 342, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 503, 1938, 0, 0, 0, 499, 577, 0, 0,
	577, 577, 1006, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 2114, 0, 1969, 0, 0, 0, 0,
	1133, 500, 0, 0, 0, 0, 0, 0, 1164, 0,
	1167, 0, 0, 979, 0, 0, 1718, 1172, 0, 0,
	502, 1724, 1725, 1726, 0, 0, 1723, 1721, 1722, 1714,
	1715, 1716, 1717, 1719, 1720, 0, 0, 0, 0, 0,
	0, 1133, 0, 0, 979, 979, 0, 0, 0, 0,
	0, 0, 0, 979, 979, 0, 0, 0, 342, 1530,
	1531, 0, 1009, 0, 1229, 0, 0, 1538, 1134, 1728,
	0, 1006, 0, 1543, 1544, 1546, 1548, 1549, 0, 0,
	1493, 0, 342, 0, 1556, 0, 979, 0, 1559, 0,
	0, 0, 0, 1009, 1009, 0, 0, 0, 342, 0,
	0, 0, 1009, 1009, 0, 0, 0, 0, 949, 1134,
	949, 59, 524, 0, 0, 342, 0, 59, 0, 1586,
	501, 0, 0, 0, 342, 0, 1595, 0, 0, 0,
	0, 0, 0, 342, 0, 1009, 0, 1729, 0, 0,
	0, 0, 0, 801, 801, 0, 0, 0, 0, 59,
	0, 59, 901, 1126, 1127, 1119, 1120, 1121, 1122, 1124,
	1125, 0, 0, 0, 1344, 1344, 59, 1006, 59, 504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 1712,
	1713, 0, 1730, 1731, 1732, 1127, 1119, 1120, 1121, 1122,
	1124, 1125, 0, 0, 0, 0, 1885, 0, 0, 0,
	2097, 342, 0, 1115, 1116, 0, 1008, 0, 0, 1145,
	1146, 1147, 979, 1722, 1714, 1715, 1716, 1717, 1719, 1720,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	1149, 0, 1727, 0, 0, 0, 0, 1008, 1008, 0,
	0, 0, 0, 0, 0, 0, 1008, 1008, 0, 0,
	1117, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 1009, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146,
	1147, 0, 1493, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 1718, 0, 0, 0, 1118, 976, 0, 1149,
	0, 0, 0, 0, 0, 494, 0, 0, 0, 0,
	1372, 0, 0, 1093, 2173, 1098, 1123, 0, 0, 1117,
	0, 1105, 0, 0, 0, 1132, 495, 1733, 976, 976,
	0, 979, 0, 0, 0, 1142, 1150, 976, 976, 1155,
	1156, 1157, 1158, 1159, 0, 1728, 1431, 0, 0, 1168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1176,
	0, 585, 0, 1140, 0, 0, 1167, 0, 0, 1133,
	976, 0, 498, 0, 0, 1123, 0, 1776, 0, 0,
	1009, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 1142, 1150, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1148, 949, 2229, 1729, 0, 0, 0, 0, 1813, 0,
	979, 0, 1140, 500, 0, 1008, 0, 0, 1133, 0,
	0, 0, 0, 0, 0, 342, 342, 1134, 59, 0,
	0, 0, 502, 0, 59, 0, 0, 0, 0, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1841, 0, 0, 0, 0, 0, 1009,
	59, 0, 342, 59, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 1873, 0, 0,
	0, 342, 1724, 1725, 1726, 0, 1134, 1723, 1721, 1722,
	1714, 1715, 1716, 1717, 1719, 1720, 976, 0, 0, 0,
	1143, 0, 0, 1141, 0, 0, 979, 0, 0, 1144,
	0, 1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125,
	0, 0, 0, 0, 1008, 0, 1904, 0, 0, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 1009, 0, 0, 0, 0,
	1652, 0, 1141, 0, 0, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 1958, 1229, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 1776,
	640, 0, 0, 1008, 0, 1991, 0, 1992, 1167, 342,
	1994, 1995, 0, 342, 0, 1999, 0, 0, 0, 0,
	0, 0, 0, 0, 1776, 0, 640, 1265, 801, 1776,
	0, 0, 0, 0, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 0, 1413, 0, 1415,
	1416, 1417, 1418, 0, 0, 0, 342, 342, 0, 0,
	342, 0, 0, 1167, 0, 0, 0, 0, 1442, 0,
	0, 1873, 0, 0, 976, 1168, 0, 0, 0, 2050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 1472, 1473, 0, 0, 1489, 29, 1501, 1503,
	1508, 1511, 1512, 1513, 0, 0, 0, 0, 34, 101,
	0, 0, 2070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	36, 0, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 1372, 0, 1229, 45, 2089,
	976, 104, 2091, 0, 0, 53, 0, 50, 0, 0,
	342, 0, 0, 1776, 0, 0, 0, 0, 0, 1589,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 51,
	0, 1372, 0, 0, 1372, 0, 0, 0, 2123, 0,
	0, 59, 1776, 0, 0, 0, 0, 342, 0, 0,
	1652, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 1618, 0, 2146, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 1873,
	0, 0, 0, 0, 0, 0, 1629, 0, 640, 1873,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 35, 949,
	0, 56, 0, 105, 0, 0, 0, 0, 57, 0,
	0, 0, 109, 1657, 1658, 0, 0, 64, 0, 1663,
	65, 0, 0, 0, 2192, 2193, 0, 0, 0, 102,
	0, 0, 0, 0, 2201, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 2212, 0, 0,
	0, 0, 1682, 0, 85, 640, 0, 0, 0, 1689,
	0, 1873, 0, 1693, 0, 0, 0, 0, 1873, 640,
	112, 0, 1702, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 59,
	0, 2237, 0, 640, 0, 0, 342, 0, 0, 0,
	0, 0, 1168, 100, 0, 0, 0, 0, 0, 1508,
	1508, 1508, 0, 1776, 0, 1372, 1372, 0, 0, 1372,
	2146, 0, 0, 1873, 0, 0, 0, 585, 1115, 1116,
	0, 1135, 1136, 1137, 1145, 1146, 1147, 0, 0, 0,
	0, 0, 0, 0, 1773, 1138, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 1149, 0, 640, 0, 0,
	0, 0, 0, 342, 0, 1712, 1713, 0, 1730, 1731,
	1732, 0, 0, 0, 0, 1117, 0, 2299, 0, 0,
	0, 1132, 1884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 1873, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1727, 0,
	0, 0, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146,
	1147, 1123, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 1149,
	1142, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1876, 0, 0, 1877, 0, 1148, 0, 1718, 1117,
	0, 0, 0, 0, 59, 1132, 1882, 0, 1140, 0,
	0, 0, 0, 0, 1133, 1891, 0, 2142, 0, 0,
	0, 0, 0, 1895, 0, 0, 1618, 0, 0, 0,
	1372, 0, 0, 1733, 0, 0, 0, 0, 0, 1139,
	0, 1911, 0, 0, 0, 1913, 0, 0, 0, 0,
	0, 1728, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 1150, 0, 0, 1944, 1945,
	0, 0, 1134, 0, 0, 0, 0, 1951, 1952, 1953,
	1148, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 0, 1981, 0, 0, 0, 0, 0, 1729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 1129, 1130, 1131, 1144, 0, 1128, 1126, 1127, 1119,
	1120, 1121, 1122, 1124, 1125, 0, 1134, 0, 0, 0,
	0, 2027, 1754, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 1724, 1725,
	1726, 0, 0, 1723, 1721, 1722, 1714, 1715, 1716, 1717,
	1719, 1720, 0, 0, 0, 2055, 0, 0, 0, 2058,
	2059, 0, 1115, 1116, 2061, 1135, 1136, 1137, 1145, 1146,
	1147, 2063, 0, 2065, 0, 0, 0, 0, 0, 1138,
	0, 2071, 0, 0, 0, 0, 1118, 0, 0, 1149,
	0, 0, 1141, 0, 0, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 1117,
	0, 0, 0, 0, 2080, 1132, 1753, 0, 0, 0,
	0, 0, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146,
	1147, 0, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 1149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2113, 0, 1123, 0, 1712, 1713, 1117,
	1730, 1731, 1732, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 1150, 1115, 1116, 0, 1135,
	1136, 1137, 1145, 1146, 1147, 0, 0, 0, 0, 0,
	1148, 0, 0, 1138, 0, 0, 0, 0, 2149, 0,
	1118, 0, 1140, 1149, 0, 0, 0, 0, 1133, 0,
	1727, 0, 0, 0, 0, 1123, 0, 0, 2165, 2166,
	0, 0, 0, 1117, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 1139, 1142, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2178, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1718, 2182, 1140, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 0, 1123,
	1734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 1139, 0, 1733, 0, 0, 1142, 1150,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 1728, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 1133, 0, 0, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 1141, 0, 0, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0,
	0, 0, 0, 0, 0, 0, 1752, 0, 0, 0,
	0, 1729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 2281, 0,
	0, 0, 1141, 0, 1143, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0,
	0, 2297, 2297, 0, 0, 0, 1704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2297,
	1724, 1725, 1726, 0, 0, 1723, 1721, 1722, 1714, 1715,
	1716, 1717, 1719, 1720, 0, 0, 1141, 0, 385, 1129,
	1130, 1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121,
	1122, 1124, 1125, 0, 2297, 151, 152, 404, 153, 405,
	406, 407, 408, 287, 409, 410, 411, 412, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 413, 158,
	294, 295, 159, 414, 415, 296, 297, 298, 416, 160,
	299, 417, 390, 418, 161, 162, 163, 0, 164, 419,
	165, 166, 167, 420, 391, 168, 169, 421, 422, 423,
	424, 425, 426, 170, 171, 343, 172, 300, 173, 301,
	302, 427, 174, 428, 175, 429, 430, 431, 176, 177,
	432, 178, 433, 0, 434, 303, 179, 180, 181, 304,
	305, 435, 436, 437, 182, 183, 306, 0, 184, 438,
	185, 439, 440, 392, 441, 186, 307, 442, 308, 443,
	187, 188, 189, 190, 309, 310, 394, 444, 194, 445,
	191, 446, 393, 192, 311, 193, 312, 313, 314, 447,
	315, 448, 395, 195, 396, 196, 197, 449, 199, 198,
	450, 316, 397, 200, 398, 451, 201, 452, 453, 202,
	0, 203, 204, 205, 207, 317, 206, 399, 208, 209,
	211, 210, 454, 455, 456, 318, 212, 319, 213, 214,
	457, 215, 458, 459, 216, 460, 461, 217, 320, 400,
	218, 401, 321, 219, 220, 221, 222, 462, 322, 223,
	323, 224, 463, 225, 226, 227, 324, 228, 229, 464,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 465, 241, 402, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 466, 326, 252, 253, 467, 254, 245,
	246, 255, 403, 256, 327, 328, 257, 468, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 469, 264, 470,
	265, 266, 267, 268, 269, 471, 331, 332, 333, 472,
	473, 270, 334, 335, 474, 271, 272, 273, 274, 475,
	476, 275, 276, 277, 477, 278, 478, 336, 279, 280,
	281, 337, 338, 479, 480, 282, 481, 482, 483, 484,
	283, 284, 285, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 0, 0, 0, 0,
	0, 0, 1866, 0, 0, 0, 0, 0, 0, 0,
	1867, 151, 152, 404, 153, 405, 406, 407, 408, 287,
	409, 410, 411, 412, 154, 155, 156, 288, 289, 290,
	291, 157, 292, 293, 413, 158, 294, 295, 159, 414,
	415, 296, 297, 298, 416, 160, 299, 417, 390, 418,
	161, 162, 163, 0, 164, 419, 165, 166, 167, 420,
	391, 168, 169, 421, 422, 423, 424, 425, 426, 170,
	171, 343, 172, 300, 173, 301, 302, 427, 174, 428,
	175, 429, 430, 431, 176, 177, 432, 178, 433, 0,
	434, 303, 179, 180, 181, 304, 305, 435, 436, 437,
	182, 183, 306, 0, 184, 438, 185, 439, 440, 392,
	441, 186, 307, 442, 308, 443, 187, 188, 189, 190,
	309, 310, 394, 444, 194, 445, 191, 446, 393, 192,
	311, 193, 312, 313, 314, 447, 315, 448, 395, 195,
	396, 196, 197, 449, 199, 198, 450, 316, 397, 200,
	398, 451, 201, 452, 453, 202, 0, 203, 204, 205,
	207, 317, 206, 399, 208, 209, 211, 210, 454, 455,
	456, 318, 212, 319, 213, 214, 457, 215, 458, 459,
	216, 460, 461, 217, 320, 400, 218, 401, 321, 219,
	220, 221, 222, 462, 322, 223, 323, 224, 463, 225,
	226, 227, 324, 228, 229, 464, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 465, 241, 402,
	242, 243, 325, 244, 0, 248, 249, 250, 251, 466,
	326, 252, 253, 467, 254, 245, 246, 255, 403, 256,
	327, 328, 257, 468, 263, 258, 259, 247, 260, 262,
	329, 261, 330, 469, 264, 470, 265, 266, 267, 268,
	269, 471, 331, 332, 333, 472, 473, 270, 334, 335,
	474, 271, 272, 273, 274, 475, 476, 275, 276, 277,
	477, 278, 478, 336, 279, 280, 281, 337, 338, 479,
	480, 282, 481, 482, 483, 484, 283, 284, 285, 286,
	0, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2222, 151,
	152, 404, 153, 405, 406, 407, 408, 287, 409, 410,
	411, 412, 154, 155, 156, 288, 289, 290, 291, 157,
	292, 293, 413, 158, 294, 295, 159, 414, 415, 296,
	297, 298, 416, 160, 299, 417, 390, 418, 161, 162,
	163, 0, 164, 419, 165, 166, 167, 420, 391, 168,
	169, 421, 422, 423, 424, 425, 426, 170, 171, 343,
	172, 300, 173, 301, 302, 427, 174, 428, 175, 429,
	430, 431, 176, 177, 432, 178, 433, 0, 434, 303,
	179, 180, 181, 304, 305, 435, 436, 437, 182, 183,
	306, 0, 184, 438, 185, 439, 440, 392, 441, 186,
	307, 442, 308, 443, 187, 188, 189, 190, 309, 310,
	394, 444, 194, 445, 191, 446, 393, 192, 311, 193,
	312, 313, 314, 447, 315, 448, 395, 195, 396, 196,
	197, 449, 199, 198, 450, 316, 397, 200, 398, 451,
	201, 452, 453, 202, 0, 203, 204, 205, 207, 317,
	206, 399, 208, 209, 211, 210, 454, 455, 456, 318,
	212, 319, 213, 214, 457, 215, 458, 459, 216, 460,
	461, 217, 320, 400, 218, 401, 321, 219, 220, 221,
	222, 462, 322, 223, 323, 224, 463, 225, 226, 227,
	324, 228, 229, 464, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 465, 241, 402, 242, 243,
	325, 244, 0, 248, 249, 250, 251, 466, 326, 252,
	253, 467, 254, 245, 246, 255, 403, 256, 327, 328,
	257, 468, 263, 258, 259, 247, 260, 262, 329, 261,
	330, 469, 264, 470, 265, 266, 267, 268, 269, 471,
	331, 332, 333, 472, 473, 270, 334, 335, 474, 271,
	272, 273, 274, 475, 476, 275, 276, 277, 477, 278,
	478, 336, 279, 280, 281, 337, 338, 479, 480, 282,
	481, 482, 483, 484, 283, 284, 285, 286, 385, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 151, 152, 404, 153, 405,
	406, 407, 408, 287, 409, 410, 411, 412, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 413, 158,
	294, 295, 159, 414, 415, 296, 297, 298, 416, 160,
	299, 417, 390, 418, 161, 162, 163, 0, 164, 419,
	165, 166, 167, 420, 391, 168, 169, 421, 422, 423,
	424, 425, 426, 170, 171, 343, 172, 300, 173, 301,
	302, 427, 174, 428, 175, 429, 430, 431, 176, 177,
	432, 178, 433, 0, 434, 303, 179, 180, 181, 304,
	305, 435, 436, 437, 182, 183, 306, 0, 184, 438,
	185, 439, 440, 392, 441, 186, 307, 442, 308, 443,
	187, 188, 189, 190, 309, 310, 394, 444, 194, 445,
	191, 446, 393, 192, 311, 193, 312, 313, 314, 447,
	315, 448, 395, 195, 396, 196, 197, 449, 199, 198,
	450, 316, 397, 200, 398, 451, 201, 452, 453, 202,
	0, 203, 204, 205, 207, 317, 206, 399, 208, 209,
	211, 210, 454, 455, 456, 318, 212, 319, 213, 214,
	457, 215, 458, 459, 216, 460, 461, 217, 320, 400,
	218, 401, 321, 219, 220, 221, 222, 462, 322, 223,
	323, 224, 463, 225, 226, 227, 324, 228, 229, 464,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 465, 241, 402, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 466, 326, 252, 253, 467, 254, 245,
	246, 255, 403, 256, 327, 328, 257, 468, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 469, 264, 470,
	265, 266, 267, 268, 269, 471, 331, 332, 333, 472,
	473, 270, 334, 335, 474, 271, 272, 273, 274, 475,
	476, 275, 276, 277, 477, 278, 478, 336, 279, 280,
	281, 337, 338, 479, 480, 282, 481, 482, 483, 484,
	283, 284, 285, 286, 1455, 0, 839, 828, 829, 826,
	827, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 1459, 153, 0, 0, 0,
	0, 855, 821, 0, 0, 0, 154, 155, 156, 288,
	870, 290, 871, 157, 872, 873, 0, 158, 294, 295,
	159, 824, 854, 874, 875, 298, 0, 160, 866, 0,
	847, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 848, 850, 0, 849,
	851, 170, 171, 343, 172, 876, 173, 877, 878, 0,
	174, 0, 175, 0, 1460, 0, 869, 177, 0, 178,
	0, 0, 0, 812, 179, 180, 181, 856, 857, 835,
	0, 0, 182, 183, 879, 0, 184, 0, 185, 0,
	0, 392, 0, 186, 867, 0, 308, 0, 187, 188,
	189, 190, 863, 865, 394, 0, 194, 0, 191, 0,
	393, 192, 880, 193, 881, 882, 883, 0, 846, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 0, 868,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	807, 0, 836, 864, 212, 884, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	858, 219, 220, 221, 222, 0, 859, 223, 323, 224,
	0, 225, 226, 227, 885, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 813, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 852, 254, 245, 246, 255,
	403, 256, 886, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 887, 261, 860, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 888, 889, 0, 0, 270,
	861, 862, 834, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 853, 278, 0, 336, 279, 280, 281, 337,
	890, 1458, 0, 282, 0, 0, 0, 0, 283, 284,
	285, 286, 808, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 1461, 839, 828, 829, 826,
	827, 818, 814, 1456, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 855, 821, 0, 0, 0, 154, 155, 156, 288,
	870, 290, 871, 157, 872, 873, 0, 158, 294, 295,
	159, 824, 854, 874, 875, 298, 0, 160, 866, 0,
	847, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 848, 850, 0, 849,
	851, 170, 171, 343, 172, 876, 173, 877, 878, 902,
	174, 0, 175, 0, 0, 0, 869, 177, 0, 178,
	0, 0, 0, 812, 179, 180, 181, 856, 857, 835,
	0, 0, 182, 183, 879, 0, 184, 0, 185, 0,
	0, 392, 0, 186, 867, 0, 308, 0, 187, 188,
	189, 190, 863, 865, 394, 0, 194, 0, 191, 0,
	393, 192, 880, 193, 881, 882, 883, 0, 846, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 0, 868,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	807, 0, 836, 864, 212, 884, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	858, 219, 220, 221, 222, 0, 859, 223, 323, 224,
	0, 225, 226, 227, 885, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 813, 244, 0, 248, 249, 250,
	251, 109, 326, 252, 253, 852, 254, 245, 246, 255,
	403, 256, 886, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 887, 261, 860, 0, 264, 113, 265, 266,
	267, 268, 269, 0, 331, 888, 889, 0, 0, 270,
	861, 862, 834, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 853, 278, 0, 336, 279, 280, 281, 693,
	890, 0, 0, 282, 0, 0, 0, 106, 283, 284,
	285, 286, 808, 107, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 0, 0, 0, 0, 0,
	0, 0, 1170, 0, 0, 0, 586, 817, 839, 828,
	829, 826, 827, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 152, 0, 153, 0,
	0, 0, 0, 855, 821, 0, 0, 0, 154, 155,
	156, 288, 870, 290, 871, 157, 872, 873, 0, 158,
	294, 295, 159, 824, 854, 874, 875, 298, 0, 160,
	866, 0, 847, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 391, 168, 169, 0, 848, 850,
	0, 849, 851, 170, 171, 343, 172, 876, 173, 877,
	878, 0, 174, 0, 175, 0, 0, 0, 869, 177,
	0, 178, 0, 0, 0, 812, 179, 180, 181, 856,
	857, 835, 0, 0, 182, 183, 879, 0, 184, 0,
	185, 0, 0, 392, 0, 186, 867, 0, 308, 0,
	187, 188, 189, 190, 863, 865, 394, 0, 194, 0,
	191, 0, 393, 192, 880, 193, 881, 882, 883, 0,
	846, 0, 395, 195, 396, 196, 197, 0, 199, 198,
	0, 868, 397, 200, 398, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 399, 208, 209,
	211, 210, 807, 0, 836, 864, 212, 884, 213, 214,
	0, 215, 0, 0, 216, 0, 0, 217, 320, 400,
	218, 401, 858, 219, 220, 221, 222, 0, 859, 223,
	323, 224, 0, 225, 226, 227, 885, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 402, 242, 243, 813, 244, 0, 248,
	249, 250, 251, 109, 326, 252, 253, 852, 254, 245,
	246, 255, 403, 256, 886, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 887, 261, 860, 0, 264, 113,
	265, 266, 267, 268, 269, 0, 331, 888, 889, 0,
	0, 270, 861, 862, 834, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 853, 278, 0, 336, 279, 280,
	281, 693, 890, 0, 0, 282, 0, 0, 0, 106,
	283, 284, 285, 286, 808, 107, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 839, 828, 829,
	826, 827, 818, 0, 1170, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 855, 821, 0, 0, 0, 154, 155, 156,
	288, 870, 290, 871, 157, 872, 873, 0, 158, 294,
	295, 159, 824, 854, 874, 875, 298, 0, 160, 866,
	0, 847, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 169, 0, 848, 850, 0,
	849, 851, 170, 171, 343, 172, 876, 173, 877, 878,
	0, 174, 0, 175, 0, 0, 0, 869, 177, 0,
	178, 0, 0, 0, 812, 179, 180, 181, 856, 857,
	835, 0, 0, 182, 183, 879, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 867, 0, 308, 0, 187,
	188, 189, 190, 863, 865, 394, 0, 194, 0, 191,
	0, 393, 192, 880, 193, 881, 882, 883, 0, 846,
	0, 395, 195, 396, 196, 197, 0, 199, 198, 0,
	868, 397, 200, 398, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 399, 208, 209, 211,
	210, 807, 0, 836, 864, 212, 884, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 858, 219, 220, 221, 222, 0, 859, 223, 323,
	224, 0, 225, 226, 227, 885, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 813, 244, 0, 248, 249,
	250, 251, 109, 326, 252, 253, 852, 254, 245, 246,
	255, 403, 256, 886, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 887, 261, 860, 0, 264, 113, 265,
	266, 267, 268, 269, 0, 331, 888, 889, 0, 0,
	270, 861, 862, 834, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 853, 278, 0, 336, 279, 280, 281,
	693, 890, 0, 0, 282, 0, 0, 0, 106, 283,
	284, 285, 286, 808, 107, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 839, 828, 829, 826,
	827, 818, 0, 1170, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 855, 821, 0, 0, 0, 154, 155, 156, 288,
	870, 290, 871, 157, 872, 873, 1504, 158, 294, 295,
	159, 824, 854, 874, 875, 298, 0, 160, 866, 0,
	847, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 848, 850, 0, 849,
	851, 170, 171, 343, 172, 876, 173, 877, 878, 0,
	174, 0, 175, 0, 0, 0, 869, 177, 0, 178,
	0, 0, 0, 812, 179, 180, 181, 856, 857, 835,
	0, 0, 182, 183, 879, 0, 184, 0, 185, 0,
	1509, 392, 0, 186, 867, 0, 308, 0, 187, 188,
	189, 190, 863, 865, 394, 0, 194, 0, 191, 0,
	393, 192, 880, 193, 881, 882, 883, 0, 846, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 1505, 868,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	807, 0, 836, 864, 212, 884, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	858, 219, 220, 221, 222, 0, 859, 223, 323, 224,
	0, 225, 226, 227, 885, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 813, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 852, 254, 245, 246, 255,
	403, 256, 886, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 887, 261, 860, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 888, 889, 0, 1506, 270,
	861, 862, 834, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 853, 278, 0, 336, 279, 280, 281, 337,
	890, 0, 0, 282, 0, 0, 0, 0, 283, 284,
	285, 286, 808, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 839, 828, 829, 826, 827,
	818, 0, 814, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 173, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 189,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	1820, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 285,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 802, 839, 828, 829, 826, 827,
	818, 814, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 173, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 189,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	0, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 285,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 1174,
	1450, 814, 0, 0, 0, 0, 817, 839, 828, 829,
	826, 827, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 855, 821, 0, 0, 0, 154, 155, 156,
	288, 870, 290, 871, 157, 872, 873, 0, 158, 294,
	295, 159, 824, 854, 874, 875, 298, 0, 160, 866,
	0, 847, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 169, 0, 848, 850, 0,
	849, 851, 170, 171, 343, 172, 876, 173, 877, 878,
	0, 174, 0, 175, 0, 0, 0, 869, 177, 0,
	178, 0, 0, 0, 812, 179, 180, 181, 856, 857,
	835, 0, 0, 182, 183, 879, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 867, 0, 308, 0, 187,
	188, 189, 190, 863, 865, 394, 0, 194, 0, 191,
	0, 393, 192, 880, 193, 881, 882, 883, 0, 846,
	0, 395, 195, 396, 196, 197, 0, 199, 198, 0,
	868, 397, 200, 398, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 399, 208, 209, 211,
	210, 807, 0, 836, 864, 212, 884, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 858, 219, 220, 221, 222, 0, 859, 223, 323,
	224, 0, 225, 226, 227, 885, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 813, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 852, 254, 245, 246,
	255, 403, 256, 886, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 887, 261, 860, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 888, 889, 0, 0,
	270, 861, 862, 834, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 853, 278, 0, 336, 279, 280, 281,
	337, 890, 0, 0, 282, 0, 0, 0, 0, 283,
	284, 285, 286, 808, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 839, 828, 829, 826,
	827, 818, 0, 814, 1941, 0, 0, 0, 817, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 855, 821, 0, 0, 0, 154, 155, 156, 288,
	870, 290, 871, 157, 872, 873, 0, 158, 294, 295,
	159, 824, 854, 874, 875, 298, 0, 160, 866, 0,
	847, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 848, 850, 0, 849,
	851, 170, 171, 343, 172, 876, 173, 877, 878, 0,
	174, 0, 175, 0, 0, 0, 869, 177, 0, 178,
	0, 0, 0, 812, 179, 180, 181, 856, 857, 835,
	0, 0, 182, 183, 879, 0, 184, 0, 185, 0,
	0, 392, 0, 186, 867, 0, 308, 0, 187, 188,
	189, 190, 863, 865, 394, 0, 194, 0, 191, 0,
	393, 192, 880, 193, 881, 882, 883, 0, 846, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 0, 868,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	807, 0, 836, 864, 212, 884, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	858, 219, 220, 221, 222, 0, 859, 223, 323, 224,
	0, 225, 226, 227, 885, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 813, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 852, 254, 245, 246, 255,
	403, 256, 886, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 887, 261, 860, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 888, 889, 0, 0, 270,
	861, 862, 834, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 853, 278, 0, 336, 279, 280, 281, 337,
	890, 1898, 0, 282, 0, 0, 0, 0, 283, 284,
	285, 286, 808, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 839, 828, 829, 826, 827,
	818, 0, 814, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 173, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 189,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	0, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 285,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 0,
	0, 814, 1888, 0, 0, 1869, 817, 839, 828, 829,
	826, 827, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 855, 821, 0, 0, 0, 154, 155, 156,
	288, 870, 290, 871, 157, 872, 873, 0, 158, 294,
	295, 159, 824, 854, 874, 875, 298, 0, 160, 866,
	0, 847, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 169, 0, 848, 850, 0,
	849, 851, 170, 171, 343, 172, 876, 173, 877, 878,
	0, 174, 0, 175, 0, 0, 0, 869, 177, 0,
	178, 0, 0, 0, 812, 179, 180, 181, 856, 857,
	835, 0, 0, 182, 183, 879, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 867, 0, 308, 0, 187,
	188, 189, 190, 863, 865, 394, 0, 194, 0, 191,
	0, 393, 192, 880, 193, 881, 882, 883, 0, 846,
	0, 395, 195, 396, 196, 197, 0, 199, 198, 0,
	868, 397, 200, 398, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 399, 208, 209, 211,
	210, 807, 0, 836, 864, 212, 884, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 858, 219, 220, 221, 222, 0, 859, 223, 323,
	224, 0, 225, 226, 227, 885, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 813, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 852, 254, 245, 246,
	255, 403, 256, 886, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 887, 261, 860, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 888, 889, 0, 0,
	270, 861, 862, 834, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 853, 278, 0, 336, 279, 280, 281,
	337, 890, 0, 0, 282, 0, 0, 0, 0, 283,
	284, 285, 286, 808, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 839, 828, 829, 826,
	827, 818, 0, 814, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 855, 821, 0, 0, 0, 154, 155, 156, 288,
	870, 290, 871, 157, 872, 873, 0, 158, 294, 295,
	159, 824, 854, 874, 875, 298, 0, 160, 866, 0,
	847, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 848, 850, 0, 849,
	851, 170, 171, 343, 172, 876, 173, 877, 878, 902,
	174, 0, 175, 0, 0, 0, 869, 177, 0, 178,
	0, 0, 0, 812, 179, 180, 181, 856, 857, 835,
	0, 0, 182, 183, 879, 0, 184, 0, 185, 0,
	0, 392, 0, 186, 867, 0, 308, 0, 187, 188,
	189, 190, 863, 865, 394, 0, 194, 0, 191, 0,
	393, 192, 880, 193, 881, 882, 883, 0, 846, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 0, 868,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	807, 0, 836, 864, 212, 884, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	858, 219, 220, 221, 222, 0, 859, 223, 323, 224,
	0, 225, 226, 227, 885, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 813, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 852, 254, 245, 246, 255,
	403, 256, 886, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 887, 261, 860, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 888, 889, 0, 0, 270,
	861, 862, 834, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 853, 278, 0, 336, 279, 280, 281, 337,
	890, 0, 0, 282, 0, 0, 0, 0, 283, 284,
	285, 286, 808, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 839, 828, 829, 826, 827,
	818, 0, 814, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 173, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 1509,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 189,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	0, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 285,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 1518, 817, 839, 828, 829,
	826, 827, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 855, 821, 0, 0, 0, 154, 155, 156,
	288, 870, 290, 871, 157, 872, 873, 0, 158, 294,
	295, 159, 824, 854, 874, 875, 298, 0, 160, 866,
	0, 847, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 169, 0, 848, 850, 0,
	849, 851, 170, 171, 343, 172, 876, 173, 877, 878,
	0, 174, 0, 175, 0, 0, 0, 869, 177, 0,
	178, 0, 0, 0, 812, 179, 180, 181, 856, 857,
	835, 0, 0, 182, 183, 879, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 867, 0, 308, 0, 187,
	188, 189, 190, 863, 865, 394, 0, 194, 0, 191,
	0, 393, 192, 880, 193, 881, 882, 883, 0, 846,
	0, 395, 195, 396, 196, 197, 0, 199, 198, 0,
	868, 397, 200, 398, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 399, 208, 209, 211,
	210, 807, 0, 836, 864, 212, 884, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 858, 219, 220, 221, 222, 0, 859, 223, 323,
	224, 0, 225, 226, 227, 885, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 813, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 852, 254, 245, 246,
	255, 403, 256, 886, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 887, 261, 860, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 888, 889, 0, 0,
	270, 861, 862, 834, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 853, 278, 0, 336, 279, 280, 281,
	337, 890, 0, 0, 282, 0, 0, 0, 0, 283,
	284, 285, 286, 808, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 1516, 817, 839,
	828, 829, 826, 827, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 0, 855, 821, 0, 0, 0, 154,
	155, 156, 288, 870, 290, 871, 157, 872, 873, 0,
	158, 294, 295, 159, 824, 854, 874, 875, 298, 0,
	160, 866, 0, 847, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 391, 168, 169, 0, 848,
	850, 0, 849, 851, 170, 171, 343, 172, 876, 173,
	877, 878, 0, 174, 0, 175, 0, 0, 0, 869,
	177, 0, 178, 0, 0, 0, 812, 179, 180, 181,
	856, 857, 835, 0, 0, 182, 183, 879, 0, 184,
	0, 185, 0, 0, 392, 0, 186, 867, 0, 308,
	0, 187, 188, 189, 190, 863, 865, 394, 0, 194,
	0, 191, 0, 393, 192, 880, 193, 881, 882, 883,
	0, 846, 0, 395, 195, 396, 196, 197, 0, 199,
	198, 0, 868, 397, 200, 398, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 399, 208,
	209, 211, 210, 807, 0, 836, 864, 212, 884, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	400, 218, 401, 858, 219, 220, 221, 222, 0, 859,
	223, 323, 224, 0, 225, 226, 227, 885, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 402, 242, 243, 813, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 852, 254,
	245, 246, 255, 403, 256, 886, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 887, 261, 860, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 888, 889,
	0, 0, 270, 861, 862, 834, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 853, 278, 0, 336, 279,
	280, 281, 337, 890, 0, 0, 282, 0, 0, 0,
	0, 283, 284, 285, 286, 808, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 1500,
	817, 839, 828, 829, 826, 827, 818, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	0, 153, 0, 0, 0, 0, 855, 821, 0, 0,
	0, 154, 155, 156, 288, 870, 290, 871, 157, 872,
	873, 0, 158, 294, 295, 159, 824, 854, 874, 875,
	298, 0, 160, 866, 0, 847, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 391, 168, 169,
	0, 848, 850, 0, 849, 851, 170, 171, 343, 172,
	876, 173, 877, 878, 0, 174, 0, 175, 0, 0,
	0, 869, 177, 0, 178, 0, 0, 0, 812, 179,
	180, 181, 856, 857, 835, 0, 0, 182, 183, 879,
	0, 184, 0, 185, 0, 0, 392, 0, 186, 867,
	0, 308, 0, 187, 188, 189, 190, 863, 865, 394,
	0, 194, 0, 191, 0, 393, 192, 880, 193, 881,
	882, 883, 0, 846, 0, 395, 195, 396, 196, 197,
	0, 199, 198, 0, 868, 397, 200, 398, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	399, 208, 209, 211, 210, 807, 0, 836, 864, 212,
	884, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 400, 218, 401, 858, 219, 220, 221, 222,
	0, 859, 223, 323, 224, 0, 225, 226, 227, 885,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 402, 242, 243, 813,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	852, 254, 245, 246, 255, 403, 256, 886, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 887, 261, 860,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	888, 889, 0, 0, 270, 861, 862, 834, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 853, 278, 0,
	336, 279, 280, 281, 337, 890, 0, 0, 282, 0,
	0, 0, 0, 283, 284, 285, 286, 808, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 1488, 817, 839, 828, 829, 826, 827, 818, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 0, 855, 821,
	0, 0, 0, 154, 155, 156, 288, 870, 290, 871,
	157, 872, 873, 0, 158, 294, 295, 159, 824, 854,
	874, 875, 298, 0, 160, 866, 0, 847, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 391,
	168, 169, 0, 848, 850, 0, 849, 851, 170, 171,
	343, 172, 876, 173, 877, 878, 0, 174, 0, 175,
	0, 0, 0, 869, 177, 0, 178, 0, 0, 0,
	812, 179, 180, 181, 856, 857, 835, 0, 0, 182,
	183, 879, 0, 184, 0, 185, 0, 0, 392, 0,
	186, 867, 0, 308, 0, 187, 188, 189, 190, 863,
	865, 394, 0, 194, 0, 191, 0, 393, 192, 880,
	193, 881, 882, 883, 0, 846, 0, 395, 195, 396,
	196, 197, 0, 199, 198, 0, 868, 397, 200, 398,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 399, 208, 209, 211, 210, 807, 0, 836,
	864, 212, 884, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 400, 218, 401, 858, 219, 220,
	221, 222, 0, 859, 223, 323, 224, 0, 225, 226,
	227, 885, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 402, 242,
	243, 813, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 852, 254, 245, 246, 255, 403, 256, 886,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 887,
	261, 860, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 888, 889, 0, 0, 270, 861, 862, 834,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 853,
	278, 0, 336, 279, 280, 281, 337, 890, 0, 0,
	282, 0, 0, 0, 0, 283, 284, 285, 286, 808,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 1486, 817, 1478, 828, 829, 826, 827,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 1481, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 1482,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 1483,
	1480, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	0, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 1484,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 1479,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 1475, 817, 1478, 828, 829,
	826, 827, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 855, 821, 0, 0, 0, 154, 155, 156,
	288, 870, 290, 871, 157, 872, 873, 0, 158, 294,
	295, 159, 824, 854, 874, 875, 298, 0, 160, 866,
	0, 847, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 169, 0, 848, 850, 0,
	849, 851, 170, 171, 343, 172, 876, 1481, 877, 878,
	0, 174, 0, 175, 0, 0, 0, 869, 177, 0,
	178, 0, 0, 0, 812, 179, 180, 181, 856, 857,
	835, 0, 0, 182, 183, 879, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 867, 0, 308, 0, 187,
	188, 1482, 190, 863, 865, 394, 0, 194, 0, 191,
	0, 393, 192, 880, 193, 881, 882, 883, 0, 846,
	0, 395, 195, 396, 196, 197, 0, 199, 198, 0,
	868, 397, 200, 398, 0, 201, 0, 0, 202, 0,
	203, 1483, 1480, 207, 317, 206, 399, 208, 209, 211,
	210, 807, 0, 836, 864, 212, 884, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 858, 219, 220, 221, 222, 0, 859, 223, 323,
	224, 0, 225, 226, 227, 885, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 813, 244, 0, 248, 249,
	250, 1484, 0, 326, 252, 253, 852, 254, 245, 246,
	255, 403, 256, 886, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 887, 261, 860, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 888, 889, 0, 0,
	270, 861, 862, 834, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 853, 278, 0, 336, 279, 280, 281,
	337, 890, 0, 0, 282, 0, 0, 0, 0, 283,
	284, 1479, 286, 808, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 839, 828, 829, 826,
	827, 818, 0, 814, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 855, 821, 0, 0, 0, 154, 155, 156, 288,
	870, 290, 871, 157, 872, 873, 0, 158, 294, 295,
	159, 824, 854, 874, 875, 298, 0, 160, 866, 0,
	847, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 848, 850, 0, 849,
	851, 170, 171, 343, 172, 876, 173, 877, 878, 0,
	174, 0, 175, 0, 0, 0, 869, 177, 0, 178,
	0, 0, 0, 812, 179, 180, 181, 856, 857, 835,
	0, 0, 182, 183, 879, 0, 184, 0, 185, 0,
	0, 392, 0, 186, 867, 0, 308, 0, 187, 188,
	189, 190, 863, 865, 394, 0, 194, 0, 191, 0,
	393, 192, 880, 193, 881, 882, 883, 0, 846, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 0, 868,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	807, 0, 836, 864, 212, 884, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	858, 219, 220, 221, 222, 0, 859, 223, 323, 224,
	0, 225, 226, 227, 885, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 813, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 852, 254, 245, 246, 255,
	403, 256, 886, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 887, 261, 860, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 888, 889, 0, 0, 270,
	861, 862, 834, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 853, 278, 0, 336, 279, 280, 281, 337,
	890, 0, 0, 282, 0, 0, 0, 0, 283, 284,
	285, 286, 808, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 839, 828, 829, 826, 827,
	818, 0, 814, 1445, 0, 0, 0, 817, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 173, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 189,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	0, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 285,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 802, 839, 828, 829, 826, 827,
	818, 814, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 151, 152, 1094, 153, 0, 0, 0, 0,
	855, 821, 0, 0, 0, 154, 155, 156, 288, 870,
	290, 871, 157, 872, 873, 0, 158, 294, 295, 159,
	824, 854, 874, 875, 298, 0, 160, 866, 0, 847,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 848, 850, 0, 849, 851,
	170, 171, 343, 172, 876, 173, 877, 878, 0, 174,
	0, 175, 0, 0, 0, 869, 177, 0, 178, 0,
	0, 0, 812, 179, 180, 181, 856, 857, 835, 0,
	0, 182, 183, 879, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 867, 0, 308, 0, 187, 188, 189,
	190, 863, 865, 394, 0, 194, 0, 191, 0, 393,
	192, 880, 193, 881, 882, 883, 0, 846, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 868, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 807,
	0, 836, 864, 212, 884, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 858,
	219, 220, 221, 222, 0, 859, 223, 323, 224, 0,
	225, 226, 227, 885, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 813, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 852, 254, 245, 246, 255, 403,
	256, 886, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 887, 261, 860, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 888, 889, 0, 0, 270, 861,
	862, 834, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 853, 278, 0, 336, 279, 280, 281, 337, 890,
	0, 0, 282, 0, 0, 0, 0, 283, 284, 285,
	286, 808, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 839, 828, 829, 826, 827, 818,
	0, 814, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 151, 152, 0, 153, 0, 0, 0, 0, 855,
	821, 0, 0, 0, 154, 155, 156, 288, 870, 290,
	871, 157, 872, 873, 0, 158, 294, 295, 159, 824,
	854, 874, 875, 298, 0, 160, 866, 0, 847, 0,
	161, 162, 163, 0, 164, 0, 165, 166, 167, 0,
	391, 168, 2296, 0, 848, 850, 0, 849, 851, 170,
	171, 343, 172, 876, 173, 877, 878, 0, 174, 0,
	175, 0, 0, 0, 869, 177, 0, 178, 0, 0,
	0, 812, 179, 180, 181, 856, 857, 835, 0, 0,
	182, 183, 879, 0, 184, 0, 185, 0, 0, 392,
	0, 186, 867, 0, 308, 0, 187, 188, 189, 190,
	863, 865, 394, 0, 194, 0, 191, 0, 393, 192,
	880, 193, 881, 882, 883, 0, 846, 0, 395, 195,
	396, 196, 197, 0, 199, 198, 0, 868, 397, 200,
	398, 0, 201, 0, 0, 202, 0, 203, 204, 205,
	207, 317, 206, 399, 208, 209, 211, 210, 807, 0,
	836, 864, 212, 884, 213, 214, 0, 215, 0, 0,
	216, 0, 0, 217, 320, 400, 218, 401, 858, 219,
	220, 221, 222, 0, 859, 223, 323, 224, 0, 225,
	226, 227, 885, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 0, 241, 402,
	242, 243, 813, 244, 0, 248, 249, 250, 251, 0,
	326, 252, 253, 852, 254, 245, 246, 255, 403, 256,
	886, 328, 257, 0, 263, 258, 259, 247, 260, 262,
	887, 261, 860, 0, 264, 0, 265, 266, 267, 268,
	269, 0, 331, 888, 889, 0, 0, 270, 861, 862,
	834, 271, 272, 2295, 274, 0, 0, 275, 276, 277,
	853, 278, 0, 336, 279, 280, 281, 337, 890, 0,
	0, 282, 0, 0, 0, 0, 283, 284, 285, 286,
	808, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 839, 828, 829, 826, 827, 818, 0,
	814, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 0, 855, 821,
	0, 0, 0, 154, 155, 156, 2294, 870, 290, 871,
	157, 872, 873, 0, 158, 294, 295, 159, 824, 854,
	874, 875, 298, 0, 160, 866, 0, 847, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 391,
	168, 2296, 0, 848, 850, 0, 849, 851, 170, 171,
	343, 172, 876, 173, 877, 878, 0, 174, 0, 175,
	0, 0, 0, 869, 177, 0, 178, 0, 0, 0,
	812, 179, 180, 181, 856, 857, 835, 0, 0, 182,
	183, 879, 0, 184, 0, 185, 0, 0, 392, 0,
	186, 867, 0, 308, 0, 187, 188, 189, 190, 863,
	865, 394, 0, 194, 0, 191, 0, 393, 192, 880,
	193, 881, 882, 883, 0, 846, 0, 395, 195, 396,
	196, 197, 0, 199, 198, 0, 868, 397, 200, 398,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 399, 208, 209, 211, 210, 807, 0, 836,
	864, 212, 884, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 400, 218, 401, 858, 219, 220,
	221, 222, 0, 859, 223, 323, 224, 0, 225, 226,
	227, 885, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 402, 242,
	243, 813, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 852, 254, 245, 246, 255, 403, 256, 886,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 887,
	261, 860, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 888, 889, 0, 0, 270, 861, 862, 834,
	271, 272, 2295, 274, 0, 0, 275, 276, 277, 853,
	278, 0, 336, 279, 280, 281, 337, 890, 0, 0,
	282, 0, 0, 0, 0, 283, 284, 285, 286, 808,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 839, 828, 829, 826, 827, 818, 0, 814,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 151,
	152, 0, 153, 0, 0, 0, 0, 855, 821, 0,
	0, 0, 154, 155, 156, 288, 870, 290, 871, 157,
	872, 873, 0, 158, 294, 295, 159, 824, 854, 874,
	875, 298, 0, 160, 866, 0, 847, 0, 161, 162,
	163, 0, 164, 0, 165, 166, 167, 0, 391, 168,
	169, 0, 848, 850, 0, 849, 851, 170, 171, 343,
	172, 876, 173, 877, 878, 0, 174, 0, 175, 0,
	0, 0, 869, 177, 0, 178, 0, 0, 0, 812,
	179, 180, 181, 856, 857, 835, 0, 0, 182, 183,
	879, 0, 184, 0, 185, 0, 0, 392, 0, 186,
	867, 0, 308, 0, 187, 188, 189, 190, 863, 865,
	394, 0, 194, 0, 191, 0, 393, 192, 880, 193,
	881, 882, 883, 0, 846, 0, 395, 195, 396, 196,
	197, 0, 199, 198, 0, 868, 397, 200, 398, 0,
	201, 0, 0, 202, 0, 203, 204, 205, 207, 317,
	206, 399, 208, 209, 211, 210, 807, 0, 836, 864,
	212, 884, 213, 214, 0, 215, 0, 0, 216, 0,
	0, 217, 320, 400, 218, 401, 858, 219, 220, 221,
	222, 0, 859, 223, 323, 224, 0, 225, 226, 227,
	885, 228, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 0, 241, 402, 242, 243,
	813, 244, 0, 248, 249, 250, 251, 0, 326, 252,
	253, 852, 254, 245, 246, 255, 403, 256, 886, 328,
	257, 0, 263, 258, 259, 247, 260, 262, 887, 261,
	860, 0, 264, 0, 265, 266, 267, 268, 269, 0,
	331, 888, 889, 0, 0, 270, 861, 862, 834, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 853, 278,
	0, 336, 279, 280, 281, 337, 890, 0, 0, 282,
	0, 0, 0, 0, 283, 284, 285, 286, 808, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 839, 828, 829, 826, 827, 818, 0, 814, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 151, 152,
	0, 153, 0, 0, 0, 0, 855, 821, 0, 0,
	0, 154, 155, 156, 288, 870, 290, 871, 157, 872,
	873, 0, 158, 294, 295, 159, 824, 854, 874, 875,
	298, 0, 160, 866, 0, 847, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 391, 168, 169,
	0, 848, 850, 0, 849, 851, 170, 171, 343, 172,
	876, 173, 877, 878, 0, 174, 0, 175, 0, 0,
	0, 869, 177, 0, 178, 0, 0, 0, 812, 179,
	180, 181, 856, 857, 835, 0, 0, 182, 183, 879,
	0, 184, 0, 185, 0, 0, 392, 0, 186, 867,
	0, 308, 0, 187, 188, 189, 190, 863, 865, 394,
	0, 194, 0, 191, 0, 393, 192, 880, 193, 881,
	882, 883, 0, 846, 0, 395, 195, 396, 196, 197,
	0, 199, 198, 0, 868, 397, 200, 398, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	399, 208, 209, 211, 210, 0, 0, 836, 864, 212,
	884, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 400, 218, 401, 858, 219, 220, 221, 222,
	0, 859, 223, 323, 224, 0, 225, 226, 227, 885,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 402, 242, 243, 1498,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	852, 254, 245, 246, 255, 403, 256, 886, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 887, 261, 860,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	888, 889, 0, 0, 270, 861, 862, 834, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 853, 278, 0,
	336, 279, 280, 281, 337, 890, 0, 0, 282, 0,
	0, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 1494, 1495,
	839, 828, 829, 826, 827, 818, 0, 1497, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 151, 152, 0,
	153, 0, 0, 0, 0, 855, 821, 0, 0, 0,
	154, 155, 156, 288, 870, 290, 871, 157, 872, 873,
	0, 158, 294, 295, 159, 0, 854, 874, 875, 298,
	0, 160, 866, 0, 847, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 391, 168, 169, 0,
	848, 850, 0, 849, 851, 170, 171, 343, 172, 876,
	173, 877, 878, 0, 174, 0, 175, 0, 0, 0,
	869, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 856, 857, 835, 0, 0, 182, 183, 879, 0,
	184, 0, 185, 0, 0, 392, 0, 186, 867, 0,
	308, 0, 187, 188, 189, 190, 863, 865, 394, 0,
	194, 0, 191, 0, 393, 192, 880, 193, 881, 882,
	883, 0, 846, 0, 395, 195, 396, 196, 197, 0,
	199, 198, 0, 868, 397, 200, 398, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 399,
	208, 209, 211, 210, 0, 0, 836, 864, 212, 884,
	213, 214, 0, 215, 0, 0, 216, 0, 0, 217,
	320, 400, 218, 401, 858, 219, 220, 221, 222, 0,
	859, 223, 323, 224, 0, 225, 226, 227, 885, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 402, 242, 243, 1498, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 852,
	254, 245, 246, 255, 403, 256, 886, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 887, 261, 860, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 888,
	889, 0, 0, 270, 861, 862, 834, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 853, 278, 0, 336,
	279, 280, 281, 337, 890, 0, 0, 282, 0, 0,
	0, 0, 283, 284, 285, 286, 0, 839, 828, 829,
	826, 827, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 1497, 153, 0, 0,
	0, 817, 855, 821, 0, 0, 0, 154, 155, 156,
	0, 870, 290, 871, 157, 872, 873, 0, 158, 294,
	295, 159, 824, 854, 874, 875, 298, 0, 160, 866,
	0, 847, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 2296, 0, 848, 850, 0,
	849, 851, 170, 171, 343, 172, 876, 173, 877, 878,
	0, 174, 0, 175, 0, 0, 0, 869, 177, 0,
	178, 0, 0, 0, 812, 179, 180, 181, 856, 857,
	835, 0, 0, 182, 183, 879, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 867, 0, 308, 0, 187,
	188, 189, 190, 863, 865, 0, 0, 194, 0, 191,
	0, 393, 192, 880, 193, 881, 882, 883, 0, 846,
	0, 0, 195, 396, 196, 197, 0, 199, 198, 0,
	868, 397, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 399, 208, 209, 211,
	210, 807, 0, 836, 864, 212, 884, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 858, 219, 220, 221, 222, 0, 859, 223, 323,
	224, 0, 225, 226, 227, 885, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 813, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 852, 254, 245, 246,
	255, 0, 256, 886, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 887, 261, 860, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 888, 889, 0, 0,
	270, 861, 862, 834, 271, 272, 2295, 274, 0, 0,
	275, 276, 277, 853, 278, 0, 336, 279, 280, 281,
	337, 890, 0, 0, 282, 0, 0, 0, 0, 283,
	284, 285, 286, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 805, 0, 0, 0, 0,
	0, 151, 152, 814, 153, 0, 0, 0, 817, 855,
	0, 0, 0, 0, 154, 155, 156, 288, 289, 290,
	291, 157, 292, 293, 0, 158, 294, 295, 159, 0,
	854, 296, 297, 298, 0, 160, 866, 0, 847, 0,
	161, 162, 163, 0, 164, 0, 165, 166, 167, 0,
	391, 168, 169, 0, 848, 850, 0, 849, 851, 170,
	171, 343, 172, 300, 173, 301, 302, 0, 174, 0,
	175, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 303, 179, 180, 181, 856, 857, 0, 0, 0,
	182, 183, 306, 0, 184, 0, 185, 0, 0, 392,
	0, 186, 867, 0, 308, 0, 187, 188, 189, 190,
	863, 865, 394, 0, 194, 0, 191, 0, 393, 192,
	311, 193, 312, 313, 314, 0, 315, 0, 395, 195,
	396, 196, 197, 0, 199, 198, 0, 868, 397, 200,
	398, 0, 201, 0, 0, 202, 0, 203, 204, 205,
	207, 317, 206, 399, 208, 209, 211, 210, 0, 0,
	0, 864, 212, 319, 213, 214, 0, 215, 0, 0,
	216, 0, 0, 217, 320, 400, 218, 401, 858, 219,
	220, 221, 222, 0, 859, 223, 323, 224, 0, 225,
	226, 227, 324, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 0, 241, 402,
	242, 243, 325, 244, 0, 248, 249, 250, 251, 0,
	326, 252, 253, 852, 254, 245, 246, 255, 403, 256,
	327, 328, 257, 0, 263, 258, 259, 247, 260, 262,
	329, 261, 860, 0, 264, 0, 265, 266, 267, 268,
	269, 0, 331, 332, 333, 0, 0, 270, 861, 862,
	0, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	853, 278, 0, 336, 279, 280, 281, 337, 338, 0,
	586, 282, 689, 0, 0, 0, 283, 284, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 0, 153, 0, 0, 0, 0, 287, 0, 0,
	1778, 0, 154, 155, 156, 288, 289, 290, 291, 157,
	292, 293, 0, 158, 294, 295, 159, 0, 0, 296,
	297, 298, 0, 160, 299, 0, 390, 0, 161, 162,
	163, 0, 164, 0, 165, 166, 167, 0, 391, 168,
	169, 0, 0, 0, 0, 0, 0, 170, 171, 343,
	172, 300, 173, 301, 302, 0, 174, 0, 175, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 303,
	179, 180, 181, 304, 305, 0, 0, 0, 182, 183,
	306, 0, 184, 0, 185, 0, 0, 392, 0, 186,
	307, 0, 308, 0, 187, 188, 189, 190, 309, 310,
	394, 0, 194, 0, 191, 0, 393, 192, 311, 193,
	312, 313, 314, 0, 315, 0, 395, 195, 396, 196,
	197, 0, 199, 198, 0, 316, 397, 200, 398, 0,
	201, 0, 0, 202, 0, 203, 204, 205, 207, 317,
	206, 399, 208, 209, 211, 210, 0, 0, 0, 318,
	212, 319, 213, 214, 0, 215, 0, 0, 216, 0,
	0, 217, 320, 400, 218, 401, 321, 219, 220, 221,
	222, 0, 322, 223, 323, 224, 0, 225, 226, 227,
	324, 228, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 0, 241, 402, 242, 243,
	325, 244, 0, 248, 249, 250, 251, 109, 326, 252,
	253, 0, 254, 245, 246, 255, 403, 256, 327, 328,
	257, 0, 263, 258, 259, 247, 260, 262, 329, 261,
	330, 0, 264, 113, 265, 266, 267, 268, 269, 0,
	331, 332, 333, 0, 0, 270, 334, 335, 0, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 336, 279, 280, 281, 693, 338, 0, 685, 282,
	689, 0, 0, 106, 283, 284, 285, 286, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 151, 152, 0,
	153, 0, 0, 0, 0, 287, 0, 0, 100, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	0, 160, 299, 0, 390, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 391, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 0, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 392, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 394, 0,
	194, 0, 191, 0, 393, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 395, 195, 396, 196, 197, 0,
	199, 198, 0, 316, 397, 200, 398, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 399,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 0, 0, 216, 0, 0, 217,
	320, 400, 218, 401, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 402, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 109, 326, 252, 253, 0,
	254, 245, 246, 255, 403, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 113, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 0, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 693, 338, 0, 0, 282, 0, 0,
	0, 106, 283, 284, 285, 286, 0, 107, 0, 0,
	689, 737, 0, 1048, 1045, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 151, 152, 0,
	153, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	0, 160, 299, 0, 390, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 391, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 1062, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 1058, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 392, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 394, 0,
	194, 0, 191, 0, 393, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 395, 195, 396, 196, 197, 0,
	199, 198, 0, 316, 397, 200, 398, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 399,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 1059, 0, 216, 0, 0, 217,
	320, 400, 218, 401, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 402, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 403, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 1057, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 689, 737, 282, 1048, 1045,
	1056, 0, 283, 284, 285, 286, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 1049, 1046, 0,
	287, 0, 0, 0, 0, 154, 155, 156, 288, 289,
	290, 291, 157, 292, 293, 0, 158, 294, 295, 159,
	0, 0, 296, 297, 298, 0, 160, 299, 0, 390,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 391, 168, 169, 0, 0, 0, 0, 0, 0,
	170, 171, 343, 172, 300, 173, 301, 302, 1052, 174,
	0, 175, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 303, 179, 180, 181, 304, 305, 1058, 0,
	0, 182, 183, 306, 0, 184, 0, 185, 0, 0,
	392, 0, 186, 307, 0, 308, 0, 187, 188, 189,
	190, 309, 310, 394, 0, 194, 0, 191, 0, 393,
	192, 311, 193, 312, 313, 314, 0, 315, 0, 395,
	195, 396, 196, 197, 0, 199, 198, 0, 316, 397,
	200, 398, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 399, 208, 209, 211, 210, 0,
	0, 0, 318, 212, 319, 213, 214, 0, 215, 1059,
	0, 216, 0, 0, 217, 320, 400, 218, 401, 321,
	219, 220, 221, 222, 0, 322, 223, 323, 224, 0,
	225, 226, 227, 324, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	402, 242, 243, 325, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 0, 254, 245, 246, 255, 403,
	256, 327, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 329, 261, 330, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 332, 333, 0, 0, 270, 334,
	335, 1057, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 336, 279, 280, 281, 337, 338,
	689, 737, 282, 1048, 1045, 1056, 0, 283, 284, 285,
	286, 0, 0, 0, 0, 0, 0, 151, 152, 0,
	153, 0, 1049, 1046, 0, 287, 0, 0, 0, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	0, 160, 299, 0, 390, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 391, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 1058, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 392, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 394, 0,
	194, 0, 191, 0, 393, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 395, 195, 396, 196, 197, 0,
	199, 198, 0, 316, 397, 200, 398, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 399,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 1059, 0, 216, 0, 0, 217,
	320, 400, 218, 401, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 402, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 403, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 1057, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 0, 0, 282, 0, 0,
	0, 0, 283, 284, 285, 286, 586, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 1046, 0,
	0, 0, 0, 0, 0, 151, 152, 0, 153, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 0, 158,
	294, 295, 159, 0, 0, 296, 297, 298, 0, 160,
	299, 0, 0, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 0, 168, 169, 0, 0, 0,
	0, 0, 0, 170, 171, 343, 172, 300, 173, 301,
	302, 0, 174, 0, 175, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 303, 179, 180, 181, 304,
	305, 0, 0, 0, 182, 183, 306, 0, 184, 0,
	185, 0, 0, 0, 0, 186, 307, 0, 308, 0,
	187, 188, 189, 190, 309, 310, 0, 0, 194, 0,
	191, 0, 0, 192, 311, 193, 312, 313, 314, 0,
	315, 0, 0, 195, 0, 196, 197, 0, 199, 198,
	0, 316, 0, 200, 0, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 0, 208, 209,
	211, 210, 0, 0, 0, 318, 212, 319, 213, 214,
	0, 215, 0, 621, 216, 0, 0, 217, 320, 0,
	218, 0, 321, 219, 220, 221, 222, 0, 322, 223,
	323, 224, 0, 225, 226, 227, 324, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 0, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 109, 326, 252, 253, 0, 254, 245,
	246, 255, 0, 256, 327, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 0, 264, 113,
	265, 266, 267, 268, 269, 0, 331, 332, 333, 0,
	0, 270, 334, 335, 0, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 336, 279, 280,
	281, 693, 338, 0, 0, 282, 148, 0, 0, 106,
	283, 284, 285, 286, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 287, 1369, 0, 1654, 0, 154, 155, 156, 288,
	289, 290, 291, 157, 292, 293, 0, 158, 294, 295,
	159, 0, 0, 296, 297, 298, 0, 160, 299, 0,
	0, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 0, 168, 169, 0, 0, 0, 0, 0,
	0, 170, 171, 343, 172, 300, 173, 301, 302, 0,
	174, 0, 175, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 303, 179, 180, 181, 304, 305, 0,
	0, 0, 182, 183, 306, 0, 184, 0, 185, 0,
	0, 0, 0, 186, 307, 0, 308, 0, 187, 188,
	189, 190, 309, 310, 0, 0, 194, 0, 191, 0,
	0, 192, 311, 193, 312, 313, 314, 0, 315, 0,
	0, 195, 0, 196, 197, 0, 199, 198, 0, 316,
	0, 200, 0, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 0, 208, 209, 211, 210,
	0, 0, 0, 318, 212, 319, 213, 214, 0, 215,
	0, 621, 216, 0, 0, 217, 320, 0, 218, 0,
	321, 219, 220, 221, 222, 0, 322, 223, 323, 224,
	0, 225, 226, 227, 324, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 0, 242, 243, 325, 244, 0, 248, 249, 250,
	251, 109, 326, 252, 253, 0, 254, 245, 246, 255,
	0, 256, 327, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 329, 261, 330, 0, 264, 113, 265, 266,
	267, 268, 269, 0, 331, 332, 333, 0, 0, 270,
	334, 335, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 336, 279, 280, 281, 693,
	338, 0, 586, 282, 148, 0, 0, 106, 283, 284,
	285, 286, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 0, 153, 0, 0, 0, 0, 287,
	1369, 0, 1654, 0, 154, 155, 156, 288, 289, 290,
	291, 157, 292, 293, 0, 158, 294, 295, 159, 0,
	0, 296, 297, 298, 0, 160, 299, 0, 0, 0,
	161, 162, 163, 0, 164, 0, 165, 166, 167, 0,
	0, 168, 169, 0, 0, 0, 0, 0, 0, 170,
	171, 343, 172, 300, 173, 301, 302, 0, 174, 0,
	175, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 303, 179, 180, 181, 304, 305, 0, 0, 0,
	182, 183, 306, 0, 184, 0, 185, 0, 0, 0,
	0, 186, 307, 0, 308, 0, 187, 188, 189, 190,
	309, 310, 0, 0, 194, 0, 191, 0, 0, 192,
	311, 193, 312, 313, 314, 0, 315, 0, 0, 195,
	0, 196, 197, 0, 199, 198, 0, 316, 0, 200,
	0, 0, 201, 0, 0, 202, 0, 203, 204, 205,
	207, 317, 206, 0, 208, 209, 211, 210, 0, 0,
	0, 318, 212, 319, 213, 214, 0, 215, 0, 0,
	216, 0, 0, 217, 320, 0, 218, 0, 321, 219,
	220, 221, 222, 0, 322, 223, 323, 224, 0, 225,
	226, 227, 324, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 0, 241, 0,
	242, 243, 325, 244, 0, 248, 249, 250, 251, 109,
	326, 252, 253, 0, 254, 245, 246, 255, 0, 256,
	327, 328, 257, 0, 263, 258, 259, 247, 260, 262,
	329, 261, 330, 0, 264, 113, 265, 266, 267, 268,
	269, 0, 331, 332, 333, 0, 0, 270, 334, 335,
	0, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 336, 279, 280, 281, 693, 338, 0,
	1367, 282, 148, 0, 0, 106, 283, 284, 285, 286,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 0, 153, 0, 0, 0, 0, 287, 0, 0,
	100, 0, 154, 155, 156, 288, 289, 290, 291, 157,
	292, 293, 0, 158, 294, 295, 159, 0, 0, 296,
	297, 298, 0, 160, 299, 0, 0, 0, 161, 162,
	163, 0, 164, 0, 165, 166, 167, 0, 0, 168,
	169, 0, 0, 0, 0, 0, 0, 170, 171, 343,
	172, 300, 173, 301, 302, 0, 174, 0, 175, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 303,
	179, 180, 181, 304, 305, 0, 0, 0, 182, 183,
	306, 0, 184, 0, 185, 0, 0, 0, 0, 186,
	307, 0, 308, 0, 187, 188, 189, 190, 309, 310,
	0, 0, 194, 0, 191, 0, 0, 192, 311, 193,
	312, 313, 314, 0, 315, 0, 0, 195, 0, 196,
	197, 0, 199, 198, 0, 316, 0, 200, 0, 0,
	201, 0, 0, 202, 0, 203, 204, 205, 207, 317,
	206, 0, 208, 209, 211, 210, 0, 0, 0, 318,
	212, 319, 213, 214, 0, 215, 0, 621, 216, 0,
	0, 217, 320, 0, 218, 0, 321, 219, 220, 221,
	222, 0, 322, 223, 323, 224, 0, 225, 226, 227,
	324, 228, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 0, 241, 0, 242, 243,
	325, 244, 0, 248, 249, 250, 251, 0, 326, 252,
	253, 0, 254, 245, 246, 255, 0, 256, 327, 328,
	257, 0, 263, 258, 259, 247, 260, 262, 329, 261,
	330, 0, 264, 0, 265, 266, 267, 268, 269, 0,
	331, 332, 333, 0, 0, 270, 334, 335, 0, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 336, 279, 280, 281, 337, 338, 0, 0, 282,
	148, 0, 0, 0, 283, 284, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 152, 0,
	153, 0, 0, 0, 0, 287, 1369, 0, 1374, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	0, 160, 299, 0, 0, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 0, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 0, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 0, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 0, 0,
	194, 0, 191, 0, 0, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 0, 195, 0, 196, 197, 0,
	199, 198, 0, 316, 0, 200, 0, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 0,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 0, 621, 216, 0, 0, 217,
	320, 0, 218, 0, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 0, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 0, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 0, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 0, 0, 282, 148, 0,
	0, 0, 283, 284, 285, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 152, 0, 153, 0,
	0, 0, 0, 287, 1369, 0, 1374, 0, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 0, 158,
	294, 295, 159, 0, 0, 296, 297, 298, 0, 160,
	299, 0, 0, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 0, 168, 169, 0, 0, 0,
	0, 0, 0, 170, 171, 343, 172, 300, 173, 301,
	302, 0, 174, 0, 175, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 303, 179, 180, 181, 304,
	305, 0, 0, 0, 182, 183, 306, 0, 184, 0,
	185, 0, 0, 0, 0, 186, 307, 0, 308, 0,
	187, 188, 189, 190, 309, 310, 0, 0, 194, 0,
	191, 0, 0, 192, 311, 193, 312, 313, 314, 0,
	315, 0, 0, 195, 0, 196, 197, 0, 199, 198,
	0, 316, 0, 200, 0, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 0, 208, 209,
	211, 210, 0, 0, 0, 318, 212, 319, 213, 214,
	0, 215, 0, 0, 216, 0, 0, 217, 320, 0,
	218, 0, 321, 219, 220, 221, 222, 0, 322, 223,
	323, 224, 0, 225, 226, 227, 324, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 0, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 0, 326, 252, 253, 0, 254, 245,
	246, 255, 0, 256, 327, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 0, 264, 0,
	265, 266, 267, 268, 269, 0, 331, 332, 333, 0,
	0, 270, 334, 335, 0, 271, 272, 273, 274, 148,
	0, 275, 276, 277, 0, 278, 0, 336, 279, 280,
	281, 337, 338, 0, 0, 282, 151, 152, 0, 153,
	283, 284, 285, 286, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 934, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 309, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	148, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 0, 282, 151, 152, 0,
	153, 283, 284, 285, 286, 287, 0, 0, 0, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 1296, 0, 296, 297, 298,
	0, 160, 299, 0, 0, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 0, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 0, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 0, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 0, 0,
	194, 0, 191, 0, 0, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 0, 195, 0, 196, 197, 0,
	199, 198, 0, 316, 0, 200, 0, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 0,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 0, 0, 216, 0, 0, 217,
	320, 0, 218, 0, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 0, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 0, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 0, 271, 272, 273,
	274, 148, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 0, 0, 282, 151, 152,
	0, 153, 283, 284, 285, 286, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 1905, 0, 296, 297,
	298, 0, 160, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 309, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 0, 282, 0,
	0, 0, 0, 283, 284, 285, 286, 0, 839, 828,
	829, 826, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 152, 905, 153, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 154, 155,
	156, 288, 870, 290, 871, 157, 872, 873, 0, 158,
	294, 295, 159, 0, 0, 874, 875, 298, 0, 160,
	299, 0, 390, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 391, 168, 169, 0, 0, 0,
	0, 0, 0, 170, 171, 343, 172, 876, 173, 877,
	878, 0, 174, 0, 175, 0, 0, 0, 869, 177,
	0, 178, 0, 0, 0, 303, 179, 180, 181, 304,
	305, 835, 0, 0, 182, 183, 879, 0, 184, 0,
	185, 0, 0, 392, 0, 186, 307, 0, 308, 0,
	187, 188, 189, 190, 309, 310, 394, 0, 194, 0,
	191, 0, 393, 192, 880, 193, 881, 882, 883, 0,
	846, 0, 395, 195, 396, 196, 197, 0, 199, 198,
	0, 316, 397, 200, 398, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 399, 208, 209,
	211, 210, 0, 0, 836, 318, 212, 884, 213, 214,
	0, 215, 0, 0, 216, 0, 0, 217, 320, 400,
	218, 401, 321, 219, 220, 221, 222, 0, 322, 223,
	323, 224, 0, 225, 226, 227, 885, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 402, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 0, 326, 252, 253, 0, 254, 245,
	246, 255, 403, 256, 886, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 887, 261, 330, 0, 264, 0,
	265, 266, 267, 268, 269, 0, 331, 888, 889, 0,
	0, 270, 334, 335, 834, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 336, 279, 280,
	281, 337, 890, 0, 0, 282, 0, 0, 0, 0,
	283, 284, 285, 286, 732, 0, 689, 737, 0, 0,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 154, 155, 156, 288,
	289, 290, 291, 157, 292, 293, 0, 158, 294, 295,
	159, 0, 0, 296, 297, 298, 0, 160, 299, 0,
	390, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 391, 168, 169, 0, 0, 0, 0, 0,
	0, 170, 171, 343, 172, 300, 173, 301, 302, 0,
	174, 0, 175, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 303, 179, 180, 181, 304, 305, 0,
	0, 0, 182, 183, 306, 0, 184, 0, 185, 0,
	0, 392, 0, 186, 307, 0, 308, 0, 187, 188,
	189, 190, 309, 310, 394, 0, 194, 0, 191, 0,
	393, 192, 311, 193, 312, 313, 314, 0, 315, 0,
	395, 195, 396, 196, 197, 0, 199, 198, 0, 316,
	397, 200, 398, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 399, 208, 209, 211, 210,
	0, 0, 0, 318, 212, 319, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 400, 218, 401,
	321, 219, 220, 221, 222, 0, 322, 223, 323, 224,
	0, 225, 226, 227, 324, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 402, 242, 243, 325, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 0, 254, 245, 246, 255,
	403, 256, 327, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 329, 261, 330, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 332, 333, 0, 0, 270,
	334, 335, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 336, 279, 280, 281, 337,
	338, 0, 339, 282, 148, 0, 0, 0, 283, 284,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 0, 153, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 154, 155, 156, 288, 289, 290,
	291, 157, 292, 293, 0, 158, 294, 295, 159, 0,
	0, 296, 297, 298, 0, 160, 299, 0, 0, 0,
	161, 162, 163, 0, 164, 0, 165, 166, 167, 0,
	0, 168, 169, 0, 0, 0, 0, 0, 0, 170,
	171, 144, 172, 300, 173, 301, 302, 0, 174, 0,
	175, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 303, 179, 180, 181, 304, 305, 0, 0, 0,
	182, 183, 306, 0, 184, 0, 185, 0, 0, 0,
	0, 186, 307, 0, 308, 0, 187, 188, 189, 190,
	309, 310, 0, 0, 194, 0, 191, 0, 0, 192,
	311, 193, 312, 313, 314, 0, 315, 0, 0, 195,
	0, 196, 197, 0, 199, 198, 0, 316, 0, 200,
	0, 0, 201, 0, 0, 202, 0, 203, 204, 205,
	207, 317, 206, 0, 208, 209, 211, 210, 0, 0,
	0, 318, 212, 319, 213, 214, 0, 215, 0, 0,
	216, 0, 0, 217, 320, 0, 218, 0, 321, 219,
	220, 221, 222, 0, 322, 223, 323, 224, 0, 225,
	226, 227, 324, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 0, 241, 0,
	242, 243, 325, 244, 0, 248, 249, 250, 251, 0,
	326, 252, 253, 0, 254, 245, 246, 255, 0, 256,
	327, 328, 257, 0, 263, 258, 259, 247, 260, 262,
	329, 261, 330, 0, 264, 143, 265, 266, 267, 268,
	269, 0, 331, 332, 333, 0, 0, 270, 334, 335,
	0, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 336, 279, 280, 281, 337, 338, 0,
	140, 282, 148, 0, 0, 0, 283, 284, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 0, 153, 147, 0, 0, 0, 287, 0, 0,
	0, 0, 154, 155, 156, 288, 289, 290, 291, 157,
	292, 293, 0, 158, 294, 295, 159, 0, 0, 296,
	297, 298, 0, 160, 299, 0, 0, 0, 161, 162,
	163, 0, 164, 0, 165, 166, 167, 0, 0, 168,
	169, 0, 0, 0, 0, 0, 0, 170, 171, 144,
	172, 300, 173, 301, 302, 0, 174, 0, 175, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 303,
	179, 180, 181, 304, 305, 0, 0, 0, 182, 183,
	306, 0, 184, 0, 185, 0, 0, 0, 0, 186,
	307, 0, 308, 0, 187, 188, 189, 190, 309, 310,
	0, 0, 194, 0, 191, 0, 0, 192, 311, 193,
	312, 313, 314, 0, 315, 0, 0, 195, 0, 196,
	197, 0, 199, 198, 0, 316, 0, 200, 0, 0,
	201, 0, 0, 202, 0, 203, 204, 205, 207, 317,
	206, 0, 208, 209, 211, 210, 0, 0, 0, 318,
	212, 319, 213, 214, 0, 215, 0, 0, 216, 0,
	0, 217, 320, 0, 218, 0, 321, 219, 220, 221,
	222, 0, 322, 223, 323, 224, 0, 225, 226, 227,
	324, 228, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 0, 241, 0, 242, 243,
	325, 244, 0, 248, 249, 250, 251, 0, 326, 252,
	253, 0, 254, 245, 246, 255, 0, 256, 327, 328,
	257, 0, 263, 258, 259, 247, 260, 262, 329, 261,
	330, 0, 264, 143, 265, 266, 267, 268, 269, 0,
	331, 332, 333, 0, 0, 270, 334, 335, 0, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 336, 279, 280, 281, 337, 338, 689, 737, 282,
	0, 0, 735, 0, 283, 284, 285, 286, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 147, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 390, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 391, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 392, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 309, 310, 394, 0, 194, 0, 191,
	0, 393, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 395, 195, 396, 196, 197, 0, 199, 198, 0,
	316, 397, 200, 398, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 399, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 400, 218,
	401, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 402, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 403, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 148, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 0, 282, 151, 152, 0, 153, 283,
	284, 285, 286, 287, 0, 0, 0, 0, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 0, 158,
	294, 295, 159, 0, 0, 296, 297, 298, 0, 160,
	299, 0, 0, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 0, 168, 169, 0, 0, 0,
	0, 0, 0, 170, 171, 144, 172, 300, 173, 301,
	302, 0, 174, 0, 175, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 303, 179, 180, 181, 304,
	305, 0, 0, 0, 182, 183, 306, 0, 184, 0,
	185, 0, 0, 0, 0, 186, 307, 0, 308, 0,
	187, 188, 189, 190, 309, 310, 0, 0, 194, 0,
	191, 0, 0, 192, 311, 193, 312, 313, 314, 0,
	315, 0, 0, 195, 0, 196, 197, 0, 199, 198,
	0, 316, 0, 200, 0, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 0, 208, 209,
	211, 210, 0, 0, 0, 318, 212, 319, 213, 214,
	0, 215, 0, 0, 216, 0, 0, 217, 320, 0,
	218, 0, 321, 219, 220, 221, 222, 0, 322, 223,
	323, 224, 0, 225, 226, 227, 324, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 0, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 0, 326, 252, 253, 0, 254, 245,
	246, 255, 0, 256, 327, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 0, 264, 143,
	265, 266, 267, 268, 269, 0, 331, 332, 333, 0,
	0, 270, 334, 335, 0, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 336, 279, 280,
	281, 337, 338, 689, 737, 282, 0, 0, 0, 0,
	283, 284, 285, 286, 0, 0, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 147, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 390, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 391,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 392, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 309,
	310, 394, 0, 194, 0, 191, 0, 393, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 395, 195, 396,
	196, 197, 0, 199, 198, 0, 316, 397, 200, 398,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 399, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 400, 218, 401, 321, 219, 220,
	221, 222, 0, 322, 223, 323, 224, 0, 225, 226,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 402, 242,
	243, 325, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 403, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 148, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 0,
	282, 151, 152, 0, 153, 283, 284, 285, 286, 287,
	0, 0, 0, 0, 154, 155, 156, 288, 289, 290,
	291, 157, 292, 293, 0, 158, 294, 295, 159, 0,
	0, 296, 297, 298, 0, 160, 299, 0, 0, 0,
	161, 162, 163, 0, 164, 0, 165, 166, 167, 0,
	0, 168, 169, 0, 0, 0, 0, 0, 0, 170,
	171, 343, 172, 300, 173, 301, 302, 0, 174, 0,
	175, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 303, 179, 180, 181, 304, 305, 0, 0, 0,
	182, 183, 306, 0, 184, 0, 185, 0, 0, 0,
	0, 186, 307, 0, 308, 0, 187, 188, 189, 190,
	309, 310, 0, 0, 194, 0, 191, 0, 0, 192,
	311, 193, 312, 313, 314, 0, 315, 0, 0, 195,
	0, 196, 197, 0, 199, 198, 0, 316, 0, 200,
	0, 0, 201, 0, 0, 202, 0, 203, 204, 205,
	207, 317, 206, 0, 208, 209, 211, 210, 0, 0,
	0, 318, 212, 319, 213, 214, 0, 215, 0, 0,
	216, 0, 0, 217, 320, 0, 218, 0, 321, 219,
	220, 221, 222, 0, 322, 223, 323, 224, 0, 225,
	226, 227, 324, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 0, 241, 0,
	242, 243, 325, 244, 0, 248, 249, 250, 251, 0,
	326, 252, 253, 0, 254, 245, 246, 255, 0, 256,
	327, 328, 257, 0, 263, 258, 259, 247, 260, 262,
	329, 261, 330, 0, 264, 0, 265, 266, 267, 268,
	269, 0, 331, 332, 333, 0, 0, 270, 334, 335,
	0, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 336, 279, 280, 281, 337, 338, 689,
	0, 282, 0, 0, 0, 0, 283, 284, 285, 286,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 147, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 390, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 391, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 392, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 309, 310, 394, 0, 194,
	0, 191, 0, 393, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 395, 195, 396, 196, 197, 0, 199,
	198, 0, 316, 397, 200, 398, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 399, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	400, 218, 401, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 402, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 403, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	148, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 0, 282, 151, 152, 0,
	153, 283, 284, 285, 286, 287, 0, 0, 0, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	1232, 160, 299, 0, 0, 0, 161, 162, 163, 0,
	164, 1230, 165, 166, 167, 0, 0, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 0, 1273, 0, 182, 183, 306, 0,
	184, 0, 185, 1235, 0, 0, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 0, 0,
	194, 1271, 191, 0, 0, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 0, 195, 0, 196, 197, 0,
	199, 198, 0, 316, 0, 200, 0, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 0,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 0, 0, 216, 0, 0, 217,
	320, 0, 218, 0, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 1234, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 0, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 0, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 0, 271, 272, 273,
	274, 148, 1272, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 0, 0, 282, 151, 152,
	0, 153, 283, 284, 285, 286, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 1232, 160, 299, 0, 0, 1227, 161, 162, 163,
	0, 164, 1230, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 1235, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 1226, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 1234, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 0, 1233, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 668, 282, 148,
	0, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 309, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 621, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 627, 282, 148, 0, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 0, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 0, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 629, 310, 0, 0, 194, 0, 191,
	0, 0, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 0, 195, 0, 196, 197, 0, 199, 198, 0,
	316, 0, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 0, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 621, 216, 0, 0, 217, 320, 0, 218,
	0, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 0, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 0, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 623, 282, 148, 0, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 154, 155, 156, 288, 289,
	290, 291, 157, 292, 293, 0, 158, 294, 295, 159,
	0, 0, 296, 297, 298, 0, 160, 299, 0, 0,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 0, 168, 169, 0, 0, 0, 0, 0, 0,
	170, 171, 343, 172, 300, 173, 301, 302, 0, 174,
	0, 175, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 303, 179, 180, 181, 304, 305, 0, 0,
	0, 182, 183, 306, 0, 184, 0, 185, 0, 0,
	0, 0, 186, 307, 0, 308, 0, 187, 188, 189,
	190, 625, 310, 0, 0, 194, 0, 191, 0, 0,
	192, 311, 193, 312, 313, 314, 0, 315, 0, 0,
	195, 0, 196, 197, 0, 199, 198, 0, 316, 0,
	200, 0, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 0, 208, 209, 211, 210, 0,
	0, 0, 318, 212, 319, 213, 214, 0, 215, 0,
	621, 216, 0, 0, 217, 320, 0, 218, 0, 321,
	219, 220, 221, 222, 0, 322, 223, 323, 224, 0,
	225, 226, 227, 324, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	0, 242, 243, 325, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 0, 254, 245, 246, 255, 0,
	256, 327, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 329, 261, 330, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 332, 333, 0, 0, 270, 334,
	335, 0, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 336, 279, 280, 281, 337, 338,
	0, 618, 282, 148, 0, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 0, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 0, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 309,
	310, 0, 0, 194, 0, 191, 0, 0, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 0, 195, 0,
	196, 197, 0, 199, 198, 0, 316, 0, 200, 0,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 0, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 621, 216,
	0, 0, 217, 320, 0, 218, 0, 321, 219, 220,
	221, 222, 0, 322, 223, 323, 224, 0, 225, 226,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 0, 242,
	243, 325, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 0, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 489,
	282, 148, 0, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	492, 153, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 0, 160, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 309, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 491, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 148, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 0, 282, 151,
	152, 0, 153, 283, 284, 285, 286, 287, 0, 1872,
	0, 0, 154, 155, 156, 288, 289, 290, 291, 157,
	292, 293, 0, 158, 294, 295, 159, 0, 0, 296,
	297, 298, 0, 160, 299, 0, 0, 0, 161, 162,
	163, 0, 164, 0, 165, 166, 167, 0, 0, 168,
	169, 0, 0, 0, 0, 0, 0, 170, 171, 343,
	172, 300, 173, 301, 302, 0, 174, 0, 175, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 303,
	179, 180, 181, 304, 305, 0, 0, 0, 182, 183,
	306, 0, 184, 0, 185, 0, 0, 0, 0, 186,
	307, 0, 308, 0, 187, 188, 189, 190, 309, 310,
	0, 0, 194, 0, 191, 0, 0, 192, 311, 193,
	312, 313, 314, 0, 315, 0, 0, 195, 0, 196,
	197, 0, 199, 198, 0, 316, 0, 200, 0, 0,
	201, 0, 0, 202, 0, 203, 204, 205, 207, 317,
	206, 0, 208, 209, 211, 210, 0, 0, 0, 318,
	212, 319, 213, 214, 0, 215, 0, 0, 216, 0,
	0, 217, 320, 0, 218, 0, 321, 219, 220, 221,
	222, 0, 322, 223, 323, 224, 0, 225, 226, 227,
	324, 228, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 0, 241, 0, 242, 243,
	325, 244, 0, 248, 249, 250, 251, 0, 326, 252,
	253, 0, 254, 245, 246, 255, 0, 256, 327, 328,
	257, 0, 263, 258, 259, 247, 260, 262, 329, 261,
	330, 0, 264, 0, 265, 266, 267, 268, 269, 0,
	331, 332, 333, 0, 0, 270, 334, 335, 0, 271,
	272, 273, 274, 148, 0, 275, 276, 277, 0, 278,
	0, 336, 279, 280, 281, 337, 338, 0, 0, 282,
	151, 152, 0, 153, 283, 284, 285, 286, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 0, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 0, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 309,
	310, 0, 0, 194, 0, 191, 0, 0, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 0, 195, 0,
	196, 197, 0, 199, 198, 0, 316, 0, 200, 0,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 0, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 621, 216,
	0, 0, 217, 320, 0, 218, 0, 321, 219, 220,
	221, 222, 0, 322, 223, 323, 224, 0, 225, 226,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 0, 242,
	243, 325, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 0, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 1082,
	282, 148, 0, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	0, 153, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 0, 160, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 309, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 1080, 282, 148,
	0, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 309, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	148, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 0, 282, 151, 152, 1066,
	153, 283, 284, 285, 286, 287, 0, 0, 0, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	0, 160, 299, 0, 0, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 0, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 0, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 0, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 0, 0,
	194, 0, 191, 0, 0, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 0, 195, 0, 196, 197, 0,
	199, 198, 0, 316, 0, 200, 0, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 0,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 0, 0, 216, 0, 0, 217,
	320, 0, 218, 0, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 0, 242, 243, 325, 244,
	0, 248, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 0, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 0, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 0, 946, 282, 148, 0,
	0, 0, 283, 284, 285, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 152, 0, 153, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 0, 158,
	294, 295, 159, 0, 0, 296, 297, 298, 0, 160,
	299, 0, 0, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 0, 168, 169, 0, 0, 0,
	0, 0, 0, 170, 171, 343, 172, 300, 173, 301,
	302, 0, 174, 0, 175, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 303, 179, 180, 181, 304,
	305, 0, 0, 0, 182, 183, 306, 0, 184, 0,
	185, 0, 0, 0, 0, 186, 307, 0, 308, 0,
	187, 188, 189, 190, 948, 310, 0, 0, 194, 0,
	191, 0, 0, 192, 311, 193, 312, 313, 314, 0,
	315, 0, 0, 195, 0, 196, 197, 0, 199, 198,
	0, 316, 0, 200, 0, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 0, 208, 209,
	211, 210, 0, 0, 0, 318, 212, 319, 213, 214,
	0, 215, 0, 0, 216, 0, 0, 217, 320, 0,
	218, 0, 321, 219, 220, 221, 222, 0, 322, 223,
	323, 224, 0, 225, 226, 227, 324, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 0, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 0, 326, 252, 253, 0, 254, 245,
	246, 255, 0, 256, 327, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 0, 264, 0,
	265, 266, 267, 268, 269, 0, 331, 332, 333, 0,
	0, 270, 334, 335, 0, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 336, 279, 280,
	281, 337, 338, 0, 518, 282, 148, 0, 0, 0,
	283, 284, 285, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 0, 153, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 154, 155, 156, 288,
	289, 290, 291, 157, 292, 293, 0, 158, 294, 295,
	159, 0, 0, 296, 297, 712, 0, 160, 299, 0,
	0, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 0, 168, 169, 0, 0, 0, 0, 0,
	0, 170, 171, 343, 172, 300, 173, 301, 302, 0,
	174, 0, 175, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 303, 179, 180, 181, 304, 305, 0,
	0, 0, 182, 183, 306, 0, 184, 0, 185, 0,
	0, 0, 0, 186, 307, 0, 308, 0, 187, 188,
	189, 190, 309, 310, 0, 0, 194, 0, 191, 0,
	0, 192, 311, 193, 312, 313, 314, 0, 315, 0,
	0, 195, 0, 196, 197, 0, 199, 198, 0, 316,
	0, 200, 0, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 521, 0, 208, 209, 211, 210,
	0, 0, 0, 318, 212, 319, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 0, 218, 0,
	321, 219, 220, 221, 222, 0, 322, 223, 323, 224,
	0, 225, 226, 227, 324, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 0, 242, 243, 325, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 0, 254, 245, 246, 255,
	0, 256, 327, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 329, 261, 330, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 520, 332, 333, 0, 0, 713,
	334, 335, 0, 271, 272, 273, 274, 148, 0, 275,
	276, 277, 0, 278, 0, 336, 279, 280, 281, 337,
	338, 0, 0, 282, 151, 152, 703, 153, 283, 284,
	285, 286, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 0, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 0, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 309, 310, 0, 0, 194, 0, 191,
	0, 0, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 0, 195, 0, 196, 197, 0, 199, 198, 0,
	316, 0, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 0, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 0, 218,
	0, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 0, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 0, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 684, 282, 148, 0, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 154, 155, 156, 288, 289,
	290, 291, 157, 292, 293, 0, 158, 294, 295, 159,
	0, 0, 296, 297, 298, 0, 160, 299, 0, 0,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 0, 168, 169, 0, 0, 0, 0, 0, 0,
	170, 171, 343, 172, 300, 173, 301, 302, 0, 174,
	0, 175, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 303, 179, 180, 181, 304, 305, 0, 0,
	0, 182, 183, 306, 0, 184, 0, 185, 0, 0,
	0, 0, 186, 307, 0, 308, 0, 187, 188, 189,
	190, 683, 310, 0, 0, 194, 0, 191, 0, 0,
	192, 311, 193, 312, 313, 314, 0, 315, 0, 0,
	195, 0, 196, 197, 0, 199, 198, 0, 316, 0,
	200, 0, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 0, 208, 209, 211, 210, 0,
	0, 0, 318, 212, 319, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 0, 218, 0, 321,
	219, 220, 221, 222, 0, 322, 223, 323, 224, 0,
	225, 226, 227, 324, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	0, 242, 243, 325, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 0, 254, 245, 246, 255, 0,
	256, 327, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 329, 261, 330, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 332, 333, 0, 0, 270, 334,
	335, 0, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 336, 279, 280, 281, 337, 338,
	0, 680, 282, 148, 0, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 0, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 0, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 679,
	310, 0, 0, 194, 0, 191, 0, 0, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 0, 195, 0,
	196, 197, 0, 199, 198, 0, 316, 0, 200, 0,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 0, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 0, 218, 0, 321, 219, 220,
	221, 222, 0, 322, 223, 323, 224, 0, 225, 226,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 0, 242,
	243, 325, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 0, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 677,
	282, 148, 0, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	0, 153, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 0, 160, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 676, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 673, 282, 148,
	0, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 672, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 659, 282, 148, 0, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 0, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 0, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 661, 310, 0, 0, 194, 0, 191,
	0, 0, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 0, 195, 0, 196, 197, 0, 199, 198, 0,
	316, 0, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 0, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 0, 218,
	0, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 0, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 0, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 657, 282, 148, 0, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 154, 155, 156, 288, 289,
	290, 291, 157, 292, 293, 0, 158, 294, 295, 159,
	0, 0, 296, 297, 298, 0, 160, 299, 0, 0,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 0, 168, 169, 0, 0, 0, 0, 0, 0,
	170, 171, 343, 172, 300, 173, 301, 302, 0, 174,
	0, 175, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 303, 179, 180, 181, 304, 305, 0, 0,
	0, 182, 183, 306, 0, 184, 0, 185, 0, 0,
	0, 0, 186, 307, 0, 308, 0, 187, 188, 189,
	190, 309, 310, 0, 0, 194, 0, 191, 0, 0,
	192, 311, 193, 312, 313, 314, 0, 315, 0, 0,
	195, 0, 196, 197, 0, 199, 198, 0, 316, 0,
	200, 0, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 0, 208, 209, 211, 210, 0,
	0, 0, 318, 212, 319, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 0, 218, 0, 321,
	219, 220, 221, 222, 0, 322, 223, 323, 224, 0,
	225, 226, 227, 324, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	0, 242, 243, 325, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 0, 254, 245, 246, 255, 0,
	256, 327, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 329, 261, 330, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 332, 333, 0, 0, 270, 334,
	335, 0, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 336, 279, 280, 281, 337, 338,
	0, 655, 282, 148, 0, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 0, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 0, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 309,
	310, 0, 0, 194, 0, 191, 0, 0, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 0, 195, 0,
	196, 197, 0, 199, 198, 0, 316, 0, 200, 0,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 0, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 0, 218, 0, 321, 219, 220,
	221, 222, 0, 322, 223, 323, 224, 0, 225, 226,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 0, 242,
	243, 325, 244, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 0, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 651,
	282, 148, 0, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	0, 153, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 0, 160, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 653, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 632, 282, 148,
	0, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 634, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 630, 282, 148, 0, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 0, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 0, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 309, 310, 0, 0, 194, 0, 191,
	0, 0, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 0, 195, 0, 196, 197, 0, 199, 198, 0,
	316, 0, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 0, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 0, 218,
	0, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 0, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 0, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 569, 282, 148, 0, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 154, 155, 156, 288, 289,
	290, 291, 157, 292, 293, 0, 158, 294, 295, 159,
	0, 0, 296, 297, 298, 0, 160, 299, 0, 0,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 0, 168, 169, 0, 0, 0, 0, 0, 0,
	170, 171, 343, 172, 300, 173, 301, 302, 0, 174,
	0, 175, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 303, 179, 180, 181, 304, 305, 0, 0,
	0, 182, 183, 306, 0, 184, 0, 185, 0, 0,
	0, 0, 186, 307, 0, 308, 0, 187, 188, 189,
	190, 309, 310, 0, 0, 194, 0, 191, 0, 0,
	192, 311, 193, 312, 313, 314, 0, 315, 0, 0,
	195, 0, 196, 197, 0, 199, 198, 0, 316, 0,
	200, 0, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 0, 208, 209, 211, 210, 0,
	0, 0, 318, 212, 319, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 0, 218, 0, 321,
	219, 220, 221, 222, 0, 322, 223, 323, 224, 0,
	225, 226, 227, 324, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	0, 242, 243, 325, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 571, 0, 254, 245, 246, 255, 0,
	256, 327, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 329, 261, 330, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 332, 333, 0, 0, 270, 334,
	335, 0, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 336, 279, 280, 281, 337, 338,
	0, 565, 282, 148, 0, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 0, 153, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 0, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 0, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 309,
	310, 0, 0, 194, 0, 191, 0, 0, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 0, 195, 0,
	196, 197, 0, 199, 198, 0, 316, 0, 200, 0,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 0, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 0, 218, 0, 321, 219, 220,
	221, 222, 0, 322, 223, 323, 224, 0, 225, 226,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 0, 242,
	243, 325, 244, 0, 567, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 0, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 518,
	282, 148, 0, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	0, 153, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 0, 513, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 309, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 512,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 521,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 514,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 515,
	0, 254, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 520,
	332, 333, 0, 0, 517, 334, 335, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 507, 282, 148,
	0, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 0, 153,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 309, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 487, 282, 148, 0, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 0, 153, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 0, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 0, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 309, 310, 0, 0, 194, 0, 191,
	0, 0, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 0, 195, 0, 196, 197, 0, 199, 198, 0,
	316, 0, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 0, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 0, 218,
	0, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 0, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 0, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 485, 282, 148, 0, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 0, 153, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 154, 155, 156, 288, 289,
	290, 291, 157, 292, 293, 0, 158, 294, 295, 159,
	0, 0, 296, 297, 298, 0, 160, 299, 0, 0,
	0, 161, 162, 163, 0, 164, 0, 165, 166, 167,
	0, 0, 168, 169, 0, 0, 0, 0, 0, 0,
	170, 171, 343, 172, 300, 173, 301, 302, 0, 174,
	0, 175, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 303, 179, 180, 181, 304, 305, 0, 0,
	0, 182, 183, 306, 0, 184, 0, 185, 0, 0,
	0, 0, 186, 307, 0, 308, 0, 187, 188, 189,
	190, 309, 310, 0, 0, 194, 0, 191, 0, 0,
	192, 311, 193, 312, 313, 314, 0, 315, 0, 0,
	195, 0, 196, 197, 0, 199, 198, 0, 316, 0,
	200, 0, 0, 201, 0, 0, 202, 0, 203, 204,
	205, 207, 317, 206, 0, 208, 209, 211, 210, 0,
	0, 0, 318, 212, 319, 213, 214, 0, 215, 0,
	0, 216, 0, 0, 217, 320, 0, 218, 0, 321,
	219, 220, 221, 222, 0, 322, 223, 323, 224, 0,
	225, 226, 227, 324, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 0, 241,
	0, 242, 243, 325, 244, 0, 248, 249, 250, 251,
	0, 326, 252, 253, 0, 254, 245, 246, 255, 0,
	256, 327, 328, 257, 0, 263, 258, 259, 247, 260,
	262, 329, 261, 330, 0, 264, 0, 265, 266, 267,
	268, 269, 0, 331, 332, 333, 0, 0, 270, 334,
	335, 0, 271, 272, 273, 274, 148, 0, 275, 276,
	277, 0, 278, 0, 336, 279, 280, 281, 337, 338,
	0, 0, 282, 151, 152, 0, 153, 283, 284, 285,
	286, 287, 0, 0, 0, 0, 154, 155, 156, 288,
	289, 290, 291, 157, 292, 293, 0, 158, 294, 295,
	159, 0, 0, 296, 297, 298, 0, 160, 299, 0,
	0, 0, 161, 162, 163, 0, 164, 0, 165, 166,
	167, 0, 0, 168, 169, 0, 0, 0, 0, 0,
	0, 170, 171, 343, 172, 300, 173, 301, 302, 0,
	174, 0, 175, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 303, 179, 180, 181, 304, 305, 0,
	0, 0, 182, 183, 306, 0, 184, 0, 185, 0,
	0, 0, 0, 186, 307, 0, 308, 0, 187, 188,
	189, 190, 309, 310, 0, 0, 194, 0, 191, 0,
	0, 192, 311, 193, 312, 313, 314, 0, 315, 0,
	0, 195, 0, 196, 197, 0, 199, 198, 0, 316,
	0, 200, 0, 0, 201, 0, 0, 202, 0, 203,
	204, 205, 207, 317, 206, 0, 208, 209, 211, 210,
	0, 0, 0, 318, 212, 319, 213, 214, 0, 215,
	0, 0, 216, 0, 0, 217, 320, 0, 218, 0,
	321, 219, 220, 221, 222, 0, 322, 223, 323, 224,
	0, 225, 226, 227, 324, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 0,
	241, 0, 242, 243, 325, 244, 0, 248, 249, 250,
	251, 0, 326, 252, 253, 0, 254, 245, 246, 255,
	0, 256, 327, 328, 257, 0, 263, 258, 259, 247,
	260, 262, 329, 261, 330, 0, 264, 0, 265, 266,
	267, 268, 269, 0, 331, 332, 333, 0, 0, 270,
	334, 335, 0, 271, 272, 273, 274, 148, 0, 275,
	276, 277, 0, 278, 0, 336, 279, 280, 281, 337,
	338, 0, 0, 282, 151, 152, 0, 153, 283, 284,
	285, 286, 287, 0, 0, 0, 0, 154, 155, 156,
	288, 289, 290, 291, 157, 292, 293, 0, 158, 294,
	295, 159, 0, 0, 296, 297, 298, 0, 160, 299,
	0, 0, 0, 161, 162, 163, 0, 164, 0, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 170, 171, 343, 172, 300, 173, 301, 302,
	0, 174, 0, 175, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 303, 179, 180, 181, 304, 305,
	0, 0, 0, 182, 183, 306, 0, 184, 0, 185,
	0, 0, 0, 0, 186, 307, 0, 308, 0, 187,
	188, 189, 190, 1547, 310, 0, 0, 194, 0, 191,
	0, 0, 192, 311, 193, 312, 313, 314, 0, 315,
	0, 0, 195, 0, 196, 197, 0, 199, 198, 0,
	316, 0, 200, 0, 0, 201, 0, 0, 202, 0,
	203, 204, 205, 207, 317, 206, 0, 208, 209, 211,
	210, 0, 0, 0, 318, 212, 319, 213, 214, 0,
	215, 0, 0, 216, 0, 0, 217, 320, 0, 218,
	0, 321, 219, 220, 221, 222, 0, 322, 223, 323,
	224, 0, 225, 226, 227, 324, 228, 229, 0, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	0, 241, 0, 242, 243, 325, 244, 0, 248, 249,
	250, 251, 0, 326, 252, 253, 0, 254, 245, 246,
	255, 0, 256, 327, 328, 257, 0, 263, 258, 259,
	247, 260, 262, 329, 261, 330, 0, 264, 0, 265,
	266, 267, 268, 269, 0, 331, 332, 333, 0, 0,
	270, 334, 335, 0, 271, 272, 273, 274, 148, 0,
	275, 276, 277, 0, 278, 0, 336, 279, 280, 281,
	337, 338, 0, 0, 282, 151, 152, 0, 153, 283,
	284, 285, 286, 287, 0, 0, 0, 0, 154, 155,
	156, 288, 289, 290, 291, 157, 292, 293, 0, 158,
	294, 295, 159, 0, 0, 296, 297, 298, 0, 160,
	299, 0, 0, 0, 161, 162, 163, 0, 164, 0,
	165, 166, 167, 0, 0, 168, 169, 0, 0, 0,
	0, 0, 0, 170, 171, 343, 172, 300, 173, 301,
	302, 0, 174, 0, 175, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 303, 179, 180, 181, 304,
	305, 0, 0, 0, 182, 183, 306, 0, 184, 0,
	185, 0, 0, 0, 0, 186, 307, 0, 308, 0,
	187, 188, 189, 190, 1545, 310, 0, 0, 194, 0,
	191, 0, 0, 192, 311, 193, 312, 313, 314, 0,
	315, 0, 0, 195, 0, 196, 197, 0, 199, 198,
	0, 316, 0, 200, 0, 0, 201, 0, 0, 202,
	0, 203, 204, 205, 207, 317, 206, 0, 208, 209,
	211, 210, 0, 0, 0, 318, 212, 319, 213, 214,
	0, 215, 0, 0, 216, 0, 0, 217, 320, 0,
	218, 0, 321, 219, 220, 221, 222, 0, 322, 223,
	323, 224, 0, 225, 226, 227, 324, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 0, 241, 0, 242, 243, 325, 244, 0, 248,
	249, 250, 251, 0, 326, 252, 253, 0, 254, 245,
	246, 255, 0, 256, 327, 328, 257, 0, 263, 258,
	259, 247, 260, 262, 329, 261, 330, 0, 264, 0,
	265, 266, 267, 268, 269, 0, 331, 332, 333, 0,
	0, 270, 334, 335, 0, 271, 272, 273, 274, 148,
	0, 275, 276, 277, 0, 278, 0, 336, 279, 280,
	281, 337, 338, 0, 0, 282, 151, 152, 0, 153,
	283, 284, 285, 286, 287, 0, 0, 0, 0, 154,
	155, 156, 288, 289, 290, 291, 157, 292, 293, 0,
	158, 294, 295, 159, 0, 0, 296, 297, 298, 0,
	160, 299, 0, 0, 0, 161, 162, 163, 0, 164,
	0, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	0, 0, 0, 0, 170, 171, 343, 172, 300, 173,
	301, 302, 0, 174, 0, 175, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 303, 179, 180, 181,
	304, 305, 0, 0, 0, 182, 183, 306, 0, 184,
	0, 185, 0, 0, 0, 0, 186, 307, 0, 308,
	0, 187, 188, 189, 190, 1534, 310, 0, 0, 194,
	0, 191, 0, 0, 192, 311, 193, 312, 313, 314,
	0, 315, 0, 0, 195, 0, 196, 197, 0, 199,
	198, 0, 316, 0, 200, 0, 0, 201, 0, 0,
	202, 0, 203, 204, 205, 207, 317, 206, 0, 208,
	209, 211, 210, 0, 0, 0, 318, 212, 319, 213,
	214, 0, 215, 0, 0, 216, 0, 0, 217, 320,
	0, 218, 0, 321, 219, 220, 221, 222, 0, 322,
	223, 323, 224, 0, 225, 226, 227, 324, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 0, 241, 0, 242, 243, 325, 244, 0,
	248, 249, 250, 251, 0, 326, 252, 253, 0, 254,
	245, 246, 255, 0, 256, 327, 328, 257, 0, 263,
	258, 259, 247, 260, 262, 329, 261, 330, 0, 264,
	0, 265, 266, 267, 268, 269, 0, 331, 332, 333,
	0, 0, 270, 334, 335, 0, 271, 272, 273, 274,
	148, 0, 275, 276, 277, 0, 278, 0, 336, 279,
	280, 281, 337, 338, 0, 0, 282, 151, 152, 0,
	153, 283, 284, 285, 286, 287, 0, 0, 0, 0,
	154, 155, 156, 288, 289, 290, 291, 157, 292, 293,
	0, 158, 294, 295, 159, 0, 0, 296, 297, 298,
	0, 160, 299, 0, 0, 0, 161, 162, 163, 0,
	164, 0, 165, 166, 167, 0, 0, 168, 169, 0,
	0, 0, 0, 0, 0, 170, 171, 343, 172, 300,
	173, 301, 302, 0, 174, 0, 175, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 303, 179, 180,
	181, 304, 305, 0, 0, 0, 182, 183, 306, 0,
	184, 0, 185, 0, 0, 0, 0, 186, 307, 0,
	308, 0, 187, 188, 189, 190, 309, 310, 0, 0,
	194, 0, 191, 0, 0, 192, 311, 193, 312, 313,
	314, 0, 315, 0, 0, 195, 0, 196, 197, 0,
	199, 198, 0, 316, 0, 200, 0, 0, 201, 0,
	0, 202, 0, 203, 204, 205, 207, 317, 206, 0,
	208, 209, 211, 210, 0, 0, 0, 318, 212, 319,
	213, 214, 0, 215, 0, 0, 216, 0, 0, 217,
	320, 0, 218, 0, 321, 219, 220, 221, 222, 0,
	322, 223, 323, 224, 0, 225, 226, 227, 324, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 0, 241, 0, 242, 243, 325, 244,
	0, 567, 249, 250, 251, 0, 326, 252, 253, 0,
	254, 245, 246, 255, 0, 256, 327, 328, 257, 0,
	263, 258, 259, 247, 260, 262, 329, 261, 330, 0,
	264, 0, 265, 266, 267, 268, 269, 0, 331, 332,
	333, 0, 0, 270, 334, 335, 0, 271, 272, 273,
	274, 148, 0, 275, 276, 277, 0, 278, 0, 336,
	279, 280, 281, 337, 338, 0, 0, 282, 151, 152,
	0, 153, 283, 284, 285, 286, 287, 0, 958, 0,
	0, 154, 155, 156, 288, 289, 290, 291, 157, 292,
	293, 0, 158, 294, 295, 159, 0, 0, 296, 297,
	298, 0, 160, 299, 0, 0, 0, 161, 162, 163,
	0, 164, 0, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 0, 0, 0, 0, 170, 171, 343, 172,
	300, 173, 301, 302, 0, 174, 0, 175, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 303, 179,
	180, 181, 304, 305, 0, 0, 0, 182, 183, 306,
	0, 184, 0, 185, 0, 0, 0, 0, 186, 307,
	0, 308, 0, 187, 188, 189, 190, 309, 310, 0,
	0, 194, 0, 191, 0, 0, 192, 311, 193, 312,
	313, 314, 0, 315, 0, 0, 195, 0, 196, 197,
	0, 199, 198, 0, 316, 0, 200, 0, 0, 201,
	0, 0, 202, 0, 203, 204, 205, 207, 317, 206,
	0, 208, 209, 211, 210, 0, 0, 0, 318, 212,
	319, 213, 214, 0, 215, 0, 0, 216, 0, 0,
	217, 320, 0, 218, 0, 321, 219, 220, 221, 222,
	0, 322, 223, 323, 224, 0, 225, 226, 227, 324,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 0, 241, 0, 242, 243, 325,
	244, 0, 248, 249, 250, 251, 0, 326, 252, 253,
	0, 0, 245, 246, 255, 0, 256, 327, 328, 257,
	0, 263, 258, 259, 247, 260, 262, 329, 261, 330,
	0, 264, 0, 265, 266, 267, 268, 269, 0, 331,
	332, 333, 0, 0, 270, 334, 335, 0, 271, 272,
	273, 274, 148, 0, 275, 276, 277, 0, 278, 0,
	336, 279, 280, 281, 337, 338, 0, 0, 282, 151,
	152, 0, 153, 283, 284, 285, 286, 287, 0, 0,
	0, 0, 154, 155, 156, 288, 289, 290, 291, 157,
	292, 293, 0, 158, 294, 295, 159, 0, 0, 296,
	297, 298, 0, 160, 299, 0, 0, 0, 161, 162,
	163, 0, 164, 0, 165, 166, 167, 0, 0, 168,
	169, 0, 0, 0, 0, 0, 0, 170, 171, 343,
	172, 300, 173, 301, 302, 0, 174, 0, 175, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 303,
	179, 180, 181, 304, 305, 0, 0, 0, 182, 183,
	306, 0, 184, 0, 185, 0, 0, 0, 0, 186,
	307, 0, 308, 0, 187, 188, 189, 190, 309, 310,
	0, 0, 194, 0, 191, 0, 0, 192, 311, 193,
	312, 313, 314, 0, 315, 0, 0, 195, 0, 196,
	197, 0, 199, 198, 0, 316, 0, 200, 0, 0,
	201, 0, 0, 202, 0, 203, 204, 205, 207, 317,
	206, 0, 208, 209, 211, 210, 0, 0, 0, 318,
	212, 319, 213, 214, 0, 215, 0, 0, 216, 0,
	0, 217, 320, 0, 218, 0, 321, 219, 220, 221,
	222, 0, 322, 223, 323, 224, 0, 225, 226, 227,
	324, 602, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 0, 241, 0, 242, 243,
	325, 244, 0, 248, 249, 250, 251, 0, 326, 252,
	253, 0, 254, 245, 246, 255, 0, 256, 327, 328,
	257, 0, 263, 258, 259, 247, 260, 262, 329, 261,
	330, 0, 264, 0, 265, 266, 267, 268, 269, 0,
	331, 332, 333, 0, 0, 270, 334, 335, 0, 271,
	272, 273, 274, 148, 0, 275, 276, 277, 0, 278,
	0, 336, 279, 280, 281, 337, 338, 0, 0, 282,
	151, 152, 0, 153, 283, 284, 285, 286, 287, 0,
	0, 0, 0, 154, 155, 156, 288, 289, 290, 291,
	157, 292, 293, 0, 158, 294, 295, 159, 0, 0,
	296, 297, 298, 0, 160, 299, 0, 0, 0, 161,
	162, 163, 0, 164, 0, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 170, 171,
	343, 172, 300, 173, 301, 302, 0, 174, 0, 175,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	303, 179, 180, 181, 304, 305, 0, 0, 0, 182,
	183, 306, 0, 184, 0, 185, 0, 0, 0, 0,
	186, 307, 0, 308, 0, 187, 188, 189, 190, 309,
	310, 0, 0, 194, 0, 191, 0, 0, 192, 311,
	193, 312, 313, 314, 0, 315, 0, 0, 195, 0,
	196, 197, 0, 199, 198, 0, 316, 0, 200, 0,
	0, 201, 0, 0, 202, 0, 203, 204, 205, 207,
	317, 206, 0, 208, 209, 211, 210, 0, 0, 0,
	318, 212, 319, 213, 214, 0, 215, 0, 0, 216,
	0, 0, 217, 320, 0, 218, 0, 321, 219, 220,
	0, 222, 0, 322, 223, 323, 224, 0, 225, 0,
	227, 324, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 0, 241, 0, 242,
	243, 325, 0, 0, 248, 249, 250, 251, 0, 326,
	252, 253, 0, 254, 245, 246, 255, 0, 256, 327,
	328, 257, 0, 263, 258, 259, 247, 260, 262, 329,
	261, 330, 0, 264, 0, 265, 266, 267, 268, 269,
	0, 331, 332, 333, 0, 0, 270, 334, 335, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 336, 279, 280, 281, 337, 338, 0, 0,
	282, 0, 0, 0, 0, 283, 284, 285, 286, 1115,
	1116, 0, 1135, 1136, 1137, 1145, 1146, 1147, 0, 0,
	0, 0, 0, 0, 0, 0, 1138, 0, 0, 0,
	0, 0, 0, 1118, 0, 0, 1149, 0, 0, 0,
	0, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146, 1147,
	0, 0, 0, 0, 0, 0, 1117, 0, 1138, 0,
	0, 0, 1132, 0, 0, 1118, 0, 0, 1149, 0,
	0, 0, 0, 1115, 1116, 0, 1135, 1136, 1137, 1145,
	1146, 1147, 0, 0, 0, 0, 0, 0, 1117, 0,
	1138, 0, 0, 0, 1132, 0, 0, 1118, 0, 0,
	1149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	1117, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 1142, 1150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1140,
	0, 0, 0, 1142, 1150, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1139, 1140, 0, 0, 0, 1142, 1150, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 1140, 0, 0, 0, 0, 0, 1133,
	0, 0, 0, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1141,
	0, 1143, 1129, 1130, 1131, 1144, 0, 1128, 1126, 1127,
	1119, 1120, 1121, 1122, 1124, 1125, 0, 0, 0, 0,
	2234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 1129, 1130, 1131, 1144, 0, 1128,
	1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0, 0,
	0, 0, 2232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1141, 0, 0, 1129, 1130, 1131, 1144,
	0, 1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125,
	0, 0, 1115, 1116, 2177, 1135, 1136, 1137, 1145, 1146,
	1147, 0, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 1149,
	0, 0, 0, 0, 1115, 1116, 0, 1135, 1136, 1137,
	1145, 1146, 1147, 0, 0, 0, 0, 0, 0, 1117,
	0, 1138, 0, 0, 0, 1132, 0, 0, 1118, 0,
	0, 1149, 0, 0, 0, 0, 1115, 1116, 0, 1135,
	1136, 1137, 1145, 1146, 1147, 0, 0, 0, 0, 0,
	0, 1117, 0, 1138, 0, 0, 0, 1132, 0, 0,
	1118, 0, 0, 1149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 1142, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 1142, 1150, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 1148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 1140, 0, 0, 0, 1142, 1150,
	1133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 1140, 0, 0, 0,
	0, 0, 1133, 0, 0, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 1143, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0,
	0, 0, 0, 2172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 1129, 1130, 1131,
	1144, 0, 1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124,
	1125, 0, 0, 0, 0, 2168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1141, 0, 0, 1129,
	1130, 1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121,
	1122, 1124, 1125, 0, 0, 1115, 1116, 2107, 1135, 1136,
	1137, 1145, 1146, 1147, 0, 0, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 1149, 0, 0, 0, 0, 1115, 1116, 0,
	1135, 1136, 1137, 1145, 1146, 1147, 0, 0, 0, 0,
	0, 0, 1117, 0, 1138, 0, 0, 0, 1132, 0,
	0, 1118, 0, 0, 1149, 0, 0, 0, 0, 1115,
	1116, 0, 1135, 1136, 1137, 1145, 1146, 1147, 0, 0,
	0, 0, 0, 0, 1117, 0, 1138, 0, 0, 0,
	1132, 0, 0, 1118, 0, 0, 1149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 0, 1132, 0, 0, 0, 0, 1142, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 0, 0, 0, 1142,
	1150, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 1140, 0, 0,
	0, 1142, 1150, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 1140,
	0, 0, 0, 0, 0, 1133, 0, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 1143, 1129, 1130,
	1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121, 1122,
	1124, 1125, 0, 0, 0, 0, 2085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	1129, 1130, 1131, 1144, 0, 1128, 1126, 1127, 1119, 1120,
	1121, 1122, 1124, 1125, 0, 0, 0, 0, 2084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1141,
	0, 0, 1129, 1130, 1131, 1144, 0, 1128, 1126, 1127,
	1119, 1120, 1121, 1122, 1124, 1125, 0, 0, 1115, 1116,
	1974, 1135, 1136, 1137, 1145, 1146, 1147, 0, 0, 0,
	0, 0, 0, 0, 0, 1138, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 1149, 0, 0, 0, 0,
	1115, 1116, 0, 1135, 1136, 1137, 1145, 1146, 1147, 0,
	0, 0, 0, 0, 0, 1117, 0, 1138, 0, 0,
	0, 1132, 0, 0, 1118, 0, 0, 1149, 0, 0,
	0, 0, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146,
	1147, 0, 0, 0, 0, 0, 0, 1117, 0, 1138,
	0, 0, 0, 1132, 0, 0, 1118, 0, 0, 1149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
	1142, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1140, 0,
	0, 0, 1142, 1150, 1133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 1148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	1140, 0, 0, 0, 1142, 1150, 1133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 1140, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	1143, 1129, 1130, 1131, 1144, 0, 1128, 1126, 1127, 1119,
	1120, 1121, 1122, 1124, 1125, 0, 0, 0, 0, 1908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1141, 0, 0, 1129, 1130, 1131, 1144, 0, 1128, 1126,
	1127, 1119, 1120, 1121, 1122, 1124, 1125, 0, 0, 0,
	0, 1892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0,
	0, 1115, 1116, 1843, 1135, 1136, 1137, 1145, 1146, 1147,
	0, 0, 0, 0, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 1149, 0,
	0, 0, 0, 1115, 1116, 0, 1135, 1136, 1137, 1145,
	1146, 1147, 0, 0, 0, 0, 0, 0, 1117, 0,
	1138, 0, 0, 0, 1132, 0, 0, 1118, 0, 0,
	1149, 0, 0, 0, 0, 1115, 1116, 0, 1135, 1136,
	1137, 1145, 1146, 1147, 0, 0, 0, 0, 0, 0,
	1117, 0, 1138, 0, 0, 0, 1132, 0, 0, 1118,
	0, 0, 1149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 1142, 1150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 1148,
	1712, 1713, 0, 1730, 1731, 1732, 0, 0, 0, 0,
	0, 1140, 0, 0, 0, 1142, 1150, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 2317,
	0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 1140, 0, 0, 0, 1142, 1150, 1133,
	0, 0, 0, 1727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1139, 1140, 0, 0, 0, 0,
	0, 1133, 0, 0, 0, 1134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	0, 0, 0, 1718, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	2316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 1733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 1728, 0, 0, 0,
	0, 1141, 0, 1143, 1129, 1130, 1131, 1144, 0, 1128,
	1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1141, 0, 0, 1129, 1130, 1131, 1144,
	0, 1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125,
	0, 0, 1679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1729, 1141, 0, 0, 1129, 1130,
	1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121, 1122,
	1124, 1125, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146,
	1147, 0, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 1149,
	0, 0, 0, 0, 1115, 1116, 0, 1135, 1136, 1137,
	1145, 1146, 1147, 0, 0, 0, 0, 0, 0, 1117,
	0, 1138, 0, 0, 0, 1132, 1358, 0, 1118, 0,
	0, 1149, 0, 1724, 1725, 1726, 0, 0, 1723, 1721,
	1722, 1714, 1715, 1716, 1717, 1719, 1720, 0, 0, 1153,
	0, 1117, 0, 0, 0, 1115, 1116, 1132, 1135, 1136,
	1137, 1145, 1146, 1147, 0, 0, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 1123, 1152, 1744, 0, 1118,
	1743, 0, 1149, 0, 0, 1359, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 1150, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 0, 0, 1123, 1132, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 1142, 1150, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 1140, 0, 0, 0, 1123, 0,
	1133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1142, 1150, 0,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 1148, 0, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 0, 0, 0, 0,
	1143, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 0,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 1129, 1130, 1131, 1144, 1134,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 1129, 1130, 1131,
	1144, 0, 1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124,
	1125, 0, 0, 0, 0, 1115, 1116, 0, 1135, 1136,
	1137, 1145, 1146, 1147, 0, 0, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 1149, 0, 0, 1141, 0, 0, 1129, 1130,
	1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121, 1122,
	1124, 1125, 1117, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 1115, 1116, 0, 1135,
	1136, 1137, 1145, 1146, 1147, 0, 0, 0, 0, 0,
	0, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 1149, 0, 0, 0, 0, 1115, 1116,
	0, 1135, 1136, 1137, 1145, 1146, 1147, 0, 1123, 0,
	0, 0, 0, 1117, 0, 1138, 0, 0, 0, 1132,
	0, 0, 1118, 0, 0, 1149, 0, 1142, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 0, 1117, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 1140, 0, 0, 0, 0,
	0, 1133, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 583, 1142, 1150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 1148, 0, 1750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 0, 0,
	1142, 1150, 1133, 0, 0, 0, 0, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 1139, 1140, 0,
	0, 0, 0, 0, 1133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 1141, 0, 0, 1129, 1130,
	1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121, 1122,
	1124, 1125, 1134, 0, 0, 0, 0, 1896, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 1115, 1116, 0,
	1135, 1136, 1137, 1145, 1146, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 1138, 0, 0, 0, 1745, 0,
	0, 1118, 0, 0, 1149, 0, 1141, 0, 0, 1129,
	1130, 1131, 1144, 0, 1128, 1126, 1127, 1119, 1120, 1121,
	1122, 1124, 1125, 0, 1117, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 1129, 1130, 1131, 1144, 0, 1128, 1126, 1127, 1119,
	1120, 1121, 1122, 1124, 1125, 0, 0, 0, 0, 0,
	1115, 1116, 0, 1135, 1136, 1137, 1145, 1146, 1147, 0,
	0, 0, 0, 0, 0, 0, 0, 1138, 0, 0,
	1123, 0, 0, 0, 1118, 0, 0, 1149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	1150, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 1132, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1140, 0, 0,
	0, 0, 0, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146,
	1147, 0, 1142, 1150, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 1703, 0, 0, 1118, 0, 1148, 1149,
	0, 1134, 0, 0, 0, 0, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 1143, 1133, 0, 0, 1117,
	0, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 1141, 0, 0,
	1129, 1130, 1131, 1144, 1134, 1128, 1126, 1127, 1119, 1120,
	1121, 1122, 1124, 1125, 1142, 1150, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 1116,
	1148, 1135, 1136, 1137, 1145, 1146, 1147, 0, 0, 0,
	0, 0, 1140, 0, 0, 1138, 0, 0, 1133, 0,
	0, 0, 1118, 0, 0, 1149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 0, 1117, 0, 0, 0, 0,
	1141, 1132, 0, 1129, 1130, 1131, 1144, 0, 1128, 1126,
	1127, 1119, 1120, 1121, 1122, 1124, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 0, 0,
	0, 1115, 1116, 0, 1135, 1136, 1137, 1145, 1146, 1147,
	1143, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 1149, 0,
	1142, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 0, 1117, 0,
	0, 0, 0, 0, 1132, 0, 0, 0, 1140, 0,
	0, 0, 0, 0, 1133, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 1129, 1130, 1131, 1144, 0,
	1128, 1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 1150, 0, 0, 0, 0, 0,
	0, 0, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 1140, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 989, 1014, 981, 1005,
	1004, 0, 0, 983, 982, 0, 0, 0, 1016, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 1129, 1130, 1131, 1144, 0, 1128, 1126, 1127, 1119,
	1120, 1121, 1122, 1124, 1125, 1134, 0, 0, 0, 0,
	1010, 0, 1002, 1001, 0, 0, 0, 0, 0, 1143,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 0, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 992, 991, 993,
	994, 995, 0, 1013, 0, 0, 530, 0, 0, 0,
	0, 1141, 0, 0, 1129, 1130, 1131, 1144, 528, 1128,
	1126, 1127, 1119, 1120, 1121, 1122, 1124, 1125, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	1003, 0, 0, 532, 990, 0, 0, 0, 534, 535,
	0, 0, 541, 0, 997, 989, 1014, 981, 1005, 1004,
	0, 0, 983, 982, 547, 533, 0, 1016, 1015, 998,
	0, 0, 0, 1380, 1378, 1379, 1382, 1381, 0, 0,
	0, 0, 0, 0, 0, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 1010,
	0, 1002, 1001, 0, 531, 0, 0, 996, 987, 0,
	1000, 0, 0, 0, 0, 0, 0, 1018, 536, 537,
	0, 0, 0, 0, 0, 0, 0, 984, 999, 0,
	1011, 1012, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 0, 0, 0, 0, 1017, 992, 991, 993, 994,
	995, 0, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
	0, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 546, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	0, 543, 0, 0, 0, 548, 986, 0, 0, 0,
	540, 0, 0, 0, 0, 0, 996, 987, 0, 0,
	0, 0, 0, 0, 542, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 1011,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 1017,
}
var sqlPact = [...]int{

	3343, -1000, 73, -1000, -1000, 1893, 1891, -1000, -1000, 1887,
	-1000, 1883, -1000, 1879, 1878, 1876, 1875, 1873, 1870, 1868,
	1867, -1000, -1000, -1000, -1000, 1860, 1851, 1848, 1844, 925,
	1840, 1839, 1837, 1836, 20098, 19800, 30962, 839, 1835, 1833,
	1829, 1828, 1826, 1825, 806, 909, 1823, 1814, 1813, 1811,
	1194, 5414, 30681, 30383, 23597, 2943, 2521, 30085, -1000, -1000,
	1810, 1809, 1808, -1000, 29787, 36533, 1807, 1801, 1800, 1799,
	1798, 1796, 1795, 1794, 1789, 1788, 1787, -1000, 1786, 1785,
	1784, 1783, 1780, 29489, 29191, 1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 188, -1000, 878,
	222, 915, 907, 900, 884, 863, 32648, 30962, 1778, 1665,
	229, 1776, 498, 23299, 3343, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23001, 22703, 28893, 28595, -1000, -1000, -1000, -1000,
	-1000, 687, 70, 21250, 30962, -1000, 77, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1437, 318, 77, -1000, -1000, 28297, 27999, 27701, 1348, 27403,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1543, 1478, 1454,
	22405, -1000, 27105, 26807, 26509, 26211, -1000, -1000, -1000, -1000,
	-1000, 15346, -1000, -1000, -1000, -1000, -1000, 1772, 1770, 1767,
	1765, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 373, -1000, 372, -1000,
	-1000, 25913, -1000, 1094, -1000, -1000, 71, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1087, -1000, -1000, -1000, -1000,
	-1000, -1000, 1969, 1078, 370, 25632, -1000, 1198, -1000, -1000,
	511, 1685, 648, -1000, 87, -1000, 1336, -1000, 19502, 1066,
	1649, 1248, 1542, 1968, 1541, 1536, 1535, 1530, 1525, 1506,
	1061, 583, 1967, 1436, 1434, -1000, -1000, -1000, 509, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 30962, -1000, -1000,
	-1000, 30962, 24159, -1000, -1000, 878, -1000, -1000, -1000, 1269,
	1647, 1647, 1647, 1677, 193, 168, -1000, 188, -1000, 1071,
	-1000, -1000, 1071, -1000, -1000, -1000, -1000, -1000, -1000, 683,
	32086, 62, 30962, -1000, 367, 62, -1000, -1000, 12221, 12221,
	-1000, -1000, -1000, 366, -1000, -1000, -1000, 9272, -1000, -1000,
	412, 18887, -1000, -1000, 891, 1563, 593, -1000, 944, 1546,
	-1000, 924, -1000, 774, 1534, -106, 20393, 21250, 70, 69,
	-1000, -1000, -1000, 5108, 20393, 782, 18044, 77, -1000, -1000,
	-1000, -1000, 364, 1172, 514, -1000, 146, -1000, 25334, -1000,
	514, 1170, -1000, 24159, -1000, 30962, -1000, 30962, -1000, 821,
	32367, 133, 1533, -1000, -1000, 133, 1532, -1000, 132, 1531,
	-1000, -1000, -1000, 1522, -1000, -1000, 61, -1000, -1000, -1000,
	-1000, -1000, -1000, 498, -1000, -1000, -1000, -1000, 1740, 36566,
	-1000, 13498, -1000, -1000, 20674, 1265, 20674, -1000, -1000, 30962,
	13498, -1000, 1739, 1173, -1000, -1000, 67, 66, 1227, 1287,
	1416, -1000, -1000, -1000, 1606, 15951, 15656, 85, 5414, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25036,
	1054, -1000, 1444, 20674, -1000, 30962, -1000, -1000, 30962, -1000,
	30962, -1000, 30962, -1000, 30962, -1000, 30962, -1000, 30962, -1000,
	1214, -1000, -1000, 24755, 24457, -1000, 861, 732, -1000, -1000,
	-1000, 145, -1000, -1000, 1269, -1000, 1099, 1328, 12541, 1254,
	13498, 188, -1000, -1000, 188, 188, 13498, -1000, -1000, -1000,
	64, 63, -1000, 32086, -1000, 30962, 62, 1732, 30962, 92,
	-1000, 35225, -1000, -1000, 13498, 13498, 13498, 13498, 13498, 1008,
	405, -1000, 363, 362, 6693, -1000, -1000, 1945, -1000, -1000,
	-1000, 192, -1000, -1000, 13498, 77, -1000, -1000, -1000, -1000,
	358, 1962, -1000, 413, -1000, -1000, -1000, 494, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1443, 357, 355,
	-1000, -1000, -1000, -1000, 353, 352, 350, 349, 348, 347,
	344, 343, 342, 340, 339, 335, 333, 331, 330, 974,
	-1000, 545, -1000, -1000, 545, 545, -1000, 313, 313, 319,
	-1000, -1000, -1000, -1000, 313, -1000, -1000, -1000, 472, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 325, 92, -1000, 60,
	-1000, 36158, -1000, -1000, -1000, 30962, 7, 877, -1000, 22107,
	1652, 1620, 1629, 24159, 1706, 26, 1433, 681, 24159, 679,
	1702, 26, 1432, 678, 30962, 30962, 466, -1000, 30962, -1000,
	-1000, 56, -1000, -1000, 1431, 55, -1000, -1000, 21826, 1723,
	1521, -1000, 989, -1000, 1721, 30962, -1000, 1085, 1167, -1000,
	727, 1518, 532, 105, 1719, 105, 18325, -1000, 30962, -1000,
	30962, -1000, -1000, 30962, -1000, 30962, -1000, 30962, 30962, 30962,
	256, 21545, 26, 54, -1000, 1743, -1000, -1000, -1000, -1000,
	100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 319,
	974, 313, 313, 313, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 472, -1000, -1000, 545, 545, 545, -1000, -1000, 49,
	36158, 677, -1000, 1429, -1000, 461, 44, 594, -1000, -1000,
	921, 1300, 879, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1957, -1000, 1921, -1000, -1000, 1944,
	-1000, 59, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 59, -1000, 5414, -1000, -1000, -1000, -1000, -1000, -1000,
	30962, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 30962, 30962, 30962, -1000, 24159, -1000,
	-1000, -1000, -1000, 36158, -1000, 510, -1000, -1000, 36158, 923,
	1308, -1000, 1308, 45, -1000, 35174, 921, 1300, -1000, -1000,
	311, 43, 532, 12221, 17448, 36407, 36566, 5414, 719, 13498,
	13498, 13498, 13498, 13498, 13498, 13498, 13498, 13498, 13498, 13498,
	13498, 13498, 13498, 13498, 13498, 13498, 13498, 13498, 13498, 13498,
	13498, 1046, 13498, 676, 13498, 13498, 13498, 13498, 1129, 988,
	298, 1024, 5414, -1000, -1000, 1910, 1910, 1910, 2902, 2902,
	232, 405, -1000, 13498, -1000, 26, 11902, 168, 34761, 28,
	6374, -1000, -1000, -1000, 7651, 541, 36158, 77, 5722, -1000,
	1942, 813, 1464, 1378, 309, 429, 423, 13498, 13498, 11583,
	11251, 10919, 13817, 10587, 13498, 7012, 13498, 13498, 13498, 13498,
	10255, 9923, -1000, 306, -1000, -1000, -1000, -1000, 1940, -1000,
	-1000, 1939, -1000, 717, 712, 1937, 532, 9272, -1000, 167,
	906, 30962, 30962, 30962, -1000, -1000, 1161, 31805, 1154, 36566,
	30962, -1000, 305, 304, 1276, 1271, 30962, 30962, 31524, 31243,
	30962, 848, 26, -1000, 302, 30962, 898, 30962, 26, -1000,
	300, 30962, 892, -1000, 1361, 1082, -1000, 525, 20393, 756,
	1428, 30962, 163, 42, 15, 36566, -1000, -1000, -1000, -1000,
	-1000, 30962, 328, 30962, 26, 30962, 1955, 26, 30962, 1513,
	1568, 453, 30962, 865, 13498, 976, -1000, 17150, 552, 30962,
	865, 86, -1000, -1000, -1000, 460, 30962, -1000, -1000, 133,
	133, -1000, 132, -1000, -1000, -1000, -1000, -1000, 1763, 1762,
	1761, 1758, -1000, 36566, 404, 391, -1000, 1936, 665, -1000,
	663, 662, 658, -1000, 299, -1000, 13498, 30962, 30962, -1000,
	1300, -1000, -1000, -1000, 798, -1000, 888, -1000, -1000, -1000,
	-1000, 16246, -1000, -4, -1000, -1000, -1000, 466, -1000, 923,
	-1000, 13498, 1934, -1000, -1000, -1000, 13498, -1000, -1000, -1000,
	-1000, -1000, 26, -1000, 1377, -1000, 33, -1000, 1313, 1107,
	-139, 166, 473, -1000, 16852, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 492, 847, 847, 641, 641,
	641, 641, 1731, 2515, 568, 2474, 2843, 2843, 2843, 491,
	811, 811, 2843, 2843, 2843, 2902, 4176, 189, 13498, 13498,
	656, 984, 298, 189, 13498, 189, 189, 189, 189, -1000,
	1846, -1000, -1000, -1000, -1000, 1422, 296, 13817, 13817, -1000,
	-1000, -1000, 6693, 14136, -1000, -1000, -1000, -1000, -1000, 293,
	13498, -1000, 34793, -160, 9, -1000, -1000, 13498, -28, -126,
	-1000, -1000, 748, -1000, 13498, -1000, -1000, 2, 13498, 13498,
	13498, 157, 155, -1000, 1016, 291, 281, 13498, -1000, -1000,
	-1000, -1000, 36022, 4112, 153, -1000, 1418, -101, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 152, -1000, 143, -1000, 35910,
	-101, 141, 4157, -1000, 13817, 13817, 13817, 6693, 280, 140,
	-1000, 35142, -101, 35827, 9591, 9591, 9591, 139, 35588, 13498,
	-101, 4052, 3782, 3688, 8, 1, -1000, -5, -1000, 1928,
	-14, 137, 489, 486, 134, 1377, -1000, -1000, -1000, -1000,
	646, 632, 1504, -1000, 1152, -1000, 556, -1000, 868, 13498,
	14750, 270, 269, 958, -1000, 1494, 1075, 1493, 1075, -1000,
	7, 853, -1000, 13498, -1000, 623, -1000, -1000, 13498, -1000,
	620, 525, 1417, 740, -1000, 1059, -1000, -1000, 747, -1000,
	1350, -1000, 21826, 258, 30962, 257, -1000, 255, -1000, -1000,
	254, 30962, 1238, 453, 20969, -1000, 514, -1000, 7331, 36158,
	-1000, 865, 1635, -15, -1000, -1000, -1000, 532, 18325, 17746,
	9272, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	576, 1927, 131, 1180, 1029, 930, 817, 1925, 36158, -4,
	-4, -1000, -1000, -1000, -1000, -1000, 30962, -1000, 1068, 34442,
	-1000, 128, 1373, 1676, -1000, 17746, 1289, 1285, 17746, 1319,
	1022, 1022, 1022, -1000, 251, 558, 386, 473, 4484, 8953,
	23878, 1036, 102, 127, 16554, 1313, 13498, 189, 189, 13498,
	13817, 13817, -1000, 189, -1000, -1000, -1000, -1000, -1000, 1415,
	247, 13498, 36566, 3725, 2819, -20, -1000, 8621, -6, -1000,
	13498, -1000, 34410, -1000, -1000, 223, 1539, -1000, 13498, 35556,
	126, 8302, -1000, 35495, -1, -1, -1000, 1954, -1000, 18606,
	534, 1042, 34378, 36407, 36566, -1000, 13498, -1000, -1000, 1397,
	13498, -1000, 36407, 36566, 13817, 13817, 13817, 13817, 13817, 13817,
	13817, 13817, 13817, 13817, 13817, 13817, 13817, 13817, 13817, 13817,
	13817, 13817, 13817, 1212, 13817, 1908, 1908, 1908, -10, 7983,
	-1000, 1441, 1397, 13498, 13498, 36566, 123, 121, 120, -1000,
	13498, -101, 13498, 13498, 13498, -1000, -1000, -1000, 119, -1000,
	1924, -1000, -1000, -1000, -1000, 1373, 30962, 30962, 30962, 1488,
	-1000, 2349, -1000, 34059, -21, -1000, 354, 1659, 13498, -1000,
	-1000, 246, 14750, 30962, -1000, 1240, 1294, 579, 30962, -1000,
	30962, -1000, 30962, 30962, 30962, -31, 30962, -35, 30962, -1000,
	20393, 693, 245, -1000, -1000, 1352, -1000, 14750, 244, 30962,
	21826, 1715, 14750, 1083, 1256, 453, 20969, -1000, 727, -12,
	-1000, -1000, 268, 26, 865, -1000, -16, -1000, 456, -1000,
	384, 382, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	117, -1000, -1000, -1000, -1000, 530, 13498, 13498, 1313, 17746,
	17746, 1183, 1284, 17746, -1000, -1000, -1000, -1000, 379, 407,
	377, 15048, -1000, 473, 23878, -1000, 1923, 1237, -36, -1000,
	-1000, -1000, 30962, 241, -1000, 473, 1722, 189, 2348, 294,
	13498, 36566, 36251, -37, 13498, 13498, -1000, -41, -1000, 13498,
	375, 36158, -1000, -1000, -1000, 36158, 13498, 1949, 13498, 116,
	115, 114, -1000, -1000, -1000, 32929, 13498, 113, -1000, 112,
	110, 36158, 1441, 36158, -1000, -1000, 890, 890, 707, 707,
	707, 707, 1908, 2543, 1171, 1197, 1245, 1245, 1245, 271,
	713, 713, 1245, 1245, 1245, 1391, 1224, 240, 34900, 13498,
	-42, -1000, -1000, -1000, 36158, 36158, 109, -1000, -1000, -1000,
	-101, 221, 34027, 33995, -1000, 108, 530, -1000, -1000, -1000,
	30962, -1000, 30962, -1000, 5414, 30962, 1380, 1144, -1000, -1000,
	1241, 239, 13817, 30962, -1000, 993, 14750, 1670, 77, 5414,
	1670, 33676, 5722, -48, -59, 1137, -1000, 1132, 13498, -1000,
	36566, 1075, 1075, -1000, 610, 605, 603, -1000, 600, -1000,
	-46, 19194, 1953, 995, -60, 14750, -61, 101, 26, -70,
	30962, -1000, 453, 20969, -1000, 1568, 1573, 30962, 1627, -1000,
	-1000, 236, -1000, -1000, -1000, -1000, 30962, 36158, -101, -1000,
	1183, -1000, 235, 13498, 17746, -1000, -139, -1000, -72, -1000,
	473, -78, 23878, -1000, 295, -158, -1000, 448, -1000, 473,
	234, 30962, 23878, 13498, 13498, 36251, -80, -1000, 189, 189,
	-1000, 33644, -1000, 36158, -1000, 35495, -1000, -1000, -1000, 1003,
	-1000, 33612, -1000, -1000, -1000, -1000, 13817, 1384, 228, 36566,
	33293, -1000, -1000, 13498, -1000, -1000, -1000, -1000, -1000, 901,
	-1000, -1000, 30962, 1147, -1000, -1000, 13498, 34900, 227, 1350,
	226, -1000, -1000, -1000, -1000, -1000, -1000, 1659, 2, -1000,
	951, -1000, -1000, 36158, 1651, -1000, -1000, 30962, 30962, 224,
	220, -1000, 219, 77, -84, -1000, 437, 30962, 993, -89,
	-1000, 1350, -1000, 993, 208, 20969, -1000, 1238, 695, -90,
	30962, -1000, -1000, 6042, -71, -1000, 1714, -1000, 30962, 36158,
	-1000, 473, -1000, 1918, 23878, 256, -1000, -1000, 1237, -1000,
	4800, 23878, 30962, -91, -1000, 189, 189, -1000, -1000, 98,
	1042, 1674, -1000, 467, 13817, 36566, -104, -1000, 33261, -1000,
	-1000, 1480, 33229, 1190, 30962, -1000, 30962, 1670, 97, 30962,
	561, 5414, -1000, -1000, 13498, 13498, 13498, 1953, -1000, -1000,
	1950, 202, 1350, 993, -1000, 1350, 14750, -1000, 1256, 815,
	-1000, 532, -1000, 30962, 196, -109, 23878, -1000, -1000, 230,
	-1000, -1000, 1909, -1000, -113, -1000, -1000, 867, 13498, 467,
	-115, -1000, -1000, 1472, -1000, 1073, 927, 93, -119, -1000,
	-1000, 146, -1000, 13498, -1000, -129, -133, -1, -1000, -1000,
	30962, -1000, 1350, -1000, -146, -1000, 18325, -1000, -1000, -1000,
	-1000, -1000, 473, 194, -1000, 91, 13179, 13179, -101, -1000,
	30962, -1000, 1081, 1080, 766, -1000, -1000, -1000, -1000, -1000,
	1190, 36158, -1000, -1000, 90, -148, -1000, 993, -121, 23878,
	-1000, -1000, -1000, -1000, 14443, 1053, 834, 34825, -1000, -1000,
	-1000, 1581, -1000, 571, 1151, 1151, 1073, 1949, 1055, 1350,
	-1000, -1000, 1735, -1000, -1000, -1000, -1000, -1000, -1000, 1754,
	-1000, -1000, 1199, -1000, -1000, -1000, -1000, -1000, -1000, 12860,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2333, 2332, 1572, 1645, 2329, 2328, 2327, 2326, 2325,
	2324, 2323, 2322, 2321, 2320, 2319, 2315, 2314, 2313, 2309,
	2307, 2303, 1603, 2297, 2293, 2292, 2291, 2289, 2288, 111,
	1591, 2287, 2283, 2282, 2274, 1586, 22, 1576, 2273, 115,
	2267, 2266, 2265, 105, 2262, 2260, 2258, 2256, 151, 2254,
	2253, 2250, 2249, 96, 2248, 2247, 2245, 2239, 2237, 2236,
	2223, 2212, 2204, 2203, 2202, 2201, 2199, 2198, 2197, 2195,
	2189, 2188, 2182, 102, 99, 2179, 21, 2172, 82, 2170,
	27, 189, 1835, 162, 2169, 2168, 2165, 2164, 2159, 23,
	122, 120, 2158, 66, 2157, 2154, 62, 34, 18, 19,
	2153, 119, 138, 1476, 31, 2152, 2151, 155, 172, 2150,
	61, 24, 73, 170, 168, 149, 141, 2137, 2131, 2130,
	2129, 56, 2127, 2, 2125, 2122, 10, 64, 29, 2121,
	69, 28, 2120, 2117, 147, 2113, 76, 118, 1473, 127,
	142, 197, 2111, 80, 7, 78, 2109, 2106, 150, 41,
	2104, 42, 90, 157, 2103, 60, 190, 71, 40, 75,
	123, 2101, 2099, 2094, 91, 2092, 124, 81, 2089, 2088,
	88, 2087, 156, 158, 2083, 2082, 104, 2081, 146, 2076,
	2074, 166, 175, 165, 174, 2072, 2069, 14, 63, 83,
	9, 1482, 1481, 131, 68, 33, 25, 2068, 2174, 877,
	747, 49, 92, 70, 44, 93, 59, 67, 163, 20,
	2062, 2061, 126, 2055, 2039, 2037, 2036, 2034, 86, 2033,
	2029, 74, 161, 13, 11, 15, 113, 45, 50, 72,
	143, 169, 130, 2028, 94, 139, 48, 642, 2025, 2023,
	1264, 140, 2019, 2017, 2015, 1183, 1029, 980, 327, 2013,
	2010, 631, 30, 2009, 2008, 51, 2007, 132, 137, 2006,
	160, 267, 32, 2005, 43, 98, 116, 2002, 121, 57,
	0, 125, 77, 1999, 148, 79, 1998, 1996, 1995, 1994,
	26, 3, 8, 4, 6, 5, 109, 101, 1993, 1991,
	154, 38, 87, 1990, 171, 1989, 1988, 1986, 46, 1985,
	12, 1984, 17, 1983, 1982, 16, 1, 1981, 1979, 159,
	1978, 117, 1977, 1720, 1976, 167, 1973, 1972, 1626, 47,
	95,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 6, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	91, 91, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 88, 88, 93,
	93, 93, 95, 95, 92, 92, 87, 87, 20, 20,
	46, 46, 268, 268, 269, 269, 75, 75, 79, 79,
	76, 77, 77, 78, 78, 21, 21, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 29, 29, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 34, 34, 34, 33, 33, 33, 32,
	32, 32, 31, 31, 31, 140, 140, 139, 139, 142,
	142, 35, 35, 35, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	236, 236, 235, 38, 38, 210, 210, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 40, 40, 165, 165,
	41, 41, 41, 41, 41, 42, 42, 47, 47, 309,
	309, 309, 313, 313, 314, 314, 315, 315, 315, 315,
	315, 315, 315, 311, 311, 45, 45, 45, 50, 50,
	50, 50, 50, 50, 50, 50, 52, 52, 185, 51,
	51, 51, 186, 186, 186, 186, 183, 183, 183, 183,
	102, 182, 182, 182, 182, 182, 181, 181, 181, 181,
	261, 260, 260, 266, 266, 266, 118, 118, 118, 118,
	118, 119, 119, 119, 259, 259, 259, 259, 267, 267,
	267, 267, 267, 267, 120, 120, 120, 265, 265, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 63, 63, 63,
	108, 108, 108, 108, 108, 54, 54, 59, 59, 59,
	59, 59, 61, 61, 55, 55, 60, 60, 56, 56,
	56, 56, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 66, 66, 66, 57, 57, 58, 58, 67,
	67, 65, 65, 65, 37, 310, 310, 312, 312, 25,
	25, 26, 26, 121, 121, 122, 122, 189, 189, 189,
	189, 123, 123, 94, 94, 94, 188, 278, 278, 279,
	279, 279, 279, 279, 279, 280, 280, 280, 280, 280,
	280, 280, 276, 276, 277, 274, 274, 275, 275, 275,
	275, 316, 316, 187, 187, 126, 126, 283, 283, 283,
	283, 281, 281, 281, 281, 281, 284, 282, 285, 285,
	285, 285, 285, 222, 222, 222, 72, 72, 27, 27,
	100, 100, 28, 28, 24, 24, 24, 169, 169, 130,
	130, 227, 227, 227, 111, 111, 89, 89, 89, 14,
	11, 11, 11, 11, 11, 11, 19, 19, 17, 17,
	170, 170, 171, 171, 44, 44, 49, 49, 68, 68,
	68, 68, 68, 68, 69, 69, 69, 69, 71, 71,
	71, 71, 70, 70, 318, 318, 106, 106, 106, 106,
	107, 107, 184, 184, 184, 184, 184, 101, 23, 23,
	23, 96, 96, 97, 97, 98, 98, 99, 99, 319,
	319, 43, 43, 43, 74, 74, 114, 114, 178, 178,
	178, 180, 180, 179, 179, 179, 155, 155, 155, 73,
	73, 135, 135, 144, 144, 145, 145, 233, 146, 146,
	48, 48, 82, 82, 80, 80, 80, 80, 80, 80,
	81, 81, 81, 83, 83, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 86, 86, 291, 291, 291,
	294, 294, 290, 292, 292, 293, 293, 317, 317, 156,
	156, 156, 125, 124, 124, 128, 128, 127, 129, 129,
	226, 153, 153, 153, 153, 172, 172, 173, 173, 174,
	174, 175, 175, 175, 176, 176, 177, 177, 152, 152,
	206, 206, 85, 85, 85, 134, 134, 134, 136, 136,
	196, 196, 196, 197, 197, 195, 195, 195, 195, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	307, 307, 307, 308, 308, 225, 225, 229, 229, 229,
	229, 229, 229, 223, 223, 223, 223, 224, 224, 234,
	234, 159, 159, 159, 159, 157, 157, 158, 158, 230,
	230, 230, 230, 154, 154, 231, 231, 231, 190, 190,
	237, 237, 237, 255, 255, 133, 133, 133, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 239, 239, 239, 239, 241,
	241, 241, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 254, 254, 254, 254,
	254, 242, 242, 249, 249, 250, 250, 251, 252, 243,
	243, 244, 244, 245, 246, 253, 253, 253, 253, 257,
	257, 247, 247, 247, 247, 247, 248, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 167, 167, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 200, 200, 200, 200, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	286, 286, 286, 286, 286, 286, 286, 286, 288, 288,
	289, 289, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 295, 295, 296,
	296, 298, 298, 299, 299, 300, 301, 301, 301, 302,
	303, 303, 297, 297, 304, 304, 304, 305, 305, 306,
	306, 306, 306, 306, 212, 212, 212, 213, 213, 214,
	220, 220, 220, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 109,
	109, 109, 109, 109, 141, 141, 209, 209, 207, 207,
	207, 211, 211, 160, 160, 256, 256, 256, 256, 256,
	256, 256, 161, 161, 161, 168, 162, 162, 163, 163,
	163, 163, 163, 163, 203, 204, 164, 164, 164, 205,
	205, 215, 219, 219, 218, 217, 217, 216, 216, 193,
	193, 194, 194, 192, 191, 149, 149, 148, 148, 147,
	147, 320, 320, 221, 221, 150, 150, 151, 143, 143,
	232, 232, 232, 232, 137, 137, 116, 116, 138, 138,
	112, 112, 115, 115, 113, 113, 113, 113, 131, 131,
	132, 132, 110, 110, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 258, 258, 258, 208, 103,
	103, 103, 104, 104, 105, 105, 263, 263, 263, 264,
	264, 264, 264, 262, 262, 262, 262, 262, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 0, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 3, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 2, 7,
	2, 6, 1, 1, 1, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 4, 6, 7, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 3, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 1, 3, 1, 2, 2,
	3, 2, 3, 2, 5, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 3, 1, 2, 5, 3, 0, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 0,
	2, 2, 3, 2, 3, 6, 2, 6, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 1, 2,
	1, 2, 1, 2, 1, 3, 3, 4, 5, 3,
	2, 6, 3, 3, 4, 4, 1, 1, 3, 3,
	2, 1, 1, 3, 2, 3, 3, 3, 3, 3,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 2, 3,
	1, 1, 1, 1, 2, 3, 3, 3, 4, 4,
	4, 4, 3, 4, 3, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	2, 3, 4, 3, 3, 4, 4, 4, 4, 3,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 4, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 3, 6, 7, 3, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 3,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 2, 8, 8, 1, 2,
	1, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 3, 1, 5, 6, 9, 3, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -46, -21, -22, -29,
	-30, -35, -37, -38, -40, -41, -42, -43, -74, -47,
	-49, -48, -50, -53, -68, -44, -45, -72, -73, 24,
	-5, -6, -7, -8, 35, 225, 67, 69, -23, -24,
	-25, -26, -27, -28, -293, 95, -31, -32, -33, -34,
	104, 126, 207, 102, 88, 120, 228, 235, -80, -82,
	-51, -52, -186, -185, 244, 247, -54, -55, -56, -57,
	-58, -59, -60, -61, -62, -63, -64, -65, -66, -67,
	-69, -71, -70, 223, 224, 281, -9, -10, -13, -12,
	-11, -16, -18, -15, -17, -19, -14, -291, -83, -81,
	330, 36, 256, 61, 98, 230, 305, 311, -84, 239,
	-85, -86, 297, 265, 333, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 2, 265, 300, 81, 135, 20, 20, 20, 20,
	2, -309, -138, 265, 81, -113, -103, 323, 4, -270,
	-272, 21, 22, 24, 34, 35, 36, 41, 45, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	79, 80, 82, 84, 88, 90, 94, 95, 97, 102,
	103, 104, 110, 111, 114, 116, 121, 126, 127, 128,
	129, 136, 139, 141, 134, 149, 151, 152, 155, 154,
	159, 162, 165, 167, 168, 169, 172, 170, 174, 175,
	177, 176, 182, 184, 185, 187, 190, 193, 196, 199,
	200, 201, 202, 205, 207, 209, 210, 211, 213, 214,
	216, 217, 218, 219, 220, 223, 221, 222, 224, 225,
	226, 228, 230, 231, 233, 245, 246, 257, 235, 236,
	237, 238, 241, 242, 244, 247, 249, 252, 255, 256,
	258, 261, 259, 254, 264, 266, 267, 268, 269, 270,
	277, 281, 282, 283, 284, 287, 288, 289, 291, 294,
	295, 296, 301, 306, 307, 308, 309, 29, 37, 38,
	39, 40, 42, 43, 46, 47, 51, 52, 53, 56,
	83, 85, 86, 101, 105, 106, 112, 122, 124, 130,
	131, 140, 142, 143, 144, 146, 157, 171, 181, 183,
	194, 198, 204, 206, 212, 232, 240, 250, 251, 260,
	262, 272, 273, 274, 278, 279, 293, 297, 298, 2,
	-309, -112, -103, 81, 2, 265, 290, 300, -169, 81,
	286, 20, 20, 20, 20, 20, 20, 90, 139, 289,
	288, 2, 300, 265, 135, 81, 20, 20, 20, 20,
	2, 330, -36, -48, -22, -30, -4, -43, -74, -73,
	-29, -53, -37, -35, -262, 4, -270, -272, -271, -273,
	58, 70, 119, 138, 132, 148, 150, 158, 160, 173,
	195, 197, 229, 248, 23, 25, 26, 27, 28, 30,
	31, 32, 33, 44, 49, 50, 54, 57, 59, 65,
	69, 73, 74, 75, 76, 77, 78, 87, 89, 91,
	92, 93, 96, 98, 100, 107, 108, 109, 115, 117,
	118, 120, 123, 125, 133, 135, 137, 145, 147, 153,
	156, 161, 163, 164, 178, 179, 180, 186, 188, 189,
	191, 192, 203, 208, 215, 227, 239, 243, 253, 263,
	265, 271, 275, 276, 280, 285, 286, 290, 292, 299,
	300, 302, 303, 304, 305, 2, -103, 2, -103, 2,
	-103, 207, 23, -313, 2, 23, -314, -315, 69, 95,
	120, 239, 139, 90, 288, -313, 2, 2, -103, 20,
	20, 20, 162, 55, 232, 242, -182, 277, 2, -181,
	272, 172, -261, -139, -103, 2, 242, -108, 35, 55,
	23, 121, 60, 82, 65, 66, 135, 136, 152, 266,
	277, 69, 291, 268, 103, 4, 243, 81, 272, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 2, -107, 235, -103, 2,
	-261, 242, -317, 2, 265, -81, -83, -82, -127, -128,
	285, 145, 100, 192, -80, -82, 2, -291, 2, -318,
	277, 2, 277, 2, -318, 2, -318, 2, -106, 277,
	275, -294, 213, -290, -103, -294, 20, 2, -124, -125,
	23, 92, 20, 334, 20, 2, -151, 330, 2, -230,
	-112, 189, -3, 2, -230, 130, -112, 2, -230, 130,
	2, -103, 2, -115, 130, -112, 275, 334, -138, -131,
	-103, -192, -191, 332, 118, 118, 330, -148, -149, -191,
	-192, 2, -139, 130, -103, 2, -139, 2, 135, 2,
	-103, 130, 2, 118, 2, 147, 2, 147, 2, -231,
	-230, -140, 130, 2, -139, -140, 130, 2, -116, 130,
	2, -115, -103, 130, 2, 2, -236, -235, -264, 4,
	-270, -272, -271, 297, 20, 20, 20, 20, -210, 330,
	-165, 330, -103, 23, 188, 334, 188, 2, 2, 245,
	330, -182, 53, 277, 2, -183, -101, -102, 149, 209,
	309, -120, 5, 87, 118, 275, 315, -142, 332, 2,
	-108, 23, 2, -268, -265, 9, -264, 5, 2, 245,
	55, 2, -310, 188, 2, 118, 2, 2, 118, 2,
	118, 2, 118, 2, 118, 2, 118, 2, 118, 2,
	149, 209, 257, 265, 300, 2, 118, 118, 309, -103,
	-261, -154, -230, -127, -128, -153, -172, -173, 161, 109,
	186, -156, 23, 92, -156, -156, 45, 331, 331, -184,
	-101, -102, -184, 275, -107, 334, -294, -132, 330, -143,
	-232, -198, 323, -200, 321, 322, 316, 178, 310, -212,
	-202, -215, 101, 232, 330, -112, -201, 335, 9, -288,
	-82, 30, -213, -214, 49, -103, 7, 8, 5, 6,
	-110, -239, -208, -248, 280, 107, 180, -286, -287, 4,
	-270, -263, -240, -250, -244, -247, 146, 58, 74, 77,
	75, 78, 243, 290, 50, 29, 105, 106, 198, 204,
	262, 278, 279, 130, 181, 131, 56, 122, 157, 94,
	38, 40, 42, 43, 51, 52, 83, 85, 86, 112,
	140, 142, 143, 144, 183, 212, 250, 260, 273, 274,
	298, -271, -251, -252, -245, -246, -253, -143, -151, -150,
	-221, -198, 87, 323, -112, 330, -91, 221, -90, 22,
	24, 95, 295, 101, 254, 269, 236, 221, 101, 221,
	254, 269, 236, 221, 101, 335, -268, -113, 334, -262,
	323, -269, -268, 258, 331, -137, -112, -149, 330, -126,
	178, -100, -292, 305, -126, 330, 2, -104, 130, -103,
	-292, 178, -231, -114, -112, -114, 244, -103, 31, -93,
	334, 48, 226, 101, -93, 101, -93, 334, 101, 101,
	331, 334, 31, -209, -237, -238, -240, -249, -243, -247,
	-248, 41, 47, 46, 270, 171, 240, 251, 293, 39,
	187, 141, 140, 142, 143, 144, 250, 38, 212, 112,
	94, 86, 85, 183, 43, 42, -251, -252, -245, -246,
	83, 273, 274, 146, 40, 52, 51, 298, 260, -141,
	-198, -309, -315, -309, -181, -261, -141, 31, 2, -183,
	334, 334, 159, -119, 165, 177, 127, -267, 5, 4,
	-208, -222, 87, 162, -248, 8, 322, -258, 7, 321,
	72, -260, 87, -266, -259, -222, 9, 280, 107, 188,
	-265, -260, 87, 332, -262, -139, 23, 2, 246, -312,
	115, -309, -261, -261, -261, -261, -261, -261, -103, 159,
	2, -261, 2, -261, 265, 135, 265, -93, 334, -153,
	-173, -172, -174, -198, 23, -177, 111, 174, -198, -200,
	-81, -81, -81, -129, -226, -198, 334, 334, -107, -290,
	31, -131, -134, 334, 118, 10, 11, 57, 34, 321,
	322, 323, 324, 113, 325, 326, 319, 320, 318, 313,
	314, 315, 63, 166, 234, 13, 14, 15, 27, 191,
	160, 310, 132, 248, 316, 16, 17, 18, 148, 37,
	133, -109, 31, 4, -117, -198, -198, -198, -198, -198,
	197, -147, -193, 328, -82, 330, 330, -82, -198, -141,
	330, 7, -82, -207, 328, -216, -198, -148, 330, 5,
	330, 5, -295, 306, 115, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 206, -257, 301, -257, -257, -241, 330, -241,
	-242, 330, -241, 307, 311, 330, -134, 334, 331, -112,
	334, 275, -170, 65, 59, -188, 130, 59, -274, -103,
	65, -275, 54, 286, 208, 117, -170, 65, -170, 65,
	65, -230, 34, -48, 118, 275, -230, 275, 34, -48,
	118, 275, -115, -103, -234, 312, -103, -234, 334, 118,
	331, 334, -121, -131, -122, -103, -189, -188, -276, -277,
	-274, 135, 286, 108, 31, 101, 202, 31, 188, 178,
	-96, 267, 101, -190, 303, -178, -48, 330, 87, 31,
	-178, -144, -145, -233, -146, -112, 330, -103, -139, -140,
	-140, -115, -116, -103, -36, -235, -39, -48, -43, -74,
	-73, -29, 331, 334, -133, 30, -166, 330, 308, 169,
	84, 128, 168, -167, 238, 331, 334, 275, 118, 331,
	277, -102, -101, -118, 211, 252, 222, 241, 8, 7,
	7, 334, -262, -311, -103, -112, -115, -112, -230, -175,
	-258, 330, 322, -176, 232, 233, 334, -89, 32, 91,
	-102, -101, 330, 331, -190, -232, -136, 2, -228, 328,
	-230, -112, -82, -229, 330, -255, -237, -254, 217, 218,
	216, 220, 219, -237, -262, 272, -198, -198, -198, -198,
	-198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
	-198, -198, -198, -198, -198, -198, -198, -198, 160, 132,
	248, 37, 133, -198, 275, -198, -198, -198, -198, 170,
	178, 180, 280, 107, 287, 92, 184, -320, 263, 33,
	-205, -82, 330, -220, 28, 253, 23, -262, -212, 232,
	330, -193, -198, -194, -141, 331, 331, 334, -141, -211,
	329, -207, -219, -218, 302, 2, 331, -141, 299, 23,
	92, 323, 7, -166, -296, 110, 123, 330, 331, 2,
	331, 2, -198, -198, -160, 2, -256, -141, 4, 308,
	169, 84, 128, 168, 238, -160, 2, -161, 2, -198,
	-141, -162, -199, -200, 321, 322, 316, 330, 232, -163,
	2, -198, -141, -198, 44, 156, 276, -164, -198, 118,
	-141, -198, -198, -198, -141, -141, 2, -141, 2, 330,
	7, 7, 272, 272, 7, -190, -221, 331, -90, -112,
	-103, -103, 178, -188, 130, -95, 178, -237, -103, 330,
	330, 151, 151, -103, -103, 130, -103, 130, -103, -103,
	-91, 221, -48, 330, -112, 221, -103, -48, 330, -103,
	221, -75, 129, 184, -78, 305, -268, 258, 118, -112,
	331, 331, 334, -104, 135, -104, -48, -139, 5, -48,
	-112, 101, -97, 97, -319, 315, -103, -155, 227, -198,
	-155, -180, 188, -137, 297, -103, -155, -135, 334, 118,
	315, -137, -93, -93, -93, 20, 20, 20, 20, -237,
	328, 328, 7, 275, 275, 275, 275, 330, -198, -311,
	-311, -101, 284, 62, 211, -266, 334, -234, -176, -198,
	-226, -39, -152, 123, -234, 334, 70, -159, 150, 173,
	119, 158, 229, 138, 7, 104, -53, -195, 335, 330,
	-225, 311, -82, -229, 330, -228, 309, -198, -198, 275,
	-320, 263, -205, -198, 170, 180, 280, 107, 287, 92,
	184, 118, 330, -199, -199, -141, -202, 330, -141, 329,
	338, 331, -198, 329, 329, 334, -217, -218, 96, -198,
	-128, 334, -127, -198, -141, -141, 331, 331, -301, 196,
	330, 330, -198, 31, 334, 331, 118, 331, 331, -168,
	203, 331, 10, 11, 321, 322, 323, 324, 113, 325,
	326, 319, 320, 318, 313, 314, 315, 63, 166, 234,
	13, 14, 15, 148, 133, -199, -199, -199, -141, 330,
	331, -203, -204, 118, 115, 31, -164, -164, -164, 331,
	118, -141, 334, 334, 334, 331, 331, 331, 7, 331,
	334, 331, 309, 309, 331, -152, 275, 275, 101, 178,
	294, -278, -275, -198, -130, -227, -103, -289, 330, -286,
	-287, -110, 330, 330, -88, 95, 244, -171, 101, -93,
	101, -93, 275, -170, 65, -141, 275, -141, 275, -78,
	118, 264, 190, 258, -123, 134, -189, 330, -104, 330,
	330, -126, 330, -103, -98, 155, -319, -265, -292, -143,
	179, -155, 64, 331, -190, -145, -136, -221, 331, 329,
	7, 7, 331, 169, 128, 168, -167, 168, -167, -167,
	7, -103, 189, 331, 331, -206, 125, 45, -228, 150,
	150, -228, -159, 150, -157, 195, -157, -157, -307, 330,
	-36, 330, 2, 329, -225, -262, 328, 336, -141, 2,
	-224, -223, 31, -103, 193, 331, -198, -198, -199, -199,
	118, 330, -198, -209, 27, 27, 331, -141, 331, 334,
	-194, -198, 331, -207, 98, -198, 271, 331, 299, -128,
	-128, -128, 5, -302, -103, 330, 303, -127, 331, -255,
	-237, -198, -203, -198, -255, -237, -199, -199, -199, -199,
	-199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
	-199, -199, -199, -199, -199, 92, 178, 184, -199, 334,
	-141, 331, -204, -203, -198, -198, -237, 331, 331, 331,
	-141, -198, -198, -198, 331, 7, -206, -103, -103, -188,
	101, -279, 65, -280, 57, 108, 69, 178, 180, 286,
	208, 54, 87, 215, 331, 331, 334, -111, -148, 57,
	-111, -198, 330, -130, -131, 178, 87, 178, 87, 80,
	282, -103, -103, -112, -103, -103, 331, -112, 331, -103,
	-269, 272, 330, 133, -130, 330, -131, -121, 31, -130,
	188, -99, 154, -319, -265, -96, -179, 330, 188, -48,
	-155, 315, 329, 329, 331, -298, 304, -198, -141, -228,
	-228, -158, 292, 188, 150, -228, 329, 331, -308, 7,
	329, -236, -225, -224, 7, -197, -196, 116, 176, 331,
	-103, 330, -225, 27, 27, -198, -209, 331, -198, -198,
	331, -198, 329, -198, 5, -198, 331, 331, 331, -303,
	-103, -198, 331, 331, 331, -204, 118, 92, 184, 330,
	-198, 331, 331, 334, 331, 331, 331, -298, -188, -103,
	-262, -103, 108, 130, 180, 151, 330, -199, -112, -187,
	-316, 68, 261, -227, -89, -262, -89, 331, -141, 331,
	331, 180, 180, -198, -237, -93, -93, 275, 275, 275,
	275, -201, -110, -103, -77, -76, 5, 199, 331, -130,
	331, 331, -48, 331, -112, -319, -265, -97, 93, -131,
	65, -151, -82, 330, -299, -300, -103, -158, 330, -198,
	-228, -195, 331, 334, -225, 331, -224, 329, 334, 337,
	315, -225, 330, -131, -223, -198, -198, 331, 331, -128,
	-297, 201, 331, -199, 118, 330, -209, 331, -198, -280,
	-104, 178, -198, -105, 330, -123, 330, -111, -128, 215,
	-92, 57, -103, -103, 330, 330, 330, 334, 331, -79,
	315, -103, -187, 331, -123, -187, 330, -265, -98, 288,
	179, 331, -103, 334, 31, -131, -225, 7, -224, -36,
	-196, -262, 328, -224, -131, 331, 331, -128, 45, -199,
	-209, 331, 331, 101, 331, -283, 167, -103, -131, -89,
	331, -112, -87, 292, -262, -141, -141, -141, -76, 5,
	330, -123, -187, -123, -130, -99, 244, -190, -300, -302,
	331, -223, 329, 7, 331, -304, 210, 233, -141, 331,
	108, -281, -284, -282, 188, 119, 200, 249, 331, 331,
	-126, -198, 331, 331, -128, -131, -123, 331, -144, -225,
	329, 331, -305, -306, 37, 283, 72, -198, -305, -103,
	-282, 188, -284, 188, 288, 90, -283, 331, 331, -187,
	-190, -224, -306, 205, 114, 232, 205, 114, -285, 175,
	226, 48, 244, -285, -281, -94, 48, 226, -123, 27,
	21, 180, 87, -306,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 9, 10, 11,
	13, 14, 16, 17, 19, 21, 23, 25, 27, 29,
	31, 33, 34, 35, 36, 37, 39, 41, 43, 0,
	47, 49, 51, 53, 0, 0, 0, -2, 129, 131,
	133, 135, 138, 140, 0, 0, 145, 147, 149, 151,
	-2, 0, 0, 0, 0, 0, 0, 0, 560, -2,
	238, 240, 242, 244, 0, 0, 300, 302, 304, 306,
	308, 310, 312, 314, 316, 318, 320, 322, 323, 325,
	488, 490, 492, 0, 0, -2, 56, 57, 58, 59,
	60, 66, 67, 68, 69, 62, 64, 595, -2, 606,
	0, -2, 0, -2, -2, -2, 0, 0, 573, -2,
	578, 580, 0, 0, -2, 6, 8, 12, 15, 18,
	20, 22, 24, 26, 28, 30, 32, 38, 40, 42,
	44, 46, 0, 0, 0, 0, 48, 50, 52, 54,
	108, 0, 219, 0, 1149, 1078, 1084, 1085, 1109, 1110,
	1111, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 110,
	0, 0, 1080, 1149, 128, 0, 0, 0, 0, 0,
	457, 130, 132, 134, 136, 139, 141, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 146, 148, 150, 152,
	171, 0, 173, 175, 176, 177, 178, 179, 181, 183,
	185, 187, 188, 189, 374, 1123, 1124, 1125, 1126, 1127,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 193, 196, 206, 209, 210,
	211, 1202, 213, 0, 216, 222, 223, 224, 226, 227,
	228, 229, 230, 231, 232, 0, 218, 486, 487, 239,
	241, 243, -2, -2, 1303, -2, 250, -2, 261, 262,
	1309, -2, 0, 270, 167, 299, 0, 328, 0, 0,
	331, -2, 0, -2, 0, 0, 0, 0, 0, -2,
	0, 0, -2, 0, 0, 330, 332, 333, 0, 301,
	303, 305, 307, 309, 311, 313, 315, 317, 319, 321,
	324, 326, 489, 491, 493, 484, 485, 1226, 511, 235,
	236, 1231, 0, 447, 597, -2, 571, 572, -2, 0,
	601, 601, 601, 0, 0, 572, 570, 0, 494, 516,
	504, 496, 516, 498, 499, 500, 501, 502, 503, 506,
	0, 587, 1206, 590, 1091, 588, 574, 575, 0, 0,
	603, 602, 579, 0, 581, 632, 633, 0, 585, 586,
	689, 0, 2, 55, 0, 1287, 689, 61, 0, 1287,
	63, 0, 65, 0, 1287, 1083, 0, 0, 220, 221,
	1088, 1086, 1087, 0, 0, 0, 0, 1081, 1057, 1055,
	1056, 137, 426, 1287, -2, 449, 426, 453, -2, 518,
	594, 1287, 142, 0, 531, 0, 534, 0, 549, 0,
	695, 101, 1287, 155, 165, 101, 1287, 158, 101, 1287,
	161, 1076, 162, 1287, 164, -2, 0, 190, 192, 1119,
	1120, 1121, 1122, -2, 180, 182, 184, 186, 0, 0,
	207, 0, 212, 214, 0, 0, 0, 245, 246, 0,
	0, 249, 1276, -2, 252, 253, 256, 257, 0, 0,
	0, 264, 294, 295, 0, 0, 0, 168, 0, 327,
	329, 331, 335, 336, 112, 113, 297, 298, 337, 0,
	0, 342, 378, 0, 344, 0, 346, 348, 0, 350,
	0, 352, 0, 354, 0, 356, 0, 358, 0, 361,
	0, 363, 364, 0, 0, 369, 0, 0, 334, 510,
	237, 101, 693, -2, 0, 566, 613, 614, 0, 0,
	0, 0, 599, 600, 0, 0, 0, 562, 563, 495,
	512, 513, 497, 0, 508, 0, 589, 0, 0, 637,
	1068, 1072, 1073, 793, 0, 0, 0, 0, 0, 0,
	885, 887, 1281, 1303, 0, 889, 890, 0, 892, 894,
	895, 0, 898, 899, 1048, 1080, 1094, 1095, 1096, 1097,
	0, 0, 1100, 0, 1102, 1103, 1104, 948, 909, -2,
	-2, 1092, 725, 726, 727, 728, -2, 1317, 913, 916,
	919, 920, 921, 922, 0, 1265, 1282, 1283, 1299, 1300,
	1308, 1312, 1313, 1287, 1296, 1288, 1277, 1285, 1294, 1154,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1118, 755, 756, 761, 762, 764, 637, 634, 0,
	1065, 1063, 1064, 690, 691, 0, 70, 481, 80, 0,
	481, 481, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 680, 1079, 0, 1053,
	1054, 680, 114, 125, 0, 0, 1074, 1058, 384, 0,
	0, 448, 0, 593, 0, 0, 454, 0, 1287, 1112,
	522, 0, 699, 0, 536, 0, 0, 696, 0, 153,
	0, 99, 100, 0, 156, 0, 159, 0, 0, 0,
	596, 0, 596, 0, 1006, 707, 708, 709, 710, 711,
	790, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 732, 733, 734, 735, 736, 737, 738, 752,
	0, 731, 731, 731, 744, 745, 753, 754, 759, 760,
	771, 772, 774, 776, 770, 770, 770, 767, 768, 0,
	1004, 0, 225, 0, 247, 0, 0, 0, 254, 255,
	0, 0, 0, 260, 281, 282, 283, 263, 288, 289,
	290, 291, 292, 293, 0, 443, 0, 445, 1105, 0,
	265, 266, 268, 271, 273, 274, 275, 284, 285, 286,
	287, 267, 269, 0, 169, 338, 339, 340, 341, 343,
	0, 375, 345, 349, 351, 353, 355, 357, 359, 362,
	365, 366, 367, 368, 0, 0, 0, 446, 0, 569,
	611, 612, 615, 619, 620, 623, 626, 627, 617, 793,
	582, 583, 584, 607, 608, 468, 0, 0, 507, 591,
	0, 0, 699, 0, 0, 0, 0, 0, 0, 983,
	984, 985, 986, 987, 988, 991, 992, 989, 990, 993,
	994, 995, 0, 0, 0, 996, 997, 998, 0, 0,
	1000, 0, 1002, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 1071, 999, 798, 799, 800, 822, 823,
	0, 886, 1059, 1052, 888, 0, 0, -2, 1004, 0,
	0, 891, 896, 897, 0, 0, 1047, -2, 0, 1099,
	0, 790, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1027, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 758, 769, 766, 765, 742, 0, 741,
	739, 0, 743, 0, 0, 0, 699, 0, 1067, 0,
	0, 0, 0, 0, 480, 82, 1287, 0, 103, 0,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 75,
	0, 0, 0, 1082, 117, 0, 1089, 124, 0, 0,
	0, 0, 0, 0, 383, 1088, 385, 387, 388, 389,
	390, 1113, 0, 1113, 0, 0, 0, 0, 0, 0,
	524, 530, 0, 548, 0, 548, 538, 0, 0, 0,
	548, 552, 553, 555, 556, 0, 0, 697, 166, 101,
	101, 1077, 101, 163, 174, 191, 194, 197, 198, 200,
	202, 204, 195, 0, 700, 702, 712, 0, 777, 778,
	779, 780, 781, 782, 791, 208, 0, 0, 0, 248,
	0, 258, 259, 517, 0, 278, 0, 280, 444, 1107,
	1106, 0, 170, 377, 233, 371, 372, 680, 694, 0,
	621, 0, 0, 618, 624, 625, 0, 610, 466, 467,
	514, 515, 596, 1090, 629, 1069, 680, 636, 638, 0,
	648, 689, 666, 654, 0, 794, 703, 704, 746, 747,
	748, 749, 750, 795, 796, 0, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, -2, -2, -2, 814,
	815, 816, -2, -2, -2, 820, 821, -2, 1001, 1003,
	0, 1062, 0, -2, 0, -2, -2, -2, -2, 834,
	0, 836, 839, 841, 843, 0, 0, 0, 0, 1061,
	853, 1039, 0, 0, 980, 981, 982, 1070, 838, 0,
	0, 1060, 1051, 0, 0, -2, 893, 0, 0, 0,
	1010, 1011, 1046, 1042, 0, 900, 901, 606, 0, 0,
	0, 0, 0, 1108, 958, 0, 0, 0, 914, 915,
	917, 918, 0, 0, 0, 926, 0, 1014, -2, -2,
	-2, -2, -2, -2, -2, 0, 928, 0, 930, 1004,
	1024, 0, 0, 856, 0, 0, 0, 0, 1303, 0,
	933, 1004, 1032, 0, 0, 0, 0, 0, 1004, 0,
	1038, 0, 0, 0, 0, 0, 944, 0, 946, 0,
	0, 0, 0, 0, 0, 629, 1066, 692, 81, 470,
	0, 0, 0, 84, 1287, 92, 0, 398, 0, 0,
	0, 0, 0, 483, 93, 1287, 101, 1287, 101, 94,
	71, 481, 72, 0, 476, 0, 469, 73, 0, 478,
	0, 124, 0, 0, 111, 0, 115, 126, 0, 1075,
	392, 425, 0, 0, 1113, 0, 381, 426, 450, 452,
	0, 0, 526, 530, 0, 529, 594, 143, 0, 698,
	532, 548, 0, 0, 540, 537, 535, 699, 0, 0,
	0, 0, 154, 157, 160, 199, 201, 203, 205, 1007,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 215,
	217, 251, 276, 277, 279, 272, 0, 373, 0, 0,
	609, 0, 631, 0, 635, 0, 0, 0, 0, 0,
	686, 686, 686, 684, 660, -2, 0, 666, 0, 0,
	678, 0, -2, 654, 0, 0, 0, -2, -2, 0,
	0, 0, 854, -2, 835, 837, 840, 842, 844, 0,
	0, 0, 0, 0, 0, 0, 855, 0, 0, 1049,
	1052, -2, 1005, 1008, 1009, 0, 0, 1043, 0, 0,
	0, 0, 605, 606, 606, 606, 907, 0, 908, 0,
	0, 0, 0, 0, 0, 925, 0, 927, 929, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 860, 861, 0, 0,
	932, 1030, 1031, 0, 0, 0, 0, 0, 0, 938,
	0, 1037, 0, 0, 0, 942, 943, 945, 0, 729,
	0, 751, 773, 775, 763, 631, 0, 0, 0, 0,
	102, 396, 415, 0, 0, 459, 465, 465, 0, 910,
	911, 0, 0, 0, 86, 0, 0, 0, 0, 90,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 127, 379, 0, 386, 0, 0, 0,
	384, 0, 0, 0, 528, 530, 0, 521, 522, 546,
	547, 533, 545, 0, 548, 554, 551, 557, 0, 705,
	0, 0, 713, 783, 784, 785, 786, 787, 788, 789,
	0, 234, 616, 622, 592, 952, 0, 0, 639, 0,
	0, 0, 0, 0, 681, 685, 682, 683, 0, 0,
	0, 0, 658, 666, 678, 645, 0, 0, 0, 652,
	653, 677, 0, 676, 665, -2, 797, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1040, 0, 975, 0,
	0, 1051, -2, 1012, 1041, 1045, 0, 902, 0, 0,
	0, 0, 1101, 956, 957, 961, 0, 0, 912, 0,
	0, 1013, 1023, 1025, 857, 858, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, -2, -2, -2, 875,
	876, 877, -2, -2, -2, 0, 0, 0, 1026, 0,
	0, 978, 1028, 1029, 1034, 1035, 0, 935, 936, 937,
	1036, 0, 0, 0, 757, 0, 952, 472, 474, 83,
	0, 397, 0, 400, 0, 0, 0, 0, 406, 407,
	0, 0, 0, 0, 417, 424, 0, 468, 1093, 0,
	468, 0, 0, 0, 0, 0, 98, 0, 0, 482,
	0, 101, 101, 471, 0, 0, 0, 477, 0, 479,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 530, 0, 523, 524, 0, 0, 0, 539,
	550, 0, 706, 701, 792, 576, 0, 630, 628, 668,
	0, 670, 0, 0, 0, 672, 648, 661, 0, 663,
	666, 0, 678, 650, 0, 0, 643, 0, 642, 666,
	674, 0, 0, 0, 0, -2, 0, 847, -2, -2,
	974, 1005, 1050, 1044, 1098, 606, 903, 905, 906, 963,
	960, 0, 947, 923, 924, 1022, 0, 0, 0, 0,
	1005, 977, 934, 0, 940, 941, 730, 577, 85, 0,
	401, 402, 1113, 0, 405, 408, 0, 410, 1115, 392,
	0, 421, 422, 460, 461, 464, 462, 465, 606, 419,
	0, 87, 88, 97, 105, 89, 95, 0, 0, 0,
	0, 679, 0, 0, 0, 121, 119, 0, 424, 0,
	414, 392, 382, 424, 0, 0, 525, 526, 0, 0,
	0, 558, 559, 0, 951, 953, 0, 669, 0, 688,
	671, 666, 662, 0, 678, 596, 659, 646, 0, 647,
	0, 678, 0, 0, 655, -2, -2, 848, 976, 0,
	606, 0, 949, -2, 0, 0, 0, 979, 0, 399,
	403, 0, 0, 430, 0, 418, 0, 468, 0, 0,
	107, 0, 473, 475, 0, 0, 0, 0, 123, 120,
	0, 0, 392, 424, 380, 392, 0, 527, 528, 0,
	542, 699, 544, 0, 0, 0, 0, 664, 656, 0,
	644, 640, 0, 651, 0, 675, 904, 966, 0, -2,
	0, 883, 939, 0, 409, 435, 0, 0, 0, 463,
	902, 426, 91, 0, 104, 0, 0, 606, 122, 118,
	0, 412, 392, 455, 0, 520, 0, 543, 954, 955,
	687, 649, 666, 0, 673, 0, 0, 0, 962, 884,
	0, 411, 431, 432, 0, 427, 428, 429, 1114, 423,
	430, 106, 77, 79, 0, 0, 413, 424, 699, 678,
	641, 959, 964, 967, -2, 1251, 1146, 0, 965, 404,
	433, 0, 434, 0, 0, 0, 435, 0, 395, 392,
	541, 657, 0, 969, 970, 971, 972, 973, 436, 0,
	439, 440, 0, 437, 420, 391, 393, 394, 456, 0,
	438, 441, 442, 968,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 319, 3, 325, 320, 3,
	330, 331, 323, 321, 334, 322, 332, 324, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 338, 333,
	313, 315, 314, 3, 335, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 328, 3, 329, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 336, 318, 337, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 317, 57656, 327, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:818
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:830
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:841
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 8:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:843
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:850
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:853
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:855
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:859
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:861
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:863
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:865
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:867
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:876
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:878
		{
			return helpWith(sqllex, "RESET")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "ALTER")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:942
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:948
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:954
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:960
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:970
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:976
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1049
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = nil
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = DropCascade
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = DropRestrict
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = DropDefault
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1122
		{
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter using")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1126
		{
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.str = ""
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1221
		{
			return helpWith(sqllex, "CREATE")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1225
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1227
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1237
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			return helpWith(sqllex, "DELETE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			return helpWith(sqllex, "DROP")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			return helpWith(sqllex, "INSERT")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			return helpWith(sqllex, "DELETE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{ /* SKIP DOC */
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "INSERT")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "DELETE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			return helpWith(sqllex, "GRANT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			return helpWith(sqllex, "RESET")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[3].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{ /* SKIP DOC */
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			return unimplemented(sqllex, "set local")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			return unimplemented(sqllex, "set names")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			return unimplemented(sqllex, "set from current")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = Low
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = Normal
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = High
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1799
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			return helpWith(sqllex, "SHOW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1882
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1896
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1939
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = DropDefault
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2094
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			return unimplemented(sqllex, "match full")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return unimplemented(sqllex, "match partial")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			return unimplemented(sqllex, "match simple")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2302
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			return unimplemented(sqllex, "no action")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			return unimplemented(sqllex, "action set null")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplemented(sqllex, "action set default")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = true
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = false
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2439
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2443
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = Ascending
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = Descending
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2483
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2485
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = true
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = false
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2518
		{
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.str = ""
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.str = ""
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.str = ""
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.str = ""
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.str = ""
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.str = ""
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2704
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2708
		{
			return helpWith(sqllex, "INSERT")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2724
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2773
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2809
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			return helpWith(sqllex, "<selectclause>")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			return helpWith(sqllex, "SELECT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			return helpWith(sqllex, "SELECT")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			return helpWith(sqllex, "VALUES")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			return helpWith(sqllex, "TABLE")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			return helpWith(sqllex, "TABLE")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3059
		{
			return unimplemented(sqllex, "cte")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3063
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3071
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = true
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = false
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = false
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = true
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3095
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			return helpWith(sqllex, "VALUES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			return helpWith(sqllex, "<source>")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &From{}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3302
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3347
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3364
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = nil
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.str = astFullJoin
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.str = astLeftJoin
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = astRightJoin
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.str = astInnerJoin
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3551
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3746
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = nil
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3891
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3923
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3963
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = year
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = month
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = day
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = hour
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = minute
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = month
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = hour
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = minute
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = minute
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = nil
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = second
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4093
		{
			return unimplemented(sqllex, "at tz")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4327
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4554
		{
			return unimplemented(sqllex, "variadic")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4555
		{
			return unimplemented(sqllex, "variadic")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplemented(sqllex, "func_application")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4599
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4617
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			return unimplemented(sqllex, "current role")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			return unimplemented(sqllex, "current user")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			return unimplemented(sqllex, "session user")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			return unimplemented(sqllex, "user")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4634
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4639
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4644
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "treat")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4700
		{
			return unimplemented(sqllex, "within group")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Window(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.str = ""
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			return unimplemented(sqllex, "frame range")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4800
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4804
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4814
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = Any
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = Some
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = All
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = Plus
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = Minus
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = Mult
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = Div
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = FloorDiv
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = Mod
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = Bitand
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = Bitor
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = Pow
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = Bitxor
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = LT
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = GT
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = EQ
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = LE
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = GE
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = NE
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = Like
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = NotLike
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = ILike
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = NotILike
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5179
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5341
		{
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5377
		{
			return unimplemented(sqllex, "func const")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5386
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = DNull
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.str = ""
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
