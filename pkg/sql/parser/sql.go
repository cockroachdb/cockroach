// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FETCHVAL = 57456
const FETCHTEXT = 57457
const FETCHVAL_PATH = 57458
const FETCHTEXT_PATH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const HAS_SOME = 57481
const HAS_ALL = 57482
const IMPORT = 57483
const INCREMENTAL = 57484
const IF = 57485
const IFNULL = 57486
const ILIKE = 57487
const IN = 57488
const INET = 57489
const INTERLEAVE = 57490
const INDEX = 57491
const INDEXES = 57492
const INITIALLY = 57493
const INNER = 57494
const INSERT = 57495
const INT = 57496
const INT2VECTOR = 57497
const INT2 = 57498
const INT4 = 57499
const INT8 = 57500
const INT64 = 57501
const INTEGER = 57502
const INTERSECT = 57503
const INTERVAL = 57504
const INTO = 57505
const IS = 57506
const ISOLATION = 57507
const JOB = 57508
const JOBS = 57509
const JOIN = 57510
const JSON = 57511
const JSONB = 57512
const KEY = 57513
const KEYS = 57514
const KV = 57515
const LATERAL = 57516
const LC_CTYPE = 57517
const LC_COLLATE = 57518
const LEADING = 57519
const LEAST = 57520
const LEFT = 57521
const LEVEL = 57522
const LIKE = 57523
const LIMIT = 57524
const LOCAL = 57525
const LOCALTIME = 57526
const LOCALTIMESTAMP = 57527
const LOW = 57528
const LSHIFT = 57529
const MATCH = 57530
const MINUTE = 57531
const MONTH = 57532
const NAN = 57533
const NAME = 57534
const NAMES = 57535
const NATURAL = 57536
const NEXT = 57537
const NO = 57538
const NO_INDEX_JOIN = 57539
const NORMAL = 57540
const NOT = 57541
const NOTHING = 57542
const NULL = 57543
const NULLIF = 57544
const NULLS = 57545
const NUMERIC = 57546
const OF = 57547
const OFF = 57548
const OFFSET = 57549
const OID = 57550
const ON = 57551
const ONLY = 57552
const OPTIONS = 57553
const OR = 57554
const ORDER = 57555
const ORDINALITY = 57556
const OUT = 57557
const OUTER = 57558
const OVER = 57559
const OVERLAPS = 57560
const OVERLAY = 57561
const PARENT = 57562
const PARTIAL = 57563
const PARTITION = 57564
const PASSWORD = 57565
const PAUSE = 57566
const PLACING = 57567
const PLANS = 57568
const POSITION = 57569
const PRECEDING = 57570
const PRECISION = 57571
const PREPARE = 57572
const PRIMARY = 57573
const PRIORITY = 57574
const QUERIES = 57575
const QUERY = 57576
const RANGE = 57577
const READ = 57578
const REAL = 57579
const RECURSIVE = 57580
const REF = 57581
const REFERENCES = 57582
const REGCLASS = 57583
const REGPROC = 57584
const REGPROCEDURE = 57585
const REGNAMESPACE = 57586
const REGTYPE = 57587
const REMOVE_PATH = 57588
const RENAME = 57589
const REPEATABLE = 57590
const RELEASE = 57591
const RESET = 57592
const RESTORE = 57593
const RESTRICT = 57594
const RESUME = 57595
const RETURNING = 57596
const REVOKE = 57597
const RIGHT = 57598
const ROLLBACK = 57599
const ROLLUP = 57600
const ROW = 57601
const ROWS = 57602
const RSHIFT = 57603
const SAVEPOINT = 57604
const SCATTER = 57605
const SEARCH = 57606
const SECOND = 57607
const SELECT = 57608
const SEQUENCES = 57609
const SERIAL = 57610
const SERIALIZABLE = 57611
const SESSION = 57612
const SESSIONS = 57613
const SESSION_USER = 57614
const SET = 57615
const SETTING = 57616
const SETTINGS = 57617
const SHOW = 57618
const SIMILAR = 57619
const SIMPLE = 57620
const SMALLINT = 57621
const SMALLSERIAL = 57622
const SNAPSHOT = 57623
const SOME = 57624
const SPLIT = 57625
const SQL = 57626
const START = 57627
const STATUS = 57628
const STDIN = 57629
const STRICT = 57630
const STRING = 57631
const STORE = 57632
const STORING = 57633
const SUBSTRING = 57634
const SYMMETRIC = 57635
const SYSTEM = 57636
const TABLE = 57637
const TABLES = 57638
const TEMP = 57639
const TEMPLATE = 57640
const TEMPORARY = 57641
const TESTING_RANGES = 57642
const TESTING_RELOCATE = 57643
const TEXT = 57644
const THEN = 57645
const TIME = 57646
const TIMESTAMP = 57647
const TIMESTAMPTZ = 57648
const TO = 57649
const TRAILING = 57650
const TRACE = 57651
const TRANSACTION = 57652
const TREAT = 57653
const TRIM = 57654
const TRUE = 57655
const TRUNCATE = 57656
const TYPE = 57657
const UNBOUNDED = 57658
const UNCOMMITTED = 57659
const UNION = 57660
const UNIQUE = 57661
const UNKNOWN = 57662
const UPDATE = 57663
const UPSERT = 57664
const USE = 57665
const USER = 57666
const USERS = 57667
const USING = 57668
const UUID = 57669
const VALID = 57670
const VALIDATE = 57671
const VALUE = 57672
const VALUES = 57673
const VARCHAR = 57674
const VARIADIC = 57675
const VIEW = 57676
const VARYING = 57677
const WHEN = 57678
const WHERE = 57679
const WINDOW = 57680
const WITH = 57681
const WITHIN = 57682
const WITHOUT = 57683
const WRITE = 57684
const YEAR = 57685
const ZONE = 57686
const NOT_LA = 57687
const WITH_LA = 57688
const AS_LA = 57689
const CONTAINED_BY = 57690
const HAS_SOME_KEY = 57691
const HAS_ALL_KEYS = 57692
const POSTFIXOP = 57693
const UMINUS = 57694
const HELPTOKEN = 57695

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6576

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	373, 53,
	-2, 673,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	149, 525,
	-2, 0,
	-1, 61,
	93, 673,
	153, 673,
	321, 673,
	322, 673,
	-2, 0,
	-1, 71,
	104, 648,
	113, 648,
	161, 648,
	182, 648,
	207, 648,
	213, 648,
	318, 648,
	-2, 637,
	-1, 103,
	4, 675,
	20, 675,
	21, 675,
	23, 675,
	28, 675,
	33, 675,
	34, 675,
	35, 675,
	36, 675,
	37, 675,
	38, 675,
	39, 675,
	40, 675,
	41, 675,
	42, 675,
	44, 675,
	45, 675,
	46, 675,
	47, 675,
	48, 675,
	51, 675,
	52, 675,
	53, 675,
	55, 675,
	56, 675,
	60, 675,
	61, 675,
	62, 675,
	64, 675,
	66, 675,
	68, 675,
	69, 675,
	72, 675,
	73, 675,
	74, 675,
	82, 675,
	83, 675,
	84, 675,
	85, 675,
	86, 675,
	87, 675,
	88, 675,
	89, 675,
	91, 675,
	93, 675,
	95, 675,
	98, 675,
	99, 675,
	101, 675,
	105, 675,
	106, 675,
	107, 675,
	108, 675,
	109, 675,
	110, 675,
	118, 675,
	119, 675,
	120, 675,
	121, 675,
	122, 675,
	124, 675,
	126, 675,
	131, 675,
	132, 675,
	134, 675,
	137, 675,
	138, 675,
	141, 675,
	142, 675,
	143, 675,
	144, 675,
	147, 675,
	148, 675,
	150, 675,
	153, 675,
	154, 675,
	155, 675,
	156, 675,
	157, 675,
	158, 675,
	159, 675,
	160, 675,
	162, 675,
	165, 675,
	166, 675,
	167, 675,
	169, 675,
	170, 675,
	171, 675,
	172, 675,
	173, 675,
	175, 675,
	176, 675,
	178, 675,
	180, 675,
	183, 675,
	186, 675,
	188, 675,
	189, 675,
	190, 675,
	191, 675,
	192, 675,
	193, 675,
	195, 675,
	196, 675,
	197, 675,
	198, 675,
	202, 675,
	203, 675,
	204, 675,
	205, 675,
	206, 675,
	208, 675,
	210, 675,
	211, 675,
	214, 675,
	215, 675,
	217, 675,
	219, 675,
	220, 675,
	221, 675,
	222, 675,
	223, 675,
	224, 675,
	226, 675,
	227, 675,
	228, 675,
	229, 675,
	230, 675,
	232, 675,
	233, 675,
	234, 675,
	235, 675,
	236, 675,
	237, 675,
	238, 675,
	239, 675,
	241, 675,
	242, 675,
	243, 675,
	244, 675,
	245, 675,
	247, 675,
	248, 675,
	249, 675,
	250, 675,
	251, 675,
	252, 675,
	253, 675,
	255, 675,
	257, 675,
	258, 675,
	259, 675,
	260, 675,
	262, 675,
	263, 675,
	264, 675,
	265, 675,
	267, 675,
	268, 675,
	269, 675,
	270, 675,
	271, 675,
	273, 675,
	274, 675,
	275, 675,
	276, 675,
	278, 675,
	279, 675,
	280, 675,
	281, 675,
	283, 675,
	284, 675,
	285, 675,
	286, 675,
	287, 675,
	288, 675,
	289, 675,
	290, 675,
	291, 675,
	292, 675,
	294, 675,
	296, 675,
	297, 675,
	298, 675,
	299, 675,
	300, 675,
	301, 675,
	302, 675,
	304, 675,
	305, 675,
	306, 675,
	309, 675,
	310, 675,
	311, 675,
	312, 675,
	314, 675,
	315, 675,
	316, 675,
	317, 675,
	320, 675,
	321, 675,
	322, 675,
	323, 675,
	325, 675,
	327, 675,
	328, 675,
	329, 675,
	330, 675,
	331, 675,
	332, 675,
	335, 675,
	340, 675,
	341, 675,
	342, 675,
	343, 675,
	344, 675,
	-2, 0,
	-1, 116,
	104, 647,
	113, 647,
	161, 647,
	182, 647,
	207, 647,
	213, 647,
	318, 647,
	-2, 640,
	-1, 121,
	1, 574,
	165, 574,
	232, 574,
	236, 574,
	372, 574,
	373, 574,
	-2, 0,
	-1, 123,
	1, 574,
	372, 574,
	373, 574,
	-2, 0,
	-1, 124,
	1, 574,
	372, 574,
	373, 574,
	-2, 0,
	-1, 125,
	1, 578,
	372, 578,
	373, 578,
	-2, 0,
	-1, 132,
	4, 681,
	5, 681,
	6, 681,
	7, 681,
	8, 681,
	9, 681,
	20, 681,
	21, 681,
	23, 681,
	28, 681,
	29, 681,
	33, 681,
	34, 681,
	35, 681,
	36, 681,
	37, 681,
	38, 681,
	39, 681,
	40, 681,
	41, 681,
	42, 681,
	44, 681,
	45, 681,
	46, 681,
	47, 681,
	48, 681,
	49, 681,
	50, 681,
	51, 681,
	52, 681,
	53, 681,
	55, 681,
	56, 681,
	58, 681,
	60, 681,
	61, 681,
	62, 681,
	64, 681,
	66, 681,
	68, 681,
	69, 681,
	71, 681,
	72, 681,
	73, 681,
	74, 681,
	76, 681,
	77, 681,
	78, 681,
	80, 681,
	81, 681,
	82, 681,
	83, 681,
	84, 681,
	85, 681,
	86, 681,
	87, 681,
	88, 681,
	89, 681,
	91, 681,
	93, 681,
	95, 681,
	98, 681,
	99, 681,
	101, 681,
	105, 681,
	106, 681,
	107, 681,
	108, 681,
	109, 681,
	110, 681,
	111, 681,
	112, 681,
	118, 681,
	119, 681,
	120, 681,
	121, 681,
	122, 681,
	124, 681,
	126, 681,
	129, 681,
	131, 681,
	132, 681,
	134, 681,
	137, 681,
	138, 681,
	141, 681,
	142, 681,
	143, 681,
	144, 681,
	145, 681,
	147, 681,
	148, 681,
	150, 681,
	152, 681,
	153, 681,
	154, 681,
	155, 681,
	156, 681,
	157, 681,
	158, 681,
	159, 681,
	160, 681,
	162, 681,
	164, 681,
	165, 681,
	166, 681,
	167, 681,
	168, 681,
	169, 681,
	170, 681,
	171, 681,
	172, 681,
	173, 681,
	175, 681,
	176, 681,
	178, 681,
	179, 681,
	180, 681,
	181, 681,
	183, 681,
	186, 681,
	188, 681,
	189, 681,
	190, 681,
	191, 681,
	192, 681,
	193, 681,
	194, 681,
	195, 681,
	196, 681,
	197, 681,
	198, 681,
	199, 681,
	201, 681,
	202, 681,
	203, 681,
	204, 681,
	205, 681,
	206, 681,
	208, 681,
	211, 681,
	214, 681,
	215, 681,
	216, 681,
	217, 681,
	218, 681,
	219, 681,
	220, 681,
	221, 681,
	222, 681,
	223, 681,
	224, 681,
	226, 681,
	227, 681,
	228, 681,
	229, 681,
	230, 681,
	232, 681,
	233, 681,
	234, 681,
	235, 681,
	236, 681,
	237, 681,
	238, 681,
	239, 681,
	241, 681,
	242, 681,
	243, 681,
	244, 681,
	245, 681,
	247, 681,
	248, 681,
	249, 681,
	250, 681,
	251, 681,
	252, 681,
	253, 681,
	255, 681,
	256, 681,
	257, 681,
	258, 681,
	259, 681,
	260, 681,
	262, 681,
	263, 681,
	264, 681,
	265, 681,
	267, 681,
	268, 681,
	269, 681,
	270, 681,
	271, 681,
	272, 681,
	273, 681,
	274, 681,
	275, 681,
	276, 681,
	277, 681,
	278, 681,
	279, 681,
	280, 681,
	281, 681,
	283, 681,
	284, 681,
	285, 681,
	286, 681,
	287, 681,
	288, 681,
	289, 681,
	290, 681,
	291, 681,
	292, 681,
	294, 681,
	296, 681,
	297, 681,
	298, 681,
	299, 681,
	300, 681,
	301, 681,
	302, 681,
	304, 681,
	305, 681,
	306, 681,
	309, 681,
	310, 681,
	311, 681,
	312, 681,
	313, 681,
	314, 681,
	315, 681,
	316, 681,
	317, 681,
	320, 681,
	321, 681,
	322, 681,
	323, 681,
	324, 681,
	325, 681,
	327, 681,
	328, 681,
	329, 681,
	330, 681,
	331, 681,
	332, 681,
	335, 681,
	340, 681,
	341, 681,
	342, 681,
	343, 681,
	344, 681,
	345, 681,
	355, 681,
	360, 681,
	361, 681,
	362, 681,
	369, 681,
	375, 681,
	-2, 0,
	-1, 135,
	1, 53,
	373, 53,
	-2, 673,
	-1, 497,
	128, 1284,
	307, 1284,
	350, 1284,
	371, 1284,
	-2, 0,
	-1, 498,
	128, 1237,
	307, 1237,
	350, 1237,
	371, 1237,
	-2, 0,
	-1, 500,
	128, 1342,
	307, 1342,
	350, 1342,
	371, 1342,
	-2, 0,
	-1, 502,
	128, 1364,
	307, 1364,
	350, 1364,
	371, 1364,
	-2, 0,
	-1, 509,
	128, 1289,
	307, 1289,
	350, 1289,
	371, 1289,
	-2, 317,
	-1, 535,
	1, 394,
	368, 394,
	370, 394,
	372, 394,
	373, 394,
	-2, 0,
	-1, 536,
	1, 441,
	125, 441,
	368, 441,
	370, 441,
	372, 441,
	373, 441,
	-2, 0,
	-1, 542,
	1, 408,
	368, 408,
	370, 408,
	372, 408,
	373, 408,
	-2, 0,
	-1, 544,
	1, 412,
	368, 412,
	370, 412,
	372, 412,
	373, 412,
	-2, 0,
	-1, 547,
	1, 420,
	368, 420,
	370, 420,
	372, 420,
	373, 420,
	-2, 0,
	-1, 548,
	1, 425,
	368, 425,
	370, 425,
	372, 425,
	373, 425,
	-2, 0,
	-1, 551,
	1, 435,
	368, 435,
	370, 435,
	372, 435,
	373, 435,
	-2, 0,
	-1, 565,
	113, 683,
	182, 683,
	207, 683,
	-2, 643,
	-1, 568,
	113, 682,
	182, 682,
	207, 682,
	-2, 641,
	-1, 625,
	369, 1215,
	-2, 1208,
	-1, 626,
	369, 1216,
	-2, 1209,
	-1, 632,
	5, 862,
	369, 862,
	-2, 1416,
	-1, 657,
	5, 821,
	-2, 1385,
	-1, 658,
	5, 856,
	369, 856,
	-2, 1387,
	-1, 659,
	5, 831,
	-2, 1388,
	-1, 660,
	5, 830,
	-2, 1389,
	-1, 661,
	5, 856,
	369, 856,
	-2, 1392,
	-1, 662,
	5, 856,
	369, 856,
	-2, 1393,
	-1, 663,
	5, 857,
	-2, 1396,
	-1, 664,
	5, 813,
	-2, 1397,
	-1, 665,
	5, 813,
	-2, 1398,
	-1, 666,
	5, 838,
	-2, 1402,
	-1, 667,
	5, 823,
	-2, 1403,
	-1, 668,
	5, 824,
	-2, 1404,
	-1, 669,
	5, 814,
	-2, 1410,
	-1, 670,
	5, 815,
	-2, 1411,
	-1, 671,
	5, 816,
	-2, 1412,
	-1, 672,
	5, 817,
	-2, 1413,
	-1, 673,
	5, 818,
	-2, 1414,
	-1, 674,
	5, 819,
	-2, 1415,
	-1, 675,
	5, 813,
	-2, 1422,
	-1, 676,
	5, 822,
	-2, 1427,
	-1, 677,
	5, 820,
	-2, 1430,
	-1, 678,
	5, 854,
	369, 854,
	-2, 1432,
	-1, 679,
	5, 858,
	-2, 1435,
	-1, 680,
	5, 860,
	-2, 1436,
	-1, 681,
	5, 853,
	369, 853,
	-2, 1441,
	-1, 777,
	223, 671,
	-2, 518,
	-1, 781,
	209, 1212,
	-2, 0,
	-1, 816,
	1, 208,
	368, 208,
	370, 208,
	372, 208,
	373, 208,
	-2, 646,
	-1, 823,
	4, 1440,
	10, 1440,
	11, 1440,
	13, 1440,
	14, 1440,
	15, 1440,
	16, 1440,
	17, 1440,
	18, 1440,
	20, 1440,
	21, 1440,
	23, 1440,
	26, 1440,
	28, 1440,
	30, 1440,
	33, 1440,
	34, 1440,
	35, 1440,
	36, 1440,
	37, 1440,
	38, 1440,
	39, 1440,
	40, 1440,
	41, 1440,
	42, 1440,
	44, 1440,
	45, 1440,
	46, 1440,
	47, 1440,
	48, 1440,
	51, 1440,
	52, 1440,
	53, 1440,
	55, 1440,
	56, 1440,
	57, 1440,
	60, 1440,
	61, 1440,
	62, 1440,
	63, 1440,
	64, 1440,
	66, 1440,
	67, 1440,
	68, 1440,
	69, 1440,
	71, 1440,
	72, 1440,
	73, 1440,
	74, 1440,
	82, 1440,
	83, 1440,
	84, 1440,
	85, 1440,
	86, 1440,
	87, 1440,
	88, 1440,
	89, 1440,
	91, 1440,
	93, 1440,
	95, 1440,
	98, 1440,
	99, 1440,
	101, 1440,
	105, 1440,
	106, 1440,
	107, 1440,
	108, 1440,
	109, 1440,
	110, 1440,
	114, 1440,
	115, 1440,
	116, 1440,
	117, 1440,
	118, 1440,
	119, 1440,
	120, 1440,
	121, 1440,
	122, 1440,
	123, 1440,
	124, 1440,
	126, 1440,
	129, 1440,
	131, 1440,
	132, 1440,
	134, 1440,
	137, 1440,
	138, 1440,
	141, 1440,
	142, 1440,
	143, 1440,
	144, 1440,
	145, 1440,
	146, 1440,
	147, 1440,
	148, 1440,
	150, 1440,
	152, 1440,
	153, 1440,
	154, 1440,
	155, 1440,
	156, 1440,
	157, 1440,
	158, 1440,
	159, 1440,
	160, 1440,
	162, 1440,
	164, 1440,
	165, 1440,
	166, 1440,
	167, 1440,
	168, 1440,
	169, 1440,
	170, 1440,
	171, 1440,
	172, 1440,
	173, 1440,
	175, 1440,
	176, 1440,
	178, 1440,
	179, 1440,
	180, 1440,
	181, 1440,
	183, 1440,
	186, 1440,
	187, 1440,
	188, 1440,
	189, 1440,
	190, 1440,
	191, 1440,
	192, 1440,
	193, 1440,
	194, 1440,
	195, 1440,
	196, 1440,
	197, 1440,
	198, 1440,
	202, 1440,
	203, 1440,
	204, 1440,
	205, 1440,
	206, 1440,
	208, 1440,
	211, 1440,
	212, 1440,
	214, 1440,
	215, 1440,
	217, 1440,
	219, 1440,
	220, 1440,
	221, 1440,
	222, 1440,
	223, 1440,
	224, 1440,
	226, 1440,
	227, 1440,
	228, 1440,
	229, 1440,
	230, 1440,
	232, 1440,
	233, 1440,
	234, 1440,
	235, 1440,
	236, 1440,
	237, 1440,
	238, 1440,
	239, 1440,
	241, 1440,
	242, 1440,
	243, 1440,
	244, 1440,
	245, 1440,
	246, 1440,
	247, 1440,
	248, 1440,
	249, 1440,
	250, 1440,
	251, 1440,
	252, 1440,
	253, 1440,
	255, 1440,
	256, 1440,
	257, 1440,
	258, 1440,
	259, 1440,
	260, 1440,
	261, 1440,
	262, 1440,
	263, 1440,
	264, 1440,
	265, 1440,
	267, 1440,
	268, 1440,
	269, 1440,
	270, 1440,
	271, 1440,
	273, 1440,
	274, 1440,
	275, 1440,
	276, 1440,
	277, 1440,
	278, 1440,
	279, 1440,
	280, 1440,
	281, 1440,
	283, 1440,
	284, 1440,
	285, 1440,
	286, 1440,
	287, 1440,
	288, 1440,
	289, 1440,
	290, 1440,
	291, 1440,
	292, 1440,
	294, 1440,
	296, 1440,
	297, 1440,
	298, 1440,
	299, 1440,
	300, 1440,
	301, 1440,
	302, 1440,
	304, 1440,
	305, 1440,
	306, 1440,
	309, 1440,
	310, 1440,
	311, 1440,
	312, 1440,
	314, 1440,
	315, 1440,
	316, 1440,
	317, 1440,
	320, 1440,
	321, 1440,
	322, 1440,
	323, 1440,
	325, 1440,
	327, 1440,
	328, 1440,
	329, 1440,
	330, 1440,
	331, 1440,
	332, 1440,
	335, 1440,
	340, 1440,
	341, 1440,
	342, 1440,
	343, 1440,
	344, 1440,
	345, 1440,
	346, 1440,
	348, 1440,
	349, 1440,
	350, 1440,
	351, 1440,
	352, 1440,
	353, 1440,
	354, 1440,
	355, 1440,
	357, 1440,
	358, 1440,
	359, 1440,
	360, 1440,
	361, 1440,
	362, 1440,
	363, 1440,
	364, 1440,
	365, 1440,
	367, 1440,
	370, 1440,
	371, 1440,
	374, 1440,
	375, 1440,
	-2, 0,
	-1, 837,
	128, 1342,
	307, 1342,
	350, 1342,
	371, 1342,
	-2, 0,
	-1, 854,
	128, 1364,
	307, 1364,
	350, 1364,
	371, 1364,
	-2, 0,
	-1, 855,
	165, 586,
	232, 586,
	236, 586,
	-2, 305,
	-1, 924,
	113, 682,
	182, 682,
	207, 682,
	-2, 644,
	-1, 1003,
	104, 648,
	113, 648,
	161, 648,
	182, 648,
	207, 648,
	213, 648,
	318, 648,
	-2, 991,
	-1, 1013,
	369, 1192,
	-2, 1180,
	-1, 1031,
	370, 1104,
	-2, 0,
	-1, 1055,
	165, 586,
	232, 586,
	236, 586,
	-2, 581,
	-1, 1083,
	370, 1104,
	-2, 0,
	-1, 1087,
	104, 648,
	113, 648,
	161, 648,
	182, 648,
	207, 648,
	213, 648,
	318, 648,
	-2, 744,
	-1, 1312,
	165, 586,
	232, 586,
	236, 586,
	-2, 307,
	-1, 1410,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 897,
	-1, 1411,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 898,
	-1, 1412,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 899,
	-1, 1413,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 900,
	-1, 1414,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 901,
	-1, 1415,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 902,
	-1, 1416,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 903,
	-1, 1417,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 904,
	-1, 1426,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 913,
	-1, 1427,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 914,
	-1, 1428,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 915,
	-1, 1431,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 920,
	-1, 1437,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 922,
	-1, 1439,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 926,
	-1, 1440,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 927,
	-1, 1441,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 928,
	-1, 1442,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 929,
	-1, 1511,
	128, 1115,
	369, 1215,
	-2, 1208,
	-1, 1512,
	128, 1116,
	-2, 1381,
	-1, 1513,
	128, 1117,
	-2, 1288,
	-1, 1514,
	128, 1118,
	-2, 1252,
	-1, 1515,
	128, 1119,
	-2, 1268,
	-1, 1516,
	128, 1120,
	-2, 1287,
	-1, 1517,
	128, 1121,
	-2, 1339,
	-1, 1593,
	1, 745,
	71, 745,
	104, 745,
	113, 745,
	129, 745,
	133, 745,
	135, 745,
	152, 745,
	161, 745,
	168, 745,
	179, 745,
	182, 745,
	194, 745,
	207, 745,
	209, 745,
	213, 745,
	254, 745,
	256, 745,
	318, 745,
	326, 745,
	337, 745,
	338, 745,
	347, 745,
	368, 745,
	370, 745,
	372, 745,
	373, 745,
	374, 745,
	-2, 744,
	-1, 1733,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 921,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 923,
	-1, 1739,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 924,
	-1, 1757,
	218, 1075,
	-2, 1077,
	-1, 1982,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 925,
	-1, 1987,
	164, 0,
	-2, 941,
	-1, 1996,
	218, 1076,
	-2, 1078,
	-1, 2038,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 968,
	-1, 2039,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 969,
	-1, 2040,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 970,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 974,
	-1, 2045,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 975,
	-1, 2046,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 976,
	-1, 2170,
	164, 0,
	-2, 942,
	-1, 2173,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 945,
	-1, 2174,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 947,
	-1, 2290,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 946,
	-1, 2291,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 948,
	-1, 2298,
	164, 0,
	-2, 977,
	-1, 2375,
	164, 0,
	-2, 978,
	-1, 2452,
	36, 0,
	145, 0,
	181, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 1384,
}

const sqlPrivate = 57344

const sqlLast = 42320

var sqlAct = [...]int{

	626, 2126, 2451, 2460, 2461, 2324, 2499, 2426, 2462, 1964,
	1664, 1210, 2015, 569, 1656, 2380, 1727, 2450, 1306, 1636,
	2271, 70, 1217, 585, 875, 624, 2224, 1252, 2136, 2238,
	2158, 729, 1307, 619, 1930, 1932, 602, 623, 2160, 616,
	173, 2097, 771, 2098, 173, 2304, 1653, 1938, 1640, 1085,
	455, 25, 173, 1635, 2152, 1871, 1081, 1823, 1588, 1850,
	1253, 173, 2204, 1665, 1639, 1213, 173, 173, 1064, 1597,
	173, 440, 1606, 173, 1589, 1491, 1858, 1629, 1389, 1822,
	2068, 173, 1768, 1466, 1384, 1467, 1723, 1009, 1206, 858,
	1711, 1093, 577, 115, 508, 1095, 1116, 596, 1337, 1475,
	1065, 1454, 927, 1333, 1451, 437, 735, 806, 857, 1041,
	1045, 1485, 1637, 803, 1643, 877, 1658, 817, 738, 1540,
	796, 1575, 1072, 1562, 717, 998, 1507, 173, 173, 595,
	618, 488, 116, 928, 164, 173, 926, 1055, 501, 1336,
	574, 1224, 466, 793, 117, 169, 715, 1468, 1054, 529,
	505, 932, 1756, 1090, 115, 2239, 2082, 573, 1232, 2083,
	1232, 173, 173, 173, 173, 1657, 1082, 2495, 173, 173,
	684, 1115, 2476, 2472, 573, 2471, 2237, 1679, 1232, 1679,
	601, 2468, 1980, 683, 1760, 1115, 25, 1112, 759, 2448,
	1761, 943, 944, 1694, 38, 2447, 721, 1948, 722, 1694,
	568, 480, 1947, 2421, 2416, 39, 2412, 1687, 2285, 2404,
	1115, 2377, 2355, 2237, 946, 1687, 2237, 2352, 42, 583,
	1679, 1115, 2350, 2335, 394, 1230, 2237, 1115, 115, 2334,
	2312, 2309, 2292, 2237, 1115, 1115, 1687, 1630, 945, 2259,
	2257, 48, 2236, 1679, 1679, 2217, 2237, 2172, 566, 1115,
	2151, 1687, 2146, 2078, 1634, 1991, 1634, 2079, 2422, 1679,
	565, 1958, 1079, 1564, 2071, 1920, 1630, 743, 747, 578,
	59, 753, 1919, 1694, 719, 576, 1115, 60, 38, 61,
	1847, 1840, 1838, 1837, 1115, 1841, 1679, 1679, 732, 39,
	1836, 1698, 1686, 1694, 1679, 1679, 1687, 1678, 2285, 1633,
	2071, 1679, 42, 1634, 951, 1569, 1245, 1563, 132, 1568,
	1246, 1975, 63, 1595, 2051, 736, 1993, 1115, 1679, 1920,
	1726, 1709, 1315, 943, 944, 48, 973, 974, 975, 983,
	984, 985, 1059, 1470, 757, 1767, 839, 134, 135, 976,
	2240, 745, 749, 132, 755, 836, 946, 835, 834, 987,
	833, 943, 944, 832, 59, 831, 830, 829, 1334, 828,
	827, 60, 1233, 61, 1233, 826, 825, 723, 966, 720,
	945, 561, 134, 133, 946, 560, 965, 559, 527, 526,
	962, 126, 1233, 525, 1793, 1794, 39, 524, 127, 523,
	522, 521, 520, 519, 518, 64, 63, 517, 945, 42,
	516, 515, 173, 514, 173, 173, 513, 173, 133, 512,
	511, 118, 173, 496, 1866, 495, 631, 494, 173, 493,
	492, 119, 66, 428, 67, 427, 174, 968, 969, 970,
	971, 173, 173, 173, 173, 173, 951, 132, 426, 425,
	820, 1713, 967, 1947, 461, 424, 118, 99, 409, 1793,
	1794, 408, 400, 399, 810, 398, 397, 390, 980, 988,
	389, 574, 173, 1488, 951, 158, 134, 1793, 1794, 157,
	1811, 1812, 1813, 156, 155, 173, 154, 986, 153, 64,
	943, 944, 763, 2169, 1238, 152, 1231, 151, 150, 149,
	148, 173, 147, 63, 978, 146, 775, 1799, 145, 779,
	966, 173, 133, 946, 1368, 119, 66, 1504, 67, 1563,
	126, 144, 143, 142, 1489, 141, 140, 127, 139, 138,
	1808, 132, 137, 136, 795, 799, 799, 945, 461, 1086,
	1340, 99, 820, 1502, 1500, 870, 1498, 2494, 2467, 132,
	118, 947, 948, 949, 950, 952, 953, 682, 2449, 2431,
	134, 770, 800, 939, 2372, 818, 2353, 2203, 2202, 972,
	2198, 1809, 1799, 173, 873, 1490, 1487, 2278, 134, 840,
	2197, 2190, 1793, 1794, 967, 2189, 64, 2188, 2184, 925,
	1799, 2183, 2182, 2181, 1793, 1794, 133, 2175, 2157, 2065,
	981, 2060, 2059, 951, 126, 2058, 2001, 1918, 749, 1878,
	1874, 127, 119, 66, 133, 67, 1845, 1842, 868, 1830,
	1821, 1792, 126, 755, 1789, 1788, 1922, 1786, 132, 127,
	1773, 1814, 574, 1772, 118, 461, 1809, 1757, 99, 1593,
	939, 1249, 1661, 938, 1462, 1810, 730, 1017, 1084, 852,
	855, 1492, 118, 768, 1809, 1083, 1216, 134, 924, 1010,
	2017, 1001, 1962, 2439, 763, 2407, 2401, 966, 979, 2400,
	2399, 957, 958, 964, 963, 959, 960, 961, 982, 923,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 2391,
	871, 2389, 2383, 133, 2367, 1799, 2366, 2365, 2321, 2300,
	2286, 126, 2265, 2243, 2195, 2134, 2132, 1799, 127, 2131,
	1810, 947, 948, 949, 950, 952, 953, 2129, 2106, 2105,
	566, 1335, 1722, 2086, 2074, 173, 1986, 173, 1810, 1486,
	1721, 118, 565, 935, 936, 1909, 1904, 2277, 1891, 940,
	1890, 967, 1802, 1803, 1795, 1796, 1797, 1798, 1800, 1801,
	173, 173, 1876, 749, 1463, 1692, 1846, 1820, 1005, 1809,
	1782, 1781, 1778, 1753, 1063, 1070, 1748, 820, 173, 1456,
	1046, 574, 1049, 1580, 1119, 1552, 1496, 1013, 1209, 731,
	173, 1043, 1044, 1062, 1053, 1039, 1047, 1864, 1038, 1037,
	1036, 1035, 173, 1034, 1033, 1032, 1050, 1031, 173, 1113,
	173, 1215, 173, 1030, 1068, 1029, 173, 1028, 1803, 1795,
	1796, 1797, 1798, 1800, 1801, 1805, 1806, 1807, 132, 1027,
	1026, 1025, 1024, 1208, 1804, 1802, 1803, 1795, 1796, 1797,
	1798, 1800, 1801, 1810, 1023, 1022, 2284, 115, 954, 955,
	947, 948, 949, 950, 952, 953, 1891, 134, 173, 173,
	1080, 1793, 1794, 1021, 1014, 820, 1058, 173, 1221, 1002,
	173, 1001, 851, 843, 1056, 814, 2177, 2156, 1088, 943,
	944, 2081, 2077, 1060, 1759, 1689, 821, 1581, 686, 1793,
	1794, 1119, 1084, 133, 1010, 1503, 1960, 1259, 999, 1933,
	173, 126, 946, 2288, 769, 173, 2287, 2281, 127, 1697,
	173, 173, 1630, 173, 795, 173, 2084, 173, 1330, 173,
	1949, 1501, 1499, 1114, 1497, 1086, 945, 1844, 867, 1103,
	173, 1660, 685, 1051, 921, 1843, 173, 173, 1052, 1732,
	736, 1091, 1795, 1796, 1797, 1798, 1800, 1801, 864, 1101,
	1250, 1223, 1696, 1226, 1795, 1796, 1797, 1798, 1800, 1801,
	1019, 1321, 173, 1965, 1214, 2305, 1119, 1102, 1657, 2018,
	1207, 1476, 402, 1042, 1799, 1764, 1943, 429, 821, 915,
	1325, 1324, 1243, 1334, 1331, 2093, 2434, 1341, 749, 1488,
	1225, 2491, 1225, 1247, 1342, 159, 852, 1259, 1259, 1683,
	2251, 1308, 1248, 1972, 2411, 712, 1699, 822, 2345, 907,
	710, 572, 1312, 2492, 414, 1326, 2344, 115, 916, 1310,
	1309, 1016, 708, 731, 1390, 1397, 1338, 1096, 1084, 1097,
	1356, 1607, 2343, 1961, 1294, 2342, 1096, 2121, 1097, 2119,
	1489, 2090, 706, 574, 1349, 703, 1235, 1293, 574, 1237,
	628, 1371, 2089, 1240, 406, 1346, 1777, 1776, 2262, 433,
	1775, 1350, 1398, 1351, 1774, 1352, 1328, 1353, 571, 1354,
	1735, 1682, 943, 944, 415, 1626, 1208, 162, 173, 1622,
	173, 1370, 1369, 173, 1620, 566, 1360, 1362, 566, 566,
	1599, 1490, 1487, 1322, 173, 946, 2117, 1380, 1438, 822,
	1381, 1382, 1561, 1119, 1610, 1098, 173, 865, 1057, 872,
	173, 554, 1388, 173, 1098, 756, 1471, 173, 1473, 945,
	573, 173, 1556, 1555, 432, 2410, 173, 1399, 1654, 582,
	1366, 574, 173, 1119, 1294, 1294, 173, 1535, 1300, 1365,
	2124, 563, 163, 1464, 1110, 2326, 1461, 1293, 1293, 2125,
	866, 1582, 1599, 1453, 475, 943, 944, 1453, 1598, 1329,
	1109, 1915, 2464, 1204, 423, 1600, 2445, 1492, 1367, 1227,
	1492, 1793, 1794, 1618, 1005, 1518, 942, 2483, 946, 1624,
	1107, 1460, 1478, 1345, 418, 951, 1458, 1611, 1613, 1586,
	2011, 555, 1724, 1725, 850, 1510, 1510, 1523, 1108, 1583,
	1940, 1543, 945, 821, 1559, 1547, 1548, 1550, 1609, 1558,
	1120, 1476, 1567, 1797, 1798, 1800, 1801, 1573, 1577, 1578,
	1449, 1911, 38, 1690, 1808, 570, 2418, 1616, 1088, 1628,
	173, 1603, 1621, 39, 953, 1447, 1096, 173, 1097, 1627,
	2394, 2491, 417, 416, 1801, 1486, 42, 1572, 173, 2502,
	173, 2419, 173, 1902, 2465, 173, 589, 173, 1971, 173,
	173, 1906, 173, 173, 1106, 401, 1492, 820, 951, 48,
	431, 173, 2507, 1232, 736, 1702, 920, 2108, 1973, 1104,
	1258, 901, 1677, 1941, 1799, 1364, 1435, 1704, 160, 407,
	736, 821, 1525, 1594, 403, 1659, 1608, 1659, 59, 434,
	556, 749, 880, 1649, 404, 60, 749, 61, 1705, 430,
	714, 2466, 755, 713, 1098, 1443, 906, 1120, 704, 902,
	1703, 914, 1313, 1444, 822, 1445, 1040, 161, 1940, 1450,
	704, 1121, 966, 2296, 2349, 1099, 1335, 1332, 2115, 1780,
	63, 2482, 1576, 1685, 1099, 485, 1671, 467, 1809, 799,
	705, 799, 2008, 704, 996, 1075, 1592, 573, 115, 1745,
	2164, 1119, 2463, 1663, 115, 464, 1674, 2327, 1914, 173,
	472, 1680, 888, 1675, 1743, 1672, 468, 1673, 1078, 557,
	1258, 1258, 818, 1684, 1681, 173, 173, 173, 419, 173,
	391, 1691, 1120, 2490, 1574, 1433, 1436, 2500, 2488, 2270,
	1596, 931, 1651, 2009, 1693, 1076, 967, 469, 173, 846,
	2232, 558, 822, 467, 1737, 838, 2427, 930, 1452, 1047,
	861, 1050, 1810, 64, 949, 950, 952, 953, 1668, 420,
	471, 1432, 1044, 1043, 564, 2513, 472, 1446, 1121, 755,
	755, 1459, 468, 1700, 1448, 2481, 2233, 474, 941, 119,
	66, 2109, 67, 2501, 1740, 2193, 1344, 1710, 2337, 421,
	2336, 422, 1094, 2319, 1741, 132, 849, 856, 1746, 1355,
	115, 2247, 461, 469, 2503, 99, 2508, 1233, 2386, 1492,
	2092, 1071, 1077, 1714, 911, 861, 929, 862, 1320, 1887,
	2047, 863, 1883, 1716, 134, 1718, 471, 1652, 574, 1720,
	1222, 1211, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 931, 1766, 1121, 1376, 2007, 1359, 1316, 1804, 1802,
	1803, 1795, 1796, 1797, 1798, 1800, 1801, 1434, 2250, 1120,
	133, 2137, 930, 881, 2320, 2249, 2272, 1318, 126, 1075,
	1893, 773, 1872, 470, 1099, 127, 2512, 1892, 1730, 1319,
	1861, 912, 862, 772, 392, 2228, 863, 2229, 1738, 1120,
	1736, 1571, 1078, 483, 2194, 1715, 755, 1717, 118, 749,
	1570, 882, 574, 861, 879, 1752, 1742, 781, 1073, 889,
	2246, 166, 477, 1744, 571, 173, 1119, 2231, 1731, 1076,
	1377, 173, 173, 2048, 1763, 173, 2234, 1848, 473, 2049,
	173, 929, 1854, 173, 1074, 913, 792, 2127, 2263, 470,
	1913, 173, 1855, 1873, 2317, 2205, 790, 173, 173, 173,
	2069, 1495, 393, 173, 1751, 2299, 173, 910, 460, 33,
	861, 1754, 173, 173, 173, 173, 173, 459, 32, 2192,
	899, 173, 2123, 173, 2248, 2318, 1824, 173, 1770, 1771,
	1121, 1867, 458, 29, 897, 173, 611, 1985, 1259, 895,
	893, 1868, 1916, 1877, 473, 173, 1077, 173, 891, 173,
	1787, 1884, 173, 1747, 1863, 2230, 173, 1827, 1828, 1829,
	1121, 173, 1853, 173, 1849, 1888, 3, 1921, 1903, 1923,
	173, 1695, 1259, 821, 1908, 1632, 170, 862, 1819, 1625,
	395, 863, 574, 173, 820, 1543, 1543, 1543, 410, 1619,
	1832, 1879, 761, 457, 76, 820, 173, 435, 1924, 1888,
	885, 1927, 478, 170, 762, 788, 486, 482, 1901, 491,
	919, 1945, 1296, 918, 844, 905, 1957, 510, 1852, 702,
	1825, 1259, 1357, 554, 1856, 1857, 476, 1966, 1862, 758,
	1494, 173, 1348, 909, 580, 1020, 554, 456, 75, 453,
	21, 582, 2459, 1925, 33, 736, 898, 791, 1959, 1942,
	2424, 736, 736, 32, 582, 736, 1295, 789, 1950, 1936,
	896, 454, 22, 718, 718, 894, 892, 1120, 29, 452,
	27, 395, 2221, 1956, 890, 1294, 1988, 1880, 451, 19,
	2113, 173, 1259, 2003, 2004, 2005, 1967, 581, 1293, 1970,
	2111, 449, 18, 2091, 822, 1968, 1969, 395, 395, 751,
	395, 1905, 741, 555, 170, 760, 1976, 1929, 1974, 1294,
	1655, 1978, 1296, 1296, 1648, 1917, 555, 1242, 1259, 1259,
	1241, 1239, 1293, 450, 17, 1236, 884, 1259, 1259, 76,
	1234, 787, 1928, 1111, 444, 14, 1105, 1998, 904, 1992,
	1994, 1207, 1100, 707, 709, 1390, 2022, 1931, 2360, 1997,
	1207, 2010, 2012, 2013, 1390, 2027, 1295, 1295, 1294, 726,
	1259, 2492, 173, 2021, 933, 2019, 2283, 2282, 173, 1339,
	2024, 1293, 2026, 75, 1255, 21, 2153, 173, 173, 727,
	2053, 445, 15, 443, 13, 462, 2362, 2057, 1121, 448,
	11, 442, 9, 447, 7, 1728, 2087, 22, 1951, 1952,
	1615, 1953, 1954, 2054, 1599, 27, 2052, 1599, 446, 6,
	1614, 1979, 556, 1612, 19, 441, 5, 2103, 2067, 1294,
	2145, 173, 2122, 173, 2085, 556, 2080, 18, 2070, 2102,
	173, 2104, 1293, 820, 2073, 2072, 2396, 2133, 934, 115,
	2240, 943, 944, 883, 2374, 2130, 2206, 937, 173, 173,
	1623, 1617, 2088, 728, 484, 1294, 1294, 2139, 1729, 17,
	2423, 2147, 2095, 2268, 1294, 1294, 173, 2138, 1293, 1293,
	14, 1662, 2116, 2150, 1255, 1255, 173, 1293, 1293, 2061,
	1650, 1119, 1647, 2141, 1560, 2128, 1311, 2142, 945, 1251,
	2498, 557, 1120, 2511, 1793, 1794, 2166, 1294, 943, 944,
	2140, 2311, 579, 2211, 557, 1707, 1706, 2155, 2149, 2143,
	1293, 2148, 2066, 2154, 2171, 2076, 2014, 15, 173, 13,
	1259, 1258, 1707, 558, 1963, 11, 1869, 9, 1839, 7,
	1314, 1708, 1557, 943, 944, 1554, 558, 1553, 510, 1484,
	777, 510, 736, 782, 6, 1007, 2179, 2006, 785, 1926,
	1017, 5, 2118, 1015, 395, 1258, 946, 2120, 917, 908,
	903, 900, 886, 848, 562, 2325, 465, 510, 510, 395,
	807, 760, 173, 1347, 887, 173, 1865, 2167, 1579, 2417,
	945, 2185, 2191, 1071, 1779, 1119, 173, 173, 2379, 2295,
	173, 173, 173, 1493, 2209, 1018, 52, 2100, 510, 605,
	2222, 2094, 1852, 1642, 1258, 1641, 2216, 173, 1122, 1323,
	821, 510, 173, 1121, 173, 627, 173, 173, 173, 1509,
	173, 821, 173, 2112, 820, 2114, 2245, 847, 1668, 736,
	2241, 2103, 173, 173, 2210, 2208, 1391, 510, 2212, 820,
	2220, 1075, 2261, 2102, 2215, 2104, 701, 2244, 629, 1256,
	630, 2266, 1257, 1048, 617, 2103, 1254, 1294, 815, 1666,
	2103, 1327, 1457, 2274, 1078, 1258, 1474, 2102, 1379, 2104,
	1293, 2264, 2102, 2273, 2104, 1762, 2269, 1011, 597, 609,
	1073, 2213, 608, 1472, 2289, 842, 2267, 2275, 1870, 1939,
	2276, 1076, 1375, 1719, 2294, 2280, 1372, 2279, 1935, 395,
	2110, 1258, 1258, 405, 1790, 813, 1074, 1532, 1524, 1520,
	1258, 1258, 922, 1069, 997, 1667, 869, 1946, 1688, 1061,
	1383, 1860, 173, 2301, 173, 2207, 1119, 173, 725, 1259,
	724, 822, 1317, 1701, 990, 173, 989, 711, 2388, 860,
	859, 1119, 822, 1258, 1793, 1794, 1212, 1886, 2506, 2395,
	2107, 2433, 736, 131, 2308, 2329, 128, 130, 2331, 129,
	2310, 1912, 79, 2103, 31, 30, 98, 1526, 1077, 97,
	2313, 173, 96, 95, 820, 2102, 94, 2104, 173, 93,
	92, 2328, 1208, 91, 90, 1259, 173, 173, 820, 820,
	89, 2103, 88, 87, 86, 85, 2254, 2361, 2358, 2346,
	2258, 84, 2347, 2102, 83, 2104, 173, 2351, 2357, 2373,
	2359, 173, 2339, 2363, 82, 81, 506, 2369, 173, 2354,
	2370, 2371, 2315, 503, 2368, 78, 2390, 77, 2376, 28,
	24, 102, 23, 74, 1259, 73, 26, 2330, 1859, 16,
	2385, 2384, 10, 173, 173, 20, 57, 2393, 58, 56,
	173, 491, 55, 718, 2307, 2405, 2403, 1799, 820, 821,
	54, 2406, 2392, 173, 12, 50, 1294, 820, 820, 2382,
	49, 47, 46, 45, 44, 8, 395, 395, 101, 1293,
	41, 40, 2408, 100, 113, 2414, 2415, 574, 2409, 1070,
	173, 2333, 173, 110, 170, 173, 112, 1119, 109, 111,
	114, 106, 107, 1258, 108, 2440, 395, 1120, 2442, 2430,
	2441, 2429, 105, 104, 37, 2323, 36, 35, 1220, 34,
	1244, 1809, 1294, 173, 395, 2, 395, 2446, 395, 1,
	2444, 0, 1228, 2103, 0, 1293, 2458, 2456, 2457, 0,
	173, 0, 0, 2475, 2469, 2102, 173, 2104, 0, 2443,
	0, 2356, 2473, 0, 0, 2480, 2477, 2478, 2479, 2474,
	173, 0, 0, 0, 0, 0, 0, 2489, 0, 0,
	2487, 1294, 0, 1296, 510, 170, 0, 2493, 2340, 2341,
	822, 0, 2496, 170, 1293, 0, 510, 0, 0, 0,
	463, 0, 2497, 2435, 0, 1810, 0, 2505, 2509, 2504,
	0, 2510, 0, 0, 0, 0, 0, 1296, 0, 0,
	464, 1120, 0, 0, 0, 0, 510, 1295, 0, 0,
	0, 510, 2420, 0, 0, 0, 170, 510, 1121, 510,
	2402, 510, 0, 510, 0, 510, 0, 0, 0, 0,
	0, 587, 0, 0, 0, 0, 1358, 2436, 2437, 2438,
	821, 1295, 510, 510, 0, 0, 1296, 0, 467, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 438,
	0, 0, 0, 0, 0, 2432, 0, 0, 510, 0,
	0, 472, 0, 0, 0, 0, 0, 468, 0, 0,
	38, 1804, 1802, 1803, 1795, 1796, 1797, 1798, 1800, 1801,
	1295, 39, 0, 1793, 1794, 0, 1811, 1812, 1813, 0,
	0, 0, 1258, 0, 42, 0, 0, 1296, 469, 2168,
	0, 0, 0, 0, 0, 0, 1668, 0, 0, 0,
	0, 0, 1121, 0, 0, 1255, 0, 48, 0, 0,
	0, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1120, 1296, 1296, 0, 1808, 0, 0, 0,
	0, 1295, 1296, 1296, 0, 0, 59, 1120, 1258, 1255,
	0, 822, 0, 60, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 1526, 1526,
	0, 0, 0, 0, 491, 1296, 718, 1295, 1295, 760,
	821, 0, 0, 0, 0, 0, 1295, 1295, 63, 0,
	395, 0, 0, 0, 821, 821, 1799, 1258, 1255, 0,
	0, 0, 1591, 0, 1749, 1750, 395, 0, 0, 395,
	0, 0, 0, 1604, 0, 0, 0, 395, 0, 1295,
	0, 0, 395, 0, 0, 0, 0, 0, 395, 0,
	0, 0, 1631, 0, 470, 0, 0, 1814, 0, 0,
	0, 0, 0, 0, 1526, 1526, 1526, 0, 0, 0,
	0, 0, 0, 1121, 0, 0, 0, 0, 0, 1255,
	1809, 0, 0, 0, 821, 0, 0, 0, 1121, 0,
	0, 64, 2232, 821, 821, 2225, 0, 0, 0, 0,
	1816, 1817, 1818, 2223, 0, 0, 0, 0, 2227, 473,
	0, 0, 0, 764, 766, 1255, 1255, 119, 66, 0,
	67, 822, 0, 1120, 1255, 1255, 0, 0, 2233, 0,
	0, 0, 0, 132, 0, 822, 822, 0, 0, 0,
	461, 0, 0, 99, 0, 0, 1638, 0, 0, 0,
	2226, 0, 0, 760, 1810, 1296, 0, 1255, 0, 0,
	606, 71, 134, 0, 395, 0, 1670, 0, 510, 0,
	0, 510, 0, 510, 0, 395, 395, 0, 1676, 760,
	0, 0, 0, 0, 0, 0, 0, 1604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 133, 1295,
	0, 38, 0, 845, 0, 822, 126, 0, 0, 0,
	0, 0, 39, 127, 822, 822, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 42, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 0, 439, 2228, 0, 2229,
	0, 1805, 1806, 1807, 1121, 0, 0, 0, 48, 0,
	1804, 1802, 1803, 1795, 1796, 1797, 1798, 1800, 1801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2231,
	0, 0, 0, 1526, 1526, 0, 567, 59, 2234, 575,
	0, 0, 0, 0, 60, 1712, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 737, 71, 0, 0, 0,
	0, 395, 395, 395, 0, 395, 0, 0, 0, 1983,
	1984, 991, 992, 993, 994, 995, 0, 1255, 0, 63,
	0, 1004, 0, 0, 395, 0, 0, 0, 0, 0,
	0, 1012, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
	1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
	1526, 0, 1526, 0, 0, 0, 0, 2230, 0, 0,
	0, 0, 0, 0, 1296, 0, 0, 0, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 0, 2050, 0,
	943, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 119, 66,
	0, 67, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 132, 1066, 1066, 0, 0, 0,
	0, 461, 587, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 1296,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 395, 0, 951, 0, 0, 0, 395, 395, 133,
	0, 395, 0, 1295, 0, 0, 1591, 126, 0, 1591,
	0, 0, 0, 0, 127, 0, 1255, 1875, 0, 0,
	0, 0, 0, 395, 1881, 1882, 0, 0, 0, 1604,
	0, 0, 1889, 0, 0, 0, 0, 118, 1894, 1895,
	1897, 1899, 1900, 0, 0, 0, 0, 395, 0, 1907,
	0, 0, 0, 1910, 0, 0, 0, 966, 0, 0,
	0, 395, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1220, 1255, 1220, 0, 510, 587, 587, 395, 0,
	0, 0, 1934, 0, 0, 0, 0, 395, 0, 1944,
	575, 0, 0, 0, 0, 0, 395, 0, 0, 1793,
	1794, 0, 1811, 1812, 1813, 0, 0, 0, 0, 1712,
	0, 0, 0, 0, 0, 1990, 0, 0, 0, 0,
	0, 1255, 1712, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	1373, 0, 1378, 0, 0, 0, 0, 0, 1385, 0,
	0, 0, 1808, 0, 0, 0, 0, 395, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	0, 1437, 0, 1439, 1440, 1441, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2016, 0, 0,
	1465, 0, 1799, 0, 0, 0, 0, 1004, 0, 1526,
	0, 0, 0, 0, 0, 0, 0, 0, 567, 955,
	947, 948, 949, 950, 952, 953, 1505, 1506, 0, 0,
	1522, 0, 1534, 1536, 1541, 1544, 1545, 1546, 0, 1000,
	0, 1003, 0, 1814, 0, 2298, 0, 0, 1008, 0,
	1526, 0, 0, 943, 944, 0, 973, 974, 975, 983,
	984, 985, 0, 0, 0, 0, 1809, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 946, 0, 395, 987,
	0, 0, 0, 0, 1591, 0, 2322, 0, 0, 0,
	0, 0, 0, 760, 1591, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 965, 0, 2099, 0,
	962, 0, 0, 0, 0, 0, 1526, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 0, 1220,
	1810, 0, 0, 0, 0, 0, 2135, 0, 0, 0,
	0, 0, 2375, 0, 0, 0, 0, 968, 969, 970,
	971, 0, 0, 0, 395, 395, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	1087, 0, 2161, 0, 0, 0, 0, 0, 980, 988,
	0, 0, 2163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 1805, 1806, 1807,
	966, 0, 0, 0, 2186, 0, 1804, 1802, 1803, 1795,
	1796, 1797, 1798, 1800, 1801, 1793, 1794, 0, 1811, 1812,
	1813, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 1989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 395, 972,
	0, 760, 0, 0, 0, 0, 0, 0, 1808, 0,
	0, 0, 1591, 760, 967, 0, 2218, 2219, 1604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 2099, 760, 0, 0, 0, 0, 2252, 0,
	2253, 0, 395, 2255, 2256, 0, 395, 0, 2260, 0,
	0, 0, 0, 0, 0, 71, 2099, 0, 760, 1638,
	0, 2099, 0, 0, 0, 0, 0, 0, 1799, 0,
	0, 0, 0, 0, 0, 1793, 1794, 0, 1811, 1812,
	1813, 0, 0, 567, 0, 0, 567, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 979, 0,
	0, 957, 958, 964, 963, 959, 960, 961, 982, 1814,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 2199, 1808, 0,
	0, 0, 1809, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 1733, 1734, 0, 0, 0, 1604, 1739,
	2314, 0, 575, 2316, 0, 0, 0, 1003, 0, 0,
	0, 395, 0, 0, 2099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1758, 0, 0, 0, 0, 0, 1765, 1799, 2348,
	1769, 0, 2099, 0, 0, 0, 0, 395, 0, 0,
	0, 0, 0, 0, 760, 0, 1810, 1783, 0, 0,
	0, 1815, 2161, 2161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 1814,
	0, 0, 2381, 0, 0, 0, 0, 1591, 0, 0,
	1087, 1004, 0, 0, 1220, 0, 0, 0, 1541, 1541,
	1541, 0, 1809, 71, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2397,
	2398, 0, 0, 0, 1066, 0, 395, 0, 0, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2413,
	0, 0, 0, 1805, 1806, 1807, 0, 0, 0, 0,
	0, 0, 1804, 1802, 1803, 1795, 1796, 1797, 1798, 1800,
	1801, 0, 0, 0, 0, 0, 2428, 0, 760, 0,
	0, 395, 0, 0, 0, 0, 1810, 0, 0, 0,
	0, 0, 0, 38, 2099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 121, 0, 0, 0, 2381,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 1937, 0,
	0, 123, 395, 0, 0, 71, 0, 71, 43, 0,
	48, 0, 0, 0, 0, 0, 2486, 0, 0, 0,
	1955, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 51, 71, 0, 0, 53, 0, 587, 587, 59,
	0, 0, 124, 1805, 1806, 1807, 60, 0, 61, 0,
	587, 0, 1804, 1802, 1803, 1795, 1796, 1797, 1798, 1800,
	1801, 0, 1977, 0, 0, 0, 0, 1385, 0, 0,
	62, 0, 0, 1981, 0, 0, 1982, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 1987, 0,
	0, 0, 0, 0, 0, 0, 0, 1995, 0, 0,
	0, 0, 0, 0, 0, 1999, 0, 0, 1955, 0,
	0, 0, 0, 0, 943, 944, 0, 973, 974, 975,
	983, 984, 985, 0, 0, 0, 0, 0, 2023, 0,
	976, 0, 2025, 0, 0, 0, 0, 946, 71, 0,
	987, 0, 0, 0, 0, 0, 1793, 1794, 0, 1811,
	1812, 1813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 64, 2055, 2056, 965, 0, 0,
	65, 962, 0, 0, 2062, 2063, 2064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	119, 66, 0, 67, 0, 68, 0, 125, 0, 1808,
	0, 2075, 69, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 99, 1455, 968, 969,
	970, 971, 0, 0, 0, 122, 0, 951, 0, 0,
	0, 2096, 0, 0, 0, 134, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	988, 0, 0, 0, 103, 0, 0, 0, 0, 1799,
	0, 0, 0, 120, 0, 0, 0, 0, 986, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 1066, 0, 0, 0, 978, 127, 0, 0, 0,
	587, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	1814, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 1003, 4, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 1809, 0, 0, 2170, 0, 0, 0,
	2173, 2174, 0, 0, 2176, 0, 0, 0, 0, 0,
	0, 2178, 0, 2180, 0, 737, 0, 0, 0, 0,
	972, 737, 737, 0, 0, 737, 0, 0, 0, 2187,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	943, 944, 0, 973, 974, 975, 983, 984, 985, 0,
	0, 981, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 2196, 946, 0, 0, 987, 1810, 71, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 962, 71, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 2242, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 957, 958, 964, 963, 959, 960, 961, 982,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 0, 0, 0, 968, 969, 970, 971, 1835, 0,
	0, 0, 0, 951, 1805, 1806, 1807, 0, 0, 0,
	0, 0, 0, 1804, 1802, 1803, 1795, 1796, 1797, 1798,
	1800, 1801, 0, 0, 0, 980, 988, 943, 944, 2290,
	2291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2303, 978, 0, 0, 0, 0, 2306, 966, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	965, 0, 943, 944, 0, 973, 974, 975, 983, 984,
	985, 0, 977, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 987, 0,
	2338, 1793, 1794, 0, 1811, 1812, 1813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 945,
	0, 968, 969, 970, 971, 965, 0, 0, 0, 962,
	951, 967, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 737, 0, 1808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2387, 0, 0, 0, 968, 969, 970, 971,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 988, 0,
	0, 0, 0, 0, 1799, 979, 587, 0, 957, 958,
	964, 963, 959, 960, 961, 982, 986, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 0, 0, 737,
	0, 0, 0, 978, 1834, 0, 0, 0, 0, 966,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 2455,
	2455, 0, 0, 0, 977, 0, 0, 0, 1809, 0,
	0, 0, 0, 0, 0, 2470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2455, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2455,
	0, 0, 1810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	957, 958, 964, 963, 959, 960, 961, 982, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 1833, 71, 0, 1805,
	1806, 1807, 0, 0, 0, 0, 0, 0, 1804, 1802,
	1803, 1795, 1796, 1797, 1798, 1800, 1801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2364, 175, 176, 1123, 177, 1124, 1125, 1126,
	1127, 330, 1128, 1129, 1130, 1131, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1132, 182, 337, 338,
	183, 184, 1133, 1134, 339, 340, 341, 1135, 185, 342,
	1136, 824, 1137, 186, 187, 188, 0, 189, 1138, 190,
	0, 191, 192, 1139, 687, 193, 194, 195, 1140, 1141,
	1143, 1142, 1144, 1145, 1146, 196, 197, 396, 198, 343,
	199, 344, 345, 1147, 200, 1148, 201, 1149, 202, 1150,
	1151, 203, 204, 1152, 205, 1153, 1003, 1154, 346, 206,
	207, 208, 347, 348, 1155, 688, 1156, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 1157, 212,
	1158, 1159, 689, 1160, 213, 352, 1161, 353, 1162, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 691, 1163,
	356, 221, 1164, 218, 1165, 690, 219, 357, 220, 358,
	359, 360, 361, 362, 1166, 363, 1167, 692, 222, 223,
	224, 693, 364, 365, 225, 226, 227, 1168, 229, 228,
	1169, 366, 694, 230, 695, 1170, 231, 1171, 1172, 232,
	0, 233, 234, 235, 237, 367, 236, 696, 238, 239,
	241, 240, 1173, 1174, 1175, 368, 242, 369, 243, 244,
	1176, 245, 1177, 1178, 246, 1179, 1180, 247, 370, 697,
	248, 698, 371, 249, 250, 251, 252, 253, 1181, 254,
	372, 255, 373, 256, 1182, 257, 258, 259, 260, 261,
	374, 262, 263, 1183, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 1184, 276, 699,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 1185,
	288, 376, 287, 289, 290, 1186, 291, 280, 281, 292,
	700, 293, 377, 378, 294, 1187, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 1188, 302, 1189, 303,
	304, 305, 306, 307, 308, 309, 1190, 381, 382, 383,
	1191, 1192, 310, 311, 384, 385, 1193, 312, 313, 314,
	315, 1194, 1195, 316, 317, 318, 319, 1196, 320, 1197,
	386, 321, 322, 323, 387, 388, 1198, 1199, 324, 1200,
	1201, 1202, 1203, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	1584, 0, 0, 0, 0, 0, 0, 0, 0, 1585,
	175, 176, 1123, 177, 1124, 1125, 1126, 1127, 330, 1128,
	1129, 1130, 1131, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 1132, 182, 337, 338, 183, 184, 1133,
	1134, 339, 340, 341, 1135, 185, 342, 1136, 824, 1137,
	186, 187, 188, 0, 189, 1138, 190, 0, 191, 192,
	1139, 687, 193, 194, 195, 1140, 1141, 1143, 1142, 1144,
	1145, 1146, 196, 197, 396, 198, 343, 199, 344, 345,
	1147, 200, 1148, 201, 1149, 202, 1150, 1151, 203, 204,
	1152, 205, 1153, 0, 1154, 346, 206, 207, 208, 347,
	348, 1155, 688, 1156, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 1157, 212, 1158, 1159, 689,
	1160, 213, 352, 1161, 353, 1162, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 691, 1163, 356, 221, 1164,
	218, 1165, 690, 219, 357, 220, 358, 359, 360, 361,
	362, 1166, 363, 1167, 692, 222, 223, 224, 693, 364,
	365, 225, 226, 227, 1168, 229, 228, 1169, 366, 694,
	230, 695, 1170, 231, 1171, 1172, 232, 0, 233, 234,
	235, 237, 367, 236, 696, 238, 239, 241, 240, 1173,
	1174, 1175, 368, 242, 369, 243, 244, 1176, 245, 1177,
	1178, 246, 1179, 1180, 247, 370, 697, 248, 698, 371,
	249, 250, 251, 252, 253, 1181, 254, 372, 255, 373,
	256, 1182, 257, 258, 259, 260, 261, 374, 262, 263,
	1183, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 1184, 276, 699, 277, 278, 375,
	279, 0, 283, 284, 285, 286, 1185, 288, 376, 287,
	289, 290, 1186, 291, 280, 281, 292, 700, 293, 377,
	378, 294, 1187, 301, 295, 296, 282, 297, 300, 379,
	298, 299, 380, 1188, 302, 1189, 303, 304, 305, 306,
	307, 308, 309, 1190, 381, 382, 383, 1191, 1192, 310,
	311, 384, 385, 1193, 312, 313, 314, 315, 1194, 1195,
	316, 317, 318, 319, 1196, 320, 1197, 386, 321, 322,
	323, 387, 388, 1198, 1199, 324, 1200, 1201, 1202, 1203,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2214, 175, 176,
	1123, 177, 1124, 1125, 1126, 1127, 330, 1128, 1129, 1130,
	1131, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 1132, 182, 337, 338, 183, 184, 1133, 1134, 339,
	340, 341, 1135, 185, 342, 1136, 824, 1137, 186, 187,
	188, 0, 189, 1138, 190, 0, 191, 192, 1139, 687,
	193, 194, 195, 1140, 1141, 1143, 1142, 1144, 1145, 1146,
	196, 197, 396, 198, 343, 199, 344, 345, 1147, 200,
	1148, 201, 1149, 202, 1150, 1151, 203, 204, 1152, 205,
	1153, 0, 1154, 346, 206, 207, 208, 347, 348, 1155,
	688, 1156, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 1157, 212, 1158, 1159, 689, 1160, 213,
	352, 1161, 353, 1162, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 691, 1163, 356, 221, 1164, 218, 1165,
	690, 219, 357, 220, 358, 359, 360, 361, 362, 1166,
	363, 1167, 692, 222, 223, 224, 693, 364, 365, 225,
	226, 227, 1168, 229, 228, 1169, 366, 694, 230, 695,
	1170, 231, 1171, 1172, 232, 0, 233, 234, 235, 237,
	367, 236, 696, 238, 239, 241, 240, 1173, 1174, 1175,
	368, 242, 369, 243, 244, 1176, 245, 1177, 1178, 246,
	1179, 1180, 247, 370, 697, 248, 698, 371, 249, 250,
	251, 252, 253, 1181, 254, 372, 255, 373, 256, 1182,
	257, 258, 259, 260, 261, 374, 262, 263, 1183, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 1184, 276, 699, 277, 278, 375, 279, 0,
	283, 284, 285, 286, 1185, 288, 376, 287, 289, 290,
	1186, 291, 280, 281, 292, 700, 293, 377, 378, 294,
	1187, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 1188, 302, 1189, 303, 304, 305, 306, 307, 308,
	309, 1190, 381, 382, 383, 1191, 1192, 310, 311, 384,
	385, 1193, 312, 313, 314, 315, 1194, 1195, 316, 317,
	318, 319, 1196, 320, 1197, 386, 321, 322, 323, 387,
	388, 1198, 1199, 324, 1200, 1201, 1202, 1203, 325, 326,
	327, 328, 329, 0, 0, 1118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 175, 176, 1123, 177, 1124, 1125, 1126, 1127, 330,
	1128, 1129, 1130, 1131, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 1132, 182, 337, 338, 183, 184,
	1133, 1134, 339, 340, 341, 1135, 185, 342, 1136, 824,
	1137, 186, 187, 188, 0, 189, 1138, 190, 0, 191,
	192, 1139, 687, 193, 194, 195, 1140, 1141, 1143, 1142,
	1144, 1145, 1146, 196, 197, 396, 198, 343, 199, 344,
	345, 1147, 200, 1148, 201, 1149, 202, 1150, 1151, 203,
	204, 1152, 205, 1153, 0, 1154, 346, 206, 207, 208,
	347, 348, 1155, 688, 1156, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 1157, 212, 1158, 1159,
	689, 1160, 213, 352, 1161, 353, 1162, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 691, 1163, 356, 221,
	1164, 218, 1165, 690, 219, 357, 220, 358, 359, 360,
	361, 362, 1166, 363, 1167, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 1168, 229, 228, 1169, 366,
	694, 230, 695, 1170, 231, 1171, 1172, 232, 0, 233,
	234, 235, 237, 367, 236, 696, 238, 239, 241, 240,
	1173, 1174, 1175, 368, 242, 369, 243, 244, 1176, 245,
	1177, 1178, 246, 1179, 1180, 247, 370, 697, 248, 698,
	371, 249, 250, 251, 252, 253, 1181, 254, 372, 255,
	373, 256, 1182, 257, 258, 259, 260, 261, 374, 262,
	263, 1183, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 1184, 276, 699, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 1185, 288, 376,
	287, 289, 290, 1186, 291, 280, 281, 292, 700, 293,
	377, 378, 294, 1187, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 1188, 302, 1189, 303, 304, 305,
	306, 307, 308, 309, 1190, 381, 382, 383, 1191, 1192,
	310, 311, 384, 385, 1193, 312, 313, 314, 315, 1194,
	1195, 316, 317, 318, 319, 1196, 320, 1197, 386, 321,
	322, 323, 387, 388, 1198, 1199, 324, 1200, 1201, 1202,
	1203, 325, 326, 327, 328, 329, 1483, 0, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 1480, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	331, 657, 333, 658, 181, 659, 660, 0, 182, 337,
	338, 183, 184, 610, 641, 661, 662, 341, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 687, 193, 194, 195, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 0, 200, 0, 201, 0, 202,
	1481, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 688, 0, 0, 0,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 689, 0, 213, 654, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 650, 652, 691,
	0, 356, 221, 0, 218, 0, 690, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 692, 222,
	223, 224, 693, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 655, 694, 230, 695, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 696, 238,
	239, 241, 240, 593, 0, 622, 651, 242, 675, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	697, 248, 698, 645, 249, 250, 251, 252, 253, 0,
	254, 646, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 676, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	699, 277, 278, 599, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 639, 291, 280, 281,
	292, 700, 293, 677, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 678, 298, 299, 647, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 679,
	680, 0, 0, 310, 311, 648, 649, 620, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 640, 320,
	0, 386, 321, 322, 323, 387, 681, 1479, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 594,
	0, 625, 614, 615, 612, 613, 604, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 1482, 175, 176, 0,
	177, 0, 0, 600, 1477, 642, 607, 0, 0, 603,
	178, 179, 180, 331, 657, 333, 658, 181, 659, 660,
	0, 182, 337, 338, 183, 184, 610, 641, 661, 662,
	341, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 588, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 688,
	0, 0, 0, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 689, 0, 213, 654,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	650, 652, 691, 0, 356, 221, 0, 218, 0, 690,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 692, 222, 223, 224, 693, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 655, 694, 230, 695, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 696, 238, 239, 241, 240, 593, 0, 622, 651,
	242, 675, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 697, 248, 698, 645, 249, 250, 251,
	252, 253, 0, 254, 646, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 676, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 699, 277, 278, 599, 279, 0, 283,
	284, 285, 286, 132, 288, 376, 287, 289, 290, 639,
	291, 280, 281, 292, 700, 293, 677, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 678, 298, 299, 647,
	0, 302, 134, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 679, 680, 0, 0, 310, 311, 648, 649,
	620, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 640, 320, 0, 386, 321, 322, 323, 823, 681,
	0, 0, 324, 0, 0, 0, 126, 325, 326, 327,
	328, 329, 594, 127, 576, 0, 625, 614, 615, 612,
	613, 604, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 0, 175, 176, 0, 177, 1006, 0, 0, 0,
	642, 607, 603, 0, 0, 178, 179, 180, 331, 657,
	333, 658, 181, 659, 660, 0, 182, 337, 338, 183,
	184, 610, 641, 661, 662, 341, 0, 185, 653, 0,
	633, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 688, 0, 0, 0, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 689, 0, 213, 654, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 650, 652, 691, 0, 356,
	221, 0, 218, 0, 690, 219, 669, 220, 670, 671,
	672, 673, 674, 0, 632, 0, 692, 222, 223, 224,
	693, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	655, 694, 230, 695, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 696, 238, 239, 241,
	240, 593, 0, 622, 651, 242, 675, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 370, 697, 248,
	698, 645, 249, 250, 251, 252, 253, 0, 254, 646,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 676,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 699, 277,
	278, 599, 279, 0, 283, 284, 285, 286, 132, 288,
	376, 287, 289, 290, 639, 291, 280, 281, 292, 700,
	293, 677, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 678, 298, 299, 647, 0, 302, 134, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 679, 680, 0,
	0, 310, 311, 648, 649, 620, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 640, 320, 0, 386,
	321, 322, 323, 823, 681, 0, 0, 324, 0, 0,
	0, 126, 325, 326, 327, 328, 329, 594, 127, 625,
	614, 615, 612, 613, 604, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 175, 176, 0, 177, 0,
	0, 1006, 0, 642, 607, 0, 0, 603, 178, 179,
	180, 331, 657, 333, 658, 181, 659, 660, 0, 182,
	337, 338, 183, 184, 610, 641, 661, 662, 341, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 688, 0, 0,
	0, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 689, 0, 213, 654, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 650, 652,
	691, 0, 356, 221, 0, 218, 0, 690, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 692,
	222, 223, 224, 693, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 655, 694, 230, 695, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 696,
	238, 239, 241, 240, 593, 0, 622, 651, 242, 675,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 697, 248, 698, 645, 249, 250, 251, 252, 253,
	0, 254, 646, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 676, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 699, 277, 278, 599, 279, 0, 283, 284, 285,
	286, 132, 288, 376, 287, 289, 290, 639, 291, 280,
	281, 292, 700, 293, 677, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 678, 298, 299, 647, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	679, 680, 0, 0, 310, 311, 648, 649, 620, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 640,
	320, 0, 386, 321, 322, 323, 823, 681, 0, 0,
	324, 0, 0, 0, 126, 325, 326, 327, 328, 329,
	594, 127, 625, 614, 615, 612, 613, 604, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 175, 176,
	0, 177, 0, 0, 1006, 0, 642, 607, 0, 0,
	603, 178, 179, 180, 331, 657, 333, 658, 181, 659,
	660, 1537, 182, 337, 338, 183, 184, 610, 641, 661,
	662, 341, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	688, 0, 0, 0, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 1542, 689, 0, 213,
	654, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 650, 652, 691, 0, 356, 221, 0, 218, 0,
	690, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 692, 222, 223, 224, 693, 364, 365, 225,
	226, 227, 0, 229, 228, 1538, 655, 694, 230, 695,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 696, 238, 239, 241, 240, 593, 0, 622,
	651, 242, 675, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 697, 248, 698, 645, 249, 250,
	251, 252, 253, 0, 254, 646, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 676, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 699, 277, 278, 599, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	639, 291, 280, 281, 292, 700, 293, 677, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 678, 298, 299,
	647, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 679, 680, 0, 1539, 310, 311, 648,
	649, 620, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 640, 320, 0, 386, 321, 322, 323, 387,
	681, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 594, 584, 0, 625, 614, 615, 612,
	613, 604, 0, 592, 0, 0, 0, 0, 590, 591,
	0, 0, 175, 176, 0, 177, 0, 600, 0, 0,
	642, 607, 0, 603, 0, 178, 179, 180, 331, 657,
	333, 658, 181, 659, 660, 0, 182, 337, 338, 183,
	184, 610, 641, 661, 662, 341, 0, 185, 653, 0,
	633, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 588, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 688, 0, 0, 0, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 689, 0, 213, 654, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 650, 652, 691, 0, 356,
	221, 0, 218, 0, 690, 219, 669, 220, 670, 671,
	672, 673, 674, 0, 632, 0, 692, 222, 223, 224,
	693, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	655, 694, 230, 695, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 696, 238, 239, 241,
	240, 593, 0, 622, 651, 242, 675, 243, 244, 0,
	245, 586, 0, 246, 0, 0, 247, 370, 697, 248,
	698, 645, 249, 250, 251, 252, 253, 0, 254, 646,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 676,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 699, 277,
	278, 599, 279, 0, 283, 284, 285, 286, 0, 288,
	376, 287, 289, 290, 639, 291, 280, 281, 292, 700,
	293, 677, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 678, 298, 299, 647, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 679, 680, 0,
	0, 310, 311, 648, 649, 620, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 640, 320, 0, 386,
	321, 322, 323, 387, 681, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 594, 0, 625,
	614, 615, 612, 613, 604, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 175, 176, 0, 177, 0,
	0, 600, 0, 642, 607, 0, 0, 603, 178, 179,
	180, 331, 657, 333, 658, 181, 659, 660, 0, 182,
	337, 338, 183, 184, 610, 641, 661, 662, 341, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 688, 0, 0,
	0, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 689, 0, 213, 654, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 650, 652,
	691, 0, 356, 221, 0, 218, 0, 690, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 692,
	222, 223, 224, 693, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 655, 694, 230, 695, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 696,
	238, 239, 241, 240, 593, 2144, 622, 651, 242, 675,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 697, 248, 698, 645, 249, 250, 251, 252, 253,
	0, 254, 646, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 676, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 699, 277, 278, 599, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 639, 291, 280,
	281, 292, 700, 293, 677, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 678, 298, 299, 647, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	679, 680, 0, 0, 310, 311, 648, 649, 620, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 640,
	320, 0, 386, 321, 322, 323, 387, 681, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	594, 0, 625, 614, 615, 612, 613, 604, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 1067, 175, 176,
	0, 177, 0, 0, 600, 0, 642, 607, 0, 0,
	603, 178, 179, 180, 331, 657, 333, 658, 181, 659,
	660, 0, 182, 337, 338, 183, 184, 610, 641, 661,
	662, 341, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	688, 0, 0, 0, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 689, 0, 213,
	654, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 650, 652, 691, 0, 356, 221, 1387, 218, 0,
	690, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 692, 222, 223, 224, 693, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 655, 694, 230, 695,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 696, 238, 239, 241, 240, 593, 0, 622,
	651, 242, 675, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 697, 248, 698, 645, 249, 250,
	251, 252, 253, 0, 254, 646, 255, 373, 256, 1386,
	257, 258, 259, 260, 261, 676, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 699, 277, 278, 599, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	639, 291, 280, 281, 292, 700, 293, 677, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 678, 298, 299,
	647, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 679, 680, 0, 0, 310, 311, 648,
	649, 620, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 640, 320, 0, 386, 321, 322, 323, 387,
	681, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 594, 0, 625, 614, 615, 612, 613,
	604, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	0, 175, 176, 0, 177, 0, 0, 600, 0, 642,
	607, 0, 0, 603, 178, 179, 180, 331, 657, 333,
	658, 181, 659, 660, 0, 182, 337, 338, 183, 184,
	610, 641, 661, 662, 341, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 588, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 688, 0, 0, 0, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	689, 0, 213, 654, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 650, 652, 691, 0, 356, 221,
	0, 218, 0, 690, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 655,
	694, 230, 695, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 696, 238, 239, 241, 240,
	593, 0, 622, 651, 242, 675, 243, 244, 0, 245,
	586, 0, 246, 0, 0, 247, 370, 697, 248, 698,
	645, 249, 250, 251, 252, 253, 0, 254, 646, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 676, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 699, 277, 278,
	599, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 639, 291, 280, 281, 292, 700, 293,
	677, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	678, 298, 299, 647, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 679, 680, 0, 0,
	310, 311, 648, 649, 620, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 640, 320, 0, 386, 321,
	322, 323, 387, 681, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 594, 0, 625, 614,
	615, 612, 613, 604, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 175, 176, 0, 177, 0, 0,
	600, 0, 642, 607, 0, 0, 603, 178, 179, 180,
	331, 657, 333, 658, 181, 659, 660, 0, 182, 337,
	338, 183, 184, 610, 641, 661, 662, 341, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 687, 193, 194, 195, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 588, 200, 0, 201, 0, 202,
	0, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 688, 0, 0, 0,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 689, 0, 213, 654, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 650, 652, 691,
	0, 356, 221, 0, 218, 0, 690, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 692, 222,
	223, 224, 693, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 655, 694, 230, 695, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 696, 238,
	239, 241, 240, 593, 0, 622, 651, 242, 675, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	697, 248, 698, 645, 249, 250, 251, 252, 253, 0,
	254, 646, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 676, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	699, 277, 278, 599, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 639, 291, 280, 281,
	292, 700, 293, 677, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 678, 298, 299, 647, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 679,
	680, 0, 0, 310, 311, 648, 649, 620, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 640, 320,
	0, 386, 321, 322, 323, 387, 681, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 594,
	0, 625, 614, 615, 612, 613, 604, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 175, 176, 0,
	177, 0, 0, 600, 0, 642, 607, 0, 0, 603,
	178, 179, 180, 331, 657, 333, 658, 181, 659, 660,
	0, 182, 337, 338, 183, 184, 610, 641, 661, 662,
	341, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 688,
	0, 0, 0, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 689, 0, 213, 654,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	650, 652, 691, 0, 356, 221, 0, 218, 0, 690,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 692, 222, 223, 224, 693, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 655, 694, 230, 695, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 696, 238, 239, 241, 240, 593, 0, 622, 651,
	242, 675, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 697, 248, 698, 645, 249, 250, 251,
	252, 253, 0, 254, 646, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 676, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 699, 277, 278, 599, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 639,
	291, 280, 281, 292, 700, 293, 677, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 678, 298, 299, 647,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 679, 680, 0, 0, 310, 311, 648, 649,
	620, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 640, 320, 0, 386, 321, 322, 323, 387, 681,
	2002, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 594, 0, 625, 614, 615, 612, 613, 604,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	175, 176, 0, 177, 0, 0, 600, 0, 642, 607,
	0, 0, 603, 178, 179, 180, 331, 657, 333, 658,
	181, 659, 660, 0, 182, 337, 338, 183, 184, 610,
	641, 661, 662, 341, 0, 185, 653, 0, 633, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	0, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 598, 206, 207, 208, 643,
	644, 621, 688, 0, 0, 0, 0, 0, 209, 210,
	666, 667, 668, 0, 211, 0, 212, 0, 0, 689,
	0, 213, 654, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 650, 652, 691, 0, 356, 221, 0,
	218, 0, 690, 219, 669, 220, 670, 671, 672, 673,
	674, 0, 632, 0, 692, 222, 223, 224, 693, 364,
	365, 225, 226, 227, 0, 229, 228, 0, 655, 694,
	230, 695, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 367, 236, 696, 238, 239, 241, 240, 593,
	0, 622, 651, 242, 675, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 370, 697, 248, 698, 645,
	249, 250, 251, 252, 253, 0, 254, 646, 255, 373,
	256, 0, 257, 258, 259, 260, 261, 676, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 699, 277, 278, 599,
	279, 0, 283, 284, 285, 286, 0, 288, 376, 287,
	289, 290, 639, 291, 280, 281, 292, 700, 293, 677,
	378, 294, 0, 301, 295, 296, 282, 297, 300, 678,
	298, 299, 647, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 381, 679, 680, 0, 0, 310,
	311, 648, 649, 620, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 640, 320, 0, 386, 321, 322,
	323, 387, 681, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 594, 0, 625, 614, 615,
	612, 613, 604, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 1067, 175, 176, 0, 177, 0, 0, 600,
	0, 642, 607, 0, 0, 603, 178, 179, 180, 331,
	657, 333, 658, 181, 659, 660, 0, 182, 337, 338,
	183, 184, 610, 641, 661, 662, 341, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 688, 0, 0, 0, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 1542, 689, 0, 213, 654, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 650, 652, 691, 0,
	356, 221, 0, 218, 0, 690, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 692, 222, 223,
	224, 693, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 655, 694, 230, 695, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 696, 238, 239,
	241, 240, 593, 0, 622, 651, 242, 675, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 697,
	248, 698, 645, 249, 250, 251, 252, 253, 0, 254,
	646, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	676, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 699,
	277, 278, 599, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 639, 291, 280, 281, 292,
	700, 293, 677, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 678, 298, 299, 647, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 679, 680,
	0, 0, 310, 311, 648, 649, 620, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 640, 320, 0,
	386, 321, 322, 323, 387, 681, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 594, 1587,
	0, 625, 614, 615, 612, 613, 604, 0, 592, 0,
	0, 0, 0, 590, 591, 0, 0, 175, 176, 0,
	177, 0, 600, 0, 0, 642, 607, 0, 603, 0,
	178, 179, 180, 331, 657, 333, 658, 181, 659, 660,
	0, 182, 337, 338, 183, 184, 610, 641, 661, 662,
	341, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 688,
	0, 0, 0, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 689, 0, 213, 654,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	650, 652, 691, 0, 356, 221, 0, 218, 0, 690,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 692, 222, 223, 224, 693, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 655, 694, 230, 695, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 696, 238, 239, 241, 240, 593, 0, 622, 651,
	242, 675, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 697, 248, 698, 645, 249, 250, 251,
	252, 253, 0, 254, 646, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 676, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 699, 277, 278, 599, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 639,
	291, 280, 281, 292, 700, 293, 677, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 678, 298, 299, 647,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 679, 680, 0, 0, 310, 311, 648, 649,
	620, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 640, 320, 0, 386, 321, 322, 323, 387, 681,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 594, 1551, 0, 625, 614, 615, 612, 613,
	604, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 175, 176, 0, 177, 0, 600, 0, 0, 642,
	607, 0, 603, 0, 178, 179, 180, 331, 657, 333,
	658, 181, 659, 660, 0, 182, 337, 338, 183, 184,
	610, 641, 661, 662, 341, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 688, 0, 0, 0, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	689, 0, 213, 654, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 650, 652, 691, 0, 356, 221,
	0, 218, 0, 690, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 655,
	694, 230, 695, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 696, 238, 239, 241, 240,
	593, 0, 622, 651, 242, 675, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 697, 248, 698,
	645, 249, 250, 251, 252, 253, 0, 254, 646, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 676, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 699, 277, 278,
	599, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 639, 291, 280, 281, 292, 700, 293,
	677, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	678, 298, 299, 647, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 679, 680, 0, 0,
	310, 311, 648, 649, 620, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 640, 320, 0, 386, 321,
	322, 323, 387, 681, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 594, 1549, 0, 625,
	614, 615, 612, 613, 604, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 0, 175, 176, 0, 177, 0,
	600, 0, 0, 642, 607, 0, 603, 0, 178, 179,
	180, 331, 657, 333, 658, 181, 659, 660, 0, 182,
	337, 338, 183, 184, 610, 641, 661, 662, 341, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 688, 0, 0,
	0, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 689, 0, 213, 654, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 650, 652,
	691, 0, 356, 221, 0, 218, 0, 690, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 692,
	222, 223, 224, 693, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 655, 694, 230, 695, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 696,
	238, 239, 241, 240, 593, 0, 622, 651, 242, 675,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 697, 248, 698, 645, 249, 250, 251, 252, 253,
	0, 254, 646, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 676, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 699, 277, 278, 599, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 639, 291, 280,
	281, 292, 700, 293, 677, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 678, 298, 299, 647, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	679, 680, 0, 0, 310, 311, 648, 649, 620, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 640,
	320, 0, 386, 321, 322, 323, 387, 681, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	594, 1533, 0, 625, 614, 615, 612, 613, 604, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 175,
	176, 0, 177, 0, 600, 0, 0, 642, 607, 0,
	603, 0, 178, 179, 180, 331, 657, 333, 658, 181,
	659, 660, 0, 182, 337, 338, 183, 184, 610, 641,
	661, 662, 341, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	687, 193, 194, 195, 0, 634, 635, 637, 0, 636,
	638, 196, 197, 396, 198, 663, 199, 664, 665, 0,
	200, 0, 201, 0, 202, 0, 0, 656, 204, 0,
	205, 0, 0, 0, 598, 206, 207, 208, 643, 644,
	621, 688, 0, 0, 0, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 689, 0,
	213, 654, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 650, 652, 691, 0, 356, 221, 0, 218,
	0, 690, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 692, 222, 223, 224, 693, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 655, 694, 230,
	695, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 696, 238, 239, 241, 240, 593, 0,
	622, 651, 242, 675, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 697, 248, 698, 645, 249,
	250, 251, 252, 253, 0, 254, 646, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 676, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 699, 277, 278, 599, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 639, 291, 280, 281, 292, 700, 293, 677, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 678, 298,
	299, 647, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 679, 680, 0, 0, 310, 311,
	648, 649, 620, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 640, 320, 0, 386, 321, 322, 323,
	387, 681, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 594, 1521, 0, 625, 614, 615,
	612, 613, 604, 0, 592, 0, 0, 0, 0, 590,
	591, 0, 0, 175, 176, 0, 177, 0, 600, 0,
	0, 642, 607, 0, 603, 0, 178, 179, 180, 331,
	657, 333, 658, 181, 659, 660, 0, 182, 337, 338,
	183, 184, 610, 641, 661, 662, 341, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 688, 0, 0, 0, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 0, 689, 0, 213, 654, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 650, 652, 691, 0,
	356, 221, 0, 218, 0, 690, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 692, 222, 223,
	224, 693, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 655, 694, 230, 695, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 696, 238, 239,
	241, 240, 593, 0, 622, 651, 242, 675, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 697,
	248, 698, 645, 249, 250, 251, 252, 253, 0, 254,
	646, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	676, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 699,
	277, 278, 599, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 639, 291, 280, 281, 292,
	700, 293, 677, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 678, 298, 299, 647, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 679, 680,
	0, 0, 310, 311, 648, 649, 620, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 640, 320, 0,
	386, 321, 322, 323, 387, 681, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 594, 1519,
	0, 1511, 614, 615, 612, 613, 604, 0, 592, 0,
	0, 0, 0, 590, 591, 0, 0, 175, 176, 0,
	177, 0, 600, 0, 0, 642, 607, 0, 603, 0,
	178, 179, 180, 331, 657, 333, 658, 181, 659, 660,
	0, 182, 337, 338, 183, 184, 610, 641, 661, 662,
	341, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 1514, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 688,
	0, 0, 0, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 689, 0, 213, 654,
	0, 353, 0, 0, 214, 1515, 0, 0, 216, 217,
	650, 652, 691, 0, 356, 221, 0, 218, 0, 690,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 692, 222, 223, 224, 693, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 655, 694, 230, 695, 0,
	231, 0, 0, 232, 0, 233, 1516, 1513, 237, 367,
	236, 696, 238, 239, 241, 240, 593, 0, 622, 651,
	242, 675, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 697, 248, 698, 645, 249, 250, 251,
	252, 253, 0, 254, 646, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 676, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 699, 277, 278, 599, 279, 0, 283,
	284, 285, 1517, 0, 288, 376, 287, 289, 290, 639,
	291, 280, 281, 292, 700, 293, 677, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 678, 298, 299, 647,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 679, 680, 0, 0, 310, 311, 648, 649,
	620, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 640, 320, 0, 386, 321, 322, 323, 387, 681,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	1512, 329, 594, 1508, 0, 1511, 614, 615, 612, 613,
	604, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 175, 176, 0, 177, 0, 600, 0, 0, 642,
	607, 0, 603, 0, 178, 179, 180, 331, 657, 333,
	658, 181, 659, 660, 0, 182, 337, 338, 183, 184,
	610, 641, 661, 662, 341, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 1514, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 688, 0, 0, 0, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	689, 0, 213, 654, 0, 353, 0, 0, 214, 1515,
	0, 0, 216, 217, 650, 652, 691, 0, 356, 221,
	0, 218, 0, 690, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 655,
	694, 230, 695, 0, 231, 0, 0, 232, 0, 233,
	1516, 1513, 237, 367, 236, 696, 238, 239, 241, 240,
	593, 0, 622, 651, 242, 675, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 697, 248, 698,
	645, 249, 250, 251, 252, 253, 0, 254, 646, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 676, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 699, 277, 278,
	599, 279, 0, 283, 284, 285, 1517, 0, 288, 376,
	287, 289, 290, 639, 291, 280, 281, 292, 700, 293,
	677, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	678, 298, 299, 647, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 679, 680, 0, 0,
	310, 311, 648, 649, 620, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 640, 320, 0, 386, 321,
	322, 323, 387, 681, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 1512, 329, 594, 0, 625, 614,
	615, 612, 613, 604, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 175, 176, 0, 177, 0, 0,
	600, 0, 642, 607, 0, 0, 603, 178, 179, 180,
	331, 657, 333, 658, 181, 659, 660, 0, 182, 337,
	338, 183, 184, 610, 641, 661, 662, 341, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 687, 193, 194, 195, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 0, 200, 0, 201, 0, 202,
	0, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 688, 0, 0, 0,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 689, 0, 213, 654, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 650, 652, 691,
	0, 356, 221, 0, 218, 0, 690, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 692, 222,
	223, 224, 693, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 655, 694, 230, 695, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 696, 238,
	239, 241, 240, 593, 0, 622, 651, 242, 675, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	697, 248, 698, 645, 249, 250, 251, 252, 253, 0,
	254, 646, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 676, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	699, 277, 278, 599, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 639, 291, 280, 281,
	292, 700, 293, 677, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 678, 298, 299, 647, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 679,
	680, 0, 0, 310, 311, 648, 649, 620, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 640, 320,
	0, 386, 321, 322, 323, 387, 681, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 594,
	0, 625, 614, 615, 612, 613, 604, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 175, 176, 1374,
	177, 1010, 0, 600, 0, 642, 607, 0, 0, 603,
	178, 179, 180, 331, 657, 333, 658, 181, 659, 660,
	0, 182, 337, 338, 183, 184, 610, 641, 661, 662,
	341, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 688,
	0, 0, 0, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 689, 0, 213, 654,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	650, 652, 691, 0, 356, 221, 0, 218, 0, 690,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 692, 222, 223, 224, 693, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 655, 694, 230, 695, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 696, 238, 239, 241, 240, 593, 0, 622, 651,
	242, 675, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 697, 248, 698, 645, 249, 250, 251,
	252, 253, 0, 254, 646, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 676, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 699, 277, 278, 599, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 639,
	291, 280, 281, 292, 700, 293, 677, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 678, 298, 299, 647,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 679, 680, 0, 0, 310, 311, 648, 649,
	620, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 640, 320, 0, 386, 321, 322, 323, 387, 681,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 594, 767, 0, 625, 614, 615, 612, 613,
	604, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 175, 176, 0, 177, 0, 600, 0, 0, 642,
	607, 0, 603, 0, 178, 179, 180, 331, 657, 333,
	658, 181, 659, 660, 0, 182, 337, 338, 183, 184,
	610, 641, 661, 662, 341, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 688, 0, 0, 0, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	689, 0, 213, 654, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 650, 652, 691, 0, 356, 221,
	0, 218, 0, 690, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 655,
	694, 230, 695, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 696, 238, 239, 241, 240,
	593, 0, 622, 651, 242, 675, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 697, 248, 698,
	645, 249, 250, 251, 252, 253, 0, 254, 646, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 676, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 699, 277, 278,
	599, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 639, 291, 280, 281, 292, 700, 293,
	677, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	678, 298, 299, 647, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 679, 680, 0, 0,
	310, 311, 648, 649, 620, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 640, 320, 0, 386, 321,
	322, 323, 387, 681, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 594, 765, 0, 625,
	614, 615, 612, 613, 604, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 0, 175, 176, 0, 177, 0,
	600, 0, 0, 642, 607, 0, 603, 0, 178, 179,
	180, 331, 657, 333, 658, 181, 659, 660, 0, 182,
	337, 338, 183, 184, 610, 641, 661, 662, 341, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 688, 0, 0,
	0, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 689, 0, 213, 654, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 650, 652,
	691, 0, 356, 221, 0, 218, 0, 690, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 692,
	222, 223, 224, 693, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 655, 694, 230, 695, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 696,
	238, 239, 241, 240, 593, 0, 622, 651, 242, 675,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 697, 248, 698, 645, 249, 250, 251, 252, 253,
	0, 254, 646, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 676, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 699, 277, 278, 599, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 639, 291, 280,
	281, 292, 700, 293, 677, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 678, 298, 299, 647, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	679, 680, 0, 0, 310, 311, 648, 649, 620, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 640,
	320, 0, 386, 321, 322, 323, 387, 681, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	594, 0, 625, 614, 615, 612, 613, 604, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 175, 176,
	0, 177, 0, 0, 600, 0, 642, 607, 0, 0,
	603, 178, 179, 180, 331, 657, 333, 658, 181, 659,
	660, 0, 182, 337, 338, 183, 184, 610, 641, 661,
	662, 341, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 687,
	193, 194, 2454, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	688, 0, 0, 0, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 689, 0, 213,
	654, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 650, 652, 691, 0, 356, 221, 0, 218, 0,
	690, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 692, 222, 223, 224, 693, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 655, 694, 230, 695,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 696, 238, 239, 241, 240, 593, 0, 622,
	651, 242, 675, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 697, 248, 698, 645, 249, 250,
	251, 252, 253, 0, 254, 646, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 676, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 699, 277, 278, 599, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	639, 291, 280, 281, 292, 700, 293, 677, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 678, 298, 299,
	647, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 679, 680, 0, 0, 310, 311, 648,
	649, 620, 312, 313, 2453, 315, 0, 0, 316, 317,
	318, 319, 640, 320, 0, 386, 321, 322, 323, 387,
	681, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 594, 0, 625, 614, 615, 612, 613,
	604, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	0, 175, 176, 0, 177, 0, 0, 600, 0, 642,
	607, 0, 0, 603, 178, 179, 180, 331, 657, 333,
	658, 181, 659, 660, 0, 182, 337, 338, 183, 184,
	610, 641, 661, 662, 341, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 688, 0, 0, 0, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	689, 0, 213, 654, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 650, 652, 691, 0, 356, 221,
	0, 218, 0, 690, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 655,
	694, 230, 695, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 696, 238, 239, 241, 240,
	593, 0, 622, 651, 242, 675, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 697, 248, 698,
	645, 249, 250, 251, 252, 253, 0, 254, 646, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 676, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 699, 277, 278,
	599, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 639, 291, 280, 281, 292, 700, 293,
	677, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	678, 298, 299, 647, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 679, 680, 0, 0,
	310, 311, 648, 649, 620, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 640, 320, 0, 386, 321,
	322, 323, 387, 681, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 594, 0, 625, 614,
	615, 612, 613, 604, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 175, 176, 0, 177, 0, 0,
	600, 0, 642, 607, 0, 0, 603, 178, 179, 180,
	2452, 657, 333, 658, 181, 659, 660, 0, 182, 337,
	338, 183, 184, 610, 641, 661, 662, 341, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 687, 193, 194, 2454, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 0, 200, 0, 201, 0, 202,
	0, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 688, 0, 0, 0,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 689, 0, 213, 654, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 650, 652, 691,
	0, 356, 221, 0, 218, 0, 690, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 692, 222,
	223, 224, 693, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 655, 694, 230, 695, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 696, 238,
	239, 241, 240, 593, 0, 622, 651, 242, 675, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	697, 248, 698, 645, 249, 250, 251, 252, 253, 0,
	254, 646, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 676, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	699, 277, 278, 599, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 639, 291, 280, 281,
	292, 700, 293, 677, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 678, 298, 299, 647, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 679,
	680, 0, 0, 310, 311, 648, 649, 620, 312, 313,
	2453, 315, 0, 0, 316, 317, 318, 319, 640, 320,
	0, 386, 321, 322, 323, 387, 681, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 594,
	0, 625, 614, 615, 612, 613, 604, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 175, 176, 0,
	177, 0, 0, 600, 0, 642, 607, 0, 0, 603,
	178, 179, 180, 331, 657, 333, 658, 181, 659, 660,
	0, 182, 337, 338, 183, 184, 610, 641, 661, 662,
	341, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 688,
	0, 0, 0, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 689, 0, 213, 654,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	650, 652, 691, 0, 356, 221, 0, 218, 0, 690,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 692, 222, 223, 224, 693, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 655, 694, 230, 695, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 696, 238, 239, 241, 240, 0, 0, 622, 651,
	242, 675, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 697, 248, 698, 645, 249, 250, 251,
	252, 253, 0, 254, 646, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 676, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 699, 277, 278, 1531, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 639,
	291, 280, 281, 292, 700, 293, 677, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 678, 298, 299, 647,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 679, 680, 0, 0, 310, 311, 648, 649,
	620, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 640, 320, 0, 386, 321, 322, 323, 387, 681,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 625, 614, 615, 612, 613, 604,
	0, 0, 1529, 0, 0, 0, 0, 1527, 1528, 0,
	175, 176, 0, 177, 0, 0, 1530, 0, 642, 607,
	0, 0, 603, 178, 179, 180, 331, 657, 333, 658,
	181, 659, 660, 0, 182, 337, 338, 183, 184, 0,
	641, 661, 662, 341, 0, 185, 653, 0, 633, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	0, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 643,
	644, 621, 688, 0, 0, 0, 0, 0, 209, 210,
	666, 667, 668, 0, 211, 0, 212, 0, 0, 689,
	0, 213, 654, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 650, 652, 691, 0, 356, 221, 0,
	218, 0, 690, 219, 669, 220, 670, 671, 672, 673,
	674, 0, 632, 0, 692, 222, 223, 224, 693, 364,
	365, 225, 226, 227, 0, 229, 228, 0, 655, 694,
	230, 695, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 367, 236, 696, 238, 239, 241, 240, 0,
	0, 622, 651, 242, 675, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 370, 697, 248, 698, 645,
	249, 250, 251, 252, 253, 0, 254, 646, 255, 373,
	256, 0, 257, 258, 259, 260, 261, 676, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 699, 277, 278, 1531,
	279, 0, 283, 284, 285, 286, 0, 288, 376, 287,
	289, 290, 639, 291, 280, 281, 292, 700, 293, 677,
	378, 294, 0, 301, 295, 296, 282, 297, 300, 678,
	298, 299, 647, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 381, 679, 680, 0, 0, 310,
	311, 648, 649, 620, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 640, 320, 0, 386, 321, 322,
	323, 387, 681, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 625, 614, 615,
	612, 613, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 1530,
	0, 642, 607, 0, 0, 603, 178, 179, 180, 0,
	657, 333, 658, 181, 659, 660, 0, 182, 337, 338,
	183, 184, 610, 641, 661, 662, 341, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 687, 193, 194, 2454, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 688, 0, 0, 0, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 0, 689, 0, 213, 654, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 650, 652, 0, 0,
	356, 221, 0, 218, 0, 690, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 0, 222, 223,
	224, 693, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 655, 694, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 696, 238, 239,
	241, 240, 593, 0, 622, 651, 242, 675, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 697,
	248, 698, 645, 249, 250, 251, 252, 253, 0, 254,
	646, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	676, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 699,
	277, 278, 599, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 639, 291, 280, 281, 292,
	0, 293, 677, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 678, 298, 299, 647, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 679, 680,
	0, 0, 310, 311, 648, 649, 620, 312, 313, 2453,
	315, 0, 0, 316, 317, 318, 319, 640, 320, 0,
	386, 321, 322, 323, 387, 681, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 591, 0, 175, 176, 0, 177,
	0, 0, 600, 0, 642, 0, 0, 0, 603, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 641, 339, 340, 341,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 643, 644, 0, 688, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 689, 0, 213, 654, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 650,
	652, 691, 0, 356, 221, 0, 218, 0, 690, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	692, 222, 223, 224, 693, 364, 365, 225, 226, 227,
	0, 229, 228, 0, 655, 694, 230, 695, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 367, 236,
	696, 238, 239, 241, 240, 0, 0, 0, 651, 242,
	369, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 370, 697, 248, 698, 645, 249, 250, 251, 252,
	253, 0, 254, 646, 255, 373, 256, 0, 257, 258,
	259, 260, 261, 374, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 699, 277, 278, 375, 279, 0, 283, 284,
	285, 286, 0, 288, 376, 287, 289, 290, 639, 291,
	280, 281, 292, 700, 293, 377, 378, 294, 0, 301,
	295, 296, 282, 297, 300, 379, 298, 299, 647, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	381, 382, 383, 0, 0, 310, 311, 648, 649, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	640, 320, 0, 386, 321, 322, 323, 387, 388, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 816, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 2101, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 824, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	687, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 688, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 689, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 691, 0, 356, 221, 0, 218,
	0, 690, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 692, 222, 223, 224, 693, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 694, 230,
	695, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 696, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 697, 248, 698, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 699, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 132, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 700, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 134, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	823, 388, 0, 0, 324, 0, 0, 0, 126, 325,
	326, 327, 328, 329, 576, 127, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 118, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 368, 242, 369, 243, 244, 0,
	245, 0, 740, 246, 0, 0, 247, 370, 0, 248,
	0, 371, 249, 250, 251, 252, 253, 0, 254, 372,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 374,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 375, 279, 0, 283, 284, 285, 286, 132, 288,
	376, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 377, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 379, 298, 299, 380, 0, 302, 134, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 382, 383, 0,
	0, 310, 311, 384, 385, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 386,
	321, 322, 323, 823, 388, 0, 0, 324, 0, 0,
	0, 126, 325, 326, 327, 328, 329, 0, 127, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 734,
	0, 1089, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 368, 242, 369,
	243, 244, 0, 245, 0, 740, 246, 0, 0, 247,
	370, 0, 248, 0, 371, 249, 250, 251, 252, 253,
	0, 254, 372, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 374, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 375, 279, 0, 283, 284, 285,
	286, 132, 288, 376, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 377, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 379, 298, 299, 380, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	382, 383, 0, 0, 310, 311, 384, 385, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 823, 388, 0, 0,
	324, 0, 0, 0, 126, 325, 326, 327, 328, 329,
	576, 127, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 734, 0, 1089, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	368, 242, 369, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 0, 248, 0, 371, 249, 250,
	251, 252, 253, 0, 254, 372, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 374, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 375, 279, 0,
	283, 284, 285, 286, 132, 288, 376, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 377, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 0, 302, 134, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 382, 383, 0, 0, 310, 311, 384,
	385, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 386, 321, 322, 323, 823,
	388, 0, 0, 324, 0, 0, 0, 126, 325, 326,
	327, 328, 329, 1851, 127, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 118, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 740, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 733, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 734, 0,
	739, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 368, 242, 369, 243,
	244, 0, 245, 0, 740, 246, 0, 0, 247, 370,
	0, 248, 0, 371, 249, 250, 251, 252, 253, 0,
	254, 372, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 374, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 375, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 377, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 379, 298, 299, 380, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 382,
	383, 0, 0, 310, 311, 384, 385, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 386, 321, 322, 323, 387, 388, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 734, 0, 739, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 365, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 367, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 368, 242,
	369, 243, 244, 0, 245, 0, 740, 246, 0, 0,
	247, 370, 0, 248, 0, 371, 249, 250, 251, 252,
	253, 0, 254, 372, 255, 373, 256, 0, 257, 258,
	259, 260, 261, 374, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 375, 279, 0, 283, 284,
	285, 286, 0, 288, 376, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 377, 378, 294, 0, 301,
	295, 296, 282, 297, 300, 379, 298, 299, 380, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	381, 382, 383, 0, 0, 310, 311, 384, 385, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 386, 321, 322, 323, 387, 388, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 734, 0, 739, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	368, 242, 369, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 0, 248, 0, 371, 249, 250,
	251, 252, 253, 0, 254, 372, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 374, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 375, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 377, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 382, 383, 0, 0, 310, 311, 384,
	385, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 386, 321, 322, 323, 387,
	388, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 1205, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 1669, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	2017, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 625,
	614, 615, 612, 613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 1092, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 657, 333, 658, 181, 659, 660, 0, 182,
	337, 338, 183, 184, 0, 0, 661, 662, 341, 0,
	185, 342, 0, 824, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 687, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 621, 688, 0, 0,
	0, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 689, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	691, 0, 356, 221, 0, 218, 0, 690, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 692,
	222, 223, 224, 693, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 694, 230, 695, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 696,
	238, 239, 241, 240, 0, 0, 622, 368, 242, 675,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 697, 248, 698, 371, 249, 250, 251, 252, 253,
	0, 254, 372, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 676, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 699, 277, 278, 375, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 0, 291, 280,
	281, 292, 700, 293, 677, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 678, 298, 299, 380, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	679, 680, 0, 0, 310, 311, 384, 385, 620, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 387, 681, 0, 481,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 168, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 368,
	242, 369, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 0, 248, 0, 371, 249, 250, 251,
	252, 253, 0, 254, 372, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 374, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 375, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 377, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 379, 298, 299, 380,
	0, 302, 167, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 382, 383, 0, 0, 310, 311, 384, 385,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 386, 321, 322, 323, 387, 388,
	0, 165, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 171,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 168, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 167, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 172, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 171, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 168, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 167, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 172, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 171, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 874, 0, 819, 878, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	824, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 687, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 688, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 689, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 691, 0, 356,
	221, 0, 218, 0, 690, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 692, 222, 223, 224,
	693, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	366, 694, 230, 695, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 696, 238, 239, 241,
	240, 0, 0, 0, 368, 242, 369, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 370, 697, 248,
	698, 371, 249, 250, 251, 252, 253, 0, 254, 372,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 374,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 699, 277,
	278, 375, 279, 0, 283, 284, 285, 286, 0, 288,
	376, 287, 289, 290, 0, 291, 280, 281, 292, 700,
	293, 377, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 379, 298, 299, 380, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 382, 383, 0,
	0, 310, 311, 384, 385, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 386,
	321, 322, 323, 387, 388, 819, 878, 324, 0, 0,
	876, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 824,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 687, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 688, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	689, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 691, 0, 356, 221,
	0, 218, 0, 690, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 692, 222, 223, 224, 693,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	694, 230, 695, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 696, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 697, 248, 698,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 699, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 700, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 819, 878, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 824, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 687, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 688, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 689,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 691, 0, 356, 221, 0,
	218, 0, 690, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 692, 222, 223, 224, 693, 364,
	365, 225, 226, 227, 0, 229, 228, 0, 366, 694,
	230, 695, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 367, 236, 696, 238, 239, 241, 240, 0,
	0, 0, 368, 242, 369, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 370, 697, 248, 698, 371,
	249, 250, 251, 252, 253, 0, 254, 372, 255, 373,
	256, 0, 257, 258, 259, 260, 261, 374, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 699, 277, 278, 375,
	279, 0, 283, 284, 285, 286, 0, 288, 376, 287,
	289, 290, 0, 291, 280, 281, 292, 700, 293, 377,
	378, 294, 0, 301, 295, 296, 282, 297, 300, 379,
	298, 299, 380, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 381, 382, 383, 0, 0, 310,
	311, 384, 385, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 386, 321, 322,
	323, 387, 388, 819, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 824, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	687, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 688, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 689, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 691, 0, 356, 221, 0, 218,
	0, 690, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 692, 222, 223, 224, 693, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 694, 230,
	695, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 696, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 697, 248, 698, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 699, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 700, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 1607, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 1605, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	1646, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 1610, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 1644, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	368, 242, 369, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 0, 248, 0, 371, 249, 250,
	251, 252, 253, 0, 254, 372, 255, 373, 256, 1609,
	257, 258, 259, 260, 261, 374, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 375, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 377, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 382, 383, 0, 0, 310, 311, 384,
	385, 0, 312, 313, 314, 315, 0, 1645, 316, 317,
	318, 319, 0, 320, 0, 386, 321, 322, 323, 387,
	388, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 1607, 185, 342, 0, 0, 1602, 186, 187, 188,
	0, 189, 1605, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 1610, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	1601, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 368,
	242, 369, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 0, 248, 0, 371, 249, 250, 251,
	252, 253, 0, 254, 372, 255, 373, 256, 1609, 257,
	258, 259, 260, 261, 374, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 375, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 377, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 379, 298, 299, 380,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 382, 383, 0, 0, 310, 311, 384, 385,
	0, 312, 313, 314, 315, 0, 1608, 316, 317, 318,
	319, 0, 320, 0, 386, 321, 322, 323, 387, 388,
	0, 794, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 740,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 746, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 748, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 740, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 742, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 744, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 740, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 0, 413, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 412, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 368, 242, 369,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 0, 248, 0, 371, 249, 250, 251, 252, 253,
	0, 254, 372, 255, 373, 411, 0, 257, 258, 259,
	260, 261, 374, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 375, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 377, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 379, 298, 299, 380, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	382, 383, 0, 0, 310, 311, 384, 385, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 387, 388, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 1590, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 368, 242, 369, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	0, 248, 0, 371, 249, 250, 251, 252, 253, 0,
	254, 372, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 374, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 375, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 377, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 379, 298, 299, 380, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 382,
	383, 0, 0, 310, 311, 384, 385, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 386, 321, 322, 323, 387, 388, 172, 2162, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 172, 2162, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 368, 242, 369, 243, 244, 0,
	245, 0, 0, 2159, 0, 0, 247, 370, 0, 248,
	0, 371, 249, 250, 251, 252, 253, 0, 254, 372,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 374,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 375, 279, 0, 283, 284, 285, 286, 0, 288,
	376, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 377, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 379, 298, 299, 380, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 382, 383, 0,
	0, 310, 311, 384, 385, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 386,
	321, 322, 323, 387, 388, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 740, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 1363, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 0, 1361, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 368, 242, 369,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 0, 248, 0, 371, 249, 250, 251, 252, 253,
	0, 254, 372, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 374, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 375, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 377, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 379, 298, 299, 380, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	382, 383, 0, 0, 310, 311, 384, 385, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 387, 388, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 1343, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 368, 242, 369, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	0, 248, 0, 371, 249, 250, 251, 252, 253, 0,
	254, 372, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 374, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 375, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 377, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 379, 298, 299, 380, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 382,
	383, 0, 0, 310, 311, 384, 385, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 386, 321, 322, 323, 387, 388, 0, 507, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 853,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 365, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 367, 509,
	0, 238, 239, 241, 240, 0, 0, 0, 368, 242,
	369, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 370, 0, 248, 0, 371, 249, 250, 251, 252,
	253, 0, 254, 372, 255, 373, 256, 0, 257, 258,
	259, 260, 261, 374, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 375, 279, 0, 283, 284,
	285, 286, 0, 288, 376, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 377, 378, 294, 0, 301,
	295, 296, 282, 297, 300, 379, 298, 299, 380, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	504, 382, 383, 0, 0, 310, 311, 384, 385, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 386, 321, 322, 323, 387, 388, 0,
	1219, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 1218, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	368, 242, 369, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 0, 248, 0, 371, 249, 250,
	251, 252, 253, 0, 254, 372, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 374, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 375, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 377, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 382, 383, 0, 0, 310, 311, 384,
	385, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 386, 321, 322, 323, 387,
	388, 0, 507, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 853, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	365, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 367, 509, 0, 238, 239, 241, 240, 0,
	0, 0, 368, 242, 369, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 370, 0, 248, 0, 371,
	249, 250, 251, 252, 253, 0, 254, 372, 255, 373,
	256, 0, 257, 258, 259, 260, 261, 374, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 375,
	279, 0, 283, 284, 285, 286, 0, 288, 376, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 377,
	378, 294, 0, 301, 295, 296, 282, 297, 300, 379,
	298, 299, 380, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 504, 382, 383, 0, 0, 310,
	854, 384, 385, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 386, 321, 322,
	323, 387, 388, 0, 507, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 498, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 509, 0, 238, 239, 241,
	240, 0, 0, 0, 368, 242, 369, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 370, 0, 248,
	0, 371, 249, 250, 251, 252, 253, 0, 254, 372,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 374,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 375, 279, 0, 283, 284, 285, 286, 0, 288,
	376, 287, 837, 290, 0, 291, 280, 281, 292, 0,
	293, 377, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 379, 298, 299, 380, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 504, 382, 383, 0,
	0, 310, 311, 384, 385, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 386,
	321, 322, 323, 387, 388, 0, 812, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 811, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 365, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 367, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 368, 242, 369, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 370,
	0, 248, 0, 371, 249, 250, 251, 252, 253, 0,
	254, 372, 255, 373, 256, 0, 257, 258, 259, 260,
	261, 374, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 375, 279, 0, 283, 284, 285, 286,
	0, 288, 376, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 377, 378, 294, 0, 301, 295, 296,
	282, 297, 300, 379, 298, 299, 380, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 381, 382,
	383, 0, 0, 310, 311, 384, 385, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 386, 321, 322, 323, 387, 388, 0, 809, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 808,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 365, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 367, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 368, 242,
	369, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 370, 0, 248, 0, 371, 249, 250, 251, 252,
	253, 0, 254, 372, 255, 373, 256, 0, 257, 258,
	259, 260, 261, 374, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 375, 279, 0, 283, 284,
	285, 286, 0, 288, 376, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 377, 378, 294, 0, 301,
	295, 296, 282, 297, 300, 379, 298, 299, 380, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	381, 382, 383, 0, 0, 310, 311, 384, 385, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 386, 321, 322, 323, 387, 388, 0,
	805, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 804, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	368, 242, 369, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 0, 248, 0, 371, 249, 250,
	251, 252, 253, 0, 254, 372, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 374, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 375, 279, 0,
	283, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 377, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 382, 383, 0, 0, 310, 311, 384,
	385, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 386, 321, 322, 323, 387,
	388, 0, 802, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 801, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	365, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 367, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 368, 242, 369, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 370, 0, 248, 0, 371,
	249, 250, 251, 252, 253, 0, 254, 372, 255, 373,
	256, 0, 257, 258, 259, 260, 261, 374, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 375,
	279, 0, 283, 284, 285, 286, 0, 288, 376, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 377,
	378, 294, 0, 301, 295, 296, 282, 297, 300, 379,
	298, 299, 380, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 381, 382, 383, 0, 0, 310,
	311, 384, 385, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 386, 321, 322,
	323, 387, 388, 0, 798, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 797, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 368, 242, 369, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 370, 0, 248,
	0, 371, 249, 250, 251, 252, 253, 0, 254, 372,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 374,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 375, 279, 0, 283, 284, 285, 286, 0, 288,
	376, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 377, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 379, 298, 299, 380, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 382, 383, 0,
	0, 310, 311, 384, 385, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 386,
	321, 322, 323, 387, 388, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 786, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 784, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 783, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 0, 780, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 368, 242, 369,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 0, 248, 0, 371, 249, 250, 251, 252, 253,
	0, 254, 372, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 374, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 375, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 377, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 379, 298, 299, 380, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	382, 383, 0, 0, 310, 311, 384, 385, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 387, 388, 0, 778,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 368,
	242, 369, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 0, 248, 0, 371, 249, 250, 251,
	252, 253, 0, 254, 372, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 374, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 375, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 377, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 379, 298, 299, 380,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 382, 383, 0, 0, 310, 311, 384, 385,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 386, 321, 322, 323, 387, 388,
	0, 774, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 776, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 752, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 754, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 750, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 0, 507, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	498, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 0, 0, 497, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 509, 0,
	238, 239, 241, 240, 0, 0, 0, 368, 242, 369,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 0, 248, 0, 371, 249, 250, 251, 252, 253,
	0, 254, 372, 255, 373, 256, 0, 257, 258, 259,
	260, 261, 374, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 499, 279, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 500, 290, 0, 291, 280,
	281, 292, 0, 293, 377, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 379, 298, 299, 380, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 504,
	382, 383, 0, 0, 310, 502, 384, 385, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 387, 388, 0, 489,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 368,
	242, 369, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 0, 248, 0, 371, 249, 250, 251,
	252, 253, 0, 254, 372, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 374, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 375, 279, 0, 490,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 377, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 379, 298, 299, 380,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 382, 383, 0, 0, 310, 311, 384, 385,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 386, 321, 322, 323, 387, 388,
	0, 487, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 0, 479, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 0, 436, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 365, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 367, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 368, 242, 369, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 370, 0,
	248, 0, 371, 249, 250, 251, 252, 253, 0, 254,
	372, 255, 373, 256, 0, 257, 258, 259, 260, 261,
	374, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 375, 279, 0, 283, 284, 285, 286, 0,
	288, 376, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 377, 378, 294, 0, 301, 295, 296, 282,
	297, 300, 379, 298, 299, 380, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 381, 382, 383,
	0, 0, 310, 311, 384, 385, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	386, 321, 322, 323, 387, 388, 172, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 365, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 367, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 368, 242, 369, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 370, 0, 248,
	0, 371, 249, 250, 251, 252, 253, 0, 254, 372,
	255, 373, 256, 0, 257, 258, 259, 260, 261, 374,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 375, 279, 0, 283, 284, 285, 286, 0, 288,
	376, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 377, 378, 294, 0, 301, 295, 296, 282, 297,
	300, 379, 298, 299, 380, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 381, 382, 383, 0,
	0, 310, 311, 384, 385, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 386,
	321, 322, 323, 387, 388, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 1898, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 365, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 367, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 368, 242, 369, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 370, 0, 248, 0,
	371, 249, 250, 251, 252, 253, 0, 254, 372, 255,
	373, 256, 0, 257, 258, 259, 260, 261, 374, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	375, 279, 0, 283, 284, 285, 286, 0, 288, 376,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	377, 378, 294, 0, 301, 295, 296, 282, 297, 300,
	379, 298, 299, 380, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 381, 382, 383, 0, 0,
	310, 311, 384, 385, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 386, 321,
	322, 323, 387, 388, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 1896, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	365, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 367, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 368, 242, 369, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 370, 0, 248, 0, 371,
	249, 250, 251, 252, 253, 0, 254, 372, 255, 373,
	256, 0, 257, 258, 259, 260, 261, 374, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 375,
	279, 0, 283, 284, 285, 286, 0, 288, 376, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 377,
	378, 294, 0, 301, 295, 296, 282, 297, 300, 379,
	298, 299, 380, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 381, 382, 383, 0, 0, 310,
	311, 384, 385, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 386, 321, 322,
	323, 387, 388, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 1885, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 365,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 367, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 368, 242, 369, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 370, 0, 248, 0, 371, 249,
	250, 251, 252, 253, 0, 254, 372, 255, 373, 256,
	0, 257, 258, 259, 260, 261, 374, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 375, 279,
	0, 283, 284, 285, 286, 0, 288, 376, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 377, 378,
	294, 0, 301, 295, 296, 282, 297, 300, 379, 298,
	299, 380, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 381, 382, 383, 0, 0, 310, 311,
	384, 385, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 386, 321, 322, 323,
	387, 388, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 365, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	367, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	368, 242, 369, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 370, 0, 248, 0, 371, 249, 250,
	251, 252, 253, 0, 254, 372, 255, 373, 256, 0,
	257, 258, 259, 260, 261, 374, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 375, 279, 0,
	490, 284, 285, 286, 0, 288, 376, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 377, 378, 294,
	0, 301, 295, 296, 282, 297, 300, 379, 298, 299,
	380, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 381, 382, 383, 0, 0, 310, 311, 384,
	385, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 386, 321, 322, 323, 387,
	388, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 1229, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 365, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 367,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 368,
	242, 369, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 370, 0, 248, 0, 371, 249, 250, 251,
	252, 253, 0, 254, 372, 255, 373, 256, 0, 257,
	258, 259, 260, 261, 374, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 375, 279, 0, 283,
	284, 285, 286, 0, 288, 376, 287, 289, 290, 0,
	0, 280, 281, 292, 0, 293, 377, 378, 294, 0,
	301, 295, 296, 282, 297, 300, 379, 298, 299, 380,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 381, 382, 383, 0, 0, 310, 311, 384, 385,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 386, 321, 322, 323, 387, 388,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 365, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 367, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 368, 242,
	369, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 370, 0, 248, 0, 371, 249, 250, 251, 252,
	253, 0, 254, 372, 255, 373, 256, 0, 257, 258,
	259, 260, 261, 374, 716, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 375, 279, 0, 283, 284,
	285, 286, 0, 288, 376, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 377, 378, 294, 0, 301,
	295, 296, 282, 297, 300, 379, 298, 299, 380, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	381, 382, 383, 0, 0, 310, 311, 384, 385, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 386, 321, 322, 323, 387, 388, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 365, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 367, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 368, 242, 369,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	370, 0, 248, 0, 371, 249, 250, 0, 252, 253,
	0, 254, 372, 255, 373, 256, 0, 257, 258, 259,
	0, 261, 374, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 375, 0, 0, 283, 284, 285,
	286, 0, 288, 376, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 377, 378, 294, 0, 301, 295,
	296, 282, 297, 300, 379, 298, 299, 380, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 381,
	382, 383, 0, 0, 310, 311, 384, 385, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 386, 321, 322, 323, 387, 388, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	943, 944, 0, 973, 974, 975, 983, 984, 985, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 943, 944, 0, 973, 974, 975, 983,
	984, 985, 0, 0, 0, 0, 0, 945, 0, 976,
	0, 0, 0, 965, 0, 0, 946, 962, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 969, 970, 971, 0, 0,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 988, 968, 969, 970,
	971, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 943,
	944, 0, 973, 974, 975, 983, 984, 985, 980, 988,
	0, 978, 0, 0, 0, 976, 0, 966, 0, 0,
	0, 0, 946, 0, 0, 987, 0, 986, 0, 0,
	0, 0, 943, 944, 0, 973, 974, 975, 983, 984,
	985, 0, 977, 0, 978, 0, 945, 0, 976, 0,
	966, 0, 965, 0, 0, 946, 962, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 972, 0, 0, 945,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 962,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 969, 970, 971, 981, 0, 972,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 980, 988, 968, 969, 970, 971,
	981, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 988, 0,
	978, 0, 0, 0, 0, 979, 966, 0, 957, 958,
	964, 963, 959, 960, 961, 982, 986, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 0, 0, 0,
	0, 977, 0, 978, 1785, 0, 0, 0, 979, 966,
	0, 957, 958, 964, 963, 959, 960, 961, 982, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	0, 0, 0, 2425, 977, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 943,
	944, 0, 973, 974, 975, 983, 984, 985, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 946, 0, 979, 987, 0, 957, 958, 964,
	963, 959, 960, 961, 982, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 945, 0, 0, 2378,
	0, 0, 965, 0, 0, 0, 962, 979, 0, 0,
	957, 958, 964, 963, 959, 960, 961, 982, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	0, 0, 2332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 969, 970, 971, 0, 0, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	943, 944, 0, 973, 974, 975, 983, 984, 985, 0,
	0, 0, 0, 0, 980, 988, 976, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 943, 944,
	0, 973, 974, 975, 983, 984, 985, 945, 0, 0,
	978, 0, 0, 965, 976, 0, 966, 962, 0, 0,
	0, 946, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 969, 970, 971, 0, 0,
	0, 0, 0, 951, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 980, 988, 0, 0, 0,
	0, 0, 968, 969, 970, 971, 981, 0, 0, 0,
	0, 951, 0, 0, 986, 0, 0, 0, 0, 943,
	944, 0, 973, 974, 975, 983, 984, 985, 0, 0,
	0, 978, 0, 980, 988, 976, 0, 966, 0, 0,
	0, 0, 946, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 945, 0, 0, 978,
	0, 0, 965, 0, 979, 966, 962, 957, 958, 964,
	963, 959, 960, 961, 982, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 972, 0, 0, 2302,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 969, 970, 971, 981, 0, 0,
	0, 0, 951, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 980, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 979, 966, 0, 957, 958,
	964, 963, 959, 960, 961, 982, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 0, 0, 0,
	2297, 977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 957, 958, 964, 963,
	959, 960, 961, 982, 0, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 0, 972, 0, 0, 2293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 943, 944, 0, 973, 974, 975, 983, 984, 985,
	0, 0, 0, 0, 0, 0, 981, 976, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 979, 0, 0, 957, 958, 964,
	963, 959, 960, 961, 982, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 968, 969, 970, 971, 2235,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 943, 944, 0, 973, 974, 975, 983, 984,
	985, 0, 0, 0, 0, 0, 980, 988, 976, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	943, 944, 0, 973, 974, 975, 983, 984, 985, 945,
	0, 0, 978, 0, 0, 965, 976, 0, 966, 962,
	0, 0, 0, 946, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 969, 970, 971,
	0, 0, 0, 0, 0, 951, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 980, 988, 0,
	0, 0, 0, 0, 968, 969, 970, 971, 981, 0,
	0, 0, 0, 951, 0, 0, 986, 0, 0, 0,
	0, 943, 944, 0, 973, 974, 975, 983, 984, 985,
	0, 0, 0, 978, 0, 980, 988, 976, 0, 966,
	0, 0, 0, 0, 946, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 945, 0,
	0, 978, 0, 0, 965, 0, 979, 966, 962, 957,
	958, 964, 963, 959, 960, 961, 982, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 0, 972, 0,
	0, 2201, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 969, 970, 971, 981,
	0, 0, 0, 0, 951, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 980, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 979, 966, 0,
	957, 958, 964, 963, 959, 960, 961, 982, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	0, 0, 2200, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 957, 958,
	964, 963, 959, 960, 961, 982, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 972, 0, 0,
	2165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 943, 944, 0, 973, 974, 975, 983,
	984, 985, 0, 0, 0, 0, 0, 0, 981, 976,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 957,
	958, 964, 963, 959, 960, 961, 982, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 968, 969, 970,
	971, 2020, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 943, 944, 0, 973, 974, 975,
	983, 984, 985, 0, 0, 0, 0, 0, 980, 988,
	976, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 943, 944, 0, 973, 974, 975, 983, 984,
	985, 945, 0, 0, 978, 0, 0, 965, 976, 0,
	966, 962, 0, 0, 0, 946, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 969,
	970, 971, 0, 0, 0, 0, 0, 951, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 980,
	988, 0, 0, 0, 0, 0, 968, 969, 970, 971,
	981, 0, 0, 0, 0, 951, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 980, 988, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 979, 966,
	0, 957, 958, 964, 963, 959, 960, 961, 982, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	972, 0, 0, 1996, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 943, 944, 0, 973, 974, 975,
	983, 984, 985, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 946, 0, 979,
	987, 0, 957, 958, 964, 963, 959, 960, 961, 982,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 945, 0, 0, 1469, 0, 0, 965, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 979, 0, 0,
	957, 958, 964, 963, 959, 960, 961, 982, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	1755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 969,
	970, 971, 0, 0, 0, 0, 0, 951, 2485, 0,
	0, 0, 0, 0, 0, 0, 943, 944, 0, 973,
	974, 975, 983, 984, 985, 0, 0, 0, 0, 980,
	988, 0, 976, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 987, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 978, 0, 0, 0, 965,
	0, 966, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2484, 0, 0, 0, 0, 0, 0, 0,
	968, 969, 970, 971, 0, 0, 0, 0, 0, 951,
	972, 1825, 0, 0, 1824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 980, 988, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 943, 944, 0, 973, 974, 975, 983,
	984, 985, 0, 0, 0, 0, 0, 978, 0, 976,
	0, 0, 0, 966, 1728, 0, 946, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	945, 0, 0, 0, 0, 0, 965, 0, 0, 979,
	962, 0, 957, 958, 964, 963, 959, 960, 961, 982,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 0, 972, 0, 0, 0, 0, 1729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 969, 970,
	971, 0, 0, 981, 0, 0, 951, 0, 0, 1566,
	0, 0, 0, 0, 0, 943, 944, 0, 973, 974,
	975, 983, 984, 985, 0, 0, 0, 0, 980, 988,
	0, 976, 0, 0, 0, 1565, 0, 0, 946, 0,
	0, 987, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 978, 0, 0, 0, 965, 0,
	966, 979, 962, 0, 957, 958, 964, 963, 959, 960,
	961, 982, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	969, 970, 971, 0, 0, 0, 0, 0, 951, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	980, 988, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 943, 944, 0, 973, 974, 975, 983, 984,
	985, 0, 0, 0, 0, 0, 978, 0, 976, 0,
	0, 0, 966, 0, 0, 946, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 945,
	0, 0, 0, 0, 0, 965, 0, 0, 979, 962,
	0, 957, 958, 964, 963, 959, 960, 961, 982, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 969, 970, 971,
	0, 0, 981, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 944, 0, 973, 974, 975,
	983, 984, 985, 0, 0, 0, 0, 980, 988, 0,
	976, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	987, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 978, 0, 0, 0, 965, 0, 966,
	979, 962, 0, 957, 958, 964, 963, 959, 960, 961,
	982, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 0, 0, 977, 573, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 969,
	970, 971, 0, 0, 0, 0, 0, 951, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 980,
	988, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	957, 958, 964, 963, 959, 960, 961, 982, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 943, 944, 0, 973,
	974, 975, 983, 984, 985, 0, 0, 0, 0, 0,
	0, 981, 976, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2000, 0, 0,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 957, 958, 964, 963, 959, 960, 961, 982,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	968, 969, 970, 971, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 1831, 0, 0, 943, 944, 0,
	973, 974, 975, 983, 984, 985, 0, 0, 0, 0,
	0, 980, 988, 976, 0, 0, 0, 1826, 0, 0,
	946, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 943, 944, 0, 973, 974,
	975, 983, 984, 985, 945, 0, 0, 978, 0, 0,
	965, 976, 0, 966, 962, 0, 0, 0, 946, 0,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 969, 970, 971, 0, 0, 0, 0, 0,
	951, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 980, 988, 0, 0, 0, 0, 0, 968,
	969, 970, 971, 981, 0, 0, 0, 0, 951, 0,
	0, 986, 0, 0, 0, 0, 943, 944, 0, 973,
	974, 975, 983, 984, 985, 0, 0, 0, 978, 0,
	980, 988, 976, 0, 966, 0, 1784, 0, 0, 946,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 945, 0, 0, 978, 0, 0, 965,
	0, 979, 966, 962, 957, 958, 964, 963, 959, 960,
	961, 982, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 0, 972, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	1791, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 969, 970, 971, 981, 0, 0, 0, 0, 951,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 980, 988, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 0, 979, 966, 0, 957, 958, 964, 963, 959,
	960, 961, 982, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 957, 958, 964, 963, 959, 960, 961,
	982, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 943, 944,
	0, 973, 974, 975, 983, 984, 985, 0, 0, 0,
	0, 0, 0, 981, 976, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 957, 958, 964, 963, 959, 960,
	961, 982, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 968, 969, 970, 971, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 943,
	944, 0, 973, 974, 975, 983, 984, 985, 0, 0,
	0, 0, 0, 980, 988, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 943, 944, 0,
	973, 974, 975, 983, 984, 985, 945, 0, 0, 978,
	0, 0, 965, 0, 0, 966, 962, 0, 0, 0,
	946, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 969, 970, 971, 0, 0, 0,
	0, 0, 951, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 943, 944, 980, 988, 0, 0, 983, 984,
	985, 968, 969, 970, 971, 981, 0, 0, 0, 0,
	951, 0, 0, 986, 0, 946, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 980, 988, 0, 0, 966, 0, 0, 945,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 0,
	0, 0, 0, 979, 966, 0, 957, 958, 964, 963,
	959, 960, 961, 982, 0, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 0, 972, 968, 969, 970, 971,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 980, 988, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 981, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 979, 0, 0, 957, 958, 964,
	963, 959, 960, 961, 982, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 979, 0, 1274, 957, 958, 964, 963, 959,
	960, 961, 982, 967, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 1282, 1271, 1301,
	1260, 1292, 1291, 0, 0, 1262, 1261, 0, 0, 0,
	0, 1303, 1302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 1289, 1288,
	0, 0, 0, 0, 0, 0, 1274, 979, 1287, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	1286, 1284, 1285, 0, 0, 0, 0, 0, 0, 1282,
	1271, 1301, 1260, 1292, 1291, 0, 0, 1262, 1261, 0,
	0, 0, 0, 1303, 1302, 0, 0, 1270, 0, 0,
	0, 0, 0, 0, 1275, 1273, 1276, 1277, 1278, 1279,
	1280, 0, 1300, 0, 0, 0, 0, 0, 0, 1264,
	1263, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	1289, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 0, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 1272, 0,
	0, 0, 1286, 1284, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1283, 0, 1270,
	0, 1394, 1392, 1393, 1396, 1395, 1275, 1273, 1276, 1277,
	1278, 1279, 1280, 0, 1300, 0, 528, 0, 554, 0,
	0, 1264, 1263, 0, 0, 0, 0, 0, 1267, 0,
	0, 0, 0, 0, 0, 0, 533, 0, 0, 1281,
	1268, 0, 0, 0, 1266, 0, 0, 0, 531, 1305,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	1272, 0, 1265, 0, 0, 1298, 1299, 0, 0, 532,
	0, 0, 0, 0, 534, 0, 0, 0, 0, 540,
	541, 0, 0, 0, 550, 0, 0, 1269, 0, 1283,
	0, 0, 1304, 0, 0, 0, 0, 0, 555, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1267, 553, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 0, 0, 1298, 1299, 0,
	0, 0, 0, 537, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	0, 544, 0, 0, 1304, 0, 539, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 547, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 0, 0, 0, 552, 0, 0, 0, 558, 0,
	0, 0, 0, 545, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
}
var sqlPact = [...]int{

	4020, -1000, -35, -1000, -1000, -1000, 151, -1000, -1000, -1000,
	150, 147, 146, -1000, 144, 143, 141, 140, 139, 126,
	123, 120, 118, 117, 116, -1000, 115, -1000, -1000, -1000,
	-1000, 113, 106, 104, 102, 101, 97, 93, 973, 21589,
	88, 85, 1368, 35172, 84, 83, 81, 80, 950, 79,
	76, 25565, 901, 1142, 73, 67, 66, 53, 51, 955,
	34843, 2567, 2488, 1132, 1560, 34511, 21257, 1541, 1323, 34179,
	-1000, -1000, 33847, 48, 47, 45, 43, 41, -1000, -1000,
	33515, 38, 37, 34, 31, 29, 28, 25, 22, 21,
	20, 19, 18, 17, 15, -1000, 11, 7, 6, 41994,
	5, 3, -1, 1119, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 77, -1000, 887, 273, 1732,
	8232, 1023, 1020, 1000, 988, 983, 37146, 35172, -3, -176,
	-5, -1000, 1857, 634, 18874, 4020, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25233, 24901, 33183, 32851, 788, -1000, -40, 22249, 35172, -1000,
	111, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14415, 14071, 515, 111, -1000, -1000, -1000, -1000,
	-1000, 32519, -1000, 32187, 31855, 1408, 31523, -1000, -1000, -1000,
	-1000, 31191, -1000, -1000, 1703, 1594, 1584, 24569, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	30862, 30530, 30198, 29866, 29534, 486, -1000, -1000, -1000, 17159,
	-1000, -1000, -1000, -1000, -6, -1000, -7, -1000, -12, -13,
	-15, -16, -1000, -17, -19, -1000, -22, -24, -1000, -25,
	-27, 29202, 1186, -1000, -1000, -38, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35172, -1000, 15101, -1000, 484, -1000,
	1586, -1000, 15101, -1000, 1180, -1000, -1000, -1000, -1000, -1000,
	35172, -1000, -1000, -1000, -1000, -1000, -1000, 2061, 1172, 483,
	28870, -1000, 1445, -1000, 584, 780, -1000, -1000, -1000, 9261,
	164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1087, 22592, 1280, 1888, 1698, 2060, 1350, 1646, 1638, 1637,
	1632, 1618, 2059, 1028, 2058, 1713, 987, 2057, 1605, 1299,
	664, 2056, 1585, 1582, -1000, -1000, -1000, -1000, 912, -1000,
	-1000, -1000, 26881, -1000, -1000, 887, -1000, -1000, -1000, 1284,
	1842, 1842, 1842, 1903, 263, 260, -1000, 77, -1000, 1719,
	-1000, 1154, -1000, -1000, -1000, -1000, -1000, 41238, -1000, -1000,
	15101, 15101, 15101, 15101, 15101, 1116, 511, -1000, 482, 480,
	7545, -1000, -1000, 2038, -1000, -1000, -1000, 282, -1000, -1000,
	15101, 111, -1000, -1000, -1000, -1000, 475, 2048, -1000, 632,
	-1000, -1000, -1000, 600, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1610, 474, 456, 455, -1000, 443, -1000,
	-1000, 442, 441, 440, 428, 426, 424, 418, 416, 415,
	414, 412, 411, 410, 409, 406, 1077, -1000, 618, -1000,
	-1000, 618, 618, -1000, 391, 391, 393, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 391, -1000, -1000, -1000, 572,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 405, 1235, -1000, -1000, 1235, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 781, 36488, -42, 35172, -1000, 404, -42,
	-1000, -1000, 400, -1000, 10290, 10290, -1000, -1000, -1000, -1000,
	-1000, 9604, 1390, -1000, 255, -209, 276, 559, -1000, 17845,
	20583, -1000, -1000, 1195, 1737, 646, -1000, 1012, 1731, 510,
	-1000, 997, -1000, 877, 1728, -188, 22921, 22249, -40, -57,
	-1000, -1000, -1000, 5828, 41238, -1000, 41238, -1000, 856, 19558,
	111, -1000, -1000, -1000, -1000, 399, 1282, 605, -1000, 277,
	-1000, 28538, 605, 1281, -1000, -1000, -1000, 26881, -1000, 35172,
	-1000, 35172, -1000, 876, -1000, 36817, 112, 1725, -1000, -1000,
	112, 1720, -1000, 110, 1716, -1000, -1000, 1205, 1715, -1000,
	-57, 1712, -1000, -1000, 15101, -64, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 634, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28206, 21919, 1257,
	561, 41238, 1959, 41832, 22921, 41238, 21919, -1000, -1000, 35172,
	-1000, 15101, -1000, 1956, 1300, -52, -1000, -1000, -1000, -1000,
	-1000, 1317, 1331, 731, 956, 9261, 9261, 1795, -1000, 159,
	6171, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27874,
	-1000, -1000, -1000, 1161, 35172, -1000, -1000, 1607, -1000, 21919,
	35172, -1000, 35172, -1000, 35172, -1000, 35172, -1000, 35172, -1000,
	-1000, -1000, -1000, -1000, 1179, -1000, 1597, -1000, -1000, 35172,
	-1000, 1316, -1000, -1000, -1000, 27545, 27213, -1000, 970, 815,
	-1000, -1000, 130, -1000, -1000, 1284, -1000, 1174, 1399, 13727,
	1375, 15101, 77, -1000, -1000, 77, 77, 8918, -1000, -1000,
	-1000, 35172, -1000, 41740, 41832, 6171, 803, 15101, 15101, 15101,
	15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101,
	15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101,
	15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101, 15101, 1230,
	15101, 771, 15101, 15101, 15101, 15101, 1104, 1105, 390, 1139,
	-1000, 1988, 1988, 1988, 41359, 41359, 375, 511, -1000, 15101,
	-1000, 42, 15101, 260, 39464, -41, 7202, -1000, -1000, -1000,
	13384, 615, 41238, 111, 6514, -1000, 2032, 882, 1612, 1468,
	397, 534, 532, 531, 505, 15101, 15101, 13041, 12697, 12353,
	15787, 12009, 15101, 7888, 15101, 15101, 15101, 15101, 11665, 11321,
	-1000, 396, -1000, -1000, -1000, -1000, 2030, -1000, -1000, 2028,
	-1000, 799, 798, 2025, -1000, -52, -1000, 36488, -1000, 35172,
	-42, 1954, 35172, -1000, 135, -1000, 40175, -1000, 135, -65,
	-1000, 1382, 1373, 19216, 1206, 1106, 1106, 1106, -1000, 394,
	499, 559, 5123, 10977, -1000, 25894, 1122, 183, 259, 17502,
	1390, -1000, 35172, -61, 1073, -1000, 24237, 1848, 1845, 1835,
	26881, 1918, 42, 1561, 757, 26881, 752, 1917, 42, 1551,
	748, 35172, 6171, 545, -1000, 35172, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1547, -71, -1000, -1000, 23908,
	1952, 1709, -1000, 1060, -1000, 1950, 35172, 1173, 1278, -1000,
	-1000, 810, 1705, 611, 542, 1941, 542, 19899, -1000, 35172,
	-1000, 35172, -1000, -1000, 35172, -1000, 35172, -1000, 35172, 35172,
	-1000, 35172, 35172, -73, 41238, 2878, 23579, 744, -1000, 653,
	23908, 352, -78, -1000, 836, -1000, -1000, -1000, -1000, 376,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 393, 1077, 391, 391,
	391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 572, -1000,
	-1000, 618, 618, 618, -1000, -1000, -81, -1000, 1543, 582,
	-79, 676, -52, -1000, 1235, -1000, 1019, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2045, -1000, 1998, -1000, -1000, 2024, -53, -1000, -53, -1000,
	6171, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35172, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 171, -1000, -1000,
	-1000, -1000, -1000, -1000, 35172, 35172, 35172, -1000, 26881, -1000,
	-1000, -1000, -1000, 41238, -1000, 351, -1000, -1000, 41238, 913,
	1403, -1000, 1403, -54, -1000, 40053, 1357, 35172, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 575,
	1042, 1042, 849, 849, 849, 849, 2023, 3080, 181, 470,
	41492, 41492, 41492, 41492, 41492, 41492, 41492, 41492, 1125, 341,
	341, 1125, 1125, 1125, 1125, 1125, 41492, 41492, 41492, 41359,
	313, 4577, 15101, 15101, 743, 1101, 390, 4577, 15101, 4577,
	4577, 4577, 4577, -1000, 1243, -1000, -1000, -1000, -1000, 1525,
	387, 15787, 15787, -1000, -1000, -1000, 7545, 16130, -1000, -1000,
	-1000, -1000, 384, 15101, -1000, 39502, -226, 257, -154, -1000,
	15101, 496, -184, -1000, 855, -1000, 15101, -1000, -39, 15101,
	15101, 15101, 253, -1000, 250, -1000, 737, -1000, 733, 730,
	729, -1000, 383, 1102, 382, 381, 15101, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 40986, 37810, 247, -1000, 1522,
	-154, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, -1000,
	244, -1000, 40865, -154, 241, 3775, -1000, 15787, 15787, 15787,
	7545, 378, 240, -1000, 39896, -1000, 40827, 10633, 10633, 10633,
	239, 40706, 15101, -154, 4632, 4440, 4184, -80, -87, -1000,
	-88, -1000, 2021, -89, 237, 571, 563, 236, -1000, -1000,
	377, -90, 611, 10290, 18531, 6171, -1000, 611, 9604, -1000,
	19216, 19216, 2012, 1362, 19216, -1000, -1000, -1000, -1000, 25894,
	407, 559, 25894, -1000, 2019, 1396, 230, -1000, -1000, -1000,
	35172, 373, -1000, 559, 229, 995, 35172, 35172, 35172, -1000,
	-1000, 1273, 36159, 1270, 41832, 35172, -1000, 361, 359, 1356,
	1349, 35172, 35172, 35830, 35501, 35172, 986, 42, -1000, 357,
	35172, 994, 35172, 42, -1000, 356, 35172, 954, -1000, 1448,
	1143, -1000, 854, 1514, 35172, 227, -98, -55, 41832, -1000,
	-1000, -1000, -1000, -1000, 35172, 467, 35172, 42, 35172, 2044,
	42, 35172, 1702, 1746, 529, 35172, 1399, 15101, 1054, -1000,
	18188, 625, 35172, 926, 69, -1000, -1000, -1000, 550, 35172,
	-1000, -1000, 112, 112, -1000, 110, 1205, -57, -1000, 15101,
	-1000, -1000, 35172, 22921, -109, -1000, -1000, 41832, -1000, 509,
	645, -1000, 2017, 604, 22921, 35172, 9261, 9261, -1000, 1388,
	-1000, -1000, 921, -1000, 1022, -1000, -1000, -1000, -1000, 9261,
	-1000, -63, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 913,
	-1000, 15101, 2015, -1000, -1000, -1000, 8918, -1000, -1000, -1000,
	35172, -193, 15101, 4577, 4577, 15101, 15787, 15787, -1000, 4577,
	-1000, -1000, -1000, -1000, -1000, 1509, 347, 15101, 41832, 3655,
	3299, -115, -1000, 15101, -58, -1000, 15101, -1000, 39343, -1000,
	-1000, 507, 1735, -1000, 15101, 40454, 226, 9947, -1000, 40332,
	-56, -56, -1000, 2042, 1305, 1194, 981, 885, 2009, -1000,
	20241, 612, 1124, 39091, 41740, 41832, -1000, 15101, -1000, -1000,
	1498, 15101, -1000, 41740, 41832, 15787, 15787, 15787, 15787, 15787,
	15787, 15787, 15787, 15787, 15787, 15787, 15787, 15787, 15787, 15787,
	15787, 15787, 15787, 15787, 1374, 15787, 1984, 1984, 1984, -60,
	15101, -1000, 1595, 1498, 15101, 15101, 41832, 225, 222, 221,
	-1000, 15101, -154, 15101, 15101, 15101, -1000, -1000, -1000, 219,
	-1000, 2005, -1000, -1000, -1000, -1000, 352, -1000, 1467, -1000,
	-110, -1000, 1390, -1000, 1467, -1000, -1000, 2012, -1000, 345,
	15101, 19216, -1000, 494, -1000, -117, -1000, 25894, -1000, 493,
	-218, -1000, 546, -1000, 559, 344, 35172, 25894, -1000, -1000,
	-1000, 725, 714, 1688, -1000, 1261, -1000, 637, -1000, 957,
	15101, 16816, 340, 339, 1158, -1000, 1685, 1205, 1675, 1205,
	-1000, -61, 1011, -1000, 15101, -1000, 712, -1000, -1000, 15101,
	-1000, 710, 604, 1494, 826, -1000, 842, -1000, 1439, -1000,
	23908, 338, 35172, 330, -1000, 327, -1000, -1000, 326, 35172,
	1335, 529, 23250, -1000, 605, 926, -1000, 41238, -1000, 926,
	8575, 1856, -118, -1000, -1000, -1000, 611, 19899, 19216, 9604,
	-120, -1000, -1000, -1000, -1000, 41238, -63, 1804, 1804, -1000,
	2000, -1000, 489, 218, -1000, 26552, -1000, -63, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35172, 1130, 38970, -1000, 1864,
	6171, 1931, 4577, 2593, 457, 15101, 41832, 41397, -123, 15101,
	15101, -1000, 217, 15101, 488, 41238, -1000, -1000, -1000, 41238,
	15101, 2041, 15101, 213, 212, 211, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 208, -1000, -1000, 37475, 15101, 207,
	-1000, 205, 201, 41238, 1595, 41238, -1000, -1000, 831, 831,
	859, 859, 859, 859, 1984, 439, 562, 374, 1141, 1141,
	1141, 2234, 574, 574, 1141, 1141, 1141, 1491, 1339, 325,
	4216, 15101, 200, -1000, -1000, 41238, 41238, 190, -1000, -1000,
	-1000, -154, 3463, 38932, 38811, -1000, 188, 187, 1460, 1902,
	-1000, 19216, 1460, -1000, 35172, 41238, -1000, -209, -1000, 1996,
	-1000, -1000, 1396, -1000, 5480, 25894, 35172, -125, -1000, 35172,
	35172, 35172, 1667, -1000, 2738, -1000, 38559, -128, -1000, 283,
	1883, 15101, -1000, -1000, 324, 16816, 35172, -1000, 1361, 1425,
	665, 35172, -1000, 35172, -1000, 35172, 35172, 35172, -130, 35172,
	-131, 35172, -1000, 22921, 734, -1000, -1000, 1442, -1000, 16816,
	323, 35172, 23908, 1933, 16816, 1170, 1341, 529, 23250, -1000,
	810, -1000, -1000, -67, -1000, 358, 42, 926, -1000, -74,
	-1000, 537, 1784, -1000, 1783, 458, -1000, -1000, -76, 321,
	-1000, 536, 533, -1000, -1000, -1000, -1000, 1864, 15101, 15101,
	41397, -138, -1000, 4577, 4577, -1000, 38438, -1000, 41238, -1000,
	40332, -1000, -1000, -1000, -1000, 1091, -1000, 38400, -1000, -1000,
	-1000, -1000, 15787, 1477, 320, 41832, 38279, -1000, -1000, 15101,
	-1000, -1000, -1000, -1000, 607, 15101, 15101, 1390, 607, -139,
	559, -1000, -1000, -1000, 1994, -1000, -140, -1000, -1000, -1000,
	-1000, 35172, -1000, 35172, -1000, 6171, 35172, 1482, 1242, -1000,
	-1000, 1343, 319, 15787, 35172, -1000, 1056, 16816, 1864, 111,
	6171, 1864, 38002, 6514, -141, -147, 1239, -1000, 1237, 15101,
	-1000, 41832, 1205, 1205, -1000, 708, 705, 689, -1000, 681,
	-1000, -101, 20925, 1094, -148, 16816, -153, 186, 42, -158,
	35172, -1000, 529, 23250, -1000, 1746, 1751, 35172, 1821, -1000,
	-1000, 318, 317, 315, -1000, 26223, 26223, 22921, 22921, -1000,
	4577, 4577, -1000, -1000, 184, 1124, 1900, -1000, 4661, 15787,
	41832, -159, -1000, 37969, -1000, 35172, 41238, -154, -1000, -1000,
	25894, 314, -1000, -1000, 1336, -1000, -1000, 35172, 1259, -1000,
	-1000, 15101, 4216, 312, 1439, 310, -1000, -1000, -1000, -1000,
	-1000, -1000, 1883, -39, -1000, 980, -1000, -1000, 41238, 1879,
	-1000, -1000, 35172, 35172, 291, 290, -1000, 287, 111, 35172,
	1056, -161, -1000, 1439, -1000, 1056, 286, 23250, -1000, 1335,
	784, -164, 35172, -1000, -1000, 6857, 22921, 22921, -1000, -166,
	-1000, -1000, -1000, 971, 15101, 4661, -167, -1000, -1000, -116,
	-1000, 1930, -1000, -1000, -1000, -1000, 1645, 37843, 1208, 35172,
	-1000, 35172, 1864, 179, 35172, 640, 6171, -1000, -1000, 15101,
	15101, 15101, 284, 1439, 1056, -1000, 1439, 16816, -1000, 1341,
	873, -1000, 611, -1000, -175, -181, -1000, 178, 15444, 15444,
	-154, -1000, 35172, 281, 1630, -1000, 1133, 1013, 168, -189,
	-1000, -1000, 277, -1000, 15101, -1000, -195, -197, -56, 35172,
	-1000, 1439, -1000, -198, -1000, 19899, -1000, 604, 604, -1000,
	-1000, -1000, 16473, 1197, 898, 39774, -1000, -1000, -1000, 35172,
	-1000, 1169, 1164, 900, -1000, -1000, -1000, -1000, -1000, 1208,
	41238, -1000, -1000, 167, -203, -1000, 1056, -172, -1000, -1000,
	1964, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1768, -1000,
	650, 1181, 1181, 1133, 2041, 1204, 1439, -1000, 14758, -1000,
	1973, -1000, -1000, 1325, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2429, 2425, 1666, 1915, 2419, 2417, 2416, 2414, 2413,
	2412, 2404, 2402, 2401, 2400, 2399, 2398, 2396, 2393, 2384,
	1908, 2383, 1893, 2381, 2380, 2378, 2375, 1891, 2374, 2373,
	2372, 2371, 2370, 2365, 1889, 2364, 1883, 2360, 2352, 2349,
	2348, 2346, 1881, 2345, 71, 105, 1834, 2342, 2339, 1823,
	1791, 1778, 2336, 1769, 2335, 2333, 1761, 1739, 2332, 50,
	2331, 2330, 2329, 1737, 1693, 2327, 2325, 2323, 138, 2316,
	1632, 2315, 2314, 2304, 2301, 2295, 2294, 2293, 2292, 2290,
	2284, 2283, 2280, 2279, 2276, 2273, 2272, 2269, 2266, 149,
	2265, 2264, 1617, 1608, 2262, 2261, 38, 30, 9, 54,
	21, 144, 2860, 132, 2259, 2257, 2256, 2253, 2251, 2250,
	16, 95, 91, 2249, 225, 2248, 2247, 46, 34, 28,
	20, 2246, 89, 2240, 2239, 1636, 22, 2238, 2237, 131,
	2236, 39, 29, 180, 145, 141, 107, 113, 2234, 2233,
	2232, 53, 112, 1, 2230, 2228, 11, 82, 13, 2220,
	41, 19, 2219, 2218, 123, 2217, 59, 88, 1561, 94,
	120, 147, 85, 2216, 68, 10, 63, 2215, 2214, 155,
	42, 2213, 31, 80, 136, 2212, 47, 151, 121, 76,
	122, 126, 2209, 2208, 2207, 119, 2205, 111, 75, 2204,
	2203, 69, 2200, 102, 133, 2198, 2196, 2193, 86, 2192,
	116, 2190, 2189, 148, 137, 108, 5, 48, 64, 14,
	1533, 1521, 125, 83, 56, 55, 2188, 2420, 1272, 1236,
	36, 97, 79, 57, 101, 62, 87, 130, 27, 2185,
	2183, 129, 2182, 2179, 2178, 2177, 2175, 99, 2166, 2162,
	23, 2161, 74, 58, 49, 84, 43, 153, 118, 106,
	143, 100, 2159, 77, 117, 2158, 60, 2156, 2154, 1030,
	110, 2153, 2152, 2150, 912, 868, 416, 33, 2149, 2148,
	183, 170, 2146, 2136, 78, 2119, 109, 103, 98, 139,
	150, 96, 2115, 115, 24, 2109, 32, 18, 0, 547,
	426, 2108, 114, 72, 2105, 2103, 2101, 2100, 26, 3,
	8, 7, 4, 6, 37, 25, 2099, 2097, 124, 92,
	65, 2096, 146, 2095, 2093, 2089, 45, 2088, 15, 2084,
	12, 2081, 2079, 17, 2, 2078, 2076, 134, 2074, 90,
	2073, 1885, 2066, 142, 2065, 2064, 1719, 2030, 35, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 286, 286, 287, 287, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 163, 163, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 255, 255, 254, 43, 43, 229, 229, 46,
	46, 186, 186, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 327, 327, 327, 331, 331, 332, 332, 333,
	333, 333, 333, 333, 333, 333, 329, 329, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 280, 278,
	278, 279, 279, 139, 139, 139, 139, 139, 140, 140,
	140, 285, 285, 285, 285, 285, 285, 284, 284, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	328, 328, 330, 330, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 208, 208, 208, 208, 143, 143,
	115, 115, 115, 207, 296, 296, 297, 297, 297, 297,
	297, 297, 298, 298, 298, 298, 298, 298, 298, 294,
	294, 295, 292, 292, 293, 293, 293, 293, 334, 334,
	206, 206, 146, 146, 301, 301, 301, 301, 299, 299,
	299, 299, 299, 302, 300, 303, 303, 303, 303, 303,
	241, 241, 241, 91, 91, 32, 32, 121, 121, 33,
	33, 29, 29, 29, 190, 190, 150, 150, 246, 246,
	246, 132, 132, 110, 110, 110, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 191, 191, 192,
	192, 52, 52, 56, 56, 61, 61, 90, 90, 90,
	90, 90, 90, 21, 21, 21, 21, 25, 25, 25,
	25, 60, 60, 336, 336, 128, 128, 128, 128, 129,
	129, 203, 203, 204, 204, 337, 337, 205, 205, 205,
	123, 122, 124, 124, 28, 28, 28, 117, 117, 118,
	118, 119, 119, 120, 120, 338, 338, 49, 49, 49,
	93, 93, 135, 135, 200, 200, 200, 202, 202, 201,
	201, 201, 176, 176, 176, 92, 92, 155, 155, 165,
	165, 166, 166, 252, 167, 167, 59, 59, 102, 102,
	100, 100, 100, 100, 100, 100, 101, 101, 101, 103,
	103, 103, 103, 103, 103, 103, 106, 106, 106, 107,
	107, 107, 105, 105, 309, 309, 309, 312, 312, 308,
	310, 310, 311, 311, 335, 335, 177, 177, 177, 145,
	144, 144, 148, 148, 147, 149, 149, 245, 245, 245,
	174, 174, 174, 174, 195, 195, 193, 193, 194, 194,
	196, 196, 197, 197, 197, 198, 198, 199, 199, 173,
	173, 225, 225, 104, 104, 104, 154, 154, 154, 156,
	156, 215, 215, 215, 216, 216, 214, 214, 214, 214,
	247, 247, 247, 247, 247, 247, 247, 247, 325, 325,
	325, 326, 326, 244, 244, 248, 248, 248, 248, 248,
	248, 242, 242, 242, 242, 243, 243, 253, 253, 180,
	180, 180, 180, 178, 178, 179, 179, 249, 249, 249,
	249, 175, 175, 250, 250, 250, 209, 209, 256, 256,
	256, 274, 274, 153, 153, 153, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 258, 258, 258,
	258, 260, 260, 260, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 273, 273, 273, 273, 273, 261, 261, 268,
	268, 269, 269, 270, 271, 262, 262, 263, 263, 264,
	265, 272, 272, 272, 272, 276, 276, 266, 266, 266,
	266, 266, 267, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 188, 188, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 219, 219, 219, 219, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 304, 304, 304, 304,
	304, 304, 304, 304, 306, 306, 307, 307, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 313, 313,
	314, 314, 316, 316, 317, 317, 318, 319, 319, 319,
	320, 321, 321, 315, 315, 322, 322, 322, 323, 323,
	324, 324, 324, 324, 324, 231, 231, 232, 233, 239,
	239, 239, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 130, 130,
	130, 130, 130, 162, 162, 161, 161, 228, 228, 226,
	226, 230, 230, 181, 181, 275, 275, 275, 275, 275,
	275, 275, 182, 182, 182, 189, 183, 183, 184, 184,
	184, 184, 184, 222, 223, 185, 185, 185, 224, 224,
	234, 238, 238, 237, 236, 236, 235, 235, 212, 212,
	213, 213, 211, 210, 170, 170, 169, 169, 168, 168,
	339, 339, 240, 240, 171, 171, 172, 164, 164, 251,
	251, 251, 251, 157, 157, 137, 137, 158, 158, 133,
	133, 136, 136, 134, 134, 134, 134, 151, 151, 152,
	152, 131, 131, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 277, 277, 277, 227, 125, 125,
	125, 126, 126, 127, 127, 282, 282, 282, 283, 283,
	283, 283, 281, 281, 281, 281, 281, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 2, 3, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 1,
	3, 3, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 5, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 372, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 68, -28, -29, -30, -31, 70, -32,
	-33, 91, -311, 95, -37, -38, -39, -41, -40, 99,
	106, 108, 130, 141, 224, 230, 251, 253, 255, 262,
	-100, -102, 249, -54, -55, -63, -64, -65, -66, -94,
	273, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 276,
	-21, -25, -60, 314, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -309, -103, -101, 369, 250,
	323, 35, 285, 61, 102, 257, 339, 346, -106, -104,
	-105, -107, 266, 331, 295, 373, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 2,
	295, 334, 84, 149, -327, 2, -158, 295, 84, -134,
	-125, 362, 4, -288, -290, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 68, 69, 72, 73, 74, 82, 83, 85, 87,
	91, 93, 95, 98, 99, 101, 106, 107, 108, 118,
	119, 124, 126, 131, 137, 138, 141, 142, 150, 153,
	155, 148, 165, 166, 167, 171, 172, 173, 176, 175,
	180, 183, 186, 188, 189, 190, 193, 191, 195, 196,
	198, 197, 203, 205, 206, 208, 211, 214, 217, 220,
	221, 222, 223, 224, 226, 228, 230, 232, 233, 234,
	235, 236, 238, 239, 241, 242, 243, 244, 245, 249,
	247, 248, 250, 251, 252, 253, 255, 257, 258, 260,
	274, 275, 286, 262, 263, 264, 265, 269, 267, 270,
	271, 273, 276, 278, 281, 284, 285, 287, 290, 291,
	288, 283, 294, 296, 297, 298, 299, 300, 301, 302,
	309, 310, 314, 315, 316, 317, 320, 321, 322, 323,
	325, 328, 329, 330, 335, 340, 341, 342, 343, 344,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 86, 88, 89, 105, 109, 110, 120,
	121, 122, 132, 134, 143, 144, 147, 154, 156, 157,
	158, 159, 160, 162, 169, 170, 178, 192, 202, 204,
	215, 219, 227, 229, 237, 259, 268, 279, 280, 289,
	292, 304, 305, 306, 311, 312, 327, 331, 332, 372,
	372, 2, 166, 234, -133, -125, 84, 372, 372, 372,
	372, 295, 2, 324, 334, -190, 84, 319, 372, 372,
	-125, 230, 22, 2, 93, 153, 322, 321, 22, 226,
	267, 297, 299, 2, 372, 372, 372, 372, 372, 2,
	334, 295, 149, 84, 324, -125, 2, -45, 2, 369,
	-44, -4, -27, -36, -46, -42, -20, -22, -34, -50,
	-49, -51, -53, -57, -56, -59, -63, -64, -70, -92,
	-93, 273, -331, 2, 22, -332, -333, 70, 99, 130,
	266, 153, 93, 321, 295, 2, 166, 2, -125, 2,
	-327, 2, 166, 2, -331, 2, -125, 2, -129, 2,
	262, -125, 372, 372, 372, 372, 372, 183, 55, 259,
	270, -68, 310, -67, 304, -280, -69, 2, -159, 193,
	-125, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 2, -89,
	270, 34, 55, 22, 60, 85, 131, 149, 150, 172,
	65, 66, 233, 183, 167, 309, 173, 271, 296, 310,
	70, 325, 300, 107, 4, 84, 193, 272, 304, 372,
	372, 372, -335, 2, 295, -101, -103, -102, -147, -148,
	318, 161, 104, 213, -100, -102, 2, -309, -89, 270,
	2, 55, 22, -278, 2, -240, 209, -217, 90, -219,
	360, 361, 355, 199, 345, -231, -221, -234, 105, 259,
	369, -133, -220, 375, 9, -306, -102, 29, -232, -233,
	49, -125, 7, 8, 5, 6, -131, -258, -227, -267,
	313, 111, 201, -304, -305, 4, -288, -282, -259, -269,
	-263, -266, 162, 58, 76, 77, 80, 78, 81, 272,
	324, 50, 28, 109, 110, 219, 227, 292, 311, 312,
	143, 202, 144, 56, 132, 178, 98, 37, 39, 41,
	42, 51, 52, 86, 88, 89, 120, 121, 122, 154,
	156, 157, 158, 159, 160, 204, 237, 279, 289, 305,
	306, 332, -289, -270, -271, -264, -265, 71, 112, 129,
	152, 145, 164, 168, 179, 181, 194, 216, 218, 256,
	277, -272, -336, 2, 310, 310, 2, -336, 2, -336,
	2, -128, 2, 310, 307, -312, 238, -308, -125, -312,
	372, 372, 374, 372, -144, -145, 2, 22, 96, -172,
	2, 369, -247, 2, 367, -249, -133, -102, -248, 369,
	210, -3, 2, -249, 143, -133, 2, -249, 143, -133,
	2, -125, 2, -136, 143, -133, 307, 374, -158, -151,
	-125, -211, -210, 371, -217, 2, -217, 2, 128, 369,
	-169, -170, -210, -211, 2, -159, 143, -125, 2, -159,
	2, 149, -125, 143, 2, -125, 22, 128, 2, 163,
	2, 163, 2, -250, 2, -249, -160, 143, 2, -159,
	-160, 143, 2, -137, 143, 2, -136, -125, 143, 2,
	-151, 143, 2, -186, 369, -255, 2, -254, -283, 4,
	-288, -290, -289, 331, 58, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 270, 209, 374,
	-159, -217, -229, 369, 128, -217, 209, -125, 2, 274,
	2, 369, -68, 53, 310, -204, 2, -205, -122, -123,
	-124, 165, 232, 236, 344, 307, 350, 128, -278, -163,
	371, -89, 2, -286, 2, -284, 9, -283, 5, 274,
	2, 233, 271, 55, 128, 2, 2, -328, 2, 209,
	128, 2, 128, 2, 128, 2, 128, 2, 128, 2,
	2, 233, 271, 2, 125, 2, 309, 2, 2, 128,
	2, 165, 232, 286, 2, 295, 334, 2, 128, 128,
	344, 2, -175, -249, -147, -148, -174, -193, -194, 182,
	113, 207, -177, 22, 96, -177, -177, 44, 370, 370,
	-89, 274, 2, 10, 11, 57, 33, 360, 361, 362,
	363, 123, 364, 365, 358, 359, 357, 348, 349, 352,
	353, 354, 67, 351, 350, 63, 187, 261, 114, 115,
	116, 117, 246, 13, 14, 15, 26, 212, 181, 345,
	145, 277, 355, 16, 17, 18, 164, 36, 146, -130,
	-138, -217, -217, -217, -217, -217, 218, -168, -212, 367,
	-102, 369, 369, -102, -217, -161, 369, 7, -102, -226,
	367, -235, -217, -169, 369, 5, 369, 5, -313, 340,
	125, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	229, -276, 335, -276, -276, -260, 369, -260, -261, 369,
	-260, 341, 346, 369, -203, -204, -203, 307, -129, 374,
	-312, -152, 369, -172, -164, -251, -217, 362, -164, -171,
	-240, 71, -180, 168, 194, 129, 179, 256, 152, 7,
	-45, -214, 375, 369, 362, -244, 346, -102, -248, 369,
	-247, -133, 369, -112, 247, -111, 21, 23, 99, 329,
	105, 283, 301, 263, 247, 105, 247, 283, 301, 263,
	247, 105, 375, -286, -134, 374, -281, 362, 4, -288,
	-290, -289, -291, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 65, 70,
	75, 76, 78, 77, 79, 80, 81, 90, 92, 94,
	96, 97, 100, 102, 104, 111, 113, 125, 127, 128,
	130, 133, 135, 146, 149, 151, 161, 163, 174, 177,
	182, 184, 185, 199, 200, 201, 207, 209, 210, 212,
	213, 225, 231, 240, 254, 266, 272, 282, 293, 295,
	303, 307, 308, 313, 318, 319, 324, 326, 333, 334,
	336, 337, 338, 339, 287, 370, -157, -133, -170, 369,
	-146, 199, -121, -310, 339, -146, 369, -126, 143, 2,
	-125, -310, 199, -250, -135, -133, -135, 273, -125, 30,
	-114, 374, 48, 252, 105, -114, 105, -114, 374, 105,
	-114, 105, 105, -161, -217, 370, 374, -327, -333, 70,
	369, 30, -228, -256, -257, -259, -268, -262, -266, -267,
	40, 46, 45, 170, 169, 302, 192, 268, 280, 327,
	147, 38, 208, 155, 4, 154, 156, 157, 158, 159,
	160, 279, 37, 237, 121, 122, 120, 98, 89, 88,
	204, 42, 41, -270, -271, -264, -265, 86, 305, 306,
	162, 39, 52, 51, 332, 289, -287, -286, -327, -280,
	-161, 30, -204, 2, -337, 374, 180, -140, 186, 198,
	137, 210, 342, -285, 5, 4, -227, -241, 90, 183,
	-267, 8, 361, -277, 7, 360, -279, -278, -279, 74,
	371, -281, -159, 22, 275, 2, -280, -330, 125, -327,
	-280, -280, -280, -280, -280, 270, -45, 125, -125, 180,
	-280, 2, -280, 2, 295, 149, 295, -114, 374, -174,
	-194, -193, -196, -217, 22, -199, 119, 195, -217, -219,
	-101, -101, -101, -149, -245, -217, 231, 149, -280, -274,
	-256, -273, 242, 243, 241, 245, 244, -256, -281, 304,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, 181, 145, 277, 36, 146, -217, 307, -217,
	-217, -217, -217, 191, 199, 201, 313, 111, 320, 96,
	205, -339, 293, 32, -224, -102, 369, -239, 27, 282,
	22, -231, 259, 369, -212, -217, -213, -162, -161, 370,
	374, -162, -230, -226, -238, -237, 336, 370, -161, 333,
	22, 96, 362, 2, 7, -187, 343, 190, 87, 138,
	189, -188, 265, -314, 118, 133, 369, 370, 2, 370,
	2, 370, 2, 370, 2, -217, -217, -181, 2, -275,
	-161, 4, 343, 190, 87, 138, 189, 265, -181, 2,
	-182, 2, -217, -161, -183, -218, -219, 360, 361, 355,
	369, 259, -184, 2, -217, -162, -217, 43, 177, 308,
	-185, -217, 128, -161, -217, -217, -217, -161, -161, 2,
	-161, 2, 369, 7, 7, 304, 304, 7, -129, -308,
	30, -151, -154, 374, 128, 30, 4, -154, 374, 370,
	168, 168, -247, -180, 168, -178, 216, -178, -178, -325,
	369, 368, -244, -281, 367, 376, -162, 2, -243, -242,
	30, -125, 214, 370, -133, 374, 307, -191, 65, 59,
	-207, 143, 59, -292, -125, 65, -293, 54, 319, 231,
	127, -191, 65, -191, 65, 65, -249, 33, -59, 128,
	307, -249, 307, 33, -59, 128, 307, -136, -281, -253,
	347, -125, 128, 370, 374, -141, -151, -142, -125, -208,
	-207, -294, -295, -292, 149, 319, 112, 30, 105, 223,
	30, 209, 199, -117, 298, 105, -209, 337, -200, -59,
	369, 90, 30, -200, -165, -166, -252, -167, -133, 369,
	-125, -159, -160, -160, -136, -137, -125, -151, 370, 374,
	-45, -254, 307, 326, -142, -44, 370, 374, -153, 29,
	367, -187, 369, -253, 374, 128, 350, 307, 370, 310,
	-205, -139, 236, 281, 248, 269, 8, 7, 7, 374,
	-281, -329, -125, 270, -45, -133, -136, -133, -249, -197,
	-277, 369, 361, -198, 259, 260, 374, -110, 31, 94,
	171, -133, 344, -217, -217, 307, -339, 293, -224, -217,
	191, 201, 313, 111, 320, 96, 205, 128, 369, -218,
	-218, -161, -221, 369, -161, 368, 378, 370, -217, 368,
	368, 374, -236, -237, 100, -217, -148, 374, -147, -217,
	-161, -161, 370, 370, 307, 307, 307, 307, 369, -319,
	217, 369, 369, -217, 30, 374, 370, 128, 370, 370,
	-189, 225, 370, 10, 11, 360, 361, 362, 363, 123,
	364, 365, 358, 359, 357, 348, 349, 350, 63, 187,
	261, 13, 14, 15, 164, 146, -218, -218, -218, -161,
	369, 370, -222, -223, 128, 125, 30, -185, -185, -185,
	370, 128, -161, 374, 374, 374, 370, 370, 370, 7,
	370, 374, 370, 344, 344, 370, 369, 370, -209, -251,
	-156, 2, -247, -281, -209, -240, -247, -247, -179, 326,
	209, 168, -247, -242, 370, -326, 7, -244, -243, 7,
	-216, -215, 126, 197, 370, -125, 369, -244, 370, -111,
	-133, -125, -125, 199, -207, 143, -116, 199, -256, -125,
	369, 369, 171, 171, -125, -125, 143, -125, 143, -125,
	-125, -112, 247, -59, 369, -133, 247, -125, -59, 369,
	-125, 247, -95, 142, 205, 287, 128, -133, 370, 370,
	374, -126, 149, -126, -59, -159, 5, -59, -133, 105,
	-118, 101, -338, 350, -125, -195, -193, -217, -176, -202,
	254, 209, -157, 331, -125, -176, -155, 374, 128, 350,
	-157, -114, -114, -114, -114, -217, -329, -286, 370, -256,
	367, 368, 7, 7, -98, 339, -286, -329, -278, -278,
	-122, 317, 62, 236, -278, 374, -198, -217, -245, -133,
	375, -217, -217, -218, -218, 128, 369, -217, -228, 26,
	26, 370, -162, 374, -213, -217, 370, -226, 102, -217,
	303, 370, 333, -148, -148, -148, 5, 190, 138, 189,
	-188, 189, -188, -188, 7, -320, -125, 369, 337, -147,
	370, -274, -256, -217, -222, -217, -274, -256, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, 96, 199, 205,
	-218, 374, -162, -223, -222, -217, -217, -256, 370, 370,
	370, -161, -217, -217, -217, 370, 7, -44, -173, 133,
	-253, 374, -173, -179, 369, -217, -247, 368, 370, 374,
	-243, 368, 374, 377, 350, -244, 369, -151, -242, 307,
	307, 105, 199, 328, -296, -293, -217, -150, -246, -125,
	-307, 369, -304, -305, -131, 369, 369, -109, 99, 273,
	-192, 105, -114, 105, -114, 307, -191, 65, -161, 307,
	-161, 307, -98, 128, 294, 287, -143, 148, -208, 369,
	-126, 369, 369, -146, 369, -125, -119, 176, -338, -284,
	-310, -176, -176, -164, 200, 64, 370, -209, -166, -156,
	-240, 370, -99, 72, -99, 7, 368, 370, -97, 211,
	-96, -125, 5, -125, 210, 370, -110, -281, 26, 26,
	-217, -228, 370, -217, -217, 370, -217, 368, -217, 5,
	-217, 370, 370, 370, 370, -321, -125, -217, 370, 370,
	370, -223, 128, 96, 205, 369, -217, 370, 370, 374,
	370, 370, 370, 370, -225, 135, 44, -247, -225, -151,
	-214, 7, -215, -281, 367, -243, -151, 370, -125, -125,
	-207, 105, -297, 65, -298, 57, 112, 70, 199, 201,
	319, 231, 54, 90, 240, 370, 370, 374, -132, -169,
	57, -132, -217, 369, -150, -151, 199, 90, 199, 90,
	83, 315, -125, -125, -133, -125, -125, 370, -133, 370,
	-125, -287, 304, 146, -150, 369, -151, -141, 30, -150,
	209, -120, 175, -338, -284, -117, -201, 369, 209, -59,
	-176, 350, 83, 83, 368, 374, 369, 350, 350, -110,
	-217, -217, 370, 370, -148, -315, 222, 370, -218, 128,
	369, -228, 370, -217, -316, 338, -217, -161, -316, 370,
	-244, 7, 370, -207, -125, -281, -125, 112, 143, 201,
	171, 369, -218, -133, -206, -334, 69, 291, -246, -110,
	-281, -110, 370, -161, 370, 370, 201, 201, -217, -256,
	-114, -114, 307, 307, 307, 307, -220, -131, -125, 220,
	370, -150, 370, 370, -59, 370, -133, -338, -284, -118,
	97, -151, 65, -172, -102, 369, 369, 369, -96, -97,
	-286, -286, 370, -148, 44, -218, -228, 370, 370, -317,
	-318, -125, -243, 368, -298, -126, 199, -217, -127, 369,
	-143, 369, -132, -148, 240, -113, 57, -125, -125, 369,
	369, 369, -133, -206, 370, -143, -206, 369, -284, -119,
	321, 200, 370, -125, -287, -287, 370, -322, 235, 260,
	-161, 370, 374, 30, 105, 370, -301, 188, -125, -151,
	-110, 370, -133, -108, 326, -281, -161, -161, -161, 369,
	-143, -206, -143, -150, -120, 273, -209, 370, 370, 370,
	-323, -324, 36, 316, 74, -217, -323, -318, -320, 112,
	-299, -302, -300, 209, 129, 221, 278, 370, 370, -146,
	-217, 370, 370, -148, -151, -143, 370, -165, -98, -98,
	-324, 228, 124, 259, 228, 124, -125, -300, 209, -302,
	209, 321, 93, -301, 370, 370, -206, -209, 26, -303,
	196, 252, 48, 273, -303, -299, -115, 48, 252, -143,
	-324, 20, 201, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	636, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	557, 559, 561, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 672, -2, 683, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 649, 651,
	653, 655, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1250, 1177,
	1183, 1184, 1208, 1209, 1210, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 143,
	145, 146, 0, 0, 0, 1179, 1250, 152, 154, 156,
	158, 0, 164, 0, 0, 0, 0, 524, 161, 163,
	253, 1309, 255, 257, 0, 0, 0, 0, 167, 168,
	169, 170, 171, 172, 174, 176, 178, 180, 182, 183,
	0, 0, 0, 0, 0, 252, 250, 205, 206, 0,
	235, 236, 237, 238, 239, 241, 209, 211, 212, 214,
	216, 218, 220, 221, 223, 225, 226, 228, 230, 231,
	233, 0, 0, 259, 265, 266, 267, 269, 270, 271,
	272, 273, 274, 275, 0, 123, 0, 445, 248, 246,
	0, 119, 0, 554, 0, 261, 555, 556, 551, 552,
	1336, 580, 279, 281, 290, 292, 294, -2, -2, 1428,
	-2, 303, -2, 311, 1434, 0, 314, 315, 318, -2,
	201, 340, 342, 344, 346, 348, 350, 352, 354, 356,
	358, 360, 362, 364, 366, 369, 371, 373, 374, 375,
	0, 0, 0, 379, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 378, 380, 381, 382, 0, 558,
	560, 562, 0, 514, 674, -2, 647, 648, -2, 0,
	678, 678, 678, 0, 0, 648, 646, 0, 282, 0,
	284, 0, 379, 287, 288, 319, 320, 1162, 1163, 879,
	0, 0, 0, 0, 0, 0, 981, 983, 1399, 1428,
	0, 985, 986, 0, 988, 990, 991, 0, 994, 995,
	1147, 1179, 1193, 1194, 1195, 1196, 0, 0, 1199, 0,
	1201, 1202, 1203, 1049, 1005, -2, -2, 1191, 807, 808,
	809, 810, -2, 1442, 1009, 1012, 1015, 1018, 1019, 1022,
	1023, 0, 1383, 1400, 1401, 1424, 1425, 1433, 1437, 1438,
	1407, 1421, 1408, 1395, 1405, 1419, 1256, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1217, 841, 842, 847, 848, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 850, 582, 564, 573, 582, 566, 567, 568, 569,
	570, 571, 572, 575, 0, 664, 1315, 667, 1190, 665,
	650, 652, 0, 654, 0, 0, 658, 680, 679, 713,
	714, 0, 662, 663, 673, 729, 767, 744, 735, 0,
	0, 2, 68, 0, 1407, 767, 70, 0, 1407, 767,
	72, 0, 77, 0, 1407, 1182, 0, 0, 263, 264,
	1187, 1185, 1186, 0, 147, 148, 149, 150, 0, 0,
	1180, 1156, 1154, 1155, 159, 493, 1407, -2, 516, 493,
	520, -2, 671, 1407, 596, 254, 256, 0, 166, 0,
	609, 0, 611, 0, 626, 773, 109, 1407, 186, 199,
	109, 1407, 189, 109, 1407, 192, 1175, 109, 1407, 195,
	196, 1407, 198, 249, 0, 0, -2, 242, 244, 1218,
	1219, 1220, 1221, -2, 1442, 240, 210, 213, 215, 217,
	219, 222, 224, 227, 229, 232, 234, -2, 0, 0,
	0, 444, 0, 0, 0, 553, 0, 579, 297, 0,
	300, 0, 302, 1394, -2, -2, 306, 583, 587, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 316, 202,
	0, 376, 377, 385, 386, 124, 125, 337, 338, 0,
	389, 410, 422, 0, 0, 393, 395, 443, 397, 0,
	0, 399, 0, 401, 0, 403, 0, 405, 0, 407,
	409, 411, 423, 413, 673, 415, 0, 417, 421, 0,
	426, 0, 428, 429, 430, 0, 0, 436, 0, 0,
	383, 384, 109, 771, -2, 0, 642, 692, 693, 0,
	0, 0, 0, 676, 677, 0, 0, 0, 638, 639,
	283, 0, 286, 0, 0, 0, 0, 1082, 1083, 1084,
	1085, 1086, 1087, 1090, 1091, 1088, 1089, 1092, 1093, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 1096, 1097, 0, 0, 1099, 0,
	1101, 0, 0, 0, 0, 0, 0, 1161, 0, 0,
	1098, 884, 885, 886, 918, 919, 0, 982, 1158, 1151,
	984, 0, 1104, -2, 1105, 0, 0, 987, 992, 993,
	1104, 0, 1146, -2, 0, 1198, 0, 876, 1051, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1127, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 844, 855, 852, 851, 828, 0, 827, 825, 0,
	829, 0, 0, 0, 563, -2, 565, 0, 577, 0,
	666, 0, 0, 715, 718, 1167, 1171, 1172, 718, 0,
	1164, 0, 0, 0, 0, 764, 764, 764, 762, 738,
	0, 744, 0, -2, 768, 756, 0, -2, 735, 0,
	0, 769, 0, 78, 548, 88, 0, 548, 548, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 758, 1178, 0, 1152, 1153, 1222, 1223,
	1224, 1225, 1226, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 139, 0, 0, 1173, 1157, 451,
	0, 0, 515, 0, 670, 0, 0, 0, 1407, 523,
	1211, 598, 0, 777, 0, 612, 0, 0, 774, 0,
	184, 0, 107, 108, 0, 187, 0, 190, 0, 0,
	193, 0, 0, 0, 1105, 673, 0, 0, 268, 0,
	0, 673, 0, 1107, 785, 786, 787, 788, 789, 876,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 838, 0, 813, 813,
	813, 830, 831, 839, 840, 845, 846, 857, 858, 860,
	862, 856, 856, 856, 853, 854, 758, 126, 0, 0,
	0, 0, -2, 308, 0, 585, 0, 590, 328, 329,
	330, 592, 593, 312, 331, 332, 333, 334, 335, 336,
	0, 510, 0, 512, 1204, 0, 309, 321, 310, 313,
	0, 203, 387, 388, 390, 391, 392, 396, 0, 440,
	398, 400, 402, 404, 406, 414, 418, 673, 424, 427,
	431, 432, 433, 434, 0, 0, 0, 513, 0, 645,
	690, 691, 696, 700, 701, 704, 707, 708, 698, 879,
	659, 660, 661, 684, 685, 535, 0, 0, 285, 880,
	781, 782, 832, 833, 834, 835, 836, 881, 882, 0,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	-2, -2, -2, -2, -2, -2, -2, -2, 905, 906,
	907, 908, 909, 910, 911, 912, -2, -2, -2, 916,
	917, -2, 1100, 1102, 0, 1161, 0, -2, 0, -2,
	-2, -2, -2, 930, 0, 932, 935, 937, 939, 0,
	0, 0, 0, 1160, 949, 1138, 0, 0, 1079, 1080,
	1081, 934, 0, 0, 1159, 1150, 0, 0, 1103, 989,
	0, 0, 0, 1111, 1145, 1141, 0, 996, 683, 0,
	0, 0, 0, 1003, 0, 1207, 863, 864, 865, 866,
	867, 868, 877, 1059, 0, 0, 0, 1010, 1011, 1013,
	1014, 1016, 1017, 1020, 1021, 0, 0, 0, 1027, 0,
	1114, -2, -2, -2, -2, -2, -2, -2, 0, 1029,
	0, 1031, 1105, 1124, 0, 0, 952, 0, 0, 0,
	0, 1428, 0, 1034, 1105, 1132, 0, 0, 0, 0,
	0, 1105, 0, 1137, 0, 0, 0, 0, 0, 1045,
	0, 1047, 0, 0, 0, 0, 0, 0, 576, 668,
	0, 0, 777, 0, 0, 0, 1170, 777, 0, 1166,
	0, 0, 0, 0, 0, 759, 763, 760, 761, 0,
	0, 744, 756, 726, 0, 0, 0, 733, 734, 755,
	0, 754, 743, -2, 0, 0, 0, 0, 0, 547,
	90, 1407, 0, 111, 0, 0, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 1181, 129,
	0, 1188, 0, 0, 0, 0, 0, 450, 1187, 452,
	454, 455, 456, 457, 1212, 0, 1212, 0, 0, 0,
	0, 0, 0, 600, 606, 0, 695, 0, 624, 614,
	0, 0, 0, 624, 628, 629, 631, 632, 0, 0,
	775, 200, 109, 109, 1176, 109, 109, 197, 251, 0,
	207, 243, 0, 0, 0, 245, 247, 0, 778, 780,
	0, 790, 0, 138, 0, 0, 0, 0, 301, 0,
	584, 591, 0, 325, 0, 327, 511, 1206, 1205, 0,
	204, 442, 276, 416, 419, 437, 438, 439, 772, 0,
	702, 0, 0, 699, 705, 706, 0, 687, 533, 534,
	0, 0, 0, -2, -2, 0, 0, 0, 950, -2,
	931, 933, 936, 938, 940, 0, 0, 0, 0, 0,
	0, 0, 951, 1104, 0, 1148, 1151, -2, 1106, 1109,
	1110, 0, 0, 1142, 0, 0, 0, 0, 682, 683,
	683, 683, 1002, 0, 0, 0, 0, 0, 0, 1004,
	0, 0, 0, 0, 0, 0, 1026, 0, 1028, 1030,
	0, 0, 1032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 956, 957, 0,
	1104, 1033, 1130, 1131, 0, 0, 0, 0, 0, 0,
	1039, 0, 1136, 0, 0, 0, 1043, 1044, 1046, 0,
	811, 0, 837, 859, 861, 849, 673, 1189, 710, 1168,
	758, 717, 719, 1169, 710, 1165, 746, 0, 748, 0,
	0, 0, 750, 0, 739, 0, 741, 756, 731, 0,
	0, 724, 0, 723, 744, 752, 0, 0, 770, 89,
	537, 0, 0, 0, 92, 1407, 100, 0, 465, 0,
	0, 0, 0, 0, 550, 101, 1407, 109, 1407, 109,
	102, 79, 548, 80, 0, 543, 0, 536, 81, 0,
	545, 0, 138, 0, 0, 140, 0, 1174, 459, 492,
	0, 0, 1212, 0, 448, 493, 517, 519, 0, 0,
	602, 606, 0, 605, 671, 624, 694, 776, 607, 624,
	0, 0, 0, 616, 613, 610, 777, 0, 0, 0,
	0, 185, 188, 191, 194, 1106, 258, 0, 0, 1108,
	0, 783, 0, 0, 118, 0, 127, 260, 298, 299,
	304, 323, 324, 326, 322, 0, 0, 0, 686, 535,
	0, 883, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1139, 0, 0, 0, 1150, -2, 1112, 1140, 1144,
	0, 997, 0, 0, 0, 0, 1200, 869, 870, 871,
	872, 873, 874, 875, 0, 1057, 1058, 1062, 0, 0,
	1008, 0, 0, 1113, 1123, 1125, 953, 954, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, -2, -2,
	-2, 971, 972, 973, -2, -2, -2, 0, 0, 0,
	1126, 0, 0, 1128, 1129, 1133, 1134, 0, 1036, 1037,
	1038, 1135, 0, 0, 0, 843, 0, 0, 712, 0,
	716, 0, 712, 747, 0, 766, 749, 729, 740, 0,
	737, 727, 0, 728, 0, 756, 0, 0, 736, 0,
	0, 0, 0, 110, 463, 482, 0, 0, 526, 532,
	532, 0, 1006, 1007, 0, 0, 0, 94, 0, 0,
	0, 0, 98, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 141, 446, 0, 453, 0,
	0, 0, 451, 0, 0, 0, 604, 606, 0, 597,
	598, 165, 608, 622, 623, 621, 0, 624, 630, 627,
	633, 0, 0, 120, 0, 0, 784, 791, 136, 1299,
	134, 131, 133, 277, 697, 703, 688, 535, 0, 0,
	-2, 0, 943, -2, -2, 1075, 1106, 1149, 1143, 1197,
	683, 998, 1000, 1001, 878, 1064, 1061, 0, 1048, 1024,
	1025, 1122, 0, 0, 0, 0, 1106, 1077, 1035, 0,
	1041, 1042, 812, 669, 1053, 0, 0, 720, 1053, 0,
	744, 742, 725, 721, 0, 732, 0, 753, 539, 541,
	91, 0, 464, 0, 467, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 484, 491, 0, 535, 1192,
	0, 535, 0, 0, 0, 0, 0, 106, 0, 0,
	549, 0, 109, 109, 538, 0, 0, 0, 544, 0,
	546, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 594, 606, 0, 599, 600, 0, 0, 0, 615,
	625, 0, 0, 0, 779, 0, 0, 0, 0, 689,
	-2, -2, 944, 1076, 0, 683, 0, 1050, -2, 0,
	0, 0, 1078, 0, 656, 0, 711, 709, 657, 765,
	756, 0, 751, 93, 0, 468, 469, 1212, 0, 472,
	475, 0, 477, 1214, 459, 0, 488, 489, 527, 528,
	531, 529, 532, 683, 486, 0, 95, 96, 105, 113,
	97, 103, 0, 0, 0, 0, 757, 0, 0, 0,
	491, 0, 481, 459, 449, 491, 0, 0, 601, 602,
	0, 0, 0, 634, 635, 0, 0, 0, 135, 0,
	130, 132, 999, 1067, 0, -2, 0, 979, 1040, 1052,
	1054, 0, 730, 722, 466, 470, 0, 0, 497, 0,
	485, 0, 535, 0, 0, 115, 0, 540, 542, 0,
	0, 0, 0, 459, 491, 447, 459, 0, 603, 604,
	0, 618, 777, 620, 0, 0, 137, 0, 0, 0,
	1063, 980, 0, 0, 0, 476, 502, 0, 0, 0,
	530, 997, 493, 99, 0, 112, 0, 0, 683, 0,
	479, 459, 521, 0, 595, 0, 619, 138, 138, 1060,
	1065, 1068, -2, 1367, 1247, 0, 1066, 1055, 1056, 0,
	478, 498, 499, 0, 494, 495, 496, 1213, 490, 497,
	114, 85, 87, 0, 0, 480, 491, 777, 121, 122,
	0, 1070, 1071, 1072, 1073, 1074, 471, 500, 0, 501,
	0, 0, 0, 502, 0, 462, 459, 617, 0, 503,
	0, 506, 507, 0, 504, 487, 458, 460, 461, 522,
	1069, 505, 508, 509,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 358, 3, 364, 359, 3,
	369, 370, 362, 360, 374, 361, 371, 363, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 378, 373,
	348, 350, 349, 352, 375, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 367, 3, 368, 365, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 376, 357, 377, 355,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 351, 57691, 353, 57692, 354, 57693, 356, 57694, 366,
	57695, 372, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3144
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadOnly
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = ReadWrite
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "INSERT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			return helpWith(sqllex, "SELECT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "VALUES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "TABLE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "SELECT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplemented(sqllex, "cte")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = true
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &From{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3912
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3957
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3994
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astFullJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astLeftJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.str = astRightJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astInnerJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4278
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = jsonColType
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = jsonColType
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4419
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = nil
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4484
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4580
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4612
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4652
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = year
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = month
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = day
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = hour
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = minute
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = month
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = hour
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = minute
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = nil
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = second
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4747
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4782
		{
			return unimplemented(sqllex, "at tz")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5056
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5229
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5282
		{
			return unimplemented(sqllex, "variadic")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5283
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5307
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5324
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5328
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5356
		{
			return unimplemented(sqllex, "current role")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5391
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5396
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5406
		{
			return unimplemented(sqllex, "treat")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5452
		{
			return unimplemented(sqllex, "within group")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5453
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.str = ""
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5550
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5551
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5552
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5556
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5562
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5563
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5564
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5565
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = Any
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = Some
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = All
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = Plus
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = Minus
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = Mult
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = Div
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = Mod
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = Bitand
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Bitor
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Pow
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Bitxor
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = LT
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = GT
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = EQ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = LE
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = GE
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = NE
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = Like
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = NotLike
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = ILike
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = NotILike
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5922
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6040
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6084
		{
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6120
		{
			return unimplemented(sqllex, "func const")
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6129
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = DNull
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6156
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.str = ""
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
