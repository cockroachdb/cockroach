// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:499
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CACHE = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const HAS_SOME = 57486
const HAS_ALL = 57487
const IMPORT = 57488
const INCREMENT = 57489
const INCREMENTAL = 57490
const IF = 57491
const IFNULL = 57492
const ILIKE = 57493
const IN = 57494
const INET = 57495
const INTERLEAVE = 57496
const INDEX = 57497
const INDEXES = 57498
const INITIALLY = 57499
const INNER = 57500
const INSERT = 57501
const INT = 57502
const INT2VECTOR = 57503
const INT2 = 57504
const INT4 = 57505
const INT8 = 57506
const INT64 = 57507
const INTEGER = 57508
const INTERSECT = 57509
const INTERVAL = 57510
const INTO = 57511
const IS = 57512
const ISOLATION = 57513
const JOB = 57514
const JOBS = 57515
const JOIN = 57516
const JSON = 57517
const JSONB = 57518
const KEY = 57519
const KEYS = 57520
const KV = 57521
const LATERAL = 57522
const LC_CTYPE = 57523
const LC_COLLATE = 57524
const LEADING = 57525
const LEAST = 57526
const LEFT = 57527
const LESS = 57528
const LEVEL = 57529
const LIKE = 57530
const LIMIT = 57531
const LIST = 57532
const LOCAL = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const LOW = 57536
const LSHIFT = 57537
const MATCH = 57538
const MINVALUE = 57539
const MAXVALUE = 57540
const MINUTE = 57541
const MONTH = 57542
const NAN = 57543
const NAME = 57544
const NAMES = 57545
const NATURAL = 57546
const NEXT = 57547
const NO = 57548
const NO_INDEX_JOIN = 57549
const NORMAL = 57550
const NOT = 57551
const NOTHING = 57552
const NULL = 57553
const NULLIF = 57554
const NULLS = 57555
const NUMERIC = 57556
const OF = 57557
const OFF = 57558
const OFFSET = 57559
const OID = 57560
const ON = 57561
const ONLY = 57562
const OPTIONS = 57563
const OR = 57564
const ORDER = 57565
const ORDINALITY = 57566
const OUT = 57567
const OUTER = 57568
const OVER = 57569
const OVERLAPS = 57570
const OVERLAY = 57571
const OWNED = 57572
const PARENT = 57573
const PARTIAL = 57574
const PARTITION = 57575
const PASSWORD = 57576
const PAUSE = 57577
const PLACING = 57578
const PLANS = 57579
const POSITION = 57580
const PRECEDING = 57581
const PRECISION = 57582
const PREPARE = 57583
const PRIMARY = 57584
const PRIORITY = 57585
const QUERIES = 57586
const QUERY = 57587
const RANGE = 57588
const READ = 57589
const REAL = 57590
const RECURSIVE = 57591
const REF = 57592
const REFERENCES = 57593
const REGCLASS = 57594
const REGPROC = 57595
const REGPROCEDURE = 57596
const REGNAMESPACE = 57597
const REGTYPE = 57598
const REMOVE_PATH = 57599
const RENAME = 57600
const REPEATABLE = 57601
const RELEASE = 57602
const RESET = 57603
const RESTORE = 57604
const RESTRICT = 57605
const RESUME = 57606
const RETURNING = 57607
const REVOKE = 57608
const RIGHT = 57609
const ROLLBACK = 57610
const ROLLUP = 57611
const ROW = 57612
const ROWS = 57613
const RSHIFT = 57614
const SAVEPOINT = 57615
const SCATTER = 57616
const SCRUB = 57617
const SEARCH = 57618
const SECOND = 57619
const SELECT = 57620
const SEQUENCE = 57621
const SEQUENCES = 57622
const SERIAL = 57623
const SERIALIZABLE = 57624
const SESSION = 57625
const SESSIONS = 57626
const SESSION_USER = 57627
const SET = 57628
const SETTING = 57629
const SETTINGS = 57630
const SHOW = 57631
const SIMILAR = 57632
const SIMPLE = 57633
const SMALLINT = 57634
const SMALLSERIAL = 57635
const SNAPSHOT = 57636
const SOME = 57637
const SPLIT = 57638
const SQL = 57639
const START = 57640
const STATUS = 57641
const STDIN = 57642
const STRICT = 57643
const STRING = 57644
const STORE = 57645
const STORING = 57646
const SUBSTRING = 57647
const SYMMETRIC = 57648
const SYSTEM = 57649
const TABLE = 57650
const TABLES = 57651
const TEMP = 57652
const TEMPLATE = 57653
const TEMPORARY = 57654
const TESTING_RANGES = 57655
const TESTING_RELOCATE = 57656
const TEXT = 57657
const THAN = 57658
const THEN = 57659
const TIME = 57660
const TIMESTAMP = 57661
const TIMESTAMPTZ = 57662
const TO = 57663
const TRAILING = 57664
const TRACE = 57665
const TRANSACTION = 57666
const TREAT = 57667
const TRIM = 57668
const TRUE = 57669
const TRUNCATE = 57670
const TYPE = 57671
const UNBOUNDED = 57672
const UNCOMMITTED = 57673
const UNION = 57674
const UNIQUE = 57675
const UNKNOWN = 57676
const UPDATE = 57677
const UPSERT = 57678
const USE = 57679
const USER = 57680
const USERS = 57681
const USING = 57682
const UUID = 57683
const VALID = 57684
const VALIDATE = 57685
const VALUE = 57686
const VALUES = 57687
const VARCHAR = 57688
const VARIADIC = 57689
const VIEW = 57690
const VARYING = 57691
const WHEN = 57692
const WHERE = 57693
const WINDOW = 57694
const WITH = 57695
const WITHIN = 57696
const WITHOUT = 57697
const WRITE = 57698
const YEAR = 57699
const ZONE = 57700
const NOT_LA = 57701
const WITH_LA = 57702
const AS_LA = 57703
const CONTAINED_BY = 57704
const HAS_SOME_KEY = 57705
const HAS_ALL_KEYS = 57706
const POSTFIXOP = 57707
const UMINUS = 57708
const HELPTOKEN = 57709

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7000

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	387, 54,
	-2, 736,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	155, 586,
	-2, 0,
	-1, 65,
	97, 736,
	159, 736,
	335, 736,
	336, 736,
	-2, 0,
	-1, 75,
	1, 698,
	219, 698,
	265, 698,
	382, 698,
	384, 698,
	386, 698,
	387, 698,
	-2, 711,
	-1, 108,
	4, 738,
	20, 738,
	21, 738,
	23, 738,
	28, 738,
	33, 738,
	34, 738,
	35, 738,
	36, 738,
	37, 738,
	38, 738,
	39, 738,
	40, 738,
	41, 738,
	42, 738,
	44, 738,
	45, 738,
	46, 738,
	47, 738,
	48, 738,
	49, 738,
	52, 738,
	53, 738,
	54, 738,
	56, 738,
	57, 738,
	61, 738,
	62, 738,
	63, 738,
	65, 738,
	66, 738,
	67, 738,
	68, 738,
	70, 738,
	72, 738,
	73, 738,
	76, 738,
	77, 738,
	78, 738,
	86, 738,
	87, 738,
	88, 738,
	89, 738,
	90, 738,
	91, 738,
	92, 738,
	93, 738,
	95, 738,
	97, 738,
	99, 738,
	102, 738,
	103, 738,
	105, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	123, 738,
	124, 738,
	125, 738,
	126, 738,
	127, 738,
	129, 738,
	131, 738,
	136, 738,
	137, 738,
	139, 738,
	142, 738,
	143, 738,
	146, 738,
	147, 738,
	148, 738,
	149, 738,
	150, 738,
	153, 738,
	154, 738,
	156, 738,
	159, 738,
	160, 738,
	161, 738,
	162, 738,
	163, 738,
	164, 738,
	165, 738,
	166, 738,
	168, 738,
	171, 738,
	172, 738,
	173, 738,
	175, 738,
	176, 738,
	177, 738,
	178, 738,
	179, 738,
	181, 738,
	182, 738,
	184, 738,
	186, 738,
	187, 738,
	190, 738,
	191, 738,
	194, 738,
	196, 738,
	197, 738,
	199, 738,
	200, 738,
	201, 738,
	202, 738,
	203, 738,
	205, 738,
	206, 738,
	207, 738,
	208, 738,
	212, 738,
	213, 738,
	214, 738,
	215, 738,
	216, 738,
	218, 738,
	220, 738,
	221, 738,
	224, 738,
	225, 738,
	227, 738,
	229, 738,
	230, 738,
	231, 738,
	232, 738,
	233, 738,
	234, 738,
	235, 738,
	237, 738,
	238, 738,
	239, 738,
	240, 738,
	241, 738,
	243, 738,
	244, 738,
	245, 738,
	246, 738,
	247, 738,
	248, 738,
	249, 738,
	250, 738,
	252, 738,
	253, 738,
	254, 738,
	255, 738,
	256, 738,
	258, 738,
	259, 738,
	260, 738,
	261, 738,
	262, 738,
	263, 738,
	264, 738,
	266, 738,
	268, 738,
	269, 738,
	270, 738,
	271, 738,
	273, 738,
	274, 738,
	275, 738,
	276, 738,
	277, 738,
	279, 738,
	280, 738,
	281, 738,
	282, 738,
	283, 738,
	284, 738,
	286, 738,
	287, 738,
	288, 738,
	289, 738,
	291, 738,
	292, 738,
	293, 738,
	294, 738,
	296, 738,
	297, 738,
	298, 738,
	299, 738,
	300, 738,
	301, 738,
	302, 738,
	303, 738,
	304, 738,
	305, 738,
	307, 738,
	309, 738,
	310, 738,
	311, 738,
	312, 738,
	313, 738,
	314, 738,
	315, 738,
	316, 738,
	318, 738,
	319, 738,
	320, 738,
	323, 738,
	324, 738,
	325, 738,
	326, 738,
	328, 738,
	329, 738,
	330, 738,
	331, 738,
	334, 738,
	335, 738,
	336, 738,
	337, 738,
	339, 738,
	341, 738,
	342, 738,
	343, 738,
	344, 738,
	345, 738,
	346, 738,
	349, 738,
	354, 738,
	355, 738,
	356, 738,
	357, 738,
	358, 738,
	-2, 0,
	-1, 125,
	1, 701,
	219, 701,
	265, 701,
	382, 701,
	384, 701,
	386, 701,
	387, 701,
	-2, 710,
	-1, 130,
	1, 635,
	171, 635,
	243, 635,
	247, 635,
	386, 635,
	387, 635,
	-2, 0,
	-1, 132,
	1, 635,
	386, 635,
	387, 635,
	-2, 0,
	-1, 133,
	1, 635,
	386, 635,
	387, 635,
	-2, 0,
	-1, 134,
	1, 639,
	386, 639,
	387, 639,
	-2, 0,
	-1, 141,
	4, 744,
	5, 744,
	6, 744,
	7, 744,
	8, 744,
	9, 744,
	20, 744,
	21, 744,
	23, 744,
	28, 744,
	29, 744,
	33, 744,
	34, 744,
	35, 744,
	36, 744,
	37, 744,
	38, 744,
	39, 744,
	40, 744,
	41, 744,
	42, 744,
	44, 744,
	45, 744,
	46, 744,
	47, 744,
	48, 744,
	49, 744,
	50, 744,
	51, 744,
	52, 744,
	53, 744,
	54, 744,
	56, 744,
	57, 744,
	59, 744,
	61, 744,
	62, 744,
	63, 744,
	65, 744,
	66, 744,
	67, 744,
	68, 744,
	70, 744,
	72, 744,
	73, 744,
	75, 744,
	76, 744,
	77, 744,
	78, 744,
	80, 744,
	81, 744,
	82, 744,
	84, 744,
	85, 744,
	86, 744,
	87, 744,
	88, 744,
	89, 744,
	90, 744,
	91, 744,
	92, 744,
	93, 744,
	95, 744,
	97, 744,
	99, 744,
	102, 744,
	103, 744,
	105, 744,
	109, 744,
	110, 744,
	111, 744,
	112, 744,
	113, 744,
	114, 744,
	115, 744,
	116, 744,
	117, 744,
	123, 744,
	124, 744,
	125, 744,
	126, 744,
	127, 744,
	129, 744,
	131, 744,
	134, 744,
	136, 744,
	137, 744,
	139, 744,
	142, 744,
	143, 744,
	146, 744,
	147, 744,
	148, 744,
	149, 744,
	150, 744,
	151, 744,
	153, 744,
	154, 744,
	156, 744,
	158, 744,
	159, 744,
	160, 744,
	161, 744,
	162, 744,
	163, 744,
	164, 744,
	165, 744,
	166, 744,
	168, 744,
	170, 744,
	171, 744,
	172, 744,
	173, 744,
	174, 744,
	175, 744,
	176, 744,
	177, 744,
	178, 744,
	179, 744,
	181, 744,
	182, 744,
	184, 744,
	185, 744,
	186, 744,
	187, 744,
	188, 744,
	190, 744,
	191, 744,
	194, 744,
	196, 744,
	197, 744,
	198, 744,
	199, 744,
	200, 744,
	201, 744,
	202, 744,
	203, 744,
	204, 744,
	205, 744,
	206, 744,
	207, 744,
	208, 744,
	209, 744,
	211, 744,
	212, 744,
	213, 744,
	214, 744,
	215, 744,
	216, 744,
	218, 744,
	221, 744,
	224, 744,
	225, 744,
	226, 744,
	227, 744,
	228, 744,
	229, 744,
	230, 744,
	231, 744,
	232, 744,
	233, 744,
	234, 744,
	235, 744,
	237, 744,
	238, 744,
	239, 744,
	240, 744,
	241, 744,
	243, 744,
	244, 744,
	245, 744,
	246, 744,
	247, 744,
	248, 744,
	249, 744,
	250, 744,
	252, 744,
	253, 744,
	254, 744,
	255, 744,
	256, 744,
	258, 744,
	259, 744,
	260, 744,
	261, 744,
	262, 744,
	263, 744,
	264, 744,
	266, 744,
	267, 744,
	268, 744,
	269, 744,
	270, 744,
	271, 744,
	273, 744,
	274, 744,
	275, 744,
	276, 744,
	277, 744,
	279, 744,
	280, 744,
	281, 744,
	282, 744,
	283, 744,
	284, 744,
	285, 744,
	286, 744,
	287, 744,
	288, 744,
	289, 744,
	290, 744,
	291, 744,
	292, 744,
	293, 744,
	294, 744,
	296, 744,
	297, 744,
	298, 744,
	299, 744,
	300, 744,
	301, 744,
	302, 744,
	303, 744,
	304, 744,
	305, 744,
	307, 744,
	309, 744,
	310, 744,
	311, 744,
	312, 744,
	313, 744,
	314, 744,
	315, 744,
	316, 744,
	318, 744,
	319, 744,
	320, 744,
	323, 744,
	324, 744,
	325, 744,
	326, 744,
	327, 744,
	328, 744,
	329, 744,
	330, 744,
	331, 744,
	334, 744,
	335, 744,
	336, 744,
	337, 744,
	338, 744,
	339, 744,
	341, 744,
	342, 744,
	343, 744,
	344, 744,
	345, 744,
	346, 744,
	349, 744,
	354, 744,
	355, 744,
	356, 744,
	357, 744,
	358, 744,
	359, 744,
	369, 744,
	374, 744,
	375, 744,
	376, 744,
	383, 744,
	389, 744,
	-2, 0,
	-1, 144,
	1, 54,
	387, 54,
	-2, 736,
	-1, 523,
	133, 1360,
	321, 1360,
	364, 1360,
	385, 1360,
	-2, 0,
	-1, 524,
	133, 1306,
	321, 1306,
	364, 1306,
	385, 1306,
	-2, 0,
	-1, 526,
	133, 1422,
	321, 1422,
	364, 1422,
	385, 1422,
	-2, 0,
	-1, 528,
	133, 1445,
	321, 1445,
	364, 1445,
	385, 1445,
	-2, 0,
	-1, 535,
	133, 1366,
	321, 1366,
	364, 1366,
	385, 1366,
	-2, 334,
	-1, 561,
	1, 412,
	382, 412,
	384, 412,
	386, 412,
	387, 412,
	-2, 0,
	-1, 562,
	1, 464,
	130, 464,
	382, 464,
	384, 464,
	386, 464,
	387, 464,
	-2, 0,
	-1, 568,
	1, 426,
	382, 426,
	384, 426,
	386, 426,
	387, 426,
	-2, 0,
	-1, 570,
	1, 430,
	382, 430,
	384, 430,
	386, 430,
	387, 430,
	-2, 0,
	-1, 573,
	1, 438,
	382, 438,
	384, 438,
	386, 438,
	387, 438,
	-2, 0,
	-1, 574,
	1, 443,
	382, 443,
	384, 443,
	386, 443,
	387, 443,
	-2, 0,
	-1, 577,
	1, 453,
	382, 453,
	384, 453,
	386, 453,
	387, 453,
	-2, 0,
	-1, 593,
	118, 746,
	130, 746,
	189, 746,
	217, 746,
	-2, 705,
	-1, 596,
	118, 745,
	130, 745,
	189, 745,
	217, 745,
	-2, 702,
	-1, 653,
	383, 1283,
	-2, 1276,
	-1, 654,
	383, 1284,
	-2, 1277,
	-1, 660,
	5, 930,
	383, 930,
	-2, 1497,
	-1, 685,
	5, 889,
	-2, 1466,
	-1, 686,
	5, 924,
	383, 924,
	-2, 1468,
	-1, 687,
	5, 899,
	-2, 1469,
	-1, 688,
	5, 898,
	-2, 1470,
	-1, 689,
	5, 924,
	383, 924,
	-2, 1473,
	-1, 690,
	5, 924,
	383, 924,
	-2, 1474,
	-1, 691,
	5, 925,
	-2, 1477,
	-1, 692,
	5, 881,
	-2, 1478,
	-1, 693,
	5, 881,
	-2, 1479,
	-1, 694,
	5, 906,
	-2, 1483,
	-1, 695,
	5, 891,
	-2, 1484,
	-1, 696,
	5, 892,
	-2, 1485,
	-1, 697,
	5, 882,
	-2, 1491,
	-1, 698,
	5, 883,
	-2, 1492,
	-1, 699,
	5, 884,
	-2, 1493,
	-1, 700,
	5, 885,
	-2, 1494,
	-1, 701,
	5, 886,
	-2, 1495,
	-1, 702,
	5, 887,
	-2, 1496,
	-1, 703,
	5, 881,
	-2, 1503,
	-1, 704,
	5, 890,
	-2, 1508,
	-1, 705,
	5, 888,
	-2, 1511,
	-1, 706,
	5, 922,
	383, 922,
	-2, 1513,
	-1, 707,
	5, 926,
	-2, 1516,
	-1, 708,
	5, 928,
	-2, 1517,
	-1, 709,
	5, 921,
	383, 921,
	-2, 1522,
	-1, 897,
	234, 734,
	-2, 579,
	-1, 901,
	219, 1280,
	-2, 0,
	-1, 936,
	1, 218,
	382, 218,
	384, 218,
	386, 218,
	387, 218,
	-2, 709,
	-1, 943,
	4, 1521,
	10, 1521,
	11, 1521,
	13, 1521,
	14, 1521,
	15, 1521,
	16, 1521,
	17, 1521,
	18, 1521,
	20, 1521,
	21, 1521,
	23, 1521,
	26, 1521,
	28, 1521,
	30, 1521,
	33, 1521,
	34, 1521,
	35, 1521,
	36, 1521,
	37, 1521,
	38, 1521,
	39, 1521,
	40, 1521,
	41, 1521,
	42, 1521,
	44, 1521,
	45, 1521,
	46, 1521,
	47, 1521,
	48, 1521,
	49, 1521,
	52, 1521,
	53, 1521,
	54, 1521,
	56, 1521,
	57, 1521,
	58, 1521,
	61, 1521,
	62, 1521,
	63, 1521,
	64, 1521,
	65, 1521,
	66, 1521,
	67, 1521,
	68, 1521,
	70, 1521,
	71, 1521,
	72, 1521,
	73, 1521,
	75, 1521,
	76, 1521,
	77, 1521,
	78, 1521,
	86, 1521,
	87, 1521,
	88, 1521,
	89, 1521,
	90, 1521,
	91, 1521,
	92, 1521,
	93, 1521,
	95, 1521,
	97, 1521,
	99, 1521,
	102, 1521,
	103, 1521,
	105, 1521,
	109, 1521,
	110, 1521,
	111, 1521,
	112, 1521,
	113, 1521,
	114, 1521,
	115, 1521,
	119, 1521,
	120, 1521,
	121, 1521,
	122, 1521,
	123, 1521,
	124, 1521,
	125, 1521,
	126, 1521,
	127, 1521,
	128, 1521,
	129, 1521,
	131, 1521,
	134, 1521,
	136, 1521,
	137, 1521,
	139, 1521,
	142, 1521,
	143, 1521,
	146, 1521,
	147, 1521,
	148, 1521,
	149, 1521,
	150, 1521,
	151, 1521,
	152, 1521,
	153, 1521,
	154, 1521,
	156, 1521,
	158, 1521,
	159, 1521,
	160, 1521,
	161, 1521,
	162, 1521,
	163, 1521,
	164, 1521,
	165, 1521,
	166, 1521,
	168, 1521,
	170, 1521,
	171, 1521,
	172, 1521,
	173, 1521,
	174, 1521,
	175, 1521,
	176, 1521,
	177, 1521,
	178, 1521,
	179, 1521,
	181, 1521,
	182, 1521,
	184, 1521,
	185, 1521,
	186, 1521,
	187, 1521,
	188, 1521,
	190, 1521,
	191, 1521,
	194, 1521,
	195, 1521,
	196, 1521,
	197, 1521,
	199, 1521,
	200, 1521,
	201, 1521,
	202, 1521,
	203, 1521,
	204, 1521,
	205, 1521,
	206, 1521,
	207, 1521,
	208, 1521,
	212, 1521,
	213, 1521,
	214, 1521,
	215, 1521,
	216, 1521,
	218, 1521,
	221, 1521,
	222, 1521,
	224, 1521,
	225, 1521,
	227, 1521,
	229, 1521,
	230, 1521,
	231, 1521,
	232, 1521,
	233, 1521,
	234, 1521,
	235, 1521,
	237, 1521,
	238, 1521,
	239, 1521,
	240, 1521,
	241, 1521,
	243, 1521,
	244, 1521,
	245, 1521,
	246, 1521,
	247, 1521,
	248, 1521,
	249, 1521,
	250, 1521,
	252, 1521,
	253, 1521,
	254, 1521,
	255, 1521,
	256, 1521,
	257, 1521,
	258, 1521,
	259, 1521,
	260, 1521,
	261, 1521,
	262, 1521,
	263, 1521,
	264, 1521,
	266, 1521,
	267, 1521,
	268, 1521,
	269, 1521,
	270, 1521,
	271, 1521,
	272, 1521,
	273, 1521,
	274, 1521,
	275, 1521,
	276, 1521,
	277, 1521,
	279, 1521,
	280, 1521,
	281, 1521,
	282, 1521,
	283, 1521,
	284, 1521,
	286, 1521,
	287, 1521,
	288, 1521,
	289, 1521,
	290, 1521,
	291, 1521,
	292, 1521,
	293, 1521,
	294, 1521,
	296, 1521,
	297, 1521,
	298, 1521,
	299, 1521,
	300, 1521,
	301, 1521,
	302, 1521,
	303, 1521,
	304, 1521,
	305, 1521,
	307, 1521,
	309, 1521,
	310, 1521,
	311, 1521,
	312, 1521,
	313, 1521,
	314, 1521,
	315, 1521,
	316, 1521,
	318, 1521,
	319, 1521,
	320, 1521,
	323, 1521,
	324, 1521,
	325, 1521,
	326, 1521,
	328, 1521,
	329, 1521,
	330, 1521,
	331, 1521,
	334, 1521,
	335, 1521,
	336, 1521,
	337, 1521,
	339, 1521,
	341, 1521,
	342, 1521,
	343, 1521,
	344, 1521,
	345, 1521,
	346, 1521,
	349, 1521,
	354, 1521,
	355, 1521,
	356, 1521,
	357, 1521,
	358, 1521,
	359, 1521,
	360, 1521,
	362, 1521,
	363, 1521,
	364, 1521,
	365, 1521,
	366, 1521,
	367, 1521,
	368, 1521,
	369, 1521,
	371, 1521,
	372, 1521,
	373, 1521,
	374, 1521,
	375, 1521,
	376, 1521,
	377, 1521,
	378, 1521,
	379, 1521,
	381, 1521,
	384, 1521,
	385, 1521,
	388, 1521,
	389, 1521,
	-2, 0,
	-1, 956,
	133, 1422,
	321, 1422,
	364, 1422,
	385, 1422,
	-2, 0,
	-1, 973,
	133, 1445,
	321, 1445,
	364, 1445,
	385, 1445,
	-2, 0,
	-1, 974,
	171, 647,
	243, 647,
	247, 647,
	-2, 322,
	-1, 1046,
	118, 745,
	130, 745,
	189, 745,
	217, 745,
	-2, 706,
	-1, 1127,
	108, 711,
	118, 711,
	130, 711,
	167, 711,
	189, 711,
	217, 711,
	223, 711,
	332, 711,
	-2, 1059,
	-1, 1137,
	383, 1260,
	-2, 1248,
	-1, 1155,
	384, 1172,
	-2, 0,
	-1, 1179,
	171, 647,
	243, 647,
	247, 647,
	-2, 642,
	-1, 1207,
	384, 1172,
	-2, 0,
	-1, 1211,
	108, 711,
	118, 711,
	130, 711,
	167, 711,
	189, 711,
	217, 711,
	223, 711,
	332, 711,
	-2, 812,
	-1, 1366,
	171, 647,
	243, 647,
	247, 647,
	-2, 324,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 965,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 966,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 967,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 968,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 969,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 970,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 971,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 972,
	-1, 1490,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 981,
	-1, 1491,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 982,
	-1, 1492,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	368, 0,
	-2, 983,
	-1, 1495,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 988,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 990,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 994,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 995,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 996,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 997,
	-1, 1575,
	133, 1183,
	383, 1283,
	-2, 1276,
	-1, 1576,
	133, 1184,
	-2, 1462,
	-1, 1577,
	133, 1185,
	-2, 1365,
	-1, 1578,
	133, 1186,
	-2, 1324,
	-1, 1579,
	133, 1187,
	-2, 1341,
	-1, 1580,
	133, 1188,
	-2, 1363,
	-1, 1581,
	133, 1189,
	-2, 1418,
	-1, 1657,
	1, 813,
	75, 813,
	108, 813,
	118, 813,
	130, 813,
	134, 813,
	138, 813,
	140, 813,
	158, 813,
	167, 813,
	174, 813,
	185, 813,
	189, 813,
	204, 813,
	217, 813,
	219, 813,
	223, 813,
	265, 813,
	267, 813,
	332, 813,
	340, 813,
	351, 813,
	352, 813,
	361, 813,
	382, 813,
	384, 813,
	386, 813,
	387, 813,
	388, 813,
	-2, 812,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 989,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 991,
	-1, 1826,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 992,
	-1, 1844,
	228, 1143,
	-2, 1145,
	-1, 2080,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 993,
	-1, 2085,
	170, 0,
	-2, 1009,
	-1, 2094,
	228, 1144,
	-2, 1146,
	-1, 2136,
	13, 0,
	14, 0,
	15, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 1036,
	-1, 2137,
	13, 0,
	14, 0,
	15, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 1037,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 1038,
	-1, 2142,
	13, 0,
	14, 0,
	15, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 1042,
	-1, 2143,
	13, 0,
	14, 0,
	15, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 1043,
	-1, 2144,
	13, 0,
	14, 0,
	15, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 1044,
	-1, 2280,
	170, 0,
	-2, 1010,
	-1, 2283,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 1013,
	-1, 2284,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 1015,
	-1, 2407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 1014,
	-1, 2408,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 1016,
	-1, 2415,
	170, 0,
	-2, 1045,
	-1, 2494,
	170, 0,
	-2, 1046,
	-1, 2576,
	36, 0,
	151, 0,
	188, 0,
	290, 0,
	359, 0,
	369, 0,
	-2, 1465,
	-1, 2662,
	383, 1533,
	-2, 499,
}

const sqlPrivate = 57344

const sqlLast = 44963

var sqlAct = [...]int{

	654, 2644, 2659, 2375, 2374, 2229, 2584, 2658, 2575, 2548,
	1739, 2625, 2585, 2441, 2642, 2586, 1747, 1251, 2058, 2574,
	2113, 74, 2499, 1814, 2385, 613, 994, 2348, 1360, 2269,
	2240, 1271, 2264, 2334, 888, 2262, 2421, 1736, 1306, 1361,
	2024, 758, 183, 2196, 1707, 2195, 652, 183, 2032, 1205,
	2256, 2026, 1284, 1702, 1706, 1937, 183, 2314, 1958, 1909,
	1652, 1653, 1748, 1253, 1670, 183, 1453, 1945, 1448, 1209,
	183, 183, 1703, 785, 183, 1188, 1910, 183, 2166, 644,
	1267, 1696, 465, 651, 1855, 183, 1661, 1133, 1794, 1214,
	1530, 1247, 1051, 1217, 977, 1391, 1555, 630, 1719, 1219,
	624, 1189, 1539, 184, 1518, 1720, 1604, 617, 534, 1515,
	1531, 1431, 764, 1810, 926, 1429, 605, 124, 462, 976,
	1165, 1169, 1704, 996, 937, 1255, 916, 1549, 1741, 1639,
	1710, 767, 923, 1196, 1626, 746, 183, 183, 1122, 514,
	1052, 1432, 1571, 623, 183, 125, 1390, 1430, 174, 602,
	646, 126, 1179, 492, 913, 179, 527, 1278, 744, 1178,
	2349, 1056, 2180, 555, 1843, 2181, 1286, 1286, 1286, 2376,
	183, 183, 183, 183, 787, 2376, 2675, 2674, 183, 183,
	2668, 2668, 124, 2667, 1740, 2621, 2620, 2668, 2619, 1242,
	1242, 710, 1242, 2601, 2596, 2595, 2592, 2347, 1762, 1762,
	1242, 2572, 2571, 2543, 2538, 1777, 1777, 1770, 1242, 2537,
	2533, 596, 2525, 2399, 1242, 2042, 2347, 1628, 2496, 506,
	601, 2041, 1770, 601, 2472, 611, 2469, 2467, 2347, 2680,
	1242, 2347, 531, 761, 1206, 1880, 1881, 2452, 597, 2451,
	2429, 1242, 2426, 2347, 1242, 2409, 1242, 1697, 1532, 1770,
	2370, 876, 2368, 2346, 1762, 2327, 1762, 2347, 2282, 1242,
	2255, 124, 1770, 2250, 1701, 2176, 2078, 1701, 2089, 2177,
	594, 2052, 1762, 1847, 2169, 2010, 593, 788, 1697, 1848,
	2009, 1307, 772, 776, 1242, 1934, 1927, 782, 1238, 1242,
	1928, 2666, 606, 1925, 1924, 748, 1923, 1762, 1762, 1781,
	1762, 1762, 1769, 1762, 1761, 1777, 1770, 40, 1762, 1700,
	1633, 1299, 2544, 1701, 1632, 1300, 1777, 141, 41, 130,
	750, 2403, 751, 2399, 2676, 1552, 2169, 1627, 2069, 1659,
	2655, 2149, 44, 2091, 1242, 2010, 1813, 604, 1792, 1369,
	1183, 1534, 874, 1067, 1068, 958, 132, 143, 144, 955,
	2350, 954, 953, 1886, 952, 951, 46, 1744, 51, 1880,
	1881, 950, 949, 948, 1388, 789, 1070, 947, 141, 946,
	945, 944, 752, 480, 26, 749, 587, 1553, 586, 55,
	1287, 1287, 1287, 57, 142, 1762, 880, 63, 1854, 585,
	133, 1069, 135, 553, 64, 552, 123, 65, 143, 136,
	551, 550, 549, 548, 547, 546, 545, 544, 543, 542,
	541, 540, 539, 40, 538, 537, 522, 521, 520, 66,
	1896, 519, 127, 518, 41, 183, 453, 183, 183, 183,
	67, 183, 452, 1554, 1551, 142, 451, 183, 44, 450,
	449, 434, 433, 183, 432, 423, 422, 421, 420, 413,
	412, 167, 166, 165, 164, 163, 183, 183, 183, 183,
	183, 1075, 162, 161, 51, 940, 160, 159, 1568, 158,
	2041, 157, 1627, 127, 156, 1880, 1881, 1886, 1898, 1899,
	1900, 155, 154, 153, 152, 151, 602, 183, 150, 149,
	148, 2279, 147, 63, 146, 145, 1210, 1897, 1394, 989,
	64, 183, 487, 65, 1566, 1292, 1285, 1422, 1953, 2643,
	2648, 1556, 2646, 1564, 2591, 1562, 2573, 183, 26, 68,
	1063, 2558, 1880, 1881, 2553, 69, 2491, 183, 1090, 1895,
	2470, 2313, 930, 892, 2312, 894, 67, 899, 2404, 2392,
	2308, 141, 2307, 2300, 76, 128, 70, 2299, 71, 2298,
	72, 2294, 134, 2293, 2292, 915, 2291, 73, 940, 2285,
	2261, 2163, 141, 2158, 919, 919, 2157, 2156, 941, 2099,
	84, 143, 2008, 104, 1965, 1961, 2012, 1932, 1929, 887,
	1917, 1908, 131, 920, 1879, 1876, 1875, 1873, 938, 183,
	1860, 1550, 143, 1886, 1859, 1844, 1657, 992, 1890, 1882,
	1883, 1884, 1885, 1887, 1888, 1091, 1063, 40, 142, 959,
	1303, 759, 108, 141, 1062, 1208, 135, 1775, 41, 1141,
	2669, 129, 1207, 136, 1134, 68, 1125, 2653, 1526, 142,
	2633, 987, 44, 2632, 1270, 1901, 2115, 135, 2563, 2562,
	1886, 2561, 2528, 143, 136, 2520, 1743, 2519, 2510, 2508,
	602, 128, 70, 885, 71, 2484, 942, 2483, 51, 2665,
	1896, 941, 2482, 2438, 2417, 2400, 2379, 127, 141, 2367,
	4, 2353, 2305, 1796, 1880, 1881, 486, 880, 1046, 104,
	142, 974, 2238, 971, 2235, 2234, 2232, 63, 135, 2204,
	2203, 1880, 1881, 2184, 64, 136, 487, 65, 143, 2172,
	2084, 1042, 1998, 2391, 1080, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1880, 1881, 2056, 1772, 1992, 127, 1978,
	990, 1977, 1963, 1882, 1883, 1884, 1885, 1887, 1888, 1933,
	67, 1389, 1721, 1067, 1068, 142, 1907, 1897, 1869, 1048,
	1809, 1527, 1868, 135, 183, 1049, 183, 1865, 1840, 942,
	136, 594, 1835, 1067, 1068, 1520, 1070, 593, 1170, 1067,
	1068, 1059, 1060, 1173, 1644, 1616, 1560, 1895, 1250, 183,
	183, 1064, 760, 127, 1186, 1177, 1070, 1163, 1162, 1161,
	1160, 1069, 1070, 1159, 1158, 1157, 1194, 1156, 1155, 1154,
	602, 1153, 1886, 1187, 1152, 1151, 1150, 1149, 1148, 1147,
	1137, 1069, 1880, 1881, 1978, 1146, 1145, 1069, 1138, 1886,
	1167, 1168, 1126, 1125, 970, 1171, 962, 1298, 934, 68,
	2502, 2398, 2287, 2260, 2179, 1174, 2175, 1892, 1893, 1894,
	1192, 1886, 1047, 1846, 1645, 1134, 1891, 1889, 1890, 1882,
	1883, 1884, 1885, 1887, 1888, 128, 70, 2027, 71, 2054,
	1567, 1075, 1123, 1208, 1880, 1881, 2402, 986, 1780, 1896,
	1388, 2401, 141, 2395, 2182, 2001, 1697, 1409, 2043, 1210,
	486, 1075, 1995, 104, 940, 183, 1896, 1129, 2059, 1175,
	124, 787, 1204, 1182, 1176, 1951, 1565, 183, 1884, 1885,
	1887, 1888, 143, 1040, 1180, 1563, 1045, 1561, 1896, 2405,
	1212, 1779, 183, 886, 1184, 1388, 1991, 1931, 183, 1930,
	183, 1819, 183, 1240, 1426, 983, 183, 1269, 1090, 1304,
	1886, 1143, 1249, 1268, 1802, 1375, 2422, 1740, 2116, 142,
	1851, 1540, 1388, 2651, 1166, 2650, 1897, 135, 1090, 1034,
	2037, 2191, 1723, 2556, 136, 1766, 2616, 615, 2617, 1227,
	1433, 2361, 2066, 1897, 1243, 2463, 1782, 183, 183, 739,
	2462, 2532, 2460, 737, 940, 1663, 183, 127, 735, 183,
	732, 2459, 600, 1289, 2215, 1897, 1291, 941, 2223, 1035,
	1294, 1026, 2220, 1275, 788, 2663, 2188, 1896, 2187, 1864,
	787, 1220, 760, 1221, 1863, 1091, 1862, 1140, 1861, 183,
	1822, 1765, 2373, 1220, 183, 1221, 1692, 1688, 1737, 183,
	183, 1685, 183, 1502, 183, 1091, 183, 712, 183, 1181,
	915, 873, 711, 1067, 1068, 1620, 1420, 1619, 1463, 183,
	1241, 599, 2228, 1043, 2227, 183, 183, 1419, 1882, 1883,
	1884, 1885, 1887, 1888, 183, 984, 1070, 2005, 1245, 589,
	454, 647, 1891, 1889, 1890, 1882, 1883, 1884, 1885, 1887,
	1888, 1376, 1277, 1395, 1897, 942, 183, 941, 1773, 1280,
	787, 1069, 789, 1222, 1891, 1889, 1890, 1882, 1883, 1884,
	1885, 1887, 1888, 1663, 439, 1222, 2531, 601, 985, 1387,
	2055, 592, 1662, 788, 1421, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1517, 2569, 2443, 1301, 1396, 1517, 741,
	1524, 1228, 1302, 971, 1362, 1522, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 168, 1281, 1556, 1366, 1671, 1077, 1811,
	1812, 2540, 1392, 1225, 1380, 591, 458, 1067, 1068, 659,
	124, 1075, 1410, 1462, 501, 1435, 440, 602, 2608, 592,
	1066, 1226, 602, 2034, 714, 942, 2541, 1403, 1399, 2109,
	1070, 2000, 969, 1443, 1889, 1890, 1882, 1883, 1884, 1885,
	1887, 1888, 1249, 788, 1994, 1020, 1540, 2206, 2035, 2342,
	1229, 789, 183, 1297, 183, 1069, 2616, 183, 2072, 1427,
	1418, 2513, 1434, 1067, 1068, 1428, 598, 1220, 183, 1221,
	2067, 1363, 594, 457, 1674, 594, 594, 787, 1444, 171,
	183, 1445, 1446, 1208, 183, 1021, 1070, 183, 2343, 1364,
	2065, 183, 1537, 1888, 2034, 183, 2213, 1389, 1721, 1067,
	1068, 183, 1044, 881, 883, 602, 1400, 1556, 183, 787,
	1989, 1069, 1404, 183, 1405, 1535, 1406, 2607, 1407, 1039,
	1408, 183, 1070, 1832, 1164, 1075, 1589, 183, 1732, 1625,
	1528, 789, 1590, 1552, 1525, 1664, 1599, 1414, 1416, 1830,
	2635, 183, 1389, 1721, 2645, 1646, 172, 1069, 1730, 1222,
	1647, 733, 183, 1089, 183, 733, 183, 1636, 2643, 183,
	734, 183, 733, 183, 183, 1582, 183, 183, 1452, 1389,
	1721, 940, 1025, 1379, 1378, 183, 1388, 1385, 1675, 1677,
	788, 1075, 1694, 1223, 1673, 1553, 1231, 2106, 1650, 1623,
	960, 1622, 442, 441, 1286, 1223, 964, 1631, 2521, 2413,
	1641, 1642, 1637, 2338, 2376, 2339, 2444, 1680, 1092, 1093,
	1094, 1095, 788, 1686, 1660, 1212, 2071, 1075, 2466, 1454,
	1461, 1667, 1693, 615, 1827, 590, 456, 2606, 1722, 1724,
	2207, 1728, 1729, 1120, 1828, 1717, 2341, 173, 1833, 1760,
	1867, 1554, 1551, 2107, 2588, 2344, 414, 1824, 1090, 1129,
	1716, 1640, 1516, 1523, 2522, 1033, 459, 1542, 1768, 1073,
	1074, 1076, 1077, 1382, 1754, 787, 455, 919, 789, 919,
	1574, 1574, 1587, 183, 941, 1672, 1607, 1757, 2073, 1746,
	1611, 1612, 1614, 448, 1090, 1755, 124, 1756, 1763, 183,
	183, 183, 124, 183, 938, 1764, 1758, 1767, 743, 169,
	789, 742, 1656, 443, 1218, 1065, 1115, 1116, 1117, 1118,
	1119, 1774, 1776, 1367, 1398, 601, 1128, 968, 980, 1556,
	500, 1556, 183, 2070, 511, 1091, 1136, 2340, 2628, 2274,
	2587, 1785, 1232, 2615, 1171, 2613, 1174, 1354, 1793, 170,
	1007, 2384, 2589, 1787, 490, 1734, 1096, 1168, 1167, 425,
	1829, 965, 580, 957, 2636, 1055, 2303, 1831, 1783, 2004,
	1383, 1091, 942, 2641, 2454, 1236, 1788, 991, 788, 580,
	610, 1071, 1072, 1073, 1074, 1076, 1077, 999, 1786, 2453,
	2357, 1235, 489, 2436, 2505, 2190, 1974, 610, 2145, 1223,
	981, 1195, 1970, 1199, 982, 1735, 493, 1276, 124, 1550,
	1797, 2590, 490, 1233, 1799, 1801, 713, 1265, 1287, 1252,
	1806, 1959, 602, 1805, 1499, 1808, 415, 1202, 2105, 498,
	1054, 1234, 2549, 493, 1030, 494, 1413, 1071, 1072, 1073,
	1074, 1076, 1077, 1638, 1370, 430, 581, 2654, 2360, 1054,
	2241, 1190, 1190, 2386, 1200, 2359, 498, 2437, 615, 890,
	1199, 1050, 494, 581, 493, 656, 789, 495, 1948, 975,
	1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 176,
	1682, 2304, 889, 1980, 1202, 1825, 1979, 498, 1690, 1823,
	2640, 497, 980, 494, 495, 2626, 602, 1960, 1635, 416,
	1197, 1053, 1839, 1590, 1590, 2356, 1031, 2146, 1634, 183,
	787, 1200, 1817, 2147, 509, 183, 183, 1935, 497, 183,
	1053, 1850, 1941, 1727, 183, 495, 1054, 183, 444, 1055,
	1198, 980, 1742, 1440, 1742, 183, 1201, 599, 1942, 1497,
	1500, 183, 183, 183, 912, 1947, 503, 183, 1055, 497,
	183, 910, 2627, 1389, 1386, 2270, 183, 183, 183, 183,
	183, 582, 1032, 2377, 981, 1374, 183, 1008, 982, 183,
	2358, 445, 901, 183, 2230, 2629, 1496, 2003, 582, 1590,
	1590, 1590, 183, 1940, 3, 1950, 2434, 1955, 1914, 1915,
	1916, 1971, 183, 1201, 183, 1954, 183, 1053, 1939, 183,
	2315, 446, 2167, 447, 1943, 1944, 1559, 1964, 1949, 1936,
	496, 1029, 183, 788, 1441, 183, 2416, 1372, 2435, 183,
	485, 34, 2302, 2011, 183, 2013, 183, 1018, 2226, 1000,
	731, 1373, 1911, 183, 1725, 1726, 426, 496, 980, 1966,
	878, 2083, 2006, 583, 1874, 602, 183, 940, 1834, 1838,
	1778, 1699, 1691, 1684, 1988, 1038, 1841, 875, 940, 183,
	583, 1853, 1037, 879, 963, 424, 1946, 499, 496, 1001,
	484, 33, 998, 1857, 1858, 2039, 584, 1016, 1498, 483,
	30, 1024, 615, 615, 508, 1912, 2051, 1050, 2045, 2046,
	431, 2047, 2048, 584, 499, 427, 1803, 2060, 183, 1411,
	1402, 789, 2017, 1144, 2015, 428, 1014, 2016, 1558, 2018,
	981, 911, 2030, 2583, 982, 2036, 502, 1239, 909, 2546,
	2019, 1012, 2331, 1906, 2044, 499, 2211, 2209, 1010, 770,
	1607, 1607, 1607, 2189, 2050, 1919, 2023, 1738, 1731, 1715,
	1296, 1295, 1028, 1293, 482, 80, 1290, 2061, 183, 1288,
	941, 1437, 1237, 1442, 2086, 2062, 2063, 2064, 1017, 1449,
	1230, 941, 2076, 736, 738, 34, 1004, 1224, 2068, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 2074, 1501, 908, 1503, 1504, 1505, 1506, 1015, 1023,
	2025, 1590, 1590, 2096, 2092, 33, 2095, 2122, 2119, 481,
	79, 1529, 755, 2477, 30, 1057, 2617, 2124, 1128, 183,
	1975, 2090, 2397, 2396, 2117, 183, 1393, 1013, 942, 2108,
	2110, 2111, 756, 2257, 183, 183, 2479, 1569, 1570, 942,
	2152, 1586, 1011, 1598, 1600, 1605, 1608, 1609, 1610, 1009,
	1348, 478, 22, 479, 23, 1347, 2151, 1975, 477, 28,
	1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
	1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 80,
	1590, 183, 2171, 183, 1313, 2178, 2165, 1003, 2150, 2168,
	2170, 2225, 2249, 1058, 183, 2201, 2186, 940, 1195, 476,
	20, 2183, 488, 2236, 1679, 1384, 2185, 2210, 2174, 2212,
	757, 2193, 183, 183, 2233, 1815, 474, 19, 475, 18,
	124, 2251, 2053, 2243, 907, 1990, 469, 15, 2202, 1663,
	183, 1695, 2200, 1997, 1687, 2231, 470, 16, 1678, 2254,
	183, 2217, 787, 183, 183, 2217, 2214, 2242, 2245, 787,
	1683, 2217, 2246, 2237, 79, 1348, 1348, 1199, 2014, 2216,
	1347, 1347, 1804, 2221, 639, 2101, 2102, 2103, 2253, 2224,
	2515, 2276, 1312, 2258, 2252, 510, 1663, 2021, 2350, 2244,
	2247, 1202, 1816, 468, 14, 1676, 183, 1350, 1002, 1313,
	1313, 1424, 1425, 2281, 1067, 1068, 22, 1197, 23, 2493,
	941, 2465, 1939, 28, 2316, 1718, 180, 1061, 1200, 1689,
	1681, 418, 2545, 473, 12, 2271, 467, 10, 2382, 1745,
	435, 1733, 2277, 1454, 2120, 1067, 1068, 1198, 1714, 460,
	472, 7, 1454, 2125, 504, 180, 1624, 2159, 512, 1365,
	183, 517, 1069, 183, 20, 788, 471, 6, 1070, 536,
	1305, 1256, 788, 787, 183, 183, 466, 5, 183, 183,
	183, 19, 2624, 18, 2639, 2155, 1880, 1881, 1258, 2301,
	2428, 15, 2321, 1069, 2259, 183, 2164, 1312, 1312, 2112,
	183, 16, 183, 2057, 183, 183, 183, 1790, 942, 1956,
	1201, 183, 1350, 1350, 183, 2320, 2351, 940, 2318, 2289,
	747, 747, 1067, 1068, 2330, 183, 183, 1264, 418, 2322,
	1926, 2219, 1791, 940, 2325, 2319, 1621, 2222, 1618, 2354,
	2201, 1790, 1789, 1617, 1548, 2372, 2323, 2326, 14, 2317,
	1131, 2104, 2020, 789, 418, 418, 780, 418, 1141, 2388,
	789, 1139, 180, 877, 1036, 1027, 1022, 2355, 2378, 2201,
	1019, 1005, 2389, 2202, 2383, 2201, 788, 2200, 12, 2381,
	967, 10, 1368, 2387, 588, 2442, 491, 1401, 1259, 1006,
	2394, 2406, 1952, 1643, 2539, 7, 2295, 2380, 1866, 2498,
	2412, 1557, 2202, 1142, 1820, 1821, 2200, 56, 2202, 2198,
	1826, 6, 2200, 633, 2332, 2192, 1709, 1708, 790, 1377,
	941, 5, 183, 655, 183, 1573, 787, 183, 1455, 730,
	657, 1310, 658, 1311, 2418, 183, 941, 1172, 1260, 1262,
	645, 787, 1845, 1308, 935, 2425, 1749, 1261, 1852, 1381,
	1521, 1856, 1538, 1849, 1135, 625, 637, 636, 1536, 961,
	1957, 2033, 2446, 2390, 789, 2448, 2430, 1439, 1870, 1807,
	1436, 1257, 2029, 2208, 1249, 183, 429, 1877, 940, 933,
	2427, 2445, 183, 1596, 2201, 1588, 1584, 1254, 1041, 1193,
	183, 183, 940, 940, 1121, 1750, 183, 988, 2040, 2432,
	1590, 1771, 1128, 1185, 2475, 2457, 2458, 1447, 942, 1605,
	1605, 1605, 754, 183, 2447, 2468, 2201, 2202, 183, 753,
	2476, 2200, 2485, 2489, 942, 183, 2486, 2480, 2474, 788,
	2652, 2487, 2488, 1371, 1784, 1190, 1114, 2509, 1113, 1263,
	615, 1590, 740, 2217, 788, 2507, 2495, 979, 978, 2202,
	183, 183, 1266, 2200, 2478, 2503, 2504, 183, 1973, 2634,
	2514, 2464, 2205, 2555, 140, 940, 2526, 2511, 2490, 137,
	183, 2524, 139, 138, 940, 940, 2527, 2002, 2501, 83,
	32, 941, 31, 103, 102, 101, 100, 99, 98, 1349,
	97, 2529, 96, 95, 602, 941, 941, 2530, 1194, 183,
	94, 183, 2535, 2536, 183, 93, 787, 92, 91, 536,
	90, 536, 897, 536, 1590, 902, 89, 789, 88, 2411,
	2564, 905, 87, 2566, 86, 2552, 85, 418, 532, 2565,
	529, 82, 789, 81, 2570, 183, 29, 25, 1309, 107,
	536, 536, 418, 927, 877, 2568, 24, 78, 2031, 77,
	27, 2580, 183, 183, 183, 2424, 2582, 2581, 17, 11,
	183, 2600, 2593, 21, 2567, 2201, 61, 62, 941, 942,
	2049, 536, 60, 2551, 183, 2605, 2602, 941, 941, 2557,
	2603, 2604, 59, 942, 942, 536, 58, 615, 615, 2614,
	13, 2612, 2450, 2618, 1349, 1349, 54, 53, 2202, 52,
	615, 966, 2200, 2623, 50, 2622, 2461, 49, 48, 788,
	47, 536, 9, 106, 2393, 2631, 2268, 2075, 2637, 2630,
	45, 1449, 8, 2638, 2597, 2598, 2599, 2079, 43, 42,
	2080, 105, 119, 2456, 787, 116, 787, 118, 115, 1513,
	117, 2492, 2085, 1309, 1309, 121, 2656, 2657, 629, 120,
	113, 2093, 111, 112, 114, 1511, 942, 110, 109, 2097,
	2664, 2672, 2049, 2670, 122, 942, 942, 2673, 2679, 2677,
	2678, 2671, 2681, 418, 39, 38, 1348, 37, 36, 2512,
	35, 1347, 2121, 2, 1, 0, 2123, 0, 0, 0,
	2518, 0, 0, 0, 0, 417, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2647, 41, 2649,
	1313, 0, 0, 1348, 0, 0, 0, 0, 1347, 2153,
	2154, 0, 44, 0, 0, 0, 0, 0, 2160, 2161,
	2162, 0, 2542, 0, 0, 0, 0, 788, 0, 788,
	1507, 0, 0, 0, 0, 0, 2471, 1313, 1508, 0,
	1509, 0, 0, 0, 1514, 2173, 0, 0, 2559, 2560,
	0, 0, 1836, 1837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 1347, 0, 2194, 487, 2342, 0, 0,
	2335, 0, 765, 0, 0, 0, 0, 0, 1312, 0,
	0, 2333, 0, 0, 0, 0, 2337, 0, 0, 634,
	75, 0, 1313, 1350, 0, 0, 0, 0, 774, 778,
	67, 784, 0, 0, 0, 789, 2343, 789, 517, 0,
	747, 0, 0, 0, 0, 1312, 0, 0, 1903, 1904,
	1905, 0, 1190, 1348, 0, 0, 0, 0, 1347, 2336,
	1350, 615, 0, 418, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 1512, 0, 75, 0, 1313, 0, 1348,
	1348, 0, 0, 0, 1347, 1347, 0, 0, 1348, 1348,
	0, 2280, 0, 1347, 1347, 2283, 2284, 0, 0, 2286,
	1312, 0, 0, 0, 0, 0, 2288, 0, 2290, 68,
	0, 0, 0, 1313, 1313, 1350, 0, 0, 0, 0,
	0, 1348, 1313, 1313, 2297, 0, 1347, 0, 0, 0,
	0, 0, 0, 0, 595, 128, 70, 603, 71, 0,
	0, 2338, 0, 2339, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 766, 75, 1313, 0, 2306, 0, 180,
	486, 0, 0, 104, 0, 1312, 0, 0, 608, 0,
	580, 418, 0, 0, 2341, 0, 0, 0, 0, 0,
	1350, 0, 143, 2344, 0, 0, 1274, 0, 610, 0,
	0, 0, 418, 0, 418, 0, 418, 0, 0, 0,
	1282, 1312, 1312, 0, 0, 0, 0, 2352, 0, 0,
	1312, 1312, 0, 0, 0, 0, 1350, 1350, 0, 142,
	0, 0, 609, 0, 0, 1350, 1350, 135, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 536, 180, 1312, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 536, 581, 0, 0, 127, 1350, 0,
	0, 0, 0, 0, 0, 2340, 0, 0, 0, 0,
	2081, 2082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 0, 0, 2407, 2408, 536, 0,
	0, 778, 1348, 180, 536, 0, 536, 1347, 536, 0,
	536, 0, 536, 0, 0, 0, 784, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 0, 2420, 0, 536,
	536, 0, 0, 2423, 0, 0, 1313, 0, 418, 2126,
	2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
	2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 0, 2148,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 1880,
	1881, 0, 1898, 1899, 1900, 0, 0, 2455, 0, 582,
	0, 0, 0, 0, 0, 2278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1895, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	0, 0, 1349, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 0, 1309, 0, 2506, 0, 0, 607,
	0, 583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 517, 0, 747, 0,
	0, 877, 0, 0, 603, 0, 0, 1886, 0, 0,
	0, 1309, 418, 0, 584, 0, 0, 0, 0, 0,
	615, 0, 0, 0, 1655, 0, 0, 1349, 418, 0,
	0, 418, 0, 0, 0, 1668, 0, 0, 0, 418,
	0, 0, 0, 1348, 0, 418, 0, 0, 1347, 1901,
	0, 0, 418, 0, 0, 0, 0, 1698, 0, 0,
	0, 0, 0, 0, 0, 1705, 0, 0, 0, 0,
	0, 536, 0, 0, 1896, 0, 1309, 1313, 2579, 2579,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 1349, 0, 2594, 0, 418, 0, 1753, 1348,
	536, 0, 0, 536, 1347, 536, 0, 418, 418, 1203,
	1759, 877, 0, 0, 2579, 0, 0, 0, 0, 1668,
	0, 0, 0, 0, 0, 40, 0, 0, 1349, 1349,
	0, 0, 0, 1313, 0, 0, 41, 1349, 1349, 0,
	0, 1309, 0, 0, 0, 595, 0, 765, 1215, 0,
	44, 1897, 0, 0, 0, 1348, 0, 0, 0, 0,
	1347, 0, 2579, 0, 0, 1312, 1124, 0, 1127, 0,
	1349, 0, 0, 0, 0, 1132, 51, 1309, 1309, 0,
	1350, 0, 0, 0, 0, 0, 1309, 1309, 0, 1313,
	0, 2660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2660, 0, 63, 2660, 2660, 0, 0,
	0, 0, 64, 0, 487, 65, 0, 1795, 0, 1309,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 418, 418, 418, 1350, 418, 0, 0,
	0, 1892, 1893, 1894, 0, 0, 0, 0, 67, 0,
	1891, 1889, 1890, 1882, 1883, 1884, 1885, 1887, 1888, 0,
	0, 1067, 1068, 0, 0, 1248, 418, 1107, 1108, 1109,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 2415,
	0, 0, 0, 0, 1070, 0, 778, 1111, 1279, 0,
	1279, 0, 1350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 1211, 1069,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	2439, 0, 0, 0, 0, 0, 0, 1880, 1881, 0,
	1898, 1899, 1900, 0, 0, 0, 0, 68, 0, 0,
	0, 1349, 0, 2088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	0, 0, 0, 128, 70, 0, 71, 0, 0, 0,
	1092, 1093, 1094, 1095, 0, 0, 40, 0, 0, 1075,
	141, 1895, 0, 0, 0, 0, 0, 41, 486, 0,
	1309, 104, 0, 2494, 0, 0, 0, 0, 0, 0,
	0, 44, 1104, 1112, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 418, 0, 1886, 1090, 142, 0, 418,
	418, 0, 0, 418, 0, 135, 63, 0, 1655, 0,
	0, 1655, 136, 64, 0, 487, 65, 0, 0, 1962,
	0, 0, 0, 0, 0, 418, 1968, 1969, 0, 0,
	0, 1668, 0, 0, 1976, 127, 0, 1901, 0, 0,
	1981, 1982, 1984, 1986, 1987, 0, 0, 0, 0, 67,
	418, 0, 0, 1996, 0, 0, 0, 1999, 1096, 0,
	0, 0, 1896, 0, 0, 0, 418, 0, 40, 0,
	0, 0, 0, 1091, 0, 0, 1274, 0, 1274, 41,
	536, 0, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 44, 0, 0, 536, 0, 0, 418,
	0, 0, 0, 2028, 0, 0, 0, 0, 418, 0,
	2038, 0, 1349, 75, 0, 0, 0, 418, 0, 51,
	0, 0, 0, 0, 0, 0, 765, 0, 0, 0,
	1795, 0, 0, 0, 0, 0, 0, 0, 68, 1897,
	0, 0, 765, 1795, 0, 1658, 595, 0, 63, 595,
	595, 0, 0, 778, 0, 64, 0, 487, 65, 778,
	1103, 1309, 0, 0, 128, 70, 784, 71, 1349, 0,
	1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076,
	1077, 141, 418, 0, 0, 0, 0, 0, 0, 486,
	0, 67, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	1751, 143, 0, 0, 0, 603, 0, 1309, 0, 0,
	1127, 784, 784, 0, 1349, 0, 0, 0, 0, 1892,
	1893, 1894, 2114, 0, 0, 0, 0, 0, 1891, 1889,
	1890, 1882, 1883, 1884, 1885, 1887, 1888, 0, 142, 0,
	0, 0, 0, 0, 1880, 1881, 135, 1898, 1899, 1900,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	2087, 0, 0, 1309, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 464, 766, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1211, 0, 0, 128, 70, 1895, 71,
	0, 0, 0, 418, 0, 0, 75, 0, 0, 1655,
	0, 0, 0, 141, 75, 0, 0, 0, 877, 1655,
	0, 486, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 2197, 0, 0, 0, 1798, 784, 1800,
	0, 778, 0, 143, 0, 0, 2218, 0, 0, 0,
	2218, 0, 0, 0, 0, 0, 2218, 0, 75, 0,
	75, 0, 1886, 0, 0, 1668, 0, 1274, 0, 0,
	1818, 0, 0, 0, 0, 0, 0, 0, 2239, 75,
	142, 0, 0, 0, 0, 75, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 136, 418, 418, 0, 0,
	0, 0, 0, 0, 1901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2265, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 2267, 0, 0, 2272, 418, 1896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1897, 0, 1880, 1881,
	0, 1898, 1899, 1900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1655, 877,
	0, 0, 2328, 2329, 1668, 0, 0, 765, 0, 0,
	0, 0, 0, 765, 765, 0, 0, 765, 2197, 877,
	0, 0, 1895, 0, 2362, 0, 2363, 0, 418, 2365,
	2366, 0, 0, 0, 0, 418, 0, 0, 2371, 1967,
	1519, 0, 0, 0, 0, 0, 0, 2197, 0, 877,
	1705, 0, 0, 2197, 0, 0, 1892, 1893, 1894, 0,
	1127, 0, 0, 0, 1993, 1891, 1889, 1890, 1882, 1883,
	1884, 1885, 1887, 1888, 0, 0, 0, 0, 0, 0,
	2007, 0, 0, 0, 0, 0, 1886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1902, 0, 0, 2022, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 0, 0, 1901, 0,
	0, 1248, 0, 0, 1127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1668, 0, 2431, 0,
	0, 2433, 0, 1896, 0, 0, 0, 0, 0, 418,
	0, 0, 2197, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 0, 0, 766, 766, 0, 0, 766, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2218, 0,
	0, 0, 0, 0, 2197, 0, 2077, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 2265, 2265, 0, 0, 0, 0,
	877, 75, 0, 0, 0, 0, 0, 0, 0, 75,
	1897, 0, 0, 0, 0, 0, 0, 2500, 0, 0,
	0, 0, 1655, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107,
	1108, 1109, 0, 75, 2516, 2517, 0, 0, 0, 1100,
	0, 418, 0, 603, 0, 0, 1070, 0, 0, 1111,
	0, 0, 0, 0, 2534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 1089, 0, 0,
	1892, 1893, 1894, 2550, 1086, 877, 0, 765, 418, 1891,
	1889, 1890, 1882, 1883, 1884, 1885, 1887, 1888, 0, 0,
	0, 0, 0, 2197, 0, 0, 0, 0, 0, 0,
	0, 0, 1880, 1881, 0, 1898, 1899, 1900, 0, 2500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 1093, 1094, 1095, 877, 877, 877, 0,
	0, 1075, 0, 0, 418, 0, 1067, 1068, 0, 1097,
	1098, 1099, 1107, 1108, 1109, 0, 0, 0, 2611, 0,
	0, 0, 1100, 0, 1104, 1112, 1895, 0, 0, 1070,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	1751, 765, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	1089, 1102, 0, 0, 0, 0, 0, 1086, 1090, 0,
	0, 0, 2273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1886, 0, 0, 75, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 0, 0, 0, 1092, 1093, 1094, 1095, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	1096, 0, 1901, 0, 0, 0, 1880, 1881, 0, 1898,
	1899, 1900, 0, 0, 0, 1091, 0, 1104, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 1896, 0, 0,
	0, 0, 0, 1105, 0, 0, 1110, 0, 765, 0,
	0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107, 1108,
	1109, 0, 0, 0, 1102, 0, 0, 0, 1100, 0,
	1895, 1090, 0, 0, 0, 1070, 0, 0, 1111, 0,
	0, 0, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2364, 0, 0, 0, 0, 0, 1101, 2369,
	1069, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 1103, 1086, 1897, 1081, 1082, 1088, 1087, 1083,
	1084, 1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1096, 1886, 0, 0, 0, 0, 0,
	0, 2309, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 1093, 1094, 1095, 0, 1105, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 1112, 0, 0, 0, 0, 0,
	0, 1896, 0, 0, 1892, 1893, 1894, 0, 0, 766,
	0, 0, 1110, 1891, 1889, 1890, 1882, 1883, 1884, 1885,
	1887, 1888, 0, 2440, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 1103, 0, 1090, 1081, 1082,
	1088, 1087, 1083, 1084, 1085, 1106, 0, 1080, 1078, 1079,
	1071, 1072, 1073, 1074, 1076, 1077, 0, 0, 0, 0,
	0, 0, 0, 2473, 1922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1892, 1893,
	1894, 0, 0, 0, 0, 0, 0, 1891, 1889, 1890,
	1882, 1883, 1884, 1885, 1887, 1888, 0, 0, 0, 0,
	0, 0, 2554, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 1081, 1082, 1088, 1087, 1083, 1084,
	1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074,
	1076, 1077, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1751, 0,
	0, 0, 0, 0, 0, 786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 792, 187, 793, 794, 795, 796, 353,
	797, 798, 799, 800, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 801, 192, 360, 361, 193, 194,
	195, 802, 803, 362, 363, 364, 804, 196, 365, 805,
	791, 806, 197, 198, 199, 0, 201, 202, 203, 200,
	807, 204, 1127, 205, 206, 808, 715, 207, 208, 209,
	809, 810, 812, 811, 813, 814, 815, 210, 211, 419,
	212, 366, 213, 367, 368, 816, 214, 817, 215, 818,
	216, 819, 820, 217, 218, 821, 219, 822, 0, 823,
	369, 220, 222, 221, 223, 370, 371, 824, 716, 825,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 826, 227, 827, 828, 717, 829, 228, 375, 830,
	376, 831, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 719, 832, 379, 237, 833, 234, 834, 718,
	235, 380, 236, 381, 382, 383, 384, 385, 835, 386,
	836, 720, 238, 239, 240, 721, 387, 388, 241, 242,
	243, 837, 245, 244, 838, 389, 722, 246, 247, 723,
	839, 248, 249, 840, 841, 250, 0, 251, 253, 724,
	252, 254, 256, 390, 255, 725, 257, 258, 260, 259,
	842, 843, 844, 391, 261, 392, 262, 263, 845, 264,
	846, 847, 265, 848, 849, 266, 393, 726, 267, 727,
	394, 268, 269, 270, 271, 272, 273, 850, 274, 395,
	275, 396, 276, 851, 277, 278, 279, 280, 281, 397,
	282, 283, 852, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 853, 296, 728, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 854,
	309, 310, 399, 308, 311, 312, 855, 313, 300, 301,
	314, 729, 315, 400, 401, 316, 856, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 857, 324, 858,
	325, 326, 327, 328, 329, 330, 331, 332, 859, 404,
	405, 406, 860, 861, 333, 334, 407, 408, 862, 335,
	336, 337, 338, 863, 864, 339, 340, 341, 342, 865,
	343, 866, 409, 344, 345, 346, 410, 411, 867, 868,
	347, 869, 870, 871, 872, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 786, 0, 0, 0,
	0, 0, 1648, 0, 0, 0, 0, 0, 0, 0,
	0, 1649, 185, 186, 792, 187, 793, 794, 795, 796,
	353, 797, 798, 799, 800, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 801, 192, 360, 361, 193,
	194, 195, 802, 803, 362, 363, 364, 804, 196, 365,
	805, 791, 806, 197, 198, 199, 0, 201, 202, 203,
	200, 807, 204, 0, 205, 206, 808, 715, 207, 208,
	209, 809, 810, 812, 811, 813, 814, 815, 210, 211,
	419, 212, 366, 213, 367, 368, 816, 214, 817, 215,
	818, 216, 819, 820, 217, 218, 821, 219, 822, 0,
	823, 369, 220, 222, 221, 223, 370, 371, 824, 716,
	825, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 826, 227, 827, 828, 717, 829, 228, 375,
	830, 376, 831, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 719, 832, 379, 237, 833, 234, 834,
	718, 235, 380, 236, 381, 382, 383, 384, 385, 835,
	386, 836, 720, 238, 239, 240, 721, 387, 388, 241,
	242, 243, 837, 245, 244, 838, 389, 722, 246, 247,
	723, 839, 248, 249, 840, 841, 250, 0, 251, 253,
	724, 252, 254, 256, 390, 255, 725, 257, 258, 260,
	259, 842, 843, 844, 391, 261, 392, 262, 263, 845,
	264, 846, 847, 265, 848, 849, 266, 393, 726, 267,
	727, 394, 268, 269, 270, 271, 272, 273, 850, 274,
	395, 275, 396, 276, 851, 277, 278, 279, 280, 281,
	397, 282, 283, 852, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 853, 296, 728,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	854, 309, 310, 399, 308, 311, 312, 855, 313, 300,
	301, 314, 729, 315, 400, 401, 316, 856, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 857, 324,
	858, 325, 326, 327, 328, 329, 330, 331, 332, 859,
	404, 405, 406, 860, 861, 333, 334, 407, 408, 862,
	335, 336, 337, 338, 863, 864, 339, 340, 341, 342,
	865, 343, 866, 409, 344, 345, 346, 410, 411, 867,
	868, 347, 869, 870, 871, 872, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2324, 185, 186, 792, 187, 793, 794,
	795, 796, 353, 797, 798, 799, 800, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 801, 192, 360,
	361, 193, 194, 195, 802, 803, 362, 363, 364, 804,
	196, 365, 805, 791, 806, 197, 198, 199, 0, 201,
	202, 203, 200, 807, 204, 0, 205, 206, 808, 715,
	207, 208, 209, 809, 810, 812, 811, 813, 814, 815,
	210, 211, 419, 212, 366, 213, 367, 368, 816, 214,
	817, 215, 818, 216, 819, 820, 217, 218, 821, 219,
	822, 0, 823, 369, 220, 222, 221, 223, 370, 371,
	824, 716, 825, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 826, 227, 827, 828, 717, 829,
	228, 375, 830, 376, 831, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 719, 832, 379, 237, 833,
	234, 834, 718, 235, 380, 236, 381, 382, 383, 384,
	385, 835, 386, 836, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 837, 245, 244, 838, 389, 722,
	246, 247, 723, 839, 248, 249, 840, 841, 250, 0,
	251, 253, 724, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 842, 843, 844, 391, 261, 392, 262,
	263, 845, 264, 846, 847, 265, 848, 849, 266, 393,
	726, 267, 727, 394, 268, 269, 270, 271, 272, 273,
	850, 274, 395, 275, 396, 276, 851, 277, 278, 279,
	280, 281, 397, 282, 283, 852, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 853,
	296, 728, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 854, 309, 310, 399, 308, 311, 312, 855,
	313, 300, 301, 314, 729, 315, 400, 401, 316, 856,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	857, 324, 858, 325, 326, 327, 328, 329, 330, 331,
	332, 859, 404, 405, 406, 860, 861, 333, 334, 407,
	408, 862, 335, 336, 337, 338, 863, 864, 339, 340,
	341, 342, 865, 343, 866, 409, 344, 345, 346, 410,
	411, 867, 868, 347, 869, 870, 871, 872, 348, 349,
	350, 351, 352, 0, 0, 786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1244, 185, 186, 792, 187, 793, 794, 795, 796, 353,
	797, 798, 799, 800, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 801, 192, 360, 361, 193, 194,
	195, 802, 803, 362, 363, 364, 804, 196, 365, 805,
	791, 806, 197, 198, 199, 0, 201, 202, 203, 200,
	807, 204, 0, 205, 206, 808, 715, 207, 208, 209,
	809, 810, 812, 811, 813, 814, 815, 210, 211, 419,
	212, 366, 213, 367, 368, 816, 214, 817, 215, 818,
	216, 819, 820, 217, 218, 821, 219, 822, 0, 823,
	369, 220, 222, 221, 223, 370, 371, 824, 716, 825,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 826, 227, 827, 828, 717, 829, 228, 375, 830,
	376, 831, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 719, 832, 379, 237, 833, 234, 834, 718,
	235, 380, 236, 381, 382, 383, 384, 385, 835, 386,
	836, 720, 238, 239, 240, 721, 387, 388, 241, 242,
	243, 837, 245, 244, 838, 389, 722, 246, 247, 723,
	839, 248, 249, 840, 841, 250, 0, 251, 253, 724,
	252, 254, 256, 390, 255, 725, 257, 258, 260, 259,
	842, 843, 844, 391, 261, 392, 262, 263, 845, 264,
	846, 847, 265, 848, 849, 266, 393, 726, 267, 727,
	394, 268, 269, 270, 271, 272, 273, 850, 274, 395,
	275, 396, 276, 851, 277, 278, 279, 280, 281, 397,
	282, 283, 852, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 853, 296, 728, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 854,
	309, 310, 399, 308, 311, 312, 855, 313, 300, 301,
	314, 729, 315, 400, 401, 316, 856, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 857, 324, 858,
	325, 326, 327, 328, 329, 330, 331, 332, 859, 404,
	405, 406, 860, 861, 333, 334, 407, 408, 862, 335,
	336, 337, 338, 863, 864, 339, 340, 341, 342, 865,
	343, 866, 409, 344, 345, 346, 410, 411, 867, 868,
	347, 869, 870, 871, 872, 348, 349, 350, 351, 352,
	1547, 0, 653, 642, 643, 640, 641, 632, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	1544, 187, 0, 0, 0, 0, 670, 635, 0, 0,
	0, 188, 189, 190, 354, 685, 356, 686, 191, 687,
	688, 0, 192, 360, 361, 193, 194, 195, 638, 669,
	689, 690, 364, 0, 196, 681, 0, 661, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 715, 207, 208, 209, 0, 662, 663,
	665, 0, 664, 666, 210, 211, 419, 212, 691, 213,
	692, 693, 0, 214, 0, 215, 0, 216, 1545, 0,
	684, 218, 0, 219, 0, 0, 0, 626, 220, 222,
	221, 223, 671, 672, 649, 716, 0, 0, 0, 0,
	0, 224, 225, 694, 695, 696, 0, 226, 0, 227,
	0, 0, 717, 0, 228, 682, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 678, 680, 719,
	0, 379, 237, 0, 234, 0, 718, 235, 697, 236,
	698, 699, 700, 701, 702, 0, 660, 0, 720, 238,
	239, 240, 721, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 683, 722, 246, 247, 723, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 724, 252, 254, 256,
	390, 255, 725, 257, 258, 260, 259, 621, 0, 650,
	679, 261, 703, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 726, 267, 727, 673, 268, 269,
	270, 271, 272, 273, 0, 274, 674, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 704, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 728, 297, 298, 627, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 667, 313, 300, 301, 314, 729, 315,
	705, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	706, 320, 321, 675, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 707, 708, 0,
	0, 333, 334, 676, 677, 648, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 668, 343, 0, 409,
	344, 345, 346, 410, 709, 1543, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 622, 0, 653,
	642, 643, 640, 641, 632, 0, 0, 620, 0, 0,
	0, 0, 618, 619, 1546, 185, 186, 0, 187, 0,
	0, 628, 1541, 670, 635, 0, 0, 631, 188, 189,
	190, 354, 685, 356, 686, 191, 687, 688, 0, 192,
	360, 361, 193, 194, 195, 638, 669, 689, 690, 364,
	0, 196, 681, 0, 661, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	715, 207, 208, 209, 0, 662, 663, 665, 0, 664,
	666, 210, 211, 419, 212, 691, 213, 692, 693, 616,
	214, 0, 215, 0, 216, 0, 0, 684, 218, 0,
	219, 0, 0, 0, 626, 220, 222, 221, 223, 671,
	672, 649, 716, 0, 0, 0, 0, 0, 224, 225,
	694, 695, 696, 0, 226, 0, 227, 0, 0, 717,
	0, 228, 682, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 678, 680, 719, 0, 379, 237,
	0, 234, 0, 718, 235, 697, 236, 698, 699, 700,
	701, 702, 0, 660, 0, 720, 238, 239, 240, 721,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 683,
	722, 246, 247, 723, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 724, 252, 254, 256, 390, 255, 725,
	257, 258, 260, 259, 621, 0, 650, 679, 261, 703,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 726, 267, 727, 673, 268, 269, 270, 271, 272,
	273, 0, 274, 674, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 704, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 728, 297, 298, 627, 299, 0, 303, 304,
	305, 306, 307, 141, 309, 310, 399, 308, 311, 312,
	667, 313, 300, 301, 314, 729, 315, 705, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 706, 320, 321,
	675, 0, 324, 143, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 707, 708, 0, 0, 333, 334,
	676, 677, 648, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 668, 343, 0, 409, 344, 345, 346,
	943, 709, 0, 0, 347, 0, 0, 0, 135, 348,
	349, 350, 351, 352, 622, 136, 604, 0, 653, 642,
	643, 640, 641, 632, 620, 0, 0, 0, 0, 618,
	619, 0, 0, 0, 185, 186, 0, 187, 1130, 0,
	0, 0, 670, 635, 631, 0, 0, 188, 189, 190,
	354, 685, 356, 686, 191, 687, 688, 0, 192, 360,
	361, 193, 194, 195, 638, 669, 689, 690, 364, 0,
	196, 681, 0, 661, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 715,
	207, 208, 209, 0, 662, 663, 665, 0, 664, 666,
	210, 211, 419, 212, 691, 213, 692, 693, 0, 214,
	0, 215, 0, 216, 0, 0, 684, 218, 0, 219,
	0, 0, 0, 626, 220, 222, 221, 223, 671, 672,
	649, 716, 0, 0, 0, 0, 0, 224, 225, 694,
	695, 696, 0, 226, 0, 227, 0, 0, 717, 0,
	228, 682, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 678, 680, 719, 0, 379, 237, 0,
	234, 0, 718, 235, 697, 236, 698, 699, 700, 701,
	702, 0, 660, 0, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 683, 722,
	246, 247, 723, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 724, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 621, 0, 650, 679, 261, 703, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	726, 267, 727, 673, 268, 269, 270, 271, 272, 273,
	0, 274, 674, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 704, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 728, 297, 298, 627, 299, 0, 303, 304, 305,
	306, 307, 141, 309, 310, 399, 308, 311, 312, 667,
	313, 300, 301, 314, 729, 315, 705, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 706, 320, 321, 675,
	0, 324, 143, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 707, 708, 0, 0, 333, 334, 676,
	677, 648, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 668, 343, 0, 409, 344, 345, 346, 943,
	709, 0, 0, 347, 0, 0, 0, 135, 348, 349,
	350, 351, 352, 622, 136, 653, 642, 643, 640, 641,
	632, 0, 0, 620, 0, 0, 0, 0, 618, 619,
	0, 185, 186, 0, 187, 0, 0, 1130, 0, 670,
	635, 0, 0, 631, 188, 189, 190, 354, 685, 356,
	686, 191, 687, 688, 0, 192, 360, 361, 193, 194,
	195, 638, 669, 689, 690, 364, 0, 196, 681, 0,
	661, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 715, 207, 208, 209,
	0, 662, 663, 665, 0, 664, 666, 210, 211, 419,
	212, 691, 213, 692, 693, 0, 214, 0, 215, 0,
	216, 0, 0, 684, 218, 0, 219, 0, 0, 0,
	626, 220, 222, 221, 223, 671, 672, 649, 716, 0,
	0, 0, 0, 0, 224, 225, 694, 695, 696, 0,
	226, 0, 227, 0, 0, 717, 0, 228, 682, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	678, 680, 719, 0, 379, 237, 0, 234, 0, 718,
	235, 697, 236, 698, 699, 700, 701, 702, 0, 660,
	0, 720, 238, 239, 240, 721, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 683, 722, 246, 247, 723,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 724,
	252, 254, 256, 390, 255, 725, 257, 258, 260, 259,
	621, 0, 650, 679, 261, 703, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 726, 267, 727,
	673, 268, 269, 270, 271, 272, 273, 0, 274, 674,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 704,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 728, 297,
	298, 627, 299, 0, 303, 304, 305, 306, 307, 141,
	309, 310, 399, 308, 311, 312, 667, 313, 300, 301,
	314, 729, 315, 705, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 706, 320, 321, 675, 0, 324, 143,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	707, 708, 0, 0, 333, 334, 676, 677, 648, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 668,
	343, 0, 409, 344, 345, 346, 943, 709, 0, 0,
	347, 0, 0, 0, 135, 348, 349, 350, 351, 352,
	622, 136, 653, 642, 643, 640, 641, 632, 0, 0,
	620, 0, 0, 0, 0, 618, 619, 0, 185, 186,
	0, 187, 0, 0, 1130, 0, 670, 635, 0, 0,
	631, 188, 189, 190, 354, 685, 356, 686, 191, 687,
	688, 1601, 192, 360, 361, 193, 194, 195, 638, 669,
	689, 690, 364, 0, 196, 681, 0, 661, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 715, 207, 208, 209, 0, 662, 663,
	665, 0, 664, 666, 210, 211, 419, 212, 691, 213,
	692, 693, 0, 214, 0, 215, 0, 216, 0, 0,
	684, 218, 0, 219, 0, 0, 0, 626, 220, 222,
	221, 223, 671, 672, 649, 716, 0, 0, 0, 0,
	0, 224, 225, 694, 695, 696, 0, 226, 0, 227,
	0, 1606, 717, 0, 228, 682, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 678, 680, 719,
	0, 379, 237, 0, 234, 0, 718, 235, 697, 236,
	698, 699, 700, 701, 702, 0, 660, 0, 720, 238,
	239, 240, 721, 387, 388, 241, 242, 243, 0, 245,
	244, 1602, 683, 722, 246, 247, 723, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 724, 252, 254, 256,
	390, 255, 725, 257, 258, 260, 259, 621, 0, 650,
	679, 261, 703, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 726, 267, 727, 673, 268, 269,
	270, 271, 272, 273, 0, 274, 674, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 704, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 728, 297, 298, 627, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 667, 313, 300, 301, 314, 729, 315,
	705, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	706, 320, 321, 675, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 707, 708, 0,
	1603, 333, 334, 676, 677, 648, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 668, 343, 0, 409,
	344, 345, 346, 410, 709, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 622, 612, 0,
	653, 642, 643, 640, 641, 632, 0, 620, 0, 0,
	0, 0, 618, 619, 0, 0, 185, 186, 0, 187,
	0, 628, 0, 0, 670, 635, 0, 631, 0, 188,
	189, 190, 354, 685, 356, 686, 191, 687, 688, 0,
	192, 360, 361, 193, 194, 195, 638, 669, 689, 690,
	364, 0, 196, 681, 0, 661, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 715, 207, 208, 209, 0, 662, 663, 665, 0,
	664, 666, 210, 211, 419, 212, 691, 213, 692, 693,
	616, 214, 0, 215, 0, 216, 0, 0, 684, 218,
	0, 219, 0, 0, 0, 626, 220, 222, 221, 223,
	671, 672, 649, 716, 0, 0, 0, 0, 0, 224,
	225, 694, 695, 696, 0, 226, 0, 227, 0, 0,
	717, 0, 228, 682, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 678, 680, 719, 0, 379,
	237, 0, 234, 0, 718, 235, 697, 236, 698, 699,
	700, 701, 702, 0, 660, 0, 720, 238, 239, 240,
	721, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	683, 722, 246, 247, 723, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 724, 252, 254, 256, 390, 255,
	725, 257, 258, 260, 259, 621, 0, 650, 679, 261,
	703, 262, 263, 0, 264, 614, 0, 265, 0, 0,
	266, 393, 726, 267, 727, 673, 268, 269, 270, 271,
	272, 273, 0, 274, 674, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 704, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 728, 297, 298, 627, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 667, 313, 300, 301, 314, 729, 315, 705, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 706, 320,
	321, 675, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 707, 708, 0, 0, 333,
	334, 676, 677, 648, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 668, 343, 0, 409, 344, 345,
	346, 410, 709, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 622, 0, 653, 642, 643,
	640, 641, 632, 0, 0, 620, 0, 0, 0, 0,
	618, 619, 0, 185, 186, 0, 187, 0, 0, 628,
	0, 670, 635, 0, 0, 631, 188, 189, 190, 354,
	685, 356, 686, 191, 687, 688, 0, 192, 360, 361,
	193, 194, 195, 638, 669, 689, 690, 364, 0, 196,
	681, 0, 661, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 715, 207,
	208, 209, 0, 662, 663, 665, 0, 664, 666, 210,
	211, 419, 212, 691, 213, 692, 693, 0, 214, 0,
	215, 0, 216, 0, 0, 684, 218, 0, 219, 0,
	0, 0, 626, 220, 222, 221, 223, 671, 672, 649,
	716, 0, 0, 0, 0, 0, 224, 225, 694, 695,
	696, 0, 226, 0, 227, 0, 0, 717, 0, 228,
	682, 0, 376, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 678, 680, 719, 0, 379, 237, 0, 234,
	0, 718, 235, 697, 236, 698, 699, 700, 701, 702,
	0, 660, 0, 720, 238, 239, 240, 721, 387, 388,
	241, 242, 243, 0, 245, 244, 0, 683, 722, 246,
	247, 723, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 724, 252, 254, 256, 390, 255, 725, 257, 258,
	260, 259, 621, 2248, 650, 679, 261, 703, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 726,
	267, 727, 673, 268, 269, 270, 271, 272, 273, 0,
	274, 674, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 704, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	728, 297, 298, 627, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 310, 399, 308, 311, 312, 667, 313,
	300, 301, 314, 729, 315, 705, 401, 316, 0, 323,
	317, 318, 302, 319, 322, 706, 320, 321, 675, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 707, 708, 0, 0, 333, 334, 676, 677,
	648, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 668, 343, 0, 409, 344, 345, 346, 410, 709,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 622, 0, 653, 642, 643, 640, 641, 632,
	0, 0, 620, 0, 0, 0, 0, 618, 619, 1191,
	185, 186, 0, 187, 0, 0, 628, 0, 670, 635,
	0, 0, 631, 188, 189, 190, 354, 685, 356, 686,
	191, 687, 688, 0, 192, 360, 361, 193, 194, 195,
	638, 669, 689, 690, 364, 0, 196, 681, 0, 661,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 715, 207, 208, 209, 0,
	662, 663, 665, 0, 664, 666, 210, 211, 419, 212,
	691, 213, 692, 693, 0, 214, 0, 215, 0, 216,
	0, 0, 684, 218, 0, 219, 0, 0, 0, 626,
	220, 222, 221, 223, 671, 672, 649, 716, 0, 0,
	0, 0, 0, 224, 225, 694, 695, 696, 0, 226,
	0, 227, 0, 0, 717, 0, 228, 682, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 678,
	680, 719, 0, 379, 237, 1451, 234, 0, 718, 235,
	697, 236, 698, 699, 700, 701, 702, 0, 660, 0,
	720, 238, 239, 240, 721, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 683, 722, 246, 247, 723, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 724, 252,
	254, 256, 390, 255, 725, 257, 258, 260, 259, 621,
	0, 650, 679, 261, 703, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 726, 267, 727, 673,
	268, 269, 270, 271, 272, 273, 0, 274, 674, 275,
	396, 276, 1450, 277, 278, 279, 280, 281, 704, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 728, 297, 298,
	627, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 667, 313, 300, 301, 314,
	729, 315, 705, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 706, 320, 321, 675, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 707,
	708, 0, 0, 333, 334, 676, 677, 648, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 668, 343,
	0, 409, 344, 345, 346, 410, 709, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 622,
	0, 653, 642, 643, 640, 641, 632, 0, 0, 620,
	0, 0, 0, 0, 618, 619, 0, 185, 186, 0,
	187, 0, 0, 628, 0, 670, 635, 0, 0, 631,
	188, 189, 190, 354, 685, 356, 686, 191, 687, 688,
	0, 192, 360, 361, 193, 194, 195, 638, 669, 689,
	690, 364, 0, 196, 681, 0, 661, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 715, 207, 208, 209, 0, 662, 663, 665,
	0, 664, 666, 210, 211, 419, 212, 691, 213, 692,
	693, 616, 214, 0, 215, 0, 216, 0, 0, 684,
	218, 0, 219, 0, 0, 0, 626, 220, 222, 221,
	223, 671, 672, 649, 716, 0, 0, 0, 0, 0,
	224, 225, 694, 695, 696, 0, 226, 0, 227, 0,
	0, 717, 0, 228, 682, 0, 376, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 678, 680, 719, 0,
	379, 237, 0, 234, 0, 718, 235, 697, 236, 698,
	699, 700, 701, 702, 0, 660, 0, 720, 238, 239,
	240, 721, 387, 388, 241, 242, 243, 0, 245, 244,
	0, 683, 722, 246, 247, 723, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 724, 252, 254, 256, 390,
	255, 725, 257, 258, 260, 259, 621, 0, 650, 679,
	261, 703, 262, 263, 0, 264, 614, 0, 265, 0,
	0, 266, 393, 726, 267, 727, 673, 268, 269, 270,
	271, 272, 273, 0, 274, 674, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 704, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 728, 297, 298, 627, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 310, 399, 308,
	311, 312, 667, 313, 300, 301, 314, 729, 315, 705,
	401, 316, 0, 323, 317, 318, 302, 319, 322, 706,
	320, 321, 675, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 707, 708, 0, 0,
	333, 334, 676, 677, 648, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 668, 343, 0, 409, 344,
	345, 346, 410, 709, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 622, 0, 653, 642,
	643, 640, 641, 632, 0, 0, 620, 0, 0, 0,
	0, 618, 619, 0, 185, 186, 0, 187, 0, 0,
	628, 0, 670, 635, 0, 0, 631, 188, 189, 190,
	354, 685, 356, 686, 191, 687, 688, 0, 192, 360,
	361, 193, 194, 195, 638, 669, 689, 690, 364, 0,
	196, 681, 0, 661, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 715,
	207, 208, 209, 0, 662, 663, 665, 0, 664, 666,
	210, 211, 419, 212, 691, 213, 692, 693, 2661, 214,
	0, 215, 0, 216, 0, 0, 684, 218, 0, 219,
	0, 0, 0, 626, 220, 222, 221, 223, 671, 672,
	649, 716, 0, 0, 0, 0, 0, 224, 225, 694,
	695, 696, 0, 226, 0, 227, 0, 0, 717, 0,
	228, 682, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 678, 680, 719, 0, 379, 237, 0,
	234, 0, 718, 235, 697, 236, 698, 699, 700, 701,
	702, 0, 660, 0, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 683, 722,
	246, 247, 723, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 2662, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 621, 0, 650, 679, 261, 703, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	726, 267, 727, 673, 268, 269, 270, 271, 272, 273,
	0, 274, 674, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 704, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 728, 297, 298, 627, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 667,
	313, 300, 301, 314, 729, 315, 705, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 706, 320, 321, 675,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 707, 708, 0, 0, 333, 334, 676,
	677, 648, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 668, 343, 0, 409, 344, 345, 346, 410,
	709, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 622, 0, 653, 642, 643, 640, 641,
	632, 0, 0, 620, 0, 0, 0, 0, 618, 619,
	0, 185, 186, 0, 187, 0, 0, 628, 0, 670,
	635, 0, 0, 631, 188, 189, 190, 354, 685, 356,
	686, 191, 687, 688, 0, 192, 360, 361, 193, 194,
	195, 638, 669, 689, 690, 364, 0, 196, 681, 0,
	661, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 715, 207, 208, 209,
	0, 662, 663, 665, 0, 664, 666, 210, 211, 419,
	212, 691, 213, 692, 693, 616, 214, 0, 215, 0,
	216, 0, 0, 684, 218, 0, 219, 0, 0, 0,
	626, 220, 222, 221, 223, 671, 672, 649, 716, 0,
	0, 0, 0, 0, 224, 225, 694, 695, 696, 0,
	226, 0, 227, 0, 0, 717, 0, 228, 682, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	678, 680, 719, 0, 379, 237, 0, 234, 0, 718,
	235, 697, 236, 698, 699, 700, 701, 702, 0, 660,
	0, 720, 238, 239, 240, 721, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 683, 722, 246, 247, 723,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 724,
	252, 254, 256, 390, 255, 725, 257, 258, 260, 259,
	621, 0, 650, 679, 261, 703, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 726, 267, 727,
	673, 268, 269, 270, 271, 272, 273, 0, 274, 674,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 704,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 728, 297,
	298, 627, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 310, 399, 308, 311, 312, 667, 313, 300, 301,
	314, 729, 315, 705, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 706, 320, 321, 675, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	707, 708, 0, 0, 333, 334, 676, 677, 648, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 668,
	343, 0, 409, 344, 345, 346, 410, 709, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	622, 0, 653, 642, 643, 640, 641, 632, 0, 0,
	620, 0, 0, 0, 0, 618, 619, 0, 185, 186,
	0, 187, 0, 0, 628, 0, 670, 635, 0, 0,
	631, 188, 189, 190, 354, 685, 356, 686, 191, 687,
	688, 0, 192, 360, 361, 193, 194, 195, 638, 669,
	689, 690, 364, 0, 196, 681, 0, 661, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 715, 207, 208, 209, 0, 662, 663,
	665, 0, 664, 666, 210, 211, 419, 212, 691, 213,
	692, 693, 0, 214, 0, 215, 0, 216, 0, 0,
	684, 218, 0, 219, 0, 0, 0, 626, 220, 222,
	221, 223, 671, 672, 649, 716, 0, 0, 0, 0,
	0, 224, 225, 694, 695, 696, 0, 226, 0, 227,
	0, 0, 717, 0, 228, 682, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 678, 680, 719,
	0, 379, 237, 0, 234, 0, 718, 235, 697, 236,
	698, 699, 700, 701, 702, 0, 660, 0, 720, 238,
	239, 240, 721, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 683, 722, 246, 247, 723, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 724, 252, 254, 256,
	390, 255, 725, 257, 258, 260, 259, 621, 0, 650,
	679, 261, 703, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 726, 267, 727, 673, 268, 269,
	270, 271, 272, 273, 0, 274, 674, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 704, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 728, 297, 298, 627, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 667, 313, 300, 301, 314, 729, 315,
	705, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	706, 320, 321, 675, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 707, 708, 0,
	0, 333, 334, 676, 677, 648, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 668, 343, 0, 409,
	344, 345, 346, 410, 709, 2100, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 622, 0, 653,
	642, 643, 640, 641, 632, 0, 0, 620, 0, 0,
	0, 0, 618, 619, 0, 185, 186, 0, 187, 0,
	0, 628, 0, 670, 635, 0, 0, 631, 188, 189,
	190, 354, 685, 356, 686, 191, 687, 688, 0, 192,
	360, 361, 193, 194, 195, 638, 669, 689, 690, 364,
	0, 196, 681, 0, 661, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	715, 207, 208, 209, 0, 662, 663, 665, 0, 664,
	666, 210, 211, 419, 212, 691, 213, 692, 693, 0,
	214, 0, 215, 0, 216, 0, 0, 684, 218, 0,
	219, 0, 0, 0, 626, 220, 222, 221, 223, 671,
	672, 649, 716, 0, 0, 0, 0, 0, 224, 225,
	694, 695, 696, 0, 226, 0, 227, 0, 0, 717,
	0, 228, 682, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 678, 680, 719, 0, 379, 237,
	0, 234, 0, 718, 235, 697, 236, 698, 699, 700,
	701, 702, 0, 660, 0, 720, 238, 239, 240, 721,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 683,
	722, 246, 247, 723, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 724, 252, 254, 256, 390, 255, 725,
	257, 258, 260, 259, 621, 0, 650, 679, 261, 703,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 726, 267, 727, 673, 268, 269, 270, 271, 272,
	273, 0, 274, 674, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 704, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 728, 297, 298, 627, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	667, 313, 300, 301, 314, 729, 315, 705, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 706, 320, 321,
	675, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 707, 708, 0, 0, 333, 334,
	676, 677, 648, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 668, 343, 0, 409, 344, 345, 346,
	410, 709, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 622, 0, 653, 642, 643, 640,
	641, 632, 0, 0, 620, 0, 0, 0, 0, 618,
	619, 1191, 185, 186, 0, 187, 0, 0, 628, 0,
	670, 635, 0, 0, 631, 188, 189, 190, 354, 685,
	356, 686, 191, 687, 688, 0, 192, 360, 361, 193,
	194, 195, 638, 669, 689, 690, 364, 0, 196, 681,
	0, 661, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 715, 207, 208,
	209, 0, 662, 663, 665, 0, 664, 666, 210, 211,
	419, 212, 691, 213, 692, 693, 0, 214, 0, 215,
	0, 216, 0, 0, 684, 218, 0, 219, 0, 0,
	0, 626, 220, 222, 221, 223, 671, 672, 649, 716,
	0, 0, 0, 0, 0, 224, 225, 694, 695, 696,
	0, 226, 0, 227, 0, 1606, 717, 0, 228, 682,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 678, 680, 719, 0, 379, 237, 0, 234, 0,
	718, 235, 697, 236, 698, 699, 700, 701, 702, 0,
	660, 0, 720, 238, 239, 240, 721, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 683, 722, 246, 247,
	723, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	724, 252, 254, 256, 390, 255, 725, 257, 258, 260,
	259, 621, 0, 650, 679, 261, 703, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 726, 267,
	727, 673, 268, 269, 270, 271, 272, 273, 0, 274,
	674, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	704, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 728,
	297, 298, 627, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 667, 313, 300,
	301, 314, 729, 315, 705, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 706, 320, 321, 675, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 707, 708, 0, 0, 333, 334, 676, 677, 648,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	668, 343, 0, 409, 344, 345, 346, 410, 709, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 622, 1651, 0, 653, 642, 643, 640, 641, 632,
	0, 620, 0, 0, 0, 0, 618, 619, 0, 0,
	185, 186, 0, 187, 0, 628, 0, 0, 670, 635,
	0, 631, 0, 188, 189, 190, 354, 685, 356, 686,
	191, 687, 688, 0, 192, 360, 361, 193, 194, 195,
	638, 669, 689, 690, 364, 0, 196, 681, 0, 661,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 715, 207, 208, 209, 0,
	662, 663, 665, 0, 664, 666, 210, 211, 419, 212,
	691, 213, 692, 693, 0, 214, 0, 215, 0, 216,
	0, 0, 684, 218, 0, 219, 0, 0, 0, 626,
	220, 222, 221, 223, 671, 672, 649, 716, 0, 0,
	0, 0, 0, 224, 225, 694, 695, 696, 0, 226,
	0, 227, 0, 0, 717, 0, 228, 682, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 678,
	680, 719, 0, 379, 237, 0, 234, 0, 718, 235,
	697, 236, 698, 699, 700, 701, 702, 0, 660, 0,
	720, 238, 239, 240, 721, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 683, 722, 246, 247, 723, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 724, 252,
	254, 256, 390, 255, 725, 257, 258, 260, 259, 621,
	0, 650, 679, 261, 703, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 726, 267, 727, 673,
	268, 269, 270, 271, 272, 273, 0, 274, 674, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 704, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 728, 297, 298,
	627, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 667, 313, 300, 301, 314,
	729, 315, 705, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 706, 320, 321, 675, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 707,
	708, 0, 0, 333, 334, 676, 677, 648, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 668, 343,
	0, 409, 344, 345, 346, 410, 709, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 622,
	1615, 0, 653, 642, 643, 640, 641, 632, 0, 620,
	0, 0, 0, 0, 618, 619, 0, 0, 185, 186,
	0, 187, 0, 628, 0, 0, 670, 635, 0, 631,
	0, 188, 189, 190, 354, 685, 356, 686, 191, 687,
	688, 0, 192, 360, 361, 193, 194, 195, 638, 669,
	689, 690, 364, 0, 196, 681, 0, 661, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 715, 207, 208, 209, 0, 662, 663,
	665, 0, 664, 666, 210, 211, 419, 212, 691, 213,
	692, 693, 0, 214, 0, 215, 0, 216, 0, 0,
	684, 218, 0, 219, 0, 0, 0, 626, 220, 222,
	221, 223, 671, 672, 649, 716, 0, 0, 0, 0,
	0, 224, 225, 694, 695, 696, 0, 226, 0, 227,
	0, 0, 717, 0, 228, 682, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 678, 680, 719,
	0, 379, 237, 0, 234, 0, 718, 235, 697, 236,
	698, 699, 700, 701, 702, 0, 660, 0, 720, 238,
	239, 240, 721, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 683, 722, 246, 247, 723, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 724, 252, 254, 256,
	390, 255, 725, 257, 258, 260, 259, 621, 0, 650,
	679, 261, 703, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 726, 267, 727, 673, 268, 269,
	270, 271, 272, 273, 0, 274, 674, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 704, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 728, 297, 298, 627, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 667, 313, 300, 301, 314, 729, 315,
	705, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	706, 320, 321, 675, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 707, 708, 0,
	0, 333, 334, 676, 677, 648, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 668, 343, 0, 409,
	344, 345, 346, 410, 709, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 622, 1613, 0,
	653, 642, 643, 640, 641, 632, 0, 620, 0, 0,
	0, 0, 618, 619, 0, 0, 185, 186, 0, 187,
	0, 628, 0, 0, 670, 635, 0, 631, 0, 188,
	189, 190, 354, 685, 356, 686, 191, 687, 688, 0,
	192, 360, 361, 193, 194, 195, 638, 669, 689, 690,
	364, 0, 196, 681, 0, 661, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 715, 207, 208, 209, 0, 662, 663, 665, 0,
	664, 666, 210, 211, 419, 212, 691, 213, 692, 693,
	0, 214, 0, 215, 0, 216, 0, 0, 684, 218,
	0, 219, 0, 0, 0, 626, 220, 222, 221, 223,
	671, 672, 649, 716, 0, 0, 0, 0, 0, 224,
	225, 694, 695, 696, 0, 226, 0, 227, 0, 0,
	717, 0, 228, 682, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 678, 680, 719, 0, 379,
	237, 0, 234, 0, 718, 235, 697, 236, 698, 699,
	700, 701, 702, 0, 660, 0, 720, 238, 239, 240,
	721, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	683, 722, 246, 247, 723, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 724, 252, 254, 256, 390, 255,
	725, 257, 258, 260, 259, 621, 0, 650, 679, 261,
	703, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 726, 267, 727, 673, 268, 269, 270, 271,
	272, 273, 0, 274, 674, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 704, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 728, 297, 298, 627, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 667, 313, 300, 301, 314, 729, 315, 705, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 706, 320,
	321, 675, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 707, 708, 0, 0, 333,
	334, 676, 677, 648, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 668, 343, 0, 409, 344, 345,
	346, 410, 709, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 622, 1597, 0, 653, 642,
	643, 640, 641, 632, 0, 620, 0, 0, 0, 0,
	618, 619, 0, 0, 185, 186, 0, 187, 0, 628,
	0, 0, 670, 635, 0, 631, 0, 188, 189, 190,
	354, 685, 356, 686, 191, 687, 688, 0, 192, 360,
	361, 193, 194, 195, 638, 669, 689, 690, 364, 0,
	196, 681, 0, 661, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 715,
	207, 208, 209, 0, 662, 663, 665, 0, 664, 666,
	210, 211, 419, 212, 691, 213, 692, 693, 0, 214,
	0, 215, 0, 216, 0, 0, 684, 218, 0, 219,
	0, 0, 0, 626, 220, 222, 221, 223, 671, 672,
	649, 716, 0, 0, 0, 0, 0, 224, 225, 694,
	695, 696, 0, 226, 0, 227, 0, 0, 717, 0,
	228, 682, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 678, 680, 719, 0, 379, 237, 0,
	234, 0, 718, 235, 697, 236, 698, 699, 700, 701,
	702, 0, 660, 0, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 683, 722,
	246, 247, 723, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 724, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 621, 0, 650, 679, 261, 703, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	726, 267, 727, 673, 268, 269, 270, 271, 272, 273,
	0, 274, 674, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 704, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 728, 297, 298, 627, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 667,
	313, 300, 301, 314, 729, 315, 705, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 706, 320, 321, 675,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 707, 708, 0, 0, 333, 334, 676,
	677, 648, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 668, 343, 0, 409, 344, 345, 346, 410,
	709, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 622, 1585, 0, 653, 642, 643, 640,
	641, 632, 0, 620, 0, 0, 0, 0, 618, 619,
	0, 0, 185, 186, 0, 187, 0, 628, 0, 0,
	670, 635, 0, 631, 0, 188, 189, 190, 354, 685,
	356, 686, 191, 687, 688, 0, 192, 360, 361, 193,
	194, 195, 638, 669, 689, 690, 364, 0, 196, 681,
	0, 661, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 715, 207, 208,
	209, 0, 662, 663, 665, 0, 664, 666, 210, 211,
	419, 212, 691, 213, 692, 693, 0, 214, 0, 215,
	0, 216, 0, 0, 684, 218, 0, 219, 0, 0,
	0, 626, 220, 222, 221, 223, 671, 672, 649, 716,
	0, 0, 0, 0, 0, 224, 225, 694, 695, 696,
	0, 226, 0, 227, 0, 0, 717, 0, 228, 682,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 678, 680, 719, 0, 379, 237, 0, 234, 0,
	718, 235, 697, 236, 698, 699, 700, 701, 702, 0,
	660, 0, 720, 238, 239, 240, 721, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 683, 722, 246, 247,
	723, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	724, 252, 254, 256, 390, 255, 725, 257, 258, 260,
	259, 621, 0, 650, 679, 261, 703, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 726, 267,
	727, 673, 268, 269, 270, 271, 272, 273, 0, 274,
	674, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	704, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 728,
	297, 298, 627, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 667, 313, 300,
	301, 314, 729, 315, 705, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 706, 320, 321, 675, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 707, 708, 0, 0, 333, 334, 676, 677, 648,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	668, 343, 0, 409, 344, 345, 346, 410, 709, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 622, 1583, 0, 1575, 642, 643, 640, 641, 632,
	0, 620, 0, 0, 0, 0, 618, 619, 0, 0,
	185, 186, 0, 187, 0, 628, 0, 0, 670, 635,
	0, 631, 0, 188, 189, 190, 354, 685, 356, 686,
	191, 687, 688, 0, 192, 360, 361, 193, 194, 195,
	638, 669, 689, 690, 364, 0, 196, 681, 0, 661,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 715, 207, 208, 209, 0,
	662, 663, 665, 0, 664, 666, 210, 211, 419, 212,
	691, 1578, 692, 693, 0, 214, 0, 215, 0, 216,
	0, 0, 684, 218, 0, 219, 0, 0, 0, 626,
	220, 222, 221, 223, 671, 672, 649, 716, 0, 0,
	0, 0, 0, 224, 225, 694, 695, 696, 0, 226,
	0, 227, 0, 0, 717, 0, 228, 682, 0, 376,
	0, 0, 229, 1579, 0, 0, 231, 232, 233, 678,
	680, 719, 0, 379, 237, 0, 234, 0, 718, 235,
	697, 236, 698, 699, 700, 701, 702, 0, 660, 0,
	720, 238, 239, 240, 721, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 683, 722, 246, 247, 723, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 724, 1580,
	1577, 256, 390, 255, 725, 257, 258, 260, 259, 621,
	0, 650, 679, 261, 703, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 726, 267, 727, 673,
	268, 269, 270, 271, 272, 273, 0, 274, 674, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 704, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 728, 297, 298,
	627, 299, 0, 303, 304, 305, 306, 1581, 0, 309,
	310, 399, 308, 311, 312, 667, 313, 300, 301, 314,
	729, 315, 705, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 706, 320, 321, 675, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 707,
	708, 0, 0, 333, 334, 676, 677, 648, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 668, 343,
	0, 409, 344, 345, 346, 410, 709, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 1576, 352, 622,
	1572, 0, 1575, 642, 643, 640, 641, 632, 0, 620,
	0, 0, 0, 0, 618, 619, 0, 0, 185, 186,
	0, 187, 0, 628, 0, 0, 670, 635, 0, 631,
	0, 188, 189, 190, 354, 685, 356, 686, 191, 687,
	688, 0, 192, 360, 361, 193, 194, 195, 638, 669,
	689, 690, 364, 0, 196, 681, 0, 661, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 715, 207, 208, 209, 0, 662, 663,
	665, 0, 664, 666, 210, 211, 419, 212, 691, 1578,
	692, 693, 0, 214, 0, 215, 0, 216, 0, 0,
	684, 218, 0, 219, 0, 0, 0, 626, 220, 222,
	221, 223, 671, 672, 649, 716, 0, 0, 0, 0,
	0, 224, 225, 694, 695, 696, 0, 226, 0, 227,
	0, 0, 717, 0, 228, 682, 0, 376, 0, 0,
	229, 1579, 0, 0, 231, 232, 233, 678, 680, 719,
	0, 379, 237, 0, 234, 0, 718, 235, 697, 236,
	698, 699, 700, 701, 702, 0, 660, 0, 720, 238,
	239, 240, 721, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 683, 722, 246, 247, 723, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 724, 1580, 1577, 256,
	390, 255, 725, 257, 258, 260, 259, 621, 0, 650,
	679, 261, 703, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 726, 267, 727, 673, 268, 269,
	270, 271, 272, 273, 0, 274, 674, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 704, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 728, 297, 298, 627, 299,
	0, 303, 304, 305, 306, 1581, 0, 309, 310, 399,
	308, 311, 312, 667, 313, 300, 301, 314, 729, 315,
	705, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	706, 320, 321, 675, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 707, 708, 0,
	0, 333, 334, 676, 677, 648, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 668, 343, 0, 409,
	344, 345, 346, 410, 709, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 1576, 352, 622, 0, 653,
	642, 643, 640, 641, 632, 0, 0, 620, 0, 0,
	0, 0, 618, 619, 0, 185, 186, 0, 187, 0,
	0, 628, 0, 670, 635, 0, 0, 631, 188, 189,
	190, 354, 685, 356, 686, 191, 687, 688, 0, 192,
	360, 361, 193, 194, 195, 638, 669, 689, 690, 364,
	0, 196, 681, 0, 661, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	715, 207, 208, 209, 0, 662, 663, 665, 0, 664,
	666, 210, 211, 419, 212, 691, 213, 692, 693, 0,
	214, 0, 215, 0, 216, 0, 0, 684, 218, 0,
	219, 0, 0, 0, 626, 220, 222, 221, 223, 671,
	672, 649, 716, 0, 0, 0, 0, 0, 224, 225,
	694, 695, 696, 0, 226, 0, 227, 0, 0, 717,
	0, 228, 682, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 678, 680, 719, 0, 379, 237,
	0, 234, 0, 718, 235, 697, 236, 698, 699, 700,
	701, 702, 0, 660, 0, 720, 238, 239, 240, 721,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 683,
	722, 246, 247, 723, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 724, 252, 254, 256, 390, 255, 725,
	257, 258, 260, 259, 621, 0, 650, 679, 261, 703,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 726, 267, 727, 673, 268, 269, 270, 271, 272,
	273, 0, 274, 674, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 704, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 728, 297, 298, 627, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	667, 313, 300, 301, 314, 729, 315, 705, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 706, 320, 321,
	675, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 707, 708, 0, 0, 333, 334,
	676, 677, 648, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 668, 343, 0, 409, 344, 345, 346,
	410, 709, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 622, 0, 653, 642, 643, 640,
	641, 632, 0, 0, 620, 0, 0, 0, 0, 618,
	619, 0, 185, 186, 1438, 187, 1134, 0, 628, 0,
	670, 635, 0, 0, 631, 188, 189, 190, 354, 685,
	356, 686, 191, 687, 688, 0, 192, 360, 361, 193,
	194, 195, 638, 669, 689, 690, 364, 0, 196, 681,
	0, 661, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 715, 207, 208,
	209, 0, 662, 663, 665, 0, 664, 666, 210, 211,
	419, 212, 691, 213, 692, 693, 0, 214, 0, 215,
	0, 216, 0, 0, 684, 218, 0, 219, 0, 0,
	0, 626, 220, 222, 221, 223, 671, 672, 649, 716,
	0, 0, 0, 0, 0, 224, 225, 694, 695, 696,
	0, 226, 0, 227, 0, 0, 717, 0, 228, 682,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 678, 680, 719, 0, 379, 237, 0, 234, 0,
	718, 235, 697, 236, 698, 699, 700, 701, 702, 0,
	660, 0, 720, 238, 239, 240, 721, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 683, 722, 246, 247,
	723, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	724, 252, 254, 256, 390, 255, 725, 257, 258, 260,
	259, 621, 0, 650, 679, 261, 703, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 726, 267,
	727, 673, 268, 269, 270, 271, 272, 273, 0, 274,
	674, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	704, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 728,
	297, 298, 627, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 667, 313, 300,
	301, 314, 729, 315, 705, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 706, 320, 321, 675, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 707, 708, 0, 0, 333, 334, 676, 677, 648,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	668, 343, 0, 409, 344, 345, 346, 410, 709, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 622, 884, 0, 653, 642, 643, 640, 641, 632,
	0, 620, 0, 0, 0, 0, 618, 619, 0, 0,
	185, 186, 0, 187, 0, 628, 0, 0, 670, 635,
	0, 631, 0, 188, 189, 190, 354, 685, 356, 686,
	191, 687, 688, 0, 192, 360, 361, 193, 194, 195,
	638, 669, 689, 690, 364, 0, 196, 681, 0, 661,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 715, 207, 208, 209, 0,
	662, 663, 665, 0, 664, 666, 210, 211, 419, 212,
	691, 213, 692, 693, 0, 214, 0, 215, 0, 216,
	0, 0, 684, 218, 0, 219, 0, 0, 0, 626,
	220, 222, 221, 223, 671, 672, 649, 716, 0, 0,
	0, 0, 0, 224, 225, 694, 695, 696, 0, 226,
	0, 227, 0, 0, 717, 0, 228, 682, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 678,
	680, 719, 0, 379, 237, 0, 234, 0, 718, 235,
	697, 236, 698, 699, 700, 701, 702, 0, 660, 0,
	720, 238, 239, 240, 721, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 683, 722, 246, 247, 723, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 724, 252,
	254, 256, 390, 255, 725, 257, 258, 260, 259, 621,
	0, 650, 679, 261, 703, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 726, 267, 727, 673,
	268, 269, 270, 271, 272, 273, 0, 274, 674, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 704, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 728, 297, 298,
	627, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 667, 313, 300, 301, 314,
	729, 315, 705, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 706, 320, 321, 675, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 707,
	708, 0, 0, 333, 334, 676, 677, 648, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 668, 343,
	0, 409, 344, 345, 346, 410, 709, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 622,
	882, 0, 653, 642, 643, 640, 641, 632, 0, 620,
	0, 0, 0, 0, 618, 619, 0, 0, 185, 186,
	0, 187, 0, 628, 0, 0, 670, 635, 0, 631,
	0, 188, 189, 190, 354, 685, 356, 686, 191, 687,
	688, 0, 192, 360, 361, 193, 194, 195, 638, 669,
	689, 690, 364, 0, 196, 681, 0, 661, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 715, 207, 208, 209, 0, 662, 663,
	665, 0, 664, 666, 210, 211, 419, 212, 691, 213,
	692, 693, 0, 214, 0, 215, 0, 216, 0, 0,
	684, 218, 0, 219, 0, 0, 0, 626, 220, 222,
	221, 223, 671, 672, 649, 716, 0, 0, 0, 0,
	0, 224, 225, 694, 695, 696, 0, 226, 0, 227,
	0, 0, 717, 0, 228, 682, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 678, 680, 719,
	0, 379, 237, 0, 234, 0, 718, 235, 697, 236,
	698, 699, 700, 701, 702, 0, 660, 0, 720, 238,
	239, 240, 721, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 683, 722, 246, 247, 723, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 724, 252, 254, 256,
	390, 255, 725, 257, 258, 260, 259, 621, 0, 650,
	679, 261, 703, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 726, 267, 727, 673, 268, 269,
	270, 271, 272, 273, 0, 274, 674, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 704, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 728, 297, 298, 627, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 667, 313, 300, 301, 314, 729, 315,
	705, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	706, 320, 321, 675, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 707, 708, 0,
	0, 333, 334, 676, 677, 648, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 668, 343, 0, 409,
	344, 345, 346, 410, 709, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 622, 0, 653,
	642, 643, 640, 641, 632, 0, 0, 620, 0, 0,
	0, 0, 618, 619, 0, 185, 186, 0, 187, 0,
	0, 628, 0, 670, 635, 0, 0, 631, 188, 189,
	190, 354, 685, 356, 686, 191, 687, 688, 0, 192,
	360, 361, 193, 194, 195, 638, 669, 689, 690, 364,
	0, 196, 681, 0, 661, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	715, 207, 208, 2578, 0, 662, 663, 665, 0, 664,
	666, 210, 211, 419, 212, 691, 213, 692, 693, 0,
	214, 0, 215, 0, 216, 0, 0, 684, 218, 0,
	219, 0, 0, 0, 626, 220, 222, 221, 223, 671,
	672, 649, 716, 0, 0, 0, 0, 0, 224, 225,
	694, 695, 696, 0, 226, 0, 227, 0, 0, 717,
	0, 228, 682, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 678, 680, 719, 0, 379, 237,
	0, 234, 0, 718, 235, 697, 236, 698, 699, 700,
	701, 702, 0, 660, 0, 720, 238, 239, 240, 721,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 683,
	722, 246, 247, 723, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 724, 252, 254, 256, 390, 255, 725,
	257, 258, 260, 259, 621, 0, 650, 679, 261, 703,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 726, 267, 727, 673, 268, 269, 270, 271, 272,
	273, 0, 274, 674, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 704, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 728, 297, 298, 627, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	667, 313, 300, 301, 314, 729, 315, 705, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 706, 320, 321,
	675, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 707, 708, 0, 0, 333, 334,
	676, 677, 648, 335, 336, 2577, 338, 0, 0, 339,
	340, 341, 342, 668, 343, 0, 409, 344, 345, 346,
	410, 709, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 622, 0, 653, 642, 643, 640,
	641, 632, 0, 0, 620, 0, 0, 0, 0, 618,
	619, 0, 185, 186, 0, 187, 0, 0, 628, 0,
	670, 635, 0, 0, 631, 188, 189, 190, 354, 685,
	356, 686, 191, 687, 688, 0, 192, 360, 361, 193,
	194, 195, 638, 669, 689, 690, 364, 0, 196, 681,
	0, 661, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 715, 207, 208,
	209, 0, 662, 663, 665, 0, 664, 666, 210, 211,
	419, 212, 691, 213, 692, 693, 0, 214, 0, 215,
	0, 216, 0, 0, 684, 218, 0, 219, 0, 0,
	0, 626, 220, 222, 221, 223, 671, 672, 649, 716,
	0, 0, 0, 0, 0, 224, 225, 694, 695, 696,
	0, 226, 0, 227, 0, 0, 717, 0, 228, 682,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 678, 680, 719, 0, 379, 237, 0, 234, 0,
	718, 235, 697, 236, 698, 699, 700, 701, 702, 0,
	660, 0, 720, 238, 239, 240, 721, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 683, 722, 246, 247,
	723, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	724, 252, 254, 256, 390, 255, 725, 257, 258, 260,
	259, 621, 0, 650, 679, 261, 703, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 726, 267,
	727, 673, 268, 269, 270, 271, 272, 273, 0, 274,
	674, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	704, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 728,
	297, 298, 627, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 667, 313, 300,
	301, 314, 729, 315, 705, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 706, 320, 321, 675, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 707, 708, 0, 0, 333, 334, 676, 677, 648,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	668, 343, 0, 409, 344, 345, 346, 410, 709, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 622, 0, 653, 642, 643, 640, 641, 632, 0,
	0, 620, 0, 0, 0, 0, 618, 619, 0, 185,
	186, 0, 187, 0, 0, 628, 0, 670, 635, 0,
	0, 631, 188, 189, 190, 2576, 685, 356, 686, 191,
	687, 688, 0, 192, 360, 361, 193, 194, 195, 638,
	669, 689, 690, 364, 0, 196, 681, 0, 661, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 715, 207, 208, 2578, 0, 662,
	663, 665, 0, 664, 666, 210, 211, 419, 212, 691,
	213, 692, 693, 0, 214, 0, 215, 0, 216, 0,
	0, 684, 218, 0, 219, 0, 0, 0, 626, 220,
	222, 221, 223, 671, 672, 649, 716, 0, 0, 0,
	0, 0, 224, 225, 694, 695, 696, 0, 226, 0,
	227, 0, 0, 717, 0, 228, 682, 0, 376, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 678, 680,
	719, 0, 379, 237, 0, 234, 0, 718, 235, 697,
	236, 698, 699, 700, 701, 702, 0, 660, 0, 720,
	238, 239, 240, 721, 387, 388, 241, 242, 243, 0,
	245, 244, 0, 683, 722, 246, 247, 723, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 724, 252, 254,
	256, 390, 255, 725, 257, 258, 260, 259, 621, 0,
	650, 679, 261, 703, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 726, 267, 727, 673, 268,
	269, 270, 271, 272, 273, 0, 274, 674, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 704, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 728, 297, 298, 627,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 310,
	399, 308, 311, 312, 667, 313, 300, 301, 314, 729,
	315, 705, 401, 316, 0, 323, 317, 318, 302, 319,
	322, 706, 320, 321, 675, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 707, 708,
	0, 0, 333, 334, 676, 677, 648, 335, 336, 2577,
	338, 0, 0, 339, 340, 341, 342, 668, 343, 0,
	409, 344, 345, 346, 410, 709, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 622, 0,
	653, 642, 643, 640, 641, 632, 0, 0, 620, 0,
	0, 0, 0, 618, 619, 0, 185, 186, 0, 187,
	0, 0, 628, 0, 670, 635, 0, 0, 631, 188,
	189, 190, 354, 685, 356, 686, 191, 687, 688, 0,
	192, 360, 361, 193, 194, 195, 638, 669, 689, 690,
	364, 0, 196, 681, 0, 661, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 715, 207, 208, 209, 0, 662, 663, 665, 0,
	664, 666, 210, 211, 419, 212, 691, 213, 692, 693,
	0, 214, 0, 215, 0, 216, 0, 0, 684, 218,
	0, 219, 0, 0, 0, 626, 220, 222, 221, 223,
	671, 672, 649, 716, 0, 0, 0, 0, 0, 224,
	225, 694, 695, 696, 0, 226, 0, 227, 0, 0,
	717, 0, 228, 682, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 678, 680, 719, 0, 379,
	237, 0, 234, 0, 718, 235, 697, 236, 698, 699,
	700, 701, 702, 0, 660, 0, 720, 238, 239, 240,
	721, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	683, 722, 246, 247, 723, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 724, 252, 254, 256, 390, 255,
	725, 257, 258, 260, 259, 0, 0, 650, 679, 261,
	703, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 726, 267, 727, 673, 268, 269, 270, 271,
	272, 273, 0, 274, 674, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 704, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 728, 297, 298, 1595, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 667, 313, 300, 301, 314, 729, 315, 705, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 706, 320,
	321, 675, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 707, 708, 0, 0, 333,
	334, 676, 677, 648, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 668, 343, 0, 409, 344, 345,
	346, 410, 709, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 653, 642, 643,
	640, 641, 632, 0, 0, 1593, 0, 0, 0, 0,
	1591, 1592, 0, 185, 186, 0, 187, 0, 0, 1594,
	0, 670, 635, 0, 0, 631, 188, 189, 190, 354,
	685, 356, 686, 191, 687, 688, 0, 192, 360, 361,
	193, 194, 195, 0, 669, 689, 690, 364, 0, 196,
	681, 0, 661, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 715, 207,
	208, 209, 0, 662, 663, 665, 0, 664, 666, 210,
	211, 419, 212, 691, 213, 692, 693, 0, 214, 0,
	215, 0, 216, 0, 0, 684, 218, 0, 219, 0,
	0, 0, 369, 220, 222, 221, 223, 671, 672, 649,
	716, 0, 0, 0, 0, 0, 224, 225, 694, 695,
	696, 0, 226, 0, 227, 0, 0, 717, 0, 228,
	682, 0, 376, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 678, 680, 719, 0, 379, 237, 0, 234,
	0, 718, 235, 697, 236, 698, 699, 700, 701, 702,
	0, 660, 0, 720, 238, 239, 240, 721, 387, 388,
	241, 242, 243, 0, 245, 244, 0, 683, 722, 246,
	247, 723, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 724, 252, 254, 256, 390, 255, 725, 257, 258,
	260, 259, 0, 0, 650, 679, 261, 703, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 726,
	267, 727, 673, 268, 269, 270, 271, 272, 273, 0,
	274, 674, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 704, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	728, 297, 298, 1595, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 310, 399, 308, 311, 312, 667, 313,
	300, 301, 314, 729, 315, 705, 401, 316, 0, 323,
	317, 318, 302, 319, 322, 706, 320, 321, 675, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 707, 708, 0, 0, 333, 334, 676, 677,
	648, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 668, 343, 0, 409, 344, 345, 346, 410, 709,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 653, 642, 643, 640, 641, 632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 1594, 0, 670, 635,
	0, 0, 631, 188, 189, 190, 0, 685, 356, 686,
	191, 687, 688, 0, 192, 360, 361, 193, 194, 195,
	638, 669, 689, 690, 364, 0, 196, 681, 0, 661,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 715, 207, 208, 2578, 0,
	662, 663, 665, 0, 664, 666, 210, 211, 419, 212,
	691, 213, 692, 693, 0, 214, 0, 215, 0, 216,
	0, 0, 684, 218, 0, 219, 0, 0, 0, 626,
	220, 222, 221, 223, 671, 672, 649, 716, 0, 0,
	0, 0, 0, 224, 225, 694, 695, 696, 0, 226,
	0, 227, 0, 0, 717, 0, 228, 682, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 678,
	680, 0, 0, 379, 237, 0, 234, 0, 718, 235,
	697, 236, 698, 699, 700, 701, 702, 0, 660, 0,
	0, 238, 239, 240, 721, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 683, 722, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 724, 252,
	254, 256, 390, 255, 725, 257, 258, 260, 259, 621,
	0, 650, 679, 261, 703, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 726, 267, 727, 673,
	268, 269, 270, 271, 272, 273, 0, 274, 674, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 704, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 728, 297, 298,
	627, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 667, 313, 300, 301, 314,
	0, 315, 705, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 706, 320, 321, 675, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 707,
	708, 0, 0, 333, 334, 676, 677, 648, 335, 336,
	2577, 338, 0, 0, 339, 340, 341, 342, 668, 343,
	0, 409, 344, 345, 346, 410, 709, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 653, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 619, 0, 185, 186, 0,
	187, 0, 0, 628, 0, 670, 0, 0, 0, 631,
	188, 189, 190, 354, 355, 356, 357, 191, 358, 359,
	0, 192, 360, 361, 193, 194, 195, 0, 669, 362,
	363, 364, 0, 196, 681, 0, 661, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 715, 207, 208, 209, 0, 662, 663, 665,
	0, 664, 666, 210, 211, 419, 212, 366, 213, 367,
	368, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 369, 220, 222, 221,
	223, 671, 672, 0, 716, 0, 0, 0, 0, 0,
	224, 225, 372, 373, 374, 0, 226, 0, 227, 0,
	0, 717, 0, 228, 682, 0, 376, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 678, 680, 719, 0,
	379, 237, 0, 234, 0, 718, 235, 380, 236, 381,
	382, 383, 384, 385, 0, 386, 0, 720, 238, 239,
	240, 721, 387, 388, 241, 242, 243, 0, 245, 244,
	0, 683, 722, 246, 247, 723, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 724, 252, 254, 256, 390,
	255, 725, 257, 258, 260, 259, 0, 0, 0, 679,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 726, 267, 727, 673, 268, 269, 270,
	271, 272, 273, 0, 274, 674, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 728, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 310, 399, 308,
	311, 312, 667, 313, 300, 301, 314, 729, 315, 400,
	401, 316, 0, 323, 317, 318, 302, 319, 322, 402,
	320, 321, 675, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 676, 677, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 668, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 936, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	2199, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 791, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 715,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 716, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 717, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 719, 0, 379, 237, 0,
	234, 0, 718, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 722,
	246, 247, 723, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 724, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	726, 267, 727, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 728, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 141, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 729, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 143, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 943,
	411, 0, 0, 347, 0, 0, 0, 135, 348, 349,
	350, 351, 352, 604, 136, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 127, 0, 353,
	0, 0, 0, 0, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 0, 192, 360, 361, 193, 194,
	195, 0, 0, 362, 363, 364, 0, 196, 365, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 419,
	212, 366, 213, 367, 368, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	369, 220, 222, 221, 223, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 375, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 0, 0, 379, 237, 0, 234, 0, 0,
	235, 380, 236, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 238, 239, 240, 0, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 389, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 769, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 141,
	309, 310, 399, 308, 311, 312, 0, 313, 300, 301,
	314, 0, 315, 400, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 0, 324, 143,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 943, 411, 0, 0,
	347, 0, 0, 0, 135, 348, 349, 350, 351, 352,
	0, 136, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 763, 0, 1213, 0, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 377, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 769, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 141, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 143, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 943, 411, 0, 0, 347, 0, 0,
	0, 135, 348, 349, 350, 351, 352, 604, 136, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 763,
	0, 1213, 0, 353, 0, 0, 0, 0, 188, 189,
	190, 354, 355, 356, 357, 191, 358, 359, 0, 192,
	360, 361, 193, 194, 195, 0, 0, 362, 363, 364,
	0, 196, 365, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 419, 212, 366, 213, 367, 368, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 369, 220, 222, 221, 223, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	372, 373, 374, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 375, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 377, 378, 0, 0, 379, 237,
	0, 234, 0, 0, 235, 380, 236, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 238, 239, 240, 0,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 389,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 141, 309, 310, 399, 308, 311, 312,
	0, 313, 300, 301, 314, 0, 315, 400, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 402, 320, 321,
	403, 0, 324, 143, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	943, 411, 0, 0, 347, 0, 0, 0, 135, 348,
	349, 350, 351, 352, 1938, 136, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 127, 0,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 196, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 769, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 762, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 763, 0, 768, 0, 353, 0, 0,
	0, 0, 188, 189, 190, 354, 355, 356, 357, 191,
	358, 359, 0, 192, 360, 361, 193, 194, 195, 0,
	0, 362, 363, 364, 0, 196, 365, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 419, 212, 366,
	213, 367, 368, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 369, 220,
	222, 221, 223, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 372, 373, 374, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 375, 0, 376, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 377, 378,
	0, 0, 379, 237, 0, 234, 0, 0, 235, 380,
	236, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	238, 239, 240, 0, 387, 388, 241, 242, 243, 0,
	245, 244, 0, 389, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 769,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 310,
	399, 308, 311, 312, 0, 313, 300, 301, 314, 0,
	315, 400, 401, 316, 0, 323, 317, 318, 302, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	763, 0, 768, 353, 0, 0, 0, 0, 188, 189,
	190, 354, 355, 356, 357, 191, 358, 359, 0, 192,
	360, 361, 193, 194, 195, 0, 0, 362, 363, 364,
	0, 196, 365, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 419, 212, 366, 213, 367, 368, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 369, 220, 222, 221, 223, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	372, 373, 374, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 375, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 377, 378, 0, 0, 379, 237,
	0, 234, 0, 0, 235, 380, 236, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 238, 239, 240, 0,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 389,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 769, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	0, 313, 300, 301, 314, 0, 315, 400, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 763, 0, 768, 353,
	0, 0, 0, 0, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 0, 192, 360, 361, 193, 194,
	195, 0, 0, 362, 363, 364, 0, 196, 365, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 419,
	212, 366, 213, 367, 368, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	369, 220, 222, 221, 223, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 375, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 0, 0, 379, 237, 0, 234, 0, 0,
	235, 380, 236, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 238, 239, 240, 0, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 389, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 310, 399, 308, 311, 312, 0, 313, 300, 301,
	314, 0, 315, 400, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 1246, 0, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 0, 196, 365, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 419, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 377, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 1752,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 196, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 2115, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 377, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 653, 642,
	643, 640, 641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 1216, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 685, 356, 686, 191, 687, 688, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 689, 690, 364, 0,
	196, 365, 0, 791, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 715,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 691, 213, 692, 693, 0, 214,
	0, 215, 0, 216, 0, 0, 684, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	649, 716, 0, 0, 0, 0, 0, 224, 225, 694,
	695, 696, 0, 226, 0, 227, 0, 0, 717, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 719, 0, 379, 237, 0,
	234, 0, 718, 235, 697, 236, 698, 699, 700, 701,
	702, 0, 660, 0, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 722,
	246, 247, 723, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 724, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 0, 0, 650, 391, 261, 703, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	726, 267, 727, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 704, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 728, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 729, 315, 705, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 706, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 707, 708, 0, 0, 333, 334, 407,
	408, 648, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	709, 0, 507, 347, 182, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 178, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 377,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 177, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 175, 347,
	182, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 0, 181, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 0, 196, 365, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 178, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 377, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 177, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 182, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 181, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 178, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 377,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 177, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 182, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 181, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 993, 0, 939, 997, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 185, 186, 0, 187, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 0, 192, 360, 361, 193, 194,
	195, 0, 0, 362, 363, 364, 0, 196, 365, 0,
	791, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 715, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 419,
	212, 366, 213, 367, 368, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	369, 220, 222, 221, 223, 370, 371, 0, 716, 0,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 0, 227, 0, 0, 717, 0, 228, 375, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 719, 0, 379, 237, 0, 234, 0, 718,
	235, 380, 236, 381, 382, 383, 384, 385, 0, 386,
	0, 720, 238, 239, 240, 721, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 389, 722, 246, 247, 723,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 724,
	252, 254, 256, 390, 255, 725, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 726, 267, 727,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 728, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 310, 399, 308, 311, 312, 0, 313, 300, 301,
	314, 729, 315, 400, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 939, 997,
	347, 0, 0, 995, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 791, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 715,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 716, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 717, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 719, 0, 379, 237, 0,
	234, 0, 718, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 720, 238, 239, 240, 721, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 722,
	246, 247, 723, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 724, 252, 254, 256, 390, 255, 725, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	726, 267, 727, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 728, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 729, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 939, 997, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	188, 189, 190, 354, 355, 356, 357, 191, 358, 359,
	0, 192, 360, 361, 193, 194, 195, 0, 0, 362,
	363, 364, 0, 196, 365, 0, 791, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 715, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 419, 212, 366, 213, 367,
	368, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 369, 220, 222, 221,
	223, 370, 371, 0, 716, 0, 0, 0, 0, 0,
	224, 225, 372, 373, 374, 0, 226, 0, 227, 0,
	0, 717, 0, 228, 375, 0, 376, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 377, 378, 719, 0,
	379, 237, 0, 234, 0, 718, 235, 380, 236, 381,
	382, 383, 384, 385, 0, 386, 0, 720, 238, 239,
	240, 721, 387, 388, 241, 242, 243, 0, 245, 244,
	0, 389, 722, 246, 247, 723, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 724, 252, 254, 256, 390,
	255, 725, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 726, 267, 727, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 728, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 310, 399, 308,
	311, 312, 0, 313, 300, 301, 314, 729, 315, 400,
	401, 316, 0, 323, 317, 318, 302, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 939, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 791,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 715, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 419, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 716, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 717, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 377,
	378, 719, 0, 379, 237, 0, 234, 0, 718, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	720, 238, 239, 240, 721, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 722, 246, 247, 723, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 724, 252,
	254, 256, 390, 255, 725, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 726, 267, 727, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 728, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	729, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 182, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 188, 189, 190, 354,
	355, 356, 357, 191, 358, 359, 0, 192, 360, 361,
	193, 194, 195, 0, 0, 362, 363, 364, 1671, 196,
	365, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 1669, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 419, 212, 366, 213, 367, 368, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 369, 220, 222, 221, 223, 370, 371, 0,
	1713, 0, 0, 0, 0, 0, 224, 225, 372, 373,
	374, 0, 226, 0, 227, 1674, 0, 0, 0, 228,
	375, 0, 376, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 377, 378, 0, 0, 379, 237, 1711, 234,
	0, 0, 235, 380, 236, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 238, 239, 240, 0, 387, 388,
	241, 242, 243, 0, 245, 244, 0, 389, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 390, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 1673, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 310, 399, 308, 311, 312, 0, 313,
	300, 301, 314, 0, 315, 400, 401, 316, 0, 323,
	317, 318, 302, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 1712, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	182, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 1671, 196, 365, 0, 0, 1666, 197, 198, 199,
	0, 201, 202, 203, 200, 1669, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 419, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 1674, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1665, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 1673, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 1672,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 914, 347, 182, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 196, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 769, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	775, 347, 182, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 777, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 769, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 771, 347, 182, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 773, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 769, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 438, 347, 182, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 437, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 419, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 377,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 436, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 182, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 353, 0, 1654, 0, 0, 188, 189, 190, 354,
	355, 356, 357, 191, 358, 359, 0, 192, 360, 361,
	193, 194, 195, 0, 0, 362, 363, 364, 0, 196,
	365, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 419, 212, 366, 213, 367, 368, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 369, 220, 222, 221, 223, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 372, 373,
	374, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	375, 0, 376, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 377, 378, 0, 0, 379, 237, 0, 234,
	0, 0, 235, 380, 236, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 238, 239, 240, 0, 387, 388,
	241, 242, 243, 0, 245, 244, 0, 389, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 390, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 310, 399, 308, 311, 312, 0, 313,
	300, 301, 314, 0, 315, 400, 401, 316, 0, 323,
	317, 318, 302, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	182, 2266, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 0, 196, 365, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 419, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 377, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 182, 2266, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 188, 189, 190, 354, 355, 356, 357, 191,
	358, 359, 0, 192, 360, 361, 193, 194, 195, 0,
	0, 362, 363, 364, 0, 196, 365, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 419, 212, 366,
	213, 367, 368, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 369, 220,
	222, 221, 223, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 372, 373, 374, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 375, 0, 376, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 377, 378,
	0, 0, 379, 237, 0, 234, 0, 0, 235, 380,
	236, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	238, 239, 240, 0, 387, 388, 241, 242, 243, 0,
	245, 244, 0, 389, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	2263, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 310,
	399, 308, 311, 312, 0, 313, 300, 301, 314, 0,
	315, 400, 401, 316, 0, 323, 317, 318, 302, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 182, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 196, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 769, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	1417, 347, 182, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 377, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 1415, 347, 182, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 182, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 185, 186, 1397,
	187, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	188, 189, 190, 354, 355, 356, 357, 191, 358, 359,
	0, 192, 360, 361, 193, 194, 195, 0, 0, 362,
	363, 364, 0, 196, 365, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 419, 212, 366, 213, 367,
	368, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 369, 220, 222, 221,
	223, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 372, 373, 374, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 375, 0, 376, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 377, 378, 0, 0,
	379, 237, 0, 234, 0, 0, 235, 380, 236, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 238, 239,
	240, 0, 387, 388, 241, 242, 243, 0, 245, 244,
	0, 389, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 310, 399, 308,
	311, 312, 0, 313, 300, 301, 314, 0, 315, 400,
	401, 316, 0, 323, 317, 318, 302, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 533, 347, 182, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 188, 189, 190, 354,
	355, 356, 357, 191, 358, 359, 0, 192, 360, 361,
	193, 194, 195, 0, 0, 362, 363, 972, 0, 196,
	365, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 419, 212, 366, 213, 367, 368, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 369, 220, 222, 221, 223, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 372, 373,
	374, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	375, 0, 376, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 377, 378, 0, 0, 379, 237, 0, 234,
	0, 0, 235, 380, 236, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 238, 239, 240, 0, 387, 388,
	241, 242, 243, 0, 245, 244, 0, 389, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 390, 535, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 310, 399, 308, 311, 312, 0, 313,
	300, 301, 314, 0, 315, 400, 401, 316, 0, 323,
	317, 318, 302, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 530, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 1273, 347, 182, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 188, 189, 190, 354, 355, 356, 357, 191,
	358, 359, 0, 192, 360, 361, 193, 194, 195, 0,
	0, 362, 363, 364, 0, 196, 365, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 419, 212, 366,
	213, 367, 368, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 369, 220,
	222, 221, 223, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 372, 373, 374, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 375, 0, 376, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 1272, 378,
	0, 0, 379, 237, 0, 234, 0, 0, 235, 380,
	236, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	238, 239, 240, 0, 387, 388, 241, 242, 243, 0,
	245, 244, 0, 389, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 310,
	399, 308, 311, 312, 0, 313, 300, 301, 314, 0,
	315, 400, 401, 316, 0, 323, 317, 318, 302, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 533, 347, 182,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 188, 189,
	190, 354, 355, 356, 357, 191, 358, 359, 0, 192,
	360, 361, 193, 194, 195, 0, 0, 362, 363, 972,
	0, 196, 365, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 419, 212, 366, 213, 367, 368, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 369, 220, 222, 221, 223, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	372, 373, 374, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 375, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 377, 378, 0, 0, 379, 237,
	0, 234, 0, 0, 235, 380, 236, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 238, 239, 240, 0,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 389,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 390, 535, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	0, 313, 300, 301, 314, 0, 315, 400, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 530, 405, 406, 0, 0, 333, 973,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 533, 347, 182, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 0, 192, 360, 361, 193, 194,
	195, 0, 0, 362, 363, 364, 0, 524, 365, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 419,
	212, 366, 213, 367, 368, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	369, 220, 222, 221, 223, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 375, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 0, 0, 379, 237, 0, 234, 0, 0,
	235, 380, 236, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 238, 239, 240, 0, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 389, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 390, 535, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 310, 399, 308, 956, 312, 0, 313, 300, 301,
	314, 0, 315, 400, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 530,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 932,
	347, 182, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	188, 189, 190, 354, 355, 356, 357, 191, 358, 359,
	0, 192, 360, 361, 193, 194, 195, 0, 0, 362,
	363, 364, 0, 196, 365, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 419, 212, 366, 213, 367,
	368, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 369, 220, 222, 221,
	223, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 372, 373, 374, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 375, 0, 376, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 931, 378, 0, 0,
	379, 237, 0, 234, 0, 0, 235, 380, 236, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 238, 239,
	240, 0, 387, 388, 241, 242, 243, 0, 245, 244,
	0, 389, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 310, 399, 308,
	311, 312, 0, 313, 300, 301, 314, 0, 315, 400,
	401, 316, 0, 323, 317, 318, 302, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 929, 347, 182, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 188, 189, 190, 354,
	355, 356, 357, 191, 358, 359, 0, 192, 360, 361,
	193, 194, 195, 0, 0, 362, 363, 364, 0, 196,
	365, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 419, 212, 366, 213, 367, 368, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 369, 220, 222, 221, 223, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 372, 373,
	374, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	375, 0, 376, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 928, 378, 0, 0, 379, 237, 0, 234,
	0, 0, 235, 380, 236, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 238, 239, 240, 0, 387, 388,
	241, 242, 243, 0, 245, 244, 0, 389, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 390, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 310, 399, 308, 311, 312, 0, 313,
	300, 301, 314, 0, 315, 400, 401, 316, 0, 323,
	317, 318, 302, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 925, 347, 182, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 188, 189, 190, 354, 355, 356, 357, 191,
	358, 359, 0, 192, 360, 361, 193, 194, 195, 0,
	0, 362, 363, 364, 0, 196, 365, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 419, 212, 366,
	213, 367, 368, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 369, 220,
	222, 221, 223, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 372, 373, 374, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 375, 0, 376, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 924, 378,
	0, 0, 379, 237, 0, 234, 0, 0, 235, 380,
	236, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	238, 239, 240, 0, 387, 388, 241, 242, 243, 0,
	245, 244, 0, 389, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 310,
	399, 308, 311, 312, 0, 313, 300, 301, 314, 0,
	315, 400, 401, 316, 0, 323, 317, 318, 302, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 922, 347, 182,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 188, 189,
	190, 354, 355, 356, 357, 191, 358, 359, 0, 192,
	360, 361, 193, 194, 195, 0, 0, 362, 363, 364,
	0, 196, 365, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 419, 212, 366, 213, 367, 368, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 369, 220, 222, 221, 223, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	372, 373, 374, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 375, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 921, 378, 0, 0, 379, 237,
	0, 234, 0, 0, 235, 380, 236, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 238, 239, 240, 0,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 389,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	0, 313, 300, 301, 314, 0, 315, 400, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 918, 347, 182, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 0, 192, 360, 361, 193, 194,
	195, 0, 0, 362, 363, 364, 0, 196, 365, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 419,
	212, 366, 213, 367, 368, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	369, 220, 222, 221, 223, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 375, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	917, 378, 0, 0, 379, 237, 0, 234, 0, 0,
	235, 380, 236, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 238, 239, 240, 0, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 389, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 310, 399, 308, 311, 312, 0, 313, 300, 301,
	314, 0, 315, 400, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 182, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 185, 186, 906, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 904, 347, 182, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 419, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 903,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 900, 347,
	182, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 0, 196, 365, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 419, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 377, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 898, 347, 182, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 196, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	896, 347, 182, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 895, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 891, 347, 182, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 893, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 781, 347, 182, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 419, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 783,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 779, 347,
	182, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 0, 196, 365, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 419, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 377, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 533, 347, 182, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 524, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 377, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 523, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 535, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 525, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 526, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	530, 405, 406, 0, 0, 333, 528, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	515, 347, 182, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 377, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 516, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 513, 347, 182, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	313, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 505, 347, 182, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 419, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 377,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 461, 347,
	182, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 188,
	189, 190, 354, 355, 356, 357, 191, 358, 359, 0,
	192, 360, 361, 193, 194, 195, 0, 0, 362, 363,
	364, 0, 196, 365, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 419, 212, 366, 213, 367, 368,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 369, 220, 222, 221, 223,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 372, 373, 374, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 375, 0, 376, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 377, 378, 0, 0, 379,
	237, 0, 234, 0, 0, 235, 380, 236, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 238, 239, 240,
	0, 387, 388, 241, 242, 243, 0, 245, 244, 0,
	389, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 310, 399, 308, 311,
	312, 0, 313, 300, 301, 314, 0, 315, 400, 401,
	316, 0, 323, 317, 318, 302, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 182, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 188, 189, 190, 354, 355, 356, 357, 191,
	358, 359, 0, 192, 360, 361, 193, 194, 195, 0,
	0, 362, 363, 364, 0, 196, 365, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 419, 212, 366,
	213, 367, 368, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 369, 220,
	222, 221, 223, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 372, 373, 374, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 375, 0, 376, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 377, 378,
	0, 0, 379, 237, 0, 234, 0, 0, 235, 380,
	236, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	238, 239, 240, 0, 387, 388, 241, 242, 243, 0,
	245, 244, 0, 389, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 310,
	399, 308, 311, 312, 0, 313, 300, 301, 314, 0,
	315, 400, 401, 316, 0, 323, 317, 318, 302, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 182, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 188, 189, 190, 354, 355,
	356, 357, 191, 358, 359, 0, 192, 360, 361, 193,
	194, 195, 0, 0, 362, 363, 364, 0, 196, 365,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	419, 212, 366, 213, 367, 368, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 369, 220, 222, 221, 223, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 372, 373, 374,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 375,
	0, 376, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 1985, 378, 0, 0, 379, 237, 0, 234, 0,
	0, 235, 380, 236, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 238, 239, 240, 0, 387, 388, 241,
	242, 243, 0, 245, 244, 0, 389, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 310, 399, 308, 311, 312, 0, 313, 300,
	301, 314, 0, 315, 400, 401, 316, 0, 323, 317,
	318, 302, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 182,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 188, 189,
	190, 354, 355, 356, 357, 191, 358, 359, 0, 192,
	360, 361, 193, 194, 195, 0, 0, 362, 363, 364,
	0, 196, 365, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 419, 212, 366, 213, 367, 368, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 369, 220, 222, 221, 223, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	372, 373, 374, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 375, 0, 376, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 1983, 378, 0, 0, 379, 237,
	0, 234, 0, 0, 235, 380, 236, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 238, 239, 240, 0,
	387, 388, 241, 242, 243, 0, 245, 244, 0, 389,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 310, 399, 308, 311, 312,
	0, 313, 300, 301, 314, 0, 315, 400, 401, 316,
	0, 323, 317, 318, 302, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 182, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 188, 189, 190, 354, 355, 356, 357, 191, 358,
	359, 0, 192, 360, 361, 193, 194, 195, 0, 0,
	362, 363, 364, 0, 196, 365, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 419, 212, 366, 213,
	367, 368, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 369, 220, 222,
	221, 223, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 372, 373, 374, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 375, 0, 376, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1972, 378, 0,
	0, 379, 237, 0, 234, 0, 0, 235, 380, 236,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 238,
	239, 240, 0, 387, 388, 241, 242, 243, 0, 245,
	244, 0, 389, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 310, 399,
	308, 311, 312, 0, 313, 300, 301, 314, 0, 315,
	400, 401, 316, 0, 323, 317, 318, 302, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 182, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 188, 189, 190, 354, 355, 356,
	357, 191, 358, 359, 0, 192, 360, 361, 193, 194,
	195, 0, 0, 362, 363, 364, 0, 196, 365, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 419,
	212, 366, 213, 367, 368, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	369, 220, 222, 221, 223, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 372, 373, 374, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 375, 0,
	376, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	377, 378, 0, 0, 379, 237, 0, 234, 0, 0,
	235, 380, 236, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 238, 239, 240, 0, 387, 388, 241, 242,
	243, 0, 245, 244, 0, 389, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 516, 304, 305, 306, 307, 0,
	309, 310, 399, 308, 311, 312, 0, 313, 300, 301,
	314, 0, 315, 400, 401, 316, 0, 323, 317, 318,
	302, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 182, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 353, 0, 1283, 0, 0, 188, 189, 190,
	354, 355, 356, 357, 191, 358, 359, 0, 192, 360,
	361, 193, 194, 195, 0, 0, 362, 363, 364, 0,
	196, 365, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 419, 212, 366, 213, 367, 368, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 369, 220, 222, 221, 223, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 372,
	373, 374, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 375, 0, 376, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 377, 378, 0, 0, 379, 237, 0,
	234, 0, 0, 235, 380, 236, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 238, 239, 240, 0, 387,
	388, 241, 242, 243, 0, 245, 244, 0, 389, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 310, 399, 308, 311, 312, 0,
	0, 300, 301, 314, 0, 315, 400, 401, 316, 0,
	323, 317, 318, 302, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 182, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	188, 189, 190, 354, 355, 356, 357, 191, 358, 359,
	0, 192, 360, 361, 193, 194, 195, 0, 0, 362,
	363, 364, 0, 196, 365, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 419, 212, 366, 213, 367,
	368, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 369, 220, 222, 221,
	223, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 372, 373, 374, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 375, 0, 376, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 377, 378, 0, 0,
	379, 237, 0, 234, 0, 0, 235, 380, 236, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 238, 239,
	240, 0, 387, 388, 241, 242, 243, 0, 245, 244,
	0, 389, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 745, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 310, 399, 308,
	311, 312, 0, 313, 300, 301, 314, 0, 315, 400,
	401, 316, 0, 323, 317, 318, 302, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 182, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 188, 189, 190, 354, 355, 356, 357,
	191, 358, 359, 0, 192, 360, 361, 193, 194, 195,
	0, 0, 362, 363, 364, 0, 196, 365, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 419, 212,
	366, 213, 367, 368, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 369,
	220, 222, 221, 223, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 372, 373, 374, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 375, 0, 376,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 377,
	378, 0, 0, 379, 237, 0, 234, 0, 0, 235,
	380, 236, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 238, 239, 240, 0, 387, 388, 241, 242, 243,
	0, 245, 244, 0, 389, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 0, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 0, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 0, 0, 303, 304, 305, 306, 307, 0, 309,
	310, 399, 308, 311, 312, 0, 313, 300, 301, 314,
	0, 315, 400, 401, 316, 0, 323, 317, 318, 302,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 1067,
	1068, 0, 1097, 1098, 1099, 1107, 1108, 1109, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1070, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 1068,
	0, 1097, 1098, 1099, 1107, 1108, 1109, 1069, 0, 0,
	0, 0, 0, 1089, 1100, 0, 0, 0, 0, 0,
	1086, 1070, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 1093,
	1094, 1095, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 1112, 0, 0, 0, 0, 0, 1092, 1093, 1094,
	1095, 0, 0, 0, 0, 0, 1075, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 1104,
	1112, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1105, 0,
	0, 1067, 1068, 0, 1097, 1098, 1099, 1107, 1108, 1109,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1070, 0, 0, 1111, 1103, 0,
	0, 1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106, 0,
	1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 1069,
	0, 0, 0, 0, 0, 1089, 0, 1921, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 1103, 0, 0,
	1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106, 0, 1080,
	1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 0, 0,
	0, 0, 0, 0, 0, 0, 1920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 1093, 1094, 1095, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 1067, 1068, 0, 1097, 1098, 1099,
	1107, 1108, 1109, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 1104, 1112, 0, 0, 0, 1070, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 1089, 1102,
	0, 0, 0, 0, 0, 1086, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 1093, 1094, 1095, 0, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 1104, 1112, 0, 0, 0,
	0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107, 1108,
	1109, 1105, 0, 0, 1110, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1070, 0, 0, 1111, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 1081, 1082, 1088, 1087, 1083, 1084, 1085,
	1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076,
	1077, 1096, 0, 0, 0, 0, 0, 0, 0, 1872,
	0, 1092, 1093, 1094, 1095, 0, 1091, 0, 0, 0,
	1075, 0, 0, 0, 0, 1067, 1068, 0, 1097, 1098,
	1099, 1107, 1108, 1109, 1105, 0, 0, 0, 0, 0,
	0, 1100, 0, 1104, 1112, 0, 0, 0, 1070, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 1089,
	1102, 0, 0, 0, 0, 0, 1086, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 1081, 1082, 1088, 1087,
	1083, 1084, 1085, 1106, 1101, 1080, 1078, 1079, 1071, 1072,
	1073, 1074, 1076, 1077, 0, 0, 0, 0, 2547, 0,
	0, 0, 0, 0, 1092, 1093, 1094, 1095, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 1104, 1112, 0, 0,
	0, 0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107,
	1108, 1109, 1105, 0, 0, 1110, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 1111,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 1081, 1082, 1088, 1087, 1083, 1084,
	1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074,
	1076, 1077, 1096, 0, 0, 0, 2497, 0, 0, 0,
	0, 0, 1092, 1093, 1094, 1095, 0, 1091, 0, 0,
	0, 1075, 0, 0, 0, 0, 1067, 1068, 0, 1097,
	1098, 1099, 1107, 1108, 1109, 1105, 0, 0, 0, 0,
	0, 0, 1100, 0, 1104, 1112, 0, 0, 0, 1070,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	1089, 1102, 0, 0, 0, 0, 0, 1086, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 0, 0, 1081, 1082, 1088,
	1087, 1083, 1084, 1085, 1106, 1101, 1080, 1078, 1079, 1071,
	1072, 1073, 1074, 1076, 1077, 0, 0, 0, 0, 2449,
	0, 0, 0, 0, 0, 1092, 1093, 1094, 1095, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 1104, 1112, 0,
	0, 0, 0, 0, 1067, 1068, 0, 1097, 1098, 1099,
	1107, 1108, 1109, 1105, 0, 0, 1110, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1070, 0, 0,
	1111, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 1081, 1082, 1088, 1087, 1083,
	1084, 1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1096, 0, 0, 0, 2419, 0, 0,
	0, 0, 0, 1092, 1093, 1094, 1095, 0, 1091, 0,
	0, 0, 1075, 0, 0, 0, 0, 1067, 1068, 0,
	1097, 1098, 1099, 1107, 1108, 1109, 1105, 0, 0, 0,
	0, 0, 0, 1100, 0, 1104, 1112, 0, 0, 0,
	1070, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 1089, 1102, 0, 0, 0, 0, 0, 1086, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 1081, 1082,
	1088, 1087, 1083, 1084, 1085, 1106, 1101, 1080, 1078, 1079,
	1071, 1072, 1073, 1074, 1076, 1077, 0, 0, 0, 0,
	2414, 0, 0, 0, 0, 0, 1092, 1093, 1094, 1095,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 0, 1104, 1112,
	0, 0, 0, 0, 0, 1067, 1068, 0, 1097, 1098,
	1099, 1107, 1108, 1109, 1105, 0, 0, 1110, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 1111, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 1081, 1082, 1088, 1087,
	1083, 1084, 1085, 1106, 0, 1080, 1078, 1079, 1071, 1072,
	1073, 1074, 1076, 1077, 1096, 0, 0, 0, 2410, 0,
	0, 0, 0, 0, 1092, 1093, 1094, 1095, 0, 1091,
	0, 0, 0, 1075, 0, 0, 0, 0, 1067, 1068,
	0, 1097, 1098, 1099, 1107, 1108, 1109, 1105, 0, 0,
	0, 0, 0, 0, 1100, 0, 1104, 1112, 0, 0,
	0, 1070, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 1089, 1102, 0, 0, 0, 0, 0, 1086,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 1081,
	1082, 1088, 1087, 1083, 1084, 1085, 1106, 1101, 1080, 1078,
	1079, 1071, 1072, 1073, 1074, 1076, 1077, 0, 0, 0,
	0, 2345, 0, 0, 0, 0, 0, 1092, 1093, 1094,
	1095, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 1104,
	1112, 0, 0, 0, 0, 0, 1067, 1068, 0, 1097,
	1098, 1099, 1107, 1108, 1109, 1105, 0, 0, 1110, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 1070,
	0, 0, 1111, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 0, 0, 1081, 1082, 1088,
	1087, 1083, 1084, 1085, 1106, 0, 1080, 1078, 1079, 1071,
	1072, 1073, 1074, 1076, 1077, 1096, 0, 0, 0, 2311,
	0, 0, 0, 0, 0, 1092, 1093, 1094, 1095, 0,
	1091, 0, 0, 0, 1075, 0, 0, 0, 0, 1067,
	1068, 0, 1097, 1098, 1099, 1107, 1108, 1109, 1105, 0,
	0, 0, 0, 0, 0, 1100, 0, 1104, 1112, 0,
	0, 0, 1070, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 1089, 1102, 0, 0, 0, 0, 0,
	1086, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106, 1101, 1080,
	1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 0, 0,
	0, 0, 2310, 0, 0, 0, 0, 0, 1092, 1093,
	1094, 1095, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	1104, 1112, 0, 0, 0, 0, 0, 1067, 1068, 0,
	1097, 1098, 1099, 1107, 1108, 1109, 1105, 0, 0, 1110,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 1111, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 1081, 1082,
	1088, 1087, 1083, 1084, 1085, 1106, 0, 1080, 1078, 1079,
	1071, 1072, 1073, 1074, 1076, 1077, 1096, 0, 0, 0,
	2275, 0, 0, 0, 0, 0, 1092, 1093, 1094, 1095,
	0, 1091, 0, 0, 0, 1075, 0, 0, 0, 0,
	1067, 1068, 0, 1097, 1098, 1099, 1107, 1108, 1109, 1105,
	0, 0, 0, 0, 0, 0, 1100, 0, 1104, 1112,
	0, 0, 0, 1070, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 1089, 1102, 0, 0, 0, 0,
	0, 1086, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106, 1101,
	1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 0,
	0, 0, 0, 2118, 0, 0, 0, 0, 0, 1092,
	1093, 1094, 1095, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 1104, 1112, 0, 0, 0, 0, 0, 1067, 1068,
	0, 1097, 1098, 1099, 1107, 1108, 1109, 1105, 0, 0,
	1110, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 1111, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 1081,
	1082, 1088, 1087, 1083, 1084, 1085, 1106, 0, 1080, 1078,
	1079, 1071, 1072, 1073, 1074, 1076, 1077, 1096, 0, 0,
	0, 2094, 0, 0, 0, 0, 0, 1092, 1093, 1094,
	1095, 0, 1091, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106,
	1101, 1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077,
	0, 0, 0, 0, 1533, 0, 0, 1067, 1068, 0,
	1097, 1098, 1099, 1107, 1108, 1109, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 1096, 0, 0, 0, 0,
	1070, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 0, 0, 0, 1067, 1068, 0, 1097,
	1098, 1099, 1107, 1108, 1109, 1069, 0, 0, 1105, 0,
	0, 1089, 1100, 0, 0, 0, 0, 0, 1086, 1070,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 1093, 1094, 1095,
	0, 0, 0, 0, 0, 1075, 2610, 1103, 0, 0,
	1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106, 0, 1080,
	1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 1104, 1112,
	1842, 0, 0, 0, 0, 1092, 1093, 1094, 1095, 0,
	0, 0, 0, 0, 1075, 0, 1912, 1110, 0, 1911,
	0, 0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107,
	1108, 1109, 0, 0, 0, 1102, 0, 1104, 1112, 1100,
	0, 0, 1090, 0, 1815, 0, 1070, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 1069, 0, 0, 1102, 0, 0, 1089, 0, 0,
	0, 1090, 0, 0, 1086, 0, 2609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 1101, 0,
	0, 1816, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 1093, 1094, 1095, 0, 1105, 0, 0,
	0, 1075, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 1104, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 1103, 0, 1090, 1081,
	1082, 1088, 1087, 1083, 1084, 1085, 1106, 0, 1080, 1078,
	1079, 1071, 1072, 1073, 1074, 1076, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 1081, 1082,
	1088, 1087, 1083, 1084, 1085, 1106, 0, 1080, 1078, 1079,
	1071, 1072, 1073, 1074, 1076, 1077, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1630, 0, 0, 0, 0, 1091, 1067, 1068, 0, 1097,
	1098, 1099, 1107, 1108, 1109, 0, 0, 0, 0, 0,
	0, 0, 1100, 1105, 0, 0, 1629, 0, 0, 1070,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 1067, 1068, 1086, 1097, 1098,
	1099, 1107, 1108, 1109, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 1111, 1103, 0, 0, 1081, 1082, 1088, 1087, 1083,
	1084, 1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1069, 0, 1092, 1093, 1094, 1095, 1089,
	0, 0, 0, 0, 1075, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 1092, 1093, 1094, 1095, 0, 0,
	0, 0, 0, 1075, 1102, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 601, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 1068, 0, 1097, 1098,
	1099, 1107, 1108, 1109, 0, 0, 0, 0, 0, 0,
	0, 1100, 1096, 0, 0, 0, 0, 0, 1070, 0,
	0, 1111, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 1105, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 1103, 1086, 0, 1081, 1082,
	1088, 1087, 1083, 1084, 1085, 1106, 0, 1080, 1078, 1079,
	1071, 1072, 1073, 1074, 1076, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 1093, 1094, 1095, 0, 0,
	0, 0, 0, 1075, 1103, 0, 0, 1081, 1082, 1088,
	1087, 1083, 1084, 1085, 1106, 0, 1080, 1078, 1079, 1071,
	1072, 1073, 1074, 1076, 1077, 0, 1104, 1112, 0, 0,
	0, 0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107,
	1108, 1109, 0, 0, 0, 1110, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 1111,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 1093, 1094, 1095, 0, 1091, 0, 0,
	0, 1075, 0, 0, 0, 0, 1918, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2098, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 0, 0, 1081, 1082, 1088,
	1087, 1083, 1084, 1085, 1106, 1101, 1080, 1078, 1079, 1071,
	1072, 1073, 1074, 1076, 1077, 0, 0, 0, 0, 0,
	0, 0, 1067, 1068, 0, 1097, 1098, 1099, 1107, 1108,
	1109, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	1096, 0, 1913, 0, 0, 1070, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 1067, 1068, 0, 1097, 1098, 1099, 1107, 1108, 1109,
	1069, 0, 0, 1105, 0, 0, 1089, 1100, 0, 0,
	0, 0, 0, 1086, 1070, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 1093, 1094, 1095, 0, 0, 0, 0, 0,
	1075, 0, 1103, 0, 0, 1081, 1082, 1088, 1087, 1083,
	1084, 1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1104, 1112, 0, 0, 0, 0, 0,
	1092, 1093, 1094, 1095, 0, 0, 0, 0, 0, 1075,
	0, 0, 1110, 0, 0, 0, 0, 0, 1067, 1068,
	0, 1097, 1098, 1099, 1107, 1108, 1109, 0, 0, 0,
	1102, 0, 1104, 1112, 1100, 0, 0, 1090, 1871, 0,
	0, 1070, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 1069, 0, 0, 1102,
	0, 0, 1089, 0, 0, 0, 1090, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 1878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 1093, 1094,
	1095, 0, 1105, 0, 0, 0, 1075, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 1104,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 1103, 0, 1090, 1081, 1082, 1088, 1087, 1083, 1084,
	1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074,
	1076, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 1081, 1082, 1088, 1087, 1083, 1084, 1085,
	1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076,
	1077, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 1067, 1068, 0, 1097, 1098, 1099, 1107, 1108, 1109,
	0, 0, 0, 0, 0, 0, 0, 1100, 1105, 0,
	0, 0, 0, 0, 1070, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	1067, 1068, 1086, 1097, 1098, 1099, 1107, 1108, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 1111, 1103, 0, 0,
	1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106, 0, 1080,
	1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077, 1069, 0,
	1092, 1093, 1094, 1095, 1089, 0, 0, 0, 0, 1075,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 1092,
	1093, 1094, 1095, 0, 0, 0, 0, 0, 1075, 1102,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 1112, 1067, 1068, 0, 1097, 1098, 1099, 1107,
	1108, 1109, 0, 1101, 0, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 1070, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 1096, 0,
	0, 1069, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 1091, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 1092, 1093, 1094, 1095, 0, 0, 0, 0,
	0, 1075, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 1104, 1112, 0, 0, 0, 0,
	1103, 0, 0, 1081, 1082, 1088, 1087, 1083, 1084, 1085,
	1106, 0, 1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 1081, 1082, 1088, 1087, 1083, 1084, 1085, 1106,
	0, 1080, 1078, 1079, 1071, 1072, 1073, 1074, 1076, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 1336, 1325, 1355, 1314, 1346,
	1345, 0, 0, 1316, 1315, 0, 0, 0, 0, 0,
	1357, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 0,
	1343, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 1103, 0, 0, 1081, 1082, 1088, 1087, 1083,
	1084, 1085, 1106, 0, 1080, 1078, 1079, 1071, 1072, 1073,
	1074, 1076, 1077, 1340, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 1324, 0, 0, 0, 0, 0, 0, 1329, 1327,
	1330, 1331, 1332, 1333, 1334, 0, 1354, 0, 0, 0,
	0, 0, 0, 1318, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 1325, 1355, 1314, 1346, 1345, 0,
	0, 1316, 1315, 0, 0, 0, 0, 0, 1357, 1356,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 554, 1326, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 1351, 0, 1343, 1342,
	0, 0, 0, 0, 0, 0, 1337, 557, 1341, 0,
	1458, 1456, 1457, 1460, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	0, 1340, 1338, 1339, 560, 0, 0, 0, 0, 1321,
	0, 0, 566, 567, 0, 0, 0, 576, 0, 0,
	1335, 1322, 0, 0, 0, 0, 0, 0, 0, 1324,
	1359, 581, 561, 0, 0, 0, 1329, 1327, 1330, 1331,
	1332, 1333, 1334, 1319, 1354, 0, 0, 1352, 1353, 0,
	0, 1318, 1317, 0, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 1358, 0, 0, 0, 1320, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 1326, 0, 0, 0, 563, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 0, 0, 0,
	0, 565, 572, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 1359, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 1319, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 1358, 0, 0, 0, 556, 573, 583, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 0, 0, 0, 578, 0, 0, 0,
	0, 584, 0, 0, 0, 0, 571, 575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577,
}
var sqlPact = [...]int{

	284, -1000, -39, -1000, -1000, -1000, 109, -1000, -1000, -1000,
	-1000, 108, 106, 104, -1000, 103, 102, 99, 98, 97,
	96, 95, 88, 85, 83, 81, -1000, 80, -1000, -1000,
	-1000, -1000, 77, 76, 69, 68, 67, 66, 65, -1000,
	1121, 22726, 64, 63, 1374, -1000, 37229, 62, 61, 60,
	59, 1477, 58, 56, 55, 26870, 987, 1411, 54, 53,
	50, 46, 40, 1048, 36886, 3633, 1510, 1142, 1664, 36540,
	22380, 1632, 1452, 36194, -1000, -1000, 35848, 37, 35, 32,
	31, 30, -1000, -1000, 35502, 29, 28, 26, 25, 24,
	23, 22, 21, 20, 19, 18, 17, 16, 15, -1000,
	14, 9, 7, -1000, 44623, 3, -8, -10, 1047, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 860, 90, -1000, 864, 335, 2976, 8466,
	968, 966, 961, 957, 1107, 39287, 37229, -11, -66, -14,
	-1000, 1940, 609, 19899, 284, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26524,
	26178, 35156, 34810, 6321, 700, -1000, -46, 23414, 37229, -1000,
	1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15258, 14900, 520, 1, -1000,
	-1000, -1000, -1000, -1000, 34464, -1000, 34118, 33772, 33426, 1537,
	33080, -1000, -1000, -1000, -1000, -1000, 32734, -1000, -1000, 1921,
	1669, 1662, 25832, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 32391, 32045, 31699, 31353, 31007,
	435, -1000, -1000, -1000, 18114, -1000, -1000, -1000, -1000, -15,
	-1000, -16, -1000, -17, -19, -23, -24, -1000, -25, -31,
	-1000, -32, -34, -1000, -35, -37, 30661, 802, 1264, -1000,
	-1000, -43, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	37229, -1000, 15972, -1000, 433, -1000, 1651, -1000, 15972, -1000,
	1262, -1000, -1000, -1000, -1000, -1000, 37229, -1000, -1000, -1000,
	-1000, -1000, -1000, 2288, 1160, 431, 30315, -1000, 1587, -1000,
	557, 724, -1000, -1000, -1000, 9537, 114, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1495, 23771, 1505, 2062,
	1884, 2279, 1468, 1846, 1839, 1824, 1795, 1745, 2278, 931,
	2274, 1799, 979, 2273, 1729, 1383, 631, 2272, 1649, 1642,
	-1000, -1000, -1000, -1000, 891, -1000, -1000, -1000, 28242, -1000,
	-1000, 725, 874, 864, -1000, -1000, -1000, 1451, 1923, 1923,
	1923, 2093, 230, 222, -1000, 90, -1000, 1478, -1000, 1148,
	-1000, -1000, -1000, -1000, -1000, 43951, -1000, -1000, 15972, 15972,
	15972, 15972, 15972, 1135, 471, -1000, 430, 429, 7751, -1000,
	-1000, 2253, -1000, -1000, -1000, 243, -1000, -1000, 15972, 1,
	-1000, -1000, -1000, -1000, 425, 2266, -1000, 614, -1000, -1000,
	-1000, 567, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1693, 423, 422, 416, -1000, 415, -1000, -1000, 414,
	413, 412, 411, 408, 406, 405, 404, 402, 401, 400,
	397, 396, 395, 394, 1014, -1000, 585, -1000, -1000, 585,
	585, -1000, 375, 375, 380, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 375, -1000, -1000, -1000, 524, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	392, 1277, -1000, -1000, 1277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 698, 38601, -48, 37229, -1000, 391, -48, -1000,
	-1000, 389, -1000, 10965, 10965, -1000, -1000, -1000, -1000, -1000,
	10251, 1953, -1000, 3382, -155, 239, 509, -1000, 18828, 21678,
	-1000, -1000, 1176, 1778, 837, -1000, 922, 1771, 477, -1000,
	1204, -1000, 1237, 1763, -101, 1725, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 24114, 23414, -46, -54, -1000, -1000, -1000,
	5964, 43951, -1000, 43951, -1000, 748, 20611, 1, -1000, -1000,
	-1000, -1000, 385, 1330, 2151, 1328, -1000, 570, -1000, 251,
	-1000, 29969, 570, 1318, -1000, -1000, -1000, 28242, -1000, 37229,
	-1000, 37229, -1000, 838, -1000, 38944, 118, 1760, -1000, -1000,
	118, 1757, -1000, 117, 1754, -1000, -1000, 1275, 1752, -1000,
	-54, 1751, -1000, -1000, 15972, -73, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 609, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 29623, 23070, 1479, 536,
	43951, 2150, 44556, 24114, 43951, 23070, -1000, -1000, 37229, -1000,
	15972, -1000, 2139, 1441, -49, -1000, -1000, -1000, -1000, -1000,
	1377, 1543, 705, 1299, 9537, 9537, 1878, -1000, 113, 6321,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29277, -1000,
	-1000, -1000, 1156, 37229, -1000, -1000, 1690, -1000, 23070, 37229,
	-1000, 37229, -1000, 37229, -1000, 37229, -1000, 37229, -1000, -1000,
	-1000, -1000, -1000, 584, -1000, 1689, -1000, -1000, 37229, -1000,
	1369, -1000, -1000, -1000, 28934, 28588, -1000, 882, 718, -1000,
	-1000, 119, -1000, 37229, 2056, 556, -1000, 1451, 1432, 1677,
	615, 1268, 1528, 14542, 1529, 15972, 90, -1000, -1000, 90,
	90, 9180, -1000, -1000, -1000, 37229, -1000, 44408, 44556, 6321,
	710, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972,
	15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972,
	15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972,
	15972, 15972, 15972, 1508, 15972, 692, 15972, 15972, 15972, 15972,
	2549, 1076, 372, 1088, -1000, 2222, 2222, 2222, 44010, 44010,
	358, 471, -1000, 15972, -1000, 39, 15972, 222, 42050, -47,
	7394, -1000, -1000, -1000, 14185, 581, 43951, 1, 6678, -1000,
	2247, 1172, 1705, 1588, 383, 513, 511, 502, 466, 15972,
	15972, 13828, 13470, 13112, 16686, 12754, 15972, 8108, 15972, 15972,
	15972, 15972, 12396, 12038, -1000, 382, -1000, -1000, -1000, -1000,
	2246, -1000, -1000, 2241, -1000, 709, 707, 2239, -1000, -49,
	-1000, 38601, -1000, 37229, -48, 2136, 37229, -1000, 84, -1000,
	42856, -1000, 84, -74, -1000, 1454, 1444, 20255, 1389, 1155,
	1155, 1155, -1000, 381, 452, 509, 5231, 11680, -1000, 27213,
	1208, 136, 212, 18471, 1953, -1000, 37229, -59, 1023, -1000,
	25486, 2046, 1999, 1965, 28242, 2107, 39, 2013, 1640, 690,
	28242, 1997, 686, 2106, 39, 1639, 685, 37229, 6321, 1994,
	505, -1000, 37229, -1000, -1000, -1000, 1638, -75, -1000, -1000,
	25143, 2128, 1750, -1000, 2151, -1000, 37229, 2091, 853, 898,
	853, 1557, 853, 925, -1000, 1749, -1000, 1024, -1000, 2121,
	37229, 1256, 1316, -1000, -1000, 697, 1748, 576, 263, 2119,
	263, 20966, -1000, 37229, -1000, 37229, -1000, -1000, 37229, -1000,
	37229, -1000, 37229, 37229, -1000, 37229, 37229, -80, 43951, 3775,
	24800, 680, -1000, 605, 25143, 2684, -82, -1000, 687, -1000,
	-1000, -1000, -1000, 234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	380, 1014, 375, 375, 375, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 524, -1000, -1000, 585, 585, 585, -1000, -1000,
	-83, -1000, 1637, 537, -85, 632, -49, -1000, 1277, -1000,
	1214, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2263, -1000, 2244, -1000, -1000, 2235,
	-50, -1000, -50, -1000, 6321, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 37229, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 390, -1000, -1000, -1000, -1000, -1000, -1000, 37229, 37229,
	37229, -1000, 28242, 571, 1686, -1000, 2026, 1432, 1677, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43951, -1000, 357,
	-1000, -1000, 43951, 859, 1490, -1000, 1490, -52, -1000, 42593,
	1455, 37229, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 553, 1013, 1013, 749, 749, 749, 749,
	2145, 743, 1183, 723, 3531, 3531, 3531, 3531, 3531, 3531,
	3531, 3531, 333, 1127, 1127, 333, 333, 333, 333, 333,
	3531, 3531, 3531, 44010, 4822, 1219, 15972, 15972, 679, 1071,
	372, 1219, 15972, 1219, 1219, 1219, 1219, -1000, 1153, -1000,
	-1000, -1000, -1000, 1635, 369, 16686, 16686, -1000, -1000, -1000,
	7751, 17043, -1000, -1000, -1000, -1000, 365, 15972, -1000, 42198,
	-228, 211, -87, -1000, 15972, 451, -109, -1000, 826, -1000,
	15972, -1000, 0, 15972, 15972, 15972, 210, -1000, 206, -1000,
	677, -1000, 675, 673, 668, -1000, 364, 1143, 359, 355,
	15972, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43688,
	40301, 203, -1000, 1631, -87, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 202, -1000, 201, -1000, 43561, -87, 200, 4238,
	-1000, 16686, 16686, 16686, 7751, 353, 197, -1000, 42466, -1000,
	43522, 11322, 11322, 11322, 196, 43293, 15972, -87, 40018, 39979,
	4656, -88, -90, -1000, -91, -1000, 2233, -98, 194, 551,
	549, 193, -1000, -1000, 346, -99, 576, 10965, 19542, 6321,
	-1000, 576, 10251, -1000, 20255, 20255, 1446, 1414, 20255, -1000,
	-1000, -1000, -1000, 27213, 501, 509, 27213, -1000, 2212, 1410,
	191, -1000, -1000, -1000, 37229, 339, -1000, 509, 190, 970,
	37229, 37229, 37229, -1000, -1000, 1313, 38258, 1307, 44556, 37229,
	-1000, 338, 336, 1429, 1426, 37229, 37229, 37915, 37572, 37229,
	982, 39, -1000, 548, 334, 37229, 916, 514, 37229, 39,
	-1000, 319, 37229, 903, -1000, 507, 1549, 1274, -1000, 747,
	1629, 37229, 188, -104, -53, 44556, -1000, -1000, -1000, -1000,
	-1000, 37229, 421, 37229, 39, 37229, -1000, -1000, 37229, -1000,
	-1000, 2210, -1000, 853, -1000, -1000, -1000, -1000, -1000, -1000,
	853, 37229, 2257, 39, 37229, 1747, 1825, 483, 37229, 1528,
	15972, 959, -1000, 19185, 595, 37229, 888, 82, -1000, -1000,
	-1000, 504, 37229, -1000, -1000, 118, 118, -1000, 117, 1275,
	-54, -1000, 15972, -1000, -1000, 37229, 24114, -113, -1000, -1000,
	44556, -1000, 468, 708, -1000, 2206, 525, 24114, 37229, 9537,
	9537, -1000, 1480, -1000, -1000, 889, -1000, 953, -1000, -1000,
	-1000, -1000, 9537, -1000, -60, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1232, 1100, -1000, -1000, -1000, 859, -1000, 15972,
	-1000, -1000, -1000, 9180, -1000, -1000, -1000, 37229, -123, 15972,
	1219, 1219, 15972, 16686, 16686, -1000, 1219, -1000, -1000, -1000,
	-1000, -1000, 1628, 317, 15972, 44556, 3974, 3597, -116, -1000,
	15972, -55, -1000, 15972, -1000, 41927, -1000, -1000, 454, 1827,
	-1000, 15972, 43145, 185, 10608, -1000, 42915, -3, -3, -1000,
	2256, 1348, 1174, 960, 848, 2202, -1000, 21322, 577, 1222,
	41779, 44408, 44556, -1000, 15972, -1000, -1000, 1619, 15972, -1000,
	44408, 44556, 16686, 16686, 16686, 16686, 16686, 16686, 16686, 16686,
	16686, 16686, 16686, 16686, 16686, 16686, 16686, 16686, 16686, 16686,
	16686, 1418, 16686, 2186, 2186, 2186, -57, 15972, -1000, 1675,
	1619, 15972, 15972, 44556, 183, 182, 179, -1000, 15972, -87,
	15972, 15972, 15972, -1000, -1000, -1000, 177, -1000, 2199, -1000,
	-1000, -1000, -1000, 2684, -1000, 1584, -1000, -114, -1000, 1953,
	-1000, 1584, -1000, -1000, 1446, -1000, 316, 15972, 20255, -1000,
	444, -1000, -119, -1000, 27213, -1000, 442, -226, -1000, 500,
	-1000, 509, 310, 37229, 27213, -1000, -1000, -1000, 667, 665,
	1744, -1000, 1306, -1000, 599, -1000, 1072, 15972, 17757, 307,
	306, 1074, -1000, 1738, 1275, 1737, 1275, -1000, -59, 905,
	-1000, 22034, 15972, -1000, 661, 22034, -1000, -1000, 15972, -1000,
	657, 22034, 525, 1615, 727, -1000, 732, -1000, 1540, -1000,
	25143, 303, 37229, 302, -1000, 301, -1000, -1000, -1000, 2151,
	-1000, -1000, 299, 37229, 1388, 483, 24457, -1000, 570, 888,
	-1000, 43951, -1000, 888, 8823, 1954, -121, -1000, -1000, -1000,
	576, 20966, 20255, 10251, -124, -1000, -1000, -1000, -1000, 43951,
	-60, 1887, 1887, -1000, 2197, -1000, 441, 176, -1000, 27899,
	-1000, -60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37229,
	1520, 6321, 37229, 37229, 1239, 41656, -1000, 2014, 6321, 2114,
	1219, 3159, 465, 15972, 44556, 44153, -126, 15972, 15972, -1000,
	175, 15972, 440, 43951, -1000, -1000, -1000, 43951, 15972, 2224,
	15972, 172, 170, 169, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 167, -1000, -1000, 39630, 15972, 165, -1000, 163,
	159, 43951, 1675, 43951, -1000, -1000, 512, 512, 844, 844,
	844, 844, 2186, 225, 664, 792, 703, 703, 703, 681,
	349, 349, 703, 703, 703, 1609, 1386, 289, 4622, 15972,
	158, -1000, -1000, 43951, 43951, 156, -1000, -1000, -1000, -87,
	4533, 41508, 41385, -1000, 150, 147, 1580, 2090, -1000, 20255,
	1580, -1000, 37229, 43951, -1000, -155, -1000, 2195, -1000, -1000,
	1410, -1000, 5602, 27213, 37229, -129, -1000, 37229, 37229, 37229,
	1733, -1000, 2742, -1000, 41237, -131, -1000, 292, 2050, 15972,
	-1000, -1000, 288, 17757, 37229, -1000, 1416, 1481, 622, 37229,
	-1000, 37229, -1000, 37229, 37229, 37229, -1000, 286, 1, -132,
	37229, -1000, -134, 37229, -1000, -1000, 24114, 684, -1000, 1101,
	1531, -1000, 17757, 283, 37229, 25143, 2118, -1000, 17757, 1252,
	1392, 483, 24457, -1000, 697, -1000, -1000, -61, -1000, 320,
	39, 888, -1000, -62, -1000, 499, 1866, -1000, 1865, 439,
	-1000, -1000, -65, 282, -1000, 497, 492, -1000, -67, -1000,
	516, -1000, -1000, -1000, -1000, -1000, -1000, 2014, 15972, 15972,
	44153, -139, -1000, 1219, 1219, -1000, 41114, -1000, 43951, -1000,
	42915, -1000, -1000, -1000, -1000, 1096, -1000, 40966, -1000, -1000,
	-1000, -1000, 16686, 1603, 281, 44556, 40843, -1000, -1000, 15972,
	-1000, -1000, -1000, -1000, 574, 15972, 15972, 1953, 574, -142,
	509, -1000, -1000, -1000, 2193, -1000, -144, -1000, -1000, -1000,
	-1000, 37229, -1000, 37229, -1000, 6321, 37229, 1589, 1302, -1000,
	-1000, 1400, 280, 16686, 37229, -1000, 1032, 17757, 2014, 1,
	6321, 2014, 40695, 6678, -145, -147, 1298, -1000, 1283, 15972,
	-1000, 44556, 1275, 1275, -1000, 650, 641, 15972, 639, -1000,
	634, -1000, -72, 22034, -1000, -1000, 2087, 1117, -157, 17757,
	-158, 146, 39, -160, 37229, -1000, 483, 24457, -1000, 1825,
	1842, 37229, 1897, -1000, -1000, 279, 274, 272, -1000, 27556,
	27556, 24114, 24114, 1520, -1000, 37229, -1000, 1219, 1219, -1000,
	-1000, 142, 1222, 2085, -1000, 4786, 16686, 44556, -166, -1000,
	40572, -1000, 37229, 43951, -87, -1000, -1000, 27213, 438, -1000,
	-1000, 1124, -1000, -1000, 37229, 1305, -1000, -1000, 15972, 4622,
	266, 1540, 265, -1000, -1000, -1000, -1000, -1000, -1000, 2050,
	0, -1000, 940, -1000, -1000, 43951, 2042, -1000, -1000, 37229,
	37229, -3, 264, 262, -1000, 1138, 37229, 1032, -172, -1000,
	1540, -1000, 1032, 259, 24457, -1000, 1388, 751, -174, 37229,
	-1000, -1000, 7035, 24114, 24114, -1000, -175, -1000, -1000, -1000,
	-180, -1000, 885, 15972, 4786, -181, -1000, -1000, -76, -1000,
	2112, -1000, -1000, -1000, -1000, 1730, 40424, 1356, 37229, -1000,
	37229, 2014, 140, 37229, 603, 6321, -1000, -1000, 137, 15972,
	15972, 258, 256, 255, 1540, 1032, -1000, 1540, 17757, -1000,
	1392, 818, -1000, 576, -1000, -182, -183, -1000, -1000, 132,
	16329, 16329, -87, -1000, 37229, 253, 1716, -1000, 1241, 1240,
	130, -188, -1000, -1000, 251, -1000, 15972, -1000, 2224, -189,
	-190, 37229, 37229, 37229, -1000, 1540, -1000, -191, -1000, 20966,
	-1000, 525, 525, -1000, -1000, -1000, 17400, 1118, 878, 42427,
	-1000, -1000, -1000, 37229, -1000, 1246, 1244, 851, -1000, -1000,
	-1000, -1000, -1000, 1356, 43951, -1000, -1000, -196, -198, -199,
	-1000, 1032, -167, -1000, -1000, 2166, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1849, -1000, 611, 1409, 1409, 1241, 250,
	247, 1221, 1540, -1000, 15615, -1000, 2174, -1000, -1000, 1399,
	-1000, -1000, 1055, 1041, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 128, 6321, 126, 6321, -1000, 590, -1000, 588,
	244, 1381, -58, 9894, 669, 276, -97, -1000, -201, -1000,
	43951, -1000, -1000, 237, -1000, 9894, 1055, -1000, 9894, 9894,
	-207, -1000, -1000, -208, -1000, -64, 1041, -159, -1000, -1000,
	1041, -1000,
}
var sqlPgo = [...]int{

	0, 2694, 2693, 1704, 2186, 2690, 2688, 2687, 2685, 2684,
	2674, 2668, 2667, 2664, 2663, 2662, 2660, 2659, 2655, 2650,
	2648, 2647, 2645, 2642, 2176, 2641, 2160, 2639, 2638, 2632,
	2630, 2626, 29, 2623, 2622, 2146, 2620, 2618, 2617, 2614,
	2609, 2607, 2606, 2143, 2600, 2113, 2596, 2592, 2582, 2577,
	2576, 2066, 2573, 82, 118, 2056, 2569, 2568, 2048, 2046,
	2029, 2560, 1988, 2559, 2557, 1983, 1981, 2556, 373, 2549,
	2547, 2546, 1939, 1864, 2543, 2541, 2540, 156, 2538, 1799,
	2536, 2534, 2532, 2528, 2526, 2520, 2518, 2517, 2515, 2510,
	2503, 2502, 2500, 2498, 2497, 2496, 2495, 2494, 2493, 163,
	2492, 2490, 1790, 1740, 2489, 2487, 32, 35, 18, 50,
	21, 151, 2819, 145, 2483, 2482, 2479, 2474, 2473, 2472,
	23, 99, 93, 2470, 52, 2469, 2468, 37, 40, 30,
	24, 2462, 94, 2458, 2457, 2094, 31, 2455, 2452, 139,
	2448, 79, 27, 2658, 155, 157, 114, 132, 2446, 2444,
	2443, 53, 122, 5, 4, 3, 14, 1, 2440, 7,
	2, 2429, 2422, 17, 84, 238, 2417, 45, 72, 2413,
	2411, 134, 2408, 55, 91, 1599, 108, 126, 248, 110,
	2407, 75, 16, 62, 2405, 2404, 160, 34, 2399, 41,
	78, 147, 115, 2398, 48, 2397, 63, 125, 98, 161,
	129, 67, 133, 142, 2396, 2395, 2393, 106, 2389, 127,
	96, 2387, 2386, 86, 2383, 92, 140, 2382, 141, 111,
	2380, 2379, 113, 2377, 128, 2373, 2371, 159, 152, 119,
	13, 44, 54, 10, 1602, 1579, 138, 90, 49, 58,
	2370, 817, 1256, 107, 97, 100, 59, 76, 104, 57,
	87, 150, 38, 2369, 2368, 143, 2367, 2366, 2365, 2364,
	2363, 102, 2362, 2360, 25, 2359, 61, 60, 69, 68,
	43, 89, 131, 112, 154, 101, 2356, 81, 124, 2354,
	281, 2353, 2350, 1585, 121, 2347, 2343, 2342, 1536, 1154,
	1139, 1051, 2341, 2340, 1022, 1017, 2339, 2338, 66, 2335,
	120, 105, 95, 146, 232, 73, 2333, 123, 26, 2329,
	39, 28, 0, 191, 103, 2328, 130, 64, 2327, 2326,
	2325, 2324, 33, 9, 6, 11, 15, 12, 83, 46,
	2323, 2319, 135, 116, 80, 2317, 158, 2313, 2311, 2310,
	36, 2309, 22, 2308, 20, 2306, 2304, 19, 8, 2303,
	2302, 148, 2299, 88, 2297, 2032, 2296, 153, 2295, 2294,
	1750, 2292, 51, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 122, 122, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 119, 119, 124, 124, 124, 126, 126,
	123, 123, 118, 118, 24, 24, 66, 66, 109, 59,
	59, 59, 310, 310, 311, 311, 105, 105, 106, 106,
	106, 106, 107, 107, 108, 108, 108, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 43, 43, 44, 44, 44,
	44, 44, 44, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 50, 50, 50, 48, 48, 48,
	47, 47, 47, 46, 46, 46, 49, 49, 49, 177,
	177, 176, 176, 180, 180, 51, 51, 51, 51, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 54, 54, 54, 54, 54,
	54, 54, 279, 279, 278, 52, 52, 253, 253, 55,
	55, 208, 208, 56, 56, 56, 56, 56, 57, 57,
	67, 67, 351, 351, 351, 355, 355, 356, 356, 357,
	357, 357, 357, 357, 357, 357, 353, 353, 62, 62,
	62, 62, 63, 63, 63, 64, 64, 104, 104, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 29, 30,
	30, 31, 31, 32, 32, 73, 73, 73, 75, 72,
	72, 72, 74, 74, 74, 74, 76, 76, 77, 77,
	77, 77, 77, 78, 78, 304, 302, 302, 303, 303,
	149, 149, 149, 149, 149, 150, 150, 150, 309, 309,
	309, 309, 309, 309, 308, 308, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 91, 91, 91, 99, 99, 99, 99,
	99, 99, 99, 80, 80, 85, 85, 85, 85, 85,
	81, 81, 86, 86, 87, 87, 88, 88, 88, 88,
	88, 88, 82, 82, 82, 82, 90, 90, 90, 90,
	89, 89, 95, 95, 95, 95, 95, 95, 92, 92,
	92, 92, 93, 93, 93, 96, 96, 96, 96, 83,
	83, 84, 84, 97, 97, 98, 98, 98, 98, 98,
	94, 94, 94, 352, 352, 354, 354, 60, 60, 38,
	38, 39, 39, 151, 151, 152, 152, 232, 232, 232,
	232, 153, 153, 125, 125, 125, 154, 154, 155, 155,
	156, 156, 156, 158, 158, 159, 159, 160, 160, 160,
	157, 157, 157, 231, 320, 320, 321, 321, 321, 321,
	321, 321, 322, 322, 322, 322, 322, 322, 322, 318,
	318, 319, 316, 316, 317, 317, 317, 317, 358, 358,
	230, 230, 163, 163, 323, 323, 323, 323, 324, 324,
	324, 324, 324, 327, 326, 325, 325, 325, 325, 325,
	265, 265, 265, 42, 42, 42, 196, 196, 195, 195,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 198, 101, 101, 40, 40, 131, 131,
	41, 41, 37, 37, 37, 212, 212, 167, 167, 270,
	270, 270, 142, 142, 120, 120, 120, 17, 13, 13,
	13, 13, 13, 13, 23, 23, 21, 21, 213, 213,
	214, 214, 61, 61, 65, 65, 70, 70, 100, 100,
	100, 100, 100, 100, 25, 25, 25, 25, 33, 33,
	33, 33, 69, 69, 360, 360, 138, 138, 138, 138,
	139, 139, 227, 227, 228, 228, 361, 361, 229, 229,
	229, 133, 132, 134, 134, 36, 36, 36, 127, 127,
	128, 128, 129, 129, 130, 130, 362, 362, 58, 58,
	58, 103, 103, 145, 145, 224, 224, 224, 226, 226,
	225, 225, 225, 194, 194, 194, 102, 102, 172, 172,
	182, 182, 183, 183, 276, 184, 184, 68, 68, 112,
	112, 110, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 113, 113, 113, 113, 113, 113, 113, 116,
	116, 116, 117, 117, 117, 115, 115, 333, 333, 333,
	336, 336, 332, 334, 334, 335, 335, 359, 359, 199,
	199, 199, 162, 161, 161, 165, 165, 164, 166, 166,
	269, 269, 269, 192, 192, 191, 191, 191, 191, 217,
	217, 215, 215, 216, 216, 220, 220, 221, 221, 221,
	222, 222, 223, 223, 190, 190, 249, 249, 219, 219,
	218, 114, 114, 114, 171, 171, 171, 173, 173, 239,
	239, 239, 240, 240, 238, 238, 238, 238, 271, 271,
	271, 271, 271, 271, 271, 271, 349, 349, 349, 350,
	350, 268, 268, 272, 272, 272, 272, 272, 272, 266,
	266, 266, 266, 267, 267, 277, 277, 202, 202, 202,
	202, 200, 200, 201, 201, 273, 273, 273, 273, 193,
	193, 274, 274, 274, 233, 233, 280, 280, 280, 298,
	298, 170, 170, 170, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 282, 282, 282, 282, 284,
	284, 284, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	297, 297, 297, 297, 297, 285, 285, 292, 292, 293,
	293, 294, 295, 286, 286, 287, 287, 288, 289, 296,
	296, 296, 296, 300, 300, 290, 290, 290, 290, 290,
	291, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 210, 210, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 243,
	243, 243, 243, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 328, 328, 328, 328, 328, 328,
	328, 328, 330, 330, 331, 331, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 337, 337, 338, 338,
	340, 340, 341, 341, 342, 343, 343, 343, 344, 345,
	345, 339, 339, 346, 346, 346, 347, 347, 348, 348,
	348, 348, 348, 255, 255, 256, 257, 263, 263, 263,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 140, 140, 140, 140,
	140, 179, 179, 178, 178, 252, 252, 250, 250, 254,
	254, 203, 203, 299, 299, 299, 299, 299, 299, 299,
	204, 204, 204, 211, 205, 205, 206, 206, 206, 206,
	206, 246, 247, 207, 207, 207, 248, 248, 258, 262,
	262, 261, 260, 260, 259, 259, 236, 236, 237, 237,
	235, 234, 187, 187, 186, 186, 185, 185, 363, 363,
	264, 264, 188, 188, 189, 181, 181, 275, 275, 275,
	275, 174, 174, 147, 147, 175, 175, 143, 143, 146,
	146, 144, 144, 144, 144, 168, 168, 169, 169, 141,
	141, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 301, 301, 301, 251, 135, 135, 135, 136,
	136, 137, 137, 306, 306, 306, 307, 307, 307, 307,
	305, 305, 305, 305, 305, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 1, 4,
	7, 1, 3, 2, 4, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 8,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 1, 0, 9, 9,
	6, 7, 5, 3, 5, 1, 3, 1, 1, 1,
	10, 11, 9, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 2, 1, 4, 2, 4, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 4, 4, 2, 3, 5, 5, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 1, 0, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 1, 0,
	2, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 1, 1, 3, 3,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 386, -4, -24, -26, -29, -34,
	-35, -56, -43, -44, -45, -55, -51, -57, -58, -59,
	-60, -52, -66, -65, -67, -70, -68, -61, -62, -71,
	-79, -100, -101, -102, -103, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 48, -30, 72, -36, -37, -38,
	-39, 74, -40, -41, -42, 95, -335, 99, -46, -47,
	-48, -50, -49, 103, 110, 113, 135, 146, 235, 241,
	262, 264, 266, 273, -110, -112, 260, -63, -64, -72,
	-73, -74, -75, -104, 286, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, -98, 289, -25, -33, -69, 328, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 112, -333, -113, -111, 383, 261, 337,
	35, 298, 62, 106, 268, 353, 360, -116, -114, -115,
	-117, 278, 345, 308, 387, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 2, 308,
	348, 88, 155, 246, -351, 2, -175, 308, 88, -144,
	-135, 376, 4, -312, -314, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 146, 147, 148, 156, 159, 161, 154, 171, 172,
	173, 177, 178, 179, 182, 181, 186, 187, 190, 191,
	194, 196, 199, 197, 200, 203, 201, 205, 206, 208,
	207, 213, 215, 216, 218, 221, 224, 227, 230, 231,
	232, 233, 234, 235, 237, 239, 241, 243, 244, 245,
	246, 247, 249, 250, 252, 253, 254, 255, 256, 260,
	258, 259, 261, 262, 263, 264, 266, 268, 269, 271,
	287, 288, 299, 273, 274, 275, 276, 277, 282, 279,
	280, 283, 284, 286, 289, 291, 294, 297, 298, 300,
	303, 304, 301, 296, 307, 309, 310, 311, 312, 313,
	314, 315, 316, 323, 324, 328, 329, 330, 331, 334,
	335, 336, 337, 339, 342, 343, 344, 349, 354, 355,
	356, 357, 358, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 52, 53, 54, 57, 90, 92, 93, 109,
	114, 115, 125, 126, 127, 137, 139, 149, 150, 153,
	160, 162, 163, 164, 165, 166, 168, 175, 176, 184,
	202, 212, 214, 225, 229, 238, 240, 248, 270, 281,
	292, 293, 302, 305, 318, 319, 320, 325, 326, 341,
	345, 346, 386, 386, 2, 172, 245, -143, -135, 88,
	386, 386, 386, 386, 308, 2, 279, 338, 348, -212,
	88, 333, 386, 386, 386, -135, 241, 22, 2, 97,
	159, 336, 335, 22, 237, 280, 310, 312, 2, 386,
	386, 386, 386, 386, 2, 348, 308, 155, 88, 338,
	-135, 2, -54, 2, 383, -53, -4, -35, -45, -55,
	-51, -24, -26, -43, -59, -58, -60, -62, -66, -65,
	-68, -72, -73, -79, -102, -103, 286, 112, -355, 2,
	22, -356, -357, 74, 103, 135, 278, 159, 97, 335,
	308, 2, 172, 2, -135, 2, -351, 2, 172, 2,
	-355, 2, -135, 2, -139, 2, 273, -135, 386, 386,
	386, 386, 386, 191, 56, 270, 283, -77, 324, -76,
	318, -304, -78, 2, -176, 203, -135, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 2, -99, 283, 34, 56, 22,
	61, 89, 136, 155, 156, 178, 69, 70, 244, 191,
	173, 323, 179, 284, 309, 324, 74, 339, 313, 111,
	4, 88, 203, 285, 318, 386, 386, 386, -359, 2,
	308, 275, 289, -111, -113, -112, -164, -165, 332, 167,
	108, 223, -110, -112, 2, -333, -99, 283, 2, 56,
	22, -302, 2, -264, 219, -241, 94, -243, 374, 375,
	369, 209, 359, -255, -245, -258, 109, 270, 383, -143,
	-244, 389, 9, -330, -112, 29, -256, -257, 50, -135,
	7, 8, 5, 6, -141, -282, -251, -291, 327, 116,
	211, -328, -329, 4, -312, -306, -283, -293, -287, -290,
	168, 59, 80, 81, 84, 82, 85, 285, 338, 51,
	28, 114, 115, 229, 238, 305, 325, 326, 149, 212,
	150, 57, 137, 184, 102, 37, 39, 41, 42, 52,
	53, 90, 92, 93, 125, 126, 127, 160, 162, 163,
	164, 165, 166, 214, 248, 292, 302, 319, 320, 346,
	-313, -294, -295, -288, -289, 75, 117, 134, 158, 151,
	170, 174, 185, 188, 198, 204, 226, 228, 267, 290,
	-296, -360, 2, 324, 324, 2, -360, 2, -360, 2,
	-138, 2, 324, 321, -336, 249, -332, -135, -336, 386,
	386, 388, 386, -161, -162, 2, 22, 100, -189, 2,
	383, -271, 2, 381, -273, -143, -112, -272, 383, 220,
	-3, 2, -273, 149, -143, 2, -273, 149, -143, 2,
	-135, 2, -146, 149, -143, -305, 4, -312, -314, -313,
	-315, 59, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 50, 51, 55, 58, 60, 69, 74, 79,
	80, 82, 81, 83, 84, 85, 94, 96, 98, 100,
	101, 104, 106, 108, 116, 118, 130, 132, 133, 135,
	138, 140, 152, 155, 157, 167, 169, 180, 183, 189,
	192, 193, 209, 210, 211, 217, 219, 220, 222, 223,
	236, 242, 251, 265, 278, 285, 295, 306, 308, 317,
	321, 322, 327, 332, 333, 338, 340, 347, 348, 350,
	351, 352, 353, 321, 388, -175, -168, -135, -235, -234,
	385, -241, 2, -241, 2, 133, 383, -186, -187, -234,
	-235, 2, -176, 149, -176, 149, 2, -135, 2, -176,
	2, 155, -135, 149, 2, -135, 22, 133, 2, 169,
	2, 169, 2, -274, 2, -273, -177, 149, 2, -176,
	-177, 149, 2, -147, 149, 2, -146, -135, 149, 2,
	-168, 149, 2, -208, 383, -279, 2, -278, -307, 4,
	-312, -314, -313, 345, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 283, 219, 388, -176,
	-241, -253, 383, 133, -241, 219, -135, 2, 287, 2,
	383, -77, 54, 324, -228, 2, -229, -132, -133, -134,
	171, 243, 247, 358, 321, 364, 133, -302, -180, 385,
	-99, 2, -310, 2, -308, 9, -307, 5, 287, 2,
	244, 284, 56, 133, 2, 2, -352, 2, 219, 133,
	2, 133, 2, 133, 2, 133, 2, 133, 2, 2,
	244, 284, 2, 130, 2, 323, 2, 2, 133, 2,
	171, 243, 299, 2, 308, 348, 2, 133, 133, 358,
	2, -193, -273, 308, 358, 22, -164, -165, -218, -191,
	130, -215, -216, 189, 118, 217, -199, 22, 100, -199,
	-199, 44, 384, 384, -99, 287, 2, 10, 11, 58,
	33, 374, 375, 376, 377, 128, 378, 379, 372, 373,
	371, 362, 363, 366, 367, 368, 71, 365, 364, 64,
	195, 272, 119, 120, 121, 122, 257, 13, 14, 15,
	26, 222, 188, 359, 151, 290, 369, 16, 17, 18,
	170, 36, 152, -140, -148, -241, -241, -241, -241, -241,
	228, -185, -236, 381, -112, 383, 383, -112, -241, -178,
	383, 7, -112, -250, 381, -259, -241, -186, 383, 5,
	383, 5, -337, 354, 130, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 240, -300, 349, -300, -300, -284,
	383, -284, -285, 383, -284, 355, 360, 383, -227, -228,
	-227, 321, -139, 388, -336, -169, 383, -189, -181, -275,
	-241, 376, -181, -188, -264, 75, -202, 174, 204, 134,
	185, 267, 158, 7, -54, -238, 389, 383, 376, -268,
	360, -112, -272, 383, -271, -143, 383, -122, 258, -121,
	21, 23, 103, 343, 109, 296, 314, 112, 274, 258,
	109, 112, 258, 296, 314, 274, 258, 109, 389, 112,
	-310, -144, 388, -305, 376, 300, 384, -174, -143, -187,
	383, -163, 209, -196, -195, -197, 30, 230, 47, 147,
	197, 206, 198, 298, 86, 209, -131, -334, 353, -163,
	383, -136, 149, 2, -135, -334, 209, -274, -145, -143,
	-145, 286, -135, 30, -124, 388, 49, 263, 109, -124,
	109, -124, 388, 109, -124, 109, 109, -178, -241, 384,
	388, -351, -357, 74, 383, 30, -252, -280, -281, -283,
	-292, -286, -290, -291, 40, 46, 45, 176, 175, 315,
	202, 281, 293, 341, 153, 38, 218, 161, 4, 160,
	162, 163, 164, 165, 166, 292, 37, 248, 126, 127,
	125, 102, 93, 92, 214, 42, 41, -294, -295, -288,
	-289, 90, 319, 320, 168, 39, 53, 52, 346, 302,
	-311, -310, -351, -304, -178, 30, -228, 2, -361, 388,
	187, -150, 194, 208, 142, 220, 356, -309, 5, 4,
	-251, -265, 94, 191, -291, 8, 375, -301, 7, 374,
	-303, -302, -303, 78, 385, -305, -176, 22, 288, 2,
	-304, -354, 130, -351, -304, -304, -304, -304, -304, 283,
	-54, 130, -135, 187, -304, 2, -304, 2, 308, 155,
	308, -124, 388, -143, 65, 66, 358, -218, -191, -192,
	-191, -219, -218, 335, -216, -215, -220, -241, 22, -223,
	124, 205, -241, -243, -111, -111, -111, -166, -269, -241,
	242, 155, -304, -298, -280, -297, 253, 254, 252, 256,
	255, -280, -305, 318, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, 188, 151, 290, 36,
	152, -241, 321, -241, -241, -241, -241, 201, 209, 211,
	327, 116, 334, 100, 215, -363, 306, 32, -248, -112,
	383, -263, 27, 295, 22, -255, 270, 383, -236, -241,
	-237, -179, -178, 384, 388, -179, -254, -250, -262, -261,
	350, 384, -178, 347, 22, 100, 376, 2, 7, -209,
	357, 200, 91, 143, 199, -210, 277, -338, 123, 138,
	383, 384, 2, 384, 2, 384, 2, 384, 2, -241,
	-241, -203, 2, -299, -178, 4, 357, 200, 91, 143,
	199, 277, -203, 2, -204, 2, -241, -178, -205, -242,
	-243, 374, 375, 369, 383, 270, -206, 2, -241, -179,
	-241, 43, 183, 322, -207, -241, 133, -178, -241, -241,
	-241, -178, -178, 2, -178, 2, 383, 7, 7, 318,
	318, 7, -139, -332, 30, -168, -171, 388, 133, 30,
	4, -171, 388, 384, 174, 174, -271, -202, 174, -200,
	226, -200, -200, -349, 383, 382, -268, -305, 381, 390,
	-179, 2, -267, -266, 30, -135, 224, 384, -143, 388,
	321, -213, 69, 60, -231, 149, 60, -316, -135, 69,
	-317, 55, 333, 242, 132, -213, 69, -213, 69, 69,
	-273, 33, -68, 67, 133, 321, -273, 67, 321, 33,
	-68, 133, 321, -146, -305, 67, -277, 361, -135, 133,
	384, 388, -151, -168, -152, -135, -232, -231, -318, -319,
	-316, 155, 333, 117, 30, 109, -197, -176, 44, -198,
	-301, 375, -198, 44, -198, 197, 198, 86, -198, -198,
	353, 109, 234, 30, 219, 209, -127, 311, 109, -233,
	351, -224, -68, 383, 94, 30, -224, -182, -183, -276,
	-184, -143, 383, -135, -176, -177, -177, -146, -147, -135,
	-168, 384, 388, -54, -278, 321, 340, -152, -53, 384,
	388, -170, 29, 381, -209, 383, -277, 388, 133, 364,
	321, 384, 324, -229, -149, 247, 294, 259, 282, 8,
	7, 7, 388, -305, -353, -135, 283, -54, -143, -146,
	-143, -273, 353, 130, 66, -192, -219, -221, -301, 383,
	-222, 270, 271, 388, -120, 31, 98, 177, -143, 358,
	-241, -241, 321, -363, 306, -248, -241, 201, 211, 327,
	116, 334, 100, 215, 133, 383, -242, -242, -178, -245,
	383, -178, 382, 392, 384, -241, 382, 382, 388, -260,
	-261, 104, -241, -165, 388, -164, -241, -178, -178, 384,
	384, 321, 321, 321, 321, 383, -343, 227, 383, 383,
	-241, 30, 388, 384, 133, 384, 384, -211, 236, 384,
	10, 11, 374, 375, 376, 377, 128, 378, 379, 372,
	373, 371, 362, 363, 364, 64, 195, 272, 13, 14,
	15, 170, 152, -242, -242, -242, -178, 383, 384, -246,
	-247, 133, 130, 30, -207, -207, -207, 384, 133, -178,
	388, 388, 388, 384, 384, 384, 7, 384, 388, 384,
	358, 358, 384, 383, 384, -233, -275, -173, 2, -271,
	-305, -233, -264, -271, -271, -201, 340, 219, 174, -271,
	-266, 384, -350, 7, -268, -267, 7, -240, -239, 131,
	207, 384, -135, 383, -268, 384, -121, -143, -135, -135,
	209, -231, 149, -126, 209, -280, -135, 383, 383, 177,
	177, -135, -135, 149, -135, 149, -135, -135, -122, 258,
	-68, 358, 383, -143, 258, 358, -135, -68, 383, -135,
	258, 358, -105, 148, 215, 300, 133, -143, 384, 384,
	388, -136, 155, -136, -68, -176, -176, -198, -198, -176,
	5, -68, -143, 109, -128, 105, -362, 364, -135, -217,
	-215, -241, -194, -226, 265, 219, -174, 345, -135, -194,
	-172, 388, 133, 364, -174, -124, -124, -124, -124, -241,
	-353, -310, 384, -280, 381, 382, 7, 7, -108, 353,
	-310, -353, -302, -302, -132, 331, 63, 247, -302, 388,
	221, 246, 88, 308, -222, -241, -269, -143, 389, -241,
	-241, -242, -242, 133, 383, -241, -252, 26, 26, 384,
	-179, 388, -237, -241, 384, -250, 106, -241, 317, 384,
	347, -165, -165, -165, 5, 200, 143, 199, -210, 199,
	-210, -210, 7, -344, -135, 383, 351, -164, 384, -298,
	-280, -241, -246, -241, -298, -280, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, 100, 209, 215, -242, 388,
	-179, -247, -246, -241, -241, -280, 384, 384, 384, -178,
	-241, -241, -241, 384, 7, -53, -190, 138, -277, 388,
	-190, -201, 383, -241, -271, 382, 384, 388, -267, 382,
	388, 391, 364, -268, 383, -168, -266, 321, 321, 109,
	209, 342, -320, -317, -241, -167, -270, -135, -331, 383,
	-328, -329, -141, 383, 383, -119, 103, 286, -214, 109,
	-124, 109, -124, 321, -213, 69, -244, -141, -135, -178,
	321, -244, -178, 321, -244, -108, 133, 307, 300, -153,
	154, -232, 383, -136, 383, 383, -163, -196, 383, -135,
	-129, 182, -362, -308, -334, -194, -194, -181, 210, 68,
	384, -233, -183, -173, -264, 384, -109, 76, -109, 7,
	382, 384, -107, 221, -106, -135, 5, -135, -31, -32,
	155, -305, -135, -143, 220, 384, -120, -305, 26, 26,
	-241, -252, 384, -241, -241, 384, -241, 382, -241, 5,
	-241, 384, 384, 384, 384, -345, -135, -241, 384, 384,
	384, -247, 133, 100, 215, 383, -241, 384, 384, 388,
	384, 384, 384, 384, -249, 140, 44, -271, -249, -168,
	-238, 7, -239, -305, 381, -267, -168, 384, -135, -135,
	-231, 109, -321, 69, -322, 58, 117, 74, 209, 211,
	333, 242, 55, 94, 251, 384, 384, 388, -142, -186,
	58, -142, -241, 383, -167, -168, 209, 94, 209, 94,
	87, 329, -135, -135, -143, -135, -135, 383, 384, -143,
	384, -135, -311, 318, -154, -155, 233, 152, -167, 383,
	-168, -151, 30, -167, 219, -130, 181, -362, -308, -127,
	-225, 383, 219, -68, -194, 364, 87, 87, 382, 388,
	383, 364, 364, 388, 22, 383, -120, -241, -241, 384,
	384, -165, -339, 233, 384, -242, 133, 383, -252, 384,
	-241, -340, 352, -241, -178, -340, 384, -268, 7, 384,
	-231, -135, -305, -135, 117, 149, 211, 177, 383, -242,
	-143, -230, -358, 73, 304, -270, -120, -305, -120, 384,
	-178, 384, 384, 211, 211, -241, -280, -124, -124, 321,
	321, -178, 321, 321, -244, 44, 231, 384, -167, 384,
	384, -68, 384, -143, -362, -308, -128, 101, -168, 69,
	-189, -112, 383, 383, 383, -106, -107, -310, -310, -32,
	-168, 384, -165, 44, -242, -252, 384, 384, -341, -342,
	-135, -267, 382, -322, -136, 209, -241, -137, 383, -153,
	383, -142, -165, 251, -123, 58, -135, -135, -165, 383,
	383, 190, 246, -143, -230, 384, -153, -230, 383, -308,
	-129, 335, 210, 384, -135, -311, -311, 384, 384, -346,
	246, 271, -178, 384, 388, 30, 109, 384, -323, 196,
	-135, -168, -120, 384, -143, -118, 340, -305, 384, -178,
	-178, 383, 383, 383, -153, -230, -153, -167, -130, 286,
	-233, 384, 384, 384, -347, -348, 36, 330, 78, -241,
	-347, -342, -344, 117, -324, -327, -326, 219, 134, 232,
	291, 384, 384, -163, -241, 384, 384, -168, -168, -168,
	-153, 384, -182, -108, -108, -348, 239, 129, 270, 239,
	129, -135, -326, 219, -327, 219, 335, 97, -323, 384,
	384, 384, -230, -233, 26, -325, 206, 263, 49, 286,
	-325, -324, 383, 383, -125, 49, 263, -153, -348, 20,
	211, 94, -156, 233, -157, 233, 384, -305, 384, -305,
	345, 345, -158, 383, 186, 388, -155, -154, -159, -160,
	-241, 94, 198, 316, -156, 383, 388, 384, 388, 383,
	-159, -156, -160, -159, 384, 384, 388, -155, -154, -157,
	388, -157,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 308, 0, 159, 161, 163,
	165, -2, 168, 170, 172, 0, 0, 0, 183, 185,
	187, 189, 191, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 697, -2, 0, 288, 290, 299,
	301, 303, 305, 306, 0, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	385, 387, 389, 391, 0, 618, 620, 622, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 735, -2, 746, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 712, 714, 716,
	718, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 272, 0, 1322, 1245,
	1251, 1252, 1276, 1277, 1278, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 151, 153, 154, 0, 0, 0, 1247, 1322,
	160, 162, 164, 166, 0, 174, 0, 0, 0, 0,
	0, 585, 169, 171, 173, 263, 1387, 265, 267, 0,
	0, 0, 0, 177, 178, 179, 180, 181, 182, 184,
	186, 188, 190, 192, 193, 0, 0, 0, 0, 0,
	262, 260, 215, 216, 0, 245, 246, 247, 248, 249,
	251, 219, 221, 222, 224, 226, 228, 230, 231, 233,
	235, 236, 238, 240, 241, 243, 0, 0, 0, 269,
	275, 276, 277, 279, 280, 281, 282, 283, 284, 285,
	0, 131, 0, 468, 258, 256, 0, 127, 0, 615,
	0, 271, 616, 617, 612, 613, 1414, 641, 289, 291,
	300, 302, 304, -2, -2, 1509, -2, 320, -2, 328,
	1515, 0, 331, 332, 335, -2, 211, 357, 359, 361,
	363, 365, 367, 369, 371, 373, 375, 377, 379, 381,
	383, 386, 388, 390, 392, 393, 0, 0, 0, 397,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	396, 398, 399, 400, 0, 619, 621, 623, 0, 575,
	737, 0, 0, -2, 710, 711, -2, 0, 741, 741,
	741, 0, 0, 711, 709, 0, 292, 0, 294, 0,
	397, 297, 298, 336, 337, 1230, 1231, 947, 0, 0,
	0, 0, 0, 0, 1049, 1051, 1480, 1509, 0, 1053,
	1054, 0, 1056, 1058, 1059, 0, 1062, 1063, 1215, 1247,
	1261, 1262, 1263, 1264, 0, 0, 1267, 0, 1269, 1270,
	1271, 1117, 1073, -2, -2, 1259, 875, 876, 877, 878,
	-2, 1523, 1077, 1080, 1083, 1086, 1087, 1090, 1091, 0,
	1464, 1481, 1482, 1505, 1506, 1514, 1518, 1519, 1488, 1502,
	1489, 1476, 1486, 1500, 1328, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1285, 909, 910, 915, 916, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	918, 643, 625, 634, 643, 627, 628, 629, 630, 631,
	632, 633, 636, 0, 727, 1393, 730, 1258, 728, 713,
	715, 0, 717, 0, 0, 721, 743, 742, 781, 782,
	0, 725, 726, 736, 797, 835, 812, 803, 0, 0,
	2, 71, 0, 1488, 835, 73, 0, 1488, 835, 76,
	0, 82, 0, 1488, 1250, 0, 1290, 1291, 1292, 1293,
	1294, 1523, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 0, 0, 273, 274, 1255, 1253, 1254,
	0, 155, 156, 157, 158, 0, 0, 1248, 1224, 1222,
	1223, 167, 533, 1488, 557, 1488, 555, -2, 577, 533,
	581, -2, 734, 1488, 657, 264, 266, 0, 176, 0,
	670, 0, 672, 0, 687, 841, 117, 1488, 196, 209,
	117, 1488, 199, 117, 1488, 202, 1243, 117, 1488, 205,
	206, 1488, 208, 259, 0, 0, -2, 252, 254, 1286,
	1287, 1288, 1289, -2, 250, 220, 223, 225, 227, 229,
	232, 234, 237, 239, 242, 244, -2, 0, 0, 0,
	467, 0, 0, 0, 614, 0, 640, 307, 0, 317,
	0, 319, 1475, -2, -2, 323, 644, 648, 649, 650,
	0, 0, 0, 0, 0, 0, 0, 333, 212, 0,
	394, 395, 403, 404, 132, 133, 354, 355, 0, 407,
	428, 440, 0, 0, 411, 413, 466, 415, 0, 0,
	417, 0, 419, 0, 421, 0, 423, 0, 425, 427,
	429, 441, 431, 736, 433, 0, 435, 439, 0, 444,
	0, 446, 447, 448, 0, 0, 454, 0, 0, 401,
	402, 117, 839, 0, 0, 0, -2, 0, 754, 779,
	0, 757, 758, 0, 0, 0, 0, 739, 740, 0,
	0, 0, 699, 700, 293, 0, 296, 0, 0, 0,
	0, 1150, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1156,
	1157, 1160, 1161, 0, 0, 0, 0, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 1163, 1164, 1165,
	0, 0, 1167, 0, 1169, 0, 0, 0, 0, 0,
	0, 1229, 0, 0, 1166, 952, 953, 954, 986, 987,
	0, 1050, 1226, 1219, 1052, 0, 1172, -2, 1173, 0,
	0, 1055, 1060, 1061, 1172, 0, 1214, -2, 0, 1266,
	0, 944, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1195, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 912, 923, 920, 919, 896,
	0, 895, 893, 0, 897, 0, 0, 0, 624, -2,
	626, 0, 638, 0, 729, 0, 0, 783, 786, 1235,
	1239, 1240, 786, 0, 1232, 0, 0, 0, 0, 832,
	832, 832, 830, 806, 0, 812, 0, -2, 836, 824,
	0, -2, 803, 0, 0, 837, 0, 83, 609, 96,
	0, 609, 609, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	826, 1246, 0, 1220, 1221, 147, 0, 0, 1241, 1225,
	474, 0, 0, 553, 556, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 576, 0, 733, 0,
	0, 0, 1488, 584, 1279, 659, 0, 845, 0, 673,
	0, 0, 842, 0, 194, 0, 115, 116, 0, 197,
	0, 200, 0, 0, 203, 0, 0, 0, 1173, 736,
	0, 0, 278, 0, 0, 736, 0, 1175, 853, 854,
	855, 856, 857, 944, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	906, 0, 881, 881, 881, 898, 899, 907, 908, 913,
	914, 925, 926, 928, 930, 924, 924, 924, 921, 922,
	826, 134, 0, 0, 0, 0, -2, 325, 0, 646,
	0, 651, 345, 346, 347, 653, 654, 329, 348, 349,
	350, 351, 352, 353, 0, 550, 0, 552, 1272, 0,
	326, 338, 327, 330, 0, 213, 405, 406, 408, 409,
	410, 414, 0, 463, 416, 418, 420, 422, 424, 432,
	436, 736, 442, 445, 449, 450, 451, 452, 0, 0,
	0, 574, 0, 309, 0, 458, 0, 754, 779, 703,
	753, 704, 778, 780, 755, 756, 761, 765, 766, 769,
	772, 773, 763, 947, 722, 723, 724, 747, 748, 596,
	0, 0, 295, 948, 849, 850, 900, 901, 902, 903,
	904, 949, 950, 0, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, -2, -2, -2, -2, -2, -2,
	-2, -2, 973, 974, 975, 976, 977, 978, 979, 980,
	-2, -2, -2, 984, 985, -2, 1168, 1170, 0, 1229,
	0, -2, 0, -2, -2, -2, -2, 998, 0, 1000,
	1003, 1005, 1007, 0, 0, 0, 0, 1228, 1017, 1206,
	0, 0, 1147, 1148, 1149, 1002, 0, 0, 1227, 1218,
	0, 0, 1171, 1057, 0, 0, 0, 1179, 1213, 1209,
	0, 1064, 746, 0, 0, 0, 0, 1071, 0, 1275,
	931, 932, 933, 934, 935, 936, 945, 1127, 0, 0,
	0, 1078, 1079, 1081, 1082, 1084, 1085, 1088, 1089, 0,
	0, 0, 1095, 0, 1182, -2, -2, -2, -2, -2,
	-2, -2, 0, 1097, 0, 1099, 1173, 1192, 0, 0,
	1020, 0, 0, 0, 0, 1509, 0, 1102, 1173, 1200,
	0, 0, 0, 0, 0, 1173, 0, 1205, 0, 0,
	0, 0, 0, 1113, 0, 1115, 0, 0, 0, 0,
	0, 0, 637, 731, 0, 0, 845, 0, 0, 0,
	1238, 845, 0, 1234, 0, 0, 0, 0, 0, 827,
	831, 828, 829, 0, 0, 812, 824, 794, 0, 0,
	0, 801, 802, 823, 0, 822, 811, -2, 0, 0,
	0, 0, 0, 608, 98, 1488, 0, 119, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 1249, 0, 137, 0, 1256, 0,
	0, 0, 0, 0, 473, 1255, 475, 477, 478, 479,
	480, 1280, 0, 1280, 0, 0, 559, 560, 0, 562,
	573, 0, 563, 0, 565, 566, 568, 572, 567, 569,
	0, 0, 0, 0, 0, 0, 661, 667, 0, 760,
	0, 685, 675, 0, 0, 0, 685, 689, 690, 692,
	693, 0, 0, 843, 210, 117, 117, 1244, 117, 117,
	207, 261, 0, 217, 253, 0, 0, 0, 255, 257,
	0, 846, 848, 0, 858, 0, 146, 0, 0, 0,
	0, 318, 0, 645, 652, 0, 342, 0, 344, 551,
	1274, 1273, 0, 214, 465, 286, 434, 437, 460, 461,
	462, 840, 0, 0, 459, 707, 708, 0, 767, 0,
	764, 770, 771, 0, 750, 594, 595, 0, 0, 0,
	-2, -2, 0, 0, 0, 1018, -2, 999, 1001, 1004,
	1006, 1008, 0, 0, 0, 0, 0, 0, 0, 1019,
	1172, 0, 1216, 1219, -2, 1174, 1177, 1178, 0, 0,
	1210, 0, 0, 0, 0, 745, 746, 746, 746, 1070,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 1094, 0, 1096, 1098, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 1024, 1025, 0, 1172, 1101, 1198,
	1199, 0, 0, 0, 0, 0, 0, 1107, 0, 1204,
	0, 0, 0, 1111, 1112, 1114, 0, 879, 0, 905,
	927, 929, 917, 736, 1257, 775, 1236, 826, 785, 787,
	1237, 775, 1233, 814, 0, 816, 0, 0, 0, 818,
	0, 807, 0, 809, 824, 799, 0, 0, 792, 0,
	791, 812, 820, 0, 0, 838, 97, 598, 0, 0,
	0, 100, 1488, 108, 0, 505, 0, 0, 0, 0,
	0, 611, 109, 1488, 117, 1488, 117, 110, 84, 609,
	85, 0, 0, 604, 0, 0, 597, 86, 0, 606,
	0, 0, 146, 0, 0, 148, 0, 1242, 482, 532,
	0, 0, 1280, 0, 471, 533, 561, 564, 570, 557,
	578, 580, 0, 0, 663, 667, 0, 666, 734, 685,
	759, 844, 668, 685, 0, 0, 0, 677, 674, 671,
	845, 0, 0, 0, 0, 195, 198, 201, 204, 1174,
	268, 0, 0, 1176, 0, 851, 0, 0, 126, 0,
	135, 270, 315, 316, 321, 340, 341, 343, 339, 0,
	0, 0, 0, 0, 0, 0, 749, 596, 0, 951,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1207,
	0, 0, 0, 1218, -2, 1180, 1208, 1212, 0, 1065,
	0, 0, 0, 0, 1268, 937, 938, 939, 940, 941,
	942, 943, 0, 1125, 1126, 1130, 0, 0, 1076, 0,
	0, 1181, 1191, 1193, 1021, 1022, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, -2, -2, -2, 1039,
	1040, 1041, -2, -2, -2, 0, 0, 0, 1194, 0,
	0, 1196, 1197, 1201, 1202, 0, 1104, 1105, 1106, 1203,
	0, 0, 0, 911, 0, 0, 777, 0, 784, 0,
	777, 815, 0, 834, 817, 797, 808, 0, 805, 795,
	0, 796, 0, 824, 0, 0, 804, 0, 0, 0,
	0, 118, 503, 522, 0, 0, 587, 593, 593, 0,
	1074, 1075, 0, 0, 0, 102, 0, 0, 0, 0,
	106, 0, 112, 0, 0, 0, 91, 0, 0, 0,
	0, 90, 0, 0, 89, 124, 0, 0, 149, 487,
	0, 476, 0, 0, 0, 474, 0, 554, 0, 0,
	665, 667, 0, 658, 659, 175, 669, 683, 684, 682,
	0, 685, 691, 688, 694, 0, 0, 128, 0, 0,
	852, 859, 144, 1376, 142, 139, 141, 287, 310, 311,
	0, 455, 456, 457, 762, 768, 751, 596, 0, 0,
	-2, 0, 1011, -2, -2, 1143, 1174, 1217, 1211, 1265,
	746, 1066, 1068, 1069, 946, 1132, 1129, 0, 1116, 1092,
	1093, 1190, 0, 0, 0, 0, 1174, 1145, 1103, 0,
	1109, 1110, 880, 732, 1121, 0, 0, 788, 1121, 0,
	812, 810, 793, 789, 0, 800, 0, 821, 600, 602,
	99, 0, 504, 0, 507, 0, 0, 0, 0, 513,
	514, 0, 0, 0, 0, 524, 531, 0, 596, 1260,
	0, 596, 0, 0, 0, 0, 0, 114, 0, 0,
	610, 0, 117, 117, 599, 0, 0, 0, 0, 605,
	0, 607, 136, 0, 469, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 655, 667, 0, 660, 661,
	0, 0, 0, 676, 686, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 313, 0, 752, -2, -2, 1012,
	1144, 0, 746, 0, 1118, -2, 0, 0, 0, 1146,
	0, 719, 0, 776, 774, 720, 833, 824, 0, 819,
	101, 0, 508, 509, 1280, 0, 512, 515, 0, 517,
	1282, 482, 0, 528, 529, 588, 589, 592, 590, 593,
	746, 526, 0, 103, 104, 113, 121, 105, 111, 0,
	0, 746, 0, 0, 825, 0, 0, 531, 0, 521,
	482, 472, 531, 0, 0, 662, 663, 0, 0, 0,
	695, 696, 0, 0, 0, 143, 0, 138, 140, 312,
	0, 1067, 1135, 0, -2, 0, 1047, 1108, 1120, 1122,
	0, 798, 790, 506, 510, 0, 0, 537, 0, 525,
	0, 596, 0, 0, 123, 0, 601, 603, 0, 0,
	0, 0, 0, 0, 482, 531, 470, 482, 0, 664,
	665, 0, 679, 845, 681, 0, 0, 145, 314, 0,
	0, 0, 1131, 1048, 0, 0, 0, 516, 542, 0,
	0, 0, 591, 1065, 533, 107, 0, 120, 0, 0,
	0, 0, 0, 0, 519, 482, 582, 0, 656, 0,
	680, 146, 146, 1128, 1133, 1136, -2, 1448, 1319, 0,
	1134, 1123, 1124, 0, 518, 538, 539, 0, 534, 535,
	536, 1281, 530, 537, 122, 93, 95, 0, 0, 0,
	520, 531, 845, 129, 130, 0, 1138, 1139, 1140, 1141,
	1142, 511, 540, 0, 541, 0, 0, 0, 542, 0,
	0, 485, 482, 678, 0, 543, 0, 546, 547, 0,
	544, 527, 0, 0, 481, 483, 484, 583, 1137, 545,
	548, 549, 0, 0, 0, 0, 488, 0, 489, 0,
	0, 0, 487, 0, 0, 0, 486, 492, 0, 495,
	497, 498, -2, 0, 490, 0, 0, 493, 0, 0,
	0, 491, 496, 0, 494, 487, 0, 486, 502, 500,
	0, 501,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 372, 3, 378, 373, 3,
	383, 384, 376, 374, 388, 375, 385, 377, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 392, 387,
	362, 364, 363, 366, 389, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 381, 3, 382, 379, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 390, 371, 391, 369,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 365,
	57705, 367, 57706, 368, 57707, 370, 57708, 380, 57709, 386,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1129
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1221
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1231
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1294
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1298
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CREATE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DELETE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex, "set local")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			return unimplemented(sqllex, "set from current")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = Low
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = Normal
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = High
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.str = "client_encoding"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2530
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2534
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = DropDefault
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return unimplemented(sqllex, "match full")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return unimplemented(sqllex, "match partial")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			return unimplemented(sqllex, "match simple")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3025
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = NoAction
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = Restrict
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = Cascade
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = SetNull
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = SetDefault
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3115
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3123
		{
			node := &CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = []SequenceOption(nil)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			return unimplemented(sqllex, "create sequence CACHE option")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[2].union.intVal()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: nil}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: nil}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[2].union.intVal()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: false}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3252
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = true
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = false
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = Ascending
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = Descending
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3327
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3329
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = true
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = false
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3363
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3385
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3451
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3462
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3523
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = ReadOnly
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = ReadWrite
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.str = ""
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = ""
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.str = ""
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.str = ""
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3631
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			return helpWith(sqllex, "INSERT")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3672
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3714
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 686:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			return helpWith(sqllex, "SELECT")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			return helpWith(sqllex, "VALUES")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			return helpWith(sqllex, "TABLE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			return helpWith(sqllex, "SELECT")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWith(sqllex, "TABLE")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4039
		{
			return unimplemented(sqllex, "cte")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4043
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = false
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = false
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = false
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = true
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			return helpWith(sqllex, "VALUES")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &From{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4320
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4365
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4402
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = nil
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = true
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = false
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.str = astFullJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.str = astLeftJoin
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.str = astRightJoin
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.str = astInnerJoin
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4586
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4672
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4686
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4729
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = jsonbColType
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = jsonColType
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4827
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = nil
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4988
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5020
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5060
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = year
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = month
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = day
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = hour
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = month
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = hour
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = minute
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = minute
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = nil
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = second
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5155
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5190
		{
			return unimplemented(sqllex, "at tz")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5464
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5637
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5690
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5691
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5715
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5731
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5736
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5745
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5754
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5763
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			return unimplemented(sqllex, "current role")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5773
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5794
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5799
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5813
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5814
		{
			return unimplemented(sqllex, "treat")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5851
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5856
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5860
		{
			return unimplemented(sqllex, "within group")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5861
		{
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5896
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.str = ""
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5958
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5959
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5960
		{
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5964
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5970
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5971
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5972
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5973
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = Any
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = Some
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = All
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = Plus
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = Minus
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = Mult
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = Div
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = Mod
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = Bitand
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = Bitor
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = Pow
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = Bitxor
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = LT
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = GT
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = EQ
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = LE
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = GE
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = NE
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = Like
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = NotLike
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = ILike
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = NotILike
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6275
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6329
		{
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6330
		{
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6374
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6419
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6448
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6492
		{
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6506
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6513
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6528
		{
			return unimplemented(sqllex, "func const")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6530
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6534
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6537
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.union.val = DNull
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6554
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6564
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6599
		{
			sqlVAL.str = ""
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6605
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6609
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
