// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6495

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	358, 54,
	-2, 659,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 512,
	-2, 0,
	-1, 61,
	92, 659,
	145, 659,
	310, 659,
	311, 659,
	-2, 0,
	-1, 71,
	103, 634,
	112, 634,
	153, 634,
	172, 634,
	197, 634,
	203, 634,
	307, 634,
	-2, 623,
	-1, 102,
	4, 661,
	20, 661,
	21, 661,
	23, 661,
	28, 661,
	33, 661,
	34, 661,
	35, 661,
	36, 661,
	37, 661,
	38, 661,
	39, 661,
	40, 661,
	41, 661,
	42, 661,
	44, 661,
	45, 661,
	46, 661,
	47, 661,
	48, 661,
	51, 661,
	52, 661,
	53, 661,
	55, 661,
	56, 661,
	60, 661,
	61, 661,
	62, 661,
	64, 661,
	66, 661,
	67, 661,
	68, 661,
	71, 661,
	72, 661,
	73, 661,
	81, 661,
	82, 661,
	83, 661,
	84, 661,
	85, 661,
	86, 661,
	87, 661,
	88, 661,
	90, 661,
	92, 661,
	94, 661,
	97, 661,
	98, 661,
	100, 661,
	104, 661,
	105, 661,
	106, 661,
	107, 661,
	108, 661,
	109, 661,
	113, 661,
	114, 661,
	115, 661,
	116, 661,
	117, 661,
	119, 661,
	121, 661,
	126, 661,
	127, 661,
	129, 661,
	132, 661,
	133, 661,
	134, 661,
	135, 661,
	136, 661,
	137, 661,
	140, 661,
	142, 661,
	145, 661,
	146, 661,
	147, 661,
	148, 661,
	149, 661,
	150, 661,
	151, 661,
	152, 661,
	154, 661,
	157, 661,
	158, 661,
	159, 661,
	161, 661,
	162, 661,
	163, 661,
	165, 661,
	166, 661,
	168, 661,
	170, 661,
	173, 661,
	176, 661,
	178, 661,
	179, 661,
	180, 661,
	181, 661,
	182, 661,
	183, 661,
	185, 661,
	186, 661,
	187, 661,
	188, 661,
	192, 661,
	193, 661,
	194, 661,
	195, 661,
	196, 661,
	198, 661,
	200, 661,
	201, 661,
	204, 661,
	205, 661,
	207, 661,
	209, 661,
	210, 661,
	211, 661,
	212, 661,
	213, 661,
	214, 661,
	216, 661,
	217, 661,
	218, 661,
	219, 661,
	220, 661,
	222, 661,
	223, 661,
	224, 661,
	225, 661,
	226, 661,
	227, 661,
	228, 661,
	229, 661,
	231, 661,
	232, 661,
	233, 661,
	234, 661,
	235, 661,
	236, 661,
	237, 661,
	238, 661,
	239, 661,
	240, 661,
	241, 661,
	242, 661,
	244, 661,
	246, 661,
	247, 661,
	248, 661,
	249, 661,
	251, 661,
	252, 661,
	253, 661,
	254, 661,
	256, 661,
	257, 661,
	258, 661,
	259, 661,
	260, 661,
	262, 661,
	263, 661,
	264, 661,
	265, 661,
	267, 661,
	268, 661,
	269, 661,
	270, 661,
	272, 661,
	273, 661,
	274, 661,
	275, 661,
	276, 661,
	277, 661,
	278, 661,
	279, 661,
	280, 661,
	281, 661,
	283, 661,
	285, 661,
	286, 661,
	287, 661,
	288, 661,
	289, 661,
	290, 661,
	291, 661,
	293, 661,
	294, 661,
	295, 661,
	298, 661,
	299, 661,
	300, 661,
	301, 661,
	303, 661,
	304, 661,
	305, 661,
	306, 661,
	309, 661,
	310, 661,
	311, 661,
	312, 661,
	314, 661,
	316, 661,
	317, 661,
	318, 661,
	319, 661,
	320, 661,
	321, 661,
	324, 661,
	329, 661,
	330, 661,
	331, 661,
	332, 661,
	333, 661,
	-2, 0,
	-1, 115,
	103, 633,
	112, 633,
	153, 633,
	172, 633,
	197, 633,
	203, 633,
	307, 633,
	-2, 626,
	-1, 119,
	1, 561,
	157, 561,
	222, 561,
	226, 561,
	357, 561,
	358, 561,
	-2, 0,
	-1, 121,
	1, 561,
	357, 561,
	358, 561,
	-2, 0,
	-1, 122,
	1, 561,
	357, 561,
	358, 561,
	-2, 0,
	-1, 123,
	1, 565,
	357, 565,
	358, 565,
	-2, 0,
	-1, 130,
	4, 667,
	5, 667,
	6, 667,
	7, 667,
	8, 667,
	9, 667,
	20, 667,
	21, 667,
	23, 667,
	28, 667,
	29, 667,
	33, 667,
	34, 667,
	35, 667,
	36, 667,
	37, 667,
	38, 667,
	39, 667,
	40, 667,
	41, 667,
	42, 667,
	44, 667,
	45, 667,
	46, 667,
	47, 667,
	48, 667,
	49, 667,
	50, 667,
	51, 667,
	52, 667,
	53, 667,
	55, 667,
	56, 667,
	58, 667,
	60, 667,
	61, 667,
	62, 667,
	64, 667,
	66, 667,
	67, 667,
	68, 667,
	70, 667,
	71, 667,
	72, 667,
	73, 667,
	75, 667,
	76, 667,
	77, 667,
	79, 667,
	80, 667,
	81, 667,
	82, 667,
	83, 667,
	84, 667,
	85, 667,
	86, 667,
	87, 667,
	88, 667,
	90, 667,
	92, 667,
	94, 667,
	97, 667,
	98, 667,
	100, 667,
	104, 667,
	105, 667,
	106, 667,
	107, 667,
	108, 667,
	109, 667,
	110, 667,
	113, 667,
	114, 667,
	115, 667,
	116, 667,
	117, 667,
	119, 667,
	121, 667,
	124, 667,
	126, 667,
	127, 667,
	129, 667,
	132, 667,
	133, 667,
	134, 667,
	135, 667,
	136, 667,
	137, 667,
	138, 667,
	140, 667,
	142, 667,
	144, 667,
	145, 667,
	146, 667,
	147, 667,
	148, 667,
	149, 667,
	150, 667,
	151, 667,
	152, 667,
	154, 667,
	156, 667,
	157, 667,
	158, 667,
	159, 667,
	160, 667,
	161, 667,
	162, 667,
	163, 667,
	165, 667,
	166, 667,
	168, 667,
	169, 667,
	170, 667,
	171, 667,
	173, 667,
	176, 667,
	178, 667,
	179, 667,
	180, 667,
	181, 667,
	182, 667,
	183, 667,
	184, 667,
	185, 667,
	186, 667,
	187, 667,
	188, 667,
	189, 667,
	191, 667,
	192, 667,
	193, 667,
	194, 667,
	195, 667,
	196, 667,
	198, 667,
	201, 667,
	204, 667,
	205, 667,
	206, 667,
	207, 667,
	208, 667,
	209, 667,
	210, 667,
	211, 667,
	212, 667,
	213, 667,
	214, 667,
	216, 667,
	217, 667,
	218, 667,
	219, 667,
	220, 667,
	222, 667,
	223, 667,
	224, 667,
	225, 667,
	226, 667,
	227, 667,
	228, 667,
	229, 667,
	231, 667,
	232, 667,
	233, 667,
	234, 667,
	235, 667,
	236, 667,
	237, 667,
	238, 667,
	239, 667,
	240, 667,
	241, 667,
	242, 667,
	244, 667,
	245, 667,
	246, 667,
	247, 667,
	248, 667,
	249, 667,
	251, 667,
	252, 667,
	253, 667,
	254, 667,
	256, 667,
	257, 667,
	258, 667,
	259, 667,
	260, 667,
	261, 667,
	262, 667,
	263, 667,
	264, 667,
	265, 667,
	266, 667,
	267, 667,
	268, 667,
	269, 667,
	270, 667,
	272, 667,
	273, 667,
	274, 667,
	275, 667,
	276, 667,
	277, 667,
	278, 667,
	279, 667,
	280, 667,
	281, 667,
	283, 667,
	285, 667,
	286, 667,
	287, 667,
	288, 667,
	289, 667,
	290, 667,
	291, 667,
	293, 667,
	294, 667,
	295, 667,
	298, 667,
	299, 667,
	300, 667,
	301, 667,
	302, 667,
	303, 667,
	304, 667,
	305, 667,
	306, 667,
	309, 667,
	310, 667,
	311, 667,
	312, 667,
	313, 667,
	314, 667,
	316, 667,
	317, 667,
	318, 667,
	319, 667,
	320, 667,
	321, 667,
	324, 667,
	329, 667,
	330, 667,
	331, 667,
	332, 667,
	333, 667,
	334, 667,
	340, 667,
	345, 667,
	346, 667,
	347, 667,
	354, 667,
	360, 667,
	-2, 0,
	-1, 133,
	1, 54,
	358, 54,
	-2, 659,
	-1, 490,
	123, 1254,
	296, 1254,
	339, 1254,
	356, 1254,
	-2, 0,
	-1, 491,
	123, 1207,
	296, 1207,
	339, 1207,
	356, 1207,
	-2, 0,
	-1, 493,
	123, 1312,
	296, 1312,
	339, 1312,
	356, 1312,
	-2, 0,
	-1, 495,
	123, 1334,
	296, 1334,
	339, 1334,
	356, 1334,
	-2, 0,
	-1, 502,
	1, 299,
	357, 299,
	358, 299,
	-2, 1259,
	-1, 528,
	1, 381,
	353, 381,
	355, 381,
	357, 381,
	358, 381,
	-2, 0,
	-1, 529,
	1, 428,
	120, 428,
	353, 428,
	355, 428,
	357, 428,
	358, 428,
	-2, 0,
	-1, 535,
	1, 395,
	353, 395,
	355, 395,
	357, 395,
	358, 395,
	-2, 0,
	-1, 537,
	1, 399,
	353, 399,
	355, 399,
	357, 399,
	358, 399,
	-2, 0,
	-1, 540,
	1, 407,
	353, 407,
	355, 407,
	357, 407,
	358, 407,
	-2, 0,
	-1, 541,
	1, 412,
	353, 412,
	355, 412,
	357, 412,
	358, 412,
	-2, 0,
	-1, 544,
	1, 422,
	353, 422,
	355, 422,
	357, 422,
	358, 422,
	-2, 0,
	-1, 553,
	112, 669,
	172, 669,
	197, 669,
	-2, 629,
	-1, 556,
	112, 668,
	172, 668,
	197, 668,
	-2, 627,
	-1, 700,
	354, 1185,
	-2, 1178,
	-1, 701,
	354, 1186,
	-2, 1179,
	-1, 707,
	5, 842,
	354, 842,
	-2, 1385,
	-1, 732,
	5, 801,
	-2, 1355,
	-1, 733,
	5, 836,
	354, 836,
	-2, 1357,
	-1, 734,
	5, 811,
	-2, 1358,
	-1, 735,
	5, 810,
	-2, 1359,
	-1, 736,
	5, 836,
	354, 836,
	-2, 1362,
	-1, 737,
	5, 836,
	354, 836,
	-2, 1363,
	-1, 738,
	5, 837,
	-2, 1366,
	-1, 739,
	5, 793,
	-2, 1367,
	-1, 740,
	5, 793,
	-2, 1368,
	-1, 741,
	5, 818,
	-2, 1372,
	-1, 742,
	5, 803,
	-2, 1373,
	-1, 743,
	5, 804,
	-2, 1374,
	-1, 744,
	5, 794,
	-2, 1379,
	-1, 745,
	5, 795,
	-2, 1380,
	-1, 746,
	5, 796,
	-2, 1381,
	-1, 747,
	5, 797,
	-2, 1382,
	-1, 748,
	5, 798,
	-2, 1383,
	-1, 749,
	5, 799,
	-2, 1384,
	-1, 750,
	5, 793,
	-2, 1389,
	-1, 751,
	5, 802,
	-2, 1394,
	-1, 752,
	5, 800,
	-2, 1397,
	-1, 753,
	5, 834,
	354, 834,
	-2, 1399,
	-1, 754,
	5, 838,
	-2, 1402,
	-1, 755,
	5, 840,
	-2, 1403,
	-1, 756,
	5, 833,
	354, 833,
	-2, 1408,
	-1, 774,
	213, 657,
	-2, 505,
	-1, 778,
	199, 1182,
	-2, 0,
	-1, 813,
	1, 209,
	353, 209,
	355, 209,
	357, 209,
	358, 209,
	-2, 632,
	-1, 816,
	4, 1407,
	10, 1407,
	11, 1407,
	13, 1407,
	14, 1407,
	15, 1407,
	16, 1407,
	17, 1407,
	18, 1407,
	20, 1407,
	21, 1407,
	23, 1407,
	26, 1407,
	28, 1407,
	30, 1407,
	33, 1407,
	34, 1407,
	35, 1407,
	36, 1407,
	37, 1407,
	38, 1407,
	39, 1407,
	40, 1407,
	41, 1407,
	42, 1407,
	44, 1407,
	45, 1407,
	46, 1407,
	47, 1407,
	48, 1407,
	51, 1407,
	52, 1407,
	53, 1407,
	55, 1407,
	56, 1407,
	57, 1407,
	60, 1407,
	61, 1407,
	62, 1407,
	63, 1407,
	64, 1407,
	66, 1407,
	67, 1407,
	68, 1407,
	70, 1407,
	71, 1407,
	72, 1407,
	73, 1407,
	81, 1407,
	82, 1407,
	83, 1407,
	84, 1407,
	85, 1407,
	86, 1407,
	87, 1407,
	88, 1407,
	90, 1407,
	92, 1407,
	94, 1407,
	97, 1407,
	98, 1407,
	100, 1407,
	104, 1407,
	105, 1407,
	106, 1407,
	107, 1407,
	108, 1407,
	109, 1407,
	113, 1407,
	114, 1407,
	115, 1407,
	116, 1407,
	117, 1407,
	118, 1407,
	119, 1407,
	121, 1407,
	124, 1407,
	126, 1407,
	127, 1407,
	129, 1407,
	132, 1407,
	133, 1407,
	134, 1407,
	135, 1407,
	136, 1407,
	137, 1407,
	138, 1407,
	139, 1407,
	140, 1407,
	142, 1407,
	144, 1407,
	145, 1407,
	146, 1407,
	147, 1407,
	148, 1407,
	149, 1407,
	150, 1407,
	151, 1407,
	152, 1407,
	154, 1407,
	156, 1407,
	157, 1407,
	158, 1407,
	159, 1407,
	160, 1407,
	161, 1407,
	162, 1407,
	163, 1407,
	165, 1407,
	166, 1407,
	168, 1407,
	169, 1407,
	170, 1407,
	171, 1407,
	173, 1407,
	176, 1407,
	177, 1407,
	178, 1407,
	179, 1407,
	180, 1407,
	181, 1407,
	182, 1407,
	183, 1407,
	184, 1407,
	185, 1407,
	186, 1407,
	187, 1407,
	188, 1407,
	192, 1407,
	193, 1407,
	194, 1407,
	195, 1407,
	196, 1407,
	198, 1407,
	201, 1407,
	202, 1407,
	204, 1407,
	205, 1407,
	207, 1407,
	209, 1407,
	210, 1407,
	211, 1407,
	212, 1407,
	213, 1407,
	214, 1407,
	216, 1407,
	217, 1407,
	218, 1407,
	219, 1407,
	220, 1407,
	222, 1407,
	223, 1407,
	224, 1407,
	225, 1407,
	226, 1407,
	227, 1407,
	228, 1407,
	229, 1407,
	231, 1407,
	232, 1407,
	233, 1407,
	234, 1407,
	235, 1407,
	236, 1407,
	237, 1407,
	238, 1407,
	239, 1407,
	240, 1407,
	241, 1407,
	242, 1407,
	244, 1407,
	245, 1407,
	246, 1407,
	247, 1407,
	248, 1407,
	249, 1407,
	250, 1407,
	251, 1407,
	252, 1407,
	253, 1407,
	254, 1407,
	256, 1407,
	257, 1407,
	258, 1407,
	259, 1407,
	260, 1407,
	262, 1407,
	263, 1407,
	264, 1407,
	265, 1407,
	266, 1407,
	267, 1407,
	268, 1407,
	269, 1407,
	270, 1407,
	272, 1407,
	273, 1407,
	274, 1407,
	275, 1407,
	276, 1407,
	277, 1407,
	278, 1407,
	279, 1407,
	280, 1407,
	281, 1407,
	283, 1407,
	285, 1407,
	286, 1407,
	287, 1407,
	288, 1407,
	289, 1407,
	290, 1407,
	291, 1407,
	293, 1407,
	294, 1407,
	295, 1407,
	298, 1407,
	299, 1407,
	300, 1407,
	301, 1407,
	303, 1407,
	304, 1407,
	305, 1407,
	306, 1407,
	309, 1407,
	310, 1407,
	311, 1407,
	312, 1407,
	314, 1407,
	316, 1407,
	317, 1407,
	318, 1407,
	319, 1407,
	320, 1407,
	321, 1407,
	324, 1407,
	329, 1407,
	330, 1407,
	331, 1407,
	332, 1407,
	333, 1407,
	334, 1407,
	335, 1407,
	337, 1407,
	338, 1407,
	339, 1407,
	340, 1407,
	342, 1407,
	343, 1407,
	344, 1407,
	345, 1407,
	346, 1407,
	347, 1407,
	348, 1407,
	349, 1407,
	350, 1407,
	352, 1407,
	355, 1407,
	356, 1407,
	359, 1407,
	360, 1407,
	-2, 0,
	-1, 841,
	123, 1334,
	296, 1334,
	339, 1334,
	356, 1334,
	-2, 0,
	-1, 909,
	112, 668,
	172, 668,
	197, 668,
	-2, 630,
	-1, 963,
	103, 634,
	112, 634,
	153, 634,
	172, 634,
	197, 634,
	203, 634,
	307, 634,
	-2, 728,
	-1, 1131,
	103, 634,
	112, 634,
	153, 634,
	172, 634,
	197, 634,
	203, 634,
	307, 634,
	-2, 961,
	-1, 1141,
	354, 1162,
	-2, 1150,
	-1, 1158,
	355, 1102,
	-2, 0,
	-1, 1393,
	1, 729,
	70, 729,
	103, 729,
	112, 729,
	124, 729,
	128, 729,
	130, 729,
	144, 729,
	153, 729,
	160, 729,
	169, 729,
	172, 729,
	184, 729,
	197, 729,
	199, 729,
	203, 729,
	243, 729,
	245, 729,
	307, 729,
	315, 729,
	326, 729,
	327, 729,
	336, 729,
	353, 729,
	355, 729,
	357, 729,
	358, 729,
	359, 729,
	-2, 728,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 877,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 878,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 879,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 883,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 884,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 885,
	-1, 1464,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 890,
	-1, 1470,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 892,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 896,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 897,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 898,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 899,
	-1, 1501,
	208, 1044,
	-2, 1047,
	-1, 1543,
	123, 1084,
	354, 1185,
	-2, 1178,
	-1, 1544,
	123, 1085,
	-2, 1351,
	-1, 1545,
	123, 1086,
	-2, 1258,
	-1, 1546,
	123, 1087,
	-2, 1222,
	-1, 1547,
	123, 1088,
	-2, 1238,
	-1, 1548,
	123, 1089,
	-2, 1257,
	-1, 1549,
	123, 1090,
	-2, 1309,
	-1, 1755,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 891,
	-1, 1756,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 893,
	-1, 1761,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 894,
	-1, 1779,
	208, 1043,
	-2, 1046,
	-1, 1989,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 895,
	-1, 1994,
	156, 0,
	-2, 911,
	-1, 2004,
	208, 1045,
	-2, 1048,
	-1, 2046,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 938,
	-1, 2047,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 939,
	-1, 2048,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 940,
	-1, 2052,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 944,
	-1, 2053,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 945,
	-1, 2054,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 946,
	-1, 2180,
	156, 0,
	-2, 912,
	-1, 2183,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 915,
	-1, 2184,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 2285,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 2286,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 918,
	-1, 2293,
	156, 0,
	-2, 947,
	-1, 2348,
	156, 0,
	-2, 948,
	-1, 2419,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1354,
}

const sqlPrivate = 57344

const sqlLast = 42006

var sqlAct = [...]int{

	701, 2418, 2077, 2448, 2371, 2402, 1614, 2403, 2260, 2404,
	1622, 2417, 1915, 557, 1187, 2023, 2221, 2323, 1680, 2087,
	2153, 1194, 2139, 2108, 664, 1228, 1883, 677, 1960, 70,
	691, 2110, 627, 1279, 768, 1961, 961, 1388, 1594, 2240,
	172, 992, 699, 1278, 172, 698, 1611, 2102, 1888, 1593,
	1598, 1885, 172, 1845, 1710, 957, 944, 1597, 864, 1689,
	1844, 172, 2119, 1623, 1432, 1790, 172, 172, 1190, 938,
	172, 442, 25, 172, 1229, 1406, 1931, 1697, 1389, 1354,
	172, 1137, 1429, 1397, 1676, 1499, 845, 1183, 501, 1525,
	1306, 1509, 436, 1487, 565, 114, 1572, 671, 1664, 1484,
	971, 969, 939, 577, 844, 803, 433, 1519, 1616, 676,
	578, 966, 800, 1595, 1539, 814, 1126, 633, 1168, 583,
	793, 670, 1601, 1172, 1207, 172, 172, 1375, 948, 1362,
	636, 615, 474, 172, 912, 498, 913, 163, 569, 1304,
	911, 929, 496, 452, 693, 115, 1201, 562, 790, 2154,
	168, 928, 116, 390, 613, 917, 114, 494, 1778, 1615,
	172, 172, 172, 172, 1209, 478, 1945, 172, 172, 1946,
	848, 2445, 1209, 561, 2426, 991, 1209, 574, 2152, 2414,
	2413, 2410, 556, 1637, 1637, 991, 2398, 2397, 561, 2388,
	1652, 1652, 1899, 1645, 2366, 2362, 2354, 2350, 2235, 991,
	2152, 1645, 1900, 2305, 466, 25, 657, 2152, 2302, 566,
	2300, 2287, 991, 2271, 2152, 1645, 2270, 991, 2248, 2245,
	2152, 2207, 991, 991, 1364, 1637, 2185, 2182, 114, 2174,
	1637, 1645, 2172, 1637, 1637, 849, 1637, 2151, 38, 850,
	958, 2152, 634, 2132, 630, 2101, 1929, 991, 2096, 1592,
	1081, 1082, 1592, 1101, 1102, 1103, 1111, 1112, 1113, 1998,
	554, 1941, 1430, 1637, 522, 1942, 1104, 553, 651, 643,
	647, 1909, 653, 1084, 988, 1873, 1115, 641, 645, 1872,
	617, 2367, 130, 991, 48, 1934, 1862, 1860, 1652, 1859,
	1863, 1637, 98, 1637, 1858, 1782, 1781, 1083, 1637, 955,
	1430, 1783, 1637, 1098, 1575, 1779, 1713, 2235, 1686, 1637,
	1637, 132, 991, 59, 1654, 38, 1934, 1644, 1637, 1363,
	60, 1645, 61, 1652, 1636, 1924, 1591, 1369, 1637, 1637,
	1592, 1368, 1221, 619, 2059, 620, 1222, 2001, 1395, 991,
	1873, 1679, 130, 1662, 1789, 1503, 933, 131, 655, 823,
	133, 2155, 821, 820, 130, 124, 819, 1210, 1089, 818,
	817, 48, 125, 1815, 1816, 1210, 1833, 1834, 1835, 1210,
	1619, 132, 1287, 621, 618, 38, 549, 548, 1108, 1116,
	547, 117, 580, 132, 1705, 520, 519, 518, 517, 516,
	59, 564, 515, 514, 513, 512, 1114, 60, 172, 61,
	172, 172, 1522, 172, 511, 510, 509, 131, 172, 508,
	507, 1106, 506, 505, 172, 124, 1830, 1099, 504, 131,
	489, 48, 125, 488, 487, 1081, 1082, 172, 172, 172,
	172, 172, 424, 423, 422, 421, 583, 420, 1899, 405,
	404, 117, 1105, 396, 1536, 395, 394, 393, 1084, 1523,
	59, 386, 385, 117, 157, 156, 661, 60, 1534, 61,
	1363, 172, 155, 154, 153, 562, 152, 151, 150, 807,
	130, 1821, 1083, 1532, 1666, 1215, 149, 172, 1098, 694,
	98, 2438, 148, 1208, 147, 1310, 772, 1338, 146, 776,
	1100, 38, 1837, 145, 172, 1524, 1521, 144, 143, 132,
	142, 141, 140, 583, 139, 138, 1109, 137, 136, 1836,
	135, 134, 962, 859, 2416, 796, 796, 2409, 2376, 2345,
	2303, 2228, 2212, 647, 2208, 583, 2200, 2199, 173, 2198,
	1831, 792, 924, 1089, 2194, 131, 130, 48, 653, 2193,
	2192, 767, 2191, 124, 2118, 2107, 815, 130, 797, 824,
	125, 172, 2074, 1815, 1816, 2069, 2068, 98, 862, 2067,
	2009, 574, 1875, 1871, 1867, 132, 59, 910, 1864, 117,
	1526, 1852, 1843, 60, 1107, 61, 132, 1095, 1096, 1097,
	1110, 1814, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 1811, 1099, 855, 1810, 1647, 1808, 1795, 1794, 2209,
	1717, 131, 924, 1832, 1495, 1081, 1082, 130, 1393, 124,
	1225, 1325, 131, 172, 1145, 172, 125, 98, 960, 909,
	124, 1138, 759, 1129, 628, 959, 1193, 125, 1084, 923,
	765, 2025, 2389, 2357, 2344, 1618, 132, 842, 172, 172,
	2343, 2342, 2334, 2332, 130, 832, 117, 584, 1520, 2317,
	661, 839, 1083, 937, 2316, 583, 172, 2315, 2295, 2257,
	647, 1821, 995, 2236, 2215, 1100, 2205, 562, 908, 2158,
	1650, 2085, 131, 132, 2083, 2082, 2227, 2080, 1993, 1969,
	124, 1968, 1949, 1937, 1842, 1804, 1803, 125, 989, 860,
	1827, 1828, 1829, 942, 1913, 1826, 1824, 1825, 1817, 1818,
	1819, 1820, 1822, 1823, 1800, 562, 117, 1081, 1082, 131,
	1496, 554, 1775, 1089, 1770, 920, 921, 124, 553, 1489,
	581, 1675, 1748, 130, 125, 1743, 1730, 114, 1729, 1674,
	1084, 2326, 1703, 98, 1715, 1685, 1173, 1176, 1584, 956,
	1530, 1380, 1186, 117, 1180, 932, 1166, 634, 967, 1165,
	1815, 1816, 132, 1164, 1083, 930, 1163, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 1162, 172, 964, 934,
	1161, 1081, 1082, 1160, 1159, 1730, 1158, 1081, 1082, 172,
	1298, 1297, 1157, 580, 575, 172, 1156, 172, 131, 172,
	1155, 1192, 1154, 172, 1084, 1153, 124, 1535, 1152, 1151,
	1084, 1150, 1185, 125, 1149, 1142, 990, 1130, 1129, 629,
	2234, 1533, 936, 838, 827, 1089, 811, 2187, 1083, 2106,
	1944, 1138, 117, 172, 1083, 1940, 1531, 1381, 1911, 583,
	1127, 172, 1815, 1816, 960, 1886, 1141, 172, 852, 2238,
	2237, 2231, 1947, 1901, 1178, 1430, 962, 834, 1198, 1179,
	1866, 1865, 854, 583, 583, 1170, 1171, 758, 1821, 1754,
	995, 766, 1081, 1082, 1174, 1301, 851, 172, 1294, 1147,
	425, 2241, 172, 1916, 1177, 1191, 1184, 172, 172, 1089,
	172, 853, 172, 1615, 172, 1084, 172, 2026, 1817, 1818,
	1819, 1820, 1822, 1823, 647, 1226, 1202, 172, 1202, 1510,
	1786, 1311, 792, 172, 172, 1169, 1895, 434, 1956, 1083,
	2435, 574, 574, 2379, 972, 902, 973, 1641, 1648, 706,
	2436, 761, 1212, 2166, 1655, 1214, 894, 972, 38, 973,
	1272, 2281, 172, 1200, 172, 1203, 1921, 172, 1099, 398,
	2280, 1349, 1087, 1088, 1090, 1091, 158, 1288, 410, 1302,
	172, 429, 1815, 1816, 903, 1312, 972, 610, 973, 995,
	1223, 2279, 172, 1144, 584, 2278, 172, 1224, 1280, 172,
	1089, 1984, 1282, 172, 48, 1361, 629, 172, 1399, 1281,
	1133, 2361, 172, 1285, 1980, 608, 114, 1982, 172, 995,
	1300, 974, 172, 1307, 1382, 562, 1299, 606, 1326, 1295,
	1383, 411, 604, 59, 974, 1830, 601, 1316, 1407, 428,
	60, 1100, 61, 1320, 1319, 1321, 1953, 1322, 1952, 1323,
	402, 1324, 1799, 1400, 1798, 852, 1797, 161, 1796, 1099,
	1428, 584, 1337, 974, 1288, 1522, 2177, 1757, 1330, 1332,
	1912, 1640, 1085, 1086, 1087, 1088, 1090, 1091, 1341, 1340,
	1418, 1339, 1471, 584, 1482, 1426, 1424, 1411, 1413, 634,
	1821, 1372, 1422, 554, 1358, 1359, 554, 554, 853, 1480,
	1350, 1399, 1367, 1351, 1352, 634, 1410, 1398, 1394, 1373,
	1377, 1378, 1523, 1420, 995, 162, 647, 1819, 1820, 1822,
	1823, 647, 931, 1427, 1416, 1403, 964, 653, 979, 1421,
	654, 2360, 1100, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 453, 560, 1588, 986, 1219, 1091, 977, 1831,
	1587, 581, 576, 1442, 1612, 1441, 1510, 1336, 1524, 1521,
	1987, 985, 2262, 419, 1335, 458, 978, 2076, 2435, 1486,
	1476, 454, 1741, 1283, 551, 1868, 461, 1181, 1477, 1315,
	1478, 983, 427, 414, 1483, 1486, 1433, 1440, 2395, 562,
	130, 2406, 1204, 559, 562, 1526, 413, 412, 455, 984,
	98, 970, 1823, 888, 2442, 1409, 1185, 1971, 833, 867,
	1920, 430, 1558, 584, 1889, 2016, 2457, 172, 457, 132,
	996, 426, 1832, 960, 172, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 1526, 1750, 172, 1745, 172, 2019, 172,
	889, 975, 172, 561, 172, 1978, 172, 172, 172, 172,
	1507, 397, 893, 583, 975, 131, 982, 172, 159, 1493,
	837, 2017, 1893, 124, 1491, 1677, 1678, 1815, 1816, 2385,
	125, 980, 1497, 1209, 848, 403, 1494, 2337, 2407, 1922,
	399, 612, 2441, 975, 611, 1167, 947, 1635, 1607, 435,
	400, 1479, 1408, 2386, 1386, 2291, 2299, 160, 1481, 1124,
	1550, 1392, 1802, 1617, 901, 1617, 1889, 1334, 1286, 1557,
	1376, 1520, 602, 1526, 1826, 1824, 1825, 1817, 1818, 1819,
	1820, 1822, 1823, 561, 602, 2114, 875, 1629, 456, 603,
	796, 2405, 796, 602, 2408, 2434, 1526, 1235, 1396, 849,
	951, 995, 1621, 850, 1626, 2432, 114, 558, 2220, 172,
	1643, 1632, 114, 1609, 830, 653, 653, 822, 1638, 1633,
	954, 1303, 1630, 815, 1631, 172, 172, 172, 1639, 172,
	1642, 1972, 471, 1649, 2263, 1821, 949, 415, 916, 1753,
	2273, 2440, 1663, 459, 2272, 952, 2255, 584, 172, 2329,
	2462, 1651, 450, 1955, 1726, 172, 995, 387, 1722, 1687,
	950, 172, 172, 2451, 1693, 172, 1610, 1199, 1188, 2458,
	172, 584, 584, 172, 1174, 1699, 1177, 416, 996, 1759,
	1288, 172, 1656, 1171, 1170, 760, 2015, 172, 172, 172,
	868, 2372, 1468, 172, 1831, 1485, 172, 1692, 2203, 453,
	1329, 1314, 172, 172, 172, 172, 172, 417, 1706, 418,
	1707, 172, 114, 172, 1289, 1694, 552, 172, 460, 898,
	1716, 953, 458, 848, 1667, 1500, 1210, 869, 454, 1133,
	866, 1669, 1767, 1504, 1668, 653, 1670, 1512, 647, 1673,
	1266, 2088, 480, 1723, 481, 449, 1671, 1765, 1702, 1542,
	1542, 1555, 2461, 1567, 915, 455, 1688, 1684, 843, 1579,
	1580, 1582, 482, 770, 634, 450, 1691, 1832, 1492, 1727,
	634, 634, 1695, 1696, 634, 457, 1701, 996, 1658, 1742,
	2162, 836, 1711, 876, 899, 1747, 1718, 2055, 849, 1660,
	1293, 1698, 850, 481, 1466, 1469, 1719, 915, 2204, 1558,
	1558, 2449, 1346, 2222, 951, 2256, 1732, 996, 1740, 562,
	1661, 482, 453, 388, 914, 1731, 1788, 703, 1762, 2165,
	1744, 165, 1659, 483, 954, 1683, 2164, 1465, 1763, 1700,
	769, 1371, 1768, 1370, 1291, 458, 2147, 900, 848, 916,
	1374, 454, 559, 778, 2078, 2213, 1292, 1752, 1712, 952,
	2120, 1235, 1235, 1760, 686, 789, 2450, 914, 1758, 1826,
	1824, 1825, 1817, 1818, 1819, 1820, 1822, 1823, 455, 469,
	463, 2148, 483, 1347, 1558, 1558, 1558, 2452, 1774, 389,
	2161, 2056, 562, 172, 2294, 456, 1932, 2057, 457, 3,
	1785, 1529, 2253, 172, 169, 172, 2202, 172, 391, 787,
	172, 1846, 996, 897, 172, 1847, 406, 886, 861, 172,
	481, 172, 892, 848, 1874, 431, 1876, 2254, 172, 1992,
	464, 169, 1467, 484, 472, 953, 2163, 477, 482, 1986,
	1869, 172, 583, 659, 503, 447, 33, 1809, 562, 1764,
	459, 446, 32, 583, 172, 1769, 1766, 443, 29, 1653,
	1590, 1425, 1419, 583, 906, 1891, 1849, 1850, 1851, 905,
	1897, 1727, 828, 1327, 1318, 1908, 884, 1877, 1148, 1528,
	1880, 2143, 484, 2144, 172, 1265, 1917, 2401, 849, 616,
	616, 2369, 850, 445, 17, 1878, 2136, 391, 656, 483,
	882, 172, 1870, 880, 1266, 1266, 1894, 172, 456, 479,
	660, 485, 1976, 2146, 878, 1902, 172, 172, 788, 1881,
	1910, 574, 2149, 1974, 391, 391, 649, 391, 1184, 1815,
	1816, 169, 658, 639, 896, 468, 462, 1184, 885, 1907,
	891, 1954, 1919, 486, 1943, 872, 1882, 1234, 785, 1268,
	1948, 584, 1918, 1923, 1950, 1903, 1904, 1925, 1905, 1927,
	485, 1967, 786, 459, 1985, 440, 14, 1081, 1082, 1613,
	1935, 1606, 1933, 1966, 1936, 1218, 1965, 1217, 1930, 33,
	114, 441, 15, 1558, 1558, 32, 439, 13, 444, 11,
	1084, 29, 486, 1928, 1773, 1951, 1995, 883, 1216, 484,
	2145, 1776, 1884, 172, 1958, 2011, 2012, 2013, 438, 9,
	634, 1213, 1939, 1211, 1083, 987, 2006, 437, 5, 1792,
	1793, 881, 981, 600, 879, 1979, 976, 17, 2310, 918,
	1681, 2436, 2233, 757, 2232, 877, 1309, 1821, 2103, 996,
	2312, 448, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
	1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
	1558, 1975, 1558, 1977, 2002, 2005, 871, 1841, 1415, 784,
	2027, 2029, 1399, 2032, 172, 1089, 172, 485, 1414, 1854,
	2034, 1433, 2030, 172, 1235, 2095, 583, 2018, 2020, 2021,
	1433, 2035, 1682, 2084, 996, 2339, 1831, 2081, 2062, 14,
	172, 172, 919, 2155, 870, 2097, 2063, 2347, 1220, 486,
	470, 2121, 1399, 624, 922, 15, 1423, 172, 1412, 1417,
	13, 2368, 11, 2066, 2218, 172, 1081, 1082, 1620, 1608,
	995, 2079, 1605, 625, 1099, 172, 2089, 1360, 172, 1265,
	1265, 2094, 9, 1284, 2090, 605, 607, 2116, 995, 172,
	172, 5, 585, 172, 172, 172, 2091, 2104, 2100, 2092,
	2099, 1227, 503, 2098, 774, 503, 2455, 779, 2460, 1832,
	172, 2117, 782, 1083, 2247, 172, 2124, 172, 391, 172,
	172, 172, 947, 172, 2156, 172, 2130, 583, 2131, 2128,
	2126, 503, 503, 391, 804, 658, 2125, 2159, 2123, 1967,
	2127, 1234, 1234, 1268, 1268, 2135, 626, 1100, 2160, 1626,
	634, 1966, 1691, 2105, 1965, 1815, 1816, 1081, 1082, 2181,
	926, 925, 2075, 2022, 926, 503, 172, 1266, 1081, 1082,
	2176, 1914, 1861, 1708, 1589, 1586, 951, 1585, 1518, 1135,
	927, 831, 2189, 2014, 634, 1879, 2122, 1145, 1981, 1143,
	904, 1084, 895, 1983, 890, 887, 954, 873, 503, 835,
	550, 2261, 1824, 1825, 1817, 1818, 1819, 1820, 1822, 1823,
	451, 1317, 949, 874, 1704, 1083, 1235, 1379, 2384, 2195,
	1999, 952, 1801, 172, 172, 2322, 2201, 2290, 2169, 1527,
	583, 1146, 2173, 52, 1963, 680, 950, 2137, 1957, 1600,
	1599, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 998, 2214,
	1296, 1967, 702, 568, 2219, 391, 1967, 1541, 1434, 762,
	704, 2216, 1232, 1966, 705, 1235, 1965, 1233, 1966, 1175,
	692, 1965, 1230, 2217, 812, 1624, 2239, 172, 2225, 172,
	2223, 995, 172, 1490, 1508, 1784, 2230, 2060, 2224, 1139,
	172, 672, 684, 683, 1505, 826, 995, 953, 2070, 1709,
	1892, 2226, 2246, 2244, 1345, 1672, 1342, 1973, 2229, 401,
	584, 1812, 2265, 1558, 810, 2267, 1564, 477, 1556, 616,
	1552, 584, 2251, 1967, 907, 943, 1125, 2249, 2264, 1185,
	1625, 584, 858, 1898, 1646, 1966, 935, 2266, 1965, 1353,
	623, 622, 391, 391, 2289, 2282, 856, 1290, 2283, 1657,
	1118, 1117, 609, 2331, 847, 846, 1189, 1725, 2456, 1266,
	169, 172, 2338, 1267, 583, 1970, 2378, 1558, 172, 129,
	126, 2296, 128, 127, 1751, 78, 172, 172, 583, 583,
	31, 2275, 172, 30, 2301, 97, 1967, 172, 96, 95,
	1235, 94, 2309, 93, 172, 92, 91, 90, 1966, 2259,
	2319, 1965, 1265, 2333, 2313, 89, 2311, 2318, 1266, 585,
	88, 2320, 2321, 2327, 2307, 2328, 87, 86, 85, 172,
	172, 84, 2308, 2336, 2325, 83, 1235, 1235, 82, 2335,
	2304, 81, 2276, 2277, 80, 1235, 1235, 662, 763, 499,
	172, 77, 76, 75, 2346, 74, 2355, 28, 583, 2353,
	24, 101, 23, 172, 2356, 21, 22, 583, 583, 1558,
	27, 2349, 26, 19, 1234, 18, 1268, 16, 1235, 2359,
	2306, 391, 10, 172, 20, 172, 585, 57, 172, 58,
	995, 56, 55, 1197, 54, 562, 12, 50, 49, 391,
	47, 391, 46, 391, 2375, 1231, 2390, 1205, 585, 2392,
	2364, 2365, 45, 2391, 44, 8, 2358, 100, 172, 2396,
	41, 825, 40, 2374, 7, 99, 2394, 829, 6, 112,
	109, 2380, 1815, 1816, 2400, 2399, 2393, 169, 1967, 111,
	172, 108, 2411, 1266, 2425, 169, 172, 2415, 2423, 110,
	1966, 503, 172, 1965, 1081, 1082, 2427, 113, 105, 2352,
	2428, 2429, 2433, 2431, 584, 106, 2437, 107, 104, 103,
	37, 2439, 36, 35, 34, 2, 2243, 1084, 2424, 1266,
	1266, 503, 1, 0, 2447, 2446, 503, 0, 1266, 1266,
	2453, 169, 503, 2454, 503, 0, 503, 2377, 503, 2459,
	503, 1083, 0, 0, 1265, 0, 0, 2463, 996, 0,
	0, 1328, 0, 2269, 0, 0, 0, 503, 503, 0,
	0, 1266, 0, 1235, 1081, 1082, 996, 1267, 1267, 0,
	1111, 1112, 1113, 0, 0, 0, 0, 0, 585, 0,
	1821, 0, 0, 0, 0, 997, 477, 1084, 616, 0,
	1115, 658, 0, 1265, 0, 1626, 0, 0, 0, 0,
	0, 0, 1089, 0, 391, 584, 1234, 0, 1268, 0,
	0, 1083, 1815, 1816, 0, 0, 1391, 1098, 0, 0,
	391, 940, 940, 391, 0, 0, 0, 1404, 945, 0,
	0, 391, 0, 0, 0, 0, 391, 0, 0, 1831,
	0, 0, 391, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 1234, 0, 1268, 0, 0,
	0, 1099, 0, 0, 1119, 1120, 1121, 1122, 1123, 0,
	0, 0, 1089, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1140, 0, 2147, 0, 0, 2140,
	0, 0, 1108, 1116, 0, 0, 0, 2138, 0, 1231,
	1231, 2142, 0, 0, 0, 0, 1266, 0, 584, 0,
	0, 0, 1832, 0, 0, 0, 0, 0, 1265, 0,
	1821, 2148, 0, 0, 0, 1106, 0, 0, 0, 0,
	0, 1099, 0, 0, 1100, 0, 1235, 2381, 2382, 2383,
	0, 0, 2387, 2141, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 1265, 1265, 0, 0, 0, 996,
	0, 0, 0, 1265, 1265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 1235, 585, 585, 0, 1831,
	1234, 0, 1268, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 1825, 1817, 1818, 1819,
	1820, 1822, 1823, 0, 0, 0, 1234, 1234, 1268, 1268,
	1109, 2143, 0, 2144, 0, 1234, 1234, 1268, 1268, 1085,
	1086, 1087, 1088, 1090, 1091, 0, 0, 0, 0, 0,
	0, 1596, 584, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 1832, 2146, 1771, 1772, 584, 584, 1234, 391,
	1268, 1628, 2149, 503, 0, 1235, 503, 0, 503, 0,
	391, 391, 1634, 658, 0, 0, 0, 0, 0, 1266,
	0, 1404, 997, 0, 0, 0, 0, 0, 1107, 0,
	1267, 0, 0, 0, 1110, 0, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 0, 0, 0, 0, 0,
	0, 0, 997, 1343, 0, 1348, 0, 0, 1266, 0,
	0, 1355, 0, 0, 0, 0, 584, 0, 0, 1838,
	1839, 1840, 0, 0, 0, 584, 584, 0, 0, 0,
	2145, 1265, 0, 0, 0, 0, 0, 1817, 1818, 1819,
	1820, 1822, 1823, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	391, 391, 0, 391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1234, 0, 1268, 0, 997, 1266, 0,
	0, 0, 391, 0, 0, 0, 0, 0, 0, 391,
	0, 0, 1231, 0, 0, 391, 391, 0, 0, 391,
	0, 0, 0, 0, 1391, 0, 0, 1391, 0, 0,
	0, 0, 0, 0, 0, 1714, 0, 0, 0, 0,
	0, 391, 1720, 1721, 0, 0, 0, 1404, 0, 0,
	1728, 0, 0, 0, 0, 0, 1733, 1734, 1736, 1738,
	1739, 0, 0, 0, 0, 391, 0, 1746, 0, 0,
	0, 1749, 1267, 0, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 0, 1470, 0, 1472,
	1473, 1474, 1475, 0, 1265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 1990, 1991,
	0, 1267, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 1537, 1538, 1265, 0, 1554, 0, 1566, 1568, 1573,
	1576, 1577, 1578, 0, 0, 681, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1234, 0, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 0, 2058, 0, 0,
	0, 0, 0, 0, 1231, 1234, 0, 1268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 0, 0, 391, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 1197, 0, 1197,
	0, 503, 0, 1231, 391, 0, 0, 0, 1887, 0,
	0, 0, 0, 391, 0, 1896, 0, 0, 0, 0,
	555, 0, 391, 563, 0, 0, 0, 0, 0, 997,
	0, 0, 1267, 1267, 0, 1665, 0, 0, 635, 71,
	0, 1267, 1267, 0, 0, 1234, 0, 1268, 1665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 0, 0, 0, 391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 391, 0, 0, 0, 0,
	0, 1391, 940, 0, 0, 0, 0, 945, 0, 0,
	658, 1391, 0, 1815, 1816, 0, 1833, 1834, 1835, 0,
	0, 0, 0, 0, 0, 1962, 0, 0, 1231, 2179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 1231, 1830, 0, 0, 0,
	0, 0, 0, 1231, 1231, 0, 1254, 1244, 1273, 1236,
	1264, 1263, 0, 0, 1238, 1237, 0, 0, 0, 0,
	1275, 1274, 0, 0, 0, 0, 0, 2024, 0, 0,
	0, 0, 0, 0, 1755, 1756, 1231, 0, 0, 0,
	1761, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	0, 1821, 0, 0, 1269, 0, 1261, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 1780, 0, 0, 0, 0, 0, 0, 1787,
	0, 0, 1791, 0, 1258, 1256, 1257, 0, 2258, 1836,
	0, 0, 0, 0, 0, 0, 0, 0, 1404, 1805,
	1197, 0, 0, 0, 0, 0, 0, 2086, 0, 0,
	1831, 0, 0, 0, 0, 1247, 1246, 1248, 1249, 1250,
	1251, 1252, 0, 1272, 391, 391, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 585, 0, 0, 1573, 1573,
	1573, 2111, 2293, 0, 0, 0, 585, 0, 0, 2113,
	0, 1240, 0, 0, 0, 0, 585, 0, 0, 391,
	0, 0, 658, 1262, 0, 0, 0, 1245, 0, 0,
	0, 563, 0, 1391, 658, 0, 0, 2133, 2134, 1404,
	0, 1231, 0, 1832, 1890, 0, 0, 0, 0, 0,
	0, 0, 0, 1962, 658, 0, 1255, 0, 0, 2167,
	0, 2168, 0, 391, 2170, 2171, 1906, 391, 0, 2175,
	0, 0, 0, 1815, 1816, 0, 1833, 1834, 1835, 0,
	0, 0, 1267, 0, 0, 0, 1241, 0, 0, 2178,
	0, 0, 0, 0, 2348, 0, 0, 1253, 1242, 0,
	0, 0, 0, 1926, 0, 0, 0, 1277, 1355, 0,
	2196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1239, 1267, 0, 1270, 1271, 0, 1830, 0, 1938, 0,
	1827, 1828, 1829, 0, 0, 1826, 1824, 1825, 1817, 1818,
	1819, 1820, 1822, 1823, 0, 1243, 0, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 0, 0, 1959, 0,
	0, 555, 0, 0, 0, 1962, 0, 658, 1596, 0,
	1962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1821, 0, 1988, 0, 0, 1989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1994, 0,
	0, 0, 0, 0, 0, 0, 0, 2003, 0, 0,
	0, 1267, 0, 0, 1231, 2007, 0, 0, 1906, 1836,
	0, 1404, 0, 2250, 0, 0, 2252, 0, 71, 0,
	0, 0, 0, 963, 391, 0, 0, 1962, 2031, 585,
	1831, 0, 2033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 0, 2284, 0, 0, 0, 0, 0, 0, 1128,
	0, 1131, 0, 0, 0, 2064, 2065, 0, 1136, 0,
	0, 0, 0, 997, 2071, 2072, 2073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1962, 997, 0, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 658, 1832, 0, 0, 0, 0, 940, 0,
	2111, 2111, 0, 0, 0, 0, 2324, 0, 0, 0,
	945, 1391, 0, 0, 0, 0, 0, 0, 1197, 0,
	585, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2340, 2341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 2157, 0, 0, 0, 2363, 0, 0,
	1827, 1828, 1829, 0, 0, 1826, 1824, 1825, 1817, 1818,
	1819, 1820, 1822, 1823, 0, 0, 0, 2373, 0, 658,
	0, 2180, 391, 0, 0, 2183, 2184, 0, 0, 0,
	2186, 0, 0, 0, 0, 0, 0, 2188, 0, 2190,
	0, 0, 1962, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 2324, 0, 0, 2197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	391, 0, 0, 0, 0, 0, 2430, 71, 2206, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 1815, 1816, 0, 1833, 1834, 1835, 0, 997,
	0, 0, 0, 555, 0, 0, 555, 555, 1997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 1082,
	0, 1101, 1102, 1103, 1111, 1112, 1113, 0, 0, 0,
	0, 0, 0, 0, 1104, 635, 0, 0, 0, 2242,
	0, 1084, 0, 0, 1115, 1830, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 1815, 1816, 0, 1833, 1834,
	1835, 0, 0, 0, 71, 1083, 0, 585, 0, 0,
	71, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 585, 2274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2285, 2286, 0,
	1821, 0, 0, 0, 0, 0, 0, 0, 1830, 1081,
	1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0, 0,
	0, 0, 0, 0, 0, 1104, 1089, 0, 2298, 0,
	0, 0, 1084, 0, 0, 1115, 1815, 1816, 1836, 1833,
	1834, 1835, 0, 0, 0, 0, 1108, 1116, 0, 0,
	0, 585, 1996, 0, 0, 0, 1083, 0, 0, 1831,
	585, 585, 1098, 1821, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2330, 0, 0, 1106,
	0, 0, 0, 997, 0, 1099, 0, 0, 0, 1830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1836, 1488, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 563, 0, 1089, 0, 0,
	1131, 0, 1831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1832, 0, 945, 0, 0, 1108, 1116, 0,
	0, 0, 0, 0, 1821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 1109, 0, 1099, 0, 0, 0,
	0, 0, 1836, 0, 0, 0, 0, 71, 0, 71,
	0, 0, 0, 0, 0, 1832, 0, 0, 2412, 0,
	0, 1105, 0, 1831, 2422, 2422, 0, 71, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 1827,
	1828, 1829, 0, 0, 1826, 1824, 1825, 1817, 1818, 1819,
	1820, 1822, 1823, 0, 0, 0, 0, 0, 2422, 0,
	0, 0, 1107, 0, 0, 1095, 1096, 1097, 1110, 1100,
	1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0,
	0, 0, 0, 0, 0, 1109, 0, 1857, 0, 0,
	0, 0, 0, 0, 2422, 0, 1832, 0, 0, 0,
	0, 0, 1827, 1828, 1829, 0, 0, 1826, 1824, 1825,
	1817, 1818, 1819, 1820, 1822, 1823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1095, 1096, 1097, 1110,
	0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091,
	635, 0, 0, 0, 0, 0, 635, 635, 1856, 0,
	635, 0, 0, 1827, 1828, 1829, 0, 0, 1826, 1824,
	1825, 1817, 1818, 1819, 1820, 1822, 1823, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 71, 0, 0, 0, 329, 0, 71,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 194, 0, 0, 1488, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 1131, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 1131, 229,
	0, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 0, 247, 0, 367, 248,
	249, 71, 251, 252, 71, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 563, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 371, 0, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 71, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 635, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 700, 689, 690,
	687, 688, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 1514, 176, 0, 0, 0,
	0, 717, 682, 0, 0, 0, 177, 178, 179, 330,
	732, 332, 733, 180, 734, 735, 0, 181, 336, 337,
	182, 183, 685, 716, 736, 737, 340, 0, 184, 728,
	0, 708, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 587, 192, 193, 194, 0, 709, 710,
	712, 0, 711, 713, 195, 196, 392, 197, 738, 198,
	739, 740, 0, 199, 0, 200, 0, 201, 1515, 0,
	731, 203, 0, 204, 0, 0, 0, 673, 205, 206,
	207, 718, 719, 696, 0, 0, 208, 209, 741, 742,
	743, 0, 210, 0, 211, 0, 0, 588, 0, 212,
	729, 0, 352, 0, 0, 213, 214, 215, 216, 725,
	727, 590, 0, 220, 0, 217, 635, 589, 218, 744,
	219, 745, 746, 747, 748, 749, 0, 707, 0, 591,
	221, 222, 223, 592, 224, 225, 226, 0, 228, 227,
	0, 730, 593, 229, 594, 0, 230, 0, 0, 231,
	635, 232, 233, 234, 236, 363, 235, 595, 237, 238,
	240, 239, 668, 0, 697, 726, 241, 750, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 596,
	247, 597, 720, 248, 249, 250, 251, 252, 0, 253,
	721, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	751, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 598, 276,
	277, 674, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 714, 290, 279, 280, 291, 599,
	292, 752, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 753, 297, 298, 722, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 754, 755, 0,
	0, 309, 310, 723, 724, 695, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 715, 319, 0, 382,
	320, 321, 322, 383, 756, 1513, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 669, 0, 0,
	0, 0, 71, 667, 0, 0, 0, 0, 665, 666,
	1516, 0, 0, 0, 0, 0, 0, 675, 1511, 0,
	0, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 994, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2314, 0, 174,
	175, 999, 176, 1000, 1001, 1002, 1003, 329, 1004, 1005,
	1006, 1007, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 1008, 181, 336, 337, 182, 183, 1009, 1010,
	338, 339, 340, 1011, 184, 341, 1012, 586, 1013, 185,
	186, 187, 0, 188, 1014, 189, 190, 191, 1015, 587,
	192, 193, 194, 1016, 1017, 1019, 1018, 1020, 1021, 1022,
	195, 196, 392, 197, 342, 198, 343, 344, 1023, 199,
	1024, 200, 1025, 201, 1026, 1027, 202, 203, 1028, 204,
	1029, 1131, 1030, 345, 205, 206, 207, 346, 347, 1031,
	1032, 1033, 208, 209, 348, 349, 350, 0, 210, 1034,
	211, 1035, 1036, 588, 1037, 212, 351, 1038, 352, 1039,
	0, 213, 214, 215, 216, 353, 354, 590, 1040, 220,
	1041, 217, 1042, 589, 218, 355, 219, 356, 357, 358,
	359, 360, 1043, 361, 1044, 591, 221, 222, 223, 592,
	224, 225, 226, 1045, 228, 227, 1046, 362, 593, 229,
	594, 1047, 230, 1048, 1049, 231, 0, 232, 233, 234,
	236, 363, 235, 595, 237, 238, 240, 239, 1050, 1051,
	1052, 364, 241, 365, 242, 243, 1053, 244, 1054, 1055,
	245, 1056, 1057, 246, 366, 596, 247, 597, 367, 248,
	249, 250, 251, 252, 1058, 253, 368, 254, 369, 255,
	1059, 256, 257, 258, 259, 260, 370, 261, 262, 1060,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 1061, 275, 598, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 1062, 287, 372, 286, 288, 289,
	1063, 290, 279, 280, 291, 599, 292, 373, 374, 293,
	1064, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 1065, 301, 1066, 302, 303, 304, 305, 306, 307,
	308, 1067, 377, 378, 379, 1068, 1069, 309, 310, 380,
	381, 1070, 311, 312, 313, 314, 1071, 1072, 315, 316,
	317, 318, 1073, 319, 1074, 382, 320, 321, 322, 383,
	384, 1075, 1076, 323, 1077, 1078, 1079, 1080, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 1384, 0, 0, 0, 0, 0, 0, 0, 0,
	1385, 174, 175, 999, 176, 1000, 1001, 1002, 1003, 329,
	1004, 1005, 1006, 1007, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 1008, 181, 336, 337, 182, 183,
	1009, 1010, 338, 339, 340, 1011, 184, 341, 1012, 586,
	1013, 185, 186, 187, 0, 188, 1014, 189, 190, 191,
	1015, 587, 192, 193, 194, 1016, 1017, 1019, 1018, 1020,
	1021, 1022, 195, 196, 392, 197, 342, 198, 343, 344,
	1023, 199, 1024, 200, 1025, 201, 1026, 1027, 202, 203,
	1028, 204, 1029, 0, 1030, 345, 205, 206, 207, 346,
	347, 1031, 1032, 1033, 208, 209, 348, 349, 350, 0,
	210, 1034, 211, 1035, 1036, 588, 1037, 212, 351, 1038,
	352, 1039, 0, 213, 214, 215, 216, 353, 354, 590,
	1040, 220, 1041, 217, 1042, 589, 218, 355, 219, 356,
	357, 358, 359, 360, 1043, 361, 1044, 591, 221, 222,
	223, 592, 224, 225, 226, 1045, 228, 227, 1046, 362,
	593, 229, 594, 1047, 230, 1048, 1049, 231, 0, 232,
	233, 234, 236, 363, 235, 595, 237, 238, 240, 239,
	1050, 1051, 1052, 364, 241, 365, 242, 243, 1053, 244,
	1054, 1055, 245, 1056, 1057, 246, 366, 596, 247, 597,
	367, 248, 249, 250, 251, 252, 1058, 253, 368, 254,
	369, 255, 1059, 256, 257, 258, 259, 260, 370, 261,
	262, 1060, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 1061, 275, 598, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 1062, 287, 372, 286,
	288, 289, 1063, 290, 279, 280, 291, 599, 292, 373,
	374, 293, 1064, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 1065, 301, 1066, 302, 303, 304, 305,
	306, 307, 308, 1067, 377, 378, 379, 1068, 1069, 309,
	310, 380, 381, 1070, 311, 312, 313, 314, 1071, 1072,
	315, 316, 317, 318, 1073, 319, 1074, 382, 320, 321,
	322, 383, 384, 1075, 1076, 323, 1077, 1078, 1079, 1080,
	324, 325, 326, 327, 328, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2129, 174, 175, 999, 176, 1000, 1001,
	1002, 1003, 329, 1004, 1005, 1006, 1007, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 1008, 181, 336,
	337, 182, 183, 1009, 1010, 338, 339, 340, 1011, 184,
	341, 1012, 586, 1013, 185, 186, 187, 0, 188, 1014,
	189, 190, 191, 1015, 587, 192, 193, 194, 1016, 1017,
	1019, 1018, 1020, 1021, 1022, 195, 196, 392, 197, 342,
	198, 343, 344, 1023, 199, 1024, 200, 1025, 201, 1026,
	1027, 202, 203, 1028, 204, 1029, 0, 1030, 345, 205,
	206, 207, 346, 347, 1031, 1032, 1033, 208, 209, 348,
	349, 350, 0, 210, 1034, 211, 1035, 1036, 588, 1037,
	212, 351, 1038, 352, 1039, 0, 213, 214, 215, 216,
	353, 354, 590, 1040, 220, 1041, 217, 1042, 589, 218,
	355, 219, 356, 357, 358, 359, 360, 1043, 361, 1044,
	591, 221, 222, 223, 592, 224, 225, 226, 1045, 228,
	227, 1046, 362, 593, 229, 594, 1047, 230, 1048, 1049,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 1050, 1051, 1052, 364, 241, 365, 242,
	243, 1053, 244, 1054, 1055, 245, 1056, 1057, 246, 366,
	596, 247, 597, 367, 248, 249, 250, 251, 252, 1058,
	253, 368, 254, 369, 255, 1059, 256, 257, 258, 259,
	260, 370, 261, 262, 1060, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 1061, 275, 598,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 1062,
	287, 372, 286, 288, 289, 1063, 290, 279, 280, 291,
	599, 292, 373, 374, 293, 1064, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 1065, 301, 1066, 302,
	303, 304, 305, 306, 307, 308, 1067, 377, 378, 379,
	1068, 1069, 309, 310, 380, 381, 1070, 311, 312, 313,
	314, 1071, 1072, 315, 316, 317, 318, 1073, 319, 1074,
	382, 320, 321, 322, 383, 384, 1075, 1076, 323, 1077,
	1078, 1079, 1080, 324, 325, 326, 327, 328, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 174, 175, 999, 176, 1000, 1001,
	1002, 1003, 329, 1004, 1005, 1006, 1007, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 1008, 181, 336,
	337, 182, 183, 1009, 1010, 338, 339, 340, 1011, 184,
	341, 1012, 586, 1013, 185, 186, 187, 0, 188, 1014,
	189, 190, 191, 1015, 587, 192, 193, 194, 1016, 1017,
	1019, 1018, 1020, 1021, 1022, 195, 196, 392, 197, 342,
	198, 343, 344, 1023, 199, 1024, 200, 1025, 201, 1026,
	1027, 202, 203, 1028, 204, 1029, 0, 1030, 345, 205,
	206, 207, 346, 347, 1031, 1032, 1033, 208, 209, 348,
	349, 350, 0, 210, 1034, 211, 1035, 1036, 588, 1037,
	212, 351, 1038, 352, 1039, 0, 213, 214, 215, 216,
	353, 354, 590, 1040, 220, 1041, 217, 1042, 589, 218,
	355, 219, 356, 357, 358, 359, 360, 1043, 361, 1044,
	591, 221, 222, 223, 592, 224, 225, 226, 1045, 228,
	227, 1046, 362, 593, 229, 594, 1047, 230, 1048, 1049,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 1050, 1051, 1052, 364, 241, 365, 242,
	243, 1053, 244, 1054, 1055, 245, 1056, 1057, 246, 366,
	596, 247, 597, 367, 248, 249, 250, 251, 252, 1058,
	253, 368, 254, 369, 255, 1059, 256, 257, 258, 259,
	260, 370, 261, 262, 1060, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 1061, 275, 598,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 1062,
	287, 372, 286, 288, 289, 1063, 290, 279, 280, 291,
	599, 292, 373, 374, 293, 1064, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 1065, 301, 1066, 302,
	303, 304, 305, 306, 307, 308, 1067, 377, 378, 379,
	1068, 1069, 309, 310, 380, 381, 1070, 311, 312, 313,
	314, 1071, 1072, 315, 316, 317, 318, 1073, 319, 1074,
	382, 320, 321, 322, 383, 384, 1075, 1076, 323, 1077,
	1078, 1079, 1080, 324, 325, 326, 327, 328, 700, 689,
	690, 687, 688, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 946, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 130,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 132, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 816, 756, 0, 0, 323, 0,
	0, 0, 124, 324, 325, 326, 327, 328, 669, 125,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 0, 0, 0, 0, 0, 0, 0, 1134, 0,
	0, 0, 0, 564, 678, 700, 689, 690, 687, 688,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 177, 178, 179, 330, 732, 332,
	733, 180, 734, 735, 0, 181, 336, 337, 182, 183,
	685, 716, 736, 737, 340, 0, 184, 728, 0, 708,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 587, 192, 193, 194, 0, 709, 710, 712, 0,
	711, 713, 195, 196, 392, 197, 738, 198, 739, 740,
	0, 199, 0, 200, 0, 201, 0, 0, 731, 203,
	0, 204, 0, 0, 0, 673, 205, 206, 207, 718,
	719, 696, 0, 0, 208, 209, 741, 742, 743, 0,
	210, 0, 211, 0, 0, 588, 0, 212, 729, 0,
	352, 0, 0, 213, 214, 215, 216, 725, 727, 590,
	0, 220, 0, 217, 0, 589, 218, 744, 219, 745,
	746, 747, 748, 749, 0, 707, 0, 591, 221, 222,
	223, 592, 224, 225, 226, 0, 228, 227, 0, 730,
	593, 229, 594, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 595, 237, 238, 240, 239,
	668, 0, 697, 726, 241, 750, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 596, 247, 597,
	720, 248, 249, 250, 251, 252, 0, 253, 721, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 751, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 598, 276, 277, 674,
	278, 0, 282, 283, 284, 285, 130, 287, 372, 286,
	288, 289, 714, 290, 279, 280, 291, 599, 292, 752,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 753,
	297, 298, 722, 0, 301, 132, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 754, 755, 0, 0, 309,
	310, 723, 724, 695, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 715, 319, 0, 382, 320, 321,
	322, 816, 756, 0, 0, 323, 0, 0, 0, 124,
	324, 325, 326, 327, 328, 669, 125, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 665, 666, 700, 689,
	690, 687, 688, 679, 0, 1134, 0, 0, 0, 0,
	0, 678, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 0, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 130,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 132, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 816, 756, 0, 0, 323, 0,
	0, 0, 124, 324, 325, 326, 327, 328, 669, 125,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 700, 689, 690, 687, 688, 679, 0, 1134, 0,
	0, 0, 0, 0, 678, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	177, 178, 179, 330, 732, 332, 733, 180, 734, 735,
	1569, 181, 336, 337, 182, 183, 685, 716, 736, 737,
	340, 0, 184, 728, 0, 708, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 709, 710, 712, 0, 711, 713, 195, 196,
	392, 197, 738, 198, 739, 740, 0, 199, 0, 200,
	0, 201, 0, 0, 731, 203, 0, 204, 0, 0,
	0, 673, 205, 206, 207, 718, 719, 696, 0, 0,
	208, 209, 741, 742, 743, 0, 210, 0, 211, 0,
	1574, 588, 0, 212, 729, 0, 352, 0, 0, 213,
	214, 215, 216, 725, 727, 590, 0, 220, 0, 217,
	0, 589, 218, 744, 219, 745, 746, 747, 748, 749,
	0, 707, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 1570, 730, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 668, 0, 697, 726,
	241, 750, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 720, 248, 249, 250,
	251, 252, 0, 253, 721, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 751, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 674, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 714, 290,
	279, 280, 291, 599, 292, 752, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 753, 297, 298, 722, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 754, 755, 0, 1571, 309, 310, 723, 724, 695,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	715, 319, 0, 382, 320, 321, 322, 383, 756, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 700, 689, 690, 687, 688, 679,
	0, 675, 0, 0, 0, 0, 0, 678, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 177, 178, 179, 330, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 685,
	716, 736, 737, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 673, 205, 206, 207, 718, 719,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 590, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 668,
	2093, 697, 726, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 674, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 599, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	723, 724, 695, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 756, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 669, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 665, 666, 941, 700, 689,
	690, 687, 688, 679, 675, 0, 0, 0, 0, 0,
	678, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 0, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 1357, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 1356, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 383, 756, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 700, 689, 690, 687, 688, 679, 0, 675, 0,
	0, 0, 0, 0, 678, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	177, 178, 179, 330, 732, 332, 733, 180, 734, 735,
	0, 181, 336, 337, 182, 183, 685, 716, 736, 737,
	340, 0, 184, 728, 0, 708, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 709, 710, 712, 0, 711, 713, 195, 196,
	392, 197, 738, 198, 739, 740, 0, 199, 0, 200,
	0, 201, 0, 0, 731, 203, 0, 204, 0, 0,
	0, 673, 205, 206, 207, 718, 719, 696, 0, 0,
	208, 209, 741, 742, 743, 0, 210, 0, 211, 0,
	0, 588, 0, 212, 729, 0, 352, 0, 0, 213,
	214, 215, 216, 725, 727, 590, 0, 220, 0, 217,
	0, 589, 218, 744, 219, 745, 746, 747, 748, 749,
	0, 707, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 0, 730, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 668, 0, 697, 726,
	241, 750, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 720, 248, 249, 250,
	251, 252, 0, 253, 721, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 751, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 674, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 714, 290,
	279, 280, 291, 599, 292, 752, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 753, 297, 298, 722, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 754, 755, 0, 0, 309, 310, 723, 724, 695,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	715, 319, 0, 382, 320, 321, 322, 383, 756, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 0, 0, 0, 0, 0, 1138,
	1506, 675, 0, 0, 0, 0, 0, 678, 700, 689,
	690, 687, 688, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 946, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 383, 756, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 700, 689, 690, 687, 688, 679, 0, 675, 0,
	0, 0, 0, 0, 678, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	177, 178, 179, 330, 732, 332, 733, 180, 734, 735,
	0, 181, 336, 337, 182, 183, 685, 716, 736, 737,
	340, 0, 184, 728, 0, 708, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 709, 710, 712, 0, 711, 713, 195, 196,
	392, 197, 738, 198, 739, 740, 0, 199, 0, 200,
	0, 201, 0, 0, 731, 203, 0, 204, 0, 0,
	0, 673, 205, 206, 207, 718, 719, 696, 0, 0,
	208, 209, 741, 742, 743, 0, 210, 0, 211, 0,
	0, 588, 0, 212, 729, 0, 352, 0, 0, 213,
	214, 215, 216, 725, 727, 590, 0, 220, 0, 217,
	0, 589, 218, 744, 219, 745, 746, 747, 748, 749,
	0, 707, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 0, 730, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 668, 0, 697, 726,
	241, 750, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 720, 248, 249, 250,
	251, 252, 0, 253, 721, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 751, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 674, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 714, 290,
	279, 280, 291, 599, 292, 752, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 753, 297, 298, 722, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 754, 755, 0, 0, 309, 310, 723, 724, 695,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	715, 319, 0, 382, 320, 321, 322, 383, 756, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 700, 689, 690, 687, 688, 679,
	0, 675, 2061, 0, 0, 0, 0, 678, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 177, 178, 179, 330, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 685,
	716, 736, 737, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 673, 205, 206, 207, 718, 719,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 590, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 668,
	0, 697, 726, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 674, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 599, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	723, 724, 695, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 756, 2010, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 669, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 665, 666, 700, 689, 690,
	687, 688, 679, 0, 675, 0, 0, 0, 0, 0,
	678, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 717, 682, 0, 0, 0, 177, 178, 179, 330,
	732, 332, 733, 180, 734, 735, 0, 181, 336, 337,
	182, 183, 685, 716, 736, 737, 340, 0, 184, 728,
	0, 708, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 587, 192, 193, 194, 0, 709, 710,
	712, 0, 711, 713, 195, 196, 392, 197, 738, 198,
	739, 740, 0, 199, 0, 200, 0, 201, 0, 0,
	731, 203, 0, 204, 0, 0, 0, 673, 205, 206,
	207, 718, 719, 696, 0, 0, 208, 209, 741, 742,
	743, 0, 210, 0, 211, 0, 0, 588, 0, 212,
	729, 0, 352, 0, 0, 213, 214, 215, 216, 725,
	727, 590, 0, 220, 0, 217, 0, 589, 218, 744,
	219, 745, 746, 747, 748, 749, 0, 707, 0, 591,
	221, 222, 223, 592, 224, 225, 226, 0, 228, 227,
	0, 730, 593, 229, 594, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 595, 237, 238,
	240, 239, 668, 0, 697, 726, 241, 750, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 596,
	247, 597, 720, 248, 249, 250, 251, 252, 0, 253,
	721, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	751, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 598, 276,
	277, 674, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 714, 290, 279, 280, 291, 599,
	292, 752, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 753, 297, 298, 722, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 754, 755, 0,
	0, 309, 310, 723, 724, 695, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 715, 319, 0, 382,
	320, 321, 322, 383, 756, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 669, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 665, 666,
	700, 689, 690, 687, 688, 679, 0, 675, 2000, 0,
	0, 0, 0, 678, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 717, 682, 0, 0, 0, 177,
	178, 179, 330, 732, 332, 733, 180, 734, 735, 0,
	181, 336, 337, 182, 183, 685, 716, 736, 737, 340,
	0, 184, 728, 0, 708, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 587, 192, 193, 194,
	0, 709, 710, 712, 0, 711, 713, 195, 196, 392,
	197, 738, 198, 739, 740, 0, 199, 0, 200, 0,
	201, 0, 0, 731, 203, 0, 204, 0, 0, 0,
	673, 205, 206, 207, 718, 719, 696, 0, 0, 208,
	209, 741, 742, 743, 0, 210, 0, 211, 0, 1574,
	588, 0, 212, 729, 0, 352, 0, 0, 213, 214,
	215, 216, 725, 727, 590, 0, 220, 0, 217, 0,
	589, 218, 744, 219, 745, 746, 747, 748, 749, 0,
	707, 0, 591, 221, 222, 223, 592, 224, 225, 226,
	0, 228, 227, 0, 730, 593, 229, 594, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	595, 237, 238, 240, 239, 668, 0, 697, 726, 241,
	750, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 596, 247, 597, 720, 248, 249, 250, 251,
	252, 0, 253, 721, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 751, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 598, 276, 277, 674, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 714, 290, 279,
	280, 291, 599, 292, 752, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 753, 297, 298, 722, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	754, 755, 0, 0, 309, 310, 723, 724, 695, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 715,
	319, 0, 382, 320, 321, 322, 383, 756, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	669, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 665, 666, 700, 689, 690, 687, 688, 679, 0,
	675, 0, 0, 0, 0, 0, 678, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 717, 682, 0,
	0, 0, 177, 178, 179, 330, 732, 332, 733, 180,
	734, 735, 0, 181, 336, 337, 182, 183, 685, 716,
	736, 737, 340, 0, 184, 728, 0, 708, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 587,
	192, 193, 194, 0, 709, 710, 712, 0, 711, 713,
	195, 196, 392, 197, 738, 198, 739, 740, 0, 199,
	0, 200, 0, 201, 0, 0, 731, 203, 0, 204,
	0, 0, 0, 673, 205, 206, 207, 718, 719, 696,
	0, 0, 208, 209, 741, 742, 743, 0, 210, 0,
	211, 0, 0, 588, 0, 212, 729, 0, 352, 0,
	0, 213, 214, 215, 216, 725, 727, 590, 0, 220,
	0, 217, 0, 589, 218, 744, 219, 745, 746, 747,
	748, 749, 0, 707, 0, 591, 221, 222, 223, 592,
	224, 225, 226, 0, 228, 227, 0, 730, 593, 229,
	594, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 595, 237, 238, 240, 239, 668, 0,
	697, 726, 241, 750, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 596, 247, 597, 720, 248,
	249, 250, 251, 252, 0, 253, 721, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 751, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 598, 276, 277, 674, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	714, 290, 279, 280, 291, 599, 292, 752, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 753, 297, 298,
	722, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 754, 755, 0, 0, 309, 310, 723,
	724, 695, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 715, 319, 0, 382, 320, 321, 322, 383,
	756, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 669, 0, 0, 0, 0, 0, 667,
	0, 0, 0, 0, 665, 666, 941, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 1583, 678,
	700, 689, 690, 687, 688, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 717, 682, 0, 0, 0, 177,
	178, 179, 330, 732, 332, 733, 180, 734, 735, 0,
	181, 336, 337, 182, 183, 685, 716, 736, 737, 340,
	0, 184, 728, 0, 708, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 587, 192, 193, 194,
	0, 709, 710, 712, 0, 711, 713, 195, 196, 392,
	197, 738, 198, 739, 740, 0, 199, 0, 200, 0,
	201, 0, 0, 731, 203, 0, 204, 0, 0, 0,
	673, 205, 206, 207, 718, 719, 696, 0, 0, 208,
	209, 741, 742, 743, 0, 210, 0, 211, 0, 0,
	588, 0, 212, 729, 0, 352, 0, 0, 213, 214,
	215, 216, 725, 727, 590, 0, 220, 0, 217, 0,
	589, 218, 744, 219, 745, 746, 747, 748, 749, 0,
	707, 0, 591, 221, 222, 223, 592, 224, 225, 226,
	0, 228, 227, 0, 730, 593, 229, 594, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	595, 237, 238, 240, 239, 668, 0, 697, 726, 241,
	750, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 596, 247, 597, 720, 248, 249, 250, 251,
	252, 0, 253, 721, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 751, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 598, 276, 277, 674, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 714, 290, 279,
	280, 291, 599, 292, 752, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 753, 297, 298, 722, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	754, 755, 0, 0, 309, 310, 723, 724, 695, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 715,
	319, 0, 382, 320, 321, 322, 383, 756, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	669, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 665, 666, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 1581, 678, 700, 689, 690,
	687, 688, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 717, 682, 0, 0, 0, 177, 178, 179, 330,
	732, 332, 733, 180, 734, 735, 0, 181, 336, 337,
	182, 183, 685, 716, 736, 737, 340, 0, 184, 728,
	0, 708, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 587, 192, 193, 194, 0, 709, 710,
	712, 0, 711, 713, 195, 196, 392, 197, 738, 198,
	739, 740, 0, 199, 0, 200, 0, 201, 0, 0,
	731, 203, 0, 204, 0, 0, 0, 673, 205, 206,
	207, 718, 719, 696, 0, 0, 208, 209, 741, 742,
	743, 0, 210, 0, 211, 0, 0, 588, 0, 212,
	729, 0, 352, 0, 0, 213, 214, 215, 216, 725,
	727, 590, 0, 220, 0, 217, 0, 589, 218, 744,
	219, 745, 746, 747, 748, 749, 0, 707, 0, 591,
	221, 222, 223, 592, 224, 225, 226, 0, 228, 227,
	0, 730, 593, 229, 594, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 595, 237, 238,
	240, 239, 668, 0, 697, 726, 241, 750, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 596,
	247, 597, 720, 248, 249, 250, 251, 252, 0, 253,
	721, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	751, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 598, 276,
	277, 674, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 714, 290, 279, 280, 291, 599,
	292, 752, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 753, 297, 298, 722, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 754, 755, 0,
	0, 309, 310, 723, 724, 695, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 715, 319, 0, 382,
	320, 321, 322, 383, 756, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 669, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 665, 666,
	0, 0, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 1565, 678, 700, 689, 690, 687, 688, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 177, 178, 179, 330, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 685,
	716, 736, 737, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 673, 205, 206, 207, 718, 719,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 590, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 668,
	0, 697, 726, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 674, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 599, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	723, 724, 695, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 756, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 669, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 665, 666, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 1553,
	678, 700, 689, 690, 687, 688, 679, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	177, 178, 179, 330, 732, 332, 733, 180, 734, 735,
	0, 181, 336, 337, 182, 183, 685, 716, 736, 737,
	340, 0, 184, 728, 0, 708, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 709, 710, 712, 0, 711, 713, 195, 196,
	392, 197, 738, 198, 739, 740, 0, 199, 0, 200,
	0, 201, 0, 0, 731, 203, 0, 204, 0, 0,
	0, 673, 205, 206, 207, 718, 719, 696, 0, 0,
	208, 209, 741, 742, 743, 0, 210, 0, 211, 0,
	0, 588, 0, 212, 729, 0, 352, 0, 0, 213,
	214, 215, 216, 725, 727, 590, 0, 220, 0, 217,
	0, 589, 218, 744, 219, 745, 746, 747, 748, 749,
	0, 707, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 0, 730, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 668, 0, 697, 726,
	241, 750, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 720, 248, 249, 250,
	251, 252, 0, 253, 721, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 751, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 674, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 714, 290,
	279, 280, 291, 599, 292, 752, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 753, 297, 298, 722, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 754, 755, 0, 0, 309, 310, 723, 724, 695,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	715, 319, 0, 382, 320, 321, 322, 383, 756, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 0, 1551, 678, 1543, 689,
	690, 687, 688, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	1546, 739, 740, 0, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 1547, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 1548, 1545, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 1549, 0,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 383, 756, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 1544, 328, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 1540, 678, 1543, 689, 690, 687, 688,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 177, 178, 179, 330, 732, 332,
	733, 180, 734, 735, 0, 181, 336, 337, 182, 183,
	685, 716, 736, 737, 340, 0, 184, 728, 0, 708,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 587, 192, 193, 194, 0, 709, 710, 712, 0,
	711, 713, 195, 196, 392, 197, 738, 1546, 739, 740,
	0, 199, 0, 200, 0, 201, 0, 0, 731, 203,
	0, 204, 0, 0, 0, 673, 205, 206, 207, 718,
	719, 696, 0, 0, 208, 209, 741, 742, 743, 0,
	210, 0, 211, 0, 0, 588, 0, 212, 729, 0,
	352, 0, 0, 213, 1547, 215, 216, 725, 727, 590,
	0, 220, 0, 217, 0, 589, 218, 744, 219, 745,
	746, 747, 748, 749, 0, 707, 0, 591, 221, 222,
	223, 592, 224, 225, 226, 0, 228, 227, 0, 730,
	593, 229, 594, 0, 230, 0, 0, 231, 0, 232,
	1548, 1545, 236, 363, 235, 595, 237, 238, 240, 239,
	668, 0, 697, 726, 241, 750, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 596, 247, 597,
	720, 248, 249, 250, 251, 252, 0, 253, 721, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 751, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 598, 276, 277, 674,
	278, 0, 282, 283, 284, 1549, 0, 287, 372, 286,
	288, 289, 714, 290, 279, 280, 291, 599, 292, 752,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 753,
	297, 298, 722, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 754, 755, 0, 0, 309,
	310, 723, 724, 695, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 715, 319, 0, 382, 320, 321,
	322, 383, 756, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 1544, 328, 669, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 665, 666, 700, 689,
	690, 687, 688, 679, 0, 675, 0, 0, 0, 0,
	0, 678, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 0, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 383, 756, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 0, 0, 0, 0, 0, 0, 0, 675, 1501,
	0, 0, 0, 1387, 678, 700, 689, 690, 687, 688,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 177, 178, 179, 330, 732, 332,
	733, 180, 734, 735, 0, 181, 336, 337, 182, 183,
	685, 716, 736, 737, 340, 0, 184, 728, 0, 708,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 587, 192, 193, 194, 0, 709, 710, 712, 0,
	711, 713, 195, 196, 392, 197, 738, 198, 739, 740,
	0, 199, 0, 200, 0, 201, 0, 0, 731, 203,
	0, 204, 0, 0, 0, 673, 205, 206, 207, 718,
	719, 696, 0, 0, 208, 209, 741, 742, 743, 0,
	210, 0, 211, 0, 0, 588, 0, 212, 729, 0,
	352, 0, 0, 213, 214, 215, 216, 725, 727, 590,
	0, 220, 0, 217, 0, 589, 218, 744, 219, 745,
	746, 747, 748, 749, 0, 707, 0, 591, 221, 222,
	223, 592, 224, 225, 226, 0, 228, 227, 0, 730,
	593, 229, 594, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 595, 237, 238, 240, 239,
	668, 0, 697, 726, 241, 750, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 596, 247, 597,
	720, 248, 249, 250, 251, 252, 0, 253, 721, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 751, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 598, 276, 277, 674,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 714, 290, 279, 280, 291, 599, 292, 752,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 753,
	297, 298, 722, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 754, 755, 0, 0, 309,
	310, 723, 724, 695, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 715, 319, 0, 382, 320, 321,
	322, 383, 756, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 669, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 665, 666, 700, 689,
	690, 687, 688, 679, 0, 675, 0, 0, 0, 0,
	0, 678, 0, 0, 174, 175, 1344, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	330, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 0, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 383, 756, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 764, 678, 700, 689, 690, 687, 688,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 177, 178, 179, 330, 732, 332,
	733, 180, 734, 735, 0, 181, 336, 337, 182, 183,
	685, 716, 736, 737, 340, 0, 184, 728, 0, 708,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 587, 192, 193, 194, 0, 709, 710, 712, 0,
	711, 713, 195, 196, 392, 197, 738, 198, 739, 740,
	0, 199, 0, 200, 0, 201, 0, 0, 731, 203,
	0, 204, 0, 0, 0, 673, 205, 206, 207, 718,
	719, 696, 0, 0, 208, 209, 741, 742, 743, 0,
	210, 0, 211, 0, 0, 588, 0, 212, 729, 0,
	352, 0, 0, 213, 214, 215, 216, 725, 727, 590,
	0, 220, 0, 217, 0, 589, 218, 744, 219, 745,
	746, 747, 748, 749, 0, 707, 0, 591, 221, 222,
	223, 592, 224, 225, 226, 0, 228, 227, 0, 730,
	593, 229, 594, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 595, 237, 238, 240, 239,
	668, 0, 697, 726, 241, 750, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 596, 247, 597,
	720, 248, 249, 250, 251, 252, 0, 253, 721, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 751, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 598, 276, 277, 674,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 714, 290, 279, 280, 291, 599, 292, 752,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 753,
	297, 298, 722, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 754, 755, 0, 0, 309,
	310, 723, 724, 695, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 715, 319, 0, 382, 320, 321,
	322, 383, 756, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 669, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 665, 666, 0, 0,
	0, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	663, 678, 700, 689, 690, 687, 688, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 717, 682, 0, 0,
	0, 177, 178, 179, 330, 732, 332, 733, 180, 734,
	735, 0, 181, 336, 337, 182, 183, 685, 716, 736,
	737, 340, 0, 184, 728, 0, 708, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 587, 192,
	193, 194, 0, 709, 710, 712, 0, 711, 713, 195,
	196, 392, 197, 738, 198, 739, 740, 0, 199, 0,
	200, 0, 201, 0, 0, 731, 203, 0, 204, 0,
	0, 0, 673, 205, 206, 207, 718, 719, 696, 0,
	0, 208, 209, 741, 742, 743, 0, 210, 0, 211,
	0, 0, 588, 0, 212, 729, 0, 352, 0, 0,
	213, 214, 215, 216, 725, 727, 590, 0, 220, 0,
	217, 0, 589, 218, 744, 219, 745, 746, 747, 748,
	749, 0, 707, 0, 591, 221, 222, 223, 592, 224,
	225, 226, 0, 228, 227, 0, 730, 593, 229, 594,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 595, 237, 238, 240, 239, 668, 0, 697,
	726, 241, 750, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 596, 247, 597, 720, 248, 249,
	250, 251, 252, 0, 253, 721, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 751, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 598, 276, 277, 674, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 714,
	290, 279, 280, 291, 599, 292, 752, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 753, 297, 298, 722,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 754, 755, 0, 0, 309, 310, 723, 724,
	695, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 715, 319, 0, 382, 320, 321, 322, 383, 756,
	0, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 669, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 665, 666, 700, 689, 690, 687, 688,
	679, 0, 675, 0, 0, 0, 0, 0, 678, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 717,
	682, 0, 0, 0, 177, 178, 179, 330, 732, 332,
	733, 180, 734, 735, 0, 181, 336, 337, 182, 183,
	685, 716, 736, 737, 340, 0, 184, 728, 0, 708,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 587, 192, 193, 2421, 0, 709, 710, 712, 0,
	711, 713, 195, 196, 392, 197, 738, 198, 739, 740,
	0, 199, 0, 200, 0, 201, 0, 0, 731, 203,
	0, 204, 0, 0, 0, 673, 205, 206, 207, 718,
	719, 696, 0, 0, 208, 209, 741, 742, 743, 0,
	210, 0, 211, 0, 0, 588, 0, 212, 729, 0,
	352, 0, 0, 213, 214, 215, 216, 725, 727, 590,
	0, 220, 0, 217, 0, 589, 218, 744, 219, 745,
	746, 747, 748, 749, 0, 707, 0, 591, 221, 222,
	223, 592, 224, 225, 226, 0, 228, 227, 0, 730,
	593, 229, 594, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 595, 237, 238, 240, 239,
	668, 0, 697, 726, 241, 750, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 596, 247, 597,
	720, 248, 249, 250, 251, 252, 0, 253, 721, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 751, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 598, 276, 277, 674,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 714, 290, 279, 280, 291, 599, 292, 752,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 753,
	297, 298, 722, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 754, 755, 0, 0, 309,
	310, 723, 724, 695, 311, 312, 2420, 314, 0, 0,
	315, 316, 317, 318, 715, 319, 0, 382, 320, 321,
	322, 383, 756, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 669, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 665, 666, 700, 689,
	690, 687, 688, 679, 0, 675, 0, 0, 0, 0,
	0, 678, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 717, 682, 0, 0, 0, 177, 178, 179,
	2419, 732, 332, 733, 180, 734, 735, 0, 181, 336,
	337, 182, 183, 685, 716, 736, 737, 340, 0, 184,
	728, 0, 708, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 2421, 0, 709,
	710, 712, 0, 711, 713, 195, 196, 392, 197, 738,
	198, 739, 740, 0, 199, 0, 200, 0, 201, 0,
	0, 731, 203, 0, 204, 0, 0, 0, 673, 205,
	206, 207, 718, 719, 696, 0, 0, 208, 209, 741,
	742, 743, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 729, 0, 352, 0, 0, 213, 214, 215, 216,
	725, 727, 590, 0, 220, 0, 217, 0, 589, 218,
	744, 219, 745, 746, 747, 748, 749, 0, 707, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 730, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 668, 0, 697, 726, 241, 750, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 720, 248, 249, 250, 251, 252, 0,
	253, 721, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 751, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 674, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 714, 290, 279, 280, 291,
	599, 292, 752, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 753, 297, 298, 722, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 754, 755,
	0, 0, 309, 310, 723, 724, 695, 311, 312, 2420,
	314, 0, 0, 315, 316, 317, 318, 715, 319, 0,
	382, 320, 321, 322, 383, 756, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 669, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 665,
	666, 700, 689, 690, 687, 688, 679, 0, 675, 0,
	0, 0, 0, 0, 678, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 717, 682, 0, 0, 0,
	177, 178, 179, 330, 732, 332, 733, 180, 734, 735,
	0, 181, 336, 337, 182, 183, 685, 716, 736, 737,
	340, 0, 184, 728, 0, 708, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 709, 710, 712, 0, 711, 713, 195, 196,
	392, 197, 738, 198, 739, 740, 0, 199, 0, 200,
	0, 201, 0, 0, 731, 203, 0, 204, 0, 0,
	0, 673, 205, 206, 207, 718, 719, 696, 0, 0,
	208, 209, 741, 742, 743, 0, 210, 0, 211, 0,
	0, 588, 0, 212, 729, 0, 352, 0, 0, 213,
	214, 215, 216, 725, 727, 590, 0, 220, 0, 217,
	0, 589, 218, 744, 219, 745, 746, 747, 748, 749,
	0, 707, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 0, 730, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 668, 0, 697, 726,
	241, 750, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 720, 248, 249, 250,
	251, 252, 0, 253, 721, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 751, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 674, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 714, 290,
	279, 280, 291, 599, 292, 752, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 753, 297, 298, 722, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 754, 755, 0, 0, 309, 310, 723, 724, 695,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	715, 319, 0, 382, 320, 321, 322, 383, 756, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 669, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 665, 666, 700, 689, 690, 687, 688, 679,
	0, 675, 0, 0, 0, 0, 0, 678, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 717, 682,
	0, 0, 0, 177, 178, 179, 330, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 685,
	716, 736, 737, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 673, 205, 206, 207, 718, 719,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 590, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 0,
	0, 697, 726, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 1563, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 599, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	723, 724, 695, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 756, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 700, 689, 690, 687, 688, 679,
	1561, 0, 0, 0, 0, 1559, 1560, 0, 0, 0,
	174, 175, 0, 176, 1562, 0, 0, 0, 717, 682,
	678, 0, 0, 177, 178, 179, 330, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 0,
	716, 736, 737, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 718, 719,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 590, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 0,
	0, 697, 726, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 1563, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 599, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	723, 724, 695, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 756, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 700, 689, 690, 687, 688, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 1562, 0, 0, 0, 717, 682,
	678, 0, 0, 177, 178, 179, 0, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 685,
	716, 736, 737, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 2421, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 673, 205, 206, 207, 718, 719,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 0, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 0, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 668,
	0, 697, 726, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 674, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 0, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	723, 724, 695, 311, 312, 2420, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 756, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 665, 666, 0, 0, 0,
	174, 175, 0, 176, 675, 0, 0, 0, 717, 0,
	678, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	716, 338, 339, 340, 0, 184, 728, 0, 708, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 709, 710, 712, 0, 711,
	713, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 718, 719,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 729, 0, 352,
	0, 0, 213, 214, 215, 216, 725, 727, 590, 0,
	220, 0, 217, 0, 589, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 730, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 0,
	0, 0, 726, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 720,
	248, 249, 250, 251, 252, 0, 253, 721, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 714, 290, 279, 280, 291, 599, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 722, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	723, 724, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 715, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 813, 0, 582, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 1964, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 586, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 587, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 588, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 590, 0, 220, 0, 217, 0, 589, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 591,
	221, 222, 223, 592, 224, 225, 226, 0, 228, 227,
	0, 362, 593, 229, 594, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 595, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 596,
	247, 597, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 598, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 130, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 599,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 132, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 816, 384, 0, 0, 323, 0, 0,
	0, 124, 324, 325, 326, 327, 328, 0, 125, 582,
	579, 0, 580, 575, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 117, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 586, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 587, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 1308, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 572, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 588,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 353, 354, 590, 0, 220, 0, 217, 0, 589,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 591, 221, 222, 223, 592, 224, 225, 226, 0,
	228, 227, 0, 362, 593, 229, 594, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 595,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 573, 0, 245, 0, 0, 246,
	366, 596, 247, 597, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	598, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 599, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 571, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 582,
	579, 0, 580, 575, 570, 0, 0, 0, 0, 0,
	581, 576, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 586, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 587, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 1305, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 572, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 588,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 353, 354, 590, 0, 220, 0, 217, 0, 589,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 591, 221, 222, 223, 592, 224, 225, 226, 0,
	228, 227, 0, 362, 593, 229, 594, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 595,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 573, 0, 245, 0, 0, 246,
	366, 596, 247, 597, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	598, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 599, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 571, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 582,
	579, 0, 580, 575, 570, 0, 0, 0, 0, 0,
	581, 576, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 586, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 587, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 857, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 572, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 588,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 353, 354, 590, 0, 220, 0, 217, 0, 589,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 591, 221, 222, 223, 592, 224, 225, 226, 0,
	228, 227, 0, 362, 593, 229, 594, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 595,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 573, 0, 245, 0, 0, 246,
	366, 596, 247, 597, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	598, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 599, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 571, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 567,
	0, 582, 579, 0, 580, 575, 570, 0, 0, 0,
	581, 576, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 586, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 572, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 588, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 590, 0, 220, 0, 217,
	0, 589, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 0, 362, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 573, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 599, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 571,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 582, 579, 0, 580, 575, 570, 0, 0, 0,
	0, 0, 581, 576, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 586, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 587, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 572, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 588, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 590, 0, 220, 0, 217,
	0, 589, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 591, 221, 222, 223, 592, 224, 225,
	226, 0, 228, 227, 0, 362, 593, 229, 594, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 595, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 573, 0, 245, 0,
	0, 246, 366, 596, 247, 597, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 598, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 599, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 571,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	564, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 581, 576, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 638, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 130, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 132, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 816, 384,
	0, 0, 323, 0, 171, 0, 124, 324, 325, 326,
	327, 328, 0, 125, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	632, 0, 965, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	638, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 130, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 132, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	816, 384, 0, 0, 323, 564, 0, 171, 124, 324,
	325, 326, 327, 328, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 632, 0, 965, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 130, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 132, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 816, 384, 0, 0, 323, 1690, 0,
	171, 124, 324, 325, 326, 327, 328, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 117, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 638, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 0,
	323, 631, 0, 171, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 632, 0,
	637, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 638,
	245, 0, 0, 246, 366, 0, 247, 0, 367, 248,
	249, 250, 251, 252, 0, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 0, 323, 0, 171, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 632, 0, 637, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 638, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 0, 323, 0, 171, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 632, 0, 637, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 0, 323, 0, 0,
	171, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 1182, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 0,
	323, 0, 171, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	1627, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 0, 323, 0, 171, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 2025, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 700, 689, 690, 687, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 968, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 732, 332, 733,
	180, 734, 735, 0, 181, 336, 337, 182, 183, 0,
	0, 736, 737, 340, 0, 184, 341, 0, 586, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	587, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 738, 198, 739, 740, 0,
	199, 0, 200, 0, 201, 0, 0, 731, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	696, 0, 0, 208, 209, 741, 742, 743, 0, 210,
	0, 211, 0, 0, 588, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 590, 0,
	220, 0, 217, 0, 589, 218, 744, 219, 745, 746,
	747, 748, 749, 0, 707, 0, 591, 221, 222, 223,
	592, 224, 225, 226, 0, 228, 227, 0, 362, 593,
	229, 594, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 595, 237, 238, 240, 239, 0,
	0, 697, 364, 241, 750, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 596, 247, 597, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 751, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 598, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 599, 292, 752, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 753, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 754, 755, 0, 0, 309, 310,
	380, 381, 695, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 756, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 863, 0, 582, 579, 0, 0,
	0, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	586, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 587, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 588, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	590, 0, 220, 0, 217, 0, 589, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 591, 221,
	222, 223, 592, 224, 225, 226, 0, 228, 227, 0,
	362, 593, 229, 594, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 595, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 596, 247,
	597, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 598, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 599, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 467, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 167, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 166, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 164, 323, 171, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	170, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 167, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 166, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 582, 579, 323, 0,
	0, 865, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 170, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	586, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 587, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 588, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	590, 0, 220, 0, 217, 0, 589, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 591, 221,
	222, 223, 592, 224, 225, 226, 0, 228, 227, 0,
	362, 593, 229, 594, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 595, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 596, 247,
	597, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 598, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 599, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 167, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 166, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 582, 579, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 170, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 586, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 587, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 588, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 590, 0, 220, 0,
	217, 0, 589, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 591, 221, 222, 223, 592, 224,
	225, 226, 0, 228, 227, 0, 362, 593, 229, 594,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 595, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 596, 247, 597, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 598, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 599, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 582, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 170, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 586, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 587, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 588, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 590, 0, 220, 0, 217, 0, 589, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	591, 221, 222, 223, 592, 224, 225, 226, 0, 228,
	227, 0, 362, 593, 229, 594, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 595, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	596, 247, 597, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 598,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	599, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 1407, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 1405, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 1604, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 1410, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 1602, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 1409, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	1603, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 1407, 184, 341, 0, 0, 1402,
	185, 186, 187, 0, 188, 1405, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 1410, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 1401, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 1409, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 1408, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 791, 323, 171, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 638, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 644, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 646, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 638, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 640, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 642,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 638, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 409, 323, 171, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 408, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 407, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 1390, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 2112, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 171, 2112, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 2109,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 638, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 1333,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	1331, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 1313, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 1196,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 1195, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	500, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 840, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 502, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 497, 378, 379, 0, 0, 309, 841, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 809, 323, 171, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 808, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 0, 247, 0, 367, 248,
	249, 250, 251, 252, 0, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 806, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 805, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 802, 323, 171, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 801, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 799, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 798, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 795, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 794,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 171, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 174, 175, 783, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 781, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 780, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 777, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 775, 323, 171, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 0, 771, 323, 171,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 773, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	366, 0, 247, 0, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 650, 323,
	171, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 652, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 648,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	500, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 491, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 490, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 502, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 492, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 493, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 497, 378, 379, 0, 0, 309, 495, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 475, 323, 171, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 0, 247, 0, 367, 248,
	249, 250, 251, 252, 0, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 371, 278, 0,
	476, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 473, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 465, 323, 171, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 432, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 171, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 1737, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 1735, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	1724, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 476, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	1206, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 0, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 171, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 614, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112,
	1113, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 1115, 0,
	1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1083,
	0, 0, 0, 1084, 0, 1098, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 1116, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 1116,
	0, 0, 0, 1106, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 39, 119, 1105, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 1105, 0, 0, 43, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 53, 0, 0, 0, 59, 0, 1109, 122,
	0, 0, 0, 60, 0, 61, 0, 0, 0, 0,
	1100, 0, 0, 0, 1815, 1816, 0, 1833, 1834, 1835,
	0, 0, 0, 62, 0, 0, 1109, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 0, 1081, 1082, 0,
	1101, 1102, 1103, 1111, 1112, 1113, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 1115, 0, 0, 1107, 1830, 0, 1095,
	1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 1083, 0, 0, 0, 0, 0,
	1098, 1855, 0, 0, 1107, 0, 0, 1095, 1096, 1097,
	1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 64, 0, 0, 0, 0, 0, 65, 1807,
	0, 0, 1821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 73, 66, 0,
	67, 0, 68, 0, 123, 1089, 0, 0, 0, 69,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 98, 0, 1108, 1116, 0, 0, 0,
	1081, 1082, 120, 1101, 1102, 1103, 1111, 1112, 1113, 0,
	0, 1831, 132, 1114, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1115, 0, 1106, 0,
	0, 102, 0, 0, 1099, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 1083, 131, 0,
	0, 0, 0, 1098, 0, 0, 124, 0, 0, 1105,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 1832, 4, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 1089, 1081,
	1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0, 0,
	0, 0, 0, 1109, 0, 1104, 0, 0, 1108, 1116,
	0, 0, 1084, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 1106, 1098, 0, 0, 0, 0, 1099, 0, 0,
	0, 1827, 1828, 1829, 0, 0, 1826, 1824, 1825, 1817,
	1818, 1819, 1820, 1822, 1823, 0, 0, 0, 0, 0,
	0, 1107, 1105, 0, 1095, 1096, 1097, 1110, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	0, 0, 2370, 0, 0, 0, 0, 1089, 1081, 1082,
	0, 1101, 1102, 1103, 1111, 1112, 1113, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 1108, 1116, 0,
	1100, 1084, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	1106, 1098, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 1089, 1095, 1096, 1097,
	1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 0, 0, 0, 2351, 1108, 1116, 0, 1100,
	0, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113,
	0, 0, 0, 0, 1114, 1109, 0, 1104, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 1115, 0, 1106,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1095, 1096, 1097, 1110,
	0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091,
	0, 0, 0, 0, 2297, 0, 0, 0, 1100, 1089,
	1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0,
	0, 0, 0, 0, 1109, 0, 1104, 0, 0, 1108,
	1116, 0, 0, 1084, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1106, 1098, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 1105, 0, 1095, 1096, 1097, 1110, 0,
	1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0,
	0, 0, 0, 2292, 0, 0, 0, 0, 1089, 1081,
	1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 1108, 1116,
	0, 1100, 1084, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 1106, 1098, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 1089, 1095, 1096,
	1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 0, 0, 2288, 1108, 1116, 0,
	1100, 0, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112,
	1113, 0, 0, 0, 0, 1114, 1109, 0, 1104, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 1115, 0,
	1106, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 1095, 1096, 1097,
	1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 0, 0, 0, 2268, 0, 0, 0, 1100,
	1089, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113,
	0, 0, 0, 0, 0, 1109, 0, 1104, 0, 0,
	1108, 1116, 0, 0, 1084, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1106, 1098, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 1105, 0, 1095, 1096, 1097, 1110,
	0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091,
	0, 0, 0, 0, 2211, 0, 0, 0, 0, 1089,
	1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1108,
	1116, 0, 1100, 1084, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1106, 1098, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 1089, 1095,
	1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 2210, 1108, 1116,
	0, 1100, 0, 1081, 1082, 0, 1101, 1102, 1103, 1111,
	1112, 1113, 0, 0, 0, 0, 1114, 1109, 0, 1104,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 1115,
	0, 1106, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 1095, 1096,
	1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 0, 0, 2150, 0, 0, 0,
	1100, 1089, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112,
	1113, 0, 0, 0, 0, 0, 1109, 0, 1104, 0,
	0, 1108, 1116, 0, 0, 1084, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 1106, 1098, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 1105, 0, 1095, 1096, 1097,
	1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 0, 0, 0, 2115, 0, 0, 0, 0,
	1089, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	1108, 1116, 0, 1100, 1084, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1106, 1098, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 1089,
	1095, 1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086,
	1087, 1088, 1090, 1091, 0, 0, 0, 0, 2028, 1108,
	1116, 0, 1100, 0, 1081, 1082, 0, 1101, 1102, 1103,
	1111, 1112, 1113, 0, 0, 0, 0, 1114, 1109, 0,
	1104, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	1115, 0, 1106, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 1095,
	1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 2004, 0, 0,
	0, 1100, 1089, 1081, 1082, 0, 1101, 1102, 1103, 1111,
	1112, 1113, 0, 0, 0, 0, 0, 1109, 0, 1104,
	0, 0, 1108, 1116, 0, 0, 1084, 0, 0, 1115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 1106, 1098, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1105, 0, 1095, 1096,
	1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 1089, 2444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1108, 1116, 0, 1100, 0, 1081, 1082, 0, 1101,
	1102, 1103, 1111, 1112, 1113, 0, 0, 0, 0, 1114,
	1109, 0, 1104, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1115, 0, 1106, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2443, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1095, 1096, 1097, 1110, 0, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 0, 0, 1777, 0, 0,
	0, 0, 0, 1100, 1089, 0, 1847, 0, 0, 1846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1109,
	0, 0, 0, 0, 1108, 1116, 0, 1081, 1082, 0,
	1101, 1102, 1103, 1111, 1112, 1113, 0, 0, 0, 0,
	0, 0, 1114, 1104, 0, 0, 0, 0, 1681, 0,
	1084, 0, 0, 1115, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 1107, 1105, 0,
	1095, 1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086,
	1087, 1088, 1090, 1091, 0, 0, 0, 0, 0, 0,
	1682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 1100, 1366, 0, 0,
	0, 0, 0, 1081, 1082, 0, 1101, 1102, 1103, 1111,
	1112, 1113, 1109, 0, 0, 1108, 1116, 0, 0, 1104,
	0, 0, 0, 1365, 0, 0, 1084, 0, 0, 1115,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	1083, 0, 0, 0, 1099, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	1107, 0, 0, 1095, 1096, 1097, 1110, 0, 1094, 1092,
	1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 1108, 1116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 1114,
	0, 0, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112,
	1113, 0, 0, 0, 1106, 0, 0, 0, 1104, 0,
	1099, 0, 0, 0, 0, 1084, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 1107, 0, 0, 1095, 1096, 1097, 1110, 0, 1094,
	1092, 1093, 1085, 1086, 1087, 1088, 1090, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1109,
	1089, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	1108, 1116, 0, 0, 1084, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1106, 1098, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1095, 1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086,
	1087, 1088, 1090, 1091, 1105, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1108,
	1116, 0, 1100, 1084, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1106, 1098, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 1089, 1095,
	1096, 1097, 1110, 1853, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 0, 1108, 1116,
	0, 1100, 0, 1081, 1082, 0, 1101, 1102, 1103, 1111,
	1112, 1113, 0, 0, 0, 0, 1114, 1109, 0, 1104,
	0, 0, 0, 1848, 0, 0, 1084, 0, 0, 1115,
	0, 1106, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 2008, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 1095, 1096,
	1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 1089, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112,
	1113, 0, 0, 0, 0, 0, 1109, 0, 1104, 0,
	0, 1108, 1116, 0, 0, 1084, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 1106, 1098, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 1105, 0, 1095, 1096, 1097,
	1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 1116, 0, 1100, 0, 1081, 1082, 0, 1101, 1102,
	1103, 1111, 1112, 1113, 0, 0, 0, 0, 1114, 1109,
	0, 1104, 0, 0, 0, 1806, 0, 0, 1084, 0,
	0, 1115, 0, 1106, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	1095, 1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086,
	1087, 1088, 1090, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 1089, 1081, 1082, 0, 1101, 1102, 1103,
	1111, 1112, 1113, 0, 0, 0, 0, 0, 1109, 0,
	1104, 0, 0, 1108, 1116, 0, 0, 1084, 0, 0,
	1115, 0, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112,
	1113, 1114, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 1083, 0, 0, 0, 1084, 1106, 1098, 1115, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 1098, 1107, 1105, 0, 1095,
	1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 1116, 0, 1100, 0, 0, 0, 0,
	1089, 1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113,
	1114, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 1116, 0, 0, 1084, 1106, 0, 1115, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1106, 1098, 0, 1105, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 1095, 1096, 1097, 1110, 0, 1094, 1092, 1093,
	1085, 1086, 1087, 1088, 1090, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 1089,
	1081, 1082, 0, 1101, 1102, 1103, 1111, 1112, 1113, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	1116, 0, 1100, 1084, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1106, 1098, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1095, 1096, 1097, 1110, 0, 1094, 1092, 1093, 1085,
	1086, 1087, 1088, 1090, 1091, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 1089, 1095,
	1096, 1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087,
	1088, 1090, 1091, 0, 0, 0, 0, 0, 1108, 1116,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 1254, 1244, 1273, 1236, 1264, 1263,
	0, 1106, 1238, 1237, 0, 0, 0, 1099, 1275, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 1261, 1260, 0, 0, 0, 0,
	0, 0, 0, 0, 1259, 1107, 0, 0, 1095, 1096,
	1097, 1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088,
	1090, 1091, 1258, 1256, 1257, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 1247, 1246, 1248, 1249, 1250, 1251, 1252,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 1245, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 1095, 1096, 1097,
	1110, 0, 1094, 1092, 1093, 1085, 1086, 1087, 1088, 1090,
	1091, 0, 0, 521, 1255, 481, 0, 0, 1437, 1435,
	1436, 1439, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1241, 524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1253, 1242, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 525, 0, 0, 0,
	0, 527, 0, 0, 0, 0, 533, 534, 1239, 0,
	543, 1270, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 483, 528, 0, 0, 0, 0,
	0, 0, 0, 1243, 0, 0, 0, 0, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 0, 532, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 540, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 0, 0, 0,
	545, 0, 0, 0, 486, 0, 0, 0, 0, 538,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 544,
}
var sqlPact = [...]int{

	38088, -1000, -8, -1000, -1000, -1000, 154, -1000, -1000, -1000,
	153, 151, 150, -1000, 148, 147, 145, 144, 143, 141,
	140, 136, 131, 127, 125, -1000, 119, 111, -1000, -1000,
	-1000, 110, 109, 107, 106, 105, 98, 97, 944, 23534,
	95, 94, 1365, 35690, 90, 89, 88, 86, 937, 83,
	82, 27044, 856, 1131, 80, 78, 77, 76, 75, 868,
	35372, 905, 1453, 1144, 1578, 35051, 23213, 1577, 1340, 34730,
	-1000, -1000, 34409, 1450, 67, 66, 63, -1000, -1000, 34088,
	61, 56, 55, 53, 52, 49, 48, 47, 38, 37,
	36, 35, 32, 31, -1000, 30, 29, 28, 41691, 23,
	20, 19, 1142, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 99, -1000, 1010, 389, 18677, 1004,
	1000, 995, 983, 955, 37598, 35690, 17, -24, 16, -1000,
	1911, 622, 20619, 38088, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26723,
	26402, 33767, 33446, 804, -1000, -11, 24806, 35690, -1000, 100,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14668, 14311,
	507, 100, -1000, -1000, -1000, -1000, -1000, 33125, -1000, 32804,
	32483, 1412, 32162, -1000, -1000, -1000, -1000, 31841, -1000, -1000,
	1746, 1607, 1563, 26081, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 31523, 31202, 30881, 30560,
	30239, 462, -1000, -1000, -1000, 17353, -1000, -1000, -1000, -1000,
	3, -1000, -1000, -1000, 2, -1, -4, -5, 1128, -1000,
	-1000, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35690, -1000, 15697, -1000, 460, -1000, 1549, -1000, 15697, -1000,
	1125, -1000, -1000, -1000, -1000, -1000, 35690, -1000, -1000, 1499,
	-1000, -1000, -1000, -1000, -1000, -1000, 845, -1000, -1000, -1000,
	2057, 1228, 459, 29918, -1000, 1466, -1000, 533, 729, -1000,
	-1000, -1000, 18345, 157, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1616, 22892, 1177, 1849, 1743, 2055, 1294,
	1712, 1701, 1698, 1674, 1615, 2053, 950, 2052, 1620, 924,
	2050, 1611, 1272, 631, 2048, 1546, 1541, -1000, -1000, -1000,
	28316, -1000, -1000, 1010, -1000, -1000, -1000, 1352, 1807, 1807,
	1807, 1870, 274, 247, -1000, 99, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2013, -1000, -1000, -1000,
	-1000, 2033, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1087, -1000, -1000, 1087, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 796, 36962, -13, 35690, -1000, 458, -13, -1000, -1000,
	455, -1000, 10769, 10769, -1000, -1000, -1000, -1000, -1000, 9054,
	1912, -1000, 292, -120, 271, 511, -1000, 19650, 22230, -1000,
	-1000, 935, 1722, 846, -1000, 1005, 1718, 487, -1000, 990,
	-1000, 879, 1711, -86, 23852, 24806, -11, -20, -1000, -1000,
	-1000, 5964, 41094, -1000, -1000, 15697, 15697, 15697, 15697, 15697,
	1061, 478, -1000, 454, 453, 7324, -1000, -1000, 2032, -1000,
	-1000, -1000, 269, -1000, -1000, 15697, 100, -1000, -1000, -1000,
	-1000, 451, 2044, -1000, 609, -1000, -1000, -1000, 540, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1558, 450,
	447, 445, -1000, -1000, -1000, -1000, 444, 441, 438, 436,
	432, 428, 422, 420, 419, 416, 412, 402, 399, 395,
	392, 1036, -1000, 581, -1000, -1000, 581, 581, -1000, 382,
	382, 383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	382, -1000, -1000, -1000, 514, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 390, 41094, -1000, 871, 21263, 100, -1000, -1000,
	-1000, -1000, 388, 1189, 547, -1000, 272, -1000, 29597, 547,
	1188, -1000, -1000, -1000, 28316, -1000, 35690, -1000, 35690, -1000,
	900, -1000, 37280, 124, 1709, -1000, -1000, 124, 1707, -1000,
	116, 1694, -1000, -1000, -1000, 1673, -1000, -20, 1671, -1000,
	-1000, 15697, -23, -1000, -1000, -1000, 622, -1000, -1000, -1000,
	-1000, -1000, 24170, 1043, 541, 41094, 1931, 3309, 23852, 41094,
	24170, -1000, -1000, -1000, -1000, -1000, 35690, -1000, 15697, -1000,
	1913, 1276, 13, -1000, -1000, -1000, -1000, -1000, 1254, 1368,
	668, 776, 18015, 17685, 1763, -1000, -1000, -1000, 129, 6294,
	-1000, -1000, -1000, -1000, -1000, -1000, 29276, -1000, -1000, -1000,
	1147, 35690, -1000, -1000, 1554, -1000, 24170, 35690, -1000, 35690,
	-1000, 35690, -1000, 35690, -1000, 35690, -1000, -1000, -1000, -1000,
	-1000, 352, -1000, 1553, -1000, -1000, 35690, -1000, 1240, -1000,
	-1000, -1000, 28958, 28637, -1000, 993, 843, 128, -1000, -1000,
	1352, -1000, 1151, 1395, 13954, 1398, 15697, 99, -1000, -1000,
	99, 99, 8354, -1000, -1000, -1000, -1000, -1000, -1000, 13,
	-1000, 36962, -1000, 35690, -13, 1907, 35690, -1000, 101, -1000,
	40243, -1000, 101, -28, -1000, 41094, -1000, 1383, 1381, 20941,
	1390, 1074, 1074, 1074, -1000, 387, 474, 511, 5289, 13611,
	-1000, 27362, 1067, 177, 253, 19328, 1912, -1000, 35690, -21,
	1012, -1000, 25760, 1853, 1813, 1803, 28316, 1886, 87, 1539,
	787, 28316, 766, 1883, 87, 1538, 759, 35690, 6294, 509,
	-1000, 35690, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41467, 3309, 6294, 830, 15697, 15697, 15697, 15697, 15697,
	15697, 15697, 15697, 15697, 15697, 15697, 15697, 15697, 15697, 15697,
	15697, 15697, 15697, 15697, 15697, 15697, 15697, 1366, 15697, 756,
	15697, 15697, 15697, 15697, 959, 1123, 365, 1207, -1000, 2007,
	2007, 2007, 41231, 41231, 356, 478, -1000, 15697, -1000, 87,
	13254, 247, 39621, -14, 6981, -1000, -1000, -1000, 8697, 574,
	41094, 100, 4833, -1000, 2031, 949, 1566, 1473, 386, 471,
	456, 442, 15697, 15697, 12911, 12554, 12197, 16040, 11840, 15697,
	7667, 15697, 15697, 15697, 15697, 11483, 11126, -1000, 384, -1000,
	-1000, -1000, -1000, 2030, -1000, -1000, 2028, -1000, 827, 821,
	2027, -1000, 1537, -29, -1000, -1000, 25442, 1902, 1667, -1000,
	1045, -1000, 1899, 35690, 1124, 1187, -1000, -1000, 837, 1665,
	557, 281, 1898, 281, 21586, -1000, 35690, -1000, 35690, -1000,
	-1000, 35690, -1000, 35690, -1000, 35690, 35690, 35690, 35690, -31,
	41094, 468, 25124, 745, -1000, 602, 25442, 27, -38, -1000,
	566, -1000, -1000, -1000, -1000, 316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 383, 1036,
	382, 382, 382, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	514, -1000, -1000, 581, 581, 581, -1000, -1000, -36, -1000,
	1536, -1000, 542, -41, 625, 13, -1000, 1087, -1000, 1262,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2042, -16, -1000, -1000, -16, -1000, -1000,
	6294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35690, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 215, -1000, -1000,
	-1000, -1000, -1000, -1000, 35690, 35690, 35690, -1000, 28316, -1000,
	-1000, -1000, -1000, 41094, -1000, 375, -1000, -1000, 41094, 987,
	1399, -1000, 1399, -18, -1000, 40127, 1374, 35690, -1000, -1000,
	381, -47, 557, 10769, 20296, 6294, -1000, 557, 9054, -1000,
	20941, 20941, 1186, 1379, 20941, -1000, -1000, -1000, -1000, 27362,
	377, 511, 27362, -1000, 2026, 1371, -49, -1000, -1000, -1000,
	35690, 380, -1000, 511, 245, 893, 35690, 35690, 35690, -1000,
	-1000, 1179, 36644, 1175, 3309, 35690, -1000, 374, 372, 1364,
	1355, 35690, 35690, 36326, 36008, 35690, 906, 87, -1000, 371,
	35690, 970, 35690, 87, -1000, 368, 35690, 968, -1000, 1422,
	1154, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 526, 595, 595, 767, 767, 767, 767, 2018,
	1757, 2394, 852, 2464, 2464, 2464, 761, 697, 697, 2464,
	2464, 2464, 41231, 41122, 415, 15697, 15697, 741, 1107, 365,
	415, 15697, 415, 415, 415, 415, -1000, 1347, -1000, -1000,
	-1000, -1000, 1532, 360, 16040, 16040, -1000, -1000, -1000, 7324,
	16370, -1000, -1000, -1000, -1000, 358, 15697, -1000, 39754, -205,
	-50, -1000, -1000, 15697, -57, -58, -1000, -1000, 801, -1000,
	15697, -1000, -15, 15697, 15697, 15697, 243, -1000, 242, -1000,
	732, -1000, 730, 728, 726, -1000, 350, 1065, 332, 331,
	15697, -1000, -1000, -1000, -1000, -1000, -1000, 40985, 37950, 241,
	-1000, 1524, -125, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	239, -1000, 236, -1000, 40852, -125, 226, 353, -1000, 16040,
	16040, 16040, 7324, 330, 217, -1000, 39996, -125, 40743, 10426,
	10426, 10426, 216, 40610, 15697, -125, 37922, 4089, 3998, -61,
	-66, -1000, -68, -1000, 2025, -69, 213, 518, 517, 209,
	869, 1517, 35690, 208, -76, -19, 3309, -1000, -1000, -1000,
	-1000, -1000, 35690, 421, 35690, 87, 35690, 2040, 87, 35690,
	1642, 1702, 496, 35690, 941, 15697, 1033, -1000, 19973, 586,
	35690, 941, 79, -1000, -1000, -1000, 504, 35690, -1000, -1000,
	124, 124, -1000, 116, -1000, -20, -1000, 15697, -1000, -1000,
	35690, 23852, -84, -1000, -1000, 3309, -1000, 476, 687, -1000,
	2024, 545, 23852, 35690, -1000, 1391, -1000, -1000, 874, -1000,
	1023, -1000, 19007, -1000, -34, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 987, -1000, 15697, 2017, -1000, -1000, -1000, 8354,
	-1000, -1000, -1000, 35690, -114, 27, -1000, 1468, -1000, -74,
	-1000, 1912, -1000, 1468, -1000, -1000, 1186, -1000, 329, 15697,
	20941, -1000, 472, -1000, -94, -1000, 27362, -1000, 467, -193,
	-1000, 503, -1000, 511, 328, 35690, 27362, -1000, -1000, -1000,
	722, 720, 1637, -1000, 1174, -1000, 591, -1000, 954, 15697,
	17030, 327, 325, 1079, -1000, 1619, 1195, 1608, 1195, -1000,
	-21, 919, -1000, 15697, -1000, 691, -1000, -1000, 15697, -1000,
	675, 545, 1516, 847, 15697, 415, 415, 15697, 16040, 16040,
	-1000, 415, -1000, -1000, -1000, -1000, -1000, 1506, 324, 15697,
	3309, 4116, 3972, -96, -1000, 10083, -22, -1000, 15697, -1000,
	39512, -1000, -1000, 469, 1715, -1000, 15697, 40501, 205, 9740,
	-1000, 40392, -30, -30, -1000, 2038, 1216, 1052, 1029, 911,
	2016, -1000, 21908, 561, 1090, 39403, 41467, 3309, -1000, 15697,
	-1000, -1000, 1488, 15697, -1000, 41467, 3309, 16040, 16040, 16040,
	16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040, 16040,
	16040, 16040, 16040, 16040, 16040, 16040, 1402, 16040, 2005, 2005,
	2005, -25, 9397, -1000, 1495, 1488, 15697, 15697, 3309, 204,
	201, 200, -1000, 15697, -125, 15697, 15697, 15697, -1000, -1000,
	-1000, 197, -1000, 2015, -1000, -1000, -1000, -1000, -1000, 861,
	-1000, 1414, -1000, 25442, 323, 35690, 321, -1000, 320, -1000,
	-1000, 317, 35690, 1285, 496, 24488, -1000, 547, -1000, 8010,
	41094, -1000, 941, 1821, -107, -1000, -1000, -1000, 557, 21586,
	20941, 9054, -110, -1000, -1000, -1000, 41094, -34, 1767, 1767,
	-1000, 2006, -1000, 466, 190, -1000, 27998, -1000, -34, -1000,
	-1000, -1000, -1000, -1000, 35690, 1095, 39270, -1000, 1799, 6294,
	189, 1430, 1867, -1000, 20941, 1430, -1000, 35690, 41094, -1000,
	-120, -1000, 1983, -1000, -1000, 1371, -1000, 5631, 27362, 35690,
	-112, -1000, 35690, 35690, 35690, 1592, -1000, 2542, -1000, 39161,
	-118, -1000, 294, 1846, 15697, -1000, -1000, 315, 17030, 35690,
	-1000, 1401, 1447, 619, 35690, -1000, 35690, -1000, 35690, 35690,
	35690, -123, 35690, -126, 35690, -1000, 23852, 743, 1916, 415,
	3543, 3273, 15697, 3309, 41340, -128, 15697, 15697, -1000, -129,
	-1000, 15697, 464, 41094, -1000, -1000, -1000, 41094, 15697, 2037,
	15697, 187, 185, 184, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 179, -1000, -1000, 4469, 15697, 174, -1000, 172,
	171, 41094, 1495, 41094, -1000, -1000, 740, 740, 822, 822,
	822, 822, 2005, 2372, 2512, 1719, 942, 942, 942, 1227,
	543, 543, 942, 942, 942, 1483, 1313, 312, 4035, 15697,
	-134, -1000, -1000, -1000, 41094, 41094, 169, -1000, -1000, -1000,
	-125, 240, 39052, 38919, -1000, 167, -1000, -1000, 1416, -1000,
	17030, 310, 35690, 25442, 1894, 17030, 1119, 1348, 496, 24488,
	-1000, 837, -40, -1000, -1000, 322, 87, 941, -1000, -43,
	-1000, 502, 1752, -1000, 1750, 457, -1000, -1000, -52, 309,
	-1000, 501, 500, -1000, -1000, -1000, -1000, 1799, -1000, 544,
	15697, 15697, 1912, 544, -136, 511, -1000, -1000, -1000, 1967,
	-1000, -137, -1000, -1000, -1000, -1000, 35690, -1000, 35690, -1000,
	6294, 35690, 1491, 1165, -1000, -1000, 1354, 305, 16040, 35690,
	-1000, 1064, 17030, 1799, 100, 6294, 1799, 38810, 4833, -139,
	-142, 1163, -1000, 1159, 15697, -1000, 3309, 1195, 1195, -1000,
	669, 665, 644, -1000, 635, -1000, -71, 22560, 15697, 15697,
	41340, -144, -1000, 415, 415, -1000, 38701, -1000, 41094, -1000,
	40392, -1000, -1000, -1000, -1000, 1053, -1000, 38568, -1000, -1000,
	-1000, -1000, 16040, 1471, 304, 3309, 38459, -1000, -1000, 15697,
	-1000, -1000, -1000, 1056, -145, 17030, -147, 165, 87, -152,
	35690, -1000, 496, 24488, -1000, 1702, 1732, 35690, 1775, -1000,
	-1000, 303, 300, 295, -1000, 27680, 27680, 23852, 23852, -1000,
	-1000, 35690, 41094, -125, -1000, -1000, 27362, 378, -1000, -1000,
	1492, -1000, -1000, 35690, 1170, -1000, -1000, 15697, 4035, 289,
	1414, 288, -1000, -1000, -1000, -1000, -1000, -1000, 1846, -15,
	-1000, 1017, -1000, -1000, 41094, 1838, -1000, -1000, 35690, 35690,
	287, 286, -1000, 280, 100, 415, 415, -1000, -1000, 164,
	1090, 1863, -1000, 38194, 16040, 3309, -158, -1000, 38350, 35690,
	1064, -159, -1000, 1414, -1000, 1064, 279, 24488, -1000, 1285,
	791, -160, 35690, -1000, -1000, 6624, 23852, 23852, -1000, -161,
	-1000, -1000, -78, -1000, 1891, -1000, -1000, -1000, -1000, 1587,
	38217, 1223, 35690, -1000, 35690, 1799, 163, 35690, 598, 6294,
	-1000, -1000, 15697, 15697, 15697, -1000, 1014, 15697, 38194, -166,
	-1000, -1000, 278, 1414, 1064, -1000, 1414, 17030, -1000, 1348,
	896, -1000, 557, -1000, -168, -169, -1000, 35690, 277, 1576,
	-1000, 1102, 1037, 162, -174, -1000, -1000, 272, -1000, 15697,
	-1000, -175, -176, -30, 159, 15354, 15354, -125, -1000, 35690,
	-1000, 1414, -1000, -181, -1000, 21586, -1000, 545, 545, -1000,
	-1000, 35690, -1000, 1116, 1106, 828, -1000, -1000, -1000, -1000,
	-1000, 1223, 41094, -1000, -1000, 126, -1000, -1000, -1000, 16700,
	1133, 926, 39863, -1000, -184, -1000, 1064, -167, -1000, -1000,
	-1000, -1000, 1739, -1000, 600, 1325, 1325, 1102, 2037, 1940,
	-1000, -1000, -1000, -1000, -1000, 1138, 1414, -1000, -1000, 1948,
	-1000, -1000, 1271, -1000, -1000, 15011, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2432, 2425, 1599, 1817, 2424, 2423, 2422, 2420, 2419,
	2418, 2417, 2415, 2408, 2407, 2399, 2391, 2389, 2380, 2379,
	2378, 2375, 2374, 2372, 2370, 2367, 2365, 1808, 2364, 2362,
	2352, 2350, 2348, 2347, 1788, 2346, 1786, 2344, 2342, 2341,
	2339, 2337, 1781, 2334, 92, 106, 1765, 2332, 2327, 1693,
	2325, 2323, 2322, 2320, 2316, 2315, 2312, 71, 2311, 2310,
	2307, 2305, 2303, 2302, 2301, 142, 157, 2299, 1657, 2294,
	2291, 2288, 2285, 2281, 2278, 2277, 2276, 2270, 2265, 2257,
	2256, 2255, 2253, 2251, 2249, 2248, 2245, 165, 2243, 2240,
	1651, 1645, 2235, 2234, 31, 23, 12, 47, 29, 152,
	3075, 145, 2233, 2232, 2230, 2229, 2226, 2225, 18, 100,
	101, 2222, 124, 2218, 2217, 46, 26, 19, 16, 2216,
	86, 2215, 2214, 1564, 21, 2213, 2212, 132, 2211, 30,
	20, 109, 150, 146, 105, 112, 2210, 2209, 2207, 2206,
	49, 113, 2, 2201, 2200, 14, 65, 13, 2199, 28,
	38, 2196, 2194, 129, 2193, 59, 87, 1531, 88, 120,
	304, 2192, 69, 10, 63, 2190, 2186, 149, 34, 2185,
	32, 76, 140, 2184, 48, 155, 127, 77, 128, 114,
	2180, 2178, 2176, 96, 2174, 107, 89, 2171, 2169, 83,
	2167, 134, 136, 2166, 2165, 84, 2164, 108, 2161, 2160,
	151, 141, 104, 8, 50, 57, 6, 1540, 1473, 116,
	85, 55, 54, 2159, 1908, 1279, 24, 27, 97, 60,
	53, 93, 62, 81, 144, 25, 2155, 2154, 121, 2153,
	2152, 2151, 2149, 2145, 91, 2144, 2143, 56, 138, 78,
	37, 36, 79, 35, 111, 130, 117, 148, 102, 2135,
	82, 115, 2134, 74, 2132, 2130, 1527, 123, 2129, 2127,
	2124, 1395, 921, 919, 479, 2122, 2120, 857, 622, 2119,
	2118, 64, 2117, 118, 103, 2113, 139, 135, 41, 2112,
	110, 58, 90, 2110, 33, 43, 0, 1833, 528, 2108,
	122, 75, 2100, 2099, 2098, 2097, 22, 5, 9, 4,
	7, 3, 45, 42, 2095, 2094, 131, 94, 68, 2093,
	154, 2091, 2089, 2087, 39, 2085, 17, 2082, 15, 2079,
	2078, 11, 1, 2077, 2074, 137, 2073, 98, 2071, 1841,
	2070, 143, 2061, 2060, 1823, 51, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 110,
	110, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 107, 107, 112, 112,
	112, 114, 114, 111, 111, 106, 106, 20, 20, 55,
	55, 97, 50, 50, 50, 284, 284, 285, 285, 93,
	93, 94, 94, 94, 94, 95, 95, 96, 96, 96,
	26, 26, 26, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 34, 34, 35, 35,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 41, 41, 41, 39, 39,
	39, 38, 38, 38, 37, 37, 37, 40, 40, 40,
	159, 159, 158, 158, 161, 161, 42, 42, 42, 42,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	45, 45, 45, 45, 45, 45, 45, 252, 252, 251,
	43, 43, 226, 226, 46, 46, 184, 184, 47, 47,
	47, 47, 47, 48, 48, 56, 56, 325, 325, 325,
	329, 329, 330, 330, 331, 331, 331, 331, 331, 331,
	331, 327, 327, 53, 53, 53, 92, 92, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 62, 62, 64,
	61, 61, 61, 63, 63, 63, 63, 65, 65, 65,
	65, 66, 66, 66, 66, 66, 67, 67, 139, 139,
	277, 276, 276, 282, 282, 282, 137, 137, 137, 137,
	137, 138, 138, 138, 275, 275, 275, 275, 283, 283,
	283, 283, 283, 283, 281, 281, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 80, 80, 80, 87, 87, 87, 87, 87,
	87, 87, 69, 69, 74, 74, 74, 74, 74, 70,
	70, 75, 75, 76, 76, 77, 77, 77, 77, 77,
	77, 71, 71, 71, 71, 79, 79, 79, 79, 78,
	78, 84, 84, 84, 84, 84, 84, 81, 81, 81,
	81, 82, 82, 82, 85, 85, 85, 85, 72, 72,
	73, 73, 86, 86, 83, 83, 83, 326, 326, 328,
	328, 51, 51, 30, 30, 31, 31, 140, 140, 141,
	141, 205, 205, 205, 205, 142, 142, 113, 113, 113,
	204, 294, 294, 295, 295, 295, 295, 295, 295, 296,
	296, 296, 296, 296, 296, 296, 292, 292, 293, 290,
	290, 291, 291, 291, 291, 332, 332, 203, 203, 145,
	145, 299, 299, 299, 299, 297, 297, 297, 297, 297,
	300, 298, 301, 301, 301, 301, 301, 238, 238, 238,
	89, 89, 32, 32, 119, 119, 33, 33, 29, 29,
	29, 188, 188, 149, 149, 243, 243, 243, 130, 130,
	108, 108, 108, 14, 11, 11, 11, 11, 11, 11,
	19, 19, 17, 17, 189, 189, 190, 190, 52, 52,
	54, 54, 59, 59, 88, 88, 88, 88, 88, 88,
	21, 21, 21, 21, 25, 25, 25, 25, 58, 58,
	334, 334, 126, 126, 126, 126, 127, 127, 200, 200,
	201, 201, 201, 202, 202, 202, 121, 120, 122, 122,
	28, 28, 28, 115, 115, 116, 116, 117, 117, 118,
	118, 335, 335, 49, 49, 49, 91, 91, 133, 133,
	197, 197, 197, 199, 199, 198, 198, 198, 174, 174,
	174, 90, 90, 154, 154, 163, 163, 164, 164, 249,
	165, 165, 57, 57, 100, 100, 98, 98, 98, 98,
	98, 98, 99, 99, 99, 101, 101, 101, 101, 101,
	101, 101, 104, 104, 104, 105, 105, 105, 103, 103,
	307, 307, 307, 310, 310, 306, 308, 308, 309, 309,
	333, 333, 175, 175, 175, 144, 143, 143, 147, 147,
	146, 148, 148, 242, 242, 242, 172, 172, 172, 172,
	191, 191, 192, 192, 193, 193, 194, 194, 194, 195,
	195, 196, 196, 171, 171, 222, 222, 102, 102, 102,
	153, 153, 153, 155, 155, 212, 212, 212, 213, 213,
	211, 211, 211, 211, 244, 244, 244, 244, 244, 244,
	244, 244, 323, 323, 323, 324, 324, 241, 241, 245,
	245, 245, 245, 245, 245, 239, 239, 239, 239, 240,
	240, 250, 250, 178, 178, 178, 178, 176, 176, 177,
	177, 246, 246, 246, 246, 173, 173, 247, 247, 247,
	206, 206, 253, 253, 253, 271, 271, 152, 152, 152,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 255, 255, 255,
	255, 257, 257, 257, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 270, 270, 270, 270, 270, 258, 258, 265,
	265, 266, 266, 267, 268, 259, 259, 260, 260, 261,
	262, 269, 269, 269, 269, 273, 273, 263, 263, 263,
	263, 263, 264, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 186, 186, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 216, 216, 216, 216, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 302, 302, 302, 302,
	302, 302, 302, 302, 304, 304, 305, 305, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 311, 311, 312, 312,
	314, 314, 315, 315, 316, 317, 317, 317, 318, 319,
	319, 313, 313, 320, 320, 320, 321, 321, 322, 322,
	322, 322, 322, 228, 228, 228, 229, 229, 230, 236,
	236, 236, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 128, 128,
	128, 128, 128, 160, 160, 225, 225, 223, 223, 223,
	227, 227, 179, 179, 272, 272, 272, 272, 272, 272,
	272, 180, 180, 180, 187, 181, 181, 182, 182, 182,
	182, 182, 182, 219, 220, 183, 183, 183, 221, 221,
	231, 235, 235, 234, 233, 233, 232, 232, 209, 209,
	210, 210, 208, 207, 168, 168, 167, 167, 166, 166,
	336, 336, 237, 237, 169, 169, 170, 162, 162, 248,
	248, 248, 248, 156, 156, 135, 135, 157, 157, 131,
	131, 134, 134, 132, 132, 132, 132, 150, 150, 151,
	151, 129, 129, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 274, 274, 274, 224, 123, 123,
	123, 124, 124, 125, 125, 279, 279, 279, 280, 280,
	280, 280, 278, 278, 278, 278, 278, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 6, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 1,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 2, 6, 2, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 4, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 3,
	3, 1, 3, 3, 1, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 2, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 357, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -55, -54, -56, -59, -57, -52, -53, -60, -68,
	-88, -89, -90, -91, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -309, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 214, 220, 240, 242, 244, 251,
	-98, -100, 238, 239, -61, -62, -63, -64, -92, 262,
	-69, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, 265, -21,
	-25, -58, 303, -9, -10, -13, -12, -11, -16, -18,
	-15, -17, -19, -14, -307, -101, -99, 354, 312, 35,
	274, 61, 101, 246, 328, 335, -104, -102, -103, -105,
	255, 320, 284, 358, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 2, 284,
	323, 83, 141, -325, 2, -157, 284, 83, -132, -123,
	347, 4, -286, -288, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 64, 66,
	67, 68, 71, 72, 73, 81, 82, 84, 86, 90,
	92, 94, 97, 98, 100, 105, 106, 107, 113, 114,
	119, 121, 126, 132, 133, 134, 135, 142, 145, 147,
	140, 157, 158, 159, 161, 162, 163, 166, 165, 170,
	173, 176, 178, 179, 180, 183, 181, 185, 186, 188,
	187, 193, 195, 196, 198, 201, 204, 207, 210, 211,
	212, 213, 214, 216, 218, 220, 222, 223, 224, 225,
	226, 228, 229, 231, 232, 233, 234, 235, 238, 236,
	237, 239, 240, 241, 242, 244, 246, 247, 249, 263,
	264, 275, 251, 252, 253, 254, 258, 256, 259, 260,
	262, 265, 267, 270, 273, 274, 276, 279, 280, 277,
	272, 283, 285, 286, 287, 288, 289, 290, 291, 298,
	299, 303, 304, 305, 306, 309, 310, 311, 312, 314,
	317, 318, 319, 324, 329, 330, 331, 332, 333, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 85, 87, 88, 104, 108, 109, 115, 116,
	117, 127, 129, 136, 137, 146, 148, 149, 150, 151,
	152, 154, 168, 182, 192, 194, 205, 209, 217, 219,
	227, 248, 257, 268, 269, 278, 281, 293, 294, 295,
	300, 301, 316, 320, 321, 357, 357, 2, 158, 224,
	-131, -123, 83, 357, 357, 357, 357, 284, 2, 313,
	323, -188, 83, 308, 357, 357, -123, 220, 22, 2,
	92, 145, 311, 310, 22, 216, 256, 286, 288, 2,
	357, 357, 357, 357, 357, 2, 323, 284, 141, 83,
	313, -123, 2, -45, 2, 354, -44, -4, -27, -36,
	-46, -42, -57, -68, -34, -49, -90, -91, -329, 2,
	22, -330, -331, 69, 98, 125, 255, 145, 92, 310,
	284, 2, 158, 2, -123, 2, -325, 2, 158, 2,
	-329, 2, -123, 2, -127, 2, 251, -123, -87, 259,
	2, 4, 22, 83, 183, 261, 293, 357, 357, 357,
	173, 55, 248, 259, -66, 299, -65, 293, -277, -67,
	2, -158, 183, -123, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 2, -87, 259, 34, 55, 22, 60, 84, 126,
	141, 142, 162, 65, 66, 223, 173, 159, 298, 163,
	260, 285, 299, 69, 314, 289, 106, 357, 357, 357,
	-333, 2, 284, -99, -101, -100, -146, -147, 307, 153,
	103, 203, -98, -100, 2, -307, -282, 2, -275, -238,
	9, 302, 110, 199, -281, 8, 346, -274, -280, 5,
	7, 345, 4, -286, -288, -287, 58, 70, 124, 144,
	138, 156, 160, 169, 171, 184, 206, 208, 245, 266,
	-334, 2, 299, 299, 2, -334, 2, -334, 2, -126,
	2, 299, 296, -310, 228, -306, -123, -310, 357, 357,
	359, 357, -143, -144, 2, 22, 95, -170, 2, 354,
	-244, 2, 352, -246, -131, -100, -245, 354, 200, -3,
	2, -246, 136, -131, 2, -246, 136, -131, 2, -123,
	2, -134, 136, -131, 296, 359, -157, -150, -123, -208,
	-207, 356, -214, 2, -216, 345, 346, 340, 189, 334,
	-228, -218, -231, 104, 248, 354, -131, -217, 360, 9,
	-304, -100, 29, -229, -230, 49, -123, 7, 8, 5,
	6, -129, -255, -224, -264, 302, 110, 191, -302, -303,
	4, -286, -279, -256, -266, -260, -263, 154, 58, 75,
	76, 79, 77, 80, 261, 313, 50, 28, 108, 109,
	209, 217, 281, 300, 301, 136, 192, 137, 56, 127,
	168, 97, 37, 39, 41, 42, 51, 52, 85, 87,
	88, 115, 116, 117, 146, 148, 149, 150, 151, 152,
	194, 227, 268, 278, 294, 295, 321, -287, -267, -268,
	-261, -262, -269, -214, 2, 123, 354, -167, -168, -207,
	-208, 2, -158, 136, -123, 2, -158, 2, 141, -123,
	136, 2, -123, 22, 123, 2, 155, 2, 155, 2,
	-247, 2, -246, -159, 136, 2, -158, -159, 136, 2,
	-135, 136, 2, -134, -123, 136, 2, -150, 136, 2,
	-184, 354, -252, 2, -251, -280, 320, 357, 357, 357,
	357, 357, 199, 359, -158, -214, -226, 354, 123, -214,
	199, -123, -87, 333, 2, 2, 263, 2, 354, -66,
	53, 299, -201, 2, -202, -120, -121, -122, 157, 222,
	226, 333, 296, 339, 123, -282, -139, 89, -161, 356,
	-87, 2, -284, 2, -281, 9, 263, 2, 223, 260,
	55, 123, 2, 2, -326, 2, 199, 123, 2, 123,
	2, 123, 2, 123, 2, 123, 2, 2, 223, 260,
	2, 120, 2, 298, 2, 2, 123, 2, 157, 222,
	275, 2, 284, 323, 2, 123, 123, -173, -246, -146,
	-147, -172, -191, -192, 172, 112, 197, -175, 22, 95,
	-175, -175, 44, 355, 355, 8, 7, 7, -200, -201,
	-200, 296, -127, 359, -310, -151, 354, -170, -162, -248,
	-214, 347, -162, -169, -237, -214, 89, 70, -178, 160,
	184, 124, 169, 245, 144, 7, -45, -211, 360, 354,
	347, -241, 335, -100, -245, 354, -244, -131, 354, -110,
	236, -109, 21, 23, 98, 318, 104, 272, 290, 252,
	236, 104, 236, 272, 290, 252, 236, 104, 360, -284,
	-132, 359, -278, 347, 4, -286, -288, -287, -289, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 74, 75, 77, 76,
	78, 79, 80, 89, 91, 93, 95, 96, 99, 101,
	103, 110, 111, 112, 120, 122, 123, 125, 128, 130,
	139, 141, 143, 153, 155, 164, 167, 172, 174, 175,
	189, 190, 191, 197, 199, 200, 202, 203, 215, 221,
	230, 243, 255, 261, 271, 282, 284, 292, 296, 297,
	302, 307, 308, 313, 315, 322, 323, 325, 326, 327,
	328, 10, 11, 57, 33, 345, 346, 347, 348, 118,
	349, 350, 343, 344, 342, 337, 338, 339, 63, 177,
	250, 13, 14, 15, 26, 202, 171, 334, 138, 266,
	340, 16, 17, 18, 156, 36, 139, -128, -136, -214,
	-214, -214, -214, -214, 208, -166, -209, 352, -100, 354,
	354, -100, -214, -160, 354, 7, -100, -223, 352, -232,
	-214, -167, 354, 5, 354, 5, -311, 329, 120, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 219, -273, 324,
	-273, -273, -257, 354, -257, -258, 354, -257, 330, 335,
	354, 276, 355, -156, -131, -168, 354, -145, 189, -119,
	-308, 328, -145, 354, -124, 136, 2, -123, -308, 189,
	-247, -133, -131, -133, 262, -123, 30, -112, 359, 48,
	241, 104, -112, 104, -112, 359, 104, 104, 104, -160,
	-214, 355, 359, -325, -331, 69, 354, 30, -225, -253,
	-254, -256, -265, -259, -263, -264, 40, 46, 45, 291,
	182, 257, 269, 316, 38, 198, 147, 146, 148, 149,
	150, 151, 152, 268, 37, 227, 116, 117, 115, 97,
	88, 87, 194, 42, 41, -267, -268, -261, -262, 85,
	294, 295, 154, 39, 52, 51, 321, 278, -285, -284,
	-325, -65, -277, -160, 30, -201, 2, 359, -202, 170,
	-138, 176, 188, 132, 200, 331, -283, 5, 4, -224,
	-238, 89, 173, -264, -276, 89, -282, -276, 89, 73,
	356, -278, -158, 22, 264, 2, -277, -328, 120, -325,
	-277, -277, -277, -277, -277, 259, -45, 120, -123, 170,
	-277, 2, -277, 2, 284, 141, 284, -112, 359, -172,
	-192, -191, -193, -214, 22, -196, 114, 185, -214, -216,
	-99, -99, -99, -148, -242, -214, 221, 141, -127, -306,
	30, -150, -153, 359, 123, 30, 4, -153, 359, 355,
	160, 160, -244, -178, 160, -176, 206, -176, -176, -323,
	354, 353, -241, -278, 352, 361, -160, 2, -240, -239,
	30, -123, 204, 355, -131, 359, 296, -189, 65, 59,
	-204, 136, 59, -290, -123, 65, -291, 54, 308, 221,
	122, -189, 65, -189, 65, 65, -246, 33, -57, 123,
	296, -246, 296, 33, -57, 123, 296, -134, -278, -250,
	336, -123, -271, -253, -270, 232, 233, 231, 235, 234,
	-253, -278, 293, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, 171, 138, 266, 36, 139,
	-214, 296, -214, -214, -214, -214, 181, 189, 191, 302,
	110, 309, 95, 195, -336, 282, 32, -221, -100, 354,
	-236, 27, 271, 22, -228, 248, 354, -209, -214, -210,
	-160, 355, 355, 359, -160, -227, 353, -223, -235, -234,
	325, 355, -160, 322, 22, 95, 347, 2, 7, -185,
	332, 180, 86, 133, 179, -186, 254, -312, 113, 128,
	354, 355, 2, 355, 2, 355, 2, -214, -214, -179,
	2, -272, -160, 4, 332, 180, 86, 133, 179, 254,
	-179, 2, -180, 2, -214, -160, -181, -215, -216, 345,
	346, 340, 354, 248, -182, 2, -214, -160, -214, 43,
	167, 297, -183, -214, 123, -160, -214, -214, -214, -160,
	-160, 2, -160, 2, 354, 7, 7, 293, 293, 7,
	123, 355, 359, -140, -150, -141, -123, -205, -204, -292,
	-293, -290, 141, 308, 111, 30, 104, 213, 30, 199,
	189, -115, 287, 104, -206, 326, -197, -57, 354, 89,
	30, -197, -163, -164, -249, -165, -131, 354, -123, -158,
	-159, -159, -134, -135, -123, -150, 355, 359, -45, -251,
	296, 315, -141, -44, 355, 359, -152, 29, 352, -185,
	354, -250, 359, 123, 355, 299, -202, -137, 226, 270,
	237, 258, 359, -278, -327, -123, 259, -45, -131, -134,
	-131, -246, -194, -274, 354, 346, -195, 248, 249, 359,
	-108, 31, 93, 161, -131, 354, 355, -206, -248, -155,
	2, -244, -278, -206, -237, -244, -244, -177, 315, 199,
	160, -244, -239, 355, -324, 7, -241, -240, 7, -213,
	-212, 121, 187, 355, -123, 354, -241, 355, -109, -131,
	-123, -123, 189, -204, 136, -114, 189, -253, -123, 354,
	354, 161, 161, -123, -123, 136, -123, 136, -123, -123,
	-110, 236, -57, 354, -131, 236, -123, -57, 354, -123,
	236, -93, 135, 195, 333, -214, -214, 296, -336, 282,
	-221, -214, 181, 191, 302, 110, 309, 95, 195, 123,
	354, -215, -215, -160, -218, 354, -160, 353, 363, 355,
	-214, 353, 353, 359, -233, -234, 99, -214, -147, 359,
	-146, -214, -160, -160, 355, 355, 296, 296, 296, 296,
	354, -317, 207, 354, 354, -214, 30, 359, 355, 123,
	355, 355, -187, 215, 355, 10, 11, 345, 346, 347,
	348, 118, 349, 350, 343, 344, 342, 337, 338, 339,
	63, 177, 250, 13, 14, 15, 156, 139, -215, -215,
	-215, -160, 354, 355, -219, -220, 123, 120, 30, -183,
	-183, -183, 355, 123, -160, 359, 359, 359, 355, 355,
	355, 7, 355, 359, 355, 333, 333, 355, 276, 123,
	-131, 355, 355, 359, -124, 141, -124, -57, -158, 5,
	-57, -131, 104, -116, 100, -335, 339, -123, -174, 243,
	-214, -174, -199, 199, -156, 320, -123, -174, -154, 359,
	123, 339, -156, -112, -112, -112, -214, -327, -284, 355,
	-253, 352, 353, 7, 7, -96, 328, -284, -327, -120,
	306, 62, 226, -282, 359, -195, -214, -242, -131, 360,
	-44, -171, 128, -250, 359, -171, -177, 354, -214, -244,
	353, 355, 359, -240, 353, 359, 362, 339, -241, 354,
	-150, -239, 296, 296, 104, 189, 317, -294, -291, -214,
	-149, -243, -123, -305, 354, -302, -303, -129, 354, 354,
	-107, 98, 262, -190, 104, -112, 104, -112, 296, -189,
	65, -160, 296, -160, 296, -96, 123, 283, -214, -214,
	-215, -215, 123, 354, -214, -225, 26, 26, 355, -160,
	355, 359, -210, -214, 355, -223, 101, -214, 292, 355,
	322, -147, -147, -147, 5, 180, 133, 179, -186, 179,
	-186, -186, 7, -318, -123, 354, 326, -146, 355, -271,
	-253, -214, -219, -214, -271, -253, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, 95, 189, 195, -215, 359,
	-160, 355, -220, -219, -214, -214, -253, 355, 355, 355,
	-160, -214, -214, -214, 355, 7, 276, -142, 140, -205,
	354, -124, 354, 354, -145, 354, -123, -117, 166, -335,
	-281, -308, -162, 190, -174, 64, 355, -206, -164, -155,
	-237, 355, -97, 71, -97, 7, 353, 355, -95, 201,
	-94, -123, 5, -123, 200, 355, -108, -278, 355, -222,
	130, 44, -244, -222, -150, -211, 7, -212, -278, 352,
	-240, -150, 355, -123, -123, -204, 104, -295, 65, -296,
	57, 111, 69, 189, 191, 308, 221, 54, 89, 230,
	355, 355, 359, -130, -167, 57, -130, -214, 354, -149,
	-150, 189, 89, 189, 89, 82, 304, -123, -123, -131,
	-123, -123, 355, -131, 355, -123, -285, 293, 26, 26,
	-214, -225, 355, -214, -214, 355, -214, 353, -214, 5,
	-214, 355, 355, 355, 355, -319, -123, -214, 355, 355,
	355, -220, 123, 95, 195, 354, -214, 355, 355, 359,
	355, 355, 355, 139, -149, 354, -150, -140, 30, -149,
	199, -118, 165, -335, -281, -115, -198, 354, 199, -57,
	-174, 339, 82, 82, 353, 359, 354, 339, 339, -108,
	-314, 327, -214, -160, -314, 355, -241, 7, 355, -204,
	-123, -278, -123, 111, 136, 191, 161, 354, -215, -131,
	-203, -332, 68, 280, -243, -108, -278, -108, 355, -160,
	355, 355, 191, 191, -214, -253, -112, -112, 296, 296,
	296, 296, -217, -129, -123, -214, -214, 355, 355, -147,
	-313, 212, 355, -215, 123, 354, -225, 355, -214, 210,
	355, -149, 355, 355, -57, 355, -131, -335, -281, -116,
	96, -150, 65, -170, -100, 354, 354, 354, -94, -95,
	-284, -284, -315, -316, -123, -240, 353, -296, -124, 189,
	-214, -125, 354, -142, 354, -130, -147, 230, -111, 57,
	-123, -123, 354, 354, 354, 355, -147, 44, -215, -225,
	355, 355, -131, -203, 355, -142, -203, 354, -281, -117,
	310, 190, 355, -123, -285, -285, 355, 359, 30, 104,
	355, -299, 178, -123, -150, -108, 355, -131, -106, 315,
	-278, -160, -160, -160, -320, 225, 249, -160, 355, 354,
	-142, -203, -142, -149, -118, 262, -206, 355, 355, -316,
	-318, 111, -297, -300, -298, 199, 124, 211, 267, 355,
	355, -145, -214, 355, 355, -147, 355, -321, -322, 36,
	305, 73, -214, -321, -150, -142, 355, -163, -96, -96,
	-123, -298, 199, -300, 199, 310, 92, -299, 355, -322,
	218, 119, 248, 218, 119, 355, -203, -206, -301, 186,
	241, 48, 262, -301, -297, 26, -113, 48, 241, -142,
	20, 191, 89, -322,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 0, 0, 152, 154, 156, 158, -2, 161,
	163, 0, 0, 0, 174, 176, 178, 180, 182, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	622, -2, 0, 0, 268, 270, 272, 274, 275, 0,
	326, 328, 330, 332, 334, 336, 338, 340, 342, 344,
	346, 348, 350, 352, 354, 355, 357, 359, 0, 544,
	546, 548, -2, 64, 65, 66, 67, 68, 74, 75,
	76, 77, 70, 72, 658, -2, 669, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 635, 637, 639, 641,
	-2, 0, 0, -2, 7, 12, 14, 16, 19, 21,
	23, 25, 27, 29, 31, 33, 35, 37, 39, 42,
	44, 49, 51, 53, 56, 58, 60, 62, 63, 0,
	0, 0, 0, 0, 118, 247, 0, 1220, 1147, 1153,
	1154, 1178, 1179, 1180, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 144, 146, 147, 0, 0,
	0, 1149, 1220, 153, 155, 157, 159, 0, 165, 0,
	0, 0, 0, 511, 162, 164, 238, 1279, 240, 242,
	0, 0, 0, 0, 168, 169, 170, 171, 172, 173,
	175, 177, 179, 181, 183, 184, 0, 0, 0, 0,
	0, 237, 235, 206, 207, 0, 220, 221, 222, 223,
	224, 226, 210, 211, 212, 214, 216, 218, 0, 244,
	250, 251, 252, 254, 255, 256, 257, 258, 259, 260,
	0, 124, 0, 432, 233, 231, 0, 120, 0, 541,
	0, 246, 542, 543, 538, 539, 1306, 567, 263, 0,
	265, 365, 366, 367, 368, 369, 0, 269, 271, 273,
	-2, -2, 1395, -2, 281, -2, 291, 1401, 0, 294,
	295, 300, -2, 202, 327, 329, 331, 333, 335, 337,
	339, 341, 343, 345, 347, 349, 351, 353, 356, 358,
	360, 361, 362, 0, 0, 0, 366, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 545, 547, 549,
	0, 501, 660, -2, 633, 634, -2, 0, 664, 664,
	664, 0, 0, 634, 632, 0, 266, 267, 303, 304,
	305, 314, 315, 316, 317, 497, 0, 499, 324, 325,
	1174, 0, 1188, 1189, 1190, 1191, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	569, 551, 560, 569, 553, 554, 555, 556, 557, 558,
	559, 562, 0, 650, 1285, 653, 1160, 651, 636, 638,
	0, 640, 0, 0, 644, 666, 665, 697, 698, 0,
	648, 649, 659, 713, 751, 728, 719, 0, 0, 2,
	69, 0, 1377, 751, 71, 0, 1377, 751, 73, 0,
	78, 0, 1377, 1152, 0, 0, 248, 249, 1157, 1155,
	1156, 0, 148, 149, 859, 0, 0, 0, 0, 0,
	0, 951, 953, 1369, 1395, 0, 955, 956, 0, 958,
	960, 961, 0, 964, 965, 1117, 1149, 1163, 1164, 1165,
	1166, 0, 0, 1169, 0, 1171, 1172, 1173, 1017, 975,
	-2, -2, 1161, 787, 788, 789, 790, -2, 1409, 979,
	982, 985, 988, 989, 990, 991, 0, 1353, 1370, 1371,
	1391, 1392, 1400, 1404, 1405, 1377, 1388, 1378, 1365, 1375,
	1386, 1226, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1187, 821, 822,
	827, 828, 830, 150, 151, 0, 0, 1150, 1126, 1124,
	1125, 160, 480, 1377, -2, 503, 480, 507, -2, 657,
	1377, 582, 239, 241, 0, 167, 0, 595, 0, 597,
	0, 612, 757, 110, 1377, 187, 200, 110, 1377, 190,
	110, 1377, 193, 1145, 194, 1377, 196, 197, 1377, 199,
	234, 0, 0, -2, 227, 229, -2, 225, 213, 215,
	217, 219, 0, 0, 0, 431, 0, 0, 0, 540,
	0, 566, 264, 370, 371, 276, 0, 278, 0, 280,
	1364, -2, 283, 284, 570, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 296, 297, 298, 203, 0,
	363, 364, 372, 373, 125, 126, 0, 376, 397, 409,
	0, 0, 380, 382, 430, 384, 0, 0, 386, 0,
	388, 0, 390, 0, 392, 0, 394, 396, 398, 410,
	400, 659, 402, 0, 404, 408, 0, 413, 0, 415,
	416, 417, 0, 0, 423, 0, 0, 110, 755, -2,
	0, 628, 678, 679, 0, 0, 0, 0, 662, 663,
	0, 0, 0, 624, 625, 498, 1176, 1175, 550, 568,
	552, 0, 564, 0, 652, 0, 0, 699, 702, 1137,
	1141, 1142, 702, 0, 1134, 1132, 1133, 0, 0, 0,
	0, 748, 748, 748, 746, 722, 0, 728, 0, 0,
	752, 740, 0, -2, 719, 0, 0, 753, 0, 79,
	535, 89, 0, 535, 535, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 742,
	1148, 0, 1122, 1123, 1192, 1193, 1194, 1195, 1196, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 0, 0, 0, 0, 1052, 1053, 1054, 1055, 1056,
	1057, 1060, 1061, 1058, 1059, 1062, 1063, 1064, 0, 0,
	0, 1065, 1066, 1067, 0, 0, 1069, 0, 1071, 0,
	0, 0, 0, 0, 0, 1131, 0, 0, 1068, 864,
	865, 866, 888, 889, 0, 952, 1128, 1121, 954, 0,
	0, -2, 1073, 0, 0, 957, 962, 963, 0, 0,
	1116, -2, 0, 1168, 0, 856, 1019, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 806, 824, 835,
	832, 831, 808, 0, 807, 805, 0, 809, 0, 0,
	0, 140, 0, 0, 1143, 1127, 438, 0, 0, 502,
	0, 656, 0, 0, 0, 1377, 510, 1181, 584, 0,
	761, 0, 598, 0, 0, 758, 0, 185, 0, 108,
	109, 0, 188, 0, 191, 0, 0, 0, 0, 0,
	1073, 659, 0, 0, 253, 0, 0, 659, 0, 1075,
	769, 770, 771, 772, 773, 856, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 818, 0,
	793, 793, 793, 810, 811, 819, 820, 825, 826, 837,
	838, 840, 842, 836, 836, 836, 833, 834, 742, 127,
	0, 277, 0, 0, 0, 285, 286, 0, 572, 0,
	576, 311, 312, 313, 578, 579, 292, 318, 319, 320,
	321, 322, 323, 0, 287, 289, 301, 288, 290, 293,
	0, 204, 374, 375, 377, 378, 379, 383, 0, 427,
	385, 387, 389, 391, 393, 401, 405, 659, 411, 414,
	418, 419, 420, 421, 0, 0, 0, 500, 0, 631,
	676, 677, 680, 684, 685, 688, 691, 692, 682, 859,
	645, 646, 647, 670, 671, 522, 0, 0, 563, 654,
	0, 0, 761, 0, 0, 0, 1140, 761, 0, 1136,
	0, 0, 0, 0, 0, 743, 747, 744, 745, 0,
	0, 728, 740, 710, 0, 0, 0, 717, 718, 739,
	0, 738, 727, -2, 0, 0, 0, 0, 0, 534,
	91, 1377, 0, 112, 0, 0, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 1151, 130,
	0, 1158, 860, 765, 766, 812, 813, 814, 815, 816,
	861, 862, 0, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, -2, -2, -2, 880, 881, 882, -2,
	-2, -2, 886, 887, -2, 1070, 1072, 0, 1131, 0,
	-2, 0, -2, -2, -2, -2, 900, 0, 902, 905,
	907, 909, 0, 0, 0, 0, 1130, 919, 1108, 0,
	0, 1049, 1050, 1051, 904, 0, 0, 1129, 1120, 0,
	0, -2, 959, 0, 0, 0, 1079, 1080, 1115, 1111,
	0, 966, 669, 0, 0, 0, 0, 973, 0, 1177,
	843, 844, 845, 846, 847, 848, 857, 1027, 0, 0,
	0, 980, 981, 983, 984, 986, 987, 0, 0, 0,
	995, 0, 1083, -2, -2, -2, -2, -2, -2, -2,
	0, 997, 0, 999, 1073, 1093, 0, 0, 922, 0,
	0, 0, 0, 1395, 0, 1002, 1073, 1101, 0, 0,
	0, 0, 0, 1073, 0, 1107, 0, 0, 0, 0,
	0, 1013, 0, 1015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 437, 1157, 439, 441, 442,
	443, 444, 1182, 0, 1182, 0, 0, 0, 0, 0,
	0, 586, 592, 0, 610, 0, 610, 600, 0, 0,
	0, 610, 614, 615, 617, 618, 0, 0, 759, 201,
	110, 110, 1146, 110, 195, 198, 236, 0, 208, 228,
	0, 0, 0, 230, 232, 0, 762, 764, 0, 774,
	0, 139, 0, 0, 279, 0, 571, 577, 0, 308,
	0, 310, 0, 205, 429, 261, 403, 406, 424, 425,
	426, 756, 0, 686, 0, 0, 683, 689, 690, 0,
	673, 520, 521, 0, 0, 659, 1159, 694, 1138, 742,
	701, 703, 1139, 694, 1135, 730, 0, 732, 0, 0,
	0, 734, 0, 723, 0, 725, 740, 715, 0, 0,
	708, 0, 707, 728, 736, 0, 0, 754, 90, 524,
	0, 0, 0, 93, 1377, 101, 0, 452, 0, 0,
	0, 0, 0, 537, 102, 1377, 110, 1377, 110, 103,
	80, 535, 81, 0, 530, 0, 523, 82, 0, 532,
	0, 139, 0, 0, 0, -2, -2, 0, 0, 0,
	920, -2, 901, 903, 906, 908, 910, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 1118, 1121, -2,
	1074, 1077, 1078, 0, 0, 1112, 0, 0, 0, 0,
	668, 669, 669, 669, 972, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 994, 0,
	996, 998, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 925, 926,
	927, 0, 0, 1001, 1099, 1100, 0, 0, 0, 0,
	0, 0, 1007, 0, 1106, 0, 0, 0, 1011, 1012,
	1014, 0, 791, 0, 817, 839, 841, 829, 141, 0,
	1144, 446, 479, 0, 0, 1182, 0, 435, 480, 504,
	506, 0, 0, 588, 592, 0, 591, 657, 166, 0,
	760, 593, 610, 0, 0, 602, 599, 596, 761, 0,
	0, 0, 0, 186, 189, 192, 1074, 243, 0, 0,
	1076, 0, 767, 0, 0, 119, 0, 128, 245, 282,
	306, 307, 309, 302, 0, 0, 0, 672, 522, 0,
	0, 696, 0, 700, 0, 696, 731, 0, 750, 733,
	713, 724, 0, 721, 711, 0, 712, 0, 740, 0,
	0, 720, 0, 0, 0, 0, 111, 450, 469, 0,
	0, 513, 519, 519, 0, 976, 977, 0, 0, 0,
	95, 0, 0, 0, 0, 99, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 863, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1109, 0,
	1044, 0, 0, 1120, -2, 1081, 1110, 1114, 0, 967,
	0, 0, 0, 0, 1170, 849, 850, 851, 852, 853,
	854, 855, 0, 1025, 1026, 1030, 0, 0, 978, 0,
	0, 1082, 1092, 1094, 923, 924, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, -2, -2, -2, 941,
	942, 943, -2, -2, -2, 0, 0, 0, 1095, 0,
	0, 1047, 1097, 1098, 1103, 1104, 0, 1004, 1005, 1006,
	1105, 0, 0, 0, 823, 0, 142, 433, 0, 440,
	0, 0, 0, 438, 0, 0, 0, 590, 592, 0,
	583, 584, 608, 609, 594, 607, 0, 610, 616, 613,
	619, 0, 0, 121, 0, 0, 768, 775, 137, 1269,
	135, 132, 134, 262, 681, 687, 674, 522, 655, 1021,
	0, 0, 704, 1021, 0, 728, 726, 709, 705, 0,
	716, 0, 737, 526, 528, 92, 0, 451, 0, 454,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	471, 478, 0, 522, 1162, 0, 522, 0, 0, 0,
	0, 0, 107, 0, 0, 536, 0, 110, 110, 525,
	0, 0, 0, 531, 0, 533, 129, 0, 0, 0,
	-2, 0, 913, -2, -2, 1043, 1074, 1119, 1113, 1167,
	669, 968, 970, 971, 858, 1032, 1029, 0, 1016, 992,
	993, 1091, 0, 0, 0, 0, 1074, 1046, 1003, 0,
	1009, 1010, 792, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 592, 0, 585, 586, 0, 0, 0, 601,
	611, 0, 0, 0, 763, 0, 0, 0, 0, 675,
	642, 0, 695, 693, 643, 749, 740, 0, 735, 94,
	0, 455, 456, 1182, 0, 459, 462, 0, 464, 1184,
	446, 0, 475, 476, 514, 515, 518, 516, 519, 669,
	473, 0, 96, 97, 106, 114, 98, 104, 0, 0,
	0, 0, 741, 0, 0, -2, -2, 914, 1045, 0,
	669, 0, 1018, -2, 0, 0, 0, 1048, 0, 0,
	478, 0, 468, 446, 436, 478, 0, 0, 587, 588,
	0, 0, 0, 620, 621, 0, 0, 0, 136, 0,
	131, 133, 1020, 1022, 0, 714, 706, 453, 457, 0,
	0, 484, 0, 472, 0, 522, 0, 0, 116, 0,
	527, 529, 0, 0, 0, 969, 1035, 0, -2, 0,
	949, 1008, 0, 446, 478, 434, 446, 0, 589, 590,
	0, 604, 761, 606, 0, 0, 138, 0, 0, 0,
	463, 489, 0, 0, 0, 517, 967, 480, 100, 0,
	113, 0, 0, 669, 0, 0, 0, 1031, 950, 0,
	466, 446, 508, 0, 581, 0, 605, 139, 139, 1023,
	1024, 0, 465, 485, 486, 0, 481, 482, 483, 1183,
	477, 484, 115, 86, 88, 0, 1028, 1033, 1036, -2,
	1337, 1217, 0, 1034, 0, 467, 478, 761, 122, 123,
	458, 487, 0, 488, 0, 0, 0, 489, 0, 0,
	1038, 1039, 1040, 1041, 1042, 449, 446, 603, 490, 0,
	493, 494, 0, 491, 474, 0, 445, 447, 448, 509,
	492, 495, 496, 1037,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1031
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1126
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1199
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "INSERT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{ /* SKIP DOC */
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			return helpWith(sqllex, "GRANT")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			return helpWith(sqllex, "RESET")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{ /* SKIP DOC */
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{ /* SKIP DOC */
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			return unimplemented(sqllex, "set local")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1923
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			return unimplemented(sqllex, "set from current")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1971
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = Low
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = Normal
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = High
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.str = "client_encoding"
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2165
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2198
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2380
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2394
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = DropDefault
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			return unimplemented(sqllex, "match full")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			return unimplemented(sqllex, "match partial")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			return unimplemented(sqllex, "match simple")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2743
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "no action")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			return unimplemented(sqllex, "action set null")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2768
		{
			return unimplemented(sqllex, "action set default")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2900
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = Ascending
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Descending
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2944
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2946
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = true
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = false
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2980
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.str = ""
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = ""
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = ReadOnly
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = ReadWrite
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.str = ""
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.str = ""
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.str = ""
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.str = ""
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			return helpWith(sqllex, "INSERT")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3332
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3367
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3372
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			return helpWith(sqllex, "SELECT")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			return helpWith(sqllex, "VALUES")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			return helpWith(sqllex, "TABLE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			return helpWith(sqllex, "SELECT")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			return helpWith(sqllex, "TABLE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3652
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3656
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3660
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = true
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = false
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = false
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3684
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			return helpWith(sqllex, "VALUES")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &From{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3905
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3987
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = nil
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = true
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.str = astFullJoin
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.str = astLeftJoin
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.str = astRightJoin
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.str = astInnerJoin
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4171
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4271
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4314
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4386
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = nil
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4451
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4547
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4579
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4619
		{
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = year
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = month
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = day
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = hour
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = minute
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = month
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = hour
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = minute
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = minute
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = nil
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = second
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4714
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4749
		{
			return unimplemented(sqllex, "at tz")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4983
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5156
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5209
		{
			return unimplemented(sqllex, "variadic")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5210
		{
			return unimplemented(sqllex, "variadic")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5234
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			return unimplemented(sqllex, "func_application")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5251
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5255
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5264
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			return unimplemented(sqllex, "current role")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			return unimplemented(sqllex, "current user")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			return unimplemented(sqllex, "session user")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5286
		{
			return unimplemented(sqllex, "user")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5318
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5319
		{
			return unimplemented(sqllex, "treat")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5356
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5365
		{
			return unimplemented(sqllex, "within group")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5366
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.str = ""
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5463
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5464
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5465
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5468
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5469
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5477
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5478
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5479
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = Any
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = Some
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = All
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = Plus
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = Minus
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = Mult
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = Div
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = Mod
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = Bitand
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = Bitor
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = Pow
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Bitxor
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = LT
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = GT
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = EQ
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = LE
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = GE
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = NE
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = Like
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = NotLike
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = ILike
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = NotILike
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5843
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5844
		{
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6006
		{
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6042
		{
			return unimplemented(sqllex, "func const")
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6051
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = DNull
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.str = ""
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
