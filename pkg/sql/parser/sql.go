// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LEVEL = 57524
const LIKE = 57525
const LIMIT = 57526
const LOCAL = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const LOW = 57530
const LSHIFT = 57531
const MATCH = 57532
const MINUTE = 57533
const MONTH = 57534
const NAN = 57535
const NAME = 57536
const NAMES = 57537
const NATURAL = 57538
const NEXT = 57539
const NO = 57540
const NO_INDEX_JOIN = 57541
const NORMAL = 57542
const NOT = 57543
const NOTHING = 57544
const NULL = 57545
const NULLIF = 57546
const NULLS = 57547
const NUMERIC = 57548
const OF = 57549
const OFF = 57550
const OFFSET = 57551
const OID = 57552
const ON = 57553
const ONLY = 57554
const OPTIONS = 57555
const OR = 57556
const ORDER = 57557
const ORDINALITY = 57558
const OUT = 57559
const OUTER = 57560
const OVER = 57561
const OVERLAPS = 57562
const OVERLAY = 57563
const PARENT = 57564
const PARTIAL = 57565
const PARTITION = 57566
const PASSWORD = 57567
const PAUSE = 57568
const PLACING = 57569
const PLANS = 57570
const POSITION = 57571
const PRECEDING = 57572
const PRECISION = 57573
const PREPARE = 57574
const PRIMARY = 57575
const PRIORITY = 57576
const QUERIES = 57577
const QUERY = 57578
const RANGE = 57579
const READ = 57580
const REAL = 57581
const RECURSIVE = 57582
const REF = 57583
const REFERENCES = 57584
const REGCLASS = 57585
const REGPROC = 57586
const REGPROCEDURE = 57587
const REGNAMESPACE = 57588
const REGTYPE = 57589
const REMOVE_PATH = 57590
const RENAME = 57591
const REPEATABLE = 57592
const RELEASE = 57593
const RESET = 57594
const RESTORE = 57595
const RESTRICT = 57596
const RESUME = 57597
const RETURNING = 57598
const REVOKE = 57599
const RIGHT = 57600
const ROLLBACK = 57601
const ROLLUP = 57602
const ROW = 57603
const ROWS = 57604
const RSHIFT = 57605
const SAVEPOINT = 57606
const SCATTER = 57607
const SEARCH = 57608
const SECOND = 57609
const SELECT = 57610
const SEQUENCES = 57611
const SERIAL = 57612
const SERIALIZABLE = 57613
const SESSION = 57614
const SESSIONS = 57615
const SESSION_USER = 57616
const SET = 57617
const SETTING = 57618
const SETTINGS = 57619
const SHOW = 57620
const SIMILAR = 57621
const SIMPLE = 57622
const SMALLINT = 57623
const SMALLSERIAL = 57624
const SNAPSHOT = 57625
const SOME = 57626
const SPLIT = 57627
const SQL = 57628
const START = 57629
const STATUS = 57630
const STDIN = 57631
const STRICT = 57632
const STRING = 57633
const STORE = 57634
const STORING = 57635
const SUBSTRING = 57636
const SYMMETRIC = 57637
const SYSTEM = 57638
const TABLE = 57639
const TABLES = 57640
const TEMP = 57641
const TEMPLATE = 57642
const TEMPORARY = 57643
const TESTING_RANGES = 57644
const TESTING_RELOCATE = 57645
const TEXT = 57646
const THEN = 57647
const TIME = 57648
const TIMESTAMP = 57649
const TIMESTAMPTZ = 57650
const TO = 57651
const TRAILING = 57652
const TRACE = 57653
const TRANSACTION = 57654
const TREAT = 57655
const TRIM = 57656
const TRUE = 57657
const TRUNCATE = 57658
const TYPE = 57659
const UNBOUNDED = 57660
const UNCOMMITTED = 57661
const UNION = 57662
const UNIQUE = 57663
const UNKNOWN = 57664
const UPDATE = 57665
const UPSERT = 57666
const USE = 57667
const USER = 57668
const USERS = 57669
const USING = 57670
const UUID = 57671
const VALID = 57672
const VALIDATE = 57673
const VALUE = 57674
const VALUES = 57675
const VARCHAR = 57676
const VARIADIC = 57677
const VIEW = 57678
const VARYING = 57679
const WHEN = 57680
const WHERE = 57681
const WINDOW = 57682
const WITH = 57683
const WITHIN = 57684
const WITHOUT = 57685
const WRITE = 57686
const YEAR = 57687
const ZONE = 57688
const NOT_LA = 57689
const WITH_LA = 57690
const AS_LA = 57691
const CONTAINED_BY = 57692
const HAS_SOME_KEY = 57693
const HAS_ALL_KEYS = 57694
const POSTFIXOP = 57695
const UMINUS = 57696
const HELPTOKEN = 57697

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6649

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	375, 53,
	-2, 693,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	153, 545,
	-2, 0,
	-1, 55,
	96, 693,
	157, 693,
	323, 693,
	324, 693,
	-2, 0,
	-1, 65,
	107, 668,
	117, 668,
	165, 668,
	184, 668,
	209, 668,
	215, 668,
	320, 668,
	-2, 657,
	-1, 98,
	4, 695,
	20, 695,
	21, 695,
	23, 695,
	28, 695,
	33, 695,
	34, 695,
	35, 695,
	36, 695,
	37, 695,
	38, 695,
	39, 695,
	40, 695,
	41, 695,
	42, 695,
	44, 695,
	45, 695,
	46, 695,
	47, 695,
	48, 695,
	51, 695,
	52, 695,
	53, 695,
	55, 695,
	56, 695,
	60, 695,
	61, 695,
	62, 695,
	64, 695,
	65, 695,
	66, 695,
	67, 695,
	69, 695,
	71, 695,
	72, 695,
	75, 695,
	76, 695,
	77, 695,
	85, 695,
	86, 695,
	87, 695,
	88, 695,
	89, 695,
	90, 695,
	91, 695,
	92, 695,
	94, 695,
	96, 695,
	98, 695,
	101, 695,
	102, 695,
	104, 695,
	108, 695,
	109, 695,
	110, 695,
	111, 695,
	112, 695,
	113, 695,
	114, 695,
	122, 695,
	123, 695,
	124, 695,
	125, 695,
	126, 695,
	128, 695,
	130, 695,
	135, 695,
	136, 695,
	138, 695,
	141, 695,
	142, 695,
	145, 695,
	146, 695,
	147, 695,
	148, 695,
	151, 695,
	152, 695,
	154, 695,
	157, 695,
	158, 695,
	159, 695,
	160, 695,
	161, 695,
	162, 695,
	163, 695,
	164, 695,
	166, 695,
	169, 695,
	170, 695,
	171, 695,
	173, 695,
	174, 695,
	175, 695,
	177, 695,
	178, 695,
	180, 695,
	182, 695,
	185, 695,
	188, 695,
	190, 695,
	191, 695,
	192, 695,
	193, 695,
	194, 695,
	195, 695,
	197, 695,
	198, 695,
	199, 695,
	200, 695,
	204, 695,
	205, 695,
	206, 695,
	207, 695,
	208, 695,
	210, 695,
	212, 695,
	213, 695,
	216, 695,
	217, 695,
	219, 695,
	221, 695,
	222, 695,
	223, 695,
	224, 695,
	225, 695,
	226, 695,
	228, 695,
	229, 695,
	230, 695,
	231, 695,
	232, 695,
	234, 695,
	235, 695,
	236, 695,
	237, 695,
	238, 695,
	239, 695,
	240, 695,
	241, 695,
	243, 695,
	244, 695,
	245, 695,
	246, 695,
	247, 695,
	249, 695,
	250, 695,
	251, 695,
	252, 695,
	253, 695,
	254, 695,
	255, 695,
	257, 695,
	259, 695,
	260, 695,
	261, 695,
	262, 695,
	264, 695,
	265, 695,
	266, 695,
	267, 695,
	269, 695,
	270, 695,
	271, 695,
	272, 695,
	273, 695,
	275, 695,
	276, 695,
	277, 695,
	278, 695,
	280, 695,
	281, 695,
	282, 695,
	283, 695,
	285, 695,
	286, 695,
	287, 695,
	288, 695,
	289, 695,
	290, 695,
	291, 695,
	292, 695,
	293, 695,
	294, 695,
	296, 695,
	298, 695,
	299, 695,
	300, 695,
	301, 695,
	302, 695,
	303, 695,
	304, 695,
	306, 695,
	307, 695,
	308, 695,
	311, 695,
	312, 695,
	313, 695,
	314, 695,
	316, 695,
	317, 695,
	318, 695,
	319, 695,
	322, 695,
	323, 695,
	324, 695,
	325, 695,
	327, 695,
	329, 695,
	330, 695,
	331, 695,
	332, 695,
	333, 695,
	334, 695,
	337, 695,
	342, 695,
	343, 695,
	344, 695,
	345, 695,
	346, 695,
	-2, 0,
	-1, 123,
	107, 667,
	117, 667,
	165, 667,
	184, 667,
	209, 667,
	215, 667,
	320, 667,
	-2, 660,
	-1, 129,
	1, 594,
	169, 594,
	234, 594,
	238, 594,
	374, 594,
	375, 594,
	-2, 0,
	-1, 131,
	1, 594,
	374, 594,
	375, 594,
	-2, 0,
	-1, 132,
	1, 594,
	374, 594,
	375, 594,
	-2, 0,
	-1, 133,
	1, 598,
	374, 598,
	375, 598,
	-2, 0,
	-1, 140,
	4, 701,
	5, 701,
	6, 701,
	7, 701,
	8, 701,
	9, 701,
	20, 701,
	21, 701,
	23, 701,
	28, 701,
	29, 701,
	33, 701,
	34, 701,
	35, 701,
	36, 701,
	37, 701,
	38, 701,
	39, 701,
	40, 701,
	41, 701,
	42, 701,
	44, 701,
	45, 701,
	46, 701,
	47, 701,
	48, 701,
	49, 701,
	50, 701,
	51, 701,
	52, 701,
	53, 701,
	55, 701,
	56, 701,
	58, 701,
	60, 701,
	61, 701,
	62, 701,
	64, 701,
	65, 701,
	66, 701,
	67, 701,
	69, 701,
	71, 701,
	72, 701,
	74, 701,
	75, 701,
	76, 701,
	77, 701,
	79, 701,
	80, 701,
	81, 701,
	83, 701,
	84, 701,
	85, 701,
	86, 701,
	87, 701,
	88, 701,
	89, 701,
	90, 701,
	91, 701,
	92, 701,
	94, 701,
	96, 701,
	98, 701,
	101, 701,
	102, 701,
	104, 701,
	108, 701,
	109, 701,
	110, 701,
	111, 701,
	112, 701,
	113, 701,
	114, 701,
	115, 701,
	116, 701,
	122, 701,
	123, 701,
	124, 701,
	125, 701,
	126, 701,
	128, 701,
	130, 701,
	133, 701,
	135, 701,
	136, 701,
	138, 701,
	141, 701,
	142, 701,
	145, 701,
	146, 701,
	147, 701,
	148, 701,
	149, 701,
	151, 701,
	152, 701,
	154, 701,
	156, 701,
	157, 701,
	158, 701,
	159, 701,
	160, 701,
	161, 701,
	162, 701,
	163, 701,
	164, 701,
	166, 701,
	168, 701,
	169, 701,
	170, 701,
	171, 701,
	172, 701,
	173, 701,
	174, 701,
	175, 701,
	177, 701,
	178, 701,
	180, 701,
	181, 701,
	182, 701,
	183, 701,
	185, 701,
	188, 701,
	190, 701,
	191, 701,
	192, 701,
	193, 701,
	194, 701,
	195, 701,
	196, 701,
	197, 701,
	198, 701,
	199, 701,
	200, 701,
	201, 701,
	203, 701,
	204, 701,
	205, 701,
	206, 701,
	207, 701,
	208, 701,
	210, 701,
	213, 701,
	216, 701,
	217, 701,
	218, 701,
	219, 701,
	220, 701,
	221, 701,
	222, 701,
	223, 701,
	224, 701,
	225, 701,
	226, 701,
	228, 701,
	229, 701,
	230, 701,
	231, 701,
	232, 701,
	234, 701,
	235, 701,
	236, 701,
	237, 701,
	238, 701,
	239, 701,
	240, 701,
	241, 701,
	243, 701,
	244, 701,
	245, 701,
	246, 701,
	247, 701,
	249, 701,
	250, 701,
	251, 701,
	252, 701,
	253, 701,
	254, 701,
	255, 701,
	257, 701,
	258, 701,
	259, 701,
	260, 701,
	261, 701,
	262, 701,
	264, 701,
	265, 701,
	266, 701,
	267, 701,
	269, 701,
	270, 701,
	271, 701,
	272, 701,
	273, 701,
	274, 701,
	275, 701,
	276, 701,
	277, 701,
	278, 701,
	279, 701,
	280, 701,
	281, 701,
	282, 701,
	283, 701,
	285, 701,
	286, 701,
	287, 701,
	288, 701,
	289, 701,
	290, 701,
	291, 701,
	292, 701,
	293, 701,
	294, 701,
	296, 701,
	298, 701,
	299, 701,
	300, 701,
	301, 701,
	302, 701,
	303, 701,
	304, 701,
	306, 701,
	307, 701,
	308, 701,
	311, 701,
	312, 701,
	313, 701,
	314, 701,
	315, 701,
	316, 701,
	317, 701,
	318, 701,
	319, 701,
	322, 701,
	323, 701,
	324, 701,
	325, 701,
	326, 701,
	327, 701,
	329, 701,
	330, 701,
	331, 701,
	332, 701,
	333, 701,
	334, 701,
	337, 701,
	342, 701,
	343, 701,
	344, 701,
	345, 701,
	346, 701,
	347, 701,
	357, 701,
	362, 701,
	363, 701,
	364, 701,
	371, 701,
	377, 701,
	-2, 0,
	-1, 143,
	1, 53,
	375, 53,
	-2, 693,
	-1, 503,
	132, 1306,
	309, 1306,
	352, 1306,
	373, 1306,
	-2, 0,
	-1, 504,
	132, 1255,
	309, 1255,
	352, 1255,
	373, 1255,
	-2, 0,
	-1, 506,
	132, 1364,
	309, 1364,
	352, 1364,
	373, 1364,
	-2, 0,
	-1, 508,
	132, 1386,
	309, 1386,
	352, 1386,
	373, 1386,
	-2, 0,
	-1, 515,
	132, 1311,
	309, 1311,
	352, 1311,
	373, 1311,
	-2, 330,
	-1, 541,
	1, 408,
	370, 408,
	372, 408,
	374, 408,
	375, 408,
	-2, 0,
	-1, 542,
	1, 460,
	129, 460,
	370, 460,
	372, 460,
	374, 460,
	375, 460,
	-2, 0,
	-1, 548,
	1, 422,
	370, 422,
	372, 422,
	374, 422,
	375, 422,
	-2, 0,
	-1, 550,
	1, 426,
	370, 426,
	372, 426,
	374, 426,
	375, 426,
	-2, 0,
	-1, 553,
	1, 434,
	370, 434,
	372, 434,
	374, 434,
	375, 434,
	-2, 0,
	-1, 554,
	1, 439,
	370, 439,
	372, 439,
	374, 439,
	375, 439,
	-2, 0,
	-1, 557,
	1, 449,
	370, 449,
	372, 449,
	374, 449,
	375, 449,
	-2, 0,
	-1, 576,
	117, 703,
	184, 703,
	209, 703,
	-2, 663,
	-1, 583,
	117, 702,
	184, 702,
	209, 702,
	-2, 661,
	-1, 640,
	371, 1233,
	-2, 1226,
	-1, 641,
	371, 1234,
	-2, 1227,
	-1, 647,
	5, 880,
	371, 880,
	-2, 1438,
	-1, 672,
	5, 839,
	-2, 1407,
	-1, 673,
	5, 874,
	371, 874,
	-2, 1409,
	-1, 674,
	5, 849,
	-2, 1410,
	-1, 675,
	5, 848,
	-2, 1411,
	-1, 676,
	5, 874,
	371, 874,
	-2, 1414,
	-1, 677,
	5, 874,
	371, 874,
	-2, 1415,
	-1, 678,
	5, 875,
	-2, 1418,
	-1, 679,
	5, 831,
	-2, 1419,
	-1, 680,
	5, 831,
	-2, 1420,
	-1, 681,
	5, 856,
	-2, 1424,
	-1, 682,
	5, 841,
	-2, 1425,
	-1, 683,
	5, 842,
	-2, 1426,
	-1, 684,
	5, 832,
	-2, 1432,
	-1, 685,
	5, 833,
	-2, 1433,
	-1, 686,
	5, 834,
	-2, 1434,
	-1, 687,
	5, 835,
	-2, 1435,
	-1, 688,
	5, 836,
	-2, 1436,
	-1, 689,
	5, 837,
	-2, 1437,
	-1, 690,
	5, 831,
	-2, 1442,
	-1, 691,
	5, 840,
	-2, 1447,
	-1, 692,
	5, 838,
	-2, 1450,
	-1, 693,
	5, 872,
	371, 872,
	-2, 1452,
	-1, 694,
	5, 876,
	-2, 1455,
	-1, 695,
	5, 878,
	-2, 1456,
	-1, 696,
	5, 871,
	371, 871,
	-2, 1461,
	-1, 881,
	225, 691,
	-2, 538,
	-1, 894,
	211, 1230,
	-2, 0,
	-1, 930,
	1, 217,
	370, 217,
	372, 217,
	374, 217,
	375, 217,
	-2, 666,
	-1, 933,
	4, 1460,
	10, 1460,
	11, 1460,
	13, 1460,
	14, 1460,
	15, 1460,
	16, 1460,
	17, 1460,
	18, 1460,
	20, 1460,
	21, 1460,
	23, 1460,
	26, 1460,
	28, 1460,
	30, 1460,
	33, 1460,
	34, 1460,
	35, 1460,
	36, 1460,
	37, 1460,
	38, 1460,
	39, 1460,
	40, 1460,
	41, 1460,
	42, 1460,
	44, 1460,
	45, 1460,
	46, 1460,
	47, 1460,
	48, 1460,
	51, 1460,
	52, 1460,
	53, 1460,
	55, 1460,
	56, 1460,
	57, 1460,
	60, 1460,
	61, 1460,
	62, 1460,
	63, 1460,
	64, 1460,
	65, 1460,
	66, 1460,
	67, 1460,
	69, 1460,
	70, 1460,
	71, 1460,
	72, 1460,
	74, 1460,
	75, 1460,
	76, 1460,
	77, 1460,
	85, 1460,
	86, 1460,
	87, 1460,
	88, 1460,
	89, 1460,
	90, 1460,
	91, 1460,
	92, 1460,
	94, 1460,
	96, 1460,
	98, 1460,
	101, 1460,
	102, 1460,
	104, 1460,
	108, 1460,
	109, 1460,
	110, 1460,
	111, 1460,
	112, 1460,
	113, 1460,
	114, 1460,
	118, 1460,
	119, 1460,
	120, 1460,
	121, 1460,
	122, 1460,
	123, 1460,
	124, 1460,
	125, 1460,
	126, 1460,
	127, 1460,
	128, 1460,
	130, 1460,
	133, 1460,
	135, 1460,
	136, 1460,
	138, 1460,
	141, 1460,
	142, 1460,
	145, 1460,
	146, 1460,
	147, 1460,
	148, 1460,
	149, 1460,
	150, 1460,
	151, 1460,
	152, 1460,
	154, 1460,
	156, 1460,
	157, 1460,
	158, 1460,
	159, 1460,
	160, 1460,
	161, 1460,
	162, 1460,
	163, 1460,
	164, 1460,
	166, 1460,
	168, 1460,
	169, 1460,
	170, 1460,
	171, 1460,
	172, 1460,
	173, 1460,
	174, 1460,
	175, 1460,
	177, 1460,
	178, 1460,
	180, 1460,
	181, 1460,
	182, 1460,
	183, 1460,
	185, 1460,
	188, 1460,
	189, 1460,
	190, 1460,
	191, 1460,
	192, 1460,
	193, 1460,
	194, 1460,
	195, 1460,
	196, 1460,
	197, 1460,
	198, 1460,
	199, 1460,
	200, 1460,
	204, 1460,
	205, 1460,
	206, 1460,
	207, 1460,
	208, 1460,
	210, 1460,
	213, 1460,
	214, 1460,
	216, 1460,
	217, 1460,
	219, 1460,
	221, 1460,
	222, 1460,
	223, 1460,
	224, 1460,
	225, 1460,
	226, 1460,
	228, 1460,
	229, 1460,
	230, 1460,
	231, 1460,
	232, 1460,
	234, 1460,
	235, 1460,
	236, 1460,
	237, 1460,
	238, 1460,
	239, 1460,
	240, 1460,
	241, 1460,
	243, 1460,
	244, 1460,
	245, 1460,
	246, 1460,
	247, 1460,
	248, 1460,
	249, 1460,
	250, 1460,
	251, 1460,
	252, 1460,
	253, 1460,
	254, 1460,
	255, 1460,
	257, 1460,
	258, 1460,
	259, 1460,
	260, 1460,
	261, 1460,
	262, 1460,
	263, 1460,
	264, 1460,
	265, 1460,
	266, 1460,
	267, 1460,
	269, 1460,
	270, 1460,
	271, 1460,
	272, 1460,
	273, 1460,
	275, 1460,
	276, 1460,
	277, 1460,
	278, 1460,
	279, 1460,
	280, 1460,
	281, 1460,
	282, 1460,
	283, 1460,
	285, 1460,
	286, 1460,
	287, 1460,
	288, 1460,
	289, 1460,
	290, 1460,
	291, 1460,
	292, 1460,
	293, 1460,
	294, 1460,
	296, 1460,
	298, 1460,
	299, 1460,
	300, 1460,
	301, 1460,
	302, 1460,
	303, 1460,
	304, 1460,
	306, 1460,
	307, 1460,
	308, 1460,
	311, 1460,
	312, 1460,
	313, 1460,
	314, 1460,
	316, 1460,
	317, 1460,
	318, 1460,
	319, 1460,
	322, 1460,
	323, 1460,
	324, 1460,
	325, 1460,
	327, 1460,
	329, 1460,
	330, 1460,
	331, 1460,
	332, 1460,
	333, 1460,
	334, 1460,
	337, 1460,
	342, 1460,
	343, 1460,
	344, 1460,
	345, 1460,
	346, 1460,
	347, 1460,
	348, 1460,
	350, 1460,
	351, 1460,
	352, 1460,
	353, 1460,
	354, 1460,
	355, 1460,
	356, 1460,
	357, 1460,
	359, 1460,
	360, 1460,
	361, 1460,
	362, 1460,
	363, 1460,
	364, 1460,
	365, 1460,
	366, 1460,
	367, 1460,
	369, 1460,
	372, 1460,
	373, 1460,
	376, 1460,
	377, 1460,
	-2, 0,
	-1, 948,
	132, 1364,
	309, 1364,
	352, 1364,
	373, 1364,
	-2, 0,
	-1, 965,
	132, 1386,
	309, 1386,
	352, 1386,
	373, 1386,
	-2, 0,
	-1, 966,
	169, 606,
	234, 606,
	238, 606,
	-2, 318,
	-1, 1031,
	117, 702,
	184, 702,
	209, 702,
	-2, 664,
	-1, 1110,
	107, 668,
	117, 668,
	165, 668,
	184, 668,
	209, 668,
	215, 668,
	320, 668,
	-2, 1009,
	-1, 1120,
	371, 1210,
	-2, 1198,
	-1, 1138,
	372, 1122,
	-2, 0,
	-1, 1164,
	169, 606,
	234, 606,
	238, 606,
	-2, 601,
	-1, 1192,
	372, 1122,
	-2, 0,
	-1, 1196,
	107, 668,
	117, 668,
	165, 668,
	184, 668,
	209, 668,
	215, 668,
	320, 668,
	-2, 764,
	-1, 1337,
	169, 606,
	234, 606,
	238, 606,
	-2, 320,
	-1, 1435,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 915,
	-1, 1436,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 916,
	-1, 1437,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 917,
	-1, 1438,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 918,
	-1, 1439,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 919,
	-1, 1440,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 920,
	-1, 1441,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 921,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 922,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 931,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 932,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 933,
	-1, 1456,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 938,
	-1, 1462,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 940,
	-1, 1464,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 944,
	-1, 1465,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 945,
	-1, 1466,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 946,
	-1, 1467,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 947,
	-1, 1536,
	132, 1133,
	371, 1233,
	-2, 1226,
	-1, 1537,
	132, 1134,
	-2, 1403,
	-1, 1538,
	132, 1135,
	-2, 1310,
	-1, 1539,
	132, 1136,
	-2, 1273,
	-1, 1540,
	132, 1137,
	-2, 1290,
	-1, 1541,
	132, 1138,
	-2, 1309,
	-1, 1542,
	132, 1139,
	-2, 1361,
	-1, 1621,
	1, 765,
	74, 765,
	107, 765,
	117, 765,
	133, 765,
	137, 765,
	139, 765,
	156, 765,
	165, 765,
	172, 765,
	181, 765,
	184, 765,
	196, 765,
	209, 765,
	211, 765,
	215, 765,
	256, 765,
	258, 765,
	320, 765,
	328, 765,
	339, 765,
	340, 765,
	349, 765,
	370, 765,
	372, 765,
	374, 765,
	375, 765,
	376, 765,
	-2, 764,
	-1, 1767,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 939,
	-1, 1768,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 941,
	-1, 1773,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 942,
	-1, 1791,
	220, 1093,
	-2, 1095,
	-1, 1966,
	225, 691,
	-2, 538,
	-1, 2021,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 943,
	-1, 2026,
	168, 0,
	-2, 959,
	-1, 2035,
	220, 1094,
	-2, 1096,
	-1, 2077,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 986,
	-1, 2078,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 987,
	-1, 2079,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 988,
	-1, 2083,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 992,
	-1, 2084,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 993,
	-1, 2085,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 994,
	-1, 2218,
	168, 0,
	-2, 960,
	-1, 2221,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 963,
	-1, 2222,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 965,
	-1, 2342,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 964,
	-1, 2343,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 966,
	-1, 2350,
	168, 0,
	-2, 995,
	-1, 2426,
	168, 0,
	-2, 996,
	-1, 2503,
	36, 0,
	149, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 1406,
}

const sqlPrivate = 57344

const sqlLast = 42722

var sqlAct = [...]int{

	641, 2502, 2173, 2511, 2477, 2512, 2376, 2548, 2513, 2004,
	1696, 1688, 2054, 2501, 1236, 2431, 1493, 2323, 2184, 64,
	2289, 1244, 2275, 600, 1667, 584, 2206, 1616, 699, 1970,
	2208, 2140, 1907, 923, 2139, 884, 617, 926, 1666, 1761,
	1671, 182, 745, 875, 639, 182, 1972, 1685, 2356, 182,
	1190, 2255, 1194, 1280, 631, 182, 1978, 638, 1697, 1886,
	182, 182, 1857, 2200, 182, 1670, 1660, 182, 1634, 1239,
	1199, 634, 1173, 1625, 1414, 182, 2110, 1617, 1856, 1802,
	1894, 1491, 592, 118, 1238, 1116, 1757, 1745, 442, 459,
	25, 1409, 1202, 1232, 1174, 1362, 1281, 1204, 1516, 1492,
	1034, 969, 611, 1479, 1500, 1476, 1358, 439, 514, 751,
	968, 919, 1148, 1152, 1510, 916, 1257, 1668, 886, 1690,
	931, 909, 1674, 754, 1603, 1590, 733, 1565, 1181, 494,
	610, 1035, 1532, 123, 1105, 182, 182, 1033, 118, 1361,
	633, 124, 472, 182, 906, 589, 1164, 173, 731, 1251,
	507, 178, 2290, 1163, 535, 1039, 2124, 1790, 1689, 2125,
	1259, 1259, 1259, 2544, 2526, 588, 588, 1227, 2288, 182,
	182, 182, 182, 774, 1191, 2523, 2522, 182, 182, 1712,
	1712, 2519, 2499, 2498, 2472, 1227, 1269, 1269, 1722, 947,
	2019, 1223, 2467, 1827, 1828, 1987, 2337, 2463, 1712, 2455,
	1988, 1227, 863, 2288, 583, 2428, 2406, 2403, 486, 1722,
	2288, 1227, 2401, 748, 2387, 2386, 2288, 2364, 1227, 2288,
	2361, 1227, 1592, 598, 1227, 2344, 118, 511, 2311, 1722,
	2309, 2287, 1712, 25, 1712, 2288, 2473, 1269, 1661, 2268,
	772, 1050, 1051, 1227, 1080, 1081, 1082, 1090, 1091, 1092,
	2220, 2199, 577, 2337, 1722, 1665, 2113, 1083, 2194, 2120,
	576, 1591, 1665, 2121, 1053, 2113, 2030, 1094, 1998, 1958,
	1712, 1883, 1959, 1227, 2014, 1227, 1874, 1661, 759, 763,
	1875, 593, 1872, 769, 735, 1871, 1712, 1870, 1052, 1712,
	1794, 1712, 1623, 1732, 1072, 1721, 1795, 1712, 1711, 1722,
	2090, 1069, 1712, 1664, 1269, 1597, 2032, 1665, 1273, 1596,
	1833, 737, 1274, 738, 1050, 1051, 1959, 1760, 1743, 1340,
	1168, 1495, 1227, 861, 950, 1513, 1712, 1801, 143, 2291,
	946, 1359, 945, 944, 943, 942, 941, 1053, 940, 939,
	140, 938, 937, 936, 935, 934, 739, 736, 582, 1075,
	1076, 1077, 1078, 591, 581, 580, 579, 575, 1058, 574,
	573, 1052, 572, 571, 567, 566, 1260, 1260, 1260, 142,
	565, 533, 1843, 532, 531, 530, 529, 1514, 528, 527,
	1087, 1095, 526, 525, 524, 523, 522, 521, 520, 519,
	518, 517, 140, 502, 501, 500, 499, 498, 39, 1093,
	698, 430, 408, 401, 400, 141, 166, 165, 164, 40,
	163, 182, 889, 182, 1085, 182, 162, 161, 182, 160,
	1073, 142, 43, 159, 182, 158, 1515, 1512, 157, 156,
	183, 1058, 155, 182, 182, 182, 182, 889, 154, 153,
	152, 40, 889, 125, 1987, 1084, 1844, 151, 465, 881,
	150, 39, 149, 148, 43, 147, 146, 141, 145, 144,
	867, 589, 40, 1902, 1365, 134, 1591, 1195, 182, 1693,
	1529, 1527, 135, 1525, 981, 43, 1523, 466, 2518, 1079,
	1719, 182, 1050, 1051, 54, 1277, 128, 55, 1265, 1258,
	1393, 1046, 2500, 1073, 1074, 125, 1961, 182, 1827, 1828,
	2487, 465, 1517, 2482, 2423, 1053, 2404, 182, 2254, 1720,
	1088, 2250, 2246, 2245, 2238, 2237, 2330, 2236, 128, 879,
	57, 892, 2232, 2231, 2230, 2229, 2223, 2205, 2104, 1052,
	466, 2099, 2098, 908, 1827, 1828, 2097, 54, 889, 128,
	55, 912, 912, 1836, 1837, 1829, 1830, 1831, 1832, 1834,
	1835, 1842, 57, 2040, 1957, 913, 1914, 1827, 1828, 874,
	932, 1910, 1879, 1876, 1864, 1855, 1826, 1074, 1823, 182,
	1822, 1827, 1828, 57, 1820, 984, 1807, 1806, 1086, 1791,
	1511, 1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089, 951,
	1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 1058,
	1621, 58, 1032, 775, 1046, 1487, 1727, 2247, 746, 1193,
	1124, 979, 1117, 1045, 1108, 1833, 1192, 872, 1243, 140,
	2056, 2490, 2458, 2452, 2451, 2442, 2440, 126, 60, 2418,
	61, 2417, 1112, 58, 2416, 589, 697, 2373, 2352, 2338,
	2317, 2308, 2294, 140, 140, 867, 2243, 1747, 142, 2182,
	467, 1833, 2179, 94, 58, 966, 1031, 963, 2178, 126,
	60, 1073, 61, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 142, 142, 1833, 140, 2329, 1843, 1030, 2176,
	126, 60, 467, 61, 141, 94, 1360, 1756, 1833, 2148,
	2147, 982, 134, 2128, 2116, 1755, 140, 2025, 2002, 135,
	1380, 1947, 1941, 467, 142, 1927, 94, 1926, 141, 141,
	1912, 1882, 1854, 1843, 1927, 1488, 134, 134, 1816, 1815,
	440, 1812, 125, 135, 135, 142, 577, 1787, 1782, 1481,
	1153, 182, 1156, 182, 576, 1074, 1608, 1577, 1521, 1235,
	141, 39, 1042, 1043, 747, 1171, 125, 1692, 134, 1047,
	1843, 1844, 40, 1160, 1146, 135, 182, 182, 1145, 1144,
	1143, 141, 1142, 1141, 1140, 43, 1139, 1138, 1137, 134,
	1136, 1179, 1050, 1051, 1135, 589, 135, 1134, 125, 1120,
	1133, 1172, 1132, 1278, 1131, 1050, 1051, 1844, 1130, 1150,
	1151, 465, 1129, 1128, 1154, 1053, 1121, 1109, 1108, 125,
	962, 954, 928, 2434, 1157, 2336, 2225, 2204, 1053, 776,
	2123, 2119, 1793, 1609, 1177, 1724, 1117, 2000, 1106, 1052,
	466, 1193, 978, 1731, 1844, 1827, 1828, 54, 1900, 128,
	55, 1973, 1052, 118, 1054, 1055, 1056, 1057, 1059, 1060,
	1528, 1526, 890, 1524, 2340, 2339, 1522, 1838, 1836, 1837,
	1829, 1830, 1831, 1832, 1834, 1835, 873, 2333, 1189, 2126,
	1167, 889, 182, 57, 1989, 1158, 1730, 890, 774, 1661,
	1159, 1195, 890, 1950, 182, 1165, 1944, 1940, 1212, 1197,
	1162, 1169, 1028, 1838, 1836, 1837, 1829, 1830, 1831, 1832,
	1834, 1835, 1878, 1346, 1877, 182, 1766, 1585, 1225, 975,
	1126, 182, 1058, 182, 2005, 182, 1240, 1242, 2357, 182,
	1689, 1831, 1832, 1834, 1835, 2057, 1501, 1149, 1234, 1798,
	1022, 1983, 1837, 1829, 1830, 1831, 1832, 1834, 1835, 2135,
	1205, 1205, 1206, 1206, 2462, 2485, 1716, 1205, 1513, 1206,
	436, 411, 1635, 2541, 58, 1271, 2302, 1733, 2542, 182,
	182, 726, 2398, 409, 2011, 724, 889, 2397, 182, 1023,
	2395, 182, 2394, 722, 2167, 1248, 2164, 2132, 890, 1014,
	126, 60, 719, 61, 2131, 646, 1123, 747, 587, 1335,
	1811, 1810, 774, 1320, 1809, 1808, 140, 182, 1769, 1332,
	1514, 1715, 182, 467, 1827, 1828, 94, 182, 182, 976,
	182, 1656, 182, 1652, 182, 431, 182, 728, 1649, 1463,
	908, 1207, 1207, 1226, 1166, 142, 860, 182, 1207, 1638,
	2314, 1581, 1580, 182, 182, 1347, 1287, 1424, 1686, 2171,
	1262, 569, 1213, 1264, 1391, 435, 586, 1267, 414, 1515,
	1512, 481, 977, 626, 2172, 1250, 1221, 1355, 891, 182,
	604, 141, 1210, 774, 1253, 2461, 717, 1478, 1627, 134,
	1954, 2001, 1220, 1827, 1828, 1627, 135, 2159, 1478, 2378,
	1211, 1230, 1517, 891, 1626, 2496, 2150, 1370, 891, 1320,
	1320, 1254, 1218, 1049, 179, 2533, 588, 701, 406, 441,
	435, 961, 416, 1276, 118, 1367, 414, 1275, 437, 963,
	1219, 434, 1980, 484, 179, 1333, 1949, 492, 1228, 167,
	497, 1833, 1337, 2107, 2050, 1517, 1351, 1363, 516, 1381,
	2445, 1637, 1287, 1287, 2469, 1943, 420, 1485, 589, 1060,
	1112, 1193, 1483, 589, 1758, 1759, 1396, 2012, 1503, 1056,
	1057, 1059, 1060, 1214, 1374, 1390, 1392, 1415, 1422, 2470,
	2532, 1535, 1535, 1548, 1501, 1725, 434, 1568, 1938, 1203,
	1147, 1572, 1573, 1575, 1234, 987, 1395, 182, 1680, 182,
	1394, 1021, 182, 577, 891, 2541, 577, 577, 734, 734,
	1833, 1405, 1835, 182, 1406, 1407, 406, 421, 1334, 2348,
	1517, 585, 774, 1511, 170, 182, 1589, 1350, 1349, 182,
	1359, 1356, 182, 1498, 1161, 2400, 182, 1050, 1051, 1636,
	182, 2010, 406, 406, 767, 406, 182, 1496, 589, 1371,
	179, 864, 1366, 182, 774, 1375, 1027, 1376, 182, 1377,
	1053, 1378, 2556, 1379, 1486, 1550, 182, 2515, 1560, 1489,
	1208, 1208, 1843, 1610, 182, 433, 1628, 1208, 410, 2151,
	1385, 1387, 2531, 1600, 1052, 182, 1008, 182, 2283, 182,
	171, 720, 182, 2106, 182, 720, 182, 182, 1543, 182,
	889, 889, 415, 721, 436, 889, 1413, 411, 1013, 182,
	1639, 1641, 720, 2551, 432, 1259, 1353, 412, 1981, 1389,
	2379, 890, 1614, 1423, 1009, 1587, 1586, 2284, 775, 1103,
	433, 1646, 1216, 1595, 1710, 1814, 410, 1709, 2157, 1654,
	1605, 1606, 1601, 1338, 730, 1624, 1844, 729, 1604, 1644,
	1771, 588, 1197, 2108, 1058, 1650, 570, 2516, 1631, 436,
	415, 1477, 1620, 1980, 1657, 411, 480, 2212, 1018, 432,
	473, 1691, 2514, 1691, 172, 412, 1829, 1830, 1831, 1832,
	1834, 1835, 1369, 423, 422, 1319, 118, 1048, 995, 1326,
	2540, 2047, 118, 478, 1736, 960, 774, 1703, 1718, 474,
	912, 2538, 912, 1695, 182, 2322, 1738, 1706, 1354, 972,
	1037, 1713, 1707, 1704, 2517, 1705, 890, 1683, 957, 1484,
	182, 182, 182, 932, 182, 1714, 1717, 1739, 988, 1728,
	949, 475, 1726, 1019, 168, 2279, 2562, 2280, 1038, 1737,
	2048, 1180, 775, 182, 402, 1829, 1830, 1831, 1832, 1834,
	1835, 1953, 2241, 2389, 477, 2388, 1050, 1051, 1154, 2086,
	1157, 2371, 1611, 2549, 2298, 2437, 989, 2282, 2557, 986,
	1217, 1151, 1150, 169, 973, 2134, 2285, 1036, 974, 1053,
	1734, 1319, 1319, 2301, 516, 1923, 516, 1020, 895, 1919,
	2300, 898, 1684, 1460, 1658, 118, 1249, 406, 2046, 560,
	1184, 1241, 1038, 1052, 1237, 2478, 516, 516, 406, 920,
	972, 1384, 1341, 775, 700, 1345, 1517, 597, 877, 2550,
	1748, 1260, 876, 1187, 429, 2185, 1401, 891, 1785, 2324,
	1908, 589, 1750, 1752, 776, 1788, 1037, 1754, 2372, 1182,
	2552, 516, 1929, 1928, 424, 1764, 2561, 1897, 1185, 175,
	1599, 1598, 1804, 1805, 516, 2281, 972, 967, 586, 1800,
	2242, 2087, 1343, 1183, 894, 476, 2174, 2088, 905, 489,
	958, 1779, 2297, 1058, 1344, 973, 483, 2315, 1896, 974,
	516, 983, 561, 560, 1952, 1360, 1357, 1777, 903, 1054,
	1055, 1056, 1057, 1059, 1060, 1772, 1770, 996, 2299, 1909,
	1402, 597, 1853, 1036, 2256, 589, 1458, 1461, 2369, 1568,
	1568, 1568, 403, 2111, 1866, 1786, 1520, 2351, 2240, 3,
	479, 2170, 891, 182, 774, 1186, 464, 33, 1858, 182,
	182, 2024, 1884, 182, 1797, 1073, 1744, 1890, 182, 2370,
	1457, 182, 406, 718, 463, 32, 462, 29, 776, 182,
	1891, 1955, 775, 461, 70, 182, 182, 182, 1821, 1781,
	1474, 182, 1017, 1729, 182, 1774, 561, 1663, 1904, 643,
	182, 182, 182, 182, 182, 1775, 1472, 1655, 404, 1780,
	182, 1648, 1026, 182, 775, 491, 1025, 182, 460, 69,
	562, 1320, 1903, 1888, 955, 1895, 182, 1859, 865, 1892,
	1893, 1920, 866, 1898, 1913, 470, 182, 1012, 182, 1074,
	182, 889, 889, 1880, 182, 1899, 1885, 1382, 182, 776,
	1861, 1862, 1863, 182, 972, 182, 862, 1960, 1320, 1962,
	890, 890, 182, 904, 1287, 890, 1459, 488, 1184, 1373,
	1127, 1006, 589, 1519, 482, 1004, 182, 889, 1965, 1966,
	425, 1915, 2510, 902, 1468, 1224, 473, 457, 21, 1924,
	182, 1187, 1469, 757, 1470, 1939, 2475, 1937, 1475, 563,
	33, 1287, 2272, 1946, 562, 723, 725, 1602, 2155, 478,
	1002, 1320, 1985, 1000, 1997, 474, 1185, 1776, 32, 973,
	29, 426, 1016, 974, 1778, 182, 1924, 70, 1963, 2153,
	2133, 564, 1967, 1969, 497, 1687, 734, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 458, 22, 1982, 475, 1964, 1976,
	998, 427, 992, 428, 1287, 1990, 775, 456, 27, 406,
	406, 1681, 69, 1996, 1011, 455, 19, 453, 18, 901,
	477, 1320, 454, 17, 1679, 182, 1270, 2006, 1268, 1999,
	1266, 1991, 1992, 563, 1993, 1994, 2007, 2008, 776, 2042,
	2043, 2044, 1263, 1186, 1889, 2009, 2027, 1261, 1222, 2013,
	2015, 1005, 446, 14, 1215, 1003, 1471, 1320, 1320, 1209,
	2037, 1971, 2017, 1473, 1287, 564, 1320, 1320, 2411, 2542,
	776, 1762, 2335, 447, 15, 452, 52, 445, 51, 2334,
	1040, 21, 2033, 451, 11, 450, 45, 444, 46, 1364,
	1001, 2036, 2100, 999, 449, 7, 2201, 2031, 1627, 1320,
	1287, 1287, 1627, 2060, 448, 6, 2058, 1642, 182, 1287,
	1287, 1640, 2065, 2063, 182, 179, 891, 891, 2049, 2051,
	2052, 891, 2413, 182, 182, 1415, 2061, 406, 1643, 2092,
	997, 476, 991, 2193, 1415, 2066, 1659, 1763, 22, 1651,
	1286, 2122, 1287, 443, 5, 1647, 2093, 2129, 1247, 900,
	1881, 27, 1583, 1584, 406, 2447, 406, 1041, 406, 19,
	2291, 18, 1255, 2112, 2091, 990, 17, 2096, 2163, 468,
	182, 2169, 182, 2127, 2166, 118, 2425, 2114, 2118, 2257,
	182, 2109, 2145, 889, 2115, 1044, 479, 2160, 1653, 2180,
	1645, 2165, 2146, 2177, 2474, 2144, 14, 2168, 182, 182,
	742, 2130, 516, 179, 2137, 2161, 2320, 1694, 2195, 2161,
	1682, 179, 776, 1678, 516, 2161, 182, 15, 2187, 52,
	743, 51, 2158, 2198, 1588, 182, 1336, 11, 2186, 45,
	774, 46, 490, 1180, 775, 2175, 1286, 1286, 7, 616,
	516, 1279, 2189, 1319, 2547, 516, 2190, 2560, 6, 2363,
	179, 516, 1322, 516, 2188, 516, 2196, 516, 2197, 516,
	2154, 2181, 2156, 2191, 1320, 1050, 1051, 182, 2214, 1888,
	1383, 2262, 2202, 1050, 1051, 2227, 516, 516, 1827, 1828,
	1319, 1050, 1051, 2203, 405, 1741, 1740, 5, 1053, 2219,
	2105, 2053, 1184, 1741, 2003, 1905, 1873, 744, 1742, 1404,
	1582, 1579, 516, 1578, 1509, 1114, 2045, 1287, 1124, 1122,
	1024, 1015, 1052, 1010, 1007, 1187, 993, 774, 182, 182,
	1052, 890, 890, 959, 182, 1339, 568, 182, 2377, 471,
	1372, 1182, 994, 1319, 1901, 1607, 2239, 774, 182, 182,
	1185, 2468, 182, 182, 182, 2233, 1813, 2430, 1322, 1322,
	2347, 2260, 1518, 1125, 49, 1183, 2142, 890, 620, 182,
	2273, 2136, 1673, 2267, 182, 2266, 182, 2263, 182, 182,
	182, 1672, 777, 2292, 1348, 182, 2259, 642, 182, 1534,
	2261, 889, 752, 2296, 2271, 1416, 716, 644, 1284, 182,
	182, 645, 2295, 1319, 2258, 1285, 1155, 889, 1551, 632,
	1282, 929, 2145, 1698, 1352, 1482, 1499, 1796, 761, 765,
	1118, 771, 2146, 2318, 2313, 2144, 612, 1186, 624, 623,
	497, 2316, 734, 1497, 953, 864, 1906, 2321, 2319, 1319,
	1319, 2145, 2326, 1979, 2328, 1400, 406, 2145, 1319, 1319,
	776, 2146, 2325, 1753, 2144, 1397, 2327, 2146, 1619, 1975,
	2144, 2152, 406, 413, 1824, 406, 927, 1557, 1549, 1632,
	1545, 1029, 2332, 406, 2346, 2341, 1178, 1104, 1699, 406,
	2215, 1319, 980, 1986, 1723, 1170, 406, 1408, 741, 740,
	1342, 1662, 1320, 182, 2359, 182, 1735, 774, 182, 1669,
	1097, 1096, 727, 2439, 2331, 971, 182, 864, 970, 1922,
	2555, 2446, 774, 2149, 2484, 139, 136, 2353, 406, 138,
	1702, 137, 516, 1951, 73, 516, 31, 516, 2360, 406,
	406, 2385, 1708, 2365, 2362, 1287, 30, 891, 891, 93,
	2380, 92, 1632, 182, 91, 2396, 889, 90, 89, 2381,
	182, 1320, 2383, 2145, 1234, 88, 87, 86, 182, 182,
	889, 889, 85, 2146, 84, 83, 2144, 2251, 82, 81,
	80, 2399, 2402, 891, 2412, 79, 78, 2410, 182, 77,
	76, 2409, 2145, 182, 75, 2420, 512, 2264, 2419, 2161,
	182, 2408, 2146, 2424, 1287, 2144, 2414, 2421, 2422, 2441,
	509, 1320, 72, 71, 28, 24, 97, 23, 68, 2435,
	2433, 2436, 67, 26, 16, 182, 182, 10, 20, 2391,
	122, 182, 121, 890, 120, 2443, 2427, 2456, 2454, 889,
	2405, 2444, 119, 2457, 182, 13, 12, 1746, 889, 889,
	2392, 2393, 2450, 117, 1287, 116, 1319, 115, 114, 2460,
	113, 9, 8, 406, 406, 406, 589, 406, 96, 1321,
	1179, 182, 2471, 182, 2459, 42, 182, 41, 774, 95,
	775, 2465, 2466, 765, 109, 106, 406, 2491, 108, 105,
	2493, 107, 2492, 111, 771, 110, 103, 2480, 2488, 2489,
	595, 101, 560, 102, 182, 2497, 1827, 1828, 2495, 1845,
	1846, 1847, 104, 2481, 2507, 100, 99, 2509, 112, 2508,
	597, 182, 2217, 2494, 38, 2525, 37, 182, 2520, 36,
	1272, 35, 34, 2145, 2, 2530, 1, 2527, 2528, 2529,
	0, 182, 0, 2146, 0, 2524, 2144, 2367, 0, 2539,
	0, 2537, 0, 596, 0, 2543, 469, 1551, 1551, 1842,
	0, 0, 2382, 2545, 0, 1321, 1321, 775, 0, 2546,
	0, 0, 0, 0, 0, 0, 470, 2554, 2558, 2559,
	2553, 0, 0, 0, 0, 561, 0, 775, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2283, 0, 0,
	2276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2274, 0, 0, 0, 0, 2278, 0, 0, 0,
	0, 0, 0, 1833, 1283, 0, 0, 473, 765, 0,
	0, 890, 0, 1551, 1551, 1551, 2284, 0, 1286, 891,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	478, 0, 0, 0, 0, 0, 474, 0, 602, 2277,
	0, 0, 0, 0, 1848, 0, 406, 0, 0, 0,
	0, 0, 406, 406, 1319, 1286, 406, 0, 0, 0,
	0, 1619, 0, 0, 1619, 1843, 776, 0, 475, 0,
	0, 0, 1911, 562, 0, 0, 0, 0, 406, 1917,
	1918, 0, 0, 0, 1632, 0, 0, 1925, 0, 0,
	0, 477, 0, 1930, 1931, 1933, 1935, 1936, 2486, 0,
	1283, 1283, 0, 406, 621, 65, 1945, 0, 1286, 0,
	1948, 0, 0, 1319, 0, 0, 0, 775, 0, 406,
	0, 0, 1783, 1784, 2279, 0, 2280, 0, 0, 1247,
	1322, 1247, 775, 516, 0, 0, 0, 406, 0, 1844,
	0, 1974, 0, 0, 0, 0, 406, 0, 1984, 0,
	594, 0, 563, 776, 0, 406, 2282, 0, 0, 0,
	65, 0, 0, 1319, 0, 2285, 890, 1322, 1286, 1746,
	0, 0, 0, 776, 0, 0, 0, 0, 0, 0,
	890, 890, 0, 1746, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 1200, 0, 1850, 1851,
	1852, 0, 476, 0, 1286, 1286, 0, 0, 0, 0,
	0, 0, 0, 1286, 1286, 0, 0, 891, 406, 0,
	1322, 0, 0, 578, 0, 0, 1839, 1840, 1841, 0,
	590, 1551, 1551, 891, 0, 1838, 1836, 1837, 1829, 1830,
	1831, 1832, 1834, 1835, 2281, 0, 1286, 753, 65, 890,
	0, 0, 0, 0, 0, 0, 0, 479, 890, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 2055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 0, 775, 0,
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 0,
	1551, 0, 0, 1233, 868, 870, 1322, 1322, 0, 0,
	0, 39, 0, 776, 0, 1322, 1322, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 776, 0,
	765, 0, 1252, 0, 1252, 43, 0, 0, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 1619, 1322, 0,
	0, 0, 0, 0, 0, 0, 864, 1619, 0, 0,
	0, 465, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 2141, 0, 0, 0, 0, 891, 891, 0, 0,
	0, 0, 0, 952, 2162, 0, 0, 0, 2162, 956,
	466, 0, 0, 0, 2162, 0, 0, 54, 0, 128,
	55, 1286, 0, 1632, 0, 1247, 2022, 2023, 0, 0,
	0, 0, 0, 2183, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 406, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 2209,
	0, 0, 0, 0, 891, 891, 0, 0, 2211, 0,
	0, 0, 0, 0, 0, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 776, 2089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2234, 0, 0, 0, 0, 0, 1098, 1099, 1100, 1101,
	1102, 0, 0, 1322, 58, 0, 1111, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	126, 60, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 2252, 406, 0, 1321, 0, 140, 406, 0, 0,
	864, 0, 0, 467, 0, 0, 94, 0, 0, 0,
	0, 1619, 864, 0, 0, 2269, 2270, 1632, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 2141, 864, 0, 0, 0, 0, 2303, 0, 2304,
	0, 406, 2306, 2307, 0, 0, 0, 1321, 406, 0,
	0, 2312, 752, 0, 0, 0, 0, 0, 0, 1286,
	2141, 141, 864, 1669, 0, 0, 2141, 0, 752, 134,
	0, 1622, 0, 0, 0, 0, 135, 0, 0, 765,
	0, 1175, 1175, 0, 0, 765, 0, 0, 602, 0,
	0, 0, 771, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 1283, 0, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 1700, 0, 0, 578, 0, 0,
	0, 1551, 0, 0, 0, 771, 771, 0, 0, 0,
	0, 0, 0, 1321, 1321, 0, 0, 0, 1107, 1283,
	1110, 0, 1321, 1321, 0, 0, 1632, 1115, 2366, 0,
	0, 2368, 0, 0, 0, 0, 0, 0, 1286, 406,
	0, 1322, 2141, 0, 0, 1551, 1827, 1828, 0, 1845,
	1846, 1847, 0, 0, 0, 1321, 1050, 1051, 0, 0,
	0, 0, 2216, 0, 0, 0, 0, 0, 2162, 0,
	0, 2141, 1283, 0, 0, 0, 406, 0, 0, 1053,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 2209, 2209, 0, 0, 0, 0, 0, 0, 1842,
	1322, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 2432, 1551, 0, 0, 0, 1619, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 1749,
	771, 1751, 1283, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2448, 2449,
	1322, 0, 1765, 0, 406, 65, 0, 0, 0, 0,
	1196, 0, 0, 1833, 0, 0, 0, 2464, 1283, 1283,
	0, 0, 0, 1058, 0, 0, 0, 1283, 1283, 0,
	0, 0, 0, 0, 0, 0, 2350, 602, 602, 0,
	0, 0, 0, 0, 2479, 0, 864, 0, 0, 406,
	0, 0, 0, 0, 1848, 1050, 1051, 0, 0, 0,
	1283, 0, 2141, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 1843, 0, 2432, 1053, 0,
	2374, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 1398, 0, 1403,
	406, 0, 1052, 0, 0, 1410, 0, 0, 1072, 0,
	0, 0, 0, 0, 2536, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 2426, 1462, 1844,
	1464, 1465, 1466, 1467, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 1075, 1076, 1077, 1078, 1490, 0, 0,
	0, 0, 1058, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 0, 752, 752,
	0, 0, 752, 1530, 1531, 0, 0, 1547, 0, 1559,
	1561, 1566, 1569, 1570, 1571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 1073, 0, 1839, 1840, 1841, 1942,
	0, 0, 0, 0, 0, 1838, 1836, 1837, 1829, 1830,
	1831, 1832, 1834, 1835, 0, 1956, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 1188, 65, 0, 0, 0,
	0, 0, 0, 1968, 0, 0, 0, 0, 0, 0,
	0, 39, 1233, 0, 0, 0, 0, 0, 1321, 0,
	0, 1233, 40, 1079, 578, 0, 0, 578, 578, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1051, 0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0,
	0, 465, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 1094, 0, 1321, 0, 0,
	1480, 0, 0, 0, 2018, 0, 0, 0, 0, 0,
	466, 0, 0, 590, 0, 0, 1052, 54, 1110, 128,
	55, 0, 1072, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 57, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 1076, 1077,
	1078, 0, 0, 0, 0, 0, 1058, 753, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 0, 0, 0, 0, 1087, 1095,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 752, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 1283, 0, 0, 0, 65, 0, 65, 0,
	126, 60, 0, 61, 0, 0, 0, 0, 1767, 1768,
	0, 0, 0, 1084, 1773, 0, 140, 0, 65, 0,
	0, 0, 0, 467, 65, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1283, 0, 0, 142, 1792, 1079, 0, 0,
	0, 0, 1799, 0, 0, 1803, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 1700, 752, 0,
	0, 0, 1817, 0, 0, 0, 0, 0, 1088, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 1566, 1566, 1566, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1175, 0, 0, 0, 1086, 602, 0, 1064,
	1065, 1071, 1070, 1066, 1067, 1068, 1089, 0, 1063, 1061,
	1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2253, 0,
	0, 0, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 1480, 1827, 1828, 0,
	1845, 1846, 1847, 0, 0, 40, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 2305, 0, 0,
	1977, 0, 131, 0, 2310, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 47, 0, 0, 0, 0, 0,
	1842, 0, 0, 1995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 50,
	0, 602, 602, 53, 0, 0, 132, 0, 0, 0,
	54, 0, 128, 55, 602, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 2016, 0, 0, 0,
	0, 1410, 0, 0, 0, 56, 0, 2020, 0, 0,
	2021, 0, 0, 0, 1833, 0, 57, 0, 0, 0,
	0, 0, 2026, 0, 0, 0, 0, 753, 0, 0,
	0, 2034, 0, 753, 753, 0, 0, 753, 0, 2038,
	0, 0, 1995, 0, 0, 0, 0, 0, 1827, 1828,
	0, 1845, 1846, 1847, 0, 2375, 0, 0, 0, 0,
	0, 0, 2062, 0, 2029, 0, 2064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1843, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 2407, 0, 0, 0, 0, 58, 0, 2094,
	2095, 1842, 0, 59, 0, 0, 0, 0, 2101, 2102,
	2103, 0, 0, 65, 0, 0, 0, 65, 0, 0,
	0, 0, 66, 126, 60, 0, 61, 590, 62, 0,
	133, 0, 0, 0, 0, 63, 0, 2117, 0, 140,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 94,
	1844, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 1833, 0, 2138, 142, 0,
	2453, 0, 0, 0, 0, 0, 1050, 1051, 0, 1080,
	1081, 1082, 1090, 1091, 1092, 0, 0, 98, 0, 0,
	0, 0, 1083, 0, 0, 0, 127, 0, 0, 1053,
	0, 0, 1094, 0, 141, 0, 1848, 0, 0, 0,
	0, 0, 134, 0, 0, 2483, 0, 0, 0, 135,
	0, 1175, 0, 1052, 0, 0, 0, 1843, 0, 1072,
	602, 0, 0, 0, 0, 0, 1069, 1839, 1840, 1841,
	0, 0, 125, 0, 0, 4, 1838, 1836, 1837, 1829,
	1830, 1831, 1832, 1834, 1835, 1050, 1051, 0, 0, 0,
	0, 1090, 1091, 1092, 0, 2218, 1700, 0, 0, 2221,
	2222, 0, 0, 2224, 0, 0, 0, 0, 1053, 0,
	2226, 1094, 2228, 0, 1075, 1076, 1077, 1078, 0, 0,
	0, 1827, 1828, 1058, 1845, 1846, 1847, 0, 2235, 0,
	0, 1844, 1052, 0, 0, 0, 0, 2028, 1072, 0,
	0, 0, 0, 0, 0, 1087, 1095, 65, 0, 0,
	0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090, 1091,
	1092, 2244, 753, 0, 1093, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1842, 1053, 0, 0, 1094, 1085,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 1075, 1076, 1077, 1078, 0, 0, 1052,
	0, 0, 1058, 0, 0, 1072, 0, 0, 0, 0,
	1084, 0, 1069, 0, 2293, 0, 0, 0, 1839, 1840,
	1841, 0, 0, 0, 1087, 1095, 0, 1838, 1836, 1837,
	1829, 1830, 1831, 1832, 1834, 1835, 0, 0, 1833, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 1085, 1074,
	1075, 1076, 1077, 1078, 1073, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 1848,
	0, 0, 0, 0, 0, 0, 0, 2342, 2343, 0,
	0, 1087, 1095, 0, 0, 0, 0, 0, 0, 0,
	1843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 2355, 0,
	0, 0, 0, 1079, 0, 1085, 0, 2358, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 1086, 0, 0, 1064, 1065, 1071, 1070,
	1066, 1067, 1068, 1089, 1088, 1063, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 0, 0, 0, 0, 0,
	0, 2390, 1868, 0, 1844, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 0, 2438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 1839, 1840, 1841, 0, 0, 0, 0, 0, 0,
	1838, 1836, 1837, 1829, 1830, 1831, 1832, 1834, 1835, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 1086,
	0, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089,
	0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2506, 2506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 2506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 779, 186, 780, 781, 782, 783, 343,
	784, 785, 786, 787, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 788, 191, 350, 351, 192, 193,
	789, 790, 352, 353, 354, 791, 194, 355, 792, 778,
	793, 195, 196, 197, 0, 199, 200, 201, 198, 794,
	202, 1110, 203, 204, 795, 702, 205, 206, 207, 796,
	797, 799, 798, 800, 801, 802, 208, 209, 407, 210,
	356, 211, 357, 358, 803, 212, 804, 213, 805, 214,
	806, 807, 215, 216, 808, 217, 809, 0, 810, 359,
	218, 220, 219, 221, 360, 361, 811, 703, 812, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	813, 225, 814, 815, 704, 816, 226, 365, 817, 366,
	818, 0, 227, 228, 0, 0, 229, 230, 367, 368,
	706, 819, 369, 234, 820, 231, 821, 705, 232, 370,
	233, 371, 372, 373, 374, 375, 822, 376, 823, 707,
	235, 236, 237, 708, 238, 239, 240, 824, 242, 241,
	825, 377, 709, 243, 710, 826, 244, 827, 828, 245,
	0, 246, 247, 248, 250, 378, 249, 711, 251, 252,
	254, 253, 829, 830, 831, 379, 255, 380, 256, 257,
	832, 258, 833, 834, 259, 835, 836, 260, 381, 712,
	261, 713, 382, 262, 263, 264, 265, 266, 837, 267,
	383, 268, 384, 269, 838, 270, 271, 272, 273, 274,
	385, 275, 276, 839, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 840, 289, 714,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 841,
	301, 387, 300, 302, 303, 842, 304, 293, 294, 305,
	715, 306, 388, 389, 307, 843, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 844, 315, 845, 316,
	317, 318, 319, 320, 321, 322, 846, 392, 393, 394,
	847, 848, 323, 324, 395, 396, 849, 325, 326, 327,
	328, 850, 851, 329, 330, 331, 332, 852, 333, 853,
	397, 334, 335, 336, 398, 399, 854, 855, 337, 856,
	857, 858, 859, 338, 339, 340, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 773, 0, 0, 0, 0, 0,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	184, 185, 779, 186, 780, 781, 782, 783, 343, 784,
	785, 786, 787, 187, 188, 189, 344, 345, 346, 347,
	190, 348, 349, 788, 191, 350, 351, 192, 193, 789,
	790, 352, 353, 354, 791, 194, 355, 792, 778, 793,
	195, 196, 197, 0, 199, 200, 201, 198, 794, 202,
	0, 203, 204, 795, 702, 205, 206, 207, 796, 797,
	799, 798, 800, 801, 802, 208, 209, 407, 210, 356,
	211, 357, 358, 803, 212, 804, 213, 805, 214, 806,
	807, 215, 216, 808, 217, 809, 0, 810, 359, 218,
	220, 219, 221, 360, 361, 811, 703, 812, 0, 0,
	0, 0, 222, 223, 362, 363, 364, 0, 224, 813,
	225, 814, 815, 704, 816, 226, 365, 817, 366, 818,
	0, 227, 228, 0, 0, 229, 230, 367, 368, 706,
	819, 369, 234, 820, 231, 821, 705, 232, 370, 233,
	371, 372, 373, 374, 375, 822, 376, 823, 707, 235,
	236, 237, 708, 238, 239, 240, 824, 242, 241, 825,
	377, 709, 243, 710, 826, 244, 827, 828, 245, 0,
	246, 247, 248, 250, 378, 249, 711, 251, 252, 254,
	253, 829, 830, 831, 379, 255, 380, 256, 257, 832,
	258, 833, 834, 259, 835, 836, 260, 381, 712, 261,
	713, 382, 262, 263, 264, 265, 266, 837, 267, 383,
	268, 384, 269, 838, 270, 271, 272, 273, 274, 385,
	275, 276, 839, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 840, 289, 714, 290,
	291, 386, 292, 0, 296, 297, 298, 299, 841, 301,
	387, 300, 302, 303, 842, 304, 293, 294, 305, 715,
	306, 388, 389, 307, 843, 314, 308, 309, 295, 310,
	313, 390, 311, 312, 391, 844, 315, 845, 316, 317,
	318, 319, 320, 321, 322, 846, 392, 393, 394, 847,
	848, 323, 324, 395, 396, 849, 325, 326, 327, 328,
	850, 851, 329, 330, 331, 332, 852, 333, 853, 397,
	334, 335, 336, 398, 399, 854, 855, 337, 856, 857,
	858, 859, 338, 339, 340, 341, 342, 0, 0, 0,
	0, 0, 0, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2265,
	184, 185, 779, 186, 780, 781, 782, 783, 343, 784,
	785, 786, 787, 187, 188, 189, 344, 345, 346, 347,
	190, 348, 349, 788, 191, 350, 351, 192, 193, 789,
	790, 352, 353, 354, 791, 194, 355, 792, 778, 793,
	195, 196, 197, 0, 199, 200, 201, 198, 794, 202,
	0, 203, 204, 795, 702, 205, 206, 207, 796, 797,
	799, 798, 800, 801, 802, 208, 209, 407, 210, 356,
	211, 357, 358, 803, 212, 804, 213, 805, 214, 806,
	807, 215, 216, 808, 217, 809, 0, 810, 359, 218,
	220, 219, 221, 360, 361, 811, 703, 812, 0, 0,
	0, 0, 222, 223, 362, 363, 364, 0, 224, 813,
	225, 814, 815, 704, 816, 226, 365, 817, 366, 818,
	0, 227, 228, 0, 0, 229, 230, 367, 368, 706,
	819, 369, 234, 820, 231, 821, 705, 232, 370, 233,
	371, 372, 373, 374, 375, 822, 376, 823, 707, 235,
	236, 237, 708, 238, 239, 240, 824, 242, 241, 825,
	377, 709, 243, 710, 826, 244, 827, 828, 245, 0,
	246, 247, 248, 250, 378, 249, 711, 251, 252, 254,
	253, 829, 830, 831, 379, 255, 380, 256, 257, 832,
	258, 833, 834, 259, 835, 836, 260, 381, 712, 261,
	713, 382, 262, 263, 264, 265, 266, 837, 267, 383,
	268, 384, 269, 838, 270, 271, 272, 273, 274, 385,
	275, 276, 839, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 840, 289, 714, 290,
	291, 386, 292, 0, 296, 297, 298, 299, 841, 301,
	387, 300, 302, 303, 842, 304, 293, 294, 305, 715,
	306, 388, 389, 307, 843, 314, 308, 309, 295, 310,
	313, 390, 311, 312, 391, 844, 315, 845, 316, 317,
	318, 319, 320, 321, 322, 846, 392, 393, 394, 847,
	848, 323, 324, 395, 396, 849, 325, 326, 327, 328,
	850, 851, 329, 330, 331, 332, 852, 333, 853, 397,
	334, 335, 336, 398, 399, 854, 855, 337, 856, 857,
	858, 859, 338, 339, 340, 341, 342, 0, 0, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1229, 184, 185, 779, 186, 780,
	781, 782, 783, 343, 784, 785, 786, 787, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 788, 191,
	350, 351, 192, 193, 789, 790, 352, 353, 354, 791,
	194, 355, 792, 778, 793, 195, 196, 197, 0, 199,
	200, 201, 198, 794, 202, 0, 203, 204, 795, 702,
	205, 206, 207, 796, 797, 799, 798, 800, 801, 802,
	208, 209, 407, 210, 356, 211, 357, 358, 803, 212,
	804, 213, 805, 214, 806, 807, 215, 216, 808, 217,
	809, 0, 810, 359, 218, 220, 219, 221, 360, 361,
	811, 703, 812, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 813, 225, 814, 815, 704, 816,
	226, 365, 817, 366, 818, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 706, 819, 369, 234, 820, 231,
	821, 705, 232, 370, 233, 371, 372, 373, 374, 375,
	822, 376, 823, 707, 235, 236, 237, 708, 238, 239,
	240, 824, 242, 241, 825, 377, 709, 243, 710, 826,
	244, 827, 828, 245, 0, 246, 247, 248, 250, 378,
	249, 711, 251, 252, 254, 253, 829, 830, 831, 379,
	255, 380, 256, 257, 832, 258, 833, 834, 259, 835,
	836, 260, 381, 712, 261, 713, 382, 262, 263, 264,
	265, 266, 837, 267, 383, 268, 384, 269, 838, 270,
	271, 272, 273, 274, 385, 275, 276, 839, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 840, 289, 714, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 841, 301, 387, 300, 302, 303, 842,
	304, 293, 294, 305, 715, 306, 388, 389, 307, 843,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	844, 315, 845, 316, 317, 318, 319, 320, 321, 322,
	846, 392, 393, 394, 847, 848, 323, 324, 395, 396,
	849, 325, 326, 327, 328, 850, 851, 329, 330, 331,
	332, 852, 333, 853, 397, 334, 335, 336, 398, 399,
	854, 855, 337, 856, 857, 858, 859, 338, 339, 340,
	341, 342, 1508, 0, 640, 629, 630, 627, 628, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 1505, 186, 0, 0, 0, 0, 657, 622,
	0, 0, 0, 187, 188, 189, 344, 672, 346, 673,
	190, 674, 675, 0, 191, 350, 351, 192, 193, 625,
	656, 676, 677, 354, 0, 194, 668, 0, 648, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 702, 205, 206, 207, 0, 649,
	650, 652, 0, 651, 653, 208, 209, 407, 210, 678,
	211, 679, 680, 0, 212, 0, 213, 0, 214, 1506,
	0, 671, 216, 0, 217, 0, 0, 0, 613, 218,
	220, 219, 221, 658, 659, 636, 703, 0, 0, 0,
	0, 0, 222, 223, 681, 682, 683, 0, 224, 0,
	225, 0, 0, 704, 0, 226, 669, 0, 366, 0,
	0, 227, 228, 0, 0, 229, 230, 665, 667, 706,
	0, 369, 234, 0, 231, 0, 705, 232, 684, 233,
	685, 686, 687, 688, 689, 0, 647, 0, 707, 235,
	236, 237, 708, 238, 239, 240, 0, 242, 241, 0,
	670, 709, 243, 710, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 378, 249, 711, 251, 252, 254,
	253, 608, 0, 637, 666, 255, 690, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 381, 712, 261,
	713, 660, 262, 263, 264, 265, 266, 0, 267, 661,
	268, 384, 269, 0, 270, 271, 272, 273, 274, 691,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 714, 290,
	291, 614, 292, 0, 296, 297, 298, 299, 0, 301,
	387, 300, 302, 303, 654, 304, 293, 294, 305, 715,
	306, 692, 389, 307, 0, 314, 308, 309, 295, 310,
	313, 693, 311, 312, 662, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 0, 392, 694, 695, 0,
	0, 323, 324, 663, 664, 635, 325, 326, 327, 328,
	0, 0, 329, 330, 331, 332, 655, 333, 0, 397,
	334, 335, 336, 398, 696, 1504, 0, 337, 0, 0,
	0, 0, 338, 339, 340, 341, 342, 609, 0, 640,
	629, 630, 627, 628, 619, 0, 0, 607, 0, 0,
	0, 0, 605, 606, 1507, 184, 185, 0, 186, 0,
	0, 615, 1502, 657, 622, 0, 0, 618, 187, 188,
	189, 344, 672, 346, 673, 190, 674, 675, 0, 191,
	350, 351, 192, 193, 625, 656, 676, 677, 354, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 407, 210, 678, 211, 679, 680, 603, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 613, 218, 220, 219, 221, 658, 659,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 665, 667, 706, 0, 369, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 711, 251, 252, 254, 253, 608, 0, 637, 666,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 614, 292, 0, 296,
	297, 298, 299, 140, 301, 387, 300, 302, 303, 654,
	304, 293, 294, 305, 715, 306, 692, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 693, 311, 312, 662,
	0, 315, 142, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 694, 695, 0, 0, 323, 324, 663, 664,
	635, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 655, 333, 0, 397, 334, 335, 336, 933, 696,
	0, 0, 337, 0, 0, 0, 134, 338, 339, 340,
	341, 342, 609, 135, 591, 0, 640, 629, 630, 627,
	628, 619, 607, 0, 0, 0, 0, 605, 606, 0,
	0, 0, 184, 185, 0, 186, 1113, 0, 0, 0,
	657, 622, 618, 0, 0, 187, 188, 189, 344, 672,
	346, 673, 190, 674, 675, 0, 191, 350, 351, 192,
	193, 625, 656, 676, 677, 354, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 407,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 608, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	140, 301, 387, 300, 302, 303, 654, 304, 293, 294,
	305, 715, 306, 692, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 693, 311, 312, 662, 0, 315, 142,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 694,
	695, 0, 0, 323, 324, 663, 664, 635, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 655, 333,
	0, 397, 334, 335, 336, 933, 696, 0, 0, 337,
	0, 0, 0, 134, 338, 339, 340, 341, 342, 609,
	135, 640, 629, 630, 627, 628, 619, 0, 0, 607,
	0, 0, 0, 0, 605, 606, 0, 184, 185, 0,
	186, 0, 0, 1113, 0, 657, 622, 0, 0, 618,
	187, 188, 189, 344, 672, 346, 673, 190, 674, 675,
	0, 191, 350, 351, 192, 193, 625, 656, 676, 677,
	354, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 407, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 140, 301, 387, 300, 302,
	303, 654, 304, 293, 294, 305, 715, 306, 692, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 693, 311,
	312, 662, 0, 315, 142, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 694, 695, 0, 0, 323, 324,
	663, 664, 635, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 655, 333, 0, 397, 334, 335, 336,
	933, 696, 0, 0, 337, 0, 0, 0, 134, 338,
	339, 340, 341, 342, 609, 135, 640, 629, 630, 627,
	628, 619, 0, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 184, 185, 0, 186, 0, 0, 1113, 0,
	657, 622, 0, 0, 618, 187, 188, 189, 344, 672,
	346, 673, 190, 674, 675, 1562, 191, 350, 351, 192,
	193, 625, 656, 676, 677, 354, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 407,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 1567, 704, 0, 226, 669, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 1563, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 608, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 654, 304, 293, 294,
	305, 715, 306, 692, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 693, 311, 312, 662, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 694,
	695, 0, 1564, 323, 324, 663, 664, 635, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 655, 333,
	0, 397, 334, 335, 336, 398, 696, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 609,
	599, 0, 640, 629, 630, 627, 628, 619, 0, 607,
	0, 0, 0, 0, 605, 606, 0, 0, 184, 185,
	0, 186, 0, 615, 0, 0, 657, 622, 0, 618,
	0, 187, 188, 189, 344, 672, 346, 673, 190, 674,
	675, 0, 191, 350, 351, 192, 193, 625, 656, 676,
	677, 354, 0, 194, 668, 0, 648, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 649, 650, 652,
	0, 651, 653, 208, 209, 407, 210, 678, 211, 679,
	680, 603, 212, 0, 213, 0, 214, 0, 0, 671,
	216, 0, 217, 0, 0, 0, 613, 218, 220, 219,
	221, 658, 659, 636, 703, 0, 0, 0, 0, 0,
	222, 223, 681, 682, 683, 0, 224, 0, 225, 0,
	0, 704, 0, 226, 669, 0, 366, 0, 0, 227,
	228, 0, 0, 229, 230, 665, 667, 706, 0, 369,
	234, 0, 231, 0, 705, 232, 684, 233, 685, 686,
	687, 688, 689, 0, 647, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 670, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 378, 249, 711, 251, 252, 254, 253, 608,
	0, 637, 666, 255, 690, 256, 257, 0, 258, 601,
	0, 259, 0, 0, 260, 381, 712, 261, 713, 660,
	262, 263, 264, 265, 266, 0, 267, 661, 268, 384,
	269, 0, 270, 271, 272, 273, 274, 691, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 614,
	292, 0, 296, 297, 298, 299, 0, 301, 387, 300,
	302, 303, 654, 304, 293, 294, 305, 715, 306, 692,
	389, 307, 0, 314, 308, 309, 295, 310, 313, 693,
	311, 312, 662, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 392, 694, 695, 0, 0, 323,
	324, 663, 664, 635, 325, 326, 327, 328, 0, 0,
	329, 330, 331, 332, 655, 333, 0, 397, 334, 335,
	336, 398, 696, 0, 0, 337, 0, 0, 0, 0,
	338, 339, 340, 341, 342, 609, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 607, 0, 0, 0, 0,
	605, 606, 0, 184, 185, 0, 186, 0, 0, 615,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 344,
	672, 346, 673, 190, 674, 675, 0, 191, 350, 351,
	192, 193, 625, 656, 676, 677, 354, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	407, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 369, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 711,
	251, 252, 254, 253, 608, 2192, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 654, 304, 293,
	294, 305, 715, 306, 692, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 693, 311, 312, 662, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	694, 695, 0, 0, 323, 324, 663, 664, 635, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 655,
	333, 0, 397, 334, 335, 336, 398, 696, 0, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	609, 0, 640, 629, 630, 627, 628, 619, 0, 0,
	607, 0, 0, 0, 0, 605, 606, 1176, 184, 185,
	0, 186, 0, 0, 615, 0, 657, 622, 0, 0,
	618, 187, 188, 189, 344, 672, 346, 673, 190, 674,
	675, 0, 191, 350, 351, 192, 193, 625, 656, 676,
	677, 354, 0, 194, 668, 0, 648, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 649, 650, 652,
	0, 651, 653, 208, 209, 407, 210, 678, 211, 679,
	680, 0, 212, 0, 213, 0, 214, 0, 0, 671,
	216, 0, 217, 0, 0, 0, 613, 218, 220, 219,
	221, 658, 659, 636, 703, 0, 0, 0, 0, 0,
	222, 223, 681, 682, 683, 0, 224, 0, 225, 0,
	0, 704, 0, 226, 669, 0, 366, 0, 0, 227,
	228, 0, 0, 229, 230, 665, 667, 706, 0, 369,
	234, 1412, 231, 0, 705, 232, 684, 233, 685, 686,
	687, 688, 689, 0, 647, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 670, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 378, 249, 711, 251, 252, 254, 253, 608,
	0, 637, 666, 255, 690, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 381, 712, 261, 713, 660,
	262, 263, 264, 265, 266, 0, 267, 661, 268, 384,
	269, 1411, 270, 271, 272, 273, 274, 691, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 614,
	292, 0, 296, 297, 298, 299, 0, 301, 387, 300,
	302, 303, 654, 304, 293, 294, 305, 715, 306, 692,
	389, 307, 0, 314, 308, 309, 295, 310, 313, 693,
	311, 312, 662, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 392, 694, 695, 0, 0, 323,
	324, 663, 664, 635, 325, 326, 327, 328, 0, 0,
	329, 330, 331, 332, 655, 333, 0, 397, 334, 335,
	336, 398, 696, 0, 0, 337, 0, 0, 0, 0,
	338, 339, 340, 341, 342, 609, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 607, 0, 0, 0, 0,
	605, 606, 0, 184, 185, 0, 186, 0, 0, 615,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 344,
	672, 346, 673, 190, 674, 675, 0, 191, 350, 351,
	192, 193, 625, 656, 676, 677, 354, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	407, 210, 678, 211, 679, 680, 603, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 369, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 601, 0, 259, 0, 0, 260,
	381, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 654, 304, 293,
	294, 305, 715, 306, 692, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 693, 311, 312, 662, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	694, 695, 0, 0, 323, 324, 663, 664, 635, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 655,
	333, 0, 397, 334, 335, 336, 398, 696, 0, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	609, 0, 640, 629, 630, 627, 628, 619, 0, 0,
	607, 0, 0, 0, 0, 605, 606, 0, 184, 185,
	0, 186, 0, 0, 615, 0, 657, 622, 0, 0,
	618, 187, 188, 189, 344, 672, 346, 673, 190, 674,
	675, 0, 191, 350, 351, 192, 193, 625, 656, 676,
	677, 354, 0, 194, 668, 0, 648, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 649, 650, 652,
	0, 651, 653, 208, 209, 407, 210, 678, 211, 679,
	680, 603, 212, 0, 213, 0, 214, 0, 0, 671,
	216, 0, 217, 0, 0, 0, 613, 218, 220, 219,
	221, 658, 659, 636, 703, 0, 0, 0, 0, 0,
	222, 223, 681, 682, 683, 0, 224, 0, 225, 0,
	0, 704, 0, 226, 669, 0, 366, 0, 0, 227,
	228, 0, 0, 229, 230, 665, 667, 706, 0, 369,
	234, 0, 231, 0, 705, 232, 684, 233, 685, 686,
	687, 688, 689, 0, 647, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 670, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 378, 249, 711, 251, 252, 254, 253, 608,
	0, 637, 666, 255, 690, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 381, 712, 261, 713, 660,
	262, 263, 264, 265, 266, 0, 267, 661, 268, 384,
	269, 0, 270, 271, 272, 273, 274, 691, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 614,
	292, 0, 296, 297, 298, 299, 0, 301, 387, 300,
	302, 303, 654, 304, 293, 294, 305, 715, 306, 692,
	389, 307, 0, 314, 308, 309, 295, 310, 313, 693,
	311, 312, 662, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 392, 694, 695, 0, 0, 323,
	324, 663, 664, 635, 325, 326, 327, 328, 0, 0,
	329, 330, 331, 332, 655, 333, 0, 397, 334, 335,
	336, 398, 696, 0, 0, 337, 0, 0, 0, 0,
	338, 339, 340, 341, 342, 609, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 607, 0, 0, 0, 0,
	605, 606, 0, 184, 185, 0, 186, 0, 0, 615,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 344,
	672, 346, 673, 190, 674, 675, 0, 191, 350, 351,
	192, 193, 625, 656, 676, 677, 354, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	407, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 369, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 654, 304, 293,
	294, 305, 715, 306, 692, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 693, 311, 312, 662, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	694, 695, 0, 0, 323, 324, 663, 664, 635, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 655,
	333, 0, 397, 334, 335, 336, 398, 696, 2041, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	609, 0, 640, 629, 630, 627, 628, 619, 0, 0,
	607, 0, 0, 0, 0, 605, 606, 0, 184, 185,
	0, 186, 0, 0, 615, 0, 657, 622, 0, 0,
	618, 187, 188, 189, 344, 672, 346, 673, 190, 674,
	675, 0, 191, 350, 351, 192, 193, 625, 656, 676,
	677, 354, 0, 194, 668, 0, 648, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 649, 650, 652,
	0, 651, 653, 208, 209, 407, 210, 678, 211, 679,
	680, 0, 212, 0, 213, 0, 214, 0, 0, 671,
	216, 0, 217, 0, 0, 0, 613, 218, 220, 219,
	221, 658, 659, 636, 703, 0, 0, 0, 0, 0,
	222, 223, 681, 682, 683, 0, 224, 0, 225, 0,
	0, 704, 0, 226, 669, 0, 366, 0, 0, 227,
	228, 0, 0, 229, 230, 665, 667, 706, 0, 369,
	234, 0, 231, 0, 705, 232, 684, 233, 685, 686,
	687, 688, 689, 0, 647, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 670, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 378, 249, 711, 251, 252, 254, 253, 608,
	0, 637, 666, 255, 690, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 381, 712, 261, 713, 660,
	262, 263, 264, 265, 266, 0, 267, 661, 268, 384,
	269, 0, 270, 271, 272, 273, 274, 691, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 614,
	292, 0, 296, 297, 298, 299, 0, 301, 387, 300,
	302, 303, 654, 304, 293, 294, 305, 715, 306, 692,
	389, 307, 0, 314, 308, 309, 295, 310, 313, 693,
	311, 312, 662, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 392, 694, 695, 0, 0, 323,
	324, 663, 664, 635, 325, 326, 327, 328, 0, 0,
	329, 330, 331, 332, 655, 333, 0, 397, 334, 335,
	336, 398, 696, 0, 0, 337, 0, 0, 0, 0,
	338, 339, 340, 341, 342, 609, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 607, 0, 0, 0, 0,
	605, 606, 1176, 184, 185, 0, 186, 0, 0, 615,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 344,
	672, 346, 673, 190, 674, 675, 0, 191, 350, 351,
	192, 193, 625, 656, 676, 677, 354, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	407, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 1567, 704, 0, 226, 669,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 369, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 654, 304, 293,
	294, 305, 715, 306, 692, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 693, 311, 312, 662, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	694, 695, 0, 0, 323, 324, 663, 664, 635, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 655,
	333, 0, 397, 334, 335, 336, 398, 696, 0, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	609, 1615, 0, 640, 629, 630, 627, 628, 619, 0,
	607, 0, 0, 0, 0, 605, 606, 0, 0, 184,
	185, 0, 186, 0, 615, 0, 0, 657, 622, 0,
	618, 0, 187, 188, 189, 344, 672, 346, 673, 190,
	674, 675, 0, 191, 350, 351, 192, 193, 625, 656,
	676, 677, 354, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 207, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 407, 210, 678, 211,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 366, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 706, 0,
	369, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 378, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 381, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 0, 301, 387,
	300, 302, 303, 654, 304, 293, 294, 305, 715, 306,
	692, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	693, 311, 312, 662, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 694, 695, 0, 0,
	323, 324, 663, 664, 635, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 655, 333, 0, 397, 334,
	335, 336, 398, 696, 0, 0, 337, 0, 0, 0,
	0, 338, 339, 340, 341, 342, 609, 1576, 0, 640,
	629, 630, 627, 628, 619, 0, 607, 0, 0, 0,
	0, 605, 606, 0, 0, 184, 185, 0, 186, 0,
	615, 0, 0, 657, 622, 0, 618, 0, 187, 188,
	189, 344, 672, 346, 673, 190, 674, 675, 0, 191,
	350, 351, 192, 193, 625, 656, 676, 677, 354, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 407, 210, 678, 211, 679, 680, 0, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 613, 218, 220, 219, 221, 658, 659,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 665, 667, 706, 0, 369, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 711, 251, 252, 254, 253, 608, 0, 637, 666,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 614, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 654,
	304, 293, 294, 305, 715, 306, 692, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 693, 311, 312, 662,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 694, 695, 0, 0, 323, 324, 663, 664,
	635, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 655, 333, 0, 397, 334, 335, 336, 398, 696,
	0, 0, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 609, 1574, 0, 640, 629, 630, 627, 628,
	619, 0, 607, 0, 0, 0, 0, 605, 606, 0,
	0, 184, 185, 0, 186, 0, 615, 0, 0, 657,
	622, 0, 618, 0, 187, 188, 189, 344, 672, 346,
	673, 190, 674, 675, 0, 191, 350, 351, 192, 193,
	625, 656, 676, 677, 354, 0, 194, 668, 0, 648,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 702, 205, 206, 207, 0,
	649, 650, 652, 0, 651, 653, 208, 209, 407, 210,
	678, 211, 679, 680, 0, 212, 0, 213, 0, 214,
	0, 0, 671, 216, 0, 217, 0, 0, 0, 613,
	218, 220, 219, 221, 658, 659, 636, 703, 0, 0,
	0, 0, 0, 222, 223, 681, 682, 683, 0, 224,
	0, 225, 0, 0, 704, 0, 226, 669, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 665, 667,
	706, 0, 369, 234, 0, 231, 0, 705, 232, 684,
	233, 685, 686, 687, 688, 689, 0, 647, 0, 707,
	235, 236, 237, 708, 238, 239, 240, 0, 242, 241,
	0, 670, 709, 243, 710, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 711, 251, 252,
	254, 253, 608, 0, 637, 666, 255, 690, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 712,
	261, 713, 660, 262, 263, 264, 265, 266, 0, 267,
	661, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	691, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 714,
	290, 291, 614, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 654, 304, 293, 294, 305,
	715, 306, 692, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 693, 311, 312, 662, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 694, 695,
	0, 0, 323, 324, 663, 664, 635, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 655, 333, 0,
	397, 334, 335, 336, 398, 696, 0, 0, 337, 0,
	0, 0, 0, 338, 339, 340, 341, 342, 609, 1558,
	0, 640, 629, 630, 627, 628, 619, 0, 607, 0,
	0, 0, 0, 605, 606, 0, 0, 184, 185, 0,
	186, 0, 615, 0, 0, 657, 622, 0, 618, 0,
	187, 188, 189, 344, 672, 346, 673, 190, 674, 675,
	0, 191, 350, 351, 192, 193, 625, 656, 676, 677,
	354, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 407, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 654, 304, 293, 294, 305, 715, 306, 692, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 693, 311,
	312, 662, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 694, 695, 0, 0, 323, 324,
	663, 664, 635, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 655, 333, 0, 397, 334, 335, 336,
	398, 696, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 609, 1546, 0, 640, 629, 630,
	627, 628, 619, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 0, 184, 185, 0, 186, 0, 615, 0,
	0, 657, 622, 0, 618, 0, 187, 188, 189, 344,
	672, 346, 673, 190, 674, 675, 0, 191, 350, 351,
	192, 193, 625, 656, 676, 677, 354, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	407, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 369, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 654, 304, 293,
	294, 305, 715, 306, 692, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 693, 311, 312, 662, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	694, 695, 0, 0, 323, 324, 663, 664, 635, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 655,
	333, 0, 397, 334, 335, 336, 398, 696, 0, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	609, 1544, 0, 1536, 629, 630, 627, 628, 619, 0,
	607, 0, 0, 0, 0, 605, 606, 0, 0, 184,
	185, 0, 186, 0, 615, 0, 0, 657, 622, 0,
	618, 0, 187, 188, 189, 344, 672, 346, 673, 190,
	674, 675, 0, 191, 350, 351, 192, 193, 625, 656,
	676, 677, 354, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 207, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 407, 210, 678, 1539,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 366, 0, 0,
	227, 1540, 0, 0, 229, 230, 665, 667, 706, 0,
	369, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	1541, 1538, 250, 378, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 381, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 1542, 0, 301, 387,
	300, 302, 303, 654, 304, 293, 294, 305, 715, 306,
	692, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	693, 311, 312, 662, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 694, 695, 0, 0,
	323, 324, 663, 664, 635, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 655, 333, 0, 397, 334,
	335, 336, 398, 696, 0, 0, 337, 0, 0, 0,
	0, 338, 339, 340, 1537, 342, 609, 1533, 0, 1536,
	629, 630, 627, 628, 619, 0, 607, 0, 0, 0,
	0, 605, 606, 0, 0, 184, 185, 0, 186, 0,
	615, 0, 0, 657, 622, 0, 618, 0, 187, 188,
	189, 344, 672, 346, 673, 190, 674, 675, 0, 191,
	350, 351, 192, 193, 625, 656, 676, 677, 354, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 407, 210, 678, 1539, 679, 680, 0, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 613, 218, 220, 219, 221, 658, 659,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 366, 0, 0, 227, 1540, 0, 0,
	229, 230, 665, 667, 706, 0, 369, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 1541, 1538, 250, 378,
	249, 711, 251, 252, 254, 253, 608, 0, 637, 666,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 614, 292, 0, 296,
	297, 298, 1542, 0, 301, 387, 300, 302, 303, 654,
	304, 293, 294, 305, 715, 306, 692, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 693, 311, 312, 662,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 694, 695, 0, 0, 323, 324, 663, 664,
	635, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 655, 333, 0, 397, 334, 335, 336, 398, 696,
	0, 0, 337, 0, 0, 0, 0, 338, 339, 340,
	1537, 342, 609, 0, 640, 629, 630, 627, 628, 619,
	0, 0, 607, 0, 0, 0, 0, 605, 606, 0,
	184, 185, 0, 186, 0, 0, 615, 0, 657, 622,
	0, 0, 618, 187, 188, 189, 344, 672, 346, 673,
	190, 674, 675, 0, 191, 350, 351, 192, 193, 625,
	656, 676, 677, 354, 0, 194, 668, 0, 648, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 702, 205, 206, 207, 0, 649,
	650, 652, 0, 651, 653, 208, 209, 407, 210, 678,
	211, 679, 680, 0, 212, 0, 213, 0, 214, 0,
	0, 671, 216, 0, 217, 0, 0, 0, 613, 218,
	220, 219, 221, 658, 659, 636, 703, 0, 0, 0,
	0, 0, 222, 223, 681, 682, 683, 0, 224, 0,
	225, 0, 0, 704, 0, 226, 669, 0, 366, 0,
	0, 227, 228, 0, 0, 229, 230, 665, 667, 706,
	0, 369, 234, 0, 231, 0, 705, 232, 684, 233,
	685, 686, 687, 688, 689, 0, 647, 0, 707, 235,
	236, 237, 708, 238, 239, 240, 0, 242, 241, 0,
	670, 709, 243, 710, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 378, 249, 711, 251, 252, 254,
	253, 608, 0, 637, 666, 255, 690, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 381, 712, 261,
	713, 660, 262, 263, 264, 265, 266, 0, 267, 661,
	268, 384, 269, 0, 270, 271, 272, 273, 274, 691,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 714, 290,
	291, 614, 292, 0, 296, 297, 298, 299, 0, 301,
	387, 300, 302, 303, 654, 304, 293, 294, 305, 715,
	306, 692, 389, 307, 0, 314, 308, 309, 295, 310,
	313, 693, 311, 312, 662, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 0, 392, 694, 695, 0,
	0, 323, 324, 663, 664, 635, 325, 326, 327, 328,
	0, 0, 329, 330, 331, 332, 655, 333, 0, 397,
	334, 335, 336, 398, 696, 0, 0, 337, 0, 0,
	0, 0, 338, 339, 340, 341, 342, 609, 0, 640,
	629, 630, 627, 628, 619, 0, 0, 607, 0, 0,
	0, 0, 605, 606, 0, 184, 185, 1399, 186, 1117,
	0, 615, 0, 657, 622, 0, 0, 618, 187, 188,
	189, 344, 672, 346, 673, 190, 674, 675, 0, 191,
	350, 351, 192, 193, 625, 656, 676, 677, 354, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 407, 210, 678, 211, 679, 680, 0, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 613, 218, 220, 219, 221, 658, 659,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 665, 667, 706, 0, 369, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 711, 251, 252, 254, 253, 608, 0, 637, 666,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 614, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 654,
	304, 293, 294, 305, 715, 306, 692, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 693, 311, 312, 662,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 694, 695, 0, 0, 323, 324, 663, 664,
	635, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 655, 333, 0, 397, 334, 335, 336, 398, 696,
	0, 0, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 609, 871, 0, 640, 629, 630, 627, 628,
	619, 0, 607, 0, 0, 0, 0, 605, 606, 0,
	0, 184, 185, 0, 186, 0, 615, 0, 0, 657,
	622, 0, 618, 0, 187, 188, 189, 344, 672, 346,
	673, 190, 674, 675, 0, 191, 350, 351, 192, 193,
	625, 656, 676, 677, 354, 0, 194, 668, 0, 648,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 702, 205, 206, 207, 0,
	649, 650, 652, 0, 651, 653, 208, 209, 407, 210,
	678, 211, 679, 680, 0, 212, 0, 213, 0, 214,
	0, 0, 671, 216, 0, 217, 0, 0, 0, 613,
	218, 220, 219, 221, 658, 659, 636, 703, 0, 0,
	0, 0, 0, 222, 223, 681, 682, 683, 0, 224,
	0, 225, 0, 0, 704, 0, 226, 669, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 665, 667,
	706, 0, 369, 234, 0, 231, 0, 705, 232, 684,
	233, 685, 686, 687, 688, 689, 0, 647, 0, 707,
	235, 236, 237, 708, 238, 239, 240, 0, 242, 241,
	0, 670, 709, 243, 710, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 711, 251, 252,
	254, 253, 608, 0, 637, 666, 255, 690, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 712,
	261, 713, 660, 262, 263, 264, 265, 266, 0, 267,
	661, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	691, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 714,
	290, 291, 614, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 654, 304, 293, 294, 305,
	715, 306, 692, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 693, 311, 312, 662, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 694, 695,
	0, 0, 323, 324, 663, 664, 635, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 655, 333, 0,
	397, 334, 335, 336, 398, 696, 0, 0, 337, 0,
	0, 0, 0, 338, 339, 340, 341, 342, 609, 869,
	0, 640, 629, 630, 627, 628, 619, 0, 607, 0,
	0, 0, 0, 605, 606, 0, 0, 184, 185, 0,
	186, 0, 615, 0, 0, 657, 622, 0, 618, 0,
	187, 188, 189, 344, 672, 346, 673, 190, 674, 675,
	0, 191, 350, 351, 192, 193, 625, 656, 676, 677,
	354, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 407, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 654, 304, 293, 294, 305, 715, 306, 692, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 693, 311,
	312, 662, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 694, 695, 0, 0, 323, 324,
	663, 664, 635, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 655, 333, 0, 397, 334, 335, 336,
	398, 696, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 609, 0, 640, 629, 630, 627,
	628, 619, 0, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 184, 185, 0, 186, 0, 0, 615, 0,
	657, 622, 0, 0, 618, 187, 188, 189, 344, 672,
	346, 673, 190, 674, 675, 0, 191, 350, 351, 192,
	193, 625, 656, 676, 677, 354, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 2505,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 407,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 608, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 654, 304, 293, 294,
	305, 715, 306, 692, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 693, 311, 312, 662, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 694,
	695, 0, 0, 323, 324, 663, 664, 635, 325, 326,
	2504, 328, 0, 0, 329, 330, 331, 332, 655, 333,
	0, 397, 334, 335, 336, 398, 696, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 609,
	0, 640, 629, 630, 627, 628, 619, 0, 0, 607,
	0, 0, 0, 0, 605, 606, 0, 184, 185, 0,
	186, 0, 0, 615, 0, 657, 622, 0, 0, 618,
	187, 188, 189, 344, 672, 346, 673, 190, 674, 675,
	0, 191, 350, 351, 192, 193, 625, 656, 676, 677,
	354, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 407, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 654, 304, 293, 294, 305, 715, 306, 692, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 693, 311,
	312, 662, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 694, 695, 0, 0, 323, 324,
	663, 664, 635, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 655, 333, 0, 397, 334, 335, 336,
	398, 696, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 609, 0, 640, 629, 630, 627,
	628, 619, 0, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 184, 185, 0, 186, 0, 0, 615, 0,
	657, 622, 0, 0, 618, 187, 188, 189, 2503, 672,
	346, 673, 190, 674, 675, 0, 191, 350, 351, 192,
	193, 625, 656, 676, 677, 354, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 2505,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 407,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 608, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 654, 304, 293, 294,
	305, 715, 306, 692, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 693, 311, 312, 662, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 694,
	695, 0, 0, 323, 324, 663, 664, 635, 325, 326,
	2504, 328, 0, 0, 329, 330, 331, 332, 655, 333,
	0, 397, 334, 335, 336, 398, 696, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 609,
	0, 640, 629, 630, 627, 628, 619, 0, 0, 607,
	0, 0, 0, 0, 605, 606, 0, 184, 185, 0,
	186, 0, 0, 615, 0, 657, 622, 0, 0, 618,
	187, 188, 189, 344, 672, 346, 673, 190, 674, 675,
	0, 191, 350, 351, 192, 193, 625, 656, 676, 677,
	354, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 407, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 0, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 1556, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 654, 304, 293, 294, 305, 715, 306, 692, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 693, 311,
	312, 662, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 694, 695, 0, 0, 323, 324,
	663, 664, 635, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 655, 333, 0, 397, 334, 335, 336,
	398, 696, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 0, 640, 629, 630, 627,
	628, 619, 0, 0, 1554, 0, 0, 0, 0, 1552,
	1553, 0, 184, 185, 0, 186, 0, 0, 1555, 0,
	657, 622, 0, 0, 618, 187, 188, 189, 344, 672,
	346, 673, 190, 674, 675, 0, 191, 350, 351, 192,
	193, 0, 656, 676, 677, 354, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 407,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 0, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 1556, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 654, 304, 293, 294,
	305, 715, 306, 692, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 693, 311, 312, 662, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 694,
	695, 0, 0, 323, 324, 663, 664, 635, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 655, 333,
	0, 397, 334, 335, 336, 398, 696, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 0,
	0, 640, 629, 630, 627, 628, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 1555, 0, 657, 622, 0, 0, 618,
	187, 188, 189, 0, 672, 346, 673, 190, 674, 675,
	0, 191, 350, 351, 192, 193, 625, 656, 676, 677,
	354, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 2505, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 407, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 0, 0, 369, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 0, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 654, 304, 293, 294, 305, 0, 306, 692, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 693, 311,
	312, 662, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 694, 695, 0, 0, 323, 324,
	663, 664, 635, 325, 326, 2504, 328, 0, 0, 329,
	330, 331, 332, 655, 333, 0, 397, 334, 335, 336,
	398, 696, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	606, 0, 184, 185, 0, 186, 0, 0, 615, 0,
	657, 0, 0, 0, 618, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 656, 352, 353, 354, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 658, 659, 0, 703, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 0, 0, 0, 666, 255, 380, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 654, 304, 293, 294,
	305, 715, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 662, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 663, 664, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 655, 333,
	0, 397, 334, 335, 336, 398, 399, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 930,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 2143, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 778, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 703, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 377, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 140, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 715, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 142, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	933, 399, 0, 0, 337, 0, 0, 0, 134, 338,
	339, 340, 341, 342, 591, 135, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 125, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 194, 355, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 367,
	368, 0, 0, 369, 234, 0, 231, 0, 0, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 377, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 756, 259, 0, 0, 260, 381,
	0, 261, 0, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	140, 301, 387, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 142,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 933, 399, 0, 0, 337,
	0, 0, 0, 134, 338, 339, 340, 341, 342, 0,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 750, 0, 1198, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 756,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 140, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 142, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	933, 399, 0, 0, 337, 0, 0, 0, 134, 338,
	339, 340, 341, 342, 591, 135, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 750, 0, 1198, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 194, 355, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 367,
	368, 0, 0, 369, 234, 0, 231, 0, 0, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 377, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	0, 261, 0, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	140, 301, 387, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 142,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 933, 399, 0, 0, 337,
	0, 0, 0, 134, 338, 339, 340, 341, 342, 1887,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 125, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 756,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 749, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 750, 0, 755, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 194, 355, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 367,
	368, 0, 0, 369, 234, 0, 231, 0, 0, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 377, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 756, 259, 0, 0, 260, 381,
	0, 261, 0, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 398, 399, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 750, 0, 755, 343, 0, 0, 0, 0, 187,
	188, 189, 344, 345, 346, 347, 190, 348, 349, 0,
	191, 350, 351, 192, 193, 0, 0, 352, 353, 354,
	0, 194, 355, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 407, 210, 356, 211, 357, 358, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 359, 218, 220, 219, 221, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	362, 363, 364, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 365, 0, 366, 0, 0, 227, 228, 0,
	0, 229, 230, 367, 368, 0, 0, 369, 234, 0,
	231, 0, 0, 232, 370, 233, 371, 372, 373, 374,
	375, 0, 376, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 377, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	378, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	379, 255, 380, 256, 257, 0, 258, 0, 756, 259,
	0, 0, 260, 381, 0, 261, 0, 382, 262, 263,
	264, 265, 266, 0, 267, 383, 268, 384, 269, 0,
	270, 271, 272, 273, 274, 385, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 386, 292, 0,
	296, 297, 298, 299, 0, 301, 387, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 388, 389, 307,
	0, 314, 308, 309, 295, 310, 313, 390, 311, 312,
	391, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 0, 392, 393, 394, 0, 0, 323, 324, 395,
	396, 0, 325, 326, 327, 328, 0, 0, 329, 330,
	331, 332, 0, 333, 0, 397, 334, 335, 336, 398,
	399, 0, 0, 337, 0, 0, 0, 0, 338, 339,
	340, 341, 342, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 750, 0, 755, 343, 0,
	0, 0, 0, 187, 188, 189, 344, 345, 346, 347,
	190, 348, 349, 0, 191, 350, 351, 192, 193, 0,
	0, 352, 353, 354, 0, 194, 355, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 407, 210, 356,
	211, 357, 358, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 359, 218,
	220, 219, 221, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 362, 363, 364, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 365, 0, 366, 0,
	0, 227, 228, 0, 0, 229, 230, 367, 368, 0,
	0, 369, 234, 0, 231, 0, 0, 232, 370, 233,
	371, 372, 373, 374, 375, 0, 376, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	377, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 378, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 379, 255, 380, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 381, 0, 261,
	0, 382, 262, 263, 264, 265, 266, 0, 267, 383,
	268, 384, 269, 0, 270, 271, 272, 273, 274, 385,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 386, 292, 0, 296, 297, 298, 299, 0, 301,
	387, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 388, 389, 307, 0, 314, 308, 309, 295, 310,
	313, 390, 311, 312, 391, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 0, 392, 393, 394, 0,
	0, 323, 324, 395, 396, 0, 325, 326, 327, 328,
	0, 0, 329, 330, 331, 332, 0, 333, 0, 397,
	334, 335, 336, 398, 399, 0, 0, 337, 0, 0,
	0, 0, 338, 339, 340, 341, 342, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 343, 1231, 0, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 194, 355,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	407, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	367, 368, 0, 0, 369, 234, 0, 231, 0, 0,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 377, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 0, 261, 0, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 386, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	393, 394, 0, 0, 323, 324, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 0, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 1701, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 2056, 343,
	0, 0, 0, 0, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 0, 191, 350, 351, 192, 193,
	0, 0, 352, 353, 354, 0, 194, 355, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 407, 210,
	356, 211, 357, 358, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 359,
	218, 220, 219, 221, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 365, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 367, 368,
	0, 0, 369, 234, 0, 231, 0, 0, 232, 370,
	233, 371, 372, 373, 374, 375, 0, 376, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 377, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 379, 255, 380, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 0,
	261, 0, 382, 262, 263, 264, 265, 266, 0, 267,
	383, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	385, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 388, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 393, 394,
	0, 0, 323, 324, 395, 396, 0, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 0, 333, 0,
	397, 334, 335, 336, 398, 399, 0, 0, 337, 0,
	0, 0, 0, 338, 339, 340, 341, 342, 0, 640,
	629, 630, 627, 628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 1201, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 672, 346, 673, 190, 674, 675, 0, 191,
	350, 351, 192, 193, 0, 0, 676, 677, 354, 0,
	194, 355, 0, 778, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 678, 211, 679, 680, 0, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 706, 0, 369, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 377, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 711, 251, 252, 254, 253, 0, 0, 637, 379,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 712, 261, 713, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 715, 306, 692, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 693, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 694, 695, 0, 0, 323, 324, 395, 396,
	635, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 696,
	0, 487, 337, 181, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 343, 0, 0,
	0, 0, 187, 188, 189, 344, 345, 346, 347, 190,
	348, 349, 0, 191, 350, 351, 192, 193, 0, 0,
	352, 353, 354, 0, 194, 355, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 177, 210, 356, 211,
	357, 358, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 359, 218, 220,
	219, 221, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 362, 363, 364, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 365, 0, 366, 0, 0,
	227, 228, 0, 0, 229, 230, 367, 368, 0, 0,
	369, 234, 0, 231, 0, 0, 232, 370, 233, 371,
	372, 373, 374, 375, 0, 376, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 377,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 378, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 379, 255, 380, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 381, 0, 261, 0,
	382, 262, 263, 264, 265, 266, 0, 267, 383, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 385, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	386, 292, 0, 296, 297, 298, 299, 0, 301, 387,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	388, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	390, 311, 312, 391, 0, 315, 176, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 393, 394, 0, 0,
	323, 324, 395, 396, 0, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 0, 333, 0, 397, 334,
	335, 336, 398, 399, 0, 174, 337, 181, 0, 0,
	0, 338, 339, 340, 341, 342, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 343, 0, 180, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 194, 355,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	177, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	367, 368, 0, 0, 369, 234, 0, 231, 0, 0,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 377, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 0, 261, 0, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 386, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	176, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	393, 394, 0, 0, 323, 324, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 0, 181,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 180, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 176, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	0, 181, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 180,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 985, 0, 888, 887, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 184, 185, 0, 186, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 194, 355, 0,
	778, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 703, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 367,
	368, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 377, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 0, 304, 293, 294,
	305, 715, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 398, 399, 0, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 925,
	0, 888, 887, 0, 0, 0, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 778, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 703, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 924, 368, 706, 0, 369, 234,
	0, 231, 0, 705, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 377, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 711, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 712, 261, 713, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 715, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 883, 0, 888, 887, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 194, 355, 0,
	778, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 703, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 882,
	368, 706, 0, 369, 234, 0, 231, 0, 705, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 377, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 711, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	712, 261, 713, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 0, 304, 293, 294,
	305, 715, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 398, 399, 888, 887, 337,
	0, 0, 885, 0, 338, 339, 340, 341, 342, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 343, 0, 0, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 194, 355,
	0, 778, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	407, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 703,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	367, 368, 706, 0, 369, 234, 0, 231, 0, 705,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 377, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 711,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 712, 261, 713, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 386, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 0, 304, 293,
	294, 305, 715, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	393, 394, 0, 0, 323, 324, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 888, 887,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 187, 188, 189,
	344, 345, 346, 347, 190, 348, 349, 0, 191, 350,
	351, 192, 193, 0, 0, 352, 353, 354, 0, 194,
	355, 0, 778, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 702, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 407, 210, 356, 211, 357, 358, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 359, 218, 220, 219, 221, 360, 361, 0,
	703, 0, 0, 0, 0, 0, 222, 223, 362, 363,
	364, 0, 224, 0, 225, 0, 0, 704, 0, 226,
	365, 0, 366, 0, 0, 227, 228, 0, 0, 229,
	230, 367, 368, 706, 0, 369, 234, 0, 231, 0,
	705, 232, 370, 233, 371, 372, 373, 374, 375, 0,
	376, 0, 707, 235, 236, 237, 708, 238, 239, 240,
	0, 242, 241, 0, 377, 709, 243, 710, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 378, 249,
	711, 251, 252, 254, 253, 0, 0, 0, 379, 255,
	380, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 381, 712, 261, 713, 382, 262, 263, 264, 265,
	266, 0, 267, 383, 268, 384, 269, 0, 270, 271,
	272, 273, 274, 385, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 714, 290, 291, 386, 292, 0, 296, 297,
	298, 299, 0, 301, 387, 300, 302, 303, 0, 304,
	293, 294, 305, 715, 306, 388, 389, 307, 0, 314,
	308, 309, 295, 310, 313, 390, 311, 312, 391, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 0,
	392, 393, 394, 0, 0, 323, 324, 395, 396, 0,
	325, 326, 327, 328, 0, 0, 329, 330, 331, 332,
	0, 333, 0, 397, 334, 335, 336, 398, 399, 888,
	0, 337, 0, 0, 0, 0, 338, 339, 340, 341,
	342, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 778, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 703, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 706, 0, 369, 234, 0, 231,
	0, 705, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 377, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 711, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 712, 261, 713, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 715, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	181, 0, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 187,
	188, 189, 344, 345, 346, 347, 190, 348, 349, 0,
	191, 350, 351, 192, 193, 0, 0, 352, 353, 354,
	1635, 194, 355, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 1633, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 407, 210, 356, 211, 357, 358, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 359, 218, 220, 219, 221, 360,
	361, 0, 1677, 0, 0, 0, 0, 0, 222, 223,
	362, 363, 364, 0, 224, 0, 225, 1638, 0, 0,
	0, 226, 365, 0, 366, 0, 0, 227, 228, 0,
	0, 229, 230, 367, 368, 0, 0, 369, 234, 1675,
	231, 0, 0, 232, 370, 233, 371, 372, 373, 374,
	375, 0, 376, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 377, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	378, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	379, 255, 380, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 381, 0, 261, 0, 382, 262, 263,
	264, 265, 266, 0, 267, 383, 268, 384, 269, 1637,
	270, 271, 272, 273, 274, 385, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 386, 292, 0,
	296, 297, 298, 299, 0, 301, 387, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 388, 389, 307,
	0, 314, 308, 309, 295, 310, 313, 390, 311, 312,
	391, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 0, 392, 393, 394, 0, 0, 323, 324, 395,
	396, 0, 325, 326, 327, 328, 0, 1676, 329, 330,
	331, 332, 0, 333, 0, 397, 334, 335, 336, 398,
	399, 181, 0, 337, 0, 0, 0, 0, 338, 339,
	340, 341, 342, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 1635, 194, 355, 0, 0, 1630, 195, 196, 197,
	0, 199, 200, 201, 198, 1633, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 1638, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 1629, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	1637, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 1636, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 907, 337, 181, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 343,
	0, 0, 0, 0, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 0, 191, 350, 351, 192, 193,
	0, 0, 352, 353, 354, 0, 194, 355, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 407, 210,
	356, 211, 357, 358, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 359,
	218, 220, 219, 221, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 365, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 367, 368,
	0, 0, 369, 234, 0, 231, 0, 0, 232, 370,
	233, 371, 372, 373, 374, 375, 0, 376, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 377, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 379, 255, 380, 256, 257,
	0, 258, 0, 756, 259, 0, 0, 260, 381, 0,
	261, 0, 382, 262, 263, 264, 265, 266, 0, 267,
	383, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	385, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 388, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 393, 394,
	0, 0, 323, 324, 395, 396, 0, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 0, 333, 0,
	397, 334, 335, 336, 398, 399, 0, 762, 337, 181,
	0, 0, 0, 338, 339, 340, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 764, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 756, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	0, 758, 337, 181, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 343, 0, 0,
	0, 0, 187, 188, 189, 344, 345, 346, 347, 190,
	348, 349, 0, 191, 350, 351, 192, 193, 0, 0,
	352, 353, 354, 0, 194, 355, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 407, 210, 356, 211,
	357, 358, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 359, 218, 220,
	219, 221, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 362, 363, 364, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 365, 0, 366, 0, 0,
	227, 228, 0, 0, 229, 230, 760, 368, 0, 0,
	369, 234, 0, 231, 0, 0, 232, 370, 233, 371,
	372, 373, 374, 375, 0, 376, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 377,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 378, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 379, 255, 380, 256, 257, 0, 258,
	0, 756, 259, 0, 0, 260, 381, 0, 261, 0,
	382, 262, 263, 264, 265, 266, 0, 267, 383, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 385, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	386, 292, 0, 296, 297, 298, 299, 0, 301, 387,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	388, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	390, 311, 312, 391, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 393, 394, 0, 0,
	323, 324, 395, 396, 0, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 0, 333, 0, 397, 334,
	335, 336, 398, 399, 0, 419, 337, 181, 0, 0,
	0, 338, 339, 340, 341, 342, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 418, 186, 0, 0, 0,
	0, 343, 0, 0, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 194, 355,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	407, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	367, 368, 0, 0, 369, 234, 0, 231, 0, 0,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 377, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 0, 261, 0, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 417, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 386, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	393, 394, 0, 0, 323, 324, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 181, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 343, 0, 1618, 0, 0, 187, 188, 189,
	344, 345, 346, 347, 190, 348, 349, 0, 191, 350,
	351, 192, 193, 0, 0, 352, 353, 354, 0, 194,
	355, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 407, 210, 356, 211, 357, 358, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 359, 218, 220, 219, 221, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 362, 363,
	364, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	365, 0, 366, 0, 0, 227, 228, 0, 0, 229,
	230, 367, 368, 0, 0, 369, 234, 0, 231, 0,
	0, 232, 370, 233, 371, 372, 373, 374, 375, 0,
	376, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 377, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 378, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 379, 255,
	380, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 381, 0, 261, 0, 382, 262, 263, 264, 265,
	266, 0, 267, 383, 268, 384, 269, 0, 270, 271,
	272, 273, 274, 385, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 386, 292, 0, 296, 297,
	298, 299, 0, 301, 387, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 388, 389, 307, 0, 314,
	308, 309, 295, 310, 313, 390, 311, 312, 391, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 0,
	392, 393, 394, 0, 0, 323, 324, 395, 396, 0,
	325, 326, 327, 328, 0, 0, 329, 330, 331, 332,
	0, 333, 0, 397, 334, 335, 336, 398, 399, 181,
	2210, 337, 0, 0, 0, 0, 338, 339, 340, 341,
	342, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	181, 2210, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 187,
	188, 189, 344, 345, 346, 347, 190, 348, 349, 0,
	191, 350, 351, 192, 193, 0, 0, 352, 353, 354,
	0, 194, 355, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 407, 210, 356, 211, 357, 358, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 359, 218, 220, 219, 221, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	362, 363, 364, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 365, 0, 366, 0, 0, 227, 228, 0,
	0, 229, 230, 367, 368, 0, 0, 369, 234, 0,
	231, 0, 0, 232, 370, 233, 371, 372, 373, 374,
	375, 0, 376, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 377, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	378, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	379, 255, 380, 256, 257, 0, 258, 0, 0, 2207,
	0, 0, 260, 381, 0, 261, 0, 382, 262, 263,
	264, 265, 266, 0, 267, 383, 268, 384, 269, 0,
	270, 271, 272, 273, 274, 385, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 386, 292, 0,
	296, 297, 298, 299, 0, 301, 387, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 388, 389, 307,
	0, 314, 308, 309, 295, 310, 313, 390, 311, 312,
	391, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 0, 392, 393, 394, 0, 0, 323, 324, 395,
	396, 0, 325, 326, 327, 328, 0, 0, 329, 330,
	331, 332, 0, 333, 0, 397, 334, 335, 336, 398,
	399, 181, 0, 337, 0, 0, 0, 0, 338, 339,
	340, 341, 342, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 756,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 1388, 337, 181, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 343,
	0, 0, 0, 0, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 0, 191, 350, 351, 192, 193,
	0, 0, 352, 353, 354, 0, 194, 355, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 407, 210,
	356, 211, 357, 358, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 359,
	218, 220, 219, 221, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 365, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 367, 368,
	0, 0, 369, 234, 0, 231, 0, 0, 232, 370,
	233, 371, 372, 373, 374, 375, 0, 376, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 377, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 379, 255, 380, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 0,
	261, 0, 382, 262, 263, 264, 265, 266, 0, 267,
	383, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	385, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 388, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 393, 394,
	0, 0, 323, 324, 395, 396, 0, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 0, 333, 0,
	397, 334, 335, 336, 398, 399, 0, 1386, 337, 181,
	0, 0, 0, 338, 339, 340, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	181, 0, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 184, 185, 1368, 186,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 187,
	188, 189, 344, 345, 346, 347, 190, 348, 349, 0,
	191, 350, 351, 192, 193, 0, 0, 352, 353, 354,
	0, 194, 355, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 407, 210, 356, 211, 357, 358, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 359, 218, 220, 219, 221, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	362, 363, 364, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 365, 0, 366, 0, 0, 227, 228, 0,
	0, 229, 230, 367, 368, 0, 0, 369, 234, 0,
	231, 0, 0, 232, 370, 233, 371, 372, 373, 374,
	375, 0, 376, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 377, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	378, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	379, 255, 380, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 381, 0, 261, 0, 382, 262, 263,
	264, 265, 266, 0, 267, 383, 268, 384, 269, 0,
	270, 271, 272, 273, 274, 385, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 386, 292, 0,
	296, 297, 298, 299, 0, 301, 387, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 388, 389, 307,
	0, 314, 308, 309, 295, 310, 313, 390, 311, 312,
	391, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 0, 392, 393, 394, 0, 0, 323, 324, 395,
	396, 0, 325, 326, 327, 328, 0, 0, 329, 330,
	331, 332, 0, 333, 0, 397, 334, 335, 336, 398,
	399, 0, 513, 337, 181, 0, 0, 0, 338, 339,
	340, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 187, 188, 189, 344, 345, 346, 347,
	190, 348, 349, 0, 191, 350, 351, 192, 193, 0,
	0, 352, 353, 964, 0, 194, 355, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 407, 210, 356,
	211, 357, 358, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 359, 218,
	220, 219, 221, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 362, 363, 364, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 365, 0, 366, 0,
	0, 227, 228, 0, 0, 229, 230, 367, 368, 0,
	0, 369, 234, 0, 231, 0, 0, 232, 370, 233,
	371, 372, 373, 374, 375, 0, 376, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	377, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 378, 515, 0, 251, 252, 254,
	253, 0, 0, 0, 379, 255, 380, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 381, 0, 261,
	0, 382, 262, 263, 264, 265, 266, 0, 267, 383,
	268, 384, 269, 0, 270, 271, 272, 273, 274, 385,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 386, 292, 0, 296, 297, 298, 299, 0, 301,
	387, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 388, 389, 307, 0, 314, 308, 309, 295, 310,
	313, 390, 311, 312, 391, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 0, 510, 393, 394, 0,
	0, 323, 324, 395, 396, 0, 325, 326, 327, 328,
	0, 0, 329, 330, 331, 332, 0, 333, 0, 397,
	334, 335, 336, 398, 399, 0, 1246, 337, 181, 0,
	0, 0, 338, 339, 340, 341, 342, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 187, 188, 189,
	344, 345, 346, 347, 190, 348, 349, 0, 191, 350,
	351, 192, 193, 0, 0, 352, 353, 354, 0, 194,
	355, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 407, 210, 356, 211, 357, 358, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 359, 218, 220, 219, 221, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 362, 363,
	364, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	365, 0, 366, 0, 0, 227, 228, 0, 0, 229,
	230, 1245, 368, 0, 0, 369, 234, 0, 231, 0,
	0, 232, 370, 233, 371, 372, 373, 374, 375, 0,
	376, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 377, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 378, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 379, 255,
	380, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 381, 0, 261, 0, 382, 262, 263, 264, 265,
	266, 0, 267, 383, 268, 384, 269, 0, 270, 271,
	272, 273, 274, 385, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 386, 292, 0, 296, 297,
	298, 299, 0, 301, 387, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 388, 389, 307, 0, 314,
	308, 309, 295, 310, 313, 390, 311, 312, 391, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 0,
	392, 393, 394, 0, 0, 323, 324, 395, 396, 0,
	325, 326, 327, 328, 0, 0, 329, 330, 331, 332,
	0, 333, 0, 397, 334, 335, 336, 398, 399, 0,
	513, 337, 181, 0, 0, 0, 338, 339, 340, 341,
	342, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 187, 188, 189, 344, 345, 346, 347, 190, 348,
	349, 0, 191, 350, 351, 192, 193, 0, 0, 352,
	353, 964, 0, 194, 355, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 407, 210, 356, 211, 357,
	358, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 359, 218, 220, 219,
	221, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 362, 363, 364, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 365, 0, 366, 0, 0, 227,
	228, 0, 0, 229, 230, 367, 368, 0, 0, 369,
	234, 0, 231, 0, 0, 232, 370, 233, 371, 372,
	373, 374, 375, 0, 376, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 377, 0,
	243, 0, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 378, 515, 0, 251, 252, 254, 253, 0,
	0, 0, 379, 255, 380, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 381, 0, 261, 0, 382,
	262, 263, 264, 265, 266, 0, 267, 383, 268, 384,
	269, 0, 270, 271, 272, 273, 274, 385, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 386,
	292, 0, 296, 297, 298, 299, 0, 301, 387, 300,
	302, 303, 0, 304, 293, 294, 305, 0, 306, 388,
	389, 307, 0, 314, 308, 309, 295, 310, 313, 390,
	311, 312, 391, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 510, 393, 394, 0, 0, 323,
	965, 395, 396, 0, 325, 326, 327, 328, 0, 0,
	329, 330, 331, 332, 0, 333, 0, 397, 334, 335,
	336, 398, 399, 0, 513, 337, 181, 0, 0, 0,
	338, 339, 340, 341, 342, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 504, 355, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 367,
	368, 0, 0, 369, 234, 0, 231, 0, 0, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 377, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 515, 0, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	0, 261, 0, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 948, 303, 0, 304, 293, 294,
	305, 0, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 510, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 398, 399, 0, 922, 337,
	181, 0, 0, 0, 338, 339, 340, 341, 342, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 187,
	188, 189, 344, 345, 346, 347, 190, 348, 349, 0,
	191, 350, 351, 192, 193, 0, 0, 352, 353, 354,
	0, 194, 355, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 407, 210, 356, 211, 357, 358, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 359, 218, 220, 219, 221, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	362, 363, 364, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 365, 0, 366, 0, 0, 227, 228, 0,
	0, 229, 230, 921, 368, 0, 0, 369, 234, 0,
	231, 0, 0, 232, 370, 233, 371, 372, 373, 374,
	375, 0, 376, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 377, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	378, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	379, 255, 380, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 381, 0, 261, 0, 382, 262, 263,
	264, 265, 266, 0, 267, 383, 268, 384, 269, 0,
	270, 271, 272, 273, 274, 385, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 386, 292, 0,
	296, 297, 298, 299, 0, 301, 387, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 388, 389, 307,
	0, 314, 308, 309, 295, 310, 313, 390, 311, 312,
	391, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 0, 392, 393, 394, 0, 0, 323, 324, 395,
	396, 0, 325, 326, 327, 328, 0, 0, 329, 330,
	331, 332, 0, 333, 0, 397, 334, 335, 336, 398,
	399, 0, 918, 337, 181, 0, 0, 0, 338, 339,
	340, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 187, 188, 189, 344, 345, 346, 347,
	190, 348, 349, 0, 191, 350, 351, 192, 193, 0,
	0, 352, 353, 354, 0, 194, 355, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 407, 210, 356,
	211, 357, 358, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 359, 218,
	220, 219, 221, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 362, 363, 364, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 365, 0, 366, 0,
	0, 227, 228, 0, 0, 229, 230, 917, 368, 0,
	0, 369, 234, 0, 231, 0, 0, 232, 370, 233,
	371, 372, 373, 374, 375, 0, 376, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	377, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 378, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 379, 255, 380, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 381, 0, 261,
	0, 382, 262, 263, 264, 265, 266, 0, 267, 383,
	268, 384, 269, 0, 270, 271, 272, 273, 274, 385,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 386, 292, 0, 296, 297, 298, 299, 0, 301,
	387, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 388, 389, 307, 0, 314, 308, 309, 295, 310,
	313, 390, 311, 312, 391, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 0, 392, 393, 394, 0,
	0, 323, 324, 395, 396, 0, 325, 326, 327, 328,
	0, 0, 329, 330, 331, 332, 0, 333, 0, 397,
	334, 335, 336, 398, 399, 0, 915, 337, 181, 0,
	0, 0, 338, 339, 340, 341, 342, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 187, 188, 189,
	344, 345, 346, 347, 190, 348, 349, 0, 191, 350,
	351, 192, 193, 0, 0, 352, 353, 354, 0, 194,
	355, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 407, 210, 356, 211, 357, 358, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 359, 218, 220, 219, 221, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 362, 363,
	364, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	365, 0, 366, 0, 0, 227, 228, 0, 0, 229,
	230, 914, 368, 0, 0, 369, 234, 0, 231, 0,
	0, 232, 370, 233, 371, 372, 373, 374, 375, 0,
	376, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 377, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 378, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 379, 255,
	380, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 381, 0, 261, 0, 382, 262, 263, 264, 265,
	266, 0, 267, 383, 268, 384, 269, 0, 270, 271,
	272, 273, 274, 385, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 386, 292, 0, 296, 297,
	298, 299, 0, 301, 387, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 388, 389, 307, 0, 314,
	308, 309, 295, 310, 313, 390, 311, 312, 391, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 0,
	392, 393, 394, 0, 0, 323, 324, 395, 396, 0,
	325, 326, 327, 328, 0, 0, 329, 330, 331, 332,
	0, 333, 0, 397, 334, 335, 336, 398, 399, 0,
	911, 337, 181, 0, 0, 0, 338, 339, 340, 341,
	342, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 187, 188, 189, 344, 345, 346, 347, 190, 348,
	349, 0, 191, 350, 351, 192, 193, 0, 0, 352,
	353, 354, 0, 194, 355, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 407, 210, 356, 211, 357,
	358, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 359, 218, 220, 219,
	221, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 362, 363, 364, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 365, 0, 366, 0, 0, 227,
	228, 0, 0, 229, 230, 910, 368, 0, 0, 369,
	234, 0, 231, 0, 0, 232, 370, 233, 371, 372,
	373, 374, 375, 0, 376, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 377, 0,
	243, 0, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 378, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 379, 255, 380, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 381, 0, 261, 0, 382,
	262, 263, 264, 265, 266, 0, 267, 383, 268, 384,
	269, 0, 270, 271, 272, 273, 274, 385, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 386,
	292, 0, 296, 297, 298, 299, 0, 301, 387, 300,
	302, 303, 0, 304, 293, 294, 305, 0, 306, 388,
	389, 307, 0, 314, 308, 309, 295, 310, 313, 390,
	311, 312, 391, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 392, 393, 394, 0, 0, 323,
	324, 395, 396, 0, 325, 326, 327, 328, 0, 0,
	329, 330, 331, 332, 0, 333, 0, 397, 334, 335,
	336, 398, 399, 181, 0, 337, 0, 0, 0, 0,
	338, 339, 340, 341, 342, 0, 0, 0, 0, 184,
	185, 899, 186, 0, 0, 0, 0, 343, 0, 0,
	0, 0, 187, 188, 189, 344, 345, 346, 347, 190,
	348, 349, 0, 191, 350, 351, 192, 193, 0, 0,
	352, 353, 354, 0, 194, 355, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 407, 210, 356, 211,
	357, 358, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 359, 218, 220,
	219, 221, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 362, 363, 364, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 365, 0, 366, 0, 0,
	227, 228, 0, 0, 229, 230, 367, 368, 0, 0,
	369, 234, 0, 231, 0, 0, 232, 370, 233, 371,
	372, 373, 374, 375, 0, 376, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 377,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 378, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 379, 255, 380, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 381, 0, 261, 0,
	382, 262, 263, 264, 265, 266, 0, 267, 383, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 385, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	386, 292, 0, 296, 297, 298, 299, 0, 301, 387,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	388, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	390, 311, 312, 391, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 393, 394, 0, 0,
	323, 324, 395, 396, 0, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 0, 333, 0, 397, 334,
	335, 336, 398, 399, 0, 897, 337, 181, 0, 0,
	0, 338, 339, 340, 341, 342, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 343, 0, 0, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 194, 355,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	407, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	896, 368, 0, 0, 369, 234, 0, 231, 0, 0,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 377, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 0, 261, 0, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 386, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	393, 394, 0, 0, 323, 324, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 0, 893,
	337, 181, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 878, 337, 181, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 343,
	0, 0, 0, 0, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 0, 191, 350, 351, 192, 193,
	0, 0, 352, 353, 354, 0, 194, 355, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 407, 210,
	356, 211, 357, 358, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 359,
	218, 220, 219, 221, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 365, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 880, 368,
	0, 0, 369, 234, 0, 231, 0, 0, 232, 370,
	233, 371, 372, 373, 374, 375, 0, 376, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 377, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 379, 255, 380, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 0,
	261, 0, 382, 262, 263, 264, 265, 266, 0, 267,
	383, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	385, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 388, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 393, 394,
	0, 0, 323, 324, 395, 396, 0, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 0, 333, 0,
	397, 334, 335, 336, 398, 399, 0, 768, 337, 181,
	0, 0, 0, 338, 339, 340, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 770, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	0, 766, 337, 181, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 343, 0, 0,
	0, 0, 187, 188, 189, 344, 345, 346, 347, 190,
	348, 349, 0, 191, 350, 351, 192, 193, 0, 0,
	352, 353, 354, 0, 194, 355, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 407, 210, 356, 211,
	357, 358, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 359, 218, 220,
	219, 221, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 362, 363, 364, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 365, 0, 366, 0, 0,
	227, 228, 0, 0, 229, 230, 367, 368, 0, 0,
	369, 234, 0, 231, 0, 0, 232, 370, 233, 371,
	372, 373, 374, 375, 0, 376, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 377,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 378, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 379, 255, 380, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 381, 0, 261, 0,
	382, 262, 263, 264, 265, 266, 0, 267, 383, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 385, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	386, 292, 0, 296, 297, 298, 299, 0, 301, 387,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	388, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	390, 311, 312, 391, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 393, 394, 0, 0,
	323, 324, 395, 396, 0, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 0, 333, 0, 397, 334,
	335, 336, 398, 399, 0, 513, 337, 181, 0, 0,
	0, 338, 339, 340, 341, 342, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 343, 0, 0, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 504, 355,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	407, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	367, 368, 0, 0, 369, 234, 0, 231, 0, 0,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 377, 0, 243, 0, 0, 503, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 515, 0,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 0, 261, 0, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 505, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 506, 303, 0, 304, 293,
	294, 305, 0, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 510,
	393, 394, 0, 0, 323, 508, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 0, 495,
	337, 181, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 264, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 273, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 292,
	0, 496, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 493, 337, 181, 0, 0, 0, 338,
	339, 340, 341, 342, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 343,
	0, 0, 0, 0, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 0, 191, 350, 351, 192, 193,
	0, 0, 352, 353, 354, 0, 194, 355, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 407, 210,
	356, 211, 357, 358, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 359,
	218, 220, 219, 221, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 365, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 367, 368,
	0, 0, 369, 234, 0, 231, 0, 0, 232, 370,
	233, 371, 372, 373, 374, 375, 0, 376, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 377, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 379, 255, 380, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 0,
	261, 0, 382, 262, 263, 264, 265, 266, 0, 267,
	383, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	385, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 388, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 393, 394,
	0, 0, 323, 324, 395, 396, 0, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 0, 333, 0,
	397, 334, 335, 336, 398, 399, 0, 485, 337, 181,
	0, 0, 0, 338, 339, 340, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	0, 438, 337, 181, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 343, 0, 0,
	0, 0, 187, 188, 189, 344, 345, 346, 347, 190,
	348, 349, 0, 191, 350, 351, 192, 193, 0, 0,
	352, 353, 354, 0, 194, 355, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 407, 210, 356, 211,
	357, 358, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 359, 218, 220,
	219, 221, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 362, 363, 364, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 365, 0, 366, 0, 0,
	227, 228, 0, 0, 229, 230, 367, 368, 0, 0,
	369, 234, 0, 231, 0, 0, 232, 370, 233, 371,
	372, 373, 374, 375, 0, 376, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 377,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 378, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 379, 255, 380, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 381, 0, 261, 0,
	382, 262, 263, 264, 265, 266, 0, 267, 383, 268,
	384, 269, 0, 270, 271, 272, 273, 274, 385, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	386, 292, 0, 296, 297, 298, 299, 0, 301, 387,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	388, 389, 307, 0, 314, 308, 309, 295, 310, 313,
	390, 311, 312, 391, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 0, 392, 393, 394, 0, 0,
	323, 324, 395, 396, 0, 325, 326, 327, 328, 0,
	0, 329, 330, 331, 332, 0, 333, 0, 397, 334,
	335, 336, 398, 399, 181, 0, 337, 0, 0, 0,
	0, 338, 339, 340, 341, 342, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 187, 188, 189, 344, 345, 346, 347,
	190, 348, 349, 0, 191, 350, 351, 192, 193, 0,
	0, 352, 353, 354, 0, 194, 355, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 407, 210, 356,
	211, 357, 358, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 359, 218,
	220, 219, 221, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 362, 363, 364, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 365, 0, 366, 0,
	0, 227, 228, 0, 0, 229, 230, 367, 368, 0,
	0, 369, 234, 0, 231, 0, 0, 232, 370, 233,
	371, 372, 373, 374, 375, 0, 376, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	377, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 378, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 379, 255, 380, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 381, 0, 261,
	0, 382, 262, 263, 264, 265, 266, 0, 267, 383,
	268, 384, 269, 0, 270, 271, 272, 273, 274, 385,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 386, 292, 0, 296, 297, 298, 299, 0, 301,
	387, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 388, 389, 307, 0, 314, 308, 309, 295, 310,
	313, 390, 311, 312, 391, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 0, 392, 393, 394, 0,
	0, 323, 324, 395, 396, 0, 325, 326, 327, 328,
	0, 0, 329, 330, 331, 332, 0, 333, 0, 397,
	334, 335, 336, 398, 399, 181, 0, 337, 0, 0,
	0, 0, 338, 339, 340, 341, 342, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 343,
	0, 0, 0, 0, 187, 188, 189, 344, 345, 346,
	347, 190, 348, 349, 0, 191, 350, 351, 192, 193,
	0, 0, 352, 353, 354, 0, 194, 355, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 407, 210,
	356, 211, 357, 358, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 359,
	218, 220, 219, 221, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 362, 363, 364, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 365, 0, 366,
	0, 0, 227, 228, 0, 0, 229, 230, 1934, 368,
	0, 0, 369, 234, 0, 231, 0, 0, 232, 370,
	233, 371, 372, 373, 374, 375, 0, 376, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 377, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 378, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 379, 255, 380, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 381, 0,
	261, 0, 382, 262, 263, 264, 265, 266, 0, 267,
	383, 268, 384, 269, 0, 270, 271, 272, 273, 274,
	385, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 386, 292, 0, 296, 297, 298, 299, 0,
	301, 387, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 388, 389, 307, 0, 314, 308, 309, 295,
	310, 313, 390, 311, 312, 391, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 0, 392, 393, 394,
	0, 0, 323, 324, 395, 396, 0, 325, 326, 327,
	328, 0, 0, 329, 330, 331, 332, 0, 333, 0,
	397, 334, 335, 336, 398, 399, 181, 0, 337, 0,
	0, 0, 0, 338, 339, 340, 341, 342, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 187, 188, 189, 344, 345,
	346, 347, 190, 348, 349, 0, 191, 350, 351, 192,
	193, 0, 0, 352, 353, 354, 0, 194, 355, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 407,
	210, 356, 211, 357, 358, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	359, 218, 220, 219, 221, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 362, 363, 364, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 365, 0,
	366, 0, 0, 227, 228, 0, 0, 229, 230, 1932,
	368, 0, 0, 369, 234, 0, 231, 0, 0, 232,
	370, 233, 371, 372, 373, 374, 375, 0, 376, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 377, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 378, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 379, 255, 380, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 381,
	0, 261, 0, 382, 262, 263, 264, 265, 266, 0,
	267, 383, 268, 384, 269, 0, 270, 271, 272, 273,
	274, 385, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 386, 292, 0, 296, 297, 298, 299,
	0, 301, 387, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 388, 389, 307, 0, 314, 308, 309,
	295, 310, 313, 390, 311, 312, 391, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 0, 392, 393,
	394, 0, 0, 323, 324, 395, 396, 0, 325, 326,
	327, 328, 0, 0, 329, 330, 331, 332, 0, 333,
	0, 397, 334, 335, 336, 398, 399, 181, 0, 337,
	0, 0, 0, 0, 338, 339, 340, 341, 342, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 343, 0, 0, 0, 0, 187, 188, 189, 344,
	345, 346, 347, 190, 348, 349, 0, 191, 350, 351,
	192, 193, 0, 0, 352, 353, 354, 0, 194, 355,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	407, 210, 356, 211, 357, 358, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 359, 218, 220, 219, 221, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 362, 363, 364,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 365,
	0, 366, 0, 0, 227, 228, 0, 0, 229, 230,
	1921, 368, 0, 0, 369, 234, 0, 231, 0, 0,
	232, 370, 233, 371, 372, 373, 374, 375, 0, 376,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 377, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 378, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 379, 255, 380,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	381, 0, 261, 0, 382, 262, 263, 264, 265, 266,
	0, 267, 383, 268, 384, 269, 0, 270, 271, 272,
	273, 274, 385, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 386, 292, 0, 296, 297, 298,
	299, 0, 301, 387, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 388, 389, 307, 0, 314, 308,
	309, 295, 310, 313, 390, 311, 312, 391, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 0, 392,
	393, 394, 0, 0, 323, 324, 395, 396, 0, 325,
	326, 327, 328, 0, 0, 329, 330, 331, 332, 0,
	333, 0, 397, 334, 335, 336, 398, 399, 181, 0,
	337, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 187, 188, 189,
	344, 345, 346, 347, 190, 348, 349, 0, 191, 350,
	351, 192, 193, 0, 0, 352, 353, 354, 0, 194,
	355, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 407, 210, 356, 211, 357, 358, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 359, 218, 220, 219, 221, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 362, 363,
	364, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	365, 0, 366, 0, 0, 227, 228, 0, 0, 229,
	230, 367, 368, 0, 0, 369, 234, 0, 231, 0,
	0, 232, 370, 233, 371, 372, 373, 374, 375, 0,
	376, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 377, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 378, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 379, 255,
	380, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 381, 0, 261, 0, 382, 262, 263, 264, 265,
	266, 0, 267, 383, 268, 384, 269, 0, 270, 271,
	272, 273, 274, 385, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 386, 292, 0, 496, 297,
	298, 299, 0, 301, 387, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 388, 389, 307, 0, 314,
	308, 309, 295, 310, 313, 390, 311, 312, 391, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 0,
	392, 393, 394, 0, 0, 323, 324, 395, 396, 0,
	325, 326, 327, 328, 0, 0, 329, 330, 331, 332,
	0, 333, 0, 397, 334, 335, 336, 398, 399, 181,
	0, 337, 0, 0, 0, 0, 338, 339, 340, 341,
	342, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 343, 0, 1256, 0, 0, 187, 188,
	189, 344, 345, 346, 347, 190, 348, 349, 0, 191,
	350, 351, 192, 193, 0, 0, 352, 353, 354, 0,
	194, 355, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 407, 210, 356, 211, 357, 358, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 359, 218, 220, 219, 221, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 362,
	363, 364, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 365, 0, 366, 0, 0, 227, 228, 0, 0,
	229, 230, 367, 368, 0, 0, 369, 234, 0, 231,
	0, 0, 232, 370, 233, 371, 372, 373, 374, 375,
	0, 376, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 377, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 378,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 379,
	255, 380, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 381, 0, 261, 0, 382, 262, 263, 264,
	265, 266, 0, 267, 383, 268, 384, 269, 0, 270,
	271, 272, 273, 274, 385, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 386, 292, 0, 296,
	297, 298, 299, 0, 301, 387, 300, 302, 303, 0,
	0, 293, 294, 305, 0, 306, 388, 389, 307, 0,
	314, 308, 309, 295, 310, 313, 390, 311, 312, 391,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	0, 392, 393, 394, 0, 0, 323, 324, 395, 396,
	0, 325, 326, 327, 328, 0, 0, 329, 330, 331,
	332, 0, 333, 0, 397, 334, 335, 336, 398, 399,
	181, 0, 337, 0, 0, 0, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 187,
	188, 189, 344, 345, 346, 347, 190, 348, 349, 0,
	191, 350, 351, 192, 193, 0, 0, 352, 353, 354,
	0, 194, 355, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 407, 210, 356, 211, 357, 358, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 359, 218, 220, 219, 221, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	362, 363, 364, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 365, 0, 366, 0, 0, 227, 228, 0,
	0, 229, 230, 367, 368, 0, 0, 369, 234, 0,
	231, 0, 0, 232, 370, 233, 371, 372, 373, 374,
	375, 0, 376, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 377, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	378, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	379, 255, 380, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 381, 0, 261, 0, 382, 262, 263,
	264, 265, 266, 0, 267, 383, 268, 384, 269, 0,
	270, 271, 272, 273, 274, 385, 732, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 386, 292, 0,
	296, 297, 298, 299, 0, 301, 387, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 388, 389, 307,
	0, 314, 308, 309, 295, 310, 313, 390, 311, 312,
	391, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 0, 392, 393, 394, 0, 0, 323, 324, 395,
	396, 0, 325, 326, 327, 328, 0, 0, 329, 330,
	331, 332, 0, 333, 0, 397, 334, 335, 336, 398,
	399, 181, 0, 337, 0, 0, 0, 0, 338, 339,
	340, 341, 342, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 343, 0, 0, 0, 0,
	187, 188, 189, 344, 345, 346, 347, 190, 348, 349,
	0, 191, 350, 351, 192, 193, 0, 0, 352, 353,
	354, 0, 194, 355, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 407, 210, 356, 211, 357, 358,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 359, 218, 220, 219, 221,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 362, 363, 364, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 365, 0, 366, 0, 0, 227, 228,
	0, 0, 229, 230, 367, 368, 0, 0, 369, 234,
	0, 231, 0, 0, 232, 370, 233, 371, 372, 373,
	374, 375, 0, 376, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 377, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 378, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 379, 255, 380, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 381, 0, 261, 0, 382, 262,
	263, 0, 265, 266, 0, 267, 383, 268, 384, 269,
	0, 270, 271, 272, 0, 274, 385, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 386, 0,
	0, 296, 297, 298, 299, 0, 301, 387, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 388, 389,
	307, 0, 314, 308, 309, 295, 310, 313, 390, 311,
	312, 391, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 0, 392, 393, 394, 0, 0, 323, 324,
	395, 396, 0, 325, 326, 327, 328, 0, 0, 329,
	330, 331, 332, 0, 333, 0, 397, 334, 335, 336,
	398, 399, 0, 0, 337, 0, 0, 0, 0, 338,
	339, 340, 341, 342, 1050, 1051, 0, 1080, 1081, 1082,
	1090, 1091, 1092, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1051, 0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0,
	0, 1052, 0, 0, 0, 1083, 0, 1072, 0, 0,
	0, 0, 1053, 0, 1069, 1094, 0, 0, 0, 1827,
	1828, 0, 1845, 1846, 1847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 1076, 1077, 1078, 0, 0, 0, 0,
	0, 1058, 1842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 1095, 0, 0, 1075, 1076, 1077,
	1078, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1087, 1095,
	0, 0, 0, 1073, 0, 0, 1833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1849,
	0, 0, 1085, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 1848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1084, 0, 0, 0, 0, 1843, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 1050, 1051,
	0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 0, 1088, 1083, 0, 0, 1079, 0, 0,
	0, 1053, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 1088, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 1844, 0, 1827, 1828, 0, 1845, 1846, 1847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1064, 1065, 1071, 1070, 1066, 1067,
	1068, 1089, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 0, 0, 0, 1075, 1076, 1077, 1078,
	1867, 0, 0, 0, 0, 1058, 1086, 1842, 0, 1064,
	1065, 1071, 1070, 1066, 1067, 1068, 1089, 0, 1063, 1061,
	1062, 1054, 1055, 1056, 1057, 1059, 1060, 1087, 1095, 0,
	0, 0, 0, 0, 0, 1819, 0, 0, 0, 1839,
	1840, 1841, 0, 0, 0, 0, 1093, 0, 1838, 1836,
	1837, 1829, 1830, 1831, 1832, 1834, 1835, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 1833, 0, 0, 0, 0, 0, 0, 1050, 1051,
	0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 1084, 0, 1083, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 1848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 1079, 0, 0, 0,
	0, 1072, 0, 1843, 0, 0, 0, 0, 1069, 0,
	0, 1074, 0, 0, 1050, 1051, 0, 1080, 1081, 1082,
	1090, 1091, 1092, 0, 0, 0, 0, 1088, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1075, 1076, 1077, 1078,
	0, 1052, 0, 0, 0, 1058, 0, 1072, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 1844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 1095, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 1064, 1065,
	1071, 1070, 1066, 1067, 1068, 1089, 1093, 1063, 1061, 1062,
	1054, 1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0,
	2476, 1085, 1075, 1076, 1077, 1078, 0, 1073, 0, 0,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1087, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1839, 1840, 1841, 0, 0, 0,
	0, 0, 1093, 1838, 1836, 1837, 1829, 1830, 1831, 1832,
	1834, 1835, 0, 0, 0, 0, 1079, 1085, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 1050, 1051, 0, 1080, 1081, 1082,
	1090, 1091, 1092, 0, 0, 0, 0, 1088, 1084, 0,
	1083, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1052, 1079, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 1086, 0, 0, 1064, 1065,
	1071, 1070, 1066, 1067, 1068, 1089, 0, 1063, 1061, 1062,
	1054, 1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0,
	2429, 0, 1075, 1076, 1077, 1078, 0, 0, 0, 0,
	0, 1058, 0, 0, 0, 0, 1050, 1051, 0, 1080,
	1081, 1082, 1090, 1091, 1092, 0, 0, 0, 0, 0,
	0, 0, 1083, 1087, 1095, 0, 0, 0, 0, 1053,
	0, 1086, 1094, 0, 1064, 1065, 1071, 1070, 1066, 1067,
	1068, 1089, 1093, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 1052, 0, 0, 2384, 1085, 0, 1072,
	0, 0, 0, 1073, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 1076, 1077, 1078, 0, 0,
	0, 0, 1079, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 1087, 1095, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 1051, 0, 1080,
	1081, 1082, 1090, 1091, 1092, 0, 0, 0, 0, 0,
	1084, 0, 1083, 0, 0, 0, 0, 0, 0, 1053,
	0, 1086, 1094, 0, 1064, 1065, 1071, 1070, 1066, 1067,
	1068, 1089, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 1052, 1079, 0, 2354, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 1074,
	0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090, 1091,
	1092, 0, 0, 0, 0, 1088, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 1076, 1077, 1078, 0, 1052,
	0, 0, 0, 1058, 0, 1072, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1087, 1095, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 1064, 1065, 1071, 1070,
	1066, 1067, 1068, 1089, 1093, 1063, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 0, 0, 0, 2349, 1085,
	1075, 1076, 1077, 1078, 0, 1073, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1087, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1085, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090, 1091,
	1092, 0, 0, 0, 0, 1088, 1084, 0, 1083, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	1079, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 1086, 0, 0, 1064, 1065, 1071, 1070,
	1066, 1067, 1068, 1089, 0, 1063, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 0, 0, 0, 2345, 0,
	1075, 1076, 1077, 1078, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 1050, 1051, 0, 1080, 1081, 1082,
	1090, 1091, 1092, 0, 0, 0, 0, 0, 0, 0,
	1083, 1087, 1095, 0, 0, 0, 0, 1053, 0, 1086,
	1094, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089,
	1093, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 1052, 0, 0, 2286, 1085, 0, 1072, 0, 0,
	0, 1073, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 1076, 1077, 1078, 0, 0, 0, 0,
	1079, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 1087, 1095, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 1051, 0, 1080, 1081, 1082,
	1090, 1091, 1092, 0, 0, 0, 0, 0, 1084, 0,
	1083, 0, 0, 0, 0, 0, 0, 1053, 0, 1086,
	1094, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089,
	0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 1052, 1079, 0, 2249, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 1074, 0, 0,
	1050, 1051, 0, 1080, 1081, 1082, 1090, 1091, 1092, 0,
	0, 0, 0, 1088, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 1076, 1077, 1078, 0, 1052, 0, 0,
	0, 1058, 0, 1072, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 1095, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1064, 1065, 1071, 1070, 1066, 1067,
	1068, 1089, 1093, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 0, 0, 0, 2248, 1085, 1075, 1076,
	1077, 1078, 0, 1073, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1087,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1085, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	1050, 1051, 0, 1080, 1081, 1082, 1090, 1091, 1092, 0,
	0, 0, 0, 1088, 1084, 0, 1083, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 1079, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 1086, 0, 0, 1064, 1065, 1071, 1070, 1066, 1067,
	1068, 1089, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 0, 0, 0, 2213, 0, 1075, 1076,
	1077, 1078, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090, 1091,
	1092, 0, 0, 0, 0, 0, 0, 0, 1083, 1087,
	1095, 0, 0, 0, 0, 1053, 0, 1086, 1094, 0,
	1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089, 1093, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 1052,
	0, 0, 2059, 1085, 0, 1072, 0, 0, 0, 1073,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 1076, 1077, 1078, 0, 0, 0, 0, 1079, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 1087, 1095, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090, 1091,
	1092, 0, 0, 0, 0, 0, 1084, 0, 1083, 0,
	0, 0, 0, 0, 0, 1053, 0, 1086, 1094, 0,
	1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089, 0, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 1052,
	1079, 0, 2035, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 1074, 0, 0, 1050, 1051,
	0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0,
	0, 1088, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 1076, 1077, 1078, 0, 1052, 0, 0, 0, 1058,
	0, 1072, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 1095, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089,
	1093, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 0, 0, 0, 1494, 1085, 1075, 1076, 1077, 1078,
	0, 1073, 0, 0, 0, 1058, 2535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 1087, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1085, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 1050, 1051,
	0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0,
	0, 1088, 1084, 0, 1083, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 1094, 0, 0, 0, 2534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 1079, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 1086,
	0, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089,
	0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 0, 1789, 0, 0, 0, 1075, 1076, 1077, 1078,
	0, 0, 0, 0, 0, 1058, 0, 1859, 0, 0,
	1858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 1095, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 1064, 1065,
	1071, 1070, 1066, 1067, 1068, 1089, 1093, 1063, 1061, 1062,
	1054, 1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 1051,
	0, 1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 1084, 0, 1083, 0, 0, 0, 0, 1762,
	0, 1053, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 1079, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 1763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1075, 1076, 1077, 1078,
	0, 0, 0, 0, 1594, 1058, 0, 0, 0, 0,
	1050, 1051, 0, 1080, 1081, 1082, 1090, 1091, 1092, 0,
	0, 0, 0, 0, 0, 0, 1083, 1087, 1095, 0,
	1593, 0, 0, 1053, 0, 1086, 1094, 0, 1064, 1065,
	1071, 1070, 1066, 1067, 1068, 1089, 1093, 1063, 1061, 1062,
	1054, 1055, 1056, 1057, 1059, 1060, 0, 1052, 0, 0,
	0, 1085, 0, 1072, 0, 0, 0, 1073, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 1076,
	1077, 1078, 0, 0, 0, 0, 1079, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 1087,
	1095, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 1051, 0, 1080, 1081, 1082, 1090, 1091, 1092, 0,
	0, 0, 0, 0, 1084, 0, 1083, 0, 0, 0,
	0, 0, 0, 1053, 0, 1086, 1094, 0, 1064, 1065,
	1071, 1070, 1066, 1067, 1068, 1089, 0, 1063, 1061, 1062,
	1054, 1055, 1056, 1057, 1059, 1060, 0, 1052, 1079, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 1074, 0, 0, 0, 1050, 1051, 0,
	1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0, 1088,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 1076,
	1077, 1078, 0, 0, 1052, 0, 0, 1058, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	1095, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089, 1093, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 0,
	0, 0, 0, 1085, 0, 1075, 1076, 1077, 1078, 1073,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 588, 1087, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	1085, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 1050, 1051, 0,
	1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0, 1088,
	0, 1084, 0, 1083, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 1079, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1086, 0, 0,
	1064, 1065, 1071, 1070, 1066, 1067, 1068, 1089, 0, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 0,
	0, 0, 2039, 0, 0, 1075, 1076, 1077, 1078, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 1865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 1095, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1064, 1065, 1071,
	1070, 1066, 1067, 1068, 1089, 1093, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 1051, 0,
	1080, 1081, 1082, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1084, 0, 1083, 0, 0, 0, 1860, 0, 0,
	1053, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 1079, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	1074, 0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090,
	1091, 1092, 0, 0, 0, 0, 1088, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 1076, 1077, 1078, 0,
	1052, 0, 0, 0, 1058, 0, 1072, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 1095, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1064, 1065, 1071,
	1070, 1066, 1067, 1068, 1089, 1093, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0, 0,
	1085, 1075, 1076, 1077, 1078, 0, 1073, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 1087, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1085, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 1050, 1051, 0, 1080, 1081, 1082, 1090,
	1091, 1092, 0, 0, 0, 0, 1088, 1084, 0, 1083,
	0, 0, 0, 1818, 0, 0, 1053, 0, 0, 1094,
	1825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 1079, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 1086, 0, 0, 1064, 1065, 1071,
	1070, 1066, 1067, 1068, 1089, 0, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0, 0,
	0, 1075, 1076, 1077, 1078, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 1050, 1051, 0, 1080, 1081,
	1082, 1090, 1091, 1092, 0, 0, 0, 0, 0, 0,
	0, 1083, 1087, 1095, 0, 0, 0, 0, 1053, 0,
	1086, 1094, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068,
	1089, 1093, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 0, 1052, 0, 0, 0, 1085, 0, 1072, 0,
	0, 0, 1073, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 1076, 1077, 1078, 0, 0, 0,
	0, 1079, 1058, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 1087, 1095, 0, 0, 0, 0,
	0, 0, 1088, 1050, 1051, 0, 1080, 1081, 1082, 1090,
	1091, 1092, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 1085, 1094,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 1072, 0, 0, 1084,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 1064, 1065, 1071, 1070, 1066, 1067, 1068,
	1089, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 1075, 1076, 1077, 1078, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 1088, 1050, 1051, 0, 1080, 1081,
	1082, 1090, 1091, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 1095, 0, 0, 0, 0, 1053, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 1085, 0, 1072, 0,
	0, 0, 1073, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 1064, 1065, 1071, 1070, 1066,
	1067, 1068, 1089, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 1076, 1077, 1078, 0, 0, 0,
	0, 1079, 1058, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 1087, 1095, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1297, 1327,
	1288, 1318, 1317, 0, 0, 1290, 1289, 0, 1085, 0,
	0, 1329, 1328, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	1086, 1315, 1314, 1064, 1065, 1071, 1070, 1066, 1067, 1068,
	1089, 1313, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1310, 1311, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 1301, 1299,
	1302, 1303, 1304, 1305, 1306, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	1298, 0, 1086, 0, 0, 1064, 1065, 1071, 1070, 1066,
	1067, 1068, 1089, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 0, 0, 0, 0, 0, 1300, 1309,
	0, 0, 0, 1419, 1417, 1418, 1421, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1293, 1308, 1297, 1327, 1288, 1318, 1317, 0, 0, 1290,
	1289, 1307, 1294, 0, 0, 1329, 1328, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 1324, 1325, 0,
	0, 0, 0, 0, 0, 0, 534, 0, 560, 0,
	0, 0, 0, 1323, 0, 1315, 1314, 0, 0, 1295,
	0, 0, 0, 0, 1330, 1313, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 1310,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	0, 0, 0, 0, 540, 0, 0, 0, 0, 0,
	0, 0, 546, 547, 0, 1296, 0, 556, 0, 0,
	0, 0, 1301, 1299, 1302, 1303, 1304, 1305, 1306, 0,
	1326, 561, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 0, 0, 0, 1292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 1298, 0, 0, 0, 0, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 0,
	0, 0, 0, 1309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 550, 0, 0, 545, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 1293, 0, 0, 0, 0, 562,
	0, 0, 0, 0, 0, 1307, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1291, 0,
	0, 1324, 1325, 0, 0, 0, 0, 0, 0, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 553, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 558, 0, 0, 0,
	564, 0, 0, 0, 0, 551, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557,
}
var sqlPact = [...]int{

	4131, -1000, -47, -1000, -1000, -1000, 85, -1000, -1000, -1000,
	84, 82, 81, -1000, 79, 78, 76, 73, 66, 65,
	64, 58, 55, 54, 51, -1000, 49, -1000, -1000, -1000,
	-1000, 45, 43, 42, 36, 34, 33, 32, -1000, 1107,
	21603, 30, 29, 1412, 35290, 28, -1000, 951, 26293, 1030,
	1492, -1000, 27, 1003, 34959, 718, 2524, 1039, 1544, 34625,
	21269, 1537, 1653, 34291, -1000, -1000, 33957, 23, 22, 21,
	20, 19, -1000, -1000, 33623, 17, 16, 15, 14, 13,
	12, 11, 10, 9, 8, 5, 4, 2, 1, -1000,
	0, -1, -3, -1000, 42394, -4, -9, -10, 1029, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -11, -12, -14, -15, -17, 72, -18,
	-19, -20, -26, -1000, 871, 351, 2468, 8168, 778, 970,
	961, 953, 949, 1005, 37276, 35290, -27, -63, -28, -1000,
	1988, 606, 18872, 4131, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25959, 25625,
	33289, 32955, 6095, 707, -1000, -53, 22267, 35290, -1000, 87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14387, 14041, 485, 87, -1000, -1000, -1000,
	32621, 23302, 32287, 1381, 31953, -1000, -1000, 31619, -1000, -1000,
	1807, 1556, 1536, 25291, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31288, 30954, 30620, 30286, 22957, 431, -1000, -1000,
	-1000, 17147, -1000, -1000, -1000, -1000, -29, -1000, -30, -1000,
	-31, -32, -33, -35, -36, -38, -1000, -39, -40, -1000,
	-41, -42, -1000, -44, -185, 1009, 948, 29952, 1189, -1000,
	-1000, -52, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35290, -1000, 15077, -1000, 430, -1000, 1532, -1000, 15077, -1000,
	1177, -1000, -1000, -1000, -1000, -1000, 35290, -1000, -1000, -1000,
	-1000, -1000, -1000, 2111, 1089, 429, 29618, -1000, 1525, -1000,
	553, 690, -1000, -1000, -1000, 9203, 101, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1549, 22612, 1163, 1900,
	1790, 2104, 1356, 1788, 1751, 1748, 1713, 1709, 2102, 1021,
	2101, 1675, 967, 2099, 1630, 1169, 623, 2098, 1524, 1520,
	-1000, -1000, -1000, -1000, 880, -1000, -1000, -1000, 27617, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 871, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1263, 1848, 1848, 1848, 1931, 241,
	232, -1000, 72, -1000, 1465, -1000, 1081, -1000, -1000, -1000,
	-1000, -1000, 41675, -1000, -1000, 15077, 15077, 15077, 15077, 15077,
	1079, 449, -1000, 427, 426, 7477, -1000, -1000, 2088, -1000,
	-1000, -1000, 243, -1000, -1000, 15077, 87, -1000, -1000, -1000,
	-1000, 425, 2094, -1000, 605, -1000, -1000, -1000, 558, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1581, 422,
	421, 417, -1000, 413, -1000, -1000, 411, 409, 406, 403,
	399, 397, 396, 395, 393, 392, 391, 389, 388, 387,
	383, 929, -1000, 580, -1000, -1000, 580, 580, -1000, 359,
	359, 361, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	359, -1000, -1000, -1000, 522, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 382, 858, 1210, -1000,
	-1000, 1210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 705,
	36614, -56, 35290, -1000, 374, -56, -1000, -1000, 373, -1000,
	10238, 10238, -1000, -1000, -1000, -1000, -1000, 9548, 1949, -1000,
	3698, -203, 245, 523, -1000, 17837, 20591, -1000, -1000, 910,
	1741, 767, -1000, 894, 1736, 457, -1000, 1191, -1000, 797,
	1730, -186, 1614, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23633, 22267, -53, -54, -1000, -1000, -1000, 5750, 41675, -1000,
	41675, -1000, 782, 19560, 87, -1000, -1000, -1000, -1000, 368,
	1273, 565, 1270, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 247, -1000, 29284, 565, 1265, -1000, -1000, -1000,
	27617, -1000, 35290, -1000, 35290, -1000, 806, -1000, 36945, 113,
	1729, -1000, -1000, 113, 1724, -1000, 112, 1712, -1000, -1000,
	1237, 1710, -1000, -139, 1708, -1000, -1000, -1000, 15077, -64,
	-1000, -1000, -1000, 606, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28950, 21935,
	1267, 412, 41675, 2001, 42314, 23633, 41675, 21935, -1000, -1000,
	35290, -1000, 15077, -1000, 1986, 1311, -57, -1000, -1000, -1000,
	-1000, -1000, 1300, 1344, 681, 1193, 9203, 9203, 1802, -1000,
	91, 6095, -1000, -1000, -1000, -1000, 28616, -1000, -1000, -1000,
	1075, 35290, -1000, -1000, 1580, -1000, 21935, 35290, -1000, 35290,
	-1000, 35290, -1000, 35290, -1000, 35290, -1000, -1000, -1000, -1000,
	-1000, 428, -1000, 1558, -1000, -1000, 35290, -1000, 1299, -1000,
	-1000, -1000, 28285, 27951, -1000, 992, 737, -1000, -1000, 114,
	-1000, -1000, 1263, -1000, 1199, 1389, 13695, 1373, 15077, 72,
	-1000, -1000, 72, 72, 8858, -1000, -1000, -1000, 35290, -1000,
	42080, 42314, 6095, 721, 15077, 15077, 15077, 15077, 15077, 15077,
	15077, 15077, 15077, 15077, 15077, 15077, 15077, 15077, 15077, 15077,
	15077, 15077, 15077, 15077, 15077, 15077, 15077, 15077, 15077, 15077,
	15077, 15077, 15077, 15077, 15077, 15077, 1427, 15077, 700, 15077,
	15077, 15077, 15077, 1531, 1036, 358, 1105, -1000, 2061, 2061,
	2061, 41823, 41823, 344, 449, -1000, 15077, -1000, 124, 15077,
	232, 39902, -55, 7132, -1000, -1000, -1000, 13350, 578, 41675,
	87, 6440, -1000, 2087, 848, 1591, 1449, 367, 474, 471,
	469, 468, 15077, 15077, 13005, 12659, 12313, 15767, 11967, 15077,
	7822, 15077, 15077, 15077, 15077, 11621, 11275, -1000, 366, -1000,
	-1000, -1000, -1000, 2086, -1000, -1000, 2084, -1000, 716, 715,
	2083, 1878, 551, -1000, -57, -1000, 36614, -1000, 35290, -56,
	1984, 35290, -1000, 90, -1000, 40660, -1000, 90, -67, -1000,
	1349, 1348, 19216, 1575, 1100, 1100, 1100, -1000, 365, 443,
	523, 5041, 10929, -1000, 26624, 1116, 119, 228, 17492, 1949,
	-1000, 35290, -84, 1006, -1000, 24957, 1833, 1829, 1850, 27617,
	1947, 124, 1869, 1519, 699, 27617, 1863, 694, 1945, 124,
	1515, 692, 35290, 6095, 1860, 520, -1000, 35290, -1000, -1000,
	-1000, 1505, -69, -1000, -1000, 24626, 1973, 1706, -1000, 943,
	-1000, 1693, 1970, 35290, 1176, 1261, -1000, -1000, 728, 1667,
	571, 376, 1967, 376, 19903, -1000, 35290, -1000, 35290, -1000,
	-1000, 35290, -1000, 35290, -1000, 35290, 35290, -1000, 35290, 23633,
	23633, -74, 41675, 2888, 24295, 682, -1000, 608, 24626, 407,
	-77, -1000, 786, -1000, -1000, -1000, -1000, 235, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 361, 929, 359, 359, 359, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 522, -1000, -1000, 580, 580, 580,
	-1000, -1000, -72, 1501, 514, -79, 635, -57, -1000, 1210,
	-1000, 1126, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2093, -1000, 2068, -1000, -1000,
	2081, -58, -1000, -58, -1000, 6095, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35290, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 375, -1000, -1000, -1000, -1000, -1000, -1000, 35290,
	35290, 35290, -1000, 27617, -1000, -1000, -1000, -1000, 41675, -1000,
	324, -1000, -1000, 41675, 873, 1363, -1000, 1363, -59, -1000,
	40538, 1342, 35290, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 550, 775, 775, 762, 762, 762,
	762, 2045, 1416, 472, 3336, 4505, 4505, 4505, 4505, 4505,
	4505, 4505, 4505, 304, 1197, 1197, 304, 304, 304, 304,
	304, 4505, 4505, 4505, 41823, 4572, 3485, 15077, 15077, 679,
	1025, 358, 3485, 15077, 3485, 3485, 3485, 3485, -1000, 1442,
	-1000, -1000, -1000, -1000, 1497, 357, 15767, 15767, -1000, -1000,
	-1000, 7477, 16112, -1000, -1000, -1000, -1000, 356, 15077, -1000,
	40092, -223, 207, -178, -1000, 15077, 442, -80, -1000, 816,
	-1000, 15077, -1000, -49, 15077, 15077, 15077, 205, -1000, 204,
	-1000, 676, -1000, 675, 672, 671, -1000, 350, 1086, 348,
	347, 15077, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41553, 37979, 202, -1000, 1496, -178, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 198, -1000, 196, -1000, 41363, -178, 194,
	38009, -1000, 15767, 15767, 15767, 7477, 341, 193, -1000, 40348,
	-1000, 41297, 10583, 10583, 10583, 192, 41107, 15077, -178, 37944,
	4426, 3749, -85, -87, -1000, -90, -1000, 2079, -96, 191,
	548, 546, 190, 1554, -1000, 1875, -1000, -1000, 340, -101,
	571, 10238, 18527, 6095, -1000, 571, 9548, -1000, 19216, 19216,
	1337, 1345, 19216, -1000, -1000, -1000, -1000, 26624, 456, 523,
	26624, -1000, 2078, 1370, 189, -1000, -1000, -1000, 35290, 339,
	-1000, 523, 184, 916, 35290, 35290, 35290, -1000, -1000, 1258,
	36283, 1254, 42314, 35290, -1000, 336, 334, 1340, 1339, 35290,
	35290, 35952, 35621, 35290, 909, 124, -1000, 531, 331, 35290,
	876, 530, 35290, 124, -1000, 330, 35290, 857, -1000, 527,
	1408, 1214, -1000, 771, 1489, 35290, 182, -103, -60, 42314,
	-1000, -1000, -1000, -1000, -1000, 35290, 343, 35290, 124, 35290,
	23633, 23633, 124, 35290, 1665, 1747, 479, 35290, 1389, 15077,
	1077, -1000, 18182, 588, 35290, 846, 68, -1000, -1000, -1000,
	512, 35290, -1000, -1000, 113, 113, -1000, 112, 1237, -1000,
	-139, -1000, 15077, -1000, -1000, 35290, 23633, -104, -1000, 615,
	614, -1000, 42314, -1000, 448, 691, -1000, 2077, 563, 35290,
	9203, 9203, -1000, 1357, -1000, -1000, 892, -1000, 899, -1000,
	-1000, -1000, -1000, 9203, -1000, -102, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 873, -1000, 15077, 2076, -1000, -1000, -1000,
	8858, -1000, -1000, -1000, 35290, -187, 15077, 3485, 3485, 15077,
	15767, 15767, -1000, 3485, -1000, -1000, -1000, -1000, -1000, 1469,
	326, 15077, 42314, 4541, 4298, -106, -1000, 15077, -70, -1000,
	15077, -1000, 39780, -1000, -1000, 447, 1745, -1000, 15077, 40917,
	181, 9893, -1000, 40850, -50, -50, -1000, 2091, 1276, 1219,
	923, 805, 2074, -1000, 20247, 576, 1106, 39590, 42080, 42314,
	-1000, 15077, -1000, -1000, 1466, 15077, -1000, 42080, 42314, 15767,
	15767, 15767, 15767, 15767, 15767, 15767, 15767, 15767, 15767, 15767,
	15767, 15767, 15767, 15767, 15767, 15767, 15767, 15767, 1330, 15767,
	2058, 2058, 2058, -76, 15077, -1000, 1538, 1466, 15077, 15077,
	42314, 164, 160, 159, -1000, 15077, -178, 15077, 15077, 15077,
	-1000, -1000, -1000, 156, -1000, 2073, -1000, -1000, -1000, -1000,
	1026, -1000, 407, -1000, 1446, -1000, -111, -1000, 1949, -1000,
	1446, -1000, -1000, 1337, -1000, 323, 15077, 19216, -1000, 441,
	-1000, -113, -1000, 26624, -1000, 440, -220, -1000, 507, -1000,
	523, 322, 35290, 26624, -1000, -1000, -1000, 665, 658, 1662,
	-1000, 1244, -1000, 599, -1000, 888, 15077, 16802, 319, 318,
	974, -1000, 1661, 1237, 1640, 1237, -1000, -84, 999, -1000,
	20935, 15077, -1000, 657, 20935, -1000, -1000, 15077, -1000, 655,
	20935, 563, 1459, 733, -1000, 755, -1000, 1384, -1000, 24626,
	308, 35290, 287, -1000, 281, -1000, 565, -1000, 278, 35290,
	1317, 479, 23964, -1000, 565, 846, -1000, 41675, -1000, 846,
	8513, 1856, -114, -1000, -1000, -1000, 571, 19903, 19216, 9548,
	-121, -1000, -1000, -1000, -1000, 41675, -102, 1811, 1811, -1000,
	2066, -1000, 437, 155, -1000, 27286, -102, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35290, 1125, 39524, -1000, 1830, 6095,
	2053, 3485, 3326, 2466, 15077, 42314, 41945, -122, 15077, 15077,
	-1000, 154, 15077, 436, 41675, -1000, -1000, -1000, 41675, 15077,
	2060, 15077, 153, 152, 151, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 150, -1000, -1000, 37607, 15077, 145, -1000,
	143, 142, 41675, 1538, 41675, -1000, -1000, 547, 547, 815,
	815, 815, 815, 2058, 561, 1053, 183, 488, 488, 488,
	524, 984, 984, 488, 488, 488, 1456, 1323, 275, 38264,
	15077, 141, -1000, -1000, 41675, 41675, 140, -1000, -1000, -1000,
	-178, 231, 39334, 39212, -1000, 139, 6095, 35290, 35290, 136,
	1435, 1925, -1000, 19216, 1435, -1000, 35290, 41675, -1000, -203,
	-1000, 2054, -1000, -1000, 1370, -1000, 5400, 26624, 35290, -133,
	-1000, 35290, 35290, 35290, 1634, -1000, 2513, -1000, 39022, -141,
	-1000, 272, 1893, 15077, -1000, -1000, 271, 16802, 35290, -1000,
	1341, 1367, 629, 35290, -1000, 35290, -1000, 35290, 35290, 35290,
	-1000, 270, 87, -142, 35290, -1000, -144, 35290, -1000, -1000,
	23633, 714, -1000, -1000, 1397, -1000, 16802, 269, 35290, 24626,
	1966, -1000, 16802, 1164, 1322, 479, 23964, -1000, 728, -1000,
	-1000, -115, -1000, 305, 124, 846, -1000, -120, -1000, 505,
	1783, -1000, 1776, 435, -1000, -1000, -123, 268, -1000, 493,
	492, -1000, -1000, -1000, -1000, 1830, 15077, 15077, 41945, -147,
	-1000, 3485, 3485, -1000, 38956, -1000, 41675, -1000, 40850, -1000,
	-1000, -1000, -1000, 965, -1000, 38766, -1000, -1000, -1000, -1000,
	15767, 1455, 267, 42314, 38644, -1000, -1000, 15077, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 568, 15077, 15077, 1949, 568,
	-152, 523, -1000, -1000, -1000, 2032, -1000, -155, -1000, -1000,
	-1000, -1000, 35290, -1000, 35290, -1000, 6095, 35290, 1462, 1228,
	-1000, -1000, 1335, 266, 15767, 35290, -1000, 997, 16802, 1830,
	87, 6095, 1830, 38454, 6440, -157, -158, 1222, -1000, 1220,
	15077, -1000, 42314, 1237, 1237, -1000, 653, 651, 15077, 648,
	-1000, 643, -1000, -139, 20935, 983, -160, 16802, -165, 134,
	124, -166, 35290, -1000, 479, 23964, -1000, 1747, 1758, 35290,
	1844, -1000, -1000, 263, 260, 258, -1000, 26955, 26955, 23633,
	23633, -1000, 3485, 3485, -1000, -1000, 132, 1106, 1922, -1000,
	4147, 15767, 42314, -167, -1000, 38388, -1000, 35290, 41675, -178,
	-1000, -1000, 26624, 433, -1000, -1000, 1204, -1000, -1000, 35290,
	1234, -1000, -1000, 15077, 38264, 255, 1384, 254, -1000, -1000,
	-1000, -1000, -1000, -1000, 1893, -49, -1000, 878, -1000, -1000,
	41675, 1888, -1000, -1000, 35290, 35290, -50, 253, 252, -1000,
	35290, 997, -173, -1000, 1384, -1000, 997, 251, 23964, -1000,
	1317, 732, -175, 35290, -1000, -1000, 6785, 23633, 23633, -1000,
	-180, -1000, -1000, -1000, 887, 15077, 4147, -188, -1000, -1000,
	-140, -1000, 1954, -1000, -1000, -1000, -1000, 1628, 38198, 1285,
	35290, -1000, 35290, 1830, 131, 35290, 607, 6095, -1000, -1000,
	128, 15077, 15077, 250, 1384, 997, -1000, 1384, 16802, -1000,
	1322, 800, -1000, 571, -1000, -189, -190, -1000, 120, 15422,
	15422, -178, -1000, 35290, 249, 1606, -1000, 1131, 1104, 106,
	-191, -1000, -1000, 247, -1000, 15077, -1000, 2060, -196, -197,
	35290, -1000, 1384, -1000, -208, -1000, 19903, -1000, 563, 563,
	-1000, -1000, -1000, 16457, 1022, 824, 40158, -1000, -1000, -1000,
	35290, -1000, 1160, 1149, 852, -1000, -1000, -1000, -1000, -1000,
	1285, 41675, -1000, -1000, -209, -1000, 997, -181, -1000, -1000,
	2008, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1763, -1000,
	620, 1235, 1235, 1131, 1184, 1384, -1000, 14732, -1000, 2017,
	-1000, -1000, 1313, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2506, 2504, 1589, 1933, 2502, 2501, 2499, 2496, 2494,
	2488, 2486, 2485, 2482, 2473, 2471, 2466, 2465, 2463, 2461,
	2459, 2458, 2455, 2454, 1894, 2449, 1884, 2447, 2445, 2438,
	2432, 2431, 1877, 2430, 2428, 2427, 2425, 1875, 2423, 1873,
	2416, 2415, 1867, 2412, 2404, 2402, 1865, 2400, 1863, 2398,
	88, 107, 1842, 2397, 2394, 1812, 1807, 1805, 2393, 1797,
	2392, 2388, 1784, 1727, 2387, 89, 2386, 2385, 2384, 1658,
	1623, 2383, 2382, 2380, 150, 2366, 1616, 2364, 2360, 2359,
	2356, 2355, 2350, 2349, 2348, 2345, 2344, 2342, 2337, 2336,
	2335, 2328, 2327, 2324, 2321, 2319, 154, 2316, 2306, 1614,
	1596, 2304, 2303, 30, 26, 9, 63, 19, 141, 2694,
	133, 2301, 2299, 2296, 2295, 2294, 2293, 39, 97, 92,
	2291, 116, 2290, 2289, 47, 29, 18, 17, 84, 101,
	2288, 2285, 1043, 21, 2283, 2282, 129, 2281, 54, 20,
	2029, 151, 149, 111, 115, 2280, 2276, 2270, 38, 117,
	2, 2269, 2268, 14, 79, 25, 2267, 34, 24, 2265,
	2264, 125, 2263, 59, 93, 1519, 108, 121, 16, 99,
	2262, 72, 10, 58, 2258, 2257, 152, 43, 2256, 42,
	76, 137, 2251, 56, 155, 124, 80, 128, 132, 2250,
	2248, 2247, 127, 2246, 114, 98, 2244, 2243, 73, 2241,
	100, 131, 2239, 2235, 2233, 86, 2225, 119, 2224, 2223,
	153, 146, 110, 6, 40, 65, 11, 1492, 1488, 134,
	81, 50, 32, 2216, 2500, 1235, 1050, 36, 102, 78,
	62, 103, 51, 85, 140, 53, 2214, 2213, 130, 2209,
	2208, 2206, 2200, 2197, 104, 2196, 2195, 23, 2194, 77,
	27, 52, 91, 31, 70, 123, 109, 144, 94, 2193,
	66, 120, 2191, 96, 2190, 2189, 1639, 113, 2186, 2185,
	2181, 1484, 1087, 975, 71, 2178, 2177, 400, 28, 2176,
	2175, 74, 2169, 112, 106, 95, 139, 227, 240, 2167,
	118, 35, 2164, 37, 33, 0, 636, 430, 2162, 122,
	68, 2161, 2152, 2151, 2150, 22, 3, 8, 4, 5,
	7, 57, 44, 2148, 2146, 126, 82, 69, 2144, 148,
	2143, 2142, 2140, 48, 2137, 15, 2136, 12, 2135, 2131,
	13, 1, 2125, 2124, 147, 2122, 87, 2120, 1959, 2119,
	142, 2118, 2116, 1613, 2115, 46, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 9, 6, 6, 6,
	6, 6, 11, 11, 12, 20, 15, 22, 10, 18,
	16, 14, 14, 19, 19, 119, 119, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 116, 116, 121, 121, 121, 123, 123, 120,
	120, 115, 115, 24, 24, 63, 63, 106, 56, 56,
	56, 293, 293, 294, 294, 102, 102, 103, 103, 103,
	103, 104, 104, 105, 105, 105, 30, 30, 30, 26,
	26, 26, 26, 26, 27, 27, 28, 28, 31, 31,
	31, 31, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 39, 39, 40, 40, 40, 40, 40,
	40, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 42, 42, 47, 47, 47, 45, 45, 45, 44,
	44, 44, 43, 43, 43, 46, 46, 46, 167, 167,
	166, 166, 170, 170, 48, 48, 48, 48, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 51, 51,
	51, 51, 51, 51, 51, 262, 262, 261, 49, 49,
	236, 236, 52, 52, 193, 193, 53, 53, 53, 53,
	53, 54, 54, 64, 64, 334, 334, 334, 338, 338,
	339, 339, 340, 340, 340, 340, 340, 340, 340, 336,
	336, 59, 59, 59, 59, 60, 60, 60, 61, 61,
	101, 101, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 70, 70, 70, 72, 69, 69, 69, 71, 71,
	71, 71, 73, 73, 74, 74, 74, 74, 74, 75,
	75, 287, 285, 285, 286, 286, 146, 146, 146, 146,
	146, 147, 147, 147, 292, 292, 292, 292, 292, 292,
	291, 291, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 88,
	88, 88, 96, 96, 96, 96, 96, 96, 96, 77,
	77, 82, 82, 82, 82, 82, 78, 78, 83, 83,
	84, 84, 85, 85, 85, 85, 85, 85, 79, 79,
	79, 79, 87, 87, 87, 87, 86, 86, 92, 92,
	92, 92, 92, 92, 89, 89, 89, 89, 90, 90,
	90, 93, 93, 93, 93, 80, 80, 81, 81, 94,
	94, 95, 95, 95, 95, 95, 91, 91, 91, 335,
	335, 337, 337, 57, 57, 35, 35, 36, 36, 148,
	148, 149, 149, 215, 215, 215, 215, 150, 150, 122,
	122, 122, 214, 303, 303, 304, 304, 304, 304, 304,
	304, 305, 305, 305, 305, 305, 305, 305, 301, 301,
	302, 299, 299, 300, 300, 300, 300, 341, 341, 213,
	213, 153, 153, 308, 308, 308, 308, 306, 306, 306,
	306, 306, 309, 307, 310, 310, 310, 310, 310, 248,
	248, 248, 98, 98, 37, 37, 37, 128, 128, 38,
	38, 34, 34, 34, 197, 197, 157, 157, 253, 253,
	253, 139, 139, 117, 117, 117, 17, 13, 13, 13,
	13, 13, 13, 23, 23, 21, 21, 198, 198, 199,
	199, 58, 58, 62, 62, 67, 67, 97, 97, 97,
	97, 97, 97, 25, 25, 25, 25, 29, 29, 29,
	29, 66, 66, 343, 343, 135, 135, 135, 135, 136,
	136, 210, 210, 211, 211, 344, 344, 212, 212, 212,
	130, 129, 131, 131, 33, 33, 33, 124, 124, 125,
	125, 126, 126, 127, 127, 345, 345, 55, 55, 55,
	100, 100, 142, 142, 207, 207, 207, 209, 209, 208,
	208, 208, 183, 183, 183, 99, 99, 162, 162, 172,
	172, 173, 173, 259, 174, 174, 65, 65, 109, 109,
	107, 107, 107, 107, 107, 107, 108, 108, 108, 110,
	110, 110, 110, 110, 110, 110, 113, 113, 113, 114,
	114, 114, 112, 112, 316, 316, 316, 319, 319, 315,
	317, 317, 318, 318, 342, 342, 184, 184, 184, 152,
	151, 151, 155, 155, 154, 156, 156, 252, 252, 252,
	181, 181, 181, 181, 202, 202, 200, 200, 201, 201,
	203, 203, 204, 204, 204, 205, 205, 206, 206, 180,
	180, 232, 232, 111, 111, 111, 161, 161, 161, 163,
	163, 222, 222, 222, 223, 223, 221, 221, 221, 221,
	254, 254, 254, 254, 254, 254, 254, 254, 332, 332,
	332, 333, 333, 251, 251, 255, 255, 255, 255, 255,
	255, 249, 249, 249, 249, 250, 250, 260, 260, 187,
	187, 187, 187, 185, 185, 186, 186, 256, 256, 256,
	256, 182, 182, 257, 257, 257, 216, 216, 263, 263,
	263, 281, 281, 160, 160, 160, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 265, 265, 265, 265, 267,
	267, 267, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	280, 280, 280, 280, 280, 268, 268, 275, 275, 276,
	276, 277, 278, 269, 269, 270, 270, 271, 272, 279,
	279, 279, 279, 283, 283, 273, 273, 273, 273, 273,
	274, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 195, 195, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 226,
	226, 226, 226, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 311, 311, 311, 311, 311, 311,
	311, 311, 313, 313, 314, 314, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 320, 320, 321, 321,
	323, 323, 324, 324, 325, 326, 326, 326, 327, 328,
	328, 322, 322, 329, 329, 329, 330, 330, 331, 331,
	331, 331, 331, 238, 238, 239, 240, 246, 246, 246,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 137, 137, 137, 137,
	137, 169, 169, 168, 168, 235, 235, 233, 233, 237,
	237, 188, 188, 282, 282, 282, 282, 282, 282, 282,
	189, 189, 189, 196, 190, 190, 191, 191, 191, 191,
	191, 229, 230, 192, 192, 192, 231, 231, 241, 245,
	245, 244, 243, 243, 242, 242, 219, 219, 220, 220,
	218, 217, 177, 177, 176, 176, 175, 175, 346, 346,
	247, 247, 178, 178, 179, 171, 171, 258, 258, 258,
	258, 164, 164, 144, 144, 165, 165, 140, 140, 143,
	143, 141, 141, 141, 141, 158, 158, 159, 159, 138,
	138, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 284, 284, 284, 234, 132, 132, 132, 133,
	133, 134, 134, 289, 289, 289, 290, 290, 290, 290,
	288, 288, 288, 288, 288, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 4, 6, 6, 6, 5, 5, 7, 7,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 2, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 4, 6, 7, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 7, 7, 7, 4, 5, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 7, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 2, 3, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 1, 1, 3, 3,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 374, -4, -24, -26, -30, -31,
	-53, -39, -40, -41, -52, -48, -54, -55, -56, -57,
	-49, -63, -62, -64, -67, -65, -58, -59, -68, -76,
	-97, -98, -99, -100, -5, -6, -7, -8, -9, 23,
	34, -27, -28, 47, 71, -37, -32, 73, 94, -318,
	98, -42, -46, 102, 109, 112, 134, 145, 226, 232,
	253, 255, 257, 264, -107, -109, 251, -60, -61, -69,
	-70, -71, -72, -101, 275, -77, -78, -79, -80, -81,
	-82, -83, -84, -85, -86, -87, -88, -89, -90, -91,
	-92, -93, -94, -95, 278, -25, -29, -66, 316, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, -33, -34, -35, -36, -38, -316, -43,
	-44, -45, -47, -110, -108, 371, 252, 325, 111, 35,
	287, 61, 105, 259, 341, 348, -113, -111, -112, -114,
	268, 333, 297, 375, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 2, 297, 336,
	87, 153, 237, -334, 2, -165, 297, 87, -141, -132,
	364, 4, -295, -297, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 173, 174,
	175, 178, 177, 182, 185, 188, 190, 191, 192, 195,
	193, 197, 198, 200, 199, 205, 207, 208, 210, 213,
	216, 219, 222, 223, 224, 225, 226, 228, 230, 232,
	234, 235, 236, 237, 238, 240, 241, 243, 244, 245,
	246, 247, 251, 249, 250, 252, 253, 254, 255, 257,
	259, 260, 262, 276, 277, 288, 264, 265, 266, 267,
	271, 269, 272, 273, 275, 278, 280, 283, 286, 287,
	289, 292, 293, 290, 285, 296, 298, 299, 300, 301,
	302, 303, 304, 311, 312, 316, 317, 318, 319, 322,
	323, 324, 325, 327, 330, 331, 332, 337, 342, 343,
	344, 345, 346, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 89, 91, 92, 108,
	113, 114, 124, 125, 126, 136, 138, 147, 148, 151,
	158, 160, 161, 162, 163, 164, 166, 180, 194, 204,
	206, 217, 221, 229, 231, 239, 261, 270, 281, 282,
	291, 294, 306, 307, 308, 313, 314, 329, 333, 334,
	374, 374, 2, 170, 236, -140, -132, 87, 374, 2,
	297, 326, 336, -197, 87, 321, -132, 232, 22, 2,
	96, 157, 324, 323, 22, 228, 269, 299, 301, 2,
	374, 2, 336, 297, 153, 87, 326, -132, 2, -51,
	2, 371, -50, -4, -32, -42, -52, -48, -24, -26,
	-37, -39, -46, -56, -55, -57, -59, -63, -62, -65,
	-69, -70, -76, -99, -100, 73, 102, 275, -338, 2,
	22, -339, -340, 73, 102, 134, 268, 157, 96, 323,
	297, 2, 170, 2, -132, 2, -334, 2, 170, 2,
	-338, 2, -132, 2, -136, 2, 264, -132, 374, 374,
	374, 374, 374, 185, 55, 261, 272, -74, 312, -73,
	306, -287, -75, 2, -166, 195, -132, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 2, -96, 272, 34, 55, 22,
	60, 88, 135, 153, 154, 174, 68, 69, 235, 185,
	171, 311, 175, 273, 298, 312, 73, 327, 302, 110,
	4, 87, 195, 274, 306, 374, 374, 374, -342, 2,
	297, 374, 374, 374, 374, 374, -108, -110, -109, 374,
	374, 374, 374, -154, -155, 320, 165, 107, 215, -107,
	-109, 2, -316, -96, 272, 2, 55, 22, -285, 2,
	-247, 211, -224, 93, -226, 362, 363, 357, 201, 347,
	-238, -228, -241, 108, 261, 371, -140, -227, 377, 9,
	-313, -109, 29, -239, -240, 49, -132, 7, 8, 5,
	6, -138, -265, -234, -274, 315, 115, 203, -311, -312,
	4, -295, -289, -266, -276, -270, -273, 166, 58, 79,
	80, 83, 81, 84, 274, 326, 50, 28, 113, 114,
	221, 229, 294, 313, 314, 147, 204, 148, 56, 136,
	180, 101, 37, 39, 41, 42, 51, 52, 89, 91,
	92, 124, 125, 126, 158, 160, 161, 162, 163, 164,
	206, 239, 281, 291, 307, 308, 334, -296, -277, -278,
	-271, -272, 74, 116, 133, 156, 149, 168, 172, 181,
	183, 196, 218, 220, 258, 279, -279, 278, -343, 2,
	312, 312, 2, -343, 2, -343, 2, -135, 2, 312,
	309, -319, 240, -315, -132, -319, 374, 374, 376, 374,
	-151, -152, 2, 22, 99, -179, 2, 371, -254, 2,
	369, -256, -140, -109, -255, 371, 212, -3, 2, -256,
	147, -140, 2, -256, 147, -140, 2, -132, 2, -143,
	147, -140, -288, 4, -295, -297, -296, -298, 58, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 68, 73, 78, 79, 81, 80,
	82, 83, 84, 93, 95, 97, 99, 100, 103, 105,
	107, 115, 117, 129, 131, 132, 134, 137, 139, 150,
	153, 155, 165, 167, 176, 179, 184, 186, 187, 201,
	202, 203, 209, 211, 212, 214, 215, 227, 233, 242,
	256, 268, 274, 284, 295, 297, 305, 309, 310, 315,
	320, 321, 326, 328, 335, 336, 338, 339, 340, 341,
	309, 376, -165, -158, -132, -218, -217, 373, -224, 2,
	-224, 2, 132, 371, -176, -177, -217, -218, 2, -166,
	147, -293, 147, 2, -291, 9, -290, 5, 4, -295,
	-297, -296, -166, 2, 153, -132, 147, 2, -132, 22,
	132, 2, 167, 2, 167, 2, -257, 2, -256, -167,
	147, 2, -166, -167, 147, 2, -144, 147, 2, -143,
	-132, 147, 2, -294, 147, 2, -293, -193, 371, -262,
	2, -261, -290, 333, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 272, 211,
	376, -166, -224, -236, 371, 132, -224, 211, -132, 2,
	276, 2, 371, -74, 53, 312, -211, 2, -212, -129,
	-130, -131, 169, 234, 238, 346, 309, 352, 132, -285,
	-170, 373, -96, 2, -293, 2, 276, 2, 235, 273,
	55, 132, 2, 2, -335, 2, 211, 132, 2, 132,
	2, 132, 2, 132, 2, 132, 2, 2, 235, 273,
	2, 129, 2, 311, 2, 2, 132, 2, 169, 234,
	288, 2, 297, 336, 2, 132, 132, 346, 2, -182,
	-256, -154, -155, -181, -200, -201, 184, 117, 209, -184,
	22, 99, -184, -184, 44, 372, 372, -96, 276, 2,
	10, 11, 57, 33, 362, 363, 364, 365, 127, 366,
	367, 360, 361, 359, 350, 351, 354, 355, 356, 70,
	353, 352, 63, 189, 263, 118, 119, 120, 121, 248,
	13, 14, 15, 26, 214, 183, 347, 149, 279, 357,
	16, 17, 18, 168, 36, 150, -137, -145, -224, -224,
	-224, -224, -224, 220, -175, -219, 369, -109, 371, 371,
	-109, -224, -168, 371, 7, -109, -233, 369, -242, -224,
	-176, 371, 5, 371, 5, -320, 342, 129, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 231, -283, 337,
	-283, -283, -267, 371, -267, -268, 371, -267, 343, 348,
	371, 346, 22, -210, -211, -210, 309, -136, 376, -319,
	-159, 371, -179, -171, -258, -224, 364, -171, -178, -247,
	74, -187, 172, 196, 133, 181, 258, 156, 7, -51,
	-221, 377, 371, 364, -251, 348, -109, -255, 371, -254,
	-140, 371, -119, 249, -118, 21, 23, 102, 331, 108,
	285, 303, 111, 265, 249, 108, 111, 249, 285, 303,
	265, 249, 108, 377, 111, -293, -141, 376, -288, 364,
	289, 372, -164, -140, -177, 371, -153, 201, -128, -317,
	341, 201, -153, 371, -133, 147, 2, -132, -317, 201,
	-257, -142, -140, -142, 275, -132, 30, -121, 376, 48,
	254, 108, -121, 108, -121, 376, 108, -121, 108, 376,
	108, -168, -224, 372, 376, -334, -340, 73, 371, 30,
	-235, -263, -264, -266, -275, -269, -273, -274, 40, 46,
	45, 304, 194, 270, 282, 329, 151, 38, 210, 159,
	4, 158, 160, 161, 162, 163, 164, 281, 37, 239,
	125, 126, 124, 101, 92, 91, 206, 42, 41, -277,
	-278, -271, -272, 89, 307, 308, 166, 39, 52, 51,
	334, 291, -294, -334, -287, -168, 30, -211, 2, -344,
	376, 182, -147, 188, 200, 141, 212, 344, -292, 5,
	4, -234, -248, 93, 185, -274, 8, 363, -284, 7,
	362, -286, -285, -286, 77, 373, -288, -166, 22, 277,
	2, -287, -337, 129, -334, -287, -287, -287, -287, -287,
	272, -51, 129, -132, 182, -287, 2, -287, 2, 297,
	153, 297, -121, 376, -181, -201, -200, -203, -224, 22,
	-206, 123, 197, -224, -226, -108, -108, -108, -156, -252,
	-224, 233, 153, -287, -281, -263, -280, 244, 245, 243,
	247, 246, -263, -288, 306, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, -224, 183, 149, 279,
	36, 150, -224, 309, -224, -224, -224, -224, 193, 201,
	203, 315, 115, 322, 99, 207, -346, 295, 32, -231,
	-109, 371, -246, 27, 284, 22, -238, 261, 371, -219,
	-224, -220, -169, -168, 372, 376, -169, -237, -233, -245,
	-244, 338, 372, -168, 335, 22, 99, 364, 2, 7,
	-194, 345, 192, 90, 142, 191, -195, 267, -321, 122,
	137, 371, 372, 2, 372, 2, 372, 2, 372, 2,
	-224, -224, -188, 2, -282, -168, 4, 345, 192, 90,
	142, 191, 267, -188, 2, -189, 2, -224, -168, -190,
	-225, -226, 362, 363, 357, 371, 261, -191, 2, -224,
	-169, -224, 43, 179, 310, -192, -224, 132, -168, -224,
	-224, -224, -168, -168, 2, -168, 2, 371, 7, 7,
	306, 306, 7, 64, 65, 346, -136, -315, 30, -158,
	-161, 376, 132, 30, 4, -161, 376, 372, 172, 172,
	-254, -187, 172, -185, 218, -185, -185, -332, 371, 370,
	-251, -288, 369, 378, -169, 2, -250, -249, 30, -132,
	216, 372, -140, 376, 309, -198, 68, 59, -214, 147,
	59, -299, -132, 68, -300, 54, 321, 233, 131, -198,
	68, -198, 68, 68, -256, 33, -65, 66, 132, 309,
	-256, 66, 309, 33, -65, 132, 309, -143, -288, 66,
	-260, 349, -132, 132, 372, 376, -148, -158, -149, -132,
	-215, -214, -301, -302, -299, 153, 321, 116, 30, 108,
	225, 108, 30, 211, 201, -124, 300, 108, -216, 339,
	-207, -65, 371, 93, 30, -207, -172, -173, -259, -174,
	-140, 371, -132, -166, -167, -167, -143, -144, -132, -293,
	-294, 372, 376, -51, -261, 309, 328, -149, -50, 73,
	102, 372, 376, -160, 29, 369, -194, 371, -260, 132,
	352, 309, 372, 312, -212, -146, 238, 283, 250, 271,
	8, 7, 7, 376, -288, -336, -132, 272, -51, -140,
	-143, -140, -256, -204, -284, 371, 363, -205, 261, 262,
	376, -117, 31, 97, 173, -140, 346, -224, -224, 309,
	-346, 295, -231, -224, 193, 203, 315, 115, 322, 99,
	207, 132, 371, -225, -225, -168, -228, 371, -168, 370,
	380, 372, -224, 370, 370, 376, -243, -244, 103, -224,
	-155, 376, -154, -224, -168, -168, 372, 372, 309, 309,
	309, 309, 371, -326, 219, 371, 371, -224, 30, 376,
	372, 132, 372, 372, -196, 227, 372, 10, 11, 362,
	363, 364, 365, 127, 366, 367, 360, 361, 359, 350,
	351, 352, 63, 189, 263, 13, 14, 15, 168, 150,
	-225, -225, -225, -168, 371, 372, -229, -230, 132, 129,
	30, -192, -192, -192, 372, 132, -168, 376, 376, 376,
	372, 372, 372, 7, 372, 376, 372, 346, 346, 372,
	129, 65, 371, 372, -216, -258, -163, 2, -254, -288,
	-216, -247, -254, -254, -186, 328, 211, 172, -254, -249,
	372, -333, 7, -251, -250, 7, -223, -222, 130, 199,
	372, -132, 371, -251, 372, -118, -140, -132, -132, 201,
	-214, 147, -123, 201, -263, -132, 371, 371, 173, 173,
	-132, -132, 147, -132, 147, -132, -132, -119, 249, -65,
	346, 371, -140, 249, 346, -132, -65, 371, -132, 249,
	346, -102, 146, 207, 289, 132, -140, 372, 372, 376,
	-133, 153, -133, -65, -166, -293, -293, -65, -140, 108,
	-125, 104, -345, 352, -132, -202, -200, -224, -183, -209,
	256, 211, -164, 333, -132, -183, -162, 376, 132, 352,
	-164, -121, -121, -121, -121, -224, -336, -293, 372, -263,
	369, 370, 7, 7, -105, 341, -336, -285, -285, -129,
	319, 62, 238, -285, 376, -205, -224, -252, -140, 377,
	-224, -224, -225, -225, 132, 371, -224, -235, 26, 26,
	372, -169, 376, -220, -224, 372, -233, 105, -224, 305,
	372, 335, -155, -155, -155, 5, 192, 142, 191, -195,
	191, -195, -195, 7, -327, -132, 371, 339, -154, 372,
	-281, -263, -224, -229, -224, -281, -263, -225, -225, -225,
	-225, -225, -225, -225, -225, -225, -225, -225, -225, -225,
	-225, -225, -225, -225, -225, -225, 99, 201, 207, -225,
	376, -169, -230, -229, -224, -224, -263, 372, 372, 372,
	-168, -224, -224, -224, 372, 7, 237, 87, 297, -50,
	-180, 137, -260, 376, -180, -186, 371, -224, -254, 370,
	372, 376, -250, 370, 376, 379, 352, -251, 371, -158,
	-249, 309, 309, 108, 201, 330, -303, -300, -224, -157,
	-253, -132, -314, 371, -311, -312, -138, 371, 371, -116,
	102, 275, -199, 108, -121, 108, -121, 309, -198, 68,
	-227, -138, -132, -168, 309, -227, -168, 309, -227, -105,
	132, 296, 289, -150, 152, -215, 371, -133, 371, 371,
	-153, -128, 371, -132, -126, 178, -345, -291, -317, -183,
	-183, -171, 202, 67, 372, -216, -173, -163, -247, 372,
	-106, 75, -106, 7, 370, 372, -104, 213, -103, -132,
	5, -132, 212, 372, -117, -288, 26, 26, -224, -235,
	372, -224, -224, 372, -224, 370, -224, 5, -224, 372,
	372, 372, 372, -328, -132, -224, 372, 372, 372, -230,
	132, 99, 207, 371, -224, 372, 372, 376, 372, 372,
	372, -288, -132, -140, 372, -232, 139, 44, -254, -232,
	-158, -221, 7, -222, -288, 369, -250, -158, 372, -132,
	-132, -214, 108, -304, 68, -305, 57, 116, 73, 201,
	203, 321, 233, 54, 93, 242, 372, 372, 376, -139,
	-176, 57, -139, -224, 371, -157, -158, 201, 93, 201,
	93, 86, 317, -132, -132, -140, -132, -132, 371, 372,
	-140, 372, -132, -294, 306, 150, -157, 371, -158, -148,
	30, -157, 211, -127, 177, -345, -291, -124, -208, 371,
	211, -65, -183, 352, 86, 86, 370, 376, 371, 352,
	352, -117, -224, -224, 372, 372, -155, -322, 224, 372,
	-225, 132, 371, -235, 372, -224, -323, 340, -224, -168,
	-323, 372, -251, 7, 372, -214, -132, -288, -132, 116,
	147, 203, 173, 371, -225, -140, -213, -341, 72, 293,
	-253, -117, -288, -117, 372, -168, 372, 372, 203, 203,
	-224, -263, -121, -121, 309, 309, -168, 309, 309, -227,
	222, 372, -157, 372, 372, -65, 372, -140, -345, -291,
	-125, 100, -158, 68, -179, -109, 371, 371, 371, -103,
	-104, -293, -293, 372, -155, 44, -225, -235, 372, 372,
	-324, -325, -132, -250, 370, -305, -133, 201, -224, -134,
	371, -150, 371, -139, -155, 242, -120, 57, -132, -132,
	-155, 371, 371, -140, -213, 372, -150, -213, 371, -291,
	-126, 323, 202, 372, -132, -294, -294, 372, -329, 237,
	262, -168, 372, 376, 30, 108, 372, -308, 190, -132,
	-158, -117, 372, -140, -115, 328, -288, 372, -168, -168,
	371, -150, -213, -150, -157, -127, 275, -216, 372, 372,
	372, -330, -331, 36, 318, 77, -224, -330, -325, -327,
	116, -306, -309, -307, 211, 133, 223, 280, 372, 372,
	-153, -224, 372, 372, -158, -150, 372, -172, -105, -105,
	-331, 230, 128, 261, 230, 128, -132, -307, 211, -309,
	211, 323, 96, -308, 372, -213, -216, 26, -310, 198,
	254, 48, 275, -310, -306, -122, 48, 254, -150, -331,
	20, 203, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 62, 0,
	0, 149, 151, 0, 0, 158, 160, -2, 0, 0,
	0, 181, 182, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 656, -2, 0, 291, 293, 302,
	304, 306, 308, 309, 0, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 372, 374, 376, 378, 380,
	381, 383, 385, 387, 0, 577, 579, 581, -2, 64,
	65, 66, 67, 68, 69, 77, 78, 79, 80, 71,
	73, 74, 76, 162, 164, 166, 168, 171, 692, 185,
	187, 189, 191, -2, 703, 0, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 669, 671, 673, 675,
	-2, 0, 0, -2, 7, 12, 14, 16, 19, 21,
	23, 25, 27, 29, 31, 33, 35, 37, 39, 42,
	48, 50, 52, 55, 57, 59, 61, 63, 0, 0,
	0, 0, 0, 0, 124, 275, 0, 1271, 1195, 1201,
	1202, 1226, 1227, 1228, 1245, 1246, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	150, 152, 153, 0, 0, 0, 1197, 1271, 159, 161,
	0, 0, 0, 0, 0, 544, 266, 1331, 268, 270,
	0, 0, 0, 0, 175, 176, 177, 178, 179, 180,
	183, 184, 0, 0, 0, 0, 0, 265, 263, 214,
	215, 0, 248, 249, 250, 251, 252, 254, 218, 220,
	221, 223, 225, 227, 229, 231, 233, 234, 236, 238,
	239, 241, 243, 244, 246, 545, 0, 0, 0, 272,
	278, 279, 280, 282, 283, 284, 285, 286, 287, 288,
	0, 130, 0, 464, 261, 259, 0, 126, 0, 574,
	0, 274, 575, 576, 571, 572, 1358, 600, 292, 294,
	303, 305, 307, -2, -2, 1448, -2, 316, -2, 324,
	1454, 0, 327, 328, 331, -2, 210, 353, 355, 357,
	359, 361, 363, 365, 367, 369, 371, 373, 375, 377,
	379, 382, 384, 386, 388, 389, 0, 0, 0, 393,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	392, 394, 395, 396, 0, 578, 580, 582, 0, 533,
	694, 163, 165, 167, 169, 172, -2, 667, 668, 186,
	188, 190, 192, -2, 0, 698, 698, 698, 0, 0,
	668, 666, 0, 295, 0, 297, 0, 393, 300, 301,
	332, 333, 1180, 1181, 897, 0, 0, 0, 0, 0,
	0, 999, 1001, 1421, 1448, 0, 1003, 1004, 0, 1006,
	1008, 1009, 0, 1012, 1013, 1165, 1197, 1211, 1212, 1213,
	1214, 0, 0, 1217, 0, 1219, 1220, 1221, 1067, 1023,
	-2, -2, 1209, 825, 826, 827, 828, -2, 1462, 1027,
	1030, 1033, 1036, 1037, 1040, 1041, 0, 1405, 1422, 1423,
	1444, 1445, 1453, 1457, 1458, 1429, 1441, 1430, 1417, 1427,
	1439, 1277, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1235, 859, 860,
	865, 866, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 868, 0, 602, 584,
	593, 602, 586, 587, 588, 589, 590, 591, 592, 595,
	0, 684, 1337, 687, 1208, 685, 670, 672, 0, 674,
	0, 0, 678, 700, 699, 733, 734, 0, 682, 683,
	693, 749, 787, 764, 755, 0, 0, 2, 70, 0,
	1429, 787, 72, 0, 1429, 787, 75, 0, 81, 0,
	1429, 1200, 0, 1240, 1241, 1242, 1243, 1244, 1462, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	0, 0, 276, 277, 1205, 1203, 1204, 0, 154, 155,
	156, 157, 0, 0, 1198, 1174, 1172, 1173, 170, 512,
	1429, -2, 1429, 536, 131, 132, 350, 351, 1236, 1237,
	1238, 1239, 512, 540, -2, 691, 1429, 616, 267, 269,
	0, 174, 0, 629, 0, 631, 0, 646, 793, 116,
	1429, 195, 208, 116, 1429, 198, 116, 1429, 201, 1193,
	116, 1429, 204, 205, 1429, 207, 133, 262, 0, 0,
	-2, 255, 257, -2, 253, 219, 222, 224, 226, 228,
	230, 232, 235, 237, 240, 242, 245, 247, -2, 0,
	0, 0, 463, 0, 0, 0, 573, 0, 599, 310,
	0, 313, 0, 315, 1416, -2, -2, 319, 603, 607,
	608, 609, 0, 0, 0, 0, 0, 0, 0, 329,
	211, 0, 390, 391, 399, 400, 0, 403, 424, 436,
	0, 0, 407, 409, 462, 411, 0, 0, 413, 0,
	415, 0, 417, 0, 419, 0, 421, 423, 425, 437,
	427, 693, 429, 0, 431, 435, 0, 440, 0, 442,
	443, 444, 0, 0, 450, 0, 0, 397, 398, 116,
	791, -2, 0, 662, 712, 713, 0, 0, 0, 0,
	696, 697, 0, 0, 0, 658, 659, 296, 0, 299,
	0, 0, 0, 0, 1100, 1101, 1102, 1103, 1104, 1105,
	1108, 1109, 1106, 1107, 1110, 1111, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1114, 1115, 0, 0, 1117, 0, 1119, 0, 0,
	0, 0, 0, 0, 1179, 0, 0, 1116, 902, 903,
	904, 936, 937, 0, 1000, 1176, 1169, 1002, 0, 1122,
	-2, 1123, 0, 0, 1005, 1010, 1011, 1122, 0, 1164,
	-2, 0, 1216, 0, 894, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 844, 862, 873,
	870, 869, 846, 0, 845, 843, 0, 847, 0, 0,
	0, 0, 0, 583, -2, 585, 0, 597, 0, 686,
	0, 0, 735, 738, 1185, 1189, 1190, 738, 0, 1182,
	0, 0, 0, 0, 784, 784, 784, 782, 758, 0,
	764, 0, -2, 788, 776, 0, -2, 755, 0, 0,
	789, 0, 82, 568, 95, 0, 568, 568, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 778, 1196, 0, 1170, 1171,
	146, 0, 0, 1191, 1175, 470, 0, 0, 534, 0,
	690, 0, 0, 0, 0, 1429, 543, 1229, 618, 0,
	797, 0, 632, 0, 0, 794, 0, 193, 0, 114,
	115, 0, 196, 0, 199, 0, 0, 202, 0, 0,
	0, 0, 1123, 693, 0, 0, 281, 0, 0, 693,
	0, 1125, 805, 806, 807, 808, 809, 894, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 856, 0, 831, 831, 831, 848, 849, 857,
	858, 863, 864, 875, 876, 878, 880, 874, 874, 874,
	871, 872, 778, 0, 0, 0, 0, -2, 321, 0,
	605, 0, 610, 341, 342, 343, 612, 613, 325, 344,
	345, 346, 347, 348, 349, 0, 529, 0, 531, 1222,
	0, 322, 334, 323, 326, 0, 212, 401, 402, 404,
	405, 406, 410, 0, 459, 412, 414, 416, 418, 420,
	428, 432, 693, 438, 441, 445, 446, 447, 448, 0,
	0, 0, 532, 0, 665, 710, 711, 716, 720, 721,
	724, 727, 728, 718, 897, 679, 680, 681, 704, 705,
	555, 0, 0, 298, 898, 801, 802, 850, 851, 852,
	853, 854, 899, 900, 0, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, -2, -2, -2, -2, -2,
	-2, -2, -2, 923, 924, 925, 926, 927, 928, 929,
	930, -2, -2, -2, 934, 935, -2, 1118, 1120, 0,
	1179, 0, -2, 0, -2, -2, -2, -2, 948, 0,
	950, 953, 955, 957, 0, 0, 0, 0, 1178, 967,
	1156, 0, 0, 1097, 1098, 1099, 952, 0, 0, 1177,
	1168, 0, 0, 1121, 1007, 0, 0, 0, 1129, 1163,
	1159, 0, 1014, 703, 0, 0, 0, 0, 1021, 0,
	1225, 881, 882, 883, 884, 885, 886, 895, 1077, 0,
	0, 0, 1028, 1029, 1031, 1032, 1034, 1035, 1038, 1039,
	0, 0, 0, 1045, 0, 1132, -2, -2, -2, -2,
	-2, -2, -2, 0, 1047, 0, 1049, 1123, 1142, 0,
	0, 970, 0, 0, 0, 0, 1448, 0, 1052, 1123,
	1150, 0, 0, 0, 0, 0, 1123, 0, 1155, 0,
	0, 0, 0, 0, 1063, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 454, 0, 596, 688, 0, 0,
	797, 0, 0, 0, 1188, 797, 0, 1184, 0, 0,
	0, 0, 0, 779, 783, 780, 781, 0, 0, 764,
	776, 746, 0, 0, 0, 753, 754, 775, 0, 774,
	763, -2, 0, 0, 0, 0, 0, 567, 97, 1429,
	0, 118, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 1199, 0,
	136, 0, 1206, 0, 0, 0, 0, 0, 469, 1205,
	471, 473, 474, 475, 476, 1230, 0, 1230, 0, 0,
	0, 0, 0, 0, 0, 620, 626, 0, 715, 0,
	644, 634, 0, 0, 0, 644, 648, 649, 651, 652,
	0, 0, 795, 209, 116, 116, 1194, 116, 116, 134,
	206, 264, 0, 216, 256, 0, 0, 0, 258, 0,
	0, 260, 0, 798, 800, 0, 810, 0, 145, 0,
	0, 0, 314, 0, 604, 611, 0, 338, 0, 340,
	530, 1224, 1223, 0, 213, 461, 289, 430, 433, 456,
	457, 458, 792, 0, 722, 0, 0, 719, 725, 726,
	0, 707, 553, 554, 0, 0, 0, -2, -2, 0,
	0, 0, 968, -2, 949, 951, 954, 956, 958, 0,
	0, 0, 0, 0, 0, 0, 969, 1122, 0, 1166,
	1169, -2, 1124, 1127, 1128, 0, 0, 1160, 0, 0,
	0, 0, 702, 703, 703, 703, 1020, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 0,
	1044, 0, 1046, 1048, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 974, 975, 0, 1122, 1051, 1148, 1149, 0, 0,
	0, 0, 0, 0, 1057, 0, 1154, 0, 0, 0,
	1061, 1062, 1064, 0, 829, 0, 855, 877, 879, 867,
	0, 455, 693, 1207, 730, 1186, 778, 737, 739, 1187,
	730, 1183, 766, 0, 768, 0, 0, 0, 770, 0,
	759, 0, 761, 776, 751, 0, 0, 744, 0, 743,
	764, 772, 0, 0, 790, 96, 557, 0, 0, 0,
	99, 1429, 107, 0, 484, 0, 0, 0, 0, 0,
	570, 108, 1429, 116, 1429, 116, 109, 83, 568, 84,
	0, 0, 563, 0, 0, 556, 85, 0, 565, 0,
	0, 145, 0, 0, 147, 0, 1192, 478, 511, 0,
	0, 1230, 0, 467, 512, 537, -2, 539, 0, 0,
	622, 626, 0, 625, 691, 644, 714, 796, 627, 644,
	0, 0, 0, 636, 633, 630, 797, 0, 0, 0,
	0, 194, 197, 200, 203, 1124, 271, 0, 0, 1126,
	0, 803, 0, 0, 125, 0, 273, 311, 312, 317,
	336, 337, 339, 335, 0, 0, 0, 706, 555, 0,
	901, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1157, 0, 0, 0, 1168, -2, 1130, 1158, 1162, 0,
	1015, 0, 0, 0, 0, 1218, 887, 888, 889, 890,
	891, 892, 893, 0, 1075, 1076, 1080, 0, 0, 1026,
	0, 0, 1131, 1141, 1143, 971, 972, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, -2, -2, -2,
	989, 990, 991, -2, -2, -2, 0, 0, 0, 1144,
	0, 0, 1146, 1147, 1151, 1152, 0, 1054, 1055, 1056,
	1153, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	732, 0, 736, 0, 732, 767, 0, 786, 769, 749,
	760, 0, 757, 747, 0, 748, 0, 776, 0, 0,
	756, 0, 0, 0, 0, 117, 482, 501, 0, 0,
	546, 552, 552, 0, 1024, 1025, 0, 0, 0, 101,
	0, 0, 0, 0, 105, 0, 111, 0, 0, 0,
	90, 0, 0, 0, 0, 89, 0, 0, 88, 123,
	0, 0, 148, 465, 0, 472, 0, 0, 0, 470,
	0, 535, 0, 0, 624, 626, 0, 617, 618, 173,
	628, 642, 643, 641, 0, 644, 650, 647, 653, 0,
	0, 127, 0, 0, 804, 811, 143, 1321, 141, 138,
	140, 290, 717, 723, 708, 555, 0, 0, -2, 0,
	961, -2, -2, 1093, 1124, 1167, 1161, 1215, 703, 1016,
	1018, 1019, 896, 1082, 1079, 0, 1066, 1042, 1043, 1140,
	0, 0, 0, 0, 1124, 1095, 1053, 0, 1059, 1060,
	830, 451, 452, 453, 689, 1071, 0, 0, 740, 1071,
	0, 764, 762, 745, 741, 0, 752, 0, 773, 559,
	561, 98, 0, 483, 0, 486, 0, 0, 0, 0,
	492, 493, 0, 0, 0, 0, 503, 510, 0, 555,
	1210, 0, 555, 0, 0, 0, 0, 0, 113, 0,
	0, 569, 0, 116, 116, 558, 0, 0, 0, 0,
	564, 0, 566, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 626, 0, 619, 620, 0, 0,
	0, 635, 645, 0, 0, 0, 799, 0, 0, 0,
	0, 709, -2, -2, 962, 1094, 0, 703, 0, 1068,
	-2, 0, 0, 0, 1096, 0, 676, 0, 731, 729,
	677, 785, 776, 0, 771, 100, 0, 487, 488, 1230,
	0, 491, 494, 0, 496, 1232, 478, 0, 507, 508,
	547, 548, 551, 549, 552, 703, 505, 0, 102, 103,
	112, 120, 104, 110, 0, 0, 703, 0, 0, 777,
	0, 510, 0, 500, 478, 468, 510, 0, 0, 621,
	622, 0, 0, 0, 654, 655, 0, 0, 0, 142,
	0, 137, 139, 1017, 1085, 0, -2, 0, 997, 1058,
	1070, 1072, 0, 750, 742, 485, 489, 0, 0, 516,
	0, 504, 0, 555, 0, 0, 122, 0, 560, 562,
	0, 0, 0, 0, 478, 510, 466, 478, 0, 623,
	624, 0, 638, 797, 640, 0, 0, 144, 0, 0,
	0, 1081, 998, 0, 0, 0, 495, 521, 0, 0,
	0, 550, 1015, 512, 106, 0, 119, 0, 0, 0,
	0, 498, 478, 541, 0, 615, 0, 639, 145, 145,
	1078, 1083, 1086, -2, 1389, 1268, 0, 1084, 1073, 1074,
	0, 497, 517, 518, 0, 513, 514, 515, 1231, 509,
	516, 121, 92, 94, 0, 499, 510, 797, 128, 129,
	0, 1088, 1089, 1090, 1091, 1092, 490, 519, 0, 520,
	0, 0, 0, 521, 481, 478, 637, 0, 522, 0,
	525, 526, 0, 523, 506, 477, 479, 480, 542, 1087,
	524, 527, 528,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 360, 3, 366, 361, 3,
	371, 372, 364, 362, 376, 363, 373, 365, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 380, 375,
	350, 352, 351, 354, 377, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 369, 3, 370, 367, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 378, 359, 379, 357,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 353, 57693, 355, 57694, 356,
	57695, 358, 57696, 368, 57697, 374, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:869
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1045
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1051
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1057
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1066
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1167
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1177
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = nil
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = DropCascade
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = DropRestrict
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = DropDefault
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1240
		{
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			return unimplemented(sqllex, "alter using")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1244
		{
		}
	case 123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.str = "CSV"
		}
	case 128:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1404
		{
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "CREATE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "DROP")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1605
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "DELETE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "INSERT")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{ /* SKIP DOC */
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			return helpWith(sqllex, "GRANT")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "RESET")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			return helpWith(sqllex, "RESET")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1927
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1941
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{ /* SKIP DOC */
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{ /* SKIP DOC */
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			return unimplemented(sqllex, "set local")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2015
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			return unimplemented(sqllex, "set from current")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = Low
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = Normal
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = High
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return helpWith(sqllex, "SHOW")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.str = "client_encoding"
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2389
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2437
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2441
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2445
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2453
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2459
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2463
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = DropDefault
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			return unimplemented(sqllex, "match full")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			return unimplemented(sqllex, "match partial")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			return unimplemented(sqllex, "match simple")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2822
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2829
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2832
		{
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			return unimplemented(sqllex, "no action")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			return unimplemented(sqllex, "action set null")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			return unimplemented(sqllex, "action set default")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = nil
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = true
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = false
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2983
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = Ascending
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = Descending
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3027
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3029
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = true
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = false
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3063
		{
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.str = ""
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3223
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = ReadOnly
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = ReadWrite
		}
	case 614:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.str = ""
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.str = ""
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.str = ""
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.str = ""
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3331
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3355
		{
			return helpWith(sqllex, "INSERT")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3414
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 645:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3454
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			return helpWith(sqllex, "SELECT")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			return helpWith(sqllex, "VALUES")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			return helpWith(sqllex, "TABLE")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			return helpWith(sqllex, "SELECT")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			return helpWith(sqllex, "TABLE")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3730
		{
			return unimplemented(sqllex, "cte")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3738
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3742
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = true
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = false
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = false
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = true
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3766
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3952
		{
			return helpWith(sqllex, "VALUES")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &From{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3991
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4036
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4073
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = nil
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = false
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.str = astFullJoin
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.str = astLeftJoin
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.str = astRightJoin
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.str = astInnerJoin
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4256
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4257
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4343
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4357
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4365
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4400
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4481
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = nil
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4555
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4651
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4683
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4723
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = year
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = month
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = day
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = hour
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = minute
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = month
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = hour
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = minute
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = minute
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = nil
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = second
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4818
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4853
		{
			return unimplemented(sqllex, "at tz")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5127
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5300
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5353
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5354
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5378
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5399
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5427
		{
			return unimplemented(sqllex, "current role")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5476
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5477
		{
			return unimplemented(sqllex, "treat")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5519
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5523
		{
			return unimplemented(sqllex, "within group")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5524
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5559
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.str = ""
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5623
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5627
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5633
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5634
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5635
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5636
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5637
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = Any
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = Some
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = All
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Plus
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Minus
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = Mult
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = Div
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = Mod
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Bitand
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Bitor
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = Pow
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = Bitxor
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = LT
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = GT
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = EQ
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = LE
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = GE
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = NE
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = Like
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = NotLike
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = ILike
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = NotILike
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5993
		{
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6111
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6155
		{
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6191
		{
			return unimplemented(sqllex, "func const")
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6200
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = DNull
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6217
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6227
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.str = ""
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
